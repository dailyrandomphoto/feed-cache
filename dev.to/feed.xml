<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>7 best practices for building containers</title>
      <author>Sergii Lischuk</author>
      <pubDate>Thu, 04 Nov 2021 15:24:38 +0000</pubDate>
      <link>https://dev.to/leefrost/7-best-practices-for-building-containers-2lf7</link>
      <guid>https://dev.to/leefrost/7-best-practices-for-building-containers-2lf7</guid>
      <description>&lt;p&gt;Development was always a way of evolution. The evolution of modern programming development brings a lot of techniques and requirements - its hard to imagine today’s programming without high-level frameworks, containers, cloud computing or special data storages (even if they are not necessary). Working with some of them, I would like to share small notes about the containerization, especially with Docker containers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-best-practices-for-building-containers"&gt;
  &lt;/a&gt;
  7 best practices for building containers
&lt;/h2&gt;

&lt;p&gt;Kubernetes Engine is a great place to run your workloads at scale. But before being able to use Kubernetes, you need to containerize your applications. You can run most applications in a Docker container without too much hassle. However, effectively running those containers in production and streamlining the build process is another story. There are a number of things to watch out for that will make your security and operations teams happier. This post provides tips and best practices to help you effectively build containers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-package-a-single-application-per-container"&gt;
  &lt;/a&gt;
  1. Package a single application per container
&lt;/h3&gt;

&lt;p&gt;A container works best when a single application runs inside it. This application should have a single parent process. For example, do not run PHP and MySQL in the same container: it’s harder to debug, Linux signals will not be properly handled, you can’t horizontally scale the PHP containers, etc. This allows you to tie together the lifecycle of the application to that of the container.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-properly-handle-pid-1-signal-handling-and-zombie-processes"&gt;
  &lt;/a&gt;
  2. Properly handle PID 1, signal handling, and zombie processes
&lt;/h3&gt;

&lt;p&gt;Kubernetes and Docker send Linux signals to your application inside the container to stop it. They send those signals to the process with the process identifier (PID) 1. If you want your application to stop gracefully when needed, you need to properly handle those signals.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-optimize-for-the-docker-build-cache"&gt;
  &lt;/a&gt;
  3. Optimize for the Docker build cache
&lt;/h3&gt;

&lt;p&gt;Docker can cache layers of your images to accelerate later builds. This is a very useful feature, but it introduces some behaviors that you need to take into account when writing your Dockerfiles. For example, you should add the source code of your application as late as possible in your Dockerfile so that the base image and your application’s dependencies get cached and aren’t rebuilt on every build.&lt;/p&gt;

&lt;p&gt;Take this Dockerfile as example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.5&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; my_code src&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;my_requirements
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should swap the last two lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; python:3.5&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;my_requirements
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; my_code src&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the new version, the result of the pip command will be cached and will not be rerun each time the source code changes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-remove-unnecessary-tools"&gt;
  &lt;/a&gt;
  4. Remove unnecessary tools
&lt;/h3&gt;

&lt;p&gt;Reducing the attack surface of your host system is always a good idea, and it’s much easier to do with containers than with traditional systems. Remove everything that the application doesn’t need from your container. Or better yet, include just your application in a "distroless" or scratch image. You should also, if possible, make the filesystem of the container read-only. This should get you some excellent feedback from your security team during your performance review.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-build-the-smallest-image-possible"&gt;
  &lt;/a&gt;
  5. Build the smallest image possible
&lt;/h3&gt;

&lt;p&gt;Who likes to download hundreds of megabytes of useless data? Aim to have the smallest images possible. This decreases download times, cold start times, and disk usage. You can use several strategies to achieve that: start with a minimal base image, leverage common layers between images and make use of Docker’s multi-stage build feature.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-properly-tag-your-images"&gt;
  &lt;/a&gt;
  6. Properly tag your images
&lt;/h3&gt;

&lt;p&gt;Tags are how the users choose which version of your image they want to use. There are two main ways to tag your images: Semantic Versioning, or using the Git commit hash of your application. Whichever your choose, document it and clearly set the expectations that the users of the image should have. Be careful: while users expect some tags —like the “latest” tag— to move from one image to another, they expect other tags to be immutable, even if they are not technically so. For example, once you have tagged a specific version of your image, with something like “1.2.3”, you should never move this tag.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-carefully-consider-whether-to-use-a-public-image"&gt;
  &lt;/a&gt;
  7. Carefully consider whether to use a public image
&lt;/h3&gt;

&lt;p&gt;Using public images can be a great way to start working with a particular piece of software. However, using them in production can come with a set of challenges, especially in a high-constraint environment. You might need to control what’s inside them, or you might not want to depend on an external repository, for example. On the other hand, building your own images for every piece of software you use is not trivial, particularly because you need to keep up with the security updates of the upstream software. Carefully weigh the pros and cons of each for your particular use-case, and make a conscious decision.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>beginners</category>
    </item>
    <item>
      <title>40+ ReactJS Projects for Beginners – Easy Ideas to Get Started Coding [Beginners - Advance] </title>
      <author>John</author>
      <pubDate>Thu, 04 Nov 2021 15:12:29 +0000</pubDate>
      <link>https://dev.to/jdkz/40-reactjs-projects-for-beginners-easy-ideas-to-get-started-coding-beginners-advance-3886</link>
      <guid>https://dev.to/jdkz/40-reactjs-projects-for-beginners-easy-ideas-to-get-started-coding-beginners-advance-3886</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/tag/reactjs-projects-for-beginners/&amp;amp;ved=2ahUKEwjAyN6D__7zAhWDf30KHcKYCAUQFnoECDIQAQ&amp;amp;usg=AOvVaw3aSVrBBd-RROVGkfKEip0e" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More : &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/tag/reactjs-projects-for-beginners/&amp;amp;ved=2ahUKEwjAyN6D__7zAhWDf30KHcKYCAUQFnoECDIQAQ&amp;amp;usg=AOvVaw3aSVrBBd-RROVGkfKEip0e"&gt;40+ ReactJS Projects for Beginners – Easy Ideas to Get Started Coding&lt;/a&gt;&lt;/b&gt;  &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Getting Started with Gatsby.js</title>
      <author>Max Anselmo</author>
      <pubDate>Thu, 04 Nov 2021 14:54:25 +0000</pubDate>
      <link>https://dev.to/themanselmo/getting-started-with-gatsbyjs-2m7i</link>
      <guid>https://dev.to/themanselmo/getting-started-with-gatsbyjs-2m7i</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is Gatsby?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Gatsby is a &lt;em&gt;static site generator&lt;/em&gt;, which means that it produces &lt;em&gt;static html files&lt;/em&gt; that we serve to the viewers of our application. Gatsby will not necessarily be running on our final application, however it will &lt;em&gt;GENERATE&lt;/em&gt; that application that will be deployed!&lt;/p&gt;

&lt;p&gt;Just because it's a "static" site, that does not mean the site isn't interactive or responsive. We can put &lt;em&gt;Javascript&lt;/em&gt; files into the pages that Gatsby serves, make api calls, do interactions, and build rich and immersive pages.&lt;/p&gt;

&lt;p&gt;Gatsby uses &lt;em&gt;node.js&lt;/em&gt; to help generate the static files that it serves up to the user.&lt;/p&gt;

&lt;p&gt;To source data, Gatsby uses another technology called &lt;em&gt;graphql&lt;/em&gt; (graphql is a technology that makes api calls simpler and more efficient, as well as allowing us to source data from a variety of sources! This allows us to take in data from markdown files, CMS's (Wordpress, etc), access databases,  and more!&lt;/p&gt;

&lt;p&gt;Gatsby is built on top of React, which allows us to take advantage of React's modularity and templating abilities, making it easier to keep our code organized and reusable.&lt;/p&gt;

&lt;p&gt;Gatsby is also built with a plugin architecture in mind, allowing &lt;br&gt;
users to develop and share their own tools for everyone to use!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XhDFB7Fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5oit8pd1vgj8vfgk74ak.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XhDFB7Fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5oit8pd1vgj8vfgk74ak.jpeg" alt="Image description" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Use Gatsby?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Speed&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since Gatsby pages are static, they are WAY faster than other options.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Security&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Since we are just shipping static html pages, should a hacker get into our application they will only have access to those static pages and wont be able to do as much damage compared to if they got into a Wordpress site or access to user information.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Dev Experience&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Programming with Gatsby involves working with a modern development environment. Gatsby's tools are 'simple' to use (compared to more antiquated technologies), the languages are clean and tidy, and the open source, great documentation and tutorials provided by the Gatsby team and community are amazing resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lets make a &lt;em&gt;basic&lt;/em&gt; Gatsby app&lt;/p&gt;

&lt;p&gt;Go into your terminal and run &lt;code&gt;npm install -g gatsby-cli&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This installs the necessary commands on your machine to create and work with a Gatsby application in the command line.&lt;/p&gt;

&lt;p&gt;To verify the Gatsby cli has been installed, run &lt;code&gt;Gatsby --version&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If some output like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Gatsby CLI version: [version number]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is displayed, you're good to go!&lt;/p&gt;

&lt;p&gt;Now to create our boilerplate Gatsby Application.&lt;br&gt;
Run &lt;code&gt;gatsby new&lt;/code&gt; &lt;br&gt;
You will be prompted to enter your applications name, as well as to configure a few other things.&lt;br&gt;
Once that is done loading up, your app is ready to go!&lt;/p&gt;

&lt;p&gt;Now &lt;code&gt;cd&lt;/code&gt; into your newly created app, and run &lt;code&gt;gatsby develop&lt;/code&gt;,&lt;br&gt;
this will start your local development server for your application.&lt;br&gt;
You should see this message indicating everything's up and running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;You can now view [YOUR-APP-NAME] in the browser.
⠀
  http://localhost:8000/
⠀
View GraphiQL, an in-browser IDE, to explore your site's data and
schema
⠀
  http://localhost:8000/___graphql
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to &lt;code&gt;http://localhost:8000/&lt;/code&gt; in your browser, and you should be seeing your freshly generated Gatsby site!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hP2f5lJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rksff5n9gs60vzmrhtg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hP2f5lJH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rksff5n9gs60vzmrhtg.png" alt="Image description" width="786" height="592"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You now have your own running Gatsby Application ready to be customized and flushed out to your hearts content.&lt;/p&gt;

&lt;p&gt;Links to more sources on Gatsby&lt;br&gt;
&lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby Home Site&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>gatsby</category>
    </item>
    <item>
      <title>Real-time stock price dashboard using QuestDB, Python and Plotly</title>
      <author>Gábor Boros</author>
      <pubDate>Thu, 04 Nov 2021 14:40:40 +0000</pubDate>
      <link>https://dev.to/gaborboros/real-time-stock-price-dashboard-using-questdb-python-and-plotly-b4i</link>
      <guid>https://dev.to/gaborboros/real-time-stock-price-dashboard-using-questdb-python-and-plotly-b4i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-plotly-and-dash-are-useful-for-realtime-applications"&gt;
  &lt;/a&gt;
  Why Plotly and Dash are useful for real-time applications
&lt;/h2&gt;

&lt;p&gt;If you're working with large amounts of data, efficiently storing raw information will be your first obstacle. The next challenge is to make sense of the data utilizing analytics. One of the fastest ways to convey the state of&lt;br&gt;
data is through charts and graphs.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will create a real-time streaming dashboard using QuestDB, Celery, Redis, Plotly, and Dash. It will be a fun project with excellent charts to quickly understand the state of a system with beautiful data visualizations.&lt;/p&gt;

&lt;p&gt;Plotly defines itself as "the front end for ML and data science models", which describes it really well. Plotly has an "app framework" called Dash which we can use to create web applications quickly and efficiently. Dash abstracts away the boilerplate needed to set up a web server and several handlers for it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#project-overview"&gt;
  &lt;/a&gt;
  Project overview
&lt;/h2&gt;

&lt;p&gt;The project will be built from two main components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a backend that periodically fetches user-defined stock data from &lt;a href="https://finnhub.io/"&gt;Finnhub&lt;/a&gt;, and&lt;/li&gt;
&lt;li&gt;a front-end that utilizes Plotly and Dash to visualize the gathered data on interactive charts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this tutorial, you will need some experience in Python and basic SQL knowledge. We will use Celery backed by Redis as the message broker and QuestDB as storage to periodically fetch data.&lt;/p&gt;

&lt;p&gt;Let's see the prerequisites and jump right in!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Python 3.8&lt;/li&gt;
&lt;li&gt;Docker &amp;amp; Docker Compose&lt;/li&gt;
&lt;li&gt;Finnhub account and sandbox API key&lt;/li&gt;
&lt;li&gt;Basic SQL skills&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code for this tutorial is available at the corresponding &lt;a href="https://github.com/gabor-boros/questdb-stock-market-dashboard"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#environment-setup"&gt;
  &lt;/a&gt;
  Environment setup
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#create-a-new-project"&gt;
  &lt;/a&gt;
  Create a new project
&lt;/h3&gt;

&lt;p&gt;First of all, we are going to create empty directories for our project root and the Python module:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; streaming-dashboard/app
&lt;span class="c"&gt;# streaming-dashboard&lt;/span&gt;
&lt;span class="c"&gt;# └── app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#installing-questdb-amp-redis"&gt;
  &lt;/a&gt;
  Installing QuestDB &amp;amp; Redis
&lt;/h3&gt;

&lt;p&gt;To install the services required for our project, we are using Docker and Docker Compose to avoid polluting our host machine. Within the project root, let's create a file, called docker-compose.yml. This file describes all the necessary requirements the project will use; later on we will extend this file with other services too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3"&lt;/span&gt;

&lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;questdb_data&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;{}&lt;/span&gt;

&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;redis&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;redis:latest"&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;6379:6379"&lt;/span&gt;

  &lt;span class="na"&gt;questdb&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;questdb/questdb:latest"&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;questdb_data:/root/.questdb/db&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;9000:9000"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;8812:8812"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we go! When you run &lt;code&gt;docker-compose up&lt;/code&gt;, QuestDB and Redis will fire up. After starting the services, we can access QuestDB's interactive console on &lt;a href="http://127.0.0.1:9000/"&gt;http://127.0.0.1:9000&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-database-table"&gt;
  &lt;/a&gt;
  Create the database table
&lt;/h3&gt;

&lt;p&gt;We could create the database table later, but we will take this opportunity and create the table now since we have already started QuestDB. Connect to QuestDB's interactive console, and run the following SQL statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt;
      &lt;span class="n"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stock_symbol&lt;/span&gt; &lt;span class="n"&gt;SYMBOL&lt;/span&gt; &lt;span class="n"&gt;CAPACITY&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="k"&gt;CACHE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;-- we are in fact just checking 3&lt;/span&gt;
             &lt;span class="n"&gt;current_price&lt;/span&gt; &lt;span class="nb"&gt;DOUBLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;high_price&lt;/span&gt; &lt;span class="nb"&gt;DOUBLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;low_price&lt;/span&gt; &lt;span class="nb"&gt;DOUBLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;open_price&lt;/span&gt; &lt;span class="nb"&gt;DOUBLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;percent_change&lt;/span&gt; &lt;span class="nb"&gt;DOUBLE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;tradets&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;-- timestamp of the trade&lt;/span&gt;
             &lt;span class="n"&gt;ts&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      &lt;span class="c1"&gt;-- time of insert in our table&lt;/span&gt;
      &lt;span class="nb"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;PARTITION&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="k"&gt;DAY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After executing the command, we will see a success message in the bottom left corner, confirming that the table creation was successful and the table appears on the right-hand side's table list view.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q0calH1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gabor-boros/questdb-stock-market-dashboard/raw/main/images/Screenshot-2021-10-26-at-17.15.22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q0calH1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gabor-boros/questdb-stock-market-dashboard/raw/main/images/Screenshot-2021-10-26-at-17.15.22.png" alt="img" width="880" height="213"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Voilá! The table is ready for use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-workers-using-celery"&gt;
  &lt;/a&gt;
  Creating workers using Celery
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#define-python-dependencies"&gt;
  &lt;/a&gt;
  Define Python dependencies
&lt;/h3&gt;

&lt;p&gt;As mentioned, our project will have two parts. For now, let's focus on the routine jobs that will fetch the data from Finnhub. As is the case of every standard Python project, we are using requirements.txt to define the dependencies the project will use. Place the requirements.txt in your project root with the content below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;finnhub-python==2.4.5   # The official Finnhub Python client
pydantic[dotenv]==1.8.2 # We will use Pydantic to create data models
celery[redis]==5.1.2    # Celery will be the periodic task executor
psycopg2==2.9.1         # We are using QuestDB's PostgreSQL connector
sqlalchemy==1.4.2       # SQLAlchemy will help us executing SQL queries
dash==2.0.0             # Dash is used for building data apps
pandas==1.3.4           # Pandas will handle the data frames from QuestDB
plotly==5.3.1           # Plotly will help us with beautiful charts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can split the requirements into two logical groups:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;requirements for fetching the data, and&lt;/li&gt;
&lt;li&gt;requirements needed to visualize this data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For the sake of simplicity, we did not create two separate requirements files, though in a production environment we would do. Create a virtualenv and install the dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nt"&gt;-p&lt;/span&gt; python3.8 virtualenv
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;virtualenv/bin/activate
&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-up-the-db-connection"&gt;
  &lt;/a&gt;
  Setting up the DB connection
&lt;/h3&gt;

&lt;p&gt;Since the periodic tasks would need to store the fetched quotes, we need to connect to QuestDB. Therefore, we create a new file in the &lt;code&gt;app&lt;/code&gt; package, called &lt;code&gt;db.py&lt;/code&gt;. This file contains the &lt;code&gt;SQLAlchemy&lt;/code&gt; engine that will serve as the base for our connections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;database_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pool_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;database_pool_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pool_pre_ping&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#define-the-worker-settings"&gt;
  &lt;/a&gt;
  Define the worker settings
&lt;/h3&gt;

&lt;p&gt;Before we jump right into the implementation, we must configure Celery. To create a configuration used by both the workers and the dashboard, create a &lt;code&gt;settings.py&lt;/code&gt; file in the &lt;code&gt;app&lt;/code&gt; package. We will use &lt;code&gt;pydantic&lt;/code&gt;'s BaseSettings to define the configuration. This helps us to read the settings from a &lt;code&gt;.env&lt;/code&gt; file, environment variable, and prefix them if needed.&lt;/p&gt;

&lt;p&gt;Ensuring that we do not overwrite any other environment variables, we will set the prefix to &lt;code&gt;SMD&lt;/code&gt; that stands for "stock market dashboard", our application. Below you can see the settings file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pydantic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BaseSettings&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseSettings&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Settings of the application, used by workers and dashboard.
    """&lt;/span&gt;

    &lt;span class="c1"&gt;# Celery settings
&lt;/span&gt;    &lt;span class="n"&gt;celery_broker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"redis://127.0.0.1:6379/0"&lt;/span&gt;

    &lt;span class="c1"&gt;# Database settings
&lt;/span&gt;    &lt;span class="n"&gt;database_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"postgresql://admin:quest@127.0.0.1:8812/qdb"&lt;/span&gt;
    &lt;span class="n"&gt;database_pool_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

    &lt;span class="c1"&gt;# Finnhub settings
&lt;/span&gt;    &lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
    &lt;span class="n"&gt;frequency&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="c1"&gt;# default stock data fetch frequency in seconds
&lt;/span&gt;    &lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Dash/Plotly
&lt;/span&gt;    &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="n"&gt;graph_interval&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""
        Meta configuration of the settings parser.
        """&lt;/span&gt;

        &lt;span class="n"&gt;env_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;".env"&lt;/span&gt;
        &lt;span class="c1"&gt;# Prefix the environment variable not to mix up with other variables
&lt;/span&gt;        &lt;span class="c1"&gt;# used by the OS or other software.
&lt;/span&gt;        &lt;span class="n"&gt;env_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"SMD_"&lt;/span&gt;  &lt;span class="c1"&gt;# SMD stands for Stock Market Dashboard
&lt;/span&gt;

&lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Settings&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the settings, you can notice we already defined the &lt;code&gt;celery_broker&lt;/code&gt; and &lt;code&gt;database_url&lt;/code&gt; settings with unusual default values.&lt;/p&gt;

&lt;p&gt;Some bits are missing at the moment. We still have to define the correct settings and run the worker in a Docker container. Get started with the settings!&lt;/p&gt;

&lt;p&gt;To keep our environment separated, we will use a &lt;code&gt;.env&lt;/code&gt; file. One of &lt;code&gt;pydantic&lt;/code&gt; based settings' most significant advantage is that it can read environment variables from &lt;code&gt;.env&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;Let's create a &lt;code&gt;.env&lt;/code&gt; file in the project root, next to &lt;code&gt;docker-compose.yml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SMD_API_KEY = "&amp;lt;YOUR SANDBOX API KEY&amp;gt;"
SMD_FREQUENCY = 10
SMD_SYMBOLS = ["AAPL","DOCN","EBAY"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you may assume, you will need to get your API key for the sandbox environment at this step. To retrieve the key, the only thing you have to do is sign up to Finnhub, and your API key will appear on the dashboard after login.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T4aY1vGJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gabor-boros/questdb-stock-market-dashboard/raw/main/images/Screenshot-2021-10-26-at-17.28.44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4aY1vGJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gabor-boros/questdb-stock-market-dashboard/raw/main/images/Screenshot-2021-10-26-at-17.28.44.png" alt="img" width="880" height="507"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-periodic-task"&gt;
  &lt;/a&gt;
  Create the periodic task
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;finnhub&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;finnhub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;celery_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;celery_broker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;celery_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_after_configure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup_periodic_tasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Setup a periodic task for every symbol defined in the settings.
    """&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_periodic_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frequency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;celery_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Fetch the stock info for a given symbol from Finnhub and load it into QuestDB.
    """&lt;/span&gt;

    &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# https://finnhub.io/docs/api/quote
&lt;/span&gt;    &lt;span class="c1"&gt;#  quote = {'c': 148.96, 'd': -0.84, 'dp': -0.5607, 'h': 149.7, 'l': 147.8, 'o': 148.985, 'pc': 149.8, 't': 1635796803}
&lt;/span&gt;    &lt;span class="c1"&gt;# c: Current price
&lt;/span&gt;    &lt;span class="c1"&gt;# d: Change
&lt;/span&gt;    &lt;span class="c1"&gt;# dp: Percent change
&lt;/span&gt;    &lt;span class="c1"&gt;# h: High price of the day
&lt;/span&gt;    &lt;span class="c1"&gt;# l: Low price of the day
&lt;/span&gt;    &lt;span class="c1"&gt;# o: Open price of the day
&lt;/span&gt;    &lt;span class="c1"&gt;# pc: Previous close price
&lt;/span&gt;    &lt;span class="c1"&gt;# t: when it was traded
&lt;/span&gt;    &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"""
    INSERT INTO quotes(stock_symbol, current_price, high_price, low_price, open_price, percent_change, tradets, ts)
    VALUES(
        '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;',
        &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,
        &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"h"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,
        &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"l"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,
        &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"o"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,
        &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"pc"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,
        &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; * 1000000,
        systimestamp()
    );
    """&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Going through the code above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;finnhub&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;celery&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="c1"&gt;# [...]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first few lines, we import the requirements that are needed to fetch and store the data.&lt;/p&gt;

&lt;p&gt;After importing the requirements, we configure the Finnhub client and Celery to use the Redis broker we defined in the application settings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# [...]
&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;finnhub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;celery_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;broker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;celery_broker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# [...]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To fetch the data periodically per stock symbol, we need to programmatically&lt;br&gt;
create a periodic task for every symbol we defined in the settings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# [...]
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;celery_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;on_after_configure&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup_periodic_tasks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Setup a periodic task for every symbol defined in the settings.
    """&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_periodic_task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frequency&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# [...]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet above will register a new periodic per stock symbol after Celery is connected to the broker.&lt;/p&gt;

&lt;p&gt;The last step is to define the &lt;code&gt;fetch&lt;/code&gt; task that does the majority of the work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# [...]
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;celery_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""
    Fetch the stock info for a given symbol from Finnhub and load it into QuestDB.
    """&lt;/span&gt;

    &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# https://finnhub.io/docs/api/quote
&lt;/span&gt;    &lt;span class="c1"&gt;#  quote = {'c': 148.96, 'd': -0.84, 'dp': -0.5607, 'h': 149.7, 'l': 147.8, 'o': 148.985, 'pc': 149.8, 't': 1635796803}
&lt;/span&gt;    &lt;span class="c1"&gt;# c: Current price
&lt;/span&gt;    &lt;span class="c1"&gt;# d: Change
&lt;/span&gt;    &lt;span class="c1"&gt;# dp: Percent change
&lt;/span&gt;    &lt;span class="c1"&gt;# h: High price of the day
&lt;/span&gt;    &lt;span class="c1"&gt;# l: Low price of the day
&lt;/span&gt;    &lt;span class="c1"&gt;# o: Open price of the day
&lt;/span&gt;    &lt;span class="c1"&gt;# pc: Previous close price
&lt;/span&gt;    &lt;span class="c1"&gt;# t: when it was traded
&lt;/span&gt;
    &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"""
    INSERT INTO quotes(stock_symbol, current_price, high_price, low_price, open_price, percent_change, tradets, ts)
    VALUES(
        '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;',
        &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"c"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,
        &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"h"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,
        &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"l"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,
        &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"o"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,
        &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"pc"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;,
        &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"t"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; * 1000000,
        systimestamp()
    );
    """&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the Finnhub &lt;code&gt;client&lt;/code&gt;, we get a quote for the given symbol. After the quote is retrieved successfully, we prepare a SQL query to insert the quote into the database. At the end of the function, as the last step, we open a connection to QuestDB and insert the new quote.&lt;/p&gt;

&lt;p&gt;Congratulations! The worker is ready for use; let's try it out!&lt;/p&gt;

&lt;p&gt;Execute the command below in a new terminal window within the virtualenv, and wait some seconds to let Celery kick in:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python &lt;span class="nt"&gt;-m&lt;/span&gt; celery &lt;span class="nt"&gt;--app&lt;/span&gt; app.worker.celery_app worker &lt;span class="nt"&gt;--beat&lt;/span&gt; &lt;span class="nt"&gt;-l&lt;/span&gt; info &lt;span class="nt"&gt;-c&lt;/span&gt; 1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Soon, you will see that the tasks are scheduled, and the database is slowly&lt;br&gt;
filling.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#checking-in-on-what-weve-built-so-far"&gt;
  &lt;/a&gt;
  Checking in on what we've built so far
&lt;/h3&gt;

&lt;p&gt;Before proceeding to the visualization steps, let's have a look at what we have built so far:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;we created the project root&lt;/li&gt;
&lt;li&gt;a &lt;code&gt;docker-compose.yml&lt;/code&gt; file to manage related services&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/settings.py&lt;/code&gt; that handles our application configuration&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;app/db.py&lt;/code&gt; configuring the database engine, and&lt;/li&gt;
&lt;li&gt;last but not least, &lt;code&gt;app/worker.py&lt;/code&gt; that handles the hard work, fetches, and stores the data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point, we should have the following project structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── app
│   ├── __init__.py
│   ├── db.py
│   ├── settings.py
│   └── worker.py
└── docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#visualize-the-data-with-plotly-and-dash"&gt;
  &lt;/a&gt;
  Visualize the data with Plotly and Dash
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#getting-static-assets"&gt;
  &lt;/a&gt;
  Getting static assets
&lt;/h3&gt;

&lt;p&gt;This tutorial is not about writing the necessary style sheets or collecting static assets, so you only need to copy-paste some code. As the first step, create an &lt;code&gt;assets&lt;/code&gt; directory next to the &lt;code&gt;app&lt;/code&gt; package with the structure below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── app
│   ├── __init__.py
│   ├── db.py
│   ├── settings.py
│   └── worker.py
├── assets
├── .env
├── docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;style.css&lt;/code&gt; will define the styling for our application. As mentioned above, Dash will save us from boilerplate code, so the &lt;code&gt;assets&lt;/code&gt; directory will be used by default in conjunction with the stylesheet in it.&lt;/p&gt;

&lt;p&gt;Download the &lt;code&gt;style.css&lt;/code&gt; file to the &lt;code&gt;assets&lt;/code&gt; directory, this can be done using &lt;code&gt;curl&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Lo&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;assets&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;githubusercontent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gabor&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;boros&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;questdb&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;stock&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;market&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dashboard&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;assets&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-up-the-application"&gt;
  &lt;/a&gt;
  Setting up the application
&lt;/h3&gt;

&lt;p&gt;This is the most interesting part of the tutorial. We are going to visualize the data we collect. Create a &lt;code&gt;main.py&lt;/code&gt; file in the &lt;code&gt;app&lt;/code&gt; package, and let's begin with the imports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dash&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dash&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dcc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dash.dependencies&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Output&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;plotly&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;graph_objects&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="c1"&gt;# [...]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After having the imports in place, we are defining some helper functions and constants.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# [...]
&lt;/span&gt;
&lt;span class="n"&gt;GRAPH_INTERVAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;graph_interval&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;

&lt;span class="n"&gt;TIME_DELTA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;  &lt;span class="c1"&gt;# last T hours of data are looked into as per insert time
&lt;/span&gt;
&lt;span class="n"&gt;COLORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"#1e88e5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"#7cb342"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"#fbc02d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"#ab47bc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"#26a69a"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"#5d8aa8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_stock_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stock_symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;format_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isoformat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timespec&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"microseconds"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"Z"&lt;/span&gt;

    &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"quotes WHERE ts BETWEEN '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;format_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;' AND '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;format_date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'"&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;stock_symbol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;" AND stock_symbol = '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;stock_symbol&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;' "&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pandas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_sql_query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# [...]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first few lines, we define constants for setting a graph update frequency (&lt;code&gt;GRAPH_INTERVAL&lt;/code&gt;) and colors that will be used for coloring the graph (&lt;code&gt;COLORS&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;After that, we define two helper functions, &lt;code&gt;now&lt;/code&gt; and &lt;code&gt;get_stock_data&lt;/code&gt;. While &lt;code&gt;now&lt;/code&gt; is responsible only for getting the current time in UTC (as Finnhub returns the date in UTC too), the &lt;code&gt;get_stock_data&lt;/code&gt; does more. It is the core of&lt;br&gt;
our front-end application, it fetches the stock data from QuestDB that workers inserted.&lt;/p&gt;

&lt;p&gt;Define the initial data frame and the application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# [...]
&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_stock_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TIME_DELTA&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Real-time stock market changes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;assets_folder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"../assets"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;meta_tags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"viewport"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="p"&gt;}],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# [...]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see above, the initial data frame (&lt;code&gt;df&lt;/code&gt;) will contain the latest 5 hours of data we have. This is needed to pre-populate the application with some data we have. The application definition &lt;code&gt;app&lt;/code&gt; describes the application's title, asset folder, and some HTML meta tags used during rendering.&lt;/p&gt;

&lt;p&gt;Create the application layout that will be rendered as HTML. We won't write HTML, we will use Dash's helpers for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# [...]
&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Stock market changes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app__header__title"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="s"&gt;"Continually query QuestDB and display live changes of the specified stocks."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app__header__subtitle"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app__header__desc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app__header"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Select a stock symbol"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;dcc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dropdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stock-symbol"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;searchable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"stock_symbol"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app__selector"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H6&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Current price changes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"graph__title"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
                        &lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="n"&gt;dcc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stock-graph"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"one-half column"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H6&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Percent changes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"graph__title"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
                        &lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="n"&gt;dcc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stock-graph-percent-change"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"one-half column"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app__content"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;dcc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stock-graph-update"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GRAPH_INTERVAL&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;n_intervals&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"app__container"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# [...]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This snippet is a bit longer, though it has only one interesting part, &lt;code&gt;dcc.Interval&lt;/code&gt;. The interval is used to set up periodic graph refresh.&lt;/p&gt;

&lt;p&gt;We are nearly finished with our application, but the last steps are to define two callbacks that will listen to input changes and the interval discussed above. The first callback is for generating the graph data and rendering the&lt;br&gt;
lines per stock symbol.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# [...]
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stock-graph"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"figure"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stock-symbol"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stock-graph-update"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"n_intervals"&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_stock_graph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selected_symbol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;filtered_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_stock_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TIME_DELTA&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;selected_symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filtered_df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stock_symbol"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_frame&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data_frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graph_objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data_frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data_frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current_price&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;COLORS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graph_objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Time"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Price"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"l"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"t"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;hovermode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"closest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;plot_bgcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#282a36"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;paper_bgcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#282a36"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"#aaa"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;figure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graph_objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;

&lt;span class="c1"&gt;# [...]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The other callback is very similar to the previous one; it will be responsible for updating the percentage change representation of the stocks or a given&lt;br&gt;
stock.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# [...]
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stock-graph-percent-change"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"figure"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stock-symbol"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"value"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stock-graph-update"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"n_intervals"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_stock_graph_percentage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;selected_symbol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;filtered_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_stock_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hours&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TIME_DELTA&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;selected_symbol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;groups&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filtered_df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stock_symbol"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_frame&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;data_frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graph_objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data_frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data_frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;percent_change&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tolist&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;marker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;COLORS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)]),&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graph_objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Time"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Percent change"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"l"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"t"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;hovermode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"closest"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;plot_bgcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#282a36"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;paper_bgcolor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#282a36"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"#aaa"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;figure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graph_objects&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;

&lt;span class="c1"&gt;# [...]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last step is to call &lt;code&gt;run_server&lt;/code&gt; on the &lt;code&gt;app&lt;/code&gt; object when the script is called from the CLI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# [...]
&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0.0.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are now ready to try our application with actual data. Make sure that the Docker containers are started and execute &lt;code&gt;PYTHONPATH=. python app/main.py&lt;/code&gt; from the project root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ PYTHONPATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; python app/main.py

Dash is running on http://0.0.0.0:8050/

 &lt;span class="k"&gt;*&lt;/span&gt; Tip: There are .env or .flaskenv files present. Do &lt;span class="s2"&gt;"pip install python-dotenv"&lt;/span&gt; to use them.
 &lt;span class="k"&gt;*&lt;/span&gt; Serving Flask app &lt;span class="s1"&gt;'main'&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;lazy loading&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="k"&gt;*&lt;/span&gt; Environment: production
   WARNING: This is a development server. Do not use it &lt;span class="k"&gt;in &lt;/span&gt;a production deployment.
   Use a production WSGI server instead.
 &lt;span class="k"&gt;*&lt;/span&gt; Debug mode: off
 &lt;span class="k"&gt;*&lt;/span&gt; Running on all addresses.
   WARNING: This is a development server. Do not use it &lt;span class="k"&gt;in &lt;/span&gt;a production deployment.
 &lt;span class="k"&gt;*&lt;/span&gt; Running on http://192.168.0.14:8050/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to &lt;a href="http://127.0.0.1:8050/"&gt;http://127.0.0.1:8050/&lt;/a&gt;, to see the application in action.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xTsYqM0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/gabor-boros/questdb-stock-market-dashboard/main/images/Screenshot-2021-10-26-at-18.37.27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xTsYqM0l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/gabor-boros/questdb-stock-market-dashboard/main/images/Screenshot-2021-10-26-at-18.37.27.png" alt="img" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To select only one stock, in the dropdown field choose the desired stock symbol and let the application refresh.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BXbg9QpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gabor-boros/questdb-stock-market-dashboard/raw/main/images/Screenshot-2021-10-26-at-18.37.35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BXbg9QpQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gabor-boros/questdb-stock-market-dashboard/raw/main/images/Screenshot-2021-10-26-at-18.37.35.png" alt="img" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this tutorial, we've learned how to schedule tasks in Python, store data in QuestDB, and create beautiful dashboards using Plotly and Dash. Although we won't start trading just right now; this tutorial demonstrated well how to combine these separately powerful tools and software to create something bigger and more useful. Thank you for your attention!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The source code is available at&lt;/em&gt;&lt;br&gt;
&lt;a href="https://github.com/gabor-boros/questdb-stock-market-dashboard"&gt;https://github.com/gabor-boros/questdb-stock-market-dashboard&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>questdb</category>
      <category>python</category>
      <category>redis</category>
      <category>plotly</category>
    </item>
    <item>
      <title>Accessibility Auditing My Portfolio Site - Part 2</title>
      <author>Abbey Perini</author>
      <pubDate>Thu, 04 Nov 2021 14:39:24 +0000</pubDate>
      <link>https://dev.to/abbeyperini/accessibility-auditing-my-portfolio-site-part-2-36p1</link>
      <guid>https://dev.to/abbeyperini/accessibility-auditing-my-portfolio-site-part-2-36p1</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/abbeyperini/accessibility-auditing-my-portfolio-site-part-1-2k8k"&gt;Read part 1 - The Audit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article is comprised of several accessibility vignettes. It's a collection of short stories about quick fixes - some amuse-bouches, if you will. Researching, coding fixes, and writing the bulk of this blog took me less than three hours.&lt;/p&gt;

&lt;p&gt;Accessibility Auditing My Portfolio Site - Parts 3, 4, and 5 will cover the dark mode toggle fixes, solving the blog preview component issues, and finally, a deep dive into getting my full blog page into a more accessible state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-quick-fixes"&gt;
  &lt;/a&gt;
  The Quick Fixes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#problem-1"&gt;
  &lt;/a&gt;
  Problem 1:
&lt;/h3&gt;

&lt;p&gt;Make sure words like "below" still makes sense without visual context.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h3&gt;

&lt;p&gt;I removed the word "below" from the description of my Old Wall Site project in my portfolio section. Even with visuals, it only made sense on mobile. I'm pretty sure I just copied it directly from the original static portfolio site I was using and didn't think about it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem-2"&gt;
  &lt;/a&gt;
  Problem 2:
&lt;/h3&gt;

&lt;p&gt;Redundant &lt;a href="https://supercooldesign.co.uk/blog/how-to-write-good-alt-text"&gt;alt-text&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h3&gt;

&lt;p&gt;I updated my headshot (the old one was so 2019) and added descriptive alt-text. Previously, it was just my name. I also tweaked the alt-text for my Old Wall Site screenshots in my portfolio section so they were both more descriptive and not the exact same thing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U_cObk-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqrash5fpdnnq9hrrc1y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U_cObk-h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fqrash5fpdnnq9hrrc1y.png" alt="a screenshot of the About Abbey section with an updated headshot on abbeyperini.dev" width="880" height="663"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem-3"&gt;
  &lt;/a&gt;
  Problem 3:
&lt;/h3&gt;

&lt;p&gt;While using a screenreader, I noticed my blog preview component heading was just read as a button and my page title was just "Abbey Perini."&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h3&gt;

&lt;p&gt;I changed my page title to "Abbey Perini's Portfolio and Blog" and wrapped my blog preview component heading button in an &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;. In testing with a screenreader, I found I needed to add an &lt;code&gt;aria-label&lt;/code&gt; attribute to make it obvious it was also a button. The size of the container also changed, so I had to take my &lt;code&gt;font-size&lt;/code&gt; CSS property value down from &lt;code&gt;2em&lt;/code&gt; to &lt;code&gt;1em&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem-4"&gt;
  &lt;/a&gt;
  Problem 4:
&lt;/h3&gt;

&lt;p&gt;I received multiple warnings to check that my SVGs had attributes like &lt;code&gt;focusable&lt;/code&gt; and &lt;code&gt;aria-labelledby.&lt;/code&gt; I got errors because they did not have unique ids. I have 1 decorative arrow SVG on my landing page, 1 - 2 SVGs to indicate links in the descriptions of my portfolio projects, and a section of skills badge SVGs in my about section. While manually testing with a screenreader, I was pleased to find the skill badges had accessible labels, but they were long and redundant. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h3&gt;

&lt;p&gt;For the decorative arrow and skill badges, I added the unique ids in the SVG code itself. For all the SVGs, I added the appropriate &lt;code&gt;focusable&lt;/code&gt; attributes (set to true or false) where they were imported in the components. I had followed a tutorial in &lt;a href="https://dev.to/abbeyperini/adding-shiba-inu-loading-and-error-svgs-to-my-react-site-lnj#:~:text=A%20note%20on%20SVG%20accessibility"&gt;this blog&lt;/a&gt; and given all my SVGs &lt;code&gt;aria-labelledby&lt;/code&gt; attributes that included both the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;desc&amp;gt;&lt;/code&gt;. I updated them to only include the &lt;code&gt;&amp;lt;desc&amp;gt;&lt;/code&gt; to decrease redundancy when they are read by a screenreader.&lt;/p&gt;

&lt;p&gt;Before:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"arrowTitle arrowDesc"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;'none'&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;'#0E1A27'&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;'8'&lt;/span&gt; &lt;span class="na"&gt;stroke-dashoffset=&lt;/span&gt;&lt;span class="s"&gt;'0'&lt;/span&gt; &lt;span class="na"&gt;stroke-dasharray=&lt;/span&gt;&lt;span class="s"&gt;'0'&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;'round'&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;'round'&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;'http://www.w3.org/2000/svg'&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;'0 0 100 100'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"arrowTitle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Arrow&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;desc&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"arrowDesc"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;arrow that spins on hover&lt;span class="nt"&gt;&amp;lt;/desc&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"70"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;polyline&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;points=&lt;/span&gt;&lt;span class="s"&gt;"30,10 80,50 30,90 "&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"arrow"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"arrowDesc"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;'none'&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;'#0E1A27'&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;'8'&lt;/span&gt; &lt;span class="na"&gt;stroke-dashoffset=&lt;/span&gt;&lt;span class="s"&gt;'0'&lt;/span&gt; &lt;span class="na"&gt;stroke-dasharray=&lt;/span&gt;&lt;span class="s"&gt;'0'&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;'round'&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;'round'&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;'http://www.w3.org/2000/svg'&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;'0 0 100 100'&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"arrowTitle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Arrow&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;desc&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"arrowDesc"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;arrow that spins on hover&lt;span class="nt"&gt;&amp;lt;/desc&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;line&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"70"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;polyline&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;points=&lt;/span&gt;&lt;span class="s"&gt;"30,10 80,50 30,90 "&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The SVGs for the Github and Chrome links in my portfolio section were special. I took the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;desc&amp;gt;&lt;/code&gt; elements and the &lt;code&gt;aria-labelledby&lt;/code&gt; attribute out of the SVG code. Because I want to use the same code with different ids and attributes multiple times, I added unique ids and &lt;code&gt;aria-label&lt;/code&gt; and &lt;code&gt;focusable&lt;/code&gt; attributes where they are imported in my components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"subwork_links"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"link-new-tab"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://github.com/abbeyperini/BujoToGo"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"noreferrer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;Github&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"BujoToGoGithub"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"open BujoToGo Github repository in a new tab"&lt;/span&gt; &lt;span class="na"&gt;focusable=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"work_icon"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"link-new-tab"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://bujo-to-go.surge.sh/#/index"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"noreferrer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;Chrome&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"BujoToGoChrome"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"open BujoToGo website in a new tab"&lt;/span&gt; &lt;span class="na"&gt;focusable=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;className=&lt;/span&gt;&lt;span class="s"&gt;"work_icon"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#problem-5"&gt;
  &lt;/a&gt;
  Problem 5:
&lt;/h3&gt;

&lt;p&gt;Users must be warned if a link opens a new tab, both visually and with screenreader text, because it can be disorienting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h3&gt;

&lt;p&gt;Obviously, the easiest way to fix this would be not to have links that open a new tab. Because it was recommended to me that my portfolio site open links in new tabs for potential interviewers, and I've designed my site so that if you leave the page, you have to click a button on the landing page and navigate back to where you were, I've gone in the opposite direction and updated all of my links to open a new tab. &lt;/p&gt;

&lt;p&gt;I updated all my links' &lt;code&gt;aria-label&lt;/code&gt; attributes to say they'll open in a new tab - you can see examples in the 3rd codeblock for Problem 4. Then I added external link SVGs I grabbed from &lt;a href="https://heroicons.com/"&gt;Heroicons&lt;/a&gt; to the links I have in in my contact section. I used CSS to size and position these appropriately:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.external-link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.15em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If I wanted these to be the most accessible, I would also add another visual cue that showed "this link will open in a new tab" on hover or focus. This would be ideal for the links attached to the Github and Chrome SVGs and for keyboard and unassisted users that don't know what the external icon link means. However, I would want to spend time I don't have today designing a nice-looking version of that, so I've &lt;a href="https://github.com/abbeyperini/Portfolio2.0/issues/3"&gt;added this to my Github repository&lt;/a&gt; as my first backlog issue for this site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem-6"&gt;
  &lt;/a&gt;
  Problem 6:
&lt;/h3&gt;

&lt;p&gt;I received warnings to add accessible labels for my &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; elements and to add &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/roles/landmark_role"&gt;landmark roles&lt;/a&gt; where necessary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h3&gt;

&lt;p&gt;I didn't immediately understand what these warnings meant. When I used the screenreader, I heard "main" when I focused on my site and "complementary" when I reached my contact section. Turns out semantically, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Complementary_role"&gt;&lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; has a role of complementary&lt;/a&gt;. If you have multiple &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; elements, you want to add accessible labels so a screenreader can differentiate between them. As the few landmark roles I would want to add are covered by semantic HTML, I've added &lt;code&gt;aria-label&lt;/code&gt; attributes for my content sections. Now all my content sections have descriptive screenreader text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem-7"&gt;
  &lt;/a&gt;
  Problem 7:
&lt;/h3&gt;

&lt;p&gt;PDFs have lots of accessibility issues and I have two links to download my resume as a PDF.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution:
&lt;/h3&gt;

&lt;p&gt;For those file downloads, I needed to develop &lt;a href="https://sfgov.org/developing-accessible-pdfs"&gt;accessible PDFs&lt;/a&gt; either by adding an HTML resume or formatting and tagging the existing file appropriately. Luckily, I found an excellent tool for formatting and tagging PDFs - &lt;a href="https://pave-pdf.org/?lang=en"&gt;PAVE&lt;/a&gt;. With this tool, I was able to edit my PDF with appropriate tags and headings based on their recommendations in the browser for free. I've also grabbed a download icon SVG from &lt;a href="https://heroicons.com/"&gt;Heroicons&lt;/a&gt; and added it to these two links.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oWlxqPsV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nxls582yp3tgq1rbwi7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oWlxqPsV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3nxls582yp3tgq1rbwi7.png" alt="a screenshot of the contact section with updated links on abbeyperini.dev" width="880" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Part of what's overwhelming about accessibility auditing a site is the number of nitty gritty details. I hope this shows that even bite-sized accessibility improvements can go a long way. &lt;/p&gt;

&lt;p&gt;It is far easier to navigate my site with a screenreader with all these &lt;code&gt;aria-label&lt;/code&gt; updates.  Writing good descriptive alt-text takes practice. I highly recommend using a screenreader for context and adding alt-text to images in your social media posts for practice. I'll never look at links, file downloads, or PDFs the same way again.&lt;/p&gt;

&lt;p&gt;Stay tuned for more blogs about fixing accessibility issues on my portfolio site!&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>react</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 7 Test Reporting Tools | Latest Update</title>
      <author>TestingNews</author>
      <pubDate>Thu, 04 Nov 2021 14:37:50 +0000</pubDate>
      <link>https://dev.to/katalon/top-7-test-reporting-tools-latest-update-4bkb</link>
      <guid>https://dev.to/katalon/top-7-test-reporting-tools-latest-update-4bkb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--THQ8BZTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Top-Reporting-Tools.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--THQ8BZTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Top-Reporting-Tools.png" alt="Test Reporting Tools" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many businesses are burdened by an excessive amount of testing data. In that circumstance, it becomes impossible to distinguish between what is valuable, and what is noise. &lt;/p&gt;

&lt;p&gt;Therefore, having an effective reporting system in place in your company will ensure that all data is properly gathered and transformed into actionable insights.&lt;/p&gt;

&lt;p&gt;This article will walk you through the benefits of test reporting, and the top 7 test reporting tools that are currently available on the market. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-test-reporting-tools"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What Are Test Reporting Tools?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Test reporting is a critical element of the product release process because it allows stakeholders to make informed judgments about whether a product, feature or defect resolution is ready for release.&lt;/p&gt;

&lt;p&gt;A test reporting tool is an important part of the testing process that outlines the key activities carried out during the testing lifecycle for any release and the overall results of testing. It helps identify critical information about testing, such as the scope of testing, the tests that were performed, the defects that were discovered, and the overall quality recommendations. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criteria-for-choosing-the-right-test-reporting-tool"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Criteria for Choosing the Right Test Reporting Tool&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;User interface (UI):&lt;/strong&gt; Is it clean and easy to use?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Usability:&lt;/strong&gt; How simple is it to learn and master? Is the company’s tech support, tutorials, and training up to par? Is it flexible to be compatible with a wide range of various automation testing tools?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Functionality and features:&lt;/strong&gt; &lt;a href="https://www.katalon.com/resources-center/blog/test-reporting/"&gt;Reporting and analytics&lt;/a&gt;: Can team members provide comprehensive and relevant reports on test results and progress throughout the testing process?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Value:&lt;/strong&gt; Is the price reasonable in relation to the features, capabilities, and use case? Is the price straightforward, transparent, and adaptable? &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#top-7-test-reporting-tools-on-the-market"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Top 7 Test Reporting Tools on the Market&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-katalon-testops"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Katalon TestOps&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLQblfx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Katalon.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLQblfx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Katalon.png" alt="Katalon TestOps" width="880" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Katalon TestOps&lt;/strong&gt; is the most &lt;a href="https://www.katalon.com/resources-center/blog/what-is-testops/"&gt;open and comprehensive platform&lt;/a&gt; for businesses of all sizes for _ &lt;strong&gt;Test orchestration, Test Analytics, and Built-in dashboards advanced reports.&lt;/strong&gt; _&lt;/p&gt;

&lt;p&gt;TestOps allows you to organize diverse software testing operations, cycles, and frameworks. By doing so, you can assure software quality at every stage without sacrificing speed or necessitating DevOps expertise.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy-to-use UI with reporting-centric features for teams of all sizes&lt;/li&gt;
&lt;li&gt;Seamless integration with most of the popular testing frameworks (TestNG, JUnit, Bamboo, Jenkins, CircleCI, etc.)&lt;/li&gt;
&lt;li&gt;Integrations with managements platforms (Jira, Slack) and SDK and REST APIs that supercharge effective team collaboration&lt;/li&gt;
&lt;li&gt;Full picture on quality through shareable dashboards with metrics that matter most to your team&lt;/li&gt;
&lt;li&gt;Robust failure analysis of test case through rich execution reports with HAR files, videos, screenshots, execution logs, error messages, and artifacts&lt;/li&gt;
&lt;li&gt;Real-time data monitoring and customizable alerts to act early on any rising issues&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PkRNZUDl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/10/Try-TestOps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PkRNZUDl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/10/Try-TestOps.png" alt="Try TestOps" width="880" height="110"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-reportportal"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. ReportPortal&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sSKSZdD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Report-Portal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sSKSZdD6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Report-Portal.png" alt="Report Portal" width="880" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ReportPortal is an AI-powered platform developed by developers at EPAM and elsewhere in the open-source community that enables testers and key project stakeholders to organize and examine all of their testing data and reports in one location.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flexibility to allow many report types (SQL reports, OLAP reports, Crystal reports, SSRS reports)&lt;/li&gt;
&lt;li&gt;Great roadmap awareness and time to market which consistently fills the gaps of features/functionality missing from the native Microsoft BI stack&lt;/li&gt;
&lt;li&gt;Smooth integration with frameworks like Node.js, SoapUI, SpecFlow, ScalaTest, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-functionize"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Functionize&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rBqvt6Ck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Functionize.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rBqvt6Ck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Functionize.png" alt="Functionize" width="880" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Functionize is an intelligent testing platform that helps testers build AI-powered tests that self-heal and scale in the cloud. Its combination of several ML models and Word-to-Vec NLP makes it very user-friendly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One-click SmartFix helps to detect test failures instantly&lt;/li&gt;
&lt;li&gt;Live Debug allows for live interaction when your test runs on the VM using breakpoints &lt;/li&gt;
&lt;li&gt;TestRail uses central dashboards that keep track of all requirements&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-allure-testops"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Allure TestOps&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dpaeeef1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Allua-TestOps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dpaeeef1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Allua-TestOps.png" alt="Allua TestOps" width="880" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Allure TestOps is a platform for software quality management that combines automated and manual testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collect real-time test results from the build server during the build job’s execution&lt;/li&gt;
&lt;li&gt;Start, stop, and rerun build jobs from Allure TestOps on build servers&lt;/li&gt;
&lt;li&gt;Import test results directly from IntelliJ IDEA&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As this tool has limitations in integrating with the iOS system, carefully consider this option if you are using an iOS device. Additionally, since there are not many tutorials available in the documentation, some features may take more time to master.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-testim"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Testim&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O8I3qxcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Testim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O8I3qxcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Testim.png" alt="Testim" width="880" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Testim is a commercial end-to-end software testing platform that leverages artificial intelligence to enable developers and testers to quickly automate functional tests. Software quality guidelines can be followed on the web with this web-based platform as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AI-based stabilizers eliminate resource-intensive flaky tests&lt;/li&gt;
&lt;li&gt;Tests can be triggered on-demand, on a schedule, or as part of your continuous integration processes&lt;/li&gt;
&lt;li&gt;Classification of failed runs with reason codes to better understand the failure pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Testim is an intuitive solution for non-coding experts in your team to enhance the business flows and testing coverage. However, the lack of running mobile tests on Firefox, Safari, and Edge may hold you back from deploying this tool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-spiratest"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. SpiraTest&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yphsfIu---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Spira-Test.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yphsfIu---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Spira-Test.png" alt="Spira Test" width="880" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SpiraTest is an integrated quality assurance, test, and requirements management solution that tracks and manages your project’s requirements, test cases, releases, defects, and issues. It includes plugins for several popular automation tools, including UFT, TestComplete, Ranorex, and Selenium.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Responsive SpiralTest cloud deployment and desktop deployment on Windows&lt;/li&gt;
&lt;li&gt;Built-in support/integration with Microsoft DevOps&lt;/li&gt;
&lt;li&gt;Integration with GitHub for transferring and storing large data in a timely manner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SpiraTest is a useful tool for performing software tests in a simple way. It eliminates risks and boosts efficiency in project management from start to finish, allowing you to achieve your goals and carry them out in the best way possible. Furthermore, its implementation adjusts to professional requirements as well as multiple Windows versions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-extent-reports"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Extent Reports&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VHyzXhDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Extent-Report.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VHyzXhDr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d1h3p5fzmizjvp.cloudfront.net/wp-content/uploads/2021/11/Extent-Report.png" alt="Extent Report" width="880" height="141"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Extent Reports, created by Anshoo Arora, is a configurable HTML report that can be integrated into Selenium WebDriver utilizing the JUnit and TestNG frameworks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature highlights:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stepwise and pie chart representation in a customizable HTML report&lt;/li&gt;
&lt;li&gt;Displays the test case execution time in the report&lt;/li&gt;
&lt;li&gt;Smooth integrations with frameworks such as TestNG and JUnit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When compared to the built-in reports generated by JUnit and TestNG, Extent Reports have various advantages, such as pie chart depiction, stepwise test report generation, screenshot addition, etc., at every test step and a presentable user interface that can be shared with all project stakeholders.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-test-reporting-tools"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Benefits of Test Reporting Tools&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Choosing the right test reporting technology can help your team automate tests quicker and more efficiently.&lt;/p&gt;

&lt;p&gt;Stay updated on tools and frameworks that offer the best functionality for test reporting. A robust solution should be able to work with a wide range of programming languages, mobile platforms, and connectors. Furthermore, a TestCloud should be sufficient to facilitate massive amounts of data storage for testing data.&lt;/p&gt;

&lt;p&gt;With those requirements in mind, Katalon TestOps is your ultimate solution for test reporting. Integrating with mainstream testing frameworks, TestOps gives testing and DevOps teams full visibility of their tests, resources, and environments; and orchestration tools to &lt;a href="https://www.katalon.com/resources-center/blog/devops-orchestration-investment/"&gt;manage tests and quality insights.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://www.katalon.com/resources-center/blog/test-reporting-tools/"&gt;Top Test Reporting Tools&lt;/a&gt; appeared first on &lt;a href="https://www.katalon.com"&gt;Katalon Solution&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>testreporting</category>
      <category>testingtools</category>
      <category>testops</category>
      <category>testautomation</category>
    </item>
    <item>
      <title>A PURE HTML/CSS functional calendar?! 😲🤯 (+CSS APIs and all the fun things we can do with them)</title>
      <author>Siddharth</author>
      <pubDate>Thu, 04 Nov 2021 14:31:11 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/a-pure-htmlcss-functional-calendar-css-apis-and-all-the-fun-things-we-can-do-with-them-2o2k</link>
      <guid>https://dev.to/siddharthshyniben/a-pure-htmlcss-functional-calendar-css-apis-and-all-the-fun-things-we-can-do-with-them-2o2k</guid>
      <description>&lt;p&gt;Yesterday I went back to my frontend experiments after a load of JavaScript work. I experimented with the CSS custom property toggle trick (more on that later) which can allow me to have if/else logic in CSS, and with a bit of experimenting I made this CSS only calendar!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SiddharthShyniben/embed/dyzVQXV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;(It's embedded in a CodePen, if you wanna see the real thing go over to &lt;a href="https://experiments.siddu.tech/css-api/"&gt;https://experiments.siddu.tech/css-api/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;It shows the current month, year, day and date completely in CSS! And it also updates (check it tomorrow and see!). It can even handle leap years! 🤯&lt;/p&gt;

&lt;p&gt;Before I tell you what's really happening, go over to &lt;a href="https://experiments.siddu.tech/css-api/"&gt;the site&lt;/a&gt; and inspect to see what you can find. Once you are done with your experimenting, scroll.&lt;/p&gt;




&lt;p&gt;Spoilers in:&lt;/p&gt;

&lt;p&gt;3&lt;/p&gt;

&lt;p&gt;2&lt;/p&gt;

&lt;p&gt;1&lt;/p&gt;




&lt;p&gt;Alright, here's how it works: &lt;strong&gt;I'm including an external stylesheet with the data&lt;/strong&gt;. The data is generated by a GitHub action which runs a Deno script which creates a CSS file with the data in custom properties (see below).&lt;/p&gt;

&lt;p&gt;(Yeah I know I kinda lied, but not really because the site is still 0 JS 😋)&lt;/p&gt;

&lt;p&gt;This opens up a whole new door of CSS APIs which can be used to do stuff like change color themes based on the season (spooky theme in October, grass theme in March, you get the idea), or maybe even expose content with &lt;code&gt;content: var(--content)&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;That explanation too quick for you? Here's some more detail on how I did it.&lt;/p&gt;

&lt;p&gt;Now that we have the data in CSS custom properties, we need to somehow change the data into content in the HTML. To understand how I did it, it will be nice to take a look at the CSS which was generated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'2021'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--november&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--monday&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--day-1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the CSS which was generated for the day I'm writing (Nov 1 2021, Monday)&lt;/p&gt;

&lt;p&gt;With this CSS we can easily embed the year with &lt;code&gt;:after&lt;/code&gt;, but the other properties look strange. Those properties are totally valid according to spec (the properties contain a value which is " ") and we can use them to make if else logic.&lt;/p&gt;

&lt;p&gt;Here's a simpler CodePen showing how the thing works:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/SiddharthShyniben/embed/QWdaevQ?height=600&amp;amp;default-tab=css,result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Open the pen in a new tab and resize to see the full effect)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let me explain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is a breakpoint setup here at 350px. This is where the variable &lt;code&gt;--color&lt;/code&gt; changes from initial to an empty space.&lt;/li&gt;
&lt;li&gt;When the browser window is wider than 350px, the value of &lt;code&gt;--color&lt;/code&gt; is initial

&lt;ul&gt;
&lt;li&gt;That makes the variable &lt;code&gt;--color-when-small&lt;/code&gt; contain the value &lt;code&gt;initial red&lt;/code&gt; which is &lt;strong&gt;invalid.&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;So when we actually set the color and call that variable like background-color: &lt;code&gt;var(--color-when-small, var(--color-when-big));&lt;/code&gt;, the second value (the fallback) is used because the first is invalid.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;When the browser window is narrower than 350px, the value of --color is a space.

&lt;ul&gt;
&lt;li&gt;That makes the variable &lt;code&gt;--color-when-small&lt;/code&gt; contain the value &lt;code&gt;(space)red&lt;/code&gt;, which is &lt;strong&gt;valid&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;So when we actually set the color and call that variable like background-color: &lt;code&gt;var(--color-when-small, var(--color-when-big));&lt;/code&gt;, the first value is used&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, now we can flip the color between two values by changing a placeholder variable. I hope that clicks for you.&lt;/p&gt;

&lt;p&gt;I used the same trick in this calendar too. I first added a bunch of &lt;code&gt;span&lt;/code&gt;s with all my months:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span class='january'&amp;gt;January&amp;lt;/span&amp;gt;
&amp;lt;span class='february'&amp;gt;February&amp;lt;/span&amp;gt;
&amp;lt;span class='march'&amp;gt;March&amp;lt;/span&amp;gt;
&amp;lt;span class='april'&amp;gt;April&amp;lt;/span&amp;gt;
&amp;lt;!-- ... ---&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in the CSS I set the display value in the same way as above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.january {
  --display-when-correct: var(--january) block;

  display: var(--display-when-correct, none);
}

.february {
  --display-when-correct: var(--february) block;

  display: var(--display-when-correct, none);
}
/* ... */

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So when &lt;code&gt;--january&lt;/code&gt; is set to &lt;code&gt;" "&lt;/code&gt;, &lt;code&gt;--display-when-correct&lt;/code&gt; becomes &lt;code&gt;(space)block&lt;/code&gt;, which is valid. And since &lt;code&gt;--february&lt;/code&gt;, &lt;code&gt;--march&lt;/code&gt; all don't exist, they become invalid (and so they are &lt;code&gt;display: none&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If this trick seems confusing (or helpful) then I'll write another detailed post on it!&lt;/p&gt;

&lt;p&gt;I did a similar thing for highlighting days and dates, here's how:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.monday {
    --bg: var(--monday) #1abc9c;
    --fg: var(--monday) white;
    --space: var(--monday) 5px;

    background: var(--bg, initial);
    border-radius: var(--space, initial);
    padding: var(--space, initial);
    color: var(--fg, initial) !important;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's the same old trick, just a few extra things to add.&lt;/p&gt;

&lt;p&gt;And also there is a fix for leap years and some other minimal stuff which you can learn by reading &lt;a href="https://github.com/SiddharthShyniben/experiments/blob/6dea6bed09769cdc65bcc15b72955646313f91d9/css-api/style.css#L106"&gt;the source&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-apis"&gt;
  &lt;/a&gt;
  CSS APIs
&lt;/h2&gt;

&lt;p&gt;We can apply the same trick I used to generate this data to make more stuff like a fun fact generator, or for having different color themes like a seasonal color palette which changes (I think GitHub uses this trick for their Halloween theme, if not they should 😉)&lt;/p&gt;

&lt;p&gt;Also, if you are up for a challenge, try implementing what I just used to make a site with a different color palette every season and share it over here! It's going to be &lt;em&gt;much easier&lt;/em&gt; than building a calendar, trust me!&lt;/p&gt;

&lt;p&gt;If you think this can be helpful in the real world, &lt;a href="https://twitter.com/intent/tweet?url=https%3A%2F%2Fdev.to%2Fsiddharthshyniben%2Fa-pure-htmlcss-functional-calendar-css-apis-and-all-the-fun-things-we-can-do-with-them-2o2k&amp;amp;text=@SiddharthShyn%20got%20bored%20with%20JavaScript%20and%20made%20A%20FUNCTIONAL%20CALENDAR%20in%20just%20HTML/CSS%3F%21%20Check%20it%20out%21"&gt;spread the word&lt;/a&gt; so that more people can use it in real world situations.&lt;/p&gt;

&lt;p&gt;If you love my content, &lt;a href="https://twitter.com/intent/follow?screen_name=SiddharthShyn"&gt;follow me on twitter&lt;/a&gt; or over here to stay updated on my blog posts!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>nojs</category>
      <category>tricks</category>
    </item>
    <item>
      <title>Deploy NodeJS Application within 5 minutes</title>
      <author>Dhruv Rajkotia</author>
      <pubDate>Thu, 04 Nov 2021 14:13:17 +0000</pubDate>
      <link>https://dev.to/dhruv_rajkotia/deploy-nodejs-application-within-5-minutes-2kk1</link>
      <guid>https://dev.to/dhruv_rajkotia/deploy-nodejs-application-within-5-minutes-2kk1</guid>
      <description>&lt;p&gt;Now a days a lots of people are working on a side projects or the PoC(proof of concept) to showcase their work with rest of the world. For showing your work to rest of the world it required a deployment cost and also the person should have a knowledge regarding the deploying their apps to some server. Looking a bit weird 😟, right? Here I have come up with the quick solution for you guys. How we can deploy our NodeJs application within 5 minutes using App Engine. &lt;/p&gt;

&lt;p&gt;Google App Engine is a cloud computing platform as a service for developing and hosting web applications in Google-managed data centers. App Engine offers automatic scaling for web applications—as the number of requests increases for an application, App Engine automatically allocates more resources for the web application to handle the additional demand.&lt;/p&gt;

&lt;p&gt;Google App Engine primarily supports Go, PHP, Java, Python, Node.js, .NET, and Ruby applications, although it can also support other languages via "custom runtimes". Here we are going to use the Standard environment provide some free quota which can be enough for showing our work to the world.🤙&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;First step is to create your own NodeJS project that you wanted to deploy using App Engine&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is link of the sample boiler plate code for the NodeJS application. &lt;a href="https://github.com/freeCodeCamp/boilerplate-npm/"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can clone (hint: git clone ) this repo in your local and our step 1 is done 👏.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;We need to create a GCP project to deploy our Node application. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://console.cloud.google.com/cloud-resource-manager"&gt;https://console.cloud.google.com/cloud-resource-manager&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Click on the create new project&lt;/li&gt;
&lt;li&gt;Provide Project name and location&lt;/li&gt;
&lt;li&gt;Click on the Create button. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note: Make sure you have enabled the Cloud Build API and Enabled the Billing for your GCP project&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You probably see that new project will be created. Congratulations 👏 you have passed the 2nd stage 💪. To be honest you nailed it.😄.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Download Cloud SDK installer &amp;amp; setup our GCP project in local&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Follow the steps mention in the official document of the Google. &lt;br&gt;
&lt;a href="https://cloud.google.com/sdk/docs/quickstart"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have downloaded the Cloud SDK then go to the location of your repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9YlRfaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibtmt5u0uvdggmkr930l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9YlRfaP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibtmt5u0uvdggmkr930l.png" alt="Image description" width="880" height="508"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;1: Run the command: gcloud init&lt;br&gt;
You probably see the below screen. (You may have some less options which I have in the below screenshot)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_kU84JeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnctgd3h8b59mmq4ucmj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_kU84JeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnctgd3h8b59mmq4ucmj.png" alt="Image description" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;2: Select Create a new configuration option. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HC2V_ec5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2c25qsojj5w2m5i3e79.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HC2V_ec5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2c25qsojj5w2m5i3e79.png" alt="Image description" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;3: Copy Project ID from GCP Console.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lBmoKEDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7t98mgojpo0jjtp795u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lBmoKEDd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7t98mgojpo0jjtp795u.jpg" alt="Image description" width="880" height="663"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;4: Provide that project ID in Command prompt. &lt;br&gt;
Probably you'll see the below screen. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtDzN58m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/daqiwdelod4s3euxbgcr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtDzN58m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/daqiwdelod4s3euxbgcr.png" alt="Image description" width="880" height="488"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;5: Login with your Google Account &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After that, Select Login with the new account option. So You'll be redirect to the new browser window for login. Login using the same account in which you have created your GCP project. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_YVMREC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh7bywifkj4ng4ux7uc5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_YVMREC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh7bywifkj4ng4ux7uc5.png" alt="Image description" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;6: Select the project ID&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Select the option for your project id. You'll see the success message in the CMD.&lt;/p&gt;

&lt;p&gt;Congratulations guys, You just completed almost 80% 👍&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Create app.yaml file&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Create new file at the root level of the project structure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CUuxOHDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjcguwki4k6iniyhfp7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CUuxOHDm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjcguwki4k6iniyhfp7v.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add below code snippet in your app.yaml file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;runtime: nodejs16
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for more info regarding the app.yaml file, please have a look &lt;a href="https://cloud.google.com/appengine/docs/flexible/nodejs/configuring-your-app-with-app-yaml"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5"&gt;
  &lt;/a&gt;
  Step 5
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Run Deploy Application Command&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run Below command to deploy your application in APP Engine&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;gcloud app deploy&lt;br&gt;
Select the region of your APP Engine deployment&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You'll see the App Deployment is in progress, Once it's done you'll get the public URL of your application which you can use it anywhere you want.&lt;/p&gt;

&lt;p&gt;You'll see the below screen once deployment is done. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k54DKoRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlheojl3lo1hl738emqt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k54DKoRQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jlheojl3lo1hl738emqt.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open the URL mentioned in the response(For me: &lt;a href="https://dhruv-rajkotia.uc.r.appspot.com/"&gt;https://dhruv-rajkotia.uc.r.appspot.com/&lt;/a&gt;) &lt;/p&gt;

&lt;p&gt;Note: Here you can also use the &lt;code&gt;gcloud app browse&lt;/code&gt; command which open URL in the new browser window.&lt;/p&gt;

&lt;p&gt;That's it, You have come too far to learn the deployment with App Engine. Hope 🤞 you liked it. &lt;/p&gt;

&lt;p&gt;Please &lt;a href="https://twitter.com/dhruv_rajkotia"&gt;Follow&lt;/a&gt; me on Twitter to get update regarding upcoming blogs. Glad to connect with you guys😊. &lt;/p&gt;

</description>
      <category>node</category>
      <category>devops</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Filter, Map, Reduce: Combined Example</title>
      <author>coder4life</author>
      <pubDate>Thu, 04 Nov 2021 14:06:05 +0000</pubDate>
      <link>https://dev.to/coder4_life/filter-map-reduce-combined-example-jin</link>
      <guid>https://dev.to/coder4_life/filter-map-reduce-combined-example-jin</guid>
      <description>&lt;p&gt;Have you tried using filter, map, and reduce combined in a single code snippet? In this example we have an array of objects and we want the accumulated value of one of the properties in each object where the property value matches a requirement.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/70UgtzMZehc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Intro to SEO | What is a Canonical URL?</title>
      <author>Tyler V. (he/him)</author>
      <pubDate>Thu, 04 Nov 2021 13:12:59 +0000</pubDate>
      <link>https://dev.to/terabytetiger/intro-to-seo-what-is-a-canonical-url-853</link>
      <guid>https://dev.to/terabytetiger/intro-to-seo-what-is-a-canonical-url-853</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-canonical-url"&gt;
  &lt;/a&gt;
  What is a canonical URL?
&lt;/h2&gt;

&lt;p&gt;We live in a world where information is posted, shared, re-shared, listicled, compiled, tweeted, re-blogged - I could go on. With so many copies of the same article existing on the internet, this presents an interesting issue for Search Engines: How do Search Engines know the original source of the post? &lt;/p&gt;

&lt;p&gt;Canonical URLs are a way to indicate where the original post came from.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-a-canonical-url"&gt;
  &lt;/a&gt;
  What are the benefits of a canonical URL?
&lt;/h2&gt;

&lt;p&gt;The high level response to this question is "SEO Benefits" - but let's look at a more detailed level. &lt;/p&gt;

&lt;p&gt;If canonical URLs didn't exist and you posted an article on your blog, DEV, and Hashnode search engines would find themselves in a predicament when trying to serve your article to a search query - how do they know which to serve? Instead of getting "full credit" for your post, each post would have their own search result profile and in turn look like spam to  search engines - effectively resulting each fighting with each other for ranking and dragging each other down the results page. &lt;/p&gt;

&lt;p&gt;Thanks to canonical URLs, search engines don't need to assume the posts are all spam and can properly serve the original post to users searching for information - returning to a situation where the original post is claiming full credit!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-a-canonical-url"&gt;
  &lt;/a&gt;
  When to use a canonical URL?
&lt;/h2&gt;

&lt;p&gt;Based on the description of the benefits, you can probably guess that any time you post your post on another platform you'll want to include a canonical URL linking back to your blog (or wherever you want the "True source" to be coming from). &lt;/p&gt;

&lt;p&gt;Not as intuitive is that you also want to include the canonical URL back to the original source &lt;em&gt;on the original source's page!&lt;/em&gt; This essentially functions as an extra indicator to search engines that you are in fact the original source that other sites are claiming you are! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-a-canonical-url"&gt;
  &lt;/a&gt;
  How to use a canonical URL
&lt;/h2&gt;

&lt;p&gt;Now we know what a canonical URL is - so how do we use one? &lt;/p&gt;

&lt;p&gt;If you're working with a personal site and can alter the HTML, you'll want to include the following in your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"canonical"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"https://yourdomain.com/slug/path/whatever/"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Replacing the &lt;code&gt;https://yourdomain.com/slug/path/whatever/&lt;/code&gt; with the full URL to your post! If you're working with a Static Site Generator there are ways to help automate the setting of these values - &lt;a href="https://terabytetiger.com/lessons/articles/gridsome-seo-improvement-checklist/#set-a-canonical-url"&gt;Example of setting canonical URL in Gridsome&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;On sites like DEV or Hashnode, there are also ways to create these links back - usually under names such as "Original Source", "Canonical URL", or "Reposting from". &lt;/p&gt;

&lt;p&gt;🙏🏻 Go forth and Repost! 🙏🏻&lt;/p&gt;

</description>
      <category>seo</category>
      <category>webdev</category>
      <category>blog</category>
      <category>blogging</category>
    </item>
    <item>
      <title>Explain me async like I am a Kid</title>
      <author>Aditya Priyadarshi</author>
      <pubDate>Thu, 04 Nov 2021 13:07:59 +0000</pubDate>
      <link>https://dev.to/foxy4096/explain-me-async-like-i-am-a-kid-1an4</link>
      <guid>https://dev.to/foxy4096/explain-me-async-like-i-am-a-kid-1an4</guid>
      <description>&lt;p&gt;Help me!&lt;/p&gt;

&lt;p&gt;Peace ✌&lt;/p&gt;

</description>
      <category>programming</category>
      <category>python</category>
      <category>javascript</category>
      <category>java</category>
    </item>
    <item>
      <title>Database Migrations for .NET and Entity Framework with Prisma</title>
      <author>Ruheni Alex</author>
      <pubDate>Thu, 04 Nov 2021 12:51:58 +0000</pubDate>
      <link>https://dev.to/prisma/database-migrations-for-net-and-entity-framework-with-prisma-49e0</link>
      <guid>https://dev.to/prisma/database-migrations-for-net-and-entity-framework-with-prisma-49e0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In this article, you will learn how to model your data using &lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt;, run a migration with Prisma Migrate and then introspect your database with &lt;a href="https://dotnet.microsoft.com/"&gt;.NET&lt;/a&gt; to generate your &lt;a href="https://docs.microsoft.com/en-us/aspnet/entity-framework"&gt;Entity Framework&lt;/a&gt; models. This article will use Azure SQL/ SQL Server. &lt;/p&gt;

&lt;p&gt;This article only offers an alternative data modelling workflow that is succinct and offer a better development experience. Besides .NET and the Entity framework, you can also use Prisma with your tool/ frameworks of choice such as &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Prisma auto-generates migration files in SQL that you can modify before applying them on your database. The workflow following this approach would be:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Model your data&lt;/li&gt;
&lt;li&gt;Run a migration using &lt;a href="https://www.prisma.io/migrate"&gt;Prisma Migrate&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use the Entity Framework to &lt;em&gt;&lt;a href="https://docs.microsoft.com/en-us/ef/core/managing-schemas/scaffolding?tabs=dotnet-core-cli"&gt;reverse engineer&lt;/a&gt;/ scaffold/&lt;/em&gt; introspect your database and generate models and your database context.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-prisma"&gt;
  &lt;/a&gt;
  What is Prisma?
&lt;/h2&gt;

&lt;p&gt;Prisma is an object-relational mapper (ORM) that provides a declarative way to define your database models that are easy to read and comprehend. Prisma also provides &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client"&gt;Prisma Client&lt;/a&gt; – an intuitive and  type-safe query builder based off your schema.&lt;/p&gt;

&lt;p&gt;At the core of Prisma is the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema"&gt;Prisma Schema&lt;/a&gt; – aka &lt;em&gt;schema file&lt;/em&gt;. The schema contains 3 parts: the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources/"&gt;data sources&lt;/a&gt;, &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema/generators"&gt;generators&lt;/a&gt; and your &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-schema/data-model"&gt;data model definition&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To follow along, ensure you have the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Familiarity with .NET and the &lt;a href="https://docs.microsoft.com/en-us/aspnet/entity-framework"&gt;Entity framework&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Installed Node.js v 12.6.x or higher&lt;/li&gt;
&lt;li&gt;Installed .NET locally&lt;/li&gt;
&lt;li&gt;A SQL Server or Azure SQL database&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=Prisma.prisma"&gt;Prisma Extension&lt;/a&gt; for VS Code users&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you're not familiar with setting up SQL Server, check out &lt;a href="https://www.prisma.io/dataguide/mssql/setting-up-a-local-sql-server-database"&gt;Setting up a local SQL Server database&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-1-create-a-new-console-application"&gt;
  &lt;/a&gt;
  Step 1: Create a new console application
&lt;/h2&gt;

&lt;p&gt;The first step is to create a new .NET console app in your working directory. This guide uses a console application to keep it simple. However, feel free to create any other type of application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet new console &lt;span class="nt"&gt;--output&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;__app-name__&lt;span class="k"&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the command is done, navigate to the project and confirm that your project is running.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;__app-name__&lt;span class="k"&gt;*&lt;/span&gt;
dotnet run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the output on the terminal is &lt;code&gt;Hello World!&lt;/code&gt;, everything seems to be running just fine!  🎉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-add-prisma-to-your-project"&gt;
  &lt;/a&gt;
  Step 2: Add Prisma to your project
&lt;/h2&gt;

&lt;p&gt;On a separate terminal window but still within the same project run the following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;prisma-migrate
&lt;span class="nb"&gt;cd &lt;/span&gt;prisma-migrate
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The commands create a new directory, navigate to the folder and initializes it as a Node.js project. The &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-cli"&gt;Prisma CLI&lt;/a&gt; is the only dependency for this project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save-dev&lt;/span&gt; prisma
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#initialize-prisma"&gt;
  &lt;/a&gt;
  Initialize Prisma
&lt;/h3&gt;

&lt;p&gt;Once the install is done, run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma init &lt;span class="nt"&gt;--database-provider&lt;/span&gt; sqlserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creates a &lt;code&gt;.env&lt;/code&gt; file at the root of the project for storing environment variables&lt;/li&gt;
&lt;li&gt;Creates &lt;code&gt;prisma&lt;/code&gt; folder containing a &lt;code&gt;schema.prisma&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Specifies the database provider as &lt;code&gt;sqlserver&lt;/code&gt; in &lt;code&gt;schema.prisma&lt;/code&gt; file and provides a dummy &lt;code&gt;sqlserver&lt;/code&gt; connection string in &lt;code&gt;.env&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;schema.prisma&lt;/code&gt; file defines the database connection and the Prisma Client generator. This is where you will also define your database models.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// prisma/schema.prisma&lt;/span&gt;
&lt;span class="n"&gt;datasource&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"sqlserver"&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"DATABASE_URL"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;generator&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"prisma-client-js"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this guide, you can delete &lt;code&gt;generator client&lt;/code&gt; as it is relevant in a TypeScript/ JavaScript project. The &lt;code&gt;generator client&lt;/code&gt; is used to generate the TypeScript definitions for the Prisma Client.&lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;.env&lt;/code&gt; with your database connection string. Refer to &lt;a href="https://www.prisma.io/docs/concepts/database-connectors/sql-server#connection-details"&gt;connection details&lt;/a&gt; for information on how to configure the connection string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# .env&lt;/span&gt;
&lt;span class="nv"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sqlserver://HOST:PORT;database=DATABASE;user=USER;password=PASSWORD;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;
  If you're using a remote database during development like Azure SQL, open this to learn more about how to configure the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-migrate/shadow-database"&gt;shadow database&lt;/a&gt;.
  &lt;br&gt;
Create a new database which will be the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-migrate/shadow-database"&gt;shadow database&lt;/a&gt; on Azure. Update your &lt;code&gt;.env&lt;/code&gt; file to include the &lt;code&gt;SHADOW_DATABASE_URL&lt;/code&gt; as well. The shadow database will be used in the data modelling step&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# .env&lt;/span&gt;
&lt;span class="nv"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sqlserver://HOST:PORT;database=DATABASE;user=USER;password=PASSWORD;"&lt;/span&gt;
&lt;span class="nv"&gt;SHADOW_DATABASE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"sqlserver://HOST:PORT;database=DATABASE;user=USER;password=PASSWORD;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Update your &lt;code&gt;schema.prisma&lt;/code&gt; file with the connection string for the shadow database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// prisma/schema.prisma&lt;/span&gt;
&lt;span class="n"&gt;datasource&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;provider&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"sqlserver"&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt;               &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"DATABASE_URL"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;shadowDatabaseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SHADOW_DATABASE_URL"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;A shadow database is a second, &lt;em&gt;temporary&lt;/em&gt; database for use in the local development workflow. When running a migration, the secondary database is created and deleted automatically unless you're using a cloud-hosted database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's an illustration of how the shadow database works:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Voo8aIw2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.prisma.io/docs/static/fa8149049da32d83d8014e3d14d644c0/a6d36/shadow-database.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Voo8aIw2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.prisma.io/docs/static/fa8149049da32d83d8014e3d14d644c0/a6d36/shadow-database.png" alt="https://www.prisma.io/docs/static/fa8149049da32d83d8014e3d14d644c0/a6d36/shadow-database.png" width="650" height="1162"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-modelling"&gt;
  &lt;/a&gt;
  Data modelling
&lt;/h3&gt;

&lt;p&gt;This example will define 2 models: &lt;code&gt;Post&lt;/code&gt; and &lt;code&gt;User&lt;/code&gt;.The relationship between &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Post&lt;/code&gt; is a one-to-many relationship.&lt;/p&gt;

&lt;p&gt;The models defined in &lt;code&gt;schema.prisma&lt;/code&gt; will resemble a GraphQL syntax . The models also map to a table in your database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// prisma/schema.prisma&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;id&lt;/span&gt;        &lt;span class="n"&gt;Int&lt;/span&gt;      &lt;span class="nd"&gt;@id&lt;/span&gt; &lt;span class="nd"&gt;@default&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autoincrement&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
  &lt;span class="n"&gt;content&lt;/span&gt;   &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
  &lt;span class="n"&gt;title&lt;/span&gt;     &lt;span class="n"&gt;String&lt;/span&gt;
  &lt;span class="n"&gt;createdAt&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt; &lt;span class="nd"&gt;@default&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
  &lt;span class="n"&gt;author&lt;/span&gt;    &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;    &lt;span class="nd"&gt;@relation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;fields:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;authorId&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="nl"&gt;references:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
  &lt;span class="n"&gt;authorId&lt;/span&gt;  &lt;span class="n"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;id&lt;/span&gt;    &lt;span class="n"&gt;Int&lt;/span&gt;     &lt;span class="nd"&gt;@id&lt;/span&gt; &lt;span class="nd"&gt;@default&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autoincrement&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
  &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;  &lt;span class="nd"&gt;@unique&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt;  &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
  &lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Refer to the &lt;a href="https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference"&gt;Prisma Schema Reference&lt;/a&gt; for further information on database field types, attributes, conventions and functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-database-migration"&gt;
  &lt;/a&gt;
  Create a database migration
&lt;/h3&gt;

&lt;p&gt;After modelling your data, it's time to apply the changes to your database. On your terminal window, run &lt;code&gt;npx prisma migrate dev&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma migrate dev &lt;span class="nt"&gt;--name&lt;/span&gt; init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If no database exists, a new database with the database name specified in your &lt;code&gt;.env&lt;/code&gt; file will be created. The command also creates a new database migration that is located in &lt;code&gt;./prisma/migrations&lt;/code&gt; directory. The migration is in SQL and is applied against your database. &lt;code&gt;init&lt;/code&gt; refers to the migration name which you can change to something more semantic.&lt;/p&gt;

&lt;p&gt;If you wish to only create a migration but not apply it to your database, pass the &lt;code&gt;--create-only&lt;/code&gt; option to Prisma Migrate. This will generate the SQL and allow you to customize it before applying it against your database.&lt;/p&gt;

&lt;p&gt;You can confirm that the changes have been applied, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx prisma studio
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N31YC-hG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de9p51dk06cbmaviv5lt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N31YC-hG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de9p51dk06cbmaviv5lt.png" alt="Screenshot 2021-10-17 at 19.49.28.png" width="880" height="621"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the Model you would like to view/ edit data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v10O0ukW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm5gi64m3xeb68utpt5l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v10O0ukW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm5gi64m3xeb68utpt5l.png" alt="Screenshot 2021-10-17 at 19.51.25.png" width="880" height="621"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Save 1 change&lt;/strong&gt; to apply the changes.&lt;/p&gt;

&lt;p&gt;Navigate to the User model, create a new user, link the post created in the previous step and save the change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--siF3tymG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ph7m5cz8jho4m5p921zw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--siF3tymG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ph7m5cz8jho4m5p921zw.png" alt="Screenshot 2021-10-17 at 19.53.24.png" width="880" height="621"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-introspect-your-database-aka-reverse-engineering"&gt;
  &lt;/a&gt;
  Step 3: Introspect your database aka Reverse Engineering
&lt;/h2&gt;

&lt;p&gt;Entity framework allows you to introspect your database schema and scaffold entity type classes and the database context based off an existing database.&lt;/p&gt;

&lt;p&gt;Navigate out of &lt;code&gt;prisma-migrate&lt;/code&gt; directory to the root of your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install Entity Framework tools you will require to work with SQL Server in your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet add package Microsoft.EntityFrameworkCore.SqlServer 
dotnet add package Microsoft.EntityFrameworkCore.Tools 
dotnet add package Microsoft.EntityFrameworkCore.Design
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Scaffold entity type classes based on your database schema to your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet ef dbcontext scaffold &lt;span class="s2"&gt;"Server=**HOST**;Database=**DATABASE_NAME**;User Id=**USER**;Password=**PASSWORD**"&lt;/span&gt; Microsoft.EntityFrameworkCore.SqlServer &lt;span class="nt"&gt;--context-dir&lt;/span&gt; DbContext &lt;span class="nt"&gt;--context&lt;/span&gt; BlogExampleContext &lt;span class="nt"&gt;--output-dir&lt;/span&gt; Models
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Microsoft.EntityFrameworkCore.SqlServer&lt;/code&gt; refers to the package to be used to introspect the database.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--context-dir&lt;/code&gt; and &lt;code&gt;--output-dir&lt;/code&gt; refer to the location of the context and the entity type classes after introspection&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--context&lt;/code&gt; refers to the name of your database context&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On a successful run 2 folders with 4 files will be created in your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;*&lt;/span&gt;app-name&lt;span class="k"&gt;*&lt;/span&gt;/
┣ DbContext/
┃ ┗ BlogExampleContext.cs
┣ Models/
┃ ┣ Post.cs
┃ ┗ PrismaMigration.cs
┃ ┗ User.cs
┣ ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you will notice, &lt;code&gt;PrismaMigration.cs&lt;/code&gt; was not defined in &lt;code&gt;schema.prisma&lt;/code&gt;. This is a table created by Prisma to track the migrations that have been created and applied against your database.&lt;/p&gt;

&lt;p&gt;To exclude the &lt;code&gt;PrismaMigrations&lt;/code&gt; table, and re-run the previous command but specify the tables you would like using the &lt;code&gt;--table&lt;/code&gt; and &lt;code&gt;—force&lt;/code&gt; options to overwrite the existing models.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dotnet ef dbcontext scaffold &lt;span class="s2"&gt;"Server=**HOST**;Database=**DATABASE_NAME**;User Id=**USER**;Password=**PASSWORD**"&lt;/span&gt; Microsoft.EntityFrameworkCore.SqlServer &lt;span class="nt"&gt;--context-dir&lt;/span&gt; DbContext &lt;span class="nt"&gt;--context&lt;/span&gt; BlogExampleContext &lt;span class="nt"&gt;--output-dir&lt;/span&gt; Models &lt;span class="nt"&gt;--force&lt;/span&gt; &lt;span class="nt"&gt;--table&lt;/span&gt; User &lt;span class="nt"&gt;--table&lt;/span&gt; Post
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time, 3 files are generated and the &lt;code&gt;PrismaMigrations.cs&lt;/code&gt; file is excluded when scaffolding.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you're interested in migrating to Prisma with an existing database, the Prisma CLI provides &lt;code&gt;db pull&lt;/code&gt; for introspecting the database and populating &lt;code&gt;schema.prisma&lt;/code&gt; with your database models.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations! You have successfully modelled your entities, run a migration with Prisma and scaffolded your models and context with Entity Framework. &lt;/p&gt;

&lt;p&gt;Learn how you can set up and deploy a Prisma based Node.js REST API to Azure Functions together with Azure SQL in &lt;a href="https://www.prisma.io/docs/guides/deployment/deployment-guides/deploying-to-azure-functions"&gt;Deploying to Azure Functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you would like to learn more about Prisma, check out the &lt;a href="https://www.prisma.io/docs"&gt;documentation&lt;/a&gt; and feel free to create an &lt;a href="https://github.com/prisma/prisma/issues"&gt;issue&lt;/a&gt; or start a &lt;a href="https://github.com/prisma/prisma/discussions"&gt;discussion&lt;/a&gt; on GitHub.&lt;/p&gt;

</description>
      <category>prisma</category>
      <category>database</category>
      <category>backend</category>
      <category>entityframework</category>
    </item>
  </channel>
</rss>
