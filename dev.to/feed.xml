<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Developer Twitter Chats</title>
      <author>Kendall</author>
      <pubDate>Thu, 13 Jan 2022 16:25:36 +0000</pubDate>
      <link>https://dev.to/kendallkerr/developer-twitter-chats-4hf8</link>
      <guid>https://dev.to/kendallkerr/developer-twitter-chats-4hf8</guid>
      <description>&lt;p&gt;Hi! Does anyone have any insight into good Twitter chats for developers? Thanks in advance!&lt;/p&gt;

</description>
      <category>help</category>
    </item>
    <item>
      <title>Kaimono-MongoDB Atlas Hackathon Submission.</title>
      <author>Shivang Mishra</author>
      <pubDate>Thu, 13 Jan 2022 16:25:27 +0000</pubDate>
      <link>https://dev.to/shivangm24/kaimono-mongodb-atlas-hackathon-submission-mo7</link>
      <guid>https://dev.to/shivangm24/kaimono-mongodb-atlas-hackathon-submission-mo7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;My project is a E-Commerce Grocery store based on MERN Stack technology, I used the Mongo Atlas Search Feature in the search bar of the website with auto search configuration. Allowing users to search items all over website, it shows the item that matches the word or else show the item closest to the word typed by user.&lt;/p&gt;

&lt;p&gt;My Search Index Configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "mappings": {
    "dynamic": false,
    "fields": {
      "name": [
        {
          "foldDiacritics": false,
          "maxGrams": 5,
          "minGrams": 1,
          "tokenization": "edgeGram",
          "type": "autocomplete"
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;E-Commerce Creation&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ShivangM"&gt;
        ShivangM
      &lt;/a&gt; / &lt;a href="https://github.com/ShivangM/Kaimono-MongoDB-Atlas-Hackathon"&gt;
        Kaimono-MongoDB-Atlas-Hackathon
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ShivangM/Kaimono-MongoDB-Atlas-Hackathon"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UsiEepEHqFE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y0_rsIkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eenvlc449u3is0l2d2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y0_rsIkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eenvlc449u3is0l2d2q.png" alt="Image description" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was really fun for me participating in this hackathon and by building this project I came to learn different MongoDB features which would be really helpful in my future projects.&lt;/p&gt;

&lt;p&gt;Contributor: Shivang Mishra ( &lt;a class="mentioned-user" href="https://dev.to/shivangm24"&gt;@shivangm24&lt;/a&gt; )&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Search for any comments in the Rick Roll music video</title>
      <author>benthecoder</author>
      <pubDate>Thu, 13 Jan 2022 16:20:31 +0000</pubDate>
      <link>https://dev.to/benthecoder1/search-comments-for-the-rick-roll-music-video-25no</link>
      <guid>https://dev.to/benthecoder1/search-comments-for-the-rick-roll-music-video-25no</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;The main idea of the app is a filter feature for YouTube video comments. I sometimes do &lt;code&gt;CMD + F&lt;/code&gt; and look for particular comments and I thought it would be fun to make an app that filters out only comments I'm interested in.&lt;/p&gt;

&lt;p&gt;In my app, any user can search for comments in the popular rick roll video – Rick Astley's Never Gonna Give You Up.  There was restrictions in getting all the comment data however, due to the API quota restrictions. There's also the fact that there are new comments to the video every single day (2,047,723 comments as of the day this article is published)&lt;/p&gt;

&lt;p&gt;Nonetheless, I was only able to get ~1 million comments, which I believe is more than enough for this little side project.&lt;/p&gt;

&lt;p&gt;To build the web app, I used streamlit because it's easy to use and is great out-of-the-box. It has well designed components and I don't have to worry about web dev. &lt;/p&gt;

&lt;p&gt;To build the search functionality, I used MongoDB Atlas Search, which was great and simple to set up. I loved the fact that I could test my search index before writing any code.&lt;/p&gt;

&lt;p&gt;You can try out the app in the link below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://share.streamlit.io/benthecoder/yt-comments-mongodb-search/main/yt_comments/app.py"&gt;https://share.streamlit.io/benthecoder/yt-comments-mongodb-search/main/yt_comments/app.py&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Choose Your Own Adventure&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/benthecoder/yt-comments-mongodb-search"&gt;Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;App result for the query - "rickrolled"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yAbKSVMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16npsxau6a5nx8jhbx0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yAbKSVMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16npsxau6a5nx8jhbx0z.png" alt="rickrolled query result" width="880" height="529"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;data frame output of result&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MQ-DLMBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrsxvbcdpy45281t2x90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQ-DLMBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrsxvbcdpy45281t2x90.png" alt="data frame output" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;App result for query - "music"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UoI2emLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8ocrr4q54pnrmo94qh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoI2emLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8ocrr4q54pnrmo94qh4.png" alt="music query result" width="880" height="771"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>Why you have to use className in React, but not in Preact?</title>
      <author>Nikita Grechino</author>
      <pubDate>Thu, 13 Jan 2022 16:14:09 +0000</pubDate>
      <link>https://dev.to/fromaline/why-you-have-to-use-classname-in-react-but-not-in-preact-3fdm</link>
      <guid>https://dev.to/fromaline/why-you-have-to-use-classname-in-react-but-not-in-preact-3fdm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#state-of-things"&gt;
  &lt;/a&gt;
  State of things
&lt;/h2&gt;

&lt;p&gt;We all know this simple rule. Use &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt; if you write JSX.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleReactComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Example React component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://reactjs.org/docs/introducing-jsx.html#specifying-attributes-with-jsx"&gt;React docs warns&lt;/a&gt; us about this convention straightaway. And it goes even further, you need to specify all HTML attributes in &lt;code&gt;camelCase&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Okay, if it's the way things work, we can get used to it. Since JSX is different from HTML in a lot of ways, it's somewhat justifiable.&lt;/p&gt;

&lt;p&gt;Wait a moment. We actually &lt;strong&gt;can&lt;/strong&gt; use &lt;code&gt;class&lt;/code&gt; in JSX, but only if we would use Preact instead of React.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExamplePreactComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Example Preact Component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it's a legitimate &lt;a href="https://preactjs.com/guide/v10/differences-to-react#raw-html-attributeproperty-names"&gt;documented&lt;/a&gt; feature, not a coincidence or a bug. So, the question is - why? &lt;br&gt;
Why do we &lt;strong&gt;have to&lt;/strong&gt; &lt;code&gt;camelCase&lt;/code&gt; all HTML attributes in React, but not in Preact?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: If you aren't familiar with JSX, but want to read and understand this article anyway, check out &lt;a href="https://dev.to/fromaline/hyperscript-the-hidden-language-of-react-3d1f"&gt;my other article&lt;/a&gt;, where we take a look at what JSX is and how it works under the hood.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-reason-behind-the-rule"&gt;
  &lt;/a&gt;
  The reason behind the rule
&lt;/h2&gt;

&lt;p&gt;First thing first, let's clearly define the reason behind this rule in React.&lt;br&gt;
The official React docs have a quite vague explanation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since JSX is closer to JavaScript than to HTML, React DOM uses &lt;code&gt;camelCase&lt;/code&gt; property naming convention instead of HTML attribute names.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's hard to say solely from this explanation what the real reason is.&lt;br&gt;
So, let's google it and try to find more info!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#its-a-reserved-keyword"&gt;
  &lt;/a&gt;
  It's a reserved keyword
&lt;/h3&gt;

&lt;p&gt;There is &lt;a href="https://www.geeksforgeeks.org/why-react-uses-classname-over-class-attribute/#:~:text=Explanation%3A%20The%20only%20reason%20behind,className%20instead%20of%20class%20attribute."&gt;an article&lt;/a&gt; about this problem on GeeksForGeeks. Let's consider an explanation from it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The only reason behind the fact that it uses className over class is that the &lt;em&gt;&lt;strong&gt;class&lt;/strong&gt;&lt;/em&gt; is a reserved keyword in JavaScript and since we use JSX in React which itself is the extension of JavaScript, we have to use className instead of the class attribute.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First of all, yeah, technically speaking &lt;code&gt;class&lt;/code&gt; is a reserved keyword in JavaScript for making, so-called, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class"&gt;class declarations&lt;/a&gt; like this one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Polygon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we actually &lt;strong&gt;can&lt;/strong&gt; use &lt;code&gt;class&lt;/code&gt; keyword in JavaScript without much trouble.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;otherObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;otherObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may think, it didn't work last time I checked! And you'll be right.&lt;br&gt;
This works only in modern versions of JavaScript. So that's the point? Not exactly.&lt;br&gt;
In older versions of JavaScript, you may easily achieve the same thing by explicitly turning the &lt;code&gt;class&lt;/code&gt; property into a string literal like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;otherObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;otherObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, maybe the real reason is separate from this whole reserved-keyword issue. Maybe, it's the JSX itself!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-a-jsxspecific-issue"&gt;
  &lt;/a&gt;
  It's a JSX-specific issue
&lt;/h3&gt;

&lt;p&gt;Just think about it. JSX is an &lt;strong&gt;extension&lt;/strong&gt; of JavaScript, not one-to-one clone or so. That's why even though it's tightly coupled with JS, it may propose some other restrictions.&lt;/p&gt;

&lt;p&gt;Let's battle-test this theory. We'll declare a simple component with a &lt;code&gt;className&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll put it through Babel transpiler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/*#__PURE__*/&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;a href="https://babeljs.io/repl#?browsers=defaults&amp;amp;build=&amp;amp;builtIns=false&amp;amp;corejs=3.6&amp;amp;spec=false&amp;amp;loose=false&amp;amp;code_lz=MYewdgzgLgBApgDwIYFsAOAbOMC8MA8AJgJYBuMwGSEEAcqnDgEQBmIITAfABJwYYgYAdxAAnDIQCE-APQlSnIA&amp;amp;debug=false&amp;amp;forceAllTransforms=true&amp;amp;shippedProposals=false&amp;amp;circleciRepo=&amp;amp;evaluate=false&amp;amp;fileSize=true&amp;amp;timeTravel=false&amp;amp;sourceType=module&amp;amp;lineWrap=true&amp;amp;presets=react&amp;amp;prettier=false&amp;amp;targets=&amp;amp;version=7.16.9&amp;amp;externalPlugins=&amp;amp;assumptions=%7B%7D"&gt;Live example&lt;/a&gt; in Babel REPL, in case you want to check yourself.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The result is pretty much expected and fully valid. Now let's try another one. Let's use &lt;code&gt;class&lt;/code&gt; instead of &lt;code&gt;className&lt;/code&gt; in this try.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And after transpilation we get this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/*#__PURE__*/&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;a href="https://babeljs.io/repl#?browsers=defaults&amp;amp;build=&amp;amp;builtIns=false&amp;amp;corejs=3.6&amp;amp;spec=false&amp;amp;loose=false&amp;amp;code_lz=MYewdgzgLgBApgDwIYFsAOAbOMC8MA8AJgJYBuMwGSEEOARAGYgh0B8AEnBhiDAO4gAThkIBCfAHoSpVkA&amp;amp;debug=false&amp;amp;forceAllTransforms=true&amp;amp;shippedProposals=false&amp;amp;circleciRepo=&amp;amp;evaluate=false&amp;amp;fileSize=true&amp;amp;timeTravel=false&amp;amp;sourceType=module&amp;amp;lineWrap=true&amp;amp;presets=react&amp;amp;prettier=false&amp;amp;targets=&amp;amp;version=7.16.9&amp;amp;externalPlugins=&amp;amp;assumptions=%7B%7D"&gt;Live example&lt;/a&gt; of this try in Babel REPL.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First of all, it's fully valid, as well as, the former one.&lt;br&gt;
Secondly, Babel transpiles this snippet, like it was nothing new or weird for him. So, it seems like JSX isn't an issue either.&lt;/p&gt;

&lt;p&gt;Okay, maybe we'll face some issues in the render phase. Because JSX in itself is just syntax and it doesn't create UI on its own. We need to render JSX somewhere to see the end UI. So we'll try to do exactly that to see, if some problems may arise.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#its-a-render-function-problem"&gt;
  &lt;/a&gt;
  It's a render function problem
&lt;/h3&gt;

&lt;p&gt;Let's create a simple render function from scratch because obviously React won't allow us to use its render mechanism with &lt;code&gt;class&lt;/code&gt; instead of &lt;code&gt;className&lt;/code&gt;.&lt;br&gt;
Our render function will render the result of &lt;code&gt;React.createElement&lt;/code&gt; to the DOM. But what does the result of &lt;code&gt;React.createElement&lt;/code&gt; look like?&lt;br&gt;
&lt;code&gt;React.createElement&lt;/code&gt; returns, so-called, &lt;strong&gt;virtual node&lt;/strong&gt;. &lt;br&gt;
It looks like this in our case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="na"&gt;$typeof&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;_owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what is a virtual node anyway?&lt;br&gt;
Virtual node or vnode, in short, is just a lightweight representation of a given UI structure. In the case of the browser, the virtual node represents the real DOM node. React uses virtual nodes to construct and maintain, so-called, virtual DOM, which itself is a representation of real DOM.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: If you want to dig into this whole virtual madness, let me know in the comments and I'll make an article, where we'll go through the whole concept of virtual DOM and make our own implementation of it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To implement the render function and check how things work, we only need three basic properties of the vnode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// defines the type of a given vnode&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// defines all passed React props and HTML attributes of a given vnode&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// contains children of a given vnode&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Sidenote: If you want to understand what other properties are and why they are here, let me know in the comments section and I'll make detailed articles with a deep explanation of each individual property.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now with new knowledge we are fully ready to create our own render function for vnode tree. &lt;br&gt;
Let's start with the basics and create element of the passed type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's handle the props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;  
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's recursively add our children and handle edge-case, in which a child is a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;  
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last missing piece is actual mounting. So let's do it now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderedExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderedExample&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we're good to go. It's time to test how the render function will handle our virtual node with the &lt;code&gt;class&lt;/code&gt; prop.&lt;/p&gt;

&lt;p&gt;It works like a charm!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vd2Jtgoc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642006796053/tNzjaI4g5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vd2Jtgoc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642006796053/tNzjaI4g5.png" alt="screenshot.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://codesandbox.io/s/jsx-render-function-example-nq55s?file=/src/index.js"&gt;Live example&lt;/a&gt; on CodeSandbox.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It renders the &lt;code&gt;div&lt;/code&gt; with correct class &lt;code&gt;foo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added this simple bit of CSS to test if our class is in place. And it is, you can verify it yourself!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;coral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are completely sure, that the reason behind &lt;code&gt;className&lt;/code&gt; usage is not connected somehow to render function. We are sure because we implemented the render function, that uses &lt;code&gt;class&lt;/code&gt; ourselves. &lt;br&gt;
Now what? Maybe we should agree that it's some kind of convention and leave things as they are? No, we should take an even closer look at the problem.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-different-approach-to-the-problem"&gt;
  &lt;/a&gt;
  A different approach to the problem
&lt;/h2&gt;

&lt;p&gt;You see, there is a JS framework, called &lt;a href="https://preactjs.com/"&gt;Preact&lt;/a&gt;. It's an alternative to React with the same API. &lt;br&gt;
And there is a very interesting statement on its official page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V5KIzNH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642016822259/y8aSULZup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V5KIzNH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642016822259/y8aSULZup.png" alt="preact official page.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Closer to the DOM&lt;/em&gt;. Hmm, it's the exact thing, we are looking for. We try to use &lt;code&gt;class&lt;/code&gt;, which is a native way of adding CSS classes in DOM. And Preact uses this approach, it becomes clear from its &lt;a href="https://preactjs.com/guide/v10/differences-to-react/#raw-html-attributeproperty-names"&gt;official docs&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Preact aims to closely match the DOM specification supported by all major browsers. When applying &lt;code&gt;props&lt;/code&gt; to an element, Preact &lt;em&gt;detects&lt;/em&gt; whether each prop should be set as a property or HTML attribute. This makes it possible to set complex properties on Custom Elements, but it also means you can use attribute names like &lt;code&gt;class&lt;/code&gt; in JSX:&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// ...is the same as:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, let's dig into Preact source code to figure out why it works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explore-source-code"&gt;
  &lt;/a&gt;
  Explore source code
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Here is a &lt;a href="https://github.com/preactjs/preact/blob/master/src/create-element.js#L14"&gt;link&lt;/a&gt; to the source file on GitHub, in case you want to follow along.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's take a look at Preact &lt;code&gt;createElement&lt;/code&gt; function, which serves similar purpose as &lt;code&gt;React.createElement&lt;/code&gt;. Here's a snippet from the function body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;normalizedProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
            &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ref&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;normalizedProps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Preact &lt;code&gt;createElement&lt;/code&gt; function filters out only two properties, &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt;, and passes others to &lt;code&gt;normalizedProps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: If you're asking yourself, why Preact filters out &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt; and how these special props are handled internally by Preact, let me know in the comments section. I'll make detailed articles about these two props.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then Preact passes the resulting &lt;code&gt;normalizeProps&lt;/code&gt; to another function, called &lt;code&gt;createVNode&lt;/code&gt;, and returns the result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createVNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;normalizedProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dig into &lt;code&gt;createVNode&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/preactjs/preact/blob/master/src/create-element.js#L55"&gt;Source file on GitHub&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createVNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// No props transformation here&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="c1"&gt;// No props transformation here either&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It becomes obvious from the snippet, that the &lt;code&gt;createVNode&lt;/code&gt; function doesn't do any transformations with passed &lt;code&gt;props&lt;/code&gt;. It just returns the &lt;code&gt;props&lt;/code&gt; in the new &lt;code&gt;vnode&lt;/code&gt; object. And &lt;code&gt;vnode&lt;/code&gt; object is just a representation of a given DOM element and it'll be rendered to the real DOM in the future, as we now know.&lt;/p&gt;

&lt;p&gt;So the question is, how does Preact know either it is a complex property or HTML attribute if it passes all properties directly to the &lt;code&gt;vnode&lt;/code&gt;, that gets rendered in the end? For example, how does the event system work in this setup? &lt;br&gt;
Maybe the answer lies in the render phase? Let's give this guess a shot.&lt;/p&gt;

&lt;p&gt;There is a function, called &lt;code&gt;setProperty&lt;/code&gt;, which is responsible for setting a property value on a DOM node, as you may have gathered. This function is the main mechanism of setting properties to DOM nodes in Preact.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/preactjs/preact/blob/master/src/diff/props.js#L56"&gt;Source file on GitHub&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isSvg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;o&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So Preact actually checks whether the property name corresponds to some event and adds an event listener if it's the case. &lt;br&gt;
Such distinction allows Preact to deal with events passed through &lt;code&gt;onClick&lt;/code&gt;, &lt;code&gt;onInput&lt;/code&gt;, and other props like these, but at the same time allows to use standard HTML properties, like  &lt;code&gt;class&lt;/code&gt; instead of unique-to-JSX &lt;code&gt;className&lt;/code&gt;.&lt;br&gt;
But how does Preact handle user-defined custom props? The answer lies in the question itself.&lt;/p&gt;

&lt;p&gt;You see, we as a developers, may only pass custom properties to our own components. For example, let's define custom &lt;code&gt;UserDefinedComponent&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// UserDefinedComponent.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserDefinedComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;exampleFunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;brandText&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;exampleFunc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;brandText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UserDefinedComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And render it in the &lt;code&gt;App&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;UserDefinedComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./UserDefinedComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserDefinedComponent&lt;/span&gt; 
            &lt;span class="na"&gt;exampleFunc&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;brandText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you may see, there is no way how &lt;code&gt;exampleFunc&lt;/code&gt; and &lt;code&gt;brandText&lt;/code&gt; would be passed to the real HTML elements. And even if you intentionally do this, the browser will just ignore unknown properties, Preact doesn't need to additionally validate them on its side.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But why does React use &lt;code&gt;camelCase&lt;/code&gt; property naming convention instead of HTML attribute names, anyway?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-last-question"&gt;
  &lt;/a&gt;
  The last question
&lt;/h2&gt;

&lt;p&gt;There is no clear answer to this question. We may only make a few guesses.&lt;/p&gt;

&lt;p&gt;Maybe, it's really just a convention, that was proposed when React wasn't event public.&lt;/p&gt;

&lt;p&gt;Or maybe, React developers want to match &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/className"&gt;the JavaScript API&lt;/a&gt; more closely, than HTML one. Because in JS the standard way to access &lt;code&gt;Element&lt;/code&gt; class property is &lt;code&gt;Element.className&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new-example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It doesn't really matter at this point why they've done so. What matters is, that we now understand all nitty-gritty details about it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#today-we-learned"&gt;
  &lt;/a&gt;
  Today we learned
&lt;/h3&gt;

&lt;p&gt;Let's sum up what we learned today.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The reason why React uses the &lt;code&gt;camelCase&lt;/code&gt; property is probably not one of these:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;class&lt;/code&gt; is a reserved keyword in JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;camelCase&lt;/code&gt; properties can't be handled by JSX&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;camelCase&lt;/code&gt; properties mess up render function&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Preact uses standard HTML properties, because:

&lt;ul&gt;
&lt;li&gt;It aims to closely match the DOM specification&lt;/li&gt;
&lt;li&gt;It detects whether each prop should be set as a property or HTML attribute&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Digging into source code is more fun, than frightening 😄&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#im-looking-forward-to-similar-articles-what-should-i-do"&gt;
  &lt;/a&gt;
  I'm looking forward to similar articles, what should I do?
&lt;/h3&gt;

&lt;p&gt;First of all, if you &lt;em&gt;really&lt;/em&gt; like this post leave a comment or/and a reaction to let me know, that I am going in the right direction. Any constructive feedback, either positive or negative, will be welcomed 🙏&lt;/p&gt;

&lt;p&gt;If you want more content like this right now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You may check out my &lt;a href="https://dev.to/fromaline/series/16231"&gt;Deep dive into React codebase weekly series&lt;/a&gt;, where we take a thorough look at React source code.&lt;/li&gt;
&lt;li&gt;As I already mentioned, I have &lt;a href="https://dev.to/fromaline/hyperscript-the-hidden-language-of-react-3d1f"&gt;an article about obscured history behind JSX&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want more content like this next week:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on &lt;a href="https://dev.to/fromaline"&gt;dev.to&lt;/a&gt;, I am going to post an episode of the &lt;em&gt;Deep-dive-into-React-codebase series&lt;/em&gt; this Sunday (January 16) at 6:00 am UTC+0.&lt;/li&gt;
&lt;li&gt;Follow me on &lt;a href="https://blog.fromaline.com/"&gt;hashnode&lt;/a&gt;, I'll try to do my best to post an article every week or even make a special hashnode-exclusive series.&lt;/li&gt;
&lt;li&gt;Follow me on &lt;a href="https://twitter.com/fromaline"&gt;Twitter&lt;/a&gt;, if you want to know about every article I made and also read their sum-ups in threads.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Converting to Vite (Part 2)</title>
      <author>Matthew Foley</author>
      <pubDate>Thu, 13 Jan 2022 16:08:35 +0000</pubDate>
      <link>https://dev.to/opensauced/converting-to-vite-part-2-3li0</link>
      <guid>https://dev.to/opensauced/converting-to-vite-part-2-3li0</guid>
      <description>&lt;p&gt;In this post, I'm going to describe some of the snags that we encountered as we transitioned to Vite - at their best, snags become lessons!&lt;/p&gt;

&lt;p&gt;Open Sauced is a Progressive Web Application (PWA), and this includes the use of a Service Worker.  In my personal understanding, a Service Worker definition should be packaged as a standalone JavaScript file. When you look at how bundling is done in Vite, it will generate a &lt;code&gt;vendor.xyz.js&lt;/code&gt; file, an &lt;code&gt;index.xyz.js&lt;/code&gt; file, and otherwise pass through static assets in the &lt;code&gt;public&lt;/code&gt; directory as-is. Our webpack configuration on the other hand was configured to handle our &lt;code&gt;src/service-worker.js&lt;/code&gt; in a specific way. For that reason, we needed to move our &lt;code&gt;src/service-worker.js&lt;/code&gt; file to &lt;code&gt;public/service-worker.js&lt;/code&gt;, and move around the associations in our &lt;code&gt;src/index.js&lt;/code&gt; file. Another thing we had to learn about was the way Vite handles &lt;a href="https://vitejs.dev/guide/env-and-mode.html"&gt;environment variables&lt;/a&gt;.  Our application would look at whether the application was in production or development mode (and also whether it was being served locally) in order to decide whether to register the service worker. For a project using Webpack, you usually refer to these as &lt;code&gt;process.env.VARIABLE&lt;/code&gt; and the value is statically set in the bundling process. Vite does something a bit different, but instead you would need to refer to &lt;code&gt;import.meta.env.VARIABLE&lt;/code&gt; and only a handful of things are pre-set for you and otherwise you need to use a variable naming convention to have something statically included in the bundle. Fortunately, most of the variables we needed to use were included by default, so it was easy to get working (or so we thought). We tweaked and tweaked some more, and in the end, we just ended up using the &lt;a href="https://dev.to%20raw%20%60vite-plugin-pwa%60%20endraw%20"&gt;https://github.com/antfu/vite-plugin-pwa&lt;/a&gt; extension to handle everything, while moving most of our PWA manifest to &lt;code&gt;vite.config.ts&lt;/code&gt;. It's great to know how things work under the hood, but sometimes you just get better results with a plugin!&lt;/p&gt;

&lt;p&gt;Another thing that we ran into dealt with the fact that some libraries end up just a little bit differently in development bundling than in production bundling.  When developing, Vite takes advantage of ESM to let the browser effectively cache your dependencies, separated out into module files.  In production, everything is bundled into one vendor file. Libraries can export different compiled versions between these two situations. We were having a lot of trouble that we isolated down to a specific component, that in turn used the &lt;code&gt;react-markdown&lt;/code&gt; library. After reading through &lt;a href="https://github.com/vitejs/vite/issues/3592"&gt;issues&lt;/a&gt; for this one and its dependencies, we found that there was a circular reference in one of &lt;code&gt;react-markdown&lt;/code&gt;'s dependencies that only showed up in production bundles. &lt;/p&gt;

&lt;p&gt;The most straightforward fix for the circular reference was to update &lt;code&gt;react-markdown&lt;/code&gt; through one major revision, but this introduced a new snag.  In this major revision, &lt;code&gt;react-markdown&lt;/code&gt; changed to &lt;a href="https://github.com/remarkjs/react-markdown/blob/main/changelog.md#700---2021-08-13"&gt;ESM only&lt;/a&gt;, which would be fine for Vite, but not for our testing approach for &lt;code&gt;jest&lt;/code&gt; (other than experimentally, &lt;a href="https://jestjs.io/docs/ecmascript-modules"&gt;so I learned&lt;/a&gt;. &lt;a class="mentioned-user" href="https://dev.to/0vortex"&gt;@0vortex&lt;/a&gt; and I got some help from &lt;a class="mentioned-user" href="https://dev.to/jasonericdavis"&gt;@jasonericdavis&lt;/a&gt; on Discord to mock the &lt;code&gt;react-markdown&lt;/code&gt; component in Jest (bypassing the need for ESM support) as part of a &lt;a href="https://github.com/open-sauced/open-sauced/pull/1333"&gt;preparatory PR&lt;/a&gt;, and we got back on track.&lt;/p&gt;

&lt;p&gt;One takeaway that I had from this was the practice of stepping beyond running &lt;code&gt;vite dev&lt;/code&gt;, and running &lt;code&gt;vite build&lt;/code&gt; and &lt;code&gt;vite preview&lt;/code&gt; as well, in order to verify what would run in production. We use Netlify deploy previews in Open Sauced, and running both &lt;code&gt;vite build&lt;/code&gt; and &lt;code&gt;vite preview&lt;/code&gt; helps with reproducing production issues locally. We updated our &lt;code&gt;package.json&lt;/code&gt; to reflect these &lt;a href="https://vitejs.dev/guide/#command-line-interface"&gt;CLI commands&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I would love to hear from others what kind of experience they had switching from Webpack to Vite!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Cover image Photo by &lt;a href="https://unsplash.com/@william07?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;william william&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/container-ship?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;. I chose this one because I felt like &lt;a class="mentioned-user" href="https://dev.to/0vortex"&gt;@0vortex&lt;/a&gt; and I were the tugboats!&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

</description>
      <category>webpack</category>
      <category>vite</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Sending Text Messages with Javascript and Twilio</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 13 Jan 2022 15:46:10 +0000</pubDate>
      <link>https://dev.to/codesphere/sending-text-messages-with-javascript-and-twilio-2hpp</link>
      <guid>https://dev.to/codesphere/sending-text-messages-with-javascript-and-twilio-2hpp</guid>
      <description>&lt;p&gt;Twilio has become a favorite among devs looking to integrate messaging, calls, and streaming into their web and mobile apps. Their APIs are some of the most comprehensive and simple on the market, making it great for bootstrapping projects.&lt;/p&gt;

&lt;p&gt;In today’s tutorial, we’re going to be using Twilio’s messaging API to send text messages with Javascript. If you want us to cover any other Twilio services, let us know in the comments!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-setup"&gt;
  &lt;/a&gt;
  The Setup
&lt;/h3&gt;

&lt;p&gt;Before you start writing your NodeJS application, you need to set some things up&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install NodeJS on your computer.&lt;/li&gt;
&lt;li&gt;Before building your NodeJS application, you need to create a Twilio account to get data that will help you run your application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#to-set-up-your-twilio-account"&gt;
  &lt;/a&gt;
  To set up your Twilio account:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://www.twilio.com/try-twilio"&gt;https://www.twilio.com/try-twilio&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Enter the information required and accept the Terms of Service.&lt;/li&gt;
&lt;li&gt;Next, you will be asked a few questions by Twilio to aid you in using the platform. Answer them to finally reach your dashboard.&lt;/li&gt;
&lt;li&gt;Once you have signed up, the first thing you need to do is verify our email address.&lt;/li&gt;
&lt;li&gt;Add a phone number and verify that as well using OTP.&lt;/li&gt;
&lt;li&gt;Your dashboard will now display your “ACCOUNT SID” and “AUTH TOKEN”. Twilio hides “AUTH TOKEN” by default to keep your account safe from misuse.&lt;/li&gt;
&lt;li&gt;The dashboard will also display your account’s “TRIAL BALANCE”. This balance keeps decreasing as you keep using Twilio’s features.&lt;/li&gt;
&lt;li&gt;Twilio trial accounts only let you send texts to verified phone numbers. So you need to add any numbers and verify them using OTP before you can text them using the Twilio API.&lt;/li&gt;
&lt;li&gt;Generate a Twilio trial number. This number will act as the sender’s number inside your application.&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#the-application"&gt;
  &lt;/a&gt;
  The Application
&lt;/h3&gt;

&lt;p&gt;Follow the steps below to create your NodeJS application for sending texts using the Twilio API.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a folder with a Javascript file called &lt;code&gt;app.js&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Using the terminal, run &lt;code&gt;npm init&lt;/code&gt; inside the folder you just created. Accept all the defaults that pop on the terminal.&lt;/li&gt;
&lt;li&gt;Using the terminal again run the following command to install the Twilio dependency: &lt;code&gt;npm install twilio&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Our application will make use of the “ACCOUNT SID” and the “AUTH TOKEN” you received when you created the Twilio account. You can directly copy those inside your application but that’s not secure, hence not recommended. We will make use of JavaScript environment variables which will grab the values from a file for local use.&lt;/li&gt;
&lt;li&gt;To make use of environment variables you need to install a package called dotenv by running the following command in the terminal: &lt;code&gt;npm install dotenv&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Now create a file named .env inside your project folder. Add your Twilio “ACCOUNT SID” and “AUTH TOKEN” to this file as shown below
TWILIO_ACCOUNT_SID=
TWILIO_AUTH_TOKEN=
Note: Never share your account sid or auth token with anyone.&lt;/li&gt;
&lt;li&gt;We’ll then invoke the Twilio API like so&lt;/li&gt;
&lt;/ol&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;There you have it! When you run this javascript file (with ‘node app.js’) you should get a message on the number mentioned in the “to” field. Since this is a trial account your message will have “Sent from your Twilio trial account” prepended to it. Also, as mentioned before, you can only send texts to verified mobile numbers from a trial account. If you try to send a text to an unverified number the Twilio API will generate an error message. Every text you send will reduce the trial balance in your Twilio account.&lt;/p&gt;




&lt;p&gt;Well, you did it. You just created a basic application using NodeJS with Twilio API to send texts. When you are ready to show off your web app to the world, deploy it on &lt;a href="https://link.codesphere.com/HR"&gt;Codesphere&lt;/a&gt;, the first bottle-neck free cloud platform.&lt;/p&gt;

&lt;p&gt;Let us know in the comments what you plan to build using the Twilio API!&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>MongoDB Submission Post Trader Chart</title>
      <author>Joshua Evuetapha</author>
      <pubDate>Thu, 13 Jan 2022 15:33:49 +0000</pubDate>
      <link>https://dev.to/joshuajee/mongodb-submission-post-trader-chart-18nb</link>
      <guid>https://dev.to/joshuajee/mongodb-submission-post-trader-chart-18nb</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;This is a charting software for doing technical analysis on the Forex, Crypto and Stock market etc. It comes with Trend indicators like the Moving Average, Bollinger Band, Ichimoku Kinkō Hyō. It also comes with oscillators like the Relative strength index, Moving Average Convergence Divergence and Average True Range.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Prime Time: Stock Analysis&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;Checkout the repo for source code &lt;br&gt;
&lt;a href="https://github.com/Joshuajee/Trader-Chart"&gt;https://github.com/Joshuajee/Trader-Chart&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://trader-chart.herokuapp.com/"&gt;Click Here&lt;/a&gt; to view the app&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;All data stored in MongoDB Atlas &lt;code&gt;Timeseries&lt;/code&gt; collection for storing the data for each asset.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#built-with"&gt;
  &lt;/a&gt;
  Built With
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mongodb.com/"&gt;Mongodb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/"&gt;Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://formidable.com/open-source/victory/"&gt;Victory Chart&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  DEMO
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/w-agp1JobQU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://trader-chart.herokuapp.com/"&gt;Click Here&lt;/a&gt; for Live Demo&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FBtqOPo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vepta02a3pc0urd9jckz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FBtqOPo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vepta02a3pc0urd9jckz.png" alt="EURUSD CHART" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_7-n_Czj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46t5eac6kjj1yqd9tu7s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_7-n_Czj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46t5eac6kjj1yqd9tu7s.png" alt="Indicator Modal" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0RHPImwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yim6vvlxl2dmj14b9y0s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0RHPImwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yim6vvlxl2dmj14b9y0s.png" alt="Ichimoku Modal" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZOt7a1U_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0emn3t170jvvocwfxpsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZOt7a1U_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0emn3t170jvvocwfxpsv.png" alt="Color Picker" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_loRp6KG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mglknv8z59f28mutt7az.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_loRp6KG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mglknv8z59f28mutt7az.png" alt="IChimoku Cloud" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ADXn6A5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/158hkpcucrquwf0w07l3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ADXn6A5X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/158hkpcucrquwf0w07l3.png" alt="Oscilators" width="880" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--llmsc1nT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5bcyv79jgj9tzvq5vjd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--llmsc1nT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d5bcyv79jgj9tzvq5vjd.png" alt="Bollinger Band and Average True Range" width="880" height="447"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Conceito de Merge — Git e Github</title>
      <author>Luiz Eduardo Prado Veltroni</author>
      <pubDate>Thu, 13 Jan 2022 14:41:43 +0000</pubDate>
      <link>https://dev.to/eduardoopv/conceito-de-merge-git-e-github-4j0g</link>
      <guid>https://dev.to/eduardoopv/conceito-de-merge-git-e-github-4j0g</guid>
      <description>&lt;p&gt;Após conhecermos a tão famosa &lt;strong&gt;Branch&lt;/strong&gt; que tem como propósito &lt;em&gt;dividir&lt;/em&gt; a linha original do desenvolvimento do projeto, precisamos &lt;em&gt;"trazer"&lt;/em&gt; de volta para a branch main/master, dei uma breve explicação de como fazer isso em &lt;em&gt;&lt;a href="https://dev.to/eduardoopv/conceito-de-branch-git-e-github-2bfe"&gt;Conceito de branch&lt;/a&gt;&lt;/em&gt;, porém chegou a hora de se aprofundar no &lt;strong&gt;merge&lt;/strong&gt; e resolver os possíveis conflitos que irão aparecer(uma hora ou outra).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#merge"&gt;
  &lt;/a&gt;
  Merge
&lt;/h2&gt;

&lt;p&gt;O &lt;a href="https://git-scm.com/book/pt-br/v2/Branches-no-Git-O-b%C3%A1sico-de-Ramifica%C3%A7%C3%A3o-Branch-e-Mesclagem-Merge"&gt;merge&lt;/a&gt;(mesclagem) é o jeito do Git de pegar duas branchs e unificar em apenas um histórico. O comando &lt;code&gt;git merge&lt;/code&gt; permite que você pegue as linhas de desenvolvimento independentes criadas pelo &lt;code&gt;git branch&lt;/code&gt; e junta elas em apenas uma ramificação.&lt;/p&gt;

&lt;p&gt;É de extrema importância ter algo bem claro na hora de realizar um merge, sempre a branch que você está &lt;strong&gt;(HEAD)&lt;/strong&gt; vai ser a que vai "receber" a branch, sendo atualizado para refletir a mesclagem, a branch alvo não sofre nenhum tipo de alteração.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge&lt;/code&gt; é usado sempre depois do &lt;code&gt;git checkout&lt;/code&gt; para selecionar o branch atual que irá receber e com o &lt;code&gt;git branch -d&lt;/code&gt; para excluir o branch alvo obsoleto.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EM46LrJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0tg9kcg9dlp2vuy5hbd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EM46LrJS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0tg9kcg9dlp2vuy5hbd.jpg" alt="Ilustração de varias ramificações" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#merge-na-pr%C3%A1tica"&gt;
  &lt;/a&gt;
  Merge na prática
&lt;/h2&gt;

&lt;p&gt;Vamos utilizar um exemplo prático, digamos que você desenvolveu um &lt;em&gt;Header&lt;/em&gt; bem básico representado pela branch &lt;em&gt;feat/header (Nomenclatura tirada do &lt;a href="https://www.atlassian.com/br/git/tutorials/comparing-workflows/gitflow-workflow"&gt;Git Flow&lt;/a&gt;, explicarei futuramente)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2BsUGL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxymop9un20l1zge3mrt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2BsUGL8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxymop9un20l1zge3mrt.png" alt="Branch criada com o header" width="851" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois de ter criado uma branch com &lt;code&gt;git checkcout -b feat/header&lt;/code&gt; &lt;em&gt;(Lembrando que a flag -b do checkout cria uma branch e já move para ela)&lt;/em&gt;, realizamos as criações necessárias e commitamos o arquivo &lt;code&gt;index.html&lt;/code&gt; com &lt;code&gt;git commit -am "feat: header"&lt;/code&gt;&lt;em&gt;(Lembrando que a flag -am adiciona os arquivos e já realiza o commit)&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Agora o que precisamos fazer para juntar essa nova feature na branch principal, precisamos ir para a branch receptora, sempre atento para onde o HEAD está apontado, e realizamos o merge. Uma vez que a branch ficou obsoleta podemos excluir ela.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RGG7axpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv50fa19tamwks65obow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGG7axpB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xv50fa19tamwks65obow.png" alt="Output após o comando merge" width="807" height="214"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resolvendo-conflitos"&gt;
  &lt;/a&gt;
  Resolvendo Conflitos
&lt;/h2&gt;

&lt;p&gt;Durante o processo de criação e branchs e a junção com o merge, é possível que mais de um desenvolvedor edite a mesma linha de código, com isso o Git gera um conflito, por ter dois commits o Git não sabe qual utilizar, e não consegue resolver esse problema sozinho, é necessário que o usuário decida qual é o correto.&lt;/p&gt;

&lt;p&gt;Digamos que você ficou responsável por editar um link do header e um colega recebeu uma task para alterar a logo do footer, porém acabou adicionando alguns caracteres sem querer no link que você está alterando.&lt;/p&gt;

&lt;p&gt;Primeiro você cria uma nova branch de correção e realiza a alteração, cria um commit e mescla com a branch master, durante esse processo um colega adicionou o caractere acidental e realizou um commit na master.&lt;/p&gt;

&lt;p&gt;Nossa alteração:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hAKhZjju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tf9bhrnpy7kpsx4fjah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hAKhZjju--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tf9bhrnpy7kpsx4fjah.png" alt="Alterações no Index.html" width="803" height="213"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Acidente: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--85wmJfTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ys7bgr54ci700kzdsh18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--85wmJfTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ys7bgr54ci700kzdsh18.png" alt="Index.html com as alterações acidentais" width="361" height="194"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Você finalizou todas as alterações e da um &lt;code&gt;git checkout master&lt;/code&gt; que será a branch receptora, e realiza o &lt;code&gt;git merge fix/header&lt;/code&gt;, e acaba vendo um output no terminal &lt;em&gt;CONFLICT&lt;/em&gt;, e repara que algo mudou no editor de texto (&lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Terminal: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DbGktyVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipvy4mcdaf78ezogm36m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DbGktyVK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipvy4mcdaf78ezogm36m.png" alt="Output terminal conflict" width="489" height="132"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visual Studio Code:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0h6mI0j---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygsgjuxkkrgzwzu63p7s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0h6mI0j---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ygsgjuxkkrgzwzu63p7s.png" alt="Vistual Studio Code resolvendo conflito" width="702" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reparamos que ele adicionou alguns caracteres:&lt;br&gt;
&lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; Branch receptora (HEAD)&lt;br&gt;
&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; Branch de mesclagem (fix/header)&lt;br&gt;
&lt;code&gt;=======&lt;/code&gt; Separa as branchs, o de cima represente a branch recepctora e de baixo a de mesclagem.&lt;/p&gt;

&lt;p&gt;E podemos ver que existe um menu (clicavel) acima do conflito, nele existe algumas opções rápidas que podemos realizar, as mais importantes são:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Accept Current Change&lt;/code&gt;: Irá aceitar a branch receptora, nesse caso ele iria manter os caracteres acidentais.&lt;br&gt;
&lt;code&gt;Accept Incoming Change&lt;/code&gt;: Irá aceitar a alteração realizada no header, nesse caso seria "Conheça nossa empresa"&lt;br&gt;
&lt;code&gt;Accpet Both Changes&lt;/code&gt;: Ele aceita as duas modificações, criando então duas linhas, uma com os caracteres e outra com as alterações.&lt;/p&gt;

&lt;p&gt;No nosso caso queremos aceitar apenas o &lt;code&gt;Accept Incoming Change&lt;/code&gt; para manter as alterações que realizamos na branch &lt;code&gt;fix/header&lt;/code&gt;, podemos ver que nada muda, por que os arquivos conflitantes agora estão como &lt;em&gt;"&lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging"&gt;Unmerged&lt;/a&gt; patch"&lt;/em&gt;, precisamos adicionar ele no próximo commit &lt;code&gt;git add .&lt;/code&gt; e criar um commit de resolução &lt;code&gt;git commit -m "resolve conflitos no header"&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xHQEs1NX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/klwqxajl58krft2qmb0m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xHQEs1NX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/klwqxajl58krft2qmb0m.png" alt="Terminal de commit do conflito" width="519" height="450"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;E pronto temos o nosso conflito mais comum de acontecer resolvido e já podemos excluir a branch obsoleta das modificações.&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>programming</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>How do you manage FOMO?</title>
      <author>Ben Halpern</author>
      <pubDate>Thu, 13 Jan 2022 14:29:02 +0000</pubDate>
      <link>https://dev.to/ben/how-do-you-manage-fomo-b6g</link>
      <guid>https://dev.to/ben/how-do-you-manage-fomo-b6g</guid>
      <description>&lt;p&gt;There's always new things happening in software development. Fear of missing out can apply to feelings around interesting movements, possibly falling behind a mainstream curve, or perhaps financial opportunities in tech.&lt;/p&gt;

&lt;p&gt;But you're always going to be missing something, and it's not good to have anxiety over the unknown — any tips for mitigating FOMO?&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>⏰ Parikshan - Compiler to measure the running time of javascript functions</title>
      <author>Gajanan Patil</author>
      <pubDate>Thu, 13 Jan 2022 14:21:10 +0000</pubDate>
      <link>https://dev.to/gajananpp/parikshan-compiler-to-measure-the-running-time-of-javascript-functions-3fb8</link>
      <guid>https://dev.to/gajananpp/parikshan-compiler-to-measure-the-running-time-of-javascript-functions-3fb8</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Word "parikshan" is originated from Sanskrit language meaning "examine"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Compiles code and wraps function calls in source with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API"&gt;Performance&lt;/a&gt; hooks. &lt;/li&gt;
&lt;li&gt;Reports &lt;code&gt;duration&lt;/code&gt; along with details like &lt;code&gt;arguments&lt;/code&gt;, &lt;code&gt;calledAt&lt;/code&gt;, &lt;code&gt;returnedAt&lt;/code&gt;, &lt;code&gt;functionName&lt;/code&gt; and &lt;code&gt;location&lt;/code&gt; in source code (optional). In case the function returns a promise then finally handler will be attached to the promise and is reported once the finally handler is invoked. &lt;/li&gt;
&lt;li&gt;A &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver"&gt;PerformanceObserver&lt;/a&gt; stores the performance entries generated by &lt;code&gt;parikshan&lt;/code&gt; in &lt;a href="https://docs.mongodb.com/manual/core/timeseries-collections/"&gt;time series collection&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;Use this project's MongoDB Charts &lt;a href="https://github.com/gajananpp/parikshan/blob/main/assets/Parikshan.charts"&gt;dashboard file&lt;/a&gt; when creating a new dashboard by &lt;a href="https://www.mongodb.com/blog/post/import-export-your-charts-dashboards"&gt;importing&lt;/a&gt; it and connect it to collection created by parikshan. &lt;/li&gt;
&lt;li&gt;You can check dashboard for analysis done on &lt;a href="https://github.com/microsoft/BotBuilder-Samples/tree/main/samples/javascript_nodejs/43.complex-dialog"&gt;botbuilder example&lt;/a&gt; repository &lt;a href="https://charts.mongodb.com/charts-hackathon-xezpo/public/dashboards/61ddb47a-69ec-49df-8061-145da7025f8b"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Check project's &lt;a href="https://github.com/gajananpp/parikshan/blob/main/README.md"&gt;README&lt;/a&gt; for usage, docs and more information.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Prime Time&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gajananpp"&gt;
        gajananpp
      &lt;/a&gt; / &lt;a href="https://github.com/gajananpp/parikshan"&gt;
        parikshan
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      ⏰ Compiler to measure the running time of javascript functions
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;h1&gt;
⏰ Parikshan&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/gajananpp/parikshan/actions/workflows/lint.yml/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GKMXPjeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gajananpp/parikshan/actions/workflows/lint.yml/badge.svg" alt="lint"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/gajananpp/parikshan/actions/workflows/test.yml/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUclP4Bq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gajananpp/parikshan/actions/workflows/test.yml/badge.svg" alt="test"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/gajananpp/parikshan/actions/workflows/build.yml/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iJLz5Ptx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gajananpp/parikshan/actions/workflows/build.yml/badge.svg" alt="build"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/parikshan" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8a4359fd80a5ae8c088024a0e1a85e3a091fd5ce040a72b1f5647cda2c855a2e/68747470733a2f2f62616467652e667572792e696f2f6a732f706172696b7368616e2e737667" alt="npm version"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Compiler to measure the running time of javascript functions.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/gajananpp/parikshan#installation"&gt;Installation&lt;/a&gt; •
&lt;a href="https://github.com/gajananpp/parikshan#usage"&gt;Usage&lt;/a&gt; •
&lt;a href="https://github.com/gajananpp/parikshan#using-with-mongodb"&gt;Using with MongoDB&lt;/a&gt; •
&lt;a href="https://github.com/gajananpp/parikshan#faqs"&gt;FAQs&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Converts&lt;/p&gt;
&lt;div&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;// index.js&lt;/span&gt;
&lt;span class="pl-en"&gt;greet&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'John'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To&lt;/p&gt;
&lt;div&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;// output/index.js&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;parikshan&lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;"parikshan/build/src/parikshan"&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-en"&gt;parikshan&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;greet&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'John'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-c"&gt;// if compiled with -s flag then compiles to&lt;/span&gt;
&lt;span class="pl-en"&gt;parikshan&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;
  &lt;span class="pl-s1"&gt;greet&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-s"&gt;"start"&lt;/span&gt;:&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-s"&gt;"line"&lt;/span&gt;:&lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;&lt;span class="pl-s"&gt;"column"&lt;/span&gt;:&lt;span class="pl-c1"&gt;0&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;&lt;span class="pl-s"&gt;"end"&lt;/span&gt;:&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-s"&gt;"line"&lt;/span&gt;:&lt;span class="pl-c1"&gt;1&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;&lt;span class="pl-s"&gt;"column"&lt;/span&gt;:&lt;span class="pl-c1"&gt;13&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;&lt;span class="pl-s"&gt;"filename"&lt;/span&gt;:&lt;span class="pl-s"&gt;"index.js"&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;
&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'John'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;To install this package run:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;npm i parikshan -D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or with yarn run:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;yarn add parikshan -D
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;h3&gt;
CLI Usage&lt;/h3&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;
&lt;pre&gt;&lt;code&gt;parikshan  &amp;lt;files..&amp;amp;gt
Compiles code to performance.measure the functions

Positional Arguments:
  files  One or more files or glob patterns to compile

Options:
  -h, --help        Show help                                          [boolean]
  -v, --version     Show version number                                [boolean]
  -o, --output-dir  Output&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/gajananpp/parikshan"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Dashboard for analysis done on &lt;a href="https://github.com/microsoft/BotBuilder-Samples/tree/main/samples/javascript_nodejs/43.complex-dialog"&gt;botbuilder example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/gajananpp/embed/rNGqZLb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2a3-yKQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwyzq7zgal8snpjxd47z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2a3-yKQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bwyzq7zgal8snpjxd47z.png" alt="Parikshan MongoDB Charts" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Add ToS Agreement to Your Rails App using Devise?</title>
      <author>Zil Norvilis</author>
      <pubDate>Thu, 13 Jan 2022 14:15:41 +0000</pubDate>
      <link>https://dev.to/zilton7/how-to-add-tos-agreement-to-your-rails-app-using-devise-9ck</link>
      <guid>https://dev.to/zilton7/how-to-add-tos-agreement-to-your-rails-app-using-devise-9ck</guid>
      <description>&lt;p&gt;In this article, I will show you how to add functionality to your signup view, which will make the user to agree your app's Terms of Service (ToS) when creating new account.&lt;/p&gt;

&lt;p&gt;I am using these gems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rails 6.1.4.1&lt;/li&gt;
&lt;li&gt;Devise 4.8&lt;/li&gt;
&lt;li&gt;Simple Form 5.1&lt;/li&gt;
&lt;li&gt;Haml 5.2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I presume that you already have Devise and your User model setup and ready to go. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 1&lt;/strong&gt;&lt;br&gt;
Generate Devise registration controller with this command:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rails g devise:controllers users -c=registrations&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;and let  your routes know about it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# routes.rb

devise_for :users, controllers: {
      registrations: 'users/registrations'
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and generate your registration view, where you will add ToS agreement checkbox input:&lt;br&gt;
&lt;code&gt;&lt;br&gt;
rails g devise:views -v registrations&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 2&lt;/strong&gt;&lt;br&gt;
First off, you need to add new column to your database schema, with migration like this: &lt;br&gt;
&lt;code&gt;rails g migration AddTosAgreementToUsers tos_agreement:boolean&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;the migration file is gonna look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# 20220108144502_add_tos_agreement_to_users.rb

class AddTosAgreementToUsers &amp;lt; ActiveRecord::Migration[6.1]
  def change
    add_column :users, :tos_agreement, :boolean
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;migrate the change with &lt;code&gt;rails db:migrate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 3&lt;/strong&gt;&lt;br&gt;
Add the following to your User model so it forces ToS agreement to be checked before allowing to successfully submit registration form. Also make sure to include &lt;code&gt;on: :create&lt;/code&gt;, so this checkup is not forced on when user is just updating the profile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# users.rb

validates_acceptance_of :tos_agreement, allow_nil: false, on: :create
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;STEP 4&lt;/strong&gt;&lt;br&gt;
Permit the 'tos_agreement' param&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# users/registrations_controller.rb

  def configure_sign_up_params
    devise_parameter_sanitizer.permit(:sign_up, keys: [:tos_agreement])
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;STEP 5&lt;/strong&gt;&lt;br&gt;
Add the checkbox input to your registration form. I use link_to method to insert a link leading to my pre-created ToS page.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0xbNLRWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9pgba6rj61kgw4abt7y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0xbNLRWC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9pgba6rj61kgw4abt7y.png" alt="Terms of Service Checkbox Preview" width="700" height="120"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# app/views/devise/registrations/new.html.haml
= f.input :tos_agreement, as: :boolean,
         label: "I agree to #{link_to 'Terms of Service',
           terms_of_service_path, target: '_blank'}".html_safe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, now you should have a nice functionality that will force your app users to agree to your terms before creating new account.&lt;/p&gt;

</description>
      <category>rails</category>
      <category>devise</category>
      <category>ruby</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>The Simplest Way to Understand Blockchain Technology</title>
      <author>Richard Warepam</author>
      <pubDate>Thu, 13 Jan 2022 14:08:53 +0000</pubDate>
      <link>https://dev.to/coding_warepam/the-simplest-way-to-understand-blockchain-technology-4fee</link>
      <guid>https://dev.to/coding_warepam/the-simplest-way-to-understand-blockchain-technology-4fee</guid>
      <description>&lt;p&gt;Hey, If you are a new reader of my articles. Welcome to my world, where I explain different technologies in the easiest way possible for you! If you want to read my content, feel free to &lt;strong&gt;follow me on &lt;a href="https://medium.com/@richardwarepam"&gt;Medium&lt;/a&gt;&lt;/strong&gt; and also,&lt;br&gt;
&lt;strong&gt;Check out my Website: &lt;a href="https://richardwarepam.tech/blogs/"&gt;My Website&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-blockchain"&gt;
  &lt;/a&gt;
  What is Blockchain?
&lt;/h2&gt;

&lt;p&gt;Blockchain is defined as a &lt;strong&gt;decentralized, immutable&lt;/strong&gt;, and &lt;strong&gt;secure digital ledger that is distributed across a network&lt;/strong&gt; of computer systems.&lt;br&gt;
Now, let's take a closer look at this definition:&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-mean-by-decentralized"&gt;
  &lt;/a&gt;
  What is mean by decentralized?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CW_7Xvok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt8lhpuf1jyuixwt48dz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CW_7Xvok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qt8lhpuf1jyuixwt48dz.jpg" alt="Image description" width="880" height="624"&gt;&lt;/a&gt;&lt;br&gt;
Assume you wish to transfer some money to one of your buddies. &lt;em&gt;What will you do?&lt;/em&gt; You will request that your bank pay any amount of money to his bank account. An intermediary is involved in this process to execute the transaction. That, my friend, is what &lt;strong&gt;we term a "Centralized" system&lt;/strong&gt; because you won't be able to conduct the transaction if the middleman (bank authority) is unavailable for some reason.&lt;/p&gt;

&lt;p&gt;So, when we say it's a &lt;strong&gt;decentralized system&lt;/strong&gt;, &lt;em&gt;we imply there's no middleman involved&lt;/em&gt;. In other terms, blockchain employs &lt;strong&gt;the peer-to-peer (P2P) network system&lt;/strong&gt;.[Note: &lt;em&gt;Peer-to-Peer is a service in which two people engage directly with each other without the use of a third-party intermediary.&lt;/em&gt;]&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-mean-by-distributed-digital%C2%A0ledger"&gt;
  &lt;/a&gt;
  What is mean by distributed digital ledger?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0A2jSNVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tuzi5c6mtgskt72ugw5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0A2jSNVw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tuzi5c6mtgskt72ugw5.jpg" alt="Image description" width="880" height="624"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Do you see the book that the shops used to keep track of their sold things and the money they sold?&lt;/em&gt;– That is referred to as a &lt;strong&gt;ledger&lt;/strong&gt;. It is where we keep track of our transaction data for security purposes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What exactly is a digital ledger?&lt;/em&gt;&lt;/strong&gt; It is a ledger that stores all of a network's transaction details digitally."&lt;em&gt;Is blockchain technology then solely limited to the banking sector?&lt;/em&gt;" you may wonder. The response is a resounding &lt;strong&gt;NO!!&lt;/strong&gt; Because all you need to know about a "digital ledger" is that it can hold a massive quantity of data that is distributed among the users in a certain network. As a result, it is often referred to as a distributed digital ledger.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-meant-by-immutable"&gt;
  &lt;/a&gt;
  What is meant by immutable?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Immutable means&lt;/strong&gt; - &lt;em&gt;It can't be modified&lt;/em&gt;! So, Blockchain is immutable, after data is verified by everyone or the maximum percentage of the network users. That precise info can never be changed again. The reason for this is that the ledger is distributed to everyone in the network, and if the data in your ledger does not match that of others in the network, it will be rejected. &lt;strong&gt;You have no choice except to amend your ledger data.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-is-blockchain-considered-secure"&gt;
  &lt;/a&gt;
  Why is Blockchain considered secure?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3UCkPXrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlnkz1atxi1cz5eb32dm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3UCkPXrA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xlnkz1atxi1cz5eb32dm.jpg" alt="Image description" width="880" height="624"&gt;&lt;/a&gt;&lt;br&gt;
To understand why this technology is deemed secure, you must first understand the blockchain structure. A blockchain is a &lt;strong&gt;series of blocks linked together&lt;/strong&gt;. &lt;strong&gt;Data is kept inside these blocks&lt;/strong&gt;, together &lt;strong&gt;with its hash value&lt;/strong&gt; and the &lt;strong&gt;address of the previous block&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;What exactly is a hash value?&lt;/em&gt; A hash value can &lt;strong&gt;be thought of as a record's fingerprint&lt;/strong&gt;. The block's data is handled using a cryptographic technique and a unique numeric value. The hash value is generated to identify the block's data. If the data is changed in any way, the hash value will change dramatically. As a result, the hash value ensures that the block's data does not change.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;What if someone hacks the data by changing the address of a block?&lt;/strong&gt;&lt;/em&gt; If a block's address is modified, all subsequent blocks in that block become invalid, since all blocks are linked with the address of their prior block. So, in order to hack the blocks, the hackers must hack all of them at once, which appears to be an impossible task. As a result, it is also an extremely secure network.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#summary-of-what-is-blockchain-technology"&gt;
  &lt;/a&gt;
  Summary of What is Blockchain Technology?
&lt;/h2&gt;

&lt;p&gt;A blockchain is a chain of blocks with data saved within each block. These data are saved in a certain order, similar to a ledger, and once validated, they cannot be modified or manipulated. This secure ledger is transmitted to every user connected to the peer-to-peer decentralized network.&lt;br&gt;
As a result, it is characterized as &lt;strong&gt;a decentralized, immutable, and secure digital ledger distributed throughout a whole network.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;This was the simplest method to explain blockchain technology to you.&lt;br&gt;
If you enjoyed this blog, please &lt;strong&gt;remain connected with me by following me on Medium&lt;/strong&gt;, as I will continue to bring you articles that explain complex technologies in the simplest way possible.&lt;br&gt;
For more content: &lt;a href="https://richardwarepam.tech/blogs/"&gt;My Website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>web3</category>
      <category>ethereum</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
