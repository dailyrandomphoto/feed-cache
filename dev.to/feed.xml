<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Could Kubernetes Pods Ever Become Deprecated?</title>
      <author>Martin Heinz</author>
      <pubDate>Wed, 14 Jul 2021 18:37:36 +0000</pubDate>
      <link>https://dev.to/martinheinz/could-kubernetes-pods-ever-become-deprecated-3hdm</link>
      <guid>https://dev.to/martinheinz/could-kubernetes-pods-ever-become-deprecated-3hdm</guid>
      <description>&lt;p&gt;In any software project, over time new features and APIs are added and from time-to-time some of them also become deprecated and eventually get removed. Even huge project such as Kubernetes is no exception to this, yet core parts of its API don't really come to mind when thinking about deprecating and eventual removal. So, the question is - could a core object or API in Kubernetes, such as Pod, Deployment or Service be removed and if so, how would that go? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#long-story-short"&gt;
  &lt;/a&gt;
  Long Story Short
&lt;/h2&gt;

&lt;p&gt;If the answer to this question was &lt;em&gt;"no"&lt;/em&gt;, then there would be no reason for this article, so long story short - &lt;em&gt;"yes"&lt;/em&gt; - any core API object that's in GA, for example something from &lt;code&gt;v1&lt;/code&gt; API group could absolutely be deprecated.&lt;/p&gt;

&lt;p&gt;This simple general answer doesn't tell us much though. When it comes to deprecations, Kubernetes differentiates between couple types of objects, for example REST APIs, CLIs or feature gates. Each of them with its own set of objects with different level of maturity such as alpha, beta or GA. All of this plays role in how long and under what conditions some object - even something like Pod - could be deprecated. So, let's take a bit closer look at each, as well as some examples from the past and also some hypothetical ones that could happen in future. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-long-story"&gt;
  &lt;/a&gt;
  The Long Story
&lt;/h2&gt;

&lt;p&gt;Different rules apply for different objects/features, so before we talk about the deprecation rules and timelines, let's first go through all the different groups of objects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;REST objects&lt;/em&gt; - The part that we're most interested in - REST objects or REST APIs cover all the things that we interact with most often, that is - top-level objects such as Pods or Deployment, their schema fields, e.g. &lt;code&gt;containers&lt;/code&gt;, &lt;code&gt;volumes&lt;/code&gt; or &lt;code&gt;env&lt;/code&gt; as well as constants such &lt;code&gt;Always&lt;/code&gt;, &lt;code&gt;IfNotPresent&lt;/code&gt; and &lt;code&gt;Never&lt;/code&gt; that are used for &lt;code&gt;imagePullPolicy&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Flags or CLIs&lt;/em&gt; - The second most relevant group covers all the CLIs. The obvious one here's the &lt;code&gt;kubectl&lt;/code&gt;, but it also includes things like &lt;code&gt;kubelet&lt;/code&gt;, &lt;code&gt;kube-apiserver&lt;/code&gt; or &lt;code&gt;kube-scheduler&lt;/code&gt; as well as all their subcommands and flags.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Features/behaviors&lt;/em&gt; - Not everything can be exactly labeled with APIs or become part of CLI. There are also behaviours of the whole system as well as experimental features with various levels of maturity. These also need (and have) their own deprecation process and timeline.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Metrics&lt;/em&gt; - Finally, Kubernetes also exposes a lot of metrics on &lt;code&gt;/metrics&lt;/code&gt; endpoints of various services. Considering that a lot of them are being used for example for monitoring, they also can't just be changed or removed whenever, so they have their own set of rules.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#rest-objects"&gt;
  &lt;/a&gt;
  REST Objects
&lt;/h2&gt;

&lt;p&gt;For REST APIs or objects the general rule is that after deprecation is announced, API versions must be supported for at least:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GA: 12 months or 3 releases (whichever is longer)&lt;/li&gt;
&lt;li&gt;Beta: 9 months or 3 releases (whichever is longer)&lt;/li&gt;
&lt;li&gt;Alpha: 0 releases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That sounds pretty straightforward, but there are many other (not so understandable) rules that apply here, so let's just go straight to an example, that should make it clear. Let's imagine hypothetical API object called &lt;em&gt;Task&lt;/em&gt; (fun fact - that's actually the original name of &lt;em&gt;Pods&lt;/em&gt; - see &lt;a href="https://github.com/boddumanohar/kubernetes-first-commit/blob/2c4b3a562ce34cddc3f8218a2c4d11c7310e6d56/pkg/client/client.go#L19"&gt;first commit of Kubernetes&lt;/a&gt;). This Task is GA in API version &lt;code&gt;v1&lt;/code&gt; and it's decided that it should be deprecated, so what would really happen?&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Release&lt;/th&gt;
&lt;th&gt;API Versions&lt;/th&gt;
&lt;th&gt;Preferred&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;
&lt;em&gt;Task&lt;/em&gt; object is GA and non-deprecated in v1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+1&lt;/td&gt;
&lt;td&gt;v2alpha1, v1&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;
&lt;em&gt;Task&lt;/em&gt; is announced as being deprecated, v2alpha1 is introduced, &lt;em&gt;Task&lt;/em&gt; object doesn't exist in new version&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+2&lt;/td&gt;
&lt;td&gt;v2alpha2, v1&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;v2alpha1 is replaced with v2alpha2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+3&lt;/td&gt;
&lt;td&gt;v2beta1, v1&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;v2alpha2 is replaced with v2beta1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+4&lt;/td&gt;
&lt;td&gt;v2beta2, &lt;del&gt;v2beta1&lt;/del&gt;, v1&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;v2beta2 is introduced, v2beta1 still exists, but is now deprecated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+5&lt;/td&gt;
&lt;td&gt;v2, &lt;del&gt;v2beta2&lt;/del&gt;, &lt;del&gt;v2beta1&lt;/del&gt;, &lt;del&gt;v1&lt;/del&gt;
&lt;/td&gt;
&lt;td&gt;v1&lt;/td&gt;
&lt;td&gt;v2 is introduced, all other versions including preferred v1 are deprecated&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+6&lt;/td&gt;
&lt;td&gt;v2, &lt;del&gt;v2beta2&lt;/del&gt;, &lt;del&gt;v2beta1&lt;/del&gt;, &lt;del&gt;v1&lt;/del&gt;
&lt;/td&gt;
&lt;td&gt;v2&lt;/td&gt;
&lt;td&gt;No version are being removed yet, but v2 is now preferred version&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+7&lt;/td&gt;
&lt;td&gt;v2, &lt;del&gt;v2beta2&lt;/del&gt;, &lt;del&gt;v1&lt;/del&gt;
&lt;/td&gt;
&lt;td&gt;v2&lt;/td&gt;
&lt;td&gt;v2beta1 gets removed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+8&lt;/td&gt;
&lt;td&gt;v2, &lt;del&gt;v1&lt;/del&gt;
&lt;/td&gt;
&lt;td&gt;v2&lt;/td&gt;
&lt;td&gt;v2beta2 gets removed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+9&lt;/td&gt;
&lt;td&gt;v2, &lt;del&gt;v1&lt;/del&gt;
&lt;/td&gt;
&lt;td&gt;v2&lt;/td&gt;
&lt;td&gt;Nothing changes, v1 has to live for one more release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X+10&lt;/td&gt;
&lt;td&gt;v2&lt;/td&gt;
&lt;td&gt;v2&lt;/td&gt;
&lt;td&gt;v1 is finally removed and with it also &lt;em&gt;Task&lt;/em&gt; object is gone&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;From the above table you can see that if the &lt;em&gt;Task&lt;/em&gt; object becomes deprecated in API version &lt;code&gt;v2alpha1&lt;/code&gt;, it takes another 9 releases for it to be really gone from Kubernetes. Let me also remind you, that with &lt;a href="https://github.com/kubernetes/enhancements/tree/master/keps/sig-release/2572-release-cadence"&gt;current release cadence&lt;/a&gt; of 3 releases per year, this whole deprecation process would take more than 3 years!&lt;/p&gt;

&lt;p&gt;You should however consider all the objects that are not GA, yet we all are using them as if they were. One such example would be Ingress, which &lt;a href="https://opensource.googleblog.com/2020/09/kubernetes-ingress-goes-ga.html"&gt;became GA only in 1.19&lt;/a&gt; or CronJob very recently in &lt;a href="https://kubernetes.io/blog/2021/04/09/kubernetes-release-1.21-cronjob-ga/"&gt;1.21&lt;/a&gt;. In case of these kinds of beta or even alpha features the deprecation schedule wold not be so generous. If you want to check into which category some resources fall, you can run for example &lt;code&gt;kubectl api-resources | grep beta&lt;/code&gt; get list of all beta API in your cluster.&lt;/p&gt;

&lt;p&gt;Pretty much same rules apply to whole REST API object as well as its fields, constant values or object structure. This means that constants such as &lt;code&gt;Always&lt;/code&gt;, &lt;code&gt;IfNotPresent&lt;/code&gt; and &lt;code&gt;Never&lt;/code&gt; we all use for &lt;code&gt;imagePullPolicy&lt;/code&gt; won't just disappear or change randomly and in the same way fields won't move from one section to another.&lt;/p&gt;

&lt;p&gt;As for some real world examples - &lt;em&gt;PodSecurityPolicy&lt;/em&gt; is probably the biggest one in recent history. This API object is going from v1beta1 to EOL and it's deprecated as of v1.21 and will be removed in v1.25. For details take a look at &lt;a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-auth/2579-psp-replacement/README.md"&gt;KEP-2579&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another important recent/ongoing deprecation is removal of &lt;code&gt;selfLink&lt;/code&gt; field. This one is part of &lt;a href="https://github.com/kubernetes/enhancements/tree/master/keps/sig-api-machinery/1164-remove-selflink"&gt;KEP-1164&lt;/a&gt; and work on this change is also tracked in this &lt;a href="https://github.com/kubernetes/enhancements/issues/1164"&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're curious about what other deprecations are there, what's their rationale or their whole process of removal, then you can search &lt;a href="https://github.com/kubernetes/enhancements"&gt;kubernetes/enhancements repository&lt;/a&gt; for mentions of &lt;em&gt;"deprecate"&lt;/em&gt; and you will find all the relevant KEPs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flags-or-cli"&gt;
  &lt;/a&gt;
  Flags or CLI
&lt;/h2&gt;

&lt;p&gt;Similarly to REST objects, also &lt;code&gt;kubectl&lt;/code&gt; or &lt;code&gt;kubelet&lt;/code&gt; subcommands or their flags can be deprecated and therefore have its own policy.&lt;/p&gt;

&lt;p&gt;This is much simpler than the previous case. Here, for user-facing components, such as &lt;code&gt;kubectl&lt;/code&gt; the policy is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GA: 12 months or 2 releases (whichever is longer)&lt;/li&gt;
&lt;li&gt;Beta: 3 months or 1 release (whichever is longer)&lt;/li&gt;
&lt;li&gt;Alpha: 0 releases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and for admin-facing components, such as &lt;code&gt;kubelet&lt;/code&gt;, &lt;code&gt;kube-apiserver&lt;/code&gt; or &lt;code&gt;kube-scheduler&lt;/code&gt; it's:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GA: 6 months or 1 release (whichever is longer)&lt;/li&gt;
&lt;li&gt;Beta: 3 months or 1 release (whichever is longer)&lt;/li&gt;
&lt;li&gt;Alpha: 0 releases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Big recent example of deprecation in this area would be &lt;code&gt;dockershim&lt;/code&gt; which is part of &lt;code&gt;kubelet&lt;/code&gt;. Its deprecation and removal is outlined in following &lt;a href="https://github.com/kubernetes/enhancements/tree/master/keps/sig-node/2221-remove-dockershim"&gt;KEP&lt;/a&gt; which includes whole section for &lt;em&gt;removal plan&lt;/em&gt; which lists release v1.20 as target for deprecation as well as release v1.24 as target for removal.&lt;/p&gt;

&lt;p&gt;Another notable change in this area is &lt;code&gt;seccomp&lt;/code&gt; profiles going to GA, outlined in this &lt;a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/135-seccomp/README.md"&gt;KEP&lt;/a&gt;. &lt;code&gt;seccomp&lt;/code&gt; profiles aren't actually direct change to flags or any CLI, but bringing them GA requires deprecation of &lt;code&gt;kubelet&lt;/code&gt; flag &lt;code&gt;--seccomp-profile-root&lt;/code&gt; which is noted &lt;a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/135-seccomp/README.md#seccomp-root-path-configuration"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So bottom line for this section would be that deprecation timeline for CLIs is also quite generous, but if you're using some &lt;code&gt;kubectl alpha ...&lt;/code&gt; command for automation, then you better check deprecations before upgrading your cluster or even CLI binary/tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feature-gates"&gt;
  &lt;/a&gt;
  Feature Gates
&lt;/h2&gt;

&lt;p&gt;At any point in time, Kubernetes includes many experimental features. These features are controlled using so-called &lt;em&gt;feature gates&lt;/em&gt; which are key/value pairs that we can use to turn them on or off.&lt;/p&gt;

&lt;p&gt;Considering that feature gates are used for experimental features, their deprecation policy differs from other Kubernetes objects. Also, as the feature moves through maturity stages, the behaviour of its gate changes. For alpha features, the gate is disabled by default; for beta features it's enabled by default; and when features reaches GA status the gate is not needed anymore and becomes deprecated and non-operational.&lt;/p&gt;

&lt;p&gt;As for the time it takes to deprecate and remove these - alpha features can disappear anytime and beta ones after 1 release if they're being removed or after 2 releases if they're moving to GA status.&lt;/p&gt;

&lt;p&gt;For a concrete examples you can checkout full list of feature gates &lt;a href="https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/"&gt;here&lt;/a&gt;. There you can see for example &lt;code&gt;AffinityInAnnotations&lt;/code&gt; feature which went from alpha to deprecated, for the ones that went all the way to GA we could list e.g. &lt;code&gt;BlockVolume&lt;/code&gt;, &lt;code&gt;DryRun&lt;/code&gt; or &lt;code&gt;EndpointSlice&lt;/code&gt;. As for the case of feature getting deprecated after getting to beta stage - I wasn't able to find any.&lt;/p&gt;

&lt;p&gt;If you decide to turn on any of these, make sure to check for changes in their status before upgrading your cluster, especially for the alpha ones which might just be gone after a cluster upgrade.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metrics"&gt;
  &lt;/a&gt;
  Metrics
&lt;/h2&gt;

&lt;p&gt;Last type of an object in this list are metrics, which also need to be preserved for considerable amount of time when deprecating because a lot of them are consumed and aggregated by monitoring tooling. Unlike the ones in previous sections, metrics are split only into 2 categories. Here we have only stable and alpha metrics, where stable ones may be removed 3 releases after announced deprecation, while alpha ones can be removed anytime.&lt;/p&gt;

&lt;p&gt;For a sample of deprecated and removed metric you can take a look at this &lt;a href="https://github.com/kubernetes/kubernetes/pull/83836"&gt;commit&lt;/a&gt; which removes &lt;code&gt;rest_client_request_latency_seconds&lt;/code&gt; metric. You can also find it in release notes of v1.17 along with bunch of other &lt;a href="https://v1-17.docs.kubernetes.io/docs/setup/release/notes/#deprecated-changed-metrics"&gt;changed/deprecated metrics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to find out more about metrics lifecycle and its components you can take a look at this &lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/system-metrics/"&gt;docs page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Nowadays, it seems like many projects adopt more of a &lt;em&gt;"moving fast and breaking things"&lt;/em&gt; approach to deprecations coupled with frequent heavy handed changes, so it's nice to see big project such as Kubernetes having well thought out deprecation process that leaves a lot of time for users to migrate away from APIs and features that are planned to be removed.&lt;/p&gt;

&lt;p&gt;So, what is a takeaway from this article? - Can anything get deprecated? - &lt;em&gt;Yes&lt;/em&gt;. Should you worry about it? - &lt;em&gt;Clearly no&lt;/em&gt;. With how long some of the deprecation timelines are, there's no real reason to worry about having things taken away abruptly. With that said, you should probably check release notes and keep an eye out for all the alpha features you might be using as if they were GA. You can also checkout &lt;a href="https://kubernetes.io/docs/reference/using-api/deprecation-guide/"&gt;Deprecated API Migration Guide&lt;/a&gt; which lists all the APIs that are going to be removed at some point in future. And final note - none of this necessarily applies to CRDs - for CRDs developed by external vendors you have to check their own policies as they can do whatever they want with their applications/integration/solutions.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>api</category>
    </item>
    <item>
      <title>Horizontal Vs vertical scaling</title>
      <author>Saran Chakravarthi</author>
      <pubDate>Wed, 14 Jul 2021 18:12:19 +0000</pubDate>
      <link>https://dev.to/saran_chakravarthi/horizontal-vs-vertical-scaling-2h1h</link>
      <guid>https://dev.to/saran_chakravarthi/horizontal-vs-vertical-scaling-2h1h</guid>
      <description>&lt;p&gt;Hello Devs, in this article I'll walk you through the differences between horizontal and vertical scaling.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-scaling"&gt;
  &lt;/a&gt;
  What is scaling?
&lt;/h1&gt;

&lt;p&gt;Let's say, you have developed an application and it is gradually getting traction. The user base is growing and the users are loving your app. Great!&lt;/p&gt;

&lt;p&gt;The user base has grownup to a point where your system can't handle that much load. Not so cool. You don't want to disappoint your users, do you? You'll probably try to upgrade your system so that it can handle heavy load. You have two options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Buying more machines&lt;/li&gt;
&lt;li&gt;Buying a bigger machine&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There you have it. Scaling may be defined as the process upgrading your existing system to handle more load.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#horizontal-scaling"&gt;
  &lt;/a&gt;
  Horizontal scaling:
&lt;/h2&gt;

&lt;p&gt;It is the process of buying more machines.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hmm.. if we have more than one machine, how do we make sure that the load is spread equally among the machines?&lt;/em&gt; That's where load balancers come into play. Load balancers make sure that the traffic is distributed equally among the servers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Since we can buy as many machines as we want, we can say that horizontal scale scales well as the users increase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Even if one of the servers goes down, other working servers can handle the request. Hence it is resilient.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Load balancing is required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Servers communicate with eachother through network calls.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As we use more than one machine, it may lead to data inconsistency.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vertical-scaling"&gt;
  &lt;/a&gt;
  Vertical scaling:
&lt;/h2&gt;

&lt;p&gt;It is the process of buying a bigger machine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Load balancer is not required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We use only one machine, hence the data is consistent.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The communication happens through interprocess communication, no network calls needed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Single point of failure. Since we have only one machine, if it goes down the entire system will stop working.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Eventually we will reach the hardware limit.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading! I hope this article helped you.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>beginners</category>
      <category>distributedsystems</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Entrepreneurs to look out for, and their successful companies</title>
      <author>WyattRoberts14</author>
      <pubDate>Wed, 14 Jul 2021 18:03:50 +0000</pubDate>
      <link>https://dev.to/wyattroberts5/entrepreneurs-to-look-out-for-and-their-successful-companies-13bg</link>
      <guid>https://dev.to/wyattroberts5/entrepreneurs-to-look-out-for-and-their-successful-companies-13bg</guid>
      <description>&lt;p&gt;In this, lets call it crazy world, it's always eat or be eaten, especially in the world of entrepreneurs. Every new year brings us some new and exciting entrepreneurs and their products that aim to change the world.&lt;/p&gt;

&lt;p&gt;We all must have noticed the recent change in mindset around entrepreneurs, we were all laughing at the guy who had the right entrepreneur spirit 10 years ago, but now.. everyone wants to challenge it's difficulties.&lt;/p&gt;

&lt;p&gt;With all that being said, every year there are more new products and entrepreneurs with high hopes that we can even imagine, so how do we know which one is the, let's call it "messiah" or how many of them are the "real deal", the next Elon Musk, Steve Jobs etc.&lt;/p&gt;

&lt;p&gt;Well, people that's the reason we are all gathered today. I prepared a list of &lt;strong&gt;THREE&lt;/strong&gt; up and coming entrepreneurs who by the looks of it are a sure thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Brad Ormsby&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Brad uses years of online marketing experience to build businesses with an approach that’s different than most. &lt;/p&gt;

&lt;p&gt;Brad Ormsby is an entrepreneur who has leveraged a career in marketing to launch a variety of businesses in multiple industries. Just a few of the businesses he’s in include local service businesses, blogs, eCommerce stores, a wellness center, and a client-facing marketing company named &lt;a href="https://colorstonemarketing.com/"&gt;Colorstone Marketing&lt;/a&gt;. He first builds the customer base and then the business infrastructure to service the incoming clients. He parlays his experience in building and marketing his own businesses into helping clients build their businesses in a variety of industries and professions.&lt;/p&gt;

&lt;p&gt;His unique approach has allowed him to build multiple successful businesses in a short time without the normal capital-output that most business owners are forced into.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-o7ErKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asl2nncxh09ppdmmz0rr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-o7ErKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asl2nncxh09ppdmmz0rr.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Maksym Babych&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Maksym Babych is a CEO of &lt;a href="https://spdload.com/"&gt;SpdLoad&lt;/a&gt;, a startup development company located in Kharkiv, Ukraine. As a startup adviser at Startup Chile – the largest business accelerator in South America, and Startplatz – the local Cologne startup incubator, helps early-stage startups with setting up and scaling configuration of business processes.&lt;/p&gt;

&lt;p&gt;The company helps startups to launch their products and build software applications. Maksym is a serial entrepreneur and IT professional. SpdLoad was recognized as one of the top 20 web developers on Clutch. Today it has 20+ successful products in SaaS and Marketplace industry and several own products. Maksym established SpdLoad in 2013.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDjhRnpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glrbz75vw5htcr30iswu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDjhRnpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glrbz75vw5htcr30iswu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Erik Bergman&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://great.com/erik/"&gt;Erik Bergman&lt;/a&gt; is a successful businessman who made more then $50 million before turning 25. He owned a large media company called Catena Media, who then sold a few years ago.&lt;/p&gt;

&lt;p&gt;With that track record, we can only guess that the next company is going to be even better. His latest project is an Online Casino Affiliate company called &lt;a href="https://great.com/"&gt;great.com&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Besides being a successful businessman, Erik is an advocate for the fight against climate change and he has his own podcast called Becoming Great, and a wide audience on his Instagram profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ug-A7WVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhueegowr0ewos8kukd0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ug-A7WVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhueegowr0ewos8kukd0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>entrepreneur</category>
      <category>success</category>
      <category>company</category>
      <category>2021</category>
    </item>
    <item>
      <title>Does Dev Methodology Matter? w/ Chris Downard</title>
      <author>Conor Bronsdon</author>
      <pubDate>Wed, 14 Jul 2021 17:53:43 +0000</pubDate>
      <link>https://dev.to/linearb/does-dev-methodology-matter-w-chris-downard-593g</link>
      <guid>https://dev.to/linearb/does-dev-methodology-matter-w-chris-downard-593g</guid>
      <description>&lt;p&gt;Every software &lt;a href="https://linearb.io/blog/dev-methodology-doesnt-matter/"&gt;development method&lt;/a&gt; has its own rules your team is supposed to adhere to, but how flexible are these rules and what’s best for your team?&lt;/p&gt;

&lt;p&gt;Chris Downard, VP of Engineering at GigSmart, doesn’t let Agile or any other methodology define what’s right for his team. In this episode of &lt;a href="https://devinterrupted.com/podcast/does-dev-methodology-matter/"&gt;Dev Interrupted&lt;/a&gt;, we discuss how dev processes are changing in a remote world, why Chris got rid of dev teams altogether, and how to create your very own dev methodology.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/1GgSDWA592DNEbXJzJsIPC"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;How dev methodology has changed in the past year&lt;/li&gt;
&lt;li&gt;Why Chris made the decision to get rid of his dev teams&lt;/li&gt;
&lt;li&gt;Advice for other leaders following strict methodologies&lt;/li&gt;
&lt;li&gt;Creating your own methodology for continuous improvement&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>devteam</category>
      <category>methodology</category>
      <category>leadership</category>
    </item>
    <item>
      <title>How to use SecretStorage in your VSCode extensions</title>
      <author>Sergei Sumarokov</author>
      <pubDate>Wed, 14 Jul 2021 17:41:38 +0000</pubDate>
      <link>https://dev.to/kompotkot/how-to-use-secretstorage-in-your-vscode-extensions-2hco</link>
      <guid>https://dev.to/kompotkot/how-to-use-secretstorage-in-your-vscode-extensions-2hco</guid>
      <description>&lt;p&gt;There are several ways to save user data in VSCode. Until version 1.53.0 all private information used to be kept in Memento objects using &lt;a href="https://code.visualstudio.com/api/references/vscode-api#ExtensionContext"&gt;workspaceState and globalState&lt;/a&gt; or &lt;a href="https://github.com/microsoft/vscode-docker/pull/2709/files"&gt;keystone&lt;/a&gt;, for example. Keeping passwords with tokens in a standard configuration file or using environment variables wasn’t a good idea either, because all that data could be read and cached by other extensions.&lt;/p&gt;

&lt;p&gt;In this post, we will cover the ways of reading data from &lt;code&gt;settings.json&lt;/code&gt; and &lt;code&gt;environment variables&lt;/code&gt;. After that, we will create a class with minimum functionality, that is going to be responsible for keeping and giving away the keys with values from VSCode SecretStorage.&lt;br&gt;
Let’s call our project &lt;code&gt;fancycolor&lt;/code&gt;, for example. The whole initialization process is described in detail in &lt;a href="https://code.visualstudio.com/api/get-started/your-first-extension"&gt;VSCode Extensions documentation&lt;/a&gt;, so let’s go straight to the point here.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#settingsjson"&gt;
  &lt;/a&gt;
  settings.json
&lt;/h2&gt;

&lt;p&gt;All settings from all VSCode extensions are kept in a public file &lt;code&gt;settings.json&lt;/code&gt; and they all can be accessed using any other extension. For instance, from our fancycolor app, we can easily read the list of all hosts and platforms corresponding them from the configuration file of another popular app &lt;code&gt;SSH - Remote&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;configurationWorkspace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;workspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getConfiguration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sshRemotePlatform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;configurationWorkspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remote.SSH.remotePlatform&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sshRemotePlatform&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following code will display your configuration list for &lt;code&gt;SSH - Remote&lt;/code&gt; extension.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Proxy &lt;span class="o"&gt;{&lt;/span&gt;ubuntu: &lt;span class="s1"&gt;'linux'&lt;/span&gt;, home: &lt;span class="s1"&gt;'linux'&lt;/span&gt;, raspberry: &lt;span class="s1"&gt;'linux'&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#environment-variables"&gt;
  &lt;/a&gt;
  environment variables
&lt;/h2&gt;

&lt;p&gt;VSCode variables have access to all user’s environment variables by default. All the data which we saved in &lt;code&gt;.bashrc&lt;/code&gt; on Linux or &lt;code&gt;User.Environment&lt;/code&gt; on Windows can be received using global object &lt;code&gt;process.env&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, let’s make a file &lt;code&gt;/home/ubuntu/.env&lt;/code&gt; with a variable &lt;code&gt;ACCESS_TOKEN_ENV&lt;/code&gt; and add it in &lt;code&gt;.bashrc&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'export ACCESS_TOKEN_ENV="d8aba3b2-fda0-414a-b867-4798b7892bb4"'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /home/ubuntu/.env
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"source /home/ubuntu/.env"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; /home/ubuntu/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On Windows, we can do the same using Powershell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.Environment&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;SetEnvironmentVariable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ACCESS_TOKEN_ENV'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'d8aba3b2-fda0-414a-b867-4798b7892bb4'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;System.EnvironmentVariableTarget&lt;/span&gt;&lt;span class="p"&gt;]::&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let’s read it in our VSCode &lt;code&gt;fancycolor&lt;/code&gt; extension&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;process&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accessTokenEnv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ACCESS_TOKEN_ENV&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accessTokenEnv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see our token in the output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;d8aba3b2-fda0-414a-b867-4798b7892bb4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#secretstorage"&gt;
  &lt;/a&gt;
  SecretStorage
&lt;/h2&gt;

&lt;p&gt;Nowadays SecretStorage is the best way to keep passwords, logins, tokens, and any other private information in VSCode. To demonstrate that, let’s create a simple class &lt;code&gt;AuthSettings&lt;/code&gt;, where we will save &lt;code&gt;fancycolor_token&lt;/code&gt;, using only necessary methods such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;init&lt;/code&gt; - to initialize our SecretStorage&lt;/li&gt;
&lt;li&gt;getter &lt;code&gt;instance&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;storeAuthData&lt;/code&gt; - to write in SecretStorage&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;getAuthData&lt;/code&gt; - to get data from SecretStorage
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ExtensionContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SecretStorage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vscode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AuthSettings&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;_instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AuthSettings&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;secretStorage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SecretStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ExtensionContext&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/*
        Create instance of new AuthSettings.
        */&lt;/span&gt;
        &lt;span class="nx"&gt;AuthSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;AuthSettings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;secrets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;AuthSettings&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/*
        Getter of our AuthSettings existing instance.
        */&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;AuthSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_instance&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;storeAuthData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/*
        Update values in bugout_auth secret storage.
        */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;secretStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fancycolor_token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getAuthData&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/*
        Retrieve data from secret storage.
        */&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;secretStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fancycolor_token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;extensions.ts&lt;/code&gt; let’s write an option which will allow us to add and extract token using commands in Command Palette.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;vscode&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vscode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;AuthSettings&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./settings&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ExtensionContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Initialize and get current instance of our Secret Storage&lt;/span&gt;
    &lt;span class="nx"&gt;AuthSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;AuthSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;

    &lt;span class="c1"&gt;// Register commands to save and retrieve token&lt;/span&gt;
    &lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fancycolor.setToken&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showInputBox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;storeAuthData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;vscode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerCommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fancycolor.getToken&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tokenOutput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAuthData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tokenOutput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;deactivate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only thing left is to register commands &lt;code&gt;fancycolor.setToken&lt;/code&gt; and &lt;code&gt;fancycolor.getToken&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt; . Subsequently working with VSCode SecretStorage we can apply directly to a specific SecretStorage that was made for our app and will have its own &lt;code&gt;_id: 'undefined_publisher.fancycolor'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want a real-world example, &lt;a href="https://github.com/bugout-dev/bugout-vscode"&gt;see how we use SecretStorage in the Bugout VSCode extension&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Secret to Getting More Done</title>
      <author>Danielle Heberling</author>
      <pubDate>Wed, 14 Jul 2021 17:23:45 +0000</pubDate>
      <link>https://dev.to/koan/the-secret-to-getting-more-done-5hjh</link>
      <guid>https://dev.to/koan/the-secret-to-getting-more-done-5hjh</guid>
      <description>&lt;p&gt;It was a cold and rainy day as I sat alone in my home office debugging Webpack config errors. No matter what I tried, the errors would not go away. My natural inclination was to "just get through most of them" before eating lunch. But as I fixed errors, more emerged. Do you know what eventually got me through these hang ups?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#taking-a-break"&gt;
  &lt;/a&gt;
  Taking a break.
&lt;/h3&gt;

&lt;p&gt;As my hunger grew stronger, I decided to give in and went to lunch. Being able to step away and temporarily detach my mind from the task at hand was just what I needed to approach this problem with a fresh approach full of new things to try.&lt;/p&gt;

&lt;p&gt;Time and time again, the act of taking a break has helped immensely both for getting meaningful work done and for my overall mental state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Kq2CDbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhfok0l45ztij2l2evhg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Kq2CDbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yhfok0l45ztij2l2evhg.jpg" alt="sander-dalhuisen-nA6Xhnq2Od8-unsplash"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@sanderdalhuisen?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Sander Dalhuisen&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/lunch?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My top three activities while taking a break throughout the workday are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Take a walk outside if weather isn't too bad.&lt;/li&gt;
&lt;li&gt;Change my surroundings. This could mean working at nearby coffee shop or moving from a desk to a couch. The context switching required to get up and move also helps to refocus.&lt;/li&gt;
&lt;li&gt;Read a book. Bonus points if it is a physical copy or on an e-reader. It's important to not stare at the same screen all day.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://fortune.com/2021/07/06/kickstarter-four-day-work-week-2022/"&gt;Some companies&lt;/a&gt; are planning to take this idea a step further and are piloting a four day work week. Personally, I'm really interested to see how the rise of remote/hybrid workplaces as a result of the COVID-19 pandemic affects workers' break frequency. Curious to see if it goes up or down. In the meantime, I'm happy I get to work on a &lt;a href="https://www.koan.co/company/about"&gt;team&lt;/a&gt; that facilitates working with purpose, built on a culture that supports transparency, autonomy and inclusivity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Four-day weeks and hybrid workplaces don't mean less work—just a more honest accounting of what already goes on.&lt;/strong&gt; The standard work week in the USA is currently 40 hours, but no one is actually productive that entire time. I set up a poll on Twitter to get some data points on this and here's the results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eXptEHZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8mivpmmzhqoexq8sk1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eXptEHZv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u8mivpmmzhqoexq8sk1r.png" alt="twitterPoll"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remembering to take breaks has helped me to get more done while working fewer hours, and I can support my teammates better by bringing my best self to my work. Maybe it can help you too. What are some of your favorite activities to do when taking a break during the work day?&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>startup</category>
      <category>devjournal</category>
      <category>programming</category>
    </item>
    <item>
      <title>Reviewing big pull requests. What, why, how.</title>
      <author>Vladimir Penyazkov</author>
      <pubDate>Wed, 14 Jul 2021 17:17:39 +0000</pubDate>
      <link>https://dev.to/viezly/reviewing-big-pull-requests-what-why-how-4pm7</link>
      <guid>https://dev.to/viezly/reviewing-big-pull-requests-what-why-how-4pm7</guid>
      <description>&lt;p&gt;In this article, I will try to figure out what leads to big pull requests, what benefits they might provide, what can help you to review them.&lt;/p&gt;




&lt;p&gt;First of all, why on earth developers should care about the size of pull requests? In short — it has an enormous number of benefits, and all of them are well described in Google's article: &lt;a href="https://google.github.io/eng-practices/review/developer/small-cls.html"&gt;https://google.github.io/eng-practices/review/developer/small-cls.html&lt;/a&gt;. To mention some of them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reviewed more quickly&lt;/li&gt;
&lt;li&gt;Reviewed more thoroughly&lt;/li&gt;
&lt;li&gt;Less blocking on reviews&lt;/li&gt;
&lt;li&gt;Easier to design well&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and more...&lt;/p&gt;

&lt;p&gt;Talking about the size, when pull requests are considered big, it's hard to give a precise number. Often it depends on the type of changes, the project, personal experience. In some cases, 1k changed lines can mean a huge pull request, in others — an acceptable one. Usually, it starts to get harder to review changes when the number of changed files is increasing, rather than the number of changed lines in a couple of files.&lt;br&gt;
Further in the article, a big pull request will mean a relatively large amount of changed files (20+), the number of changed lines doesn't matter.&lt;/p&gt;

&lt;p&gt;Is it always possible to make a pull request small enough?&lt;br&gt;
In Google's article, they say it's extremely rare when there is no way to split a pull request into smaller parts. Personally, I'd agree with that, but from my experience, there are some situations when it's almost impossible to split changes, or even it's better to keep them in a single pull request, to name a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A change in a common component of the application. It might be a front-end component, or backend helper class, or whatever else.
Such changes usually stretch across dozens of files and it easily turns into a big pull request. 
It might be possible to split these changes, but reviewing that at once can provide its own benefits: often you can notice a missing set of changes which you won't find reviewing it in parts.&lt;/li&gt;
&lt;li&gt;Small and frequent pull requests are sacrificed for the sake of productivity. 
While small pull requests provide a lot of benefits, there is at least one drawback as well: they require more time to create all of them, maintain the stability of the build, and they more often distract colleagues from &lt;del&gt;watching youtube&lt;/del&gt; whatever they usually do at work.
If you're a small team, you want to deliver features faster, you trust each other and have a common vision on how things should be developed — then probably you can skip review at all or review only the final pull request to double-check important things (such as architecture decisions, API design, etc.) from a different perspective.&lt;/li&gt;
&lt;li&gt;Poorly established development process.
It's either a lack of management experience a team-lead has, a lot of newcomers in the team, or simply you just setting up a team. In such situations, you cannot be sure you won't receive a big pull request on review.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In all cases described above you as a reviewer end up with a big pull request which you have to review. Usually, it's an endless list of changed files which you have to go through, scroll up and down, and make a whole picture of it in your head: why this file has been changed, how the files are interconnected with each other, who's calling this function... It usually hard, takes time, and let's admit that it leads to a shallow review being done if at all.&lt;/p&gt;

&lt;p&gt;Just to remind you how it looks like here is an example. It's a pull request of just 16 files:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cBpffP_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rwmd6m3yx7muodr10j7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cBpffP_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rwmd6m3yx7muodr10j7.gif" alt="Reviewing at GitHub"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where is the best place to start the review from? Always start from the top isn't the best way, isn't it? How to understand what's been done here? Why some file's been changed? Where is a new function invoked?&lt;br&gt;
These are important things to know to perform a high-quality code review, but you don't know them until you read all the changed files and built a full &lt;em&gt;picture&lt;/em&gt; in your head.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But what if that &lt;em&gt;picture&lt;/em&gt; is built for you automatically? It could be literally a picture where all relations between files are shown and you can understand the scope of changes just after a look and decide where to start.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds cool, right?&lt;/p&gt;

&lt;p&gt;That’s what &lt;a href="https://viezly.com"&gt;Viezly&lt;/a&gt; does. &lt;br&gt;
Viezly is a review tool that splits the changes into smaller independent parts and provides diagrams where the relations between files are shown. With all this, a reviewer can faster get the understanding of what’s been changed and start to review by navigating from one file to another in an optimal way instead of scrolling a list of changes up and down to find out what's going on.&lt;/p&gt;

&lt;p&gt;Just compare the example above to this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nw4swq3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8jmq7qy7meyaq645rs9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nw4swq3n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q8jmq7qy7meyaq645rs9.gif" alt="Reviewing at Viezly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After just a single look at the diagrams, you see what packages have been changed, how the changes are related to each other. You can start reviewing from the root file or the most nested files as you prefer. Furthermore, the changes are divided into standalone groups to make them more comprehensible.&lt;/p&gt;

&lt;p&gt;Is that what you trying to keep in mind when reviewing the changes, isn't it?&lt;/p&gt;

&lt;p&gt;If you find this useful, as I do, check out more details at &lt;a href="https://viezly.com"&gt;viezly.com&lt;/a&gt; and stay tuned!&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>pullrequests</category>
      <category>visualization</category>
    </item>
    <item>
      <title>Caesar cipher in python</title>
      <author>nabroleonx</author>
      <pubDate>Wed, 14 Jul 2021 16:56:01 +0000</pubDate>
      <link>https://dev.to/nabroleonx/caesar-cipher-in-python-d88</link>
      <guid>https://dev.to/nabroleonx/caesar-cipher-in-python-d88</guid>
      <description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Caesar_cipher"&gt;&lt;code&gt;Caesar cipher&lt;/code&gt;&lt;/a&gt; is a method in which each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. For example with a shift of 1, A would be replaced by B, B would become C, and so on. The method is apparently named after Julius Caesar, who apparently used it to communicate with his officials. &lt;/p&gt;

&lt;p&gt;Thus to cipher a given text we need an integer value, known as a shift which indicates the number of positions each letter of the text has been moved down.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jDOYjjpp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/002xff2b659vst8y4ukb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jDOYjjpp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/002xff2b659vst8y4ukb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example: &lt;br&gt;
Text : &lt;code&gt;Nabroleonx&lt;/code&gt;&lt;br&gt;
Shift: &lt;code&gt;4&lt;/code&gt;&lt;br&gt;
Cipher: &lt;code&gt;Refvspisr|&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we are going to create a simple program in python that can encode and decode Caesar cipher based on the user's preference.&lt;/p&gt;

&lt;p&gt;First, let's discuss our algorithm:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Take input from the user&lt;/li&gt;
&lt;li&gt;Iterate over the string characters and get the ASCII value of the characters.&lt;/li&gt;
&lt;li&gt;Find the position of the characters from our designated initial ASCII character using the ASCII value we got in step 2&lt;/li&gt;
&lt;li&gt;Convert the number we found as position in step three into a character using ASCII which is going to be our encrypted message.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;🔰 For step 2 we are going to use &lt;code&gt;ord()&lt;/code&gt; function to convert a character to its integer position in the ASCII table( i.e. &lt;code&gt;ord(A)&lt;/code&gt; will give 65).&lt;/p&gt;

&lt;p&gt;🔰 For step 4 we will use &lt;code&gt;chr()&lt;/code&gt; to return the character from the ASCII table that represents the specified Unicode( i.e. &lt;code&gt;chr(65)&lt;/code&gt; will give "A").&lt;/p&gt;

&lt;p&gt;Let's take time to go over our main if condition for our cipher. our characters are assigned to integer values on the ASCII table and we need to know where our character to be encrypted/decrypted is located. So we use &lt;code&gt;ord()&lt;/code&gt; to change our characters to their integer equivalent in the ASCII table.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;position = ord(char) - ord(" ")&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;we subtracted the integer value of the blank space from the integer value of our character to see where our character is relative to our starting position which is blank space. After that &lt;/p&gt;

&lt;p&gt;&lt;code&gt;position = (position + shift) % 95&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here We’re taking mod with 95 because there are 95 characters in the ASCII table between blank space and "~".&lt;/p&gt;

&lt;p&gt;Then we will convert the new position that we had on the above line and add it to our initial character and use &lt;code&gt;chr()&lt;/code&gt; to change the integer value into the ASCII equivalent.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;new_char = chr(position + ord(" "))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;then we append it to our encrypted_message variable in each iteration and voila we got our encrypted_message.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;encrypted_message += new_char&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;🕛 Without further ado let's get to the coding part.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"""
    Written by: Nabroleonx July 14,2021
    Description: Caesar cipher encoder/decoder
"""

print('''
-------------------------------------------------------------
 To decrypt what you encrypted,use the negative of the shift
 value you entered to encrypt your message.
 If you used a shift value of "3" to encrypt your message,
 then use -3 to decrypt your message.
 ------------------------------------------------------------
''')

stop = 'no'

def cipher(message, shift):
    encrypted_message = ""
    for char in message:
        if char &amp;gt;= " " and char &amp;lt;= "~":
            position = ord(char) - ord(" ")
            position = (position + shift) % 95
            new_char = chr(position + ord(" "))
            encrypted_message += new_char
    print("The encrypted message is: ", encrypted_message)


while stop == 'no':

    message = input("Enter the message you want to encrypt/decrypt: ")
    shift = int(input("enter the shift value u want: "))

    cipher(message, shift)

    again = input("do you want to continue? yes/no ").lower()

    if again == 'yes':
        continue
    else:
        print("\n Thanks for using me! Till next time, Cya")
        stop = 'yes'

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for Caesar cipher, Happy encrypting and decrypting! This is my first post. Any comments or suggestions are welcome.&lt;/p&gt;

&lt;p&gt;See y'all next time.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>3 simple CSS tricks to improve UX</title>
      <author>Stas Melnikov</author>
      <pubDate>Wed, 14 Jul 2021 16:43:07 +0000</pubDate>
      <link>https://dev.to/melnik909/3-simple-css-tricks-to-improve-ux-4g29</link>
      <guid>https://dev.to/melnik909/3-simple-css-tricks-to-improve-ux-4g29</guid>
      <description>&lt;h2&gt;
  &lt;a href="#resize-none-vs-resize-vertical"&gt;
  &lt;/a&gt;
  resize: none vs resize: vertical
&lt;/h2&gt;

&lt;p&gt;Whenever I see textarea with a fixed height I want to scream: "Give me userfriendly textarea". I want to enter data comfortably. Give me this.&lt;/p&gt;

&lt;p&gt;I understand developers do that because textarea changing breaks the layout. But we can find a more elegant solution. &lt;/p&gt;

&lt;p&gt;Set a minimal comfortable height and save resizing of it but disable width changes using resize: vertical. And your users will not break the layout by chance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;textarea&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vertical&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#backgroundcolor-helps-users-interact-with-ui"&gt;
  &lt;/a&gt;
  background-color helps users interact with UI
&lt;/h2&gt;

&lt;p&gt;Designers love to use background images and that's a nice way to draw users' attention. But there is the problem of text accessibility in this case. &lt;/p&gt;

&lt;p&gt;Loading of background images takes some time. So while they are loading we can't read the text that's related to images and feel confusing. &lt;/p&gt;

&lt;p&gt;But there is a solution. We just can pick a background color and add it using the background-color property for the block with the background image so that text would be readable always. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.intro&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("example.jpg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.intro&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url("example.jpg")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#88cead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-start-and-end-keywords"&gt;
  &lt;/a&gt;
  The start and end keywords
&lt;/h2&gt;

&lt;p&gt;When our website becomes popular there is the important issue of translating on different languages. For example, I often wanted to translate the website from English to Arabic. &lt;/p&gt;

&lt;p&gt;The problem is following, English is a matter of languages where the beginning of the line is on the left (LTR) and in Arabic the beginning of the line is on the right (RTL).  &lt;/p&gt;

&lt;p&gt;So if I use the text-align: left for Arabic users they will be confused because the beginning of the line will be by the left and no right like he thought. &lt;/p&gt;

&lt;p&gt;It happens because the left and right values don't consider text direction, i.e when we use the left or right value a text is aligned to the left or right edge always.&lt;/p&gt;

&lt;p&gt;But we can fix it using the start and end values that consider the text direction. If a browser of our user is setting in LTR language the beginning of the line will be by left. And if it's setting in RTL language then by right. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;don't do this&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* or */&lt;/span&gt;

&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;you can use this instead&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* or */&lt;/span&gt;

&lt;span class="nc"&gt;.example&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;P.S.&lt;/strong&gt;&lt;br&gt;
I'm always open to any opportunities to share knowledge about CSS and HTML with you. So I can:&lt;br&gt;
🖐 answer any of your questions about CSS and HTML (&lt;em&gt;free&lt;/em&gt;)&lt;br&gt;
💻 make written code review of your projects (&lt;em&gt;paid&lt;/em&gt;)&lt;br&gt;
👨‍🎓 tell about what you should learn (&lt;em&gt;paid&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Just chat me on &lt;a href="mailto:melnik909@ya.ru"&gt;melnik909@ya.ru&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also you can support me one from the following ways:&lt;br&gt;
👘 Buy a shirt: &lt;a href="https://www.redbubble.com/shop/ap/79109127"&gt;https://www.redbubble.com/shop/ap/79109127&lt;/a&gt;&lt;br&gt;
🥇 Get my new posts first: &lt;a href="https://www.patreon.com/melnik909"&gt;https://www.patreon.com/melnik909&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P.S.S.&lt;/strong&gt; This post was written with the support of my sponsors: Ashlea Gable, Ben Rinehart, Sergio Kagiema, Jesse Willard, Tanya Ten.&lt;/p&gt;

</description>
      <category>css</category>
      <category>ux</category>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learn &amp; Implement Contest - AWS UG OSTech Conf 2021</title>
      <author>awsugjaipur</author>
      <pubDate>Wed, 14 Jul 2021 16:38:10 +0000</pubDate>
      <link>https://dev.to/awsugjaipur/learn-implement-contest-aws-ug-ostech-conf-2021-3lfn</link>
      <guid>https://dev.to/awsugjaipur/learn-implement-contest-aws-ug-ostech-conf-2021-3lfn</guid>
      <description>&lt;p&gt;This contest is a part of &lt;a href="https://awsugjaipur.tech"&gt;AWS UG OSTech Conf 2021&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(Prerequisite: Must have access to AWS console)&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step1-launching-ec2-instance"&gt;
  &lt;/a&gt;
  Step1: Launching EC2 instance
&lt;/h2&gt;

&lt;p&gt;1.1) In AWS Console, search for EC2 and click on that service, you will be redirected to the AWS EC2 page as follows and then click on Launch Instance.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U8R3HmH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxpn57brfpofhyi9jdjv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U8R3HmH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hxpn57brfpofhyi9jdjv.jpeg" alt="Launching EC2 Instance"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.2) To run EC2 successfully, select an &lt;strong&gt;Amazon Machine Image (AMI)&lt;/strong&gt;. AMI contains all the software configurations (Operating System, Application Server, and applications) required to launch your instance. In this case, we will pick Amazon Linux AMI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKQm6MCx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsw1ws9gj30lsi3usn65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKQm6MCx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsw1ws9gj30lsi3usn65.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.3) Now, select the &lt;strong&gt;Instance Type&lt;/strong&gt; that determines the type of CPU, storage, network capacity, and memory needed during the installation. Choose &lt;strong&gt;t2.micro&lt;/strong&gt;, and hit the next button as shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o547QGY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umit0nao3iz7z6kysaad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o547QGY5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umit0nao3iz7z6kysaad.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.4) Click the &lt;strong&gt;Next&lt;/strong&gt; button until you reach the Configure Security Group page to retain the default settings. A security group is a set of firewall rules that control the traffic for your instance. On this page, you can add rules to allow specific traffic to reach your instance.&lt;/p&gt;

&lt;p&gt;For example, if you want to set up a web server and allow internet traffic to reach your instance, add rules that allow unrestricted access to the HTTP and HTTPS ports.&lt;br&gt;
Enter the Security Group name and then hit the &lt;strong&gt;Review and Launch button&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bm3T8tuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y67d5dfxqvpn6xzc4x86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bm3T8tuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y67d5dfxqvpn6xzc4x86.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.5) After hitting the Launch button you will see a pop-up page that requires you to select a &lt;strong&gt;Key Pair&lt;/strong&gt;. This contains both a public and private key folder that is used to connect to your EC2 Instance securely via SSH. Click on the &lt;strong&gt;create a new key pair&lt;/strong&gt; button and give a name to the key pair. Go ahead and download your key pair.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9XhVqsUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olyly4z5pim4fp5nkd2p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9XhVqsUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olyly4z5pim4fp5nkd2p.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.6) Save your key file to a safe place on your system and then click on Launch Instances, it will direct you to the launching page. Hit the &lt;strong&gt;View Instances&lt;/strong&gt; button to access the EC2 Instances page, then click on connect and you will see several options to connect your instance, it will only need SSH to be installed and the &lt;strong&gt;pem key&lt;/strong&gt; that you have downloaded, mentioned in the previous step.&lt;/p&gt;

&lt;p&gt;Copy &lt;strong&gt;ssh&lt;/strong&gt; command provided there and use it to connect, you can use Git Bash, CMD, or Putty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WCcoWGHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6amyd285dolxbju99v26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WCcoWGHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6amyd285dolxbju99v26.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-install-required-tools-and-packages"&gt;
  &lt;/a&gt;
  Step 2: Install required tools and packages
&lt;/h2&gt;

&lt;p&gt;2.1) After connecting to the instance via SSH, now run the below commands -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; sudo su 
 yum update -y
 yum install docker git -y
 systemctl start docker
 usermod -a -G docker ec2-user
 systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These commands will install Docker and Git in your AMI, and enable your Docker service.  &lt;/p&gt;

&lt;p&gt;2.2) Now you have to clone a repository and modify a file by replacing AWS with your &lt;strong&gt;Full Name&lt;/strong&gt; by using the below commands -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; git clone https://github.com/AWS-User-Group-Jaipur-Rajasthan/OSTechConf21.git
 cd OSTechConf21/contests/learn-and-implement/`
 sed -i 's/I am/AWS/g' learn/index.html`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note: Don't forget to replace AWS with your name like :-&lt;br&gt;
&lt;code&gt;$ sed -i 's/I am/Elon Musk/g' learn/index.html&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-3-build-image-and-run-container"&gt;
  &lt;/a&gt;
  Step 3: Build Image and Run Container
&lt;/h2&gt;

&lt;p&gt;First, check that you are in the &lt;strong&gt;learn-and-implement/&lt;/strong&gt; folder and a &lt;strong&gt;Dockerfile&lt;/strong&gt; is present.&lt;br&gt;
&lt;em&gt;This command will build the image&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t 'ostechconf21' .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;This command will run your docker container in which web page is hosted&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -p 80:80 -d ostechconf21
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzje6kBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjfz2509lq9q6o1nt82t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lzje6kBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjfz2509lq9q6o1nt82t.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's Done! 🥳&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-final-steps"&gt;
  &lt;/a&gt;
  Step 4: Final Steps
&lt;/h2&gt;

&lt;p&gt;4.1) Open the &lt;strong&gt;Amazon EC2 console&lt;/strong&gt; and in the navigation pane, choose Instances and select your instance.&lt;/p&gt;

&lt;p&gt;The following information is available on the Networking tab:&lt;br&gt;
Public IPv4 DNS — The external DNS hostname.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xChrVW_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2ybq3ibdqw76u4abvdi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xChrVW_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2ybq3ibdqw76u4abvdi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4.2) Copy the Public DNS and paste that in any browser. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eClmJcS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh48vn09njrgpxtf955r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eClmJcS4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh48vn09njrgpxtf955r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Congratulations !! If you can see your webpage with your name as above screenshot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;4.3) Now go to EC2 console and copy instance Public DNS and open that in any browser and share the screenshot as given on contest page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect with AWS UG Jaipur:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/c/AWSUserGroupJaipurRajasthan/"&gt;YouTube&lt;/a&gt; | &lt;a href="https://www.linkedin.com/company/awsjaipur"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://github.com/AWS-User-Group-Jaipur-Rajasthan"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>docker</category>
      <category>opensource</category>
      <category>awsugjaipur</category>
    </item>
    <item>
      <title>An Intro To Webpack </title>
      <author>Erin Marshall</author>
      <pubDate>Wed, 14 Jul 2021 16:31:02 +0000</pubDate>
      <link>https://dev.to/giantmachines/an-intro-to-webpack-l2n</link>
      <guid>https://dev.to/giantmachines/an-intro-to-webpack-l2n</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IbGsj8Z8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i9yjl25fw1226s3r0w6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IbGsj8Z8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9i9yjl25fw1226s3r0w6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webpack.js.org"&gt;Webpack&lt;/a&gt; is a tool we see often in today's web apps. But what exactly does it do? In this article we will go over some key concepts for understanding webpack, what it does, and how we can configure it. We'll also build our own custom webpack plugin, which can give us a better understanding of how webpack works as a whole. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-webpack"&gt;
  &lt;/a&gt;
  What is webpack?
&lt;/h2&gt;

&lt;p&gt;Webpack takes the modules and dependencies in our web applications and assembles them into an asset that is optimized for browsers. It’s a static module bundler. This means that when we write our web application, and we set up the many folders, file extensions, and dependencies that make up our app, we can depend on webpack to take that information and assemble it into a neat bundle that the browser can retrieve in as little as one API call. Webpack is a &lt;em&gt;static&lt;/em&gt; module bundler because it expects the dependencies to be defined at compile time.&lt;/p&gt;

&lt;p&gt;When we add webpack to our application, we won't have to worry about organizing or ordering our dependencies in the code bundle served to the client, and we even have additional options for further configuring this bundle to suit our application's needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-webpack"&gt;
  &lt;/a&gt;
  Configuring webpack
&lt;/h2&gt;

&lt;p&gt;We use webpack.config files to customize the behavior of webpack. A webpack.config file exports an object containing our desired settings. &lt;/p&gt;

&lt;p&gt;We have quite a few &lt;a href="https://webpack.js.org/configuration/#options"&gt;options&lt;/a&gt; we can choose from to customize our config, so I'll mention a few very useful ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Entry&lt;/strong&gt;: The entry point is the file where the application starts executing. With this entry point option, we can designate the place where webpack will start looking for dependencies and building the bundle.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Output&lt;/strong&gt;: This is where we can choose the target directory for output files. This must be an absolute path, so it is useful to use the node &lt;code&gt;path&lt;/code&gt; module.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Loaders (Module Rules)&lt;/strong&gt;: The module option allows us to indicate any loaders we want to use. Loaders pre-process files as they’re imported. They allow webpack to deal with various file types, and they’re applied on a per-file basis. In the config file, it is important to note that they are loaded from right to left in an array of loaders.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Plugins&lt;/strong&gt;: Plugins are extensions for webpack that alter how webpack works. Plugins are applied as the bundle is being created. They hook into key events during the compilation process to change or extend the behavior of webpack. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s an example of a webpack.config file and how we might choose to define the options listed above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const path = require("path");
const MyPlugin = require('my-plugin');
const AnotherPlugin = require('another-plugin');

module.exports = {
  entry: './src',
  output: {
    path: path.resolve(__dirname, "dist"),
    filename: "[name].ready.js"
  },
  module: {
    rules: [
      {
        test: /\.fileextension$/,
        use: ["third-loader", "second-loader", "first-loader-for-this-file-type"]
      },
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: ["babel-loader"]
      },
      {
        test: /\.scss$/,
        use: ["style-loader", "css-loader", "sass-loader"]
      }
    ]
  },
  plugins: [
    new MyPlugin(),
    new AnotherPlugin(),
  ]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Please note that with a few modifications, it is also possible to set up our webpack.config file with &lt;a href="https://webpack.js.org/configuration/configuration-types/#exporting-a-function"&gt;multiple configurations&lt;/a&gt; for different environments and/or in a language &lt;a href="https://webpack.js.org/configuration/configuration-languages/"&gt;other than JavaScript&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-happening-when-webpack-bundles-our-project"&gt;
  &lt;/a&gt;
  What's happening when webpack bundles our project?
&lt;/h2&gt;

&lt;p&gt;When webpack runs, it builds a dependency graph providing an interface for webpack to access our dependencies while it builds the bundle. Absolute paths and other file information are gathered in the graph. Webpack then creates modules from each of these dependencies, and those modules are parsed into an &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;Abstract Syntax Tree&lt;/a&gt;. The asset that is ultimately generated for the browser is composed from boilerplate templates. Your code is taken as data from the AST and inserted into these templates to become a file specially formatted for a browser. &lt;/p&gt;

&lt;p&gt;If we take a look at the &lt;a href="https://github.com/webpack/webpack/tree/master/lib"&gt;webpack repository&lt;/a&gt; on GitHub, we will find files containing the definitions of some of the key classes that handle the compilation process in webpack. Webpack makes use of its &lt;a href="https://github.com/webpack/tapable"&gt;Tapable&lt;/a&gt; library to expose hooks for events during the bundle creation process. Many of the classes in webpack extend Tapable in order to provide hooks to plugins so that they, too, can access lifecycle events.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/webpack/webpack/blob/master/lib/Compiler.js"&gt;Compiler&lt;/a&gt; is one of these classes. It is where all the higher level events for webpack are fired, including the instantiation of plugins and the Compilation class.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://github.com/webpack/webpack/blob/master/lib/Compilation.js"&gt;Compilation class&lt;/a&gt; builds a graph of the application's dependencies by recursively traversing the dependencies in the project. It is the class responsible for passing dependencies to loaders for conversion, parsing dependencies into an AST, and interpolating the parsed code into templates to generate the final bundles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-our-own-custom-webpack-plugin"&gt;
  &lt;/a&gt;
  Building our own custom webpack plugin
&lt;/h2&gt;

&lt;p&gt;Now, let's take a closer look at another important part of webpack: plugins. Plugins alter webpack’s behavior. Some &lt;a href="https://webpack.js.org/plugins/"&gt;examples&lt;/a&gt; of what plugins can be used for include file compression, specifying environment variables, and code minification.  &lt;/p&gt;

&lt;p&gt;If we take a closer look at how plugins work, it can give us a better understanding of how webpack works as a whole. A lot of the core functionality of webpack itself is built on the same infrastructure that any custom plugins make use of.&lt;/p&gt;

&lt;p&gt;As mentioned above, many of the key classes that make up webpack extend the Tapable library to expose hooks into their own lifecycle events. Plugins take advantage of these hooks in order to access webpack at different points in the compilation process and customize webpack’s behavior.&lt;/p&gt;

&lt;p&gt;To see how plugins make use of lifecycle hooks, we can write a simple example plugin.&lt;/p&gt;

&lt;p&gt;In this plugin (which will be a JavaScript class), we will need to define an &lt;code&gt;apply&lt;/code&gt; method.  Webpack  will use &lt;a href="https://github.com/webpack/webpack/blob/57d79f1c54e12dfc4e4998daa3de55486cbdc7c4/lib/webpack.js#L74"&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt; to install the plugin when it creates the compiler instance. It will also pass down a reference to the compiler instance as an argument to the plugin. Our plugin will tap into a hook on the compiler instance, and pass that hook a  callback that will then be executed at a certain lifecycle event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class SimplePlugin {

  apply(compiler) {
    compiler.hooks.compilation.tap("SimplePlugin", (compilation) =&amp;gt; {
      compilation.hooks.succeedModule.tap("SimplePlugin", (module) =&amp;gt; {

        // What we want to happen

      });
    });
  }
}

module.exports = SimplePlugin;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, we can see that we take the compiler instance as an argument and are able to access a compilation hook within the &lt;a href="https://webpack.js.org/api/compiler-hooks"&gt;compiler's hooks&lt;/a&gt;. We can then call &lt;code&gt;tap&lt;/code&gt; on that hook and pass it a callback to run our plugin.&lt;/p&gt;

&lt;p&gt;Then, inside of that first callback, we are able to access any of the compilation lifecycle event hooks. For this example, let’s use the &lt;a href="https://webpack.js.org/api/compilation-hooks/#succeedmodule"&gt;&lt;code&gt;succeedModule&lt;/code&gt;&lt;/a&gt; hook, which is executed each time a module is successfully built during compilation. We call the &lt;code&gt;tap&lt;/code&gt; method once more and again pass it a second callback function. Within this second callback, we are able to execute code at this particular moment in the webpack lifecycle—when a module is successfully compiled during webpack's compilation process. (Webpack will pass the completed module as an argument to our second callback.) &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;compilation&lt;/code&gt; and &lt;code&gt;succeedModule&lt;/code&gt; hooks that we’ve chosen to tap in the above example are just two of a long list of lifecycle events that we can access using our apply method’s &lt;code&gt;compiler&lt;/code&gt; argument. The webpack docs provide a list of the names and descriptions of the events accessible from the compiler &lt;a href="https://webpack.js.org/api/compiler-hooks/"&gt;here&lt;/a&gt;, and we can use the &lt;code&gt;tap&lt;/code&gt; method to access any of these events. &lt;/p&gt;

&lt;p&gt;Finally, to install our plugin, we would need to include it in our webpack.config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const SimplePlugin = require("./plugins/simple-plugin.js");

module.exports = {
...

  plugins: [
    new SimplePlugin(),
  ]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, our plugin code will be executed each time the &lt;code&gt;succeedModule&lt;/code&gt; lifecycle event occurs during compilation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So, to wrap things up: Webpack is a static module bundler. It takes modules and dependencies in our web apps and assembles them into an asset that is optimized for browsers. Webpack traverses the dependencies in our apps, converts them into modules, and parses them into an AST. This information is then inserted into templates which make up the bundle created for our browser.&lt;/p&gt;

&lt;p&gt;We can configure webpack's entry point, output, module loaders, and plugins—among other options—in our webpack.config file. Plugins are extensions to webpack that alter how webpack works by hooking into a webpack lifecycle event and executing custom code.&lt;/p&gt;

&lt;p&gt;If you're curious to learn more about webpack and how it works, a great place to start is the 'concepts' section of the webpack &lt;a href="https://webpack.js.org/concepts/"&gt;docs&lt;/a&gt; as well as webpack's GitHub &lt;a href="https://github.com/webpack"&gt;repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-alternatives-to-webpack"&gt;
  &lt;/a&gt;
  &lt;em&gt;Additional resources: alternatives to webpack&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Webpack is not your only option when it comes to building your website: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One alternative tool is &lt;a href="https://www.snowpack.dev/"&gt;Snowpack&lt;/a&gt;, which ships and caches each file individually. It takes advantage of ES Modules' import and export functionality, which in recent years has come to be supported by many modern browsers. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://rollupjs.org/guide/en/"&gt;Rollup&lt;/a&gt; is another choice that takes advantage of ES Modules.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://parceljs.org/"&gt;Parcel&lt;/a&gt; is an alternative that can work well for small-scale projects. It requires less configuration than webpack—or none at all.
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webpack</category>
      <category>frontend</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>HTML Semantic Tags, Why is it important to use Semantic HTML?</title>
      <author>Ranjeet Singh</author>
      <pubDate>Wed, 14 Jul 2021 16:27:17 +0000</pubDate>
      <link>https://dev.to/jeetsdev/html-semantic-tags-why-is-it-important-to-use-semantic-html-32ek</link>
      <guid>https://dev.to/jeetsdev/html-semantic-tags-why-is-it-important-to-use-semantic-html-32ek</guid>
      <description>&lt;p&gt;Often times I come across this jargon word &lt;strong&gt;Semantic&lt;/strong&gt; in HTML, Here I am gonna explain this &lt;strong&gt;Semantic&lt;/strong&gt; word and also what it is used for in HTML, So first and for most let's understand the meaning of &lt;strong&gt;Semantic&lt;/strong&gt; word, As Wikipedia says, &lt;strong&gt;Semantic&lt;/strong&gt; means syntactically valid string, so we can say that &lt;strong&gt;Semantic&lt;/strong&gt; tags mean syntactically valid tags or in simple words, we can say that &lt;strong&gt;Semantic&lt;/strong&gt; elements are those elements that convey some specific meanings and indicate what type of content they contain and what role that content plays in the document.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M1wKfqGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbn4blzkjo4br6zz6vdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M1wKfqGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbn4blzkjo4br6zz6vdg.png" alt="Semantic VS Non-Semantic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-we-need-to-use-semantic-html-tags"&gt;
  &lt;/a&gt;
  Why do we need to use semantic HTML tags?
&lt;/h3&gt;

&lt;p&gt;But why bother writing &lt;strong&gt;Semantic&lt;/strong&gt; HTML, If you design all the &lt;code&gt;div&lt;/code&gt; correctly then you won't see any difference in the UI of your webpage. However, remember one thing that you are not just dealing with humans, there are  &lt;a href="https://en.wikipedia.org/wiki/Web_crawler"&gt;Web Crawlers&lt;/a&gt; and search engines spiders too, they read web pages automatically, without prior knowledge of what they might find. These are dependent on the &lt;strong&gt;Semantic&lt;/strong&gt; clarity of web pages they find as they use various techniques and algorithms to read and index millions of web pages a day and provide web users with relevant results and obviously, leads to a better search engine ranking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Semantic&lt;/strong&gt; elements also increase the  &lt;a href="https://en.wikipedia.org/wiki/Web_Content_Accessibility_Guidelines"&gt;web accessibility&lt;/a&gt;  of the web pages and help screen readers and as we know the number of smart devices keeps growing. It also simplifies page navigation for assistive technologies as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Semantic&lt;/strong&gt; elements also improve the code structure and make code more readable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-semantic-html-tags"&gt;
  &lt;/a&gt;
  Some Semantic HTML tags
&lt;/h3&gt;

&lt;p&gt;There is pleather of &lt;strong&gt;Semantic&lt;/strong&gt; tags that exist in HTML but most of them are not that much used on most websites. Some &lt;strong&gt;Semantic&lt;/strong&gt; tags that are mostly used and popular too are : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nav&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;section&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;aside&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;figure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;figcaption&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;article&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;details&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;footer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can learn about roughly 100 Semantic tags examples on  &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element"&gt;MDN&lt;/a&gt;, and yeah if you want a detailed article on these tags and how they work internally then let me know and I will surely come up with one more article on that too.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Semantic&lt;/strong&gt; HTML is not only about using the new &lt;strong&gt;Semantic&lt;/strong&gt; tags but about using the correct tags for each element so that it is easy to navigate for all users.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the end, I just want to say that learning &lt;strong&gt;Semantic&lt;/strong&gt; markup will make your life easier, your code cleaner, and your website better. &lt;/p&gt;

&lt;p&gt;Thanks for reading 🙏 &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
    </item>
  </channel>
</rss>
