<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Setting up application monitoring for your Nodejs app in 20 mins with open source solution</title>
      <author>Ankit Anand</author>
      <pubDate>Tue, 08 Jun 2021 13:37:27 +0000</pubDate>
      <link>https://dev.to/signoz/setting-up-application-monitoring-for-your-nodejs-app-in-20-mins-with-open-source-solution-134i</link>
      <guid>https://dev.to/signoz/setting-up-application-monitoring-for-your-nodejs-app-in-20-mins-with-open-source-solution-134i</guid>
      <description>&lt;p&gt;Node.js tops the list of most widely used frameworks by developers. Powered by Google's V8 javascript engine, its performance is incredible. Ryan Dahl, the creator of Node.js, wanted to create real-time websites with push capability. On Nov 8, 2009, Node.js was first demonstrated by Dahl at the inaugural European JSconf. Node.js has now become a critical component in the technology stack of large-scale enterprises. But like any technology, it has its own set of limitations.&lt;/p&gt;

&lt;p&gt;Node.js is a dynamically typed single-threaded programming language. There is a lot of freedom for the interpreter and runtime to make decisions that can easily lead to memory leaks and high CPU loads. This can lead to performance issues, loss of resources, and potential downtime. Hence, it is crucial to monitor your Node.js apps for app performance metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SigNoz/signoz"&gt;SigNoz&lt;/a&gt; is an open-source application monitoring and observability platform which can be installed within your infra. There's no need to go through any sales team or complex onboarding process to start monitoring your application with SigNoz. In this article, let's take a look at how it can be deployed with Docker in a sample Node.js application.&lt;/p&gt;

&lt;p&gt;Let's divide this tutorial into 2 parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Installing SigNoz&lt;/li&gt;
&lt;li&gt;Installing &amp;amp; setting up a sample Node.js app for monitoring&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#part1-installing-signoz"&gt;
  &lt;/a&gt;
  Part-1 Installing SigNoz
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Install Docker&lt;/strong&gt;&lt;br&gt;
You can install Docker by following the steps listed on their website &lt;a href="https://www.docker.com/get-started"&gt;here&lt;/a&gt;. For this tutorial, you can choose the Docker Desktop option based on the system you have.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GJlFqNkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xm05wcxw24lrfmto5dht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GJlFqNkz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xm05wcxw24lrfmto5dht.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clone SigNoz GitHub repository&lt;/strong&gt;&lt;br&gt;
From your terminal use the following command to clone SigNoz's GitHub repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/SigNoz/signoz.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Update path to signoz/deploy and install SigNoz&lt;/strong&gt;&lt;br&gt;
The deploy folder contains the files necessary for deploying SigNoz through Docker.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd signoz/deploy/
./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You will be asked to select one of the 2 ways to proceed:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clickhouse as database (default)&lt;/li&gt;
&lt;li&gt;Kafka + Druid setup to handle scale (recommended for production use)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Trying out SigNoz with clickhouse database takes less than 1GB of memory and for this tutorial, we will use that option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dCEa3C8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uenodd3f8igg2tghijmv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dCEa3C8M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uenodd3f8igg2tghijmv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will get the following message once the installation is complete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jaXCBdab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phjjj8ns2l0wmi1pghsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jaXCBdab--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phjjj8ns2l0wmi1pghsp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the installation runs successfully, the UI should be accessible at port 3000. Wait for 2-3 mins for the data to be available to frontend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Al3hUTeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtmmoslacztt1j5cxqk9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Al3hUTeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtmmoslacztt1j5cxqk9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The applications shown in the dashboard are from a sample app called Hot R.O.D that comes with the installation bundle. It has 4 microservices being monitored: Frontend, Customer, Driver and Route. You can access the Hot R.O.D application UI at: &lt;a href="http://localhost:9000/"&gt;http://localhost:9000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now comes the part where you can instrument your own sample app and get the metrics reported through SigNoz.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#part-2-installing-amp-setting-up-a-sample-nodejs-app-for-monitoring"&gt;
  &lt;/a&gt;
  Part 2 - Installing &amp;amp; setting up a sample Node.js app for monitoring
&lt;/h2&gt;

&lt;p&gt;To start monitoring your application, you need to set up its instrumentation. Instrumentation is the process of implementing code instructions to monitor your application's performance.&lt;/p&gt;

&lt;p&gt;SigNoz supports &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt; as the primary way for users to instrument their application. OpenTelemetry is a single, vendor-agnostic instrumentation library per language with support for both automatic and manual instrumentation. You don't need to worry about instrumentation in this tutorial. OpenTelemetry comes with all currently available &lt;a href="https://github.com/open-telemetry/opentelemetry-js#plugins"&gt;instrumentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But to see how SigNoz helps you in monitoring an app's performance, we need an app first.&lt;/p&gt;

&lt;p&gt;You need to ensure that you have &lt;strong&gt;Node.js version 12 or newer&lt;/strong&gt;. You can download the latest version of Node.js &lt;a href="https://nodejs.org/en/download/"&gt;here&lt;/a&gt;. For the sample application, let's create a basic 'hello world' express.js application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make a directory and install express&lt;/strong&gt;&lt;br&gt;
Make a directory for your sample app on your machine. Then open up the terminal, navigate to the directory path and install express with the following command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i express
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Setup server.js&lt;/strong&gt;&lt;br&gt;
Create a file called 'server.js' in your directory and with any text editor setup your 'Hello World' file with the code below:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');

const app = express();

app.get('/hello', (req, res) =&amp;gt; {
 res.status(200).send('Hello World');
});

app.listen(9090);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Boot up the server with the following command on the terminal:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can check if your app is working by visiting: &lt;a href="http://localhost:9090/hello"&gt;http://localhost:9090/hello&lt;/a&gt;&lt;br&gt;
Once you are finished checking, exit the localhost on your terminal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up OpenTelemetry&lt;/strong&gt;&lt;br&gt;
In the same directory path at the terminal, install the OpenTelemetry launcher package with this command:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install lightstep-opentelemetry-launcher-node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Go to your directory and create a new file named, "server_init.js". This will act as the new entry point for your app. Paste the following code in the file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const {
    lightstep,
    opentelemetry,
   } = require('lightstep-opentelemetry-launcher-node');

   const sdk = lightstep.configureOpenTelemetry();

   sdk.start().then(() =&amp;gt; {
    require('./server');
   });

   function shutdown() {
    sdk.shutdown().then(
      () =&amp;gt; console.log("SDK shut down successfully"),
      (err) =&amp;gt; console.log("Error shutting down SDK", err),
    ).finally(() =&amp;gt; process.exit(0))
   };

   process.on('exit', shutdown);
   process.on('SIGINT', shutdown);
   process.on('SIGTERM', shutdown);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Once the file is created, you only need to run one last command at your terminal.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_EXPORTER_OTLP_SPAN_ENDPOINT="http://&amp;lt;IP of SigNoz Backend&amp;gt;:55681/v1/trace" LS_SERVICE_NAME=&amp;lt;service name&amp;gt; node server_init.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Replacing the placeholders in the above command for local host:&lt;/p&gt;

&lt;p&gt;IP of SigNoz Backend: localhost (since we are running SigNoz on our local host)&lt;/p&gt;

&lt;p&gt;service name: sample_app (you can give whatever name that suits you)&lt;/p&gt;

&lt;p&gt;So the final command is:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OTEL_EXPORTER_OTLP_SPAN_ENDPOINT="http://localhost:55681/v1/trace" LS_SERVICE_NAME=sample_app node server_init.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The app should be accessible at &lt;a href="http://localhost:9090/hello"&gt;http://localhost:9090/hello&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Congratulations! You have instrumented your sample Node.js app. You can now access the SigNoz dashboard at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; to monitor your app for performance metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x1uNBidS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad5aui0o4da5ry67vase.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x1uNBidS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad5aui0o4da5ry67vase.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't find 'Sample_app' in your list of applications, hit the endpoint at port 9090, and wait for 1-2 mins.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#identifying-events-causing-high-latency-in-your-app"&gt;
  &lt;/a&gt;
  Identifying events causing high latency in your app
&lt;/h2&gt;

&lt;p&gt;Now that you have installed SigNoz, let's see how you can identify specific events causing high latency in your deployed applications.&lt;/p&gt;

&lt;p&gt;In just 5 easy steps, SigNoz dashboard lets you drill down to events causing a delay in your deployed apps 👇&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Choose your microservice&lt;/li&gt;
&lt;li&gt;Choose the timestamp where latency is high&lt;/li&gt;
&lt;li&gt;Click on view traces&lt;/li&gt;
&lt;li&gt;Choose the trace ID with the highest latency&lt;/li&gt;
&lt;li&gt;Zero in on the highest latency event and take action&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's a glimpse of how you can drill down and identify specific issues:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://player.vimeo.com/video/552957573" width="710" height="399"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you need any help with trying out SigNoz, feel free to mail me at &lt;a href="mailto:ankit.anand@signoz.io"&gt;ankit.anand@signoz.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They say, "If it's not monitored, then it's not in production." And with SigNoz you can start monitoring your Node.js application now. Enabling your team to resolve issues quickly in production is critical to maintaining complex distributed systems in fine health.&lt;/p&gt;

&lt;p&gt;At SigNoz, we are committed to making the best open-source, self-hosted tool for application performance monitoring. Feel free to check out our GitHub repo here:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/SigNoz"&gt;
        SigNoz
      &lt;/a&gt; / &lt;a href="https://github.com/SigNoz/signoz"&gt;
        signoz
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      SigNoz helps developers monitor their applications &amp;amp; troubleshoot problems, an open-source alternative to DataDog, NewRelic, etc. 🔥 🖥
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667"&gt;&lt;img src="https://camo.githubusercontent.com/de24bcecd48c187d949b173f240555967f58a5cd424760a73f7c06f791b892ec/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343435302f7369676e6f7a2d696d616765732f4c6f676f4769746875625f7369676662752e737667" alt="SigNoz-logo" width="240"&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Monitor your applications and troubleshoot problems in your deployed applications, an open-source alternative to DataDog, New Relic, etc.&lt;/p&gt;
&lt;p&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;img alt="License" src="https://camo.githubusercontent.com/8bb1977f745ee8c8107f711ecfa901421a9b929f308fd431f7211508f8ddbd87/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d627269676874677265656e"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;img alt="Downloads" src="https://camo.githubusercontent.com/4d7505d3f801c171da56fe726501ab9411207d82358bf10341021397fa3fe48e/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7369676e6f7a2f66726f6e74656e643f6c6162656c3d446f776e6c6f616473"&gt;&lt;/a&gt;
    &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;img alt="GitHub issues" src="https://camo.githubusercontent.com/cd33e47de8e2feb970abdef5de51f59e6c007958faf6c188c56dd4c4208e58a2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7369676e6f7a2f7369676e6f7a"&gt;&lt;/a&gt; 
    &lt;a href="https://twitter.com/intent/tweet?text=Monitor%20your%20applications%20and%20troubleshoot%20problems%20with%20SigNoz,%20an%20open-source%20alternative%20to%20DataDog,%20NewRelic.&amp;amp;url=https://signoz.io/&amp;amp;via=SigNozHQ&amp;amp;hashtags=opensource,signoz,observability" rel="nofollow"&gt; 
        &lt;img alt="tweet" src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c"&gt; &lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;SigNoz helps developers monitor applications and troubleshoot problems in their deployed applications. SigNoz uses distributed tracing to gain visibility into your software stack.&lt;/p&gt;
&lt;p&gt;👉 You can see metrics like p99 latency, error rates for your services, external API calls and individual end points.&lt;/p&gt;
&lt;p&gt;👉 You can find the root cause of the problem by going to the exact traces which are causing the problem and see detailed flamegraphs of individual request traces.&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/863718997bae95953d22cbd6c1001d4ec23695aad4244d7de596660f33833496/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646376336570696e782f696d6167652f75706c6f61642f76313631383930343033322f7369676e6f7a2d696d616765732f73637265656e7a792d313631383930343031333732395f636c737376792e706e67" alt="SigNoz Feature"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
👇 Features:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Aggregate metrics on filtered traces. Eg, you can get error…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/SigNoz/signoz"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>node</category>
      <category>devops</category>
      <category>monitoring</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Setting up Google Authentication With Firebase🚀</title>
      <author>Karan Choudhary</author>
      <pubDate>Tue, 08 Jun 2021 13:03:00 +0000</pubDate>
      <link>https://dev.to/karanchoudhary/setting-up-google-authentication-with-firebase-n6i</link>
      <guid>https://dev.to/karanchoudhary/setting-up-google-authentication-with-firebase-n6i</guid>
      <description>&lt;h1&gt;
  &lt;a href="#a-bit-about-me"&gt;
  &lt;/a&gt;
  A Bit About Me
&lt;/h1&gt;

&lt;p&gt;Hey folks👋🏻, I am Karan Choudhary. A frontend developer passionate about web technologies and building things with code💻.&lt;/p&gt;

&lt;p&gt;In this article, we will learn the easiest and the fastest way to setup Google Authentication with Firebase. So without wasting any time, let's get straight into it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-firebase-authentication"&gt;
  &lt;/a&gt;
  Why Firebase Authentication?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H730Vywy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebase.google.com/docs/auth/images/auth-providers.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H730Vywy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebase.google.com/docs/auth/images/auth-providers.png" alt="firebase"&gt;&lt;/a&gt;&lt;br&gt;
Most apps need to know the identity of a user. Knowing a user's identity allows an app to securely save user data in the cloud and provide the same personalized experience across all of the user's devices.&lt;/p&gt;

&lt;p&gt;Firebase Authentication provides backend services, easy-to-use SDKs, and ready-made UI libraries to authenticate users to your app. It supports authentication using passwords, phone numbers, popular federated identity providers like Google, Facebook and Twitter, and more.&lt;/p&gt;

&lt;p&gt;Firebase Authentication integrates tightly with other Firebase services, and it leverages industry standards like OAuth 2.0 and OpenID Connect, so it can be easily integrated with your custom backend.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;Since we'll be needing some starter files for that. I've published a NPM package for easy build setup. Or else you can just clone the GitHub Repository. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation⚒️
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;You’ll need to have Node 10.16.0 or later version on your local development machine&lt;/strong&gt;. I recommend using the latest LTS version.&lt;/p&gt;

&lt;p&gt;To create a new app, you may choose one of the following methods:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#npm"&gt;
  &lt;/a&gt;
  npm
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Install the package
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i firebase-auth-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Create a project using Firebase-Auth-App CLI
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;firebase-auth-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Install dependencies
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  git
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Clone the repository
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone git@github.com:itskaranchoudhary/firebase-auth-app.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Change the working directory
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;firebase-auth-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Install dependencies
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It will create a directory called &lt;code&gt;firebase-auth-app&lt;/code&gt; inside the current folder.&lt;br&gt;&lt;br&gt;
Inside that directory, it will generate the following project structure and install the required dependencies.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#file-structure"&gt;
  &lt;/a&gt;
  File Structure
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;├── src/
│   └── assets
│   └── scripts
│   └── styles
│   └──favicon.ico
├── .gitignore
├── firebase.json
├── index.html
├── package-lock.json
└── package.json
├── README.md
├── LICENSE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-firebase-project"&gt;
  &lt;/a&gt;
  Creating a Firebase Project
&lt;/h2&gt;

&lt;p&gt;First of all, go to you  &lt;a href="https://console.firebase.google.com/"&gt;firebase console&lt;/a&gt; and Create a new project. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZPQjFak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528133%2529.png%3Falt%3Dmedia%26token%3D13a60363-85d2-4cb5-be77-2b37976816c2" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZPQjFak--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528133%2529.png%3Falt%3Dmedia%26token%3D13a60363-85d2-4cb5-be77-2b37976816c2" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating a project, click on  &lt;strong&gt;Web&lt;/strong&gt;  button to register your web app.  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3rDYs5H7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528134%2529.png%3Falt%3Dmedia%26token%3Df924455a-9a98-4495-a3fc-32be862a16d9" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3rDYs5H7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528134%2529.png%3Falt%3Dmedia%26token%3Df924455a-9a98-4495-a3fc-32be862a16d9" alt="enter image description here"&gt;&lt;/a&gt;&lt;br&gt;
Enter the name of your web app and that's it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XJMrlfXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528136%2529.png%3Falt%3Dmedia%26token%3D81b565eb-30da-419d-92cd-2e02b4b7d1db" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XJMrlfXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528136%2529.png%3Falt%3Dmedia%26token%3D81b565eb-30da-419d-92cd-2e02b4b7d1db" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#enabling-google-authentication"&gt;
  &lt;/a&gt;
  Enabling Google Authentication
&lt;/h2&gt;

&lt;p&gt;Since you have added the web app, enable the Google Sign-Up Method under the &lt;code&gt;Authentication/Sign-In Method/Sign-In Providers&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qou5Hu4j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528128%2529.png%3Falt%3Dmedia%26token%3Dc004aaad-3a8f-4f17-b725-fb86a58b6787" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qou5Hu4j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528128%2529.png%3Falt%3Dmedia%26token%3Dc004aaad-3a8f-4f17-b725-fb86a58b6787" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-the-authorized-domain"&gt;
  &lt;/a&gt;
  Adding the Authorized Domain
&lt;/h2&gt;

&lt;p&gt;Since Firebase Auth doesn't work with live server. You'll have to manually add the domain you would be deploying your app to. &lt;/p&gt;

&lt;p&gt;Go to &lt;code&gt;Authentication/Sign-In Method/Authorized Domains&lt;/code&gt;add your domain. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NaqdgOXr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528131%2529.png%3Falt%3Dmedia%26token%3Da3819431-0098-40c3-a67f-4be041c94b30" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NaqdgOXr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528131%2529.png%3Falt%3Dmedia%26token%3Da3819431-0098-40c3-a67f-4be041c94b30" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#firebase-config"&gt;
  &lt;/a&gt;
  Firebase Config
&lt;/h2&gt;

&lt;p&gt;Now, go to  &lt;strong&gt;Project Settings &amp;gt; SDK Setup and Configuration&lt;/strong&gt;  to get your  &lt;code&gt;firebaseConfig&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C12ipQ-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528140%2529.png%3Falt%3Dmedia%26token%3Db80615bf-d03d-41f3-b03b-2f4a6f3caa48" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C12ipQ-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528140%2529.png%3Falt%3Dmedia%26token%3Db80615bf-d03d-41f3-b03b-2f4a6f3caa48" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should look something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var firebaseConfig = {
    apiKey: "API_KEY",
    authDomain: "PROJECT_ID.firebaseapp.com",
    databaseURL: "https://PROJECT_ID.firebaseio.com",
    projectId: "PROJECT_ID",
    storageBucket: "PROJECT_ID.appspot.com",
    messagingSenderId: "SENDER_ID",
    appId: "APP_ID",
    measurementId: "G-MEASUREMENT_ID",
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the config and paste it into &lt;code&gt;index.html &amp;gt; script tag&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;🌟 You are all set!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-app"&gt;
  &lt;/a&gt;
  Testing the App
&lt;/h2&gt;

&lt;p&gt;To test the app, we need to deploy it to the domain we have added in the firebase console. &lt;/p&gt;

&lt;p&gt;Since, I have already deployed my app. I can visit &lt;a href="https://friendlychatapp.netlify.app"&gt;https://friendlychatapp.netlify.app&lt;/a&gt; to check if the authentication is working properly or not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zfn7jw4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528145%2529.png%3Falt%3Dmedia%26token%3Da725f12f-2140-42cf-b3b4-65bb1f8d2312" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zfn7jw4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528145%2529.png%3Falt%3Dmedia%26token%3Da725f12f-2140-42cf-b3b4-65bb1f8d2312" alt="enter image description here"&gt;&lt;/a&gt;&lt;br&gt;
And it seems like everything is working fine.✔&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IJ-gaKhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528146%2529.png%3Falt%3Dmedia%26token%3Dd93f2edd-1b1b-403d-a8bf-79266acfcf7d" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJ-gaKhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528146%2529.png%3Falt%3Dmedia%26token%3Dd93f2edd-1b1b-403d-a8bf-79266acfcf7d" alt="enter image description here"&gt;&lt;/a&gt;&lt;br&gt;
Now, go to &lt;a href="https://console.firebase.google.com/"&gt;firebase console&lt;/a&gt; and open up your firebase project and go to &lt;strong&gt;Authentication &amp;gt; Users&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqnTymaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528147%2529.png%3Falt%3Dmedia%26token%3Dd7416d4a-e412-487d-964d-34ab5421b10a" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqnTymaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528147%2529.png%3Falt%3Dmedia%26token%3Dd7416d4a-e412-487d-964d-34ab5421b10a" alt="enter image description here"&gt;&lt;/a&gt;&lt;br&gt;
We can see a that a new user is added✨.&lt;/p&gt;

&lt;p&gt;Let's do another check by logging the user details in the console using &lt;code&gt;console.log()&lt;/code&gt;&lt;br&gt;
Copy and paste the following code in the console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var user = firebase.auth().currentUser;
var name, email, photoUrl, uid, emailVerified;

if (user != null) {  
    name = user.displayName;  
    email = user.email;  
    photoUrl = user.photoURL;  
    emailVerified = user.emailVerified;  
    uid = user.uid;  // The user's ID, unique to the Firebase project. 
    }

console.log(name, email, uid);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything is right it should log my details in the console. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3DCWWpdb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528148%2529.png%3Falt%3Dmedia%26token%3Dca41b27f-31bc-4468-902e-ea3415555dea" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3DCWWpdb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/url-creator-2ee08.appspot.com/o/Screenshot%2520%2528148%2529.png%3Falt%3Dmedia%26token%3Dca41b27f-31bc-4468-902e-ea3415555dea" alt="enter image description here"&gt;&lt;/a&gt;&lt;br&gt;
That's pretty much it! Congratulations. You've just setup Google Authentication using Firebase🥳&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h2&gt;

&lt;p&gt;So that's it. Hope you enjoyed the article. Feel free to share your thoughts in the comment section below. Any feedback is greatly appreciated.&lt;/p&gt;

&lt;p&gt;Feel free to the check out my GitHub: &lt;a href="https://github.com/itskaranchoudhary"&gt;https://github.com/itskaranchoudhary&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Star the repo⭐: &lt;a href="https://github.com/itskaranchoudhary/firebase-auth-app"&gt;https://github.com/itskaranchoudhary/firebase-auth-app&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Find the NPM Package here: &lt;a href="https://www.npmjs.com/package/firebase-auth-app"&gt;https://www.npmjs.com/package/firebase-auth-app&lt;/a&gt;&lt;/p&gt;




</description>
      <category>firebase</category>
      <category>authentication</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to connect a chatbot to a TalkJS chat</title>
      <author>Andrew</author>
      <pubDate>Tue, 08 Jun 2021 12:55:23 +0000</pubDate>
      <link>https://dev.to/talkjs/how-to-connect-a-chatbot-to-a-talkjs-chat-1h7e</link>
      <guid>https://dev.to/talkjs/how-to-connect-a-chatbot-to-a-talkjs-chat-1h7e</guid>
      <description>&lt;p&gt;In this post, I will demonstrate how you can connect the TalkJS &lt;a href="https://talkjs.com/"&gt;Chat API&lt;/a&gt; with a chatbot service like &lt;a href="https://cloud.google.com/dialogflow"&gt;Dialogflow&lt;/a&gt;. A chatbot is a software application used to conduct an online chat conversation via text or text-to-speech instead of providing direct contact with a live human agent.&lt;/p&gt;

&lt;p&gt;Chatbots can be a fantastic way to add rich functionality to your chat integration by enabling automatic and application-aware responses to user inquiries.&lt;/p&gt;

&lt;p&gt;While TalkJS doesn't provide an out-of-the-box AI chatbot that can interact with your users without any further operations, we provide a way for chatbots to interface with the chat by combining our webhooks feature which allows you to create a URL to monitor events from users.&lt;/p&gt;

&lt;p&gt;For example, when a user sends a message, our REST API can be used by your chatbot to directly interact with your users by sending messages. It is up to your application to appropriately process incoming events and generate relevant responses.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  Prerequisite
&lt;/h2&gt;

&lt;p&gt;Before going any further, complete our &lt;a href="https://talkjs.com/docs/Reference/REST_API/Getting_Started/Introduction.html"&gt;Getting Started guide&lt;/a&gt; to set up a simple conversation between two users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dialogflow-setup"&gt;
  &lt;/a&gt;
  Dialogflow Setup
&lt;/h2&gt;

&lt;p&gt;Let’s set up a simple Dialogflow project that will allow us to integrate with TalkJS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt; - Go to &lt;a href="https://dialogflow.com/"&gt;https://dialogflow.com/&lt;/a&gt; and select Dialogflow ES, the standard agent type suitable for small and simple agents. &lt;/p&gt;

&lt;p&gt;Thankfully the documentation for this application is excellent. Finish the &lt;a href="https://cloud.google.com/dialogflow/es/docs/quick/setup"&gt;setup&lt;/a&gt; as instructed, which involves:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://cloud.google.com/dialogflow/es/docs/quick/setup#project"&gt;Creating a new project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://cloud.google.com/dialogflow/es/docs/quick/setup#api"&gt;Enabling the API for the project&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://cloud.google.com/dialogflow/es/docs/quick/setup#sa-create"&gt;Creating a service account&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt; - &lt;a href="https://cloud.google.com/dialogflow/es/docs/quick/build-agent"&gt;Build your agent using this guide&lt;/a&gt;. Finish the required steps to &lt;a href="https://cloud.google.com/dialogflow/es/docs/quick/build-agent#create_a_new_intent"&gt;create your intent&lt;/a&gt;. I added a training phrase of “What is the best Chat API and SDK?” with the response being “TalkJS is the best Chat API and SDK!”. &lt;/p&gt;

&lt;p&gt;This concludes our Dialogflow setup. Let’s set up our webhook in TalkJS, which will allow us to receive messages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-webhooks-to-receive-messages-in-talkjs"&gt;
  &lt;/a&gt;
  Using webhooks to receive messages in TalkJS
&lt;/h2&gt;

&lt;p&gt;So, what exactly is a webhook? A webhook (also called a web callback or HTTP push API) is a way for an app to provide other applications with real-time information. A webhook delivers data to other applications as it happens, meaning you get data immediately.&lt;/p&gt;

&lt;p&gt;Before we can use webhooks we need to set up a server for our application. If you have a server URL already set up, you can move on to &lt;a href="#enable"&gt;Enabling the TalkJS Webhook&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-our-server"&gt;
  &lt;/a&gt;
  Setting up our server
&lt;/h3&gt;

&lt;p&gt;We will be using &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt;, and &lt;a href="https://ngrok.com/download"&gt;ngrok&lt;/a&gt; to set up our server. &lt;/p&gt;

&lt;p&gt;You may be wondering, what is ngrok?&lt;/p&gt;

&lt;p&gt;Your development machine may be connected to a secure network behind a firewall. To work around access restrictions, ngrok runs a small client process on your machine which creates a private connection tunnel to the ngrok cloud service. Your localhost development server is mapped to an ngrok.io sub-domain, which a remote user can then access. There’s no need to expose ports, set up forwarding, or make other network changes. The connection tunnel established by ngrok is secure and can only transmit data to the localhost port you have open.&lt;/p&gt;

&lt;p&gt;Make sure you have both of these installed before proceeding. Extract the ngrok executable to your project folder, or add it to your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the terminal for your project, type &lt;code&gt;npx express-generator&lt;/code&gt; to quickly create a skeleton for our local server.&lt;/p&gt;

&lt;p&gt;Once this operation is complete you should now see a *&lt;em&gt;routes *&lt;/em&gt; directory.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;routes&lt;/strong&gt; directory, open the file &lt;em&gt;users.js&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Replace the existing code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.get('/', function(req, res, next) {
  res.send('respond with a resource');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the new code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/', function(req, res) {
  var body = req.body;
  var message = body.data.message.text;
  console.log("Message Text: " + message);
  res.status(200).send();
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the bin directory open the file &lt;em&gt;www&lt;/em&gt;. Change the line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var port = normalizePort(process.env.PORT || '3000');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Time to launch our ngrok server. Open the Command Prompt or shell, and change (&lt;code&gt;cd&lt;/code&gt;) into the directory of your project. &lt;/p&gt;

&lt;p&gt;Run the command: &lt;code&gt;ngrok http 3000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Copy the https protocol version of the URL. This URL is used to forward all of the messages from your ngrok server to your local server:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_QlY0_SV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gotzrlcl5w460kddloz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_QlY0_SV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4gotzrlcl5w460kddloz.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For my server, I have a value of &lt;a href="https://5286ee752ef7.ngrok.io"&gt;https://5286ee752ef7.ngrok.io&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this URL will be different for you.&lt;/p&gt;

&lt;p&gt;Now append the “/users” section to this URL. &lt;/p&gt;

&lt;p&gt;My final result looks like the following: &lt;a href="https://5286ee752ef7.ngrok.io/users"&gt;https://5286ee752ef7.ngrok.io/users&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the URL we will use for our webhook.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enabling-the-talkjs-webhook"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Enabling the TalkJS Webhook
&lt;/h3&gt;

&lt;p&gt;You can enable the TalkJS webhook in the &lt;a href="https://talkjs.com/dashboard/"&gt;dashboard&lt;/a&gt;. Enter the https URL from ngrok and enable the messages sent checkbox&lt;/p&gt;

&lt;p&gt;When webhooks are enabled in the TalkJS dashboard, your server will receive HTTP POST requests from the TalkJS server notifying you about events that happen in your application between your users. If you’re interested in learning more about how TalkJS webhooks work, read the &lt;a href="https://talkjs.com/docs/Reference/Webhooks.html"&gt;Webhook Reference Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From your &lt;a href="https://talkjs.com/dashboard/"&gt;dashboard&lt;/a&gt;, perform the following steps to enable webhooks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enable the use of webhooks by setting the Webhook toggle to enabled. You should now have the option to enter a URL. &lt;/li&gt;
&lt;li&gt;Enter the URL of your server, or the ngrok server you created from the previous section (in my case, it’s: &lt;a href="https://5286ee752ef7.ngrok.io/users"&gt;https://5286ee752ef7.ngrok.io/users&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Enable the message.sent checkbox&lt;/li&gt;
&lt;li&gt;Click the Save URL button &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your final result should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K_tFVIub--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovok7ofr0r2etsdlr04k.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K_tFVIub--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovok7ofr0r2etsdlr04k.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Time to test out what we have done so far.&lt;/p&gt;

&lt;p&gt;In the terminal of your project, type the command &lt;code&gt;npm install&lt;/code&gt; to ensure all dependencies are installed.&lt;/p&gt;

&lt;p&gt;Finally, run &lt;code&gt;npm start&lt;/code&gt; and launch your application so that you can see the inbox you previously created in the &lt;a href="https://talkjs.com/docs/Reference/REST_API/Getting_Started/Introduction.html"&gt;Getting Started guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Type a message into the conversation, and go back to your terminal to check the logs. Look for the output of  &lt;code&gt;console.log("Message Text: " + message);&lt;/code&gt; It should match the text you have typed in.&lt;/p&gt;

&lt;p&gt;In my case, the logs look like the following snippet:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dLk3QBZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/190mb1drdva96r793r04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLk3QBZP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/190mb1drdva96r793r04.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There you have it, we have successfully used webhooks to receive messages in TalkJS. But how do we send this message to Dialogflow? Let’s find out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-a-message-to-dialogflow"&gt;
  &lt;/a&gt;
  Sending a message to Dialogflow
&lt;/h2&gt;

&lt;p&gt;At this stage, we have the message our user has typed in. This could be a question about a product or service we offer. &lt;/p&gt;

&lt;p&gt;In order to see our Dialogflow response, ensure the text you enter into the TalkJS conversation the same as the training phrase you set up for your intent. In this example, the training phrase of “What is the best Chat API and SDK?” with the response being “TalkJS is the best Chat API and SDK!”. &lt;/p&gt;

&lt;p&gt;To accomplish sending our message to Dialogflow, we must first ensure we are authenticated to do so. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication-for-sending-messages-to-dialogflow"&gt;
  &lt;/a&gt;
  Authentication for Sending messages to Dialogflow
&lt;/h3&gt;

&lt;p&gt;Follow the steps to get authenticated here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cloud.google.com/docs/authentication/getting-started#cloud-console"&gt;https://cloud.google.com/docs/authentication/getting-started#cloud-console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For me my final command looked like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;set GOOGLE_APPLICATION_CREDENTIALS=C:\Users\Admin\Downloads\chatbot-talkjs-5ee64d42fcbb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your value will be different.&lt;/p&gt;

&lt;p&gt;If you run into issues with this method, specifically this error:&lt;code&gt;Error: Could not load the default credentials&lt;/code&gt;. You can try this alternate method of authenticating.&lt;/p&gt;

&lt;p&gt;Visit: &lt;a href="https://cloud.google.com/sdk/install"&gt;https://cloud.google.com/sdk/install&lt;/a&gt; and perform the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install the Google SDK.&lt;/li&gt;
&lt;li&gt;Open the gcloud shell.&lt;/li&gt;
&lt;li&gt;Run the command: &lt;code&gt;gcloud auth application-default login&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Log in to your associated Gmail account.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You should now be authenticated. Time to add the code that sends our text to  Dialogflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sending-messages-to-dialogflow-using-the-nodejs-client-library"&gt;
  &lt;/a&gt;
  Sending messages to Dialogflow using the Node.js client library
&lt;/h3&gt;

&lt;p&gt;We can send messages to Dialogflow using the &lt;a href="https://github.com/googleapis/nodejs-dialogflow"&gt;Node.js client library&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The following code sends the message we type in the TalkJS inbox to Dialogflow.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dialogflow = require('@google-cloud/dialogflow');
const uuid = require('uuid');

async function sendMessageToDialogflow(talkjsText) {
  // A unique identifier for the given session
  const sessionId = uuid.v4();

  // Create a new session
  const sessionClient = new dialogflow.SessionsClient();


// Pass the cloud project ID here
const sessionPath = sessionClient.projectAgentSessionPath('chatbot-talkjs', sessionId);

  // The text query request.
  const request = {
    session: sessionPath,
    queryInput: {
      text: {
        // The query to send to the dialogflow agent
        text: talkjsText,
        // The language used by the client (en-US)
        languageCode: 'en-US',
      },
    },
  };

  // Send request and log result
  const responses = await sessionClient.detectIntent(request);
  console.log('Detected intent');
  const result = responses[0].queryResult;
  console.log(`  Query: ${result.queryText}`);
  console.log(`  Response: ${result.fulfillmentText}`);

  if(result.queryText != "TalkJS is the best Chat API and SDK!")
    return result.fulfillmentText;

  if (result.intent) {
    console.log(`  Intent: ${result.intent.displayName}`);
  } else {
    console.log(`  No intent matched.`);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We add the line: &lt;code&gt;if(result.queryText != "TalkJS is the best Chat API and SDK!")&lt;/code&gt; to make sure our application does not interpret this reply as a new message to reply to. &lt;/p&gt;

&lt;p&gt;In reality, you would have more than a single reply set up, so this would not be necessary.&lt;/p&gt;

&lt;p&gt;Re-open the file &lt;em&gt;user.js&lt;/em&gt; and add a call to &lt;code&gt;sendMessageToDialogflow&lt;/code&gt; here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/', function(req, res) {
  var body = req.body;
  var message = body.data.message.text;
  console.log("Message Text: " + message);
  res.status(200).send();
  var replyFromDialogFlow = sendMessageToDialogflow(message);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we run this code and test out our new feature, run the following commands the install the required packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;npm install @google-cloud/dialogflow&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;npm install uuid&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s launch our application, this time writing a message that matches our training phrase exactly.&lt;/p&gt;

&lt;p&gt;To see our new feature in action we need to check the logs!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rAmQx1Ds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d87l3590wbw7dwsnnpre.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rAmQx1Ds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d87l3590wbw7dwsnnpre.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is exactly the result we want. It is recognizing our intent and sending the appropriate response to our query. &lt;/p&gt;

&lt;p&gt;We now have the message from our TalkJS conversation being sent to Dialogflow and correctly generating a response. Let’s look at how we get this response to appear as a reply in our TalkJS conversation. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-dialogflow-responses-to-talkjs"&gt;
  &lt;/a&gt;
  Sending Dialogflow responses to TalkJS
&lt;/h2&gt;

&lt;p&gt;We have the response generating correctly, but we need to show this response in the TalkJS conversation. This can be accomplished through the TalkJS &lt;a href="https://talkjs.com/docs/Reference/REST_API/Getting_Started/Introduction.html"&gt;REST API&lt;/a&gt;, specifically a POST request to the &lt;a href="https://talkjs.com/docs/Reference/REST_API/Messages.html"&gt;Messages endpoint&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;To send our POST request in Node.js we will use axios. Axios is a promise-based HTTP client for the browser and Node. js. Axios makes it easy to send asynchronous HTTP requests to REST endpoints and perform CRUD operations.&lt;/p&gt;

&lt;p&gt;To install axios, simply run &lt;code&gt;npm install axios&lt;/code&gt; in your terminal console.  &lt;/p&gt;

&lt;p&gt;Time to add the code that will allow us to send the Dialogflow response to our conversation. &lt;/p&gt;

&lt;p&gt;You will need to change several things with the code below: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;APP_ID&lt;/code&gt; - you can find your app id on the &lt;a href="https://talkjs.com/dashboard/"&gt;dashboard&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;CONVERSATION_ID&lt;/code&gt; - you can find the ID of a conversation using &lt;code&gt;conversation.id&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;USER_ID&lt;/code&gt; - This can be found wherever you created your user, like this &lt;a href="https://talkjs.com/docs/Getting_Started/The_Current_User.html"&gt;example&lt;/a&gt;. &lt;/li&gt;
&lt;li&gt;  &lt;code&gt;SECRET_KEY&lt;/code&gt; - you can find your secret key on the &lt;a href="https://talkjs.com/dashboard/"&gt;dashboard&lt;/a&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function sendReplyToTalkJS(responseFromDialog) {
  axios
.post('https://api.talkjs.com/v1/&amp;lt;APP_ID&amp;gt;/conversations/&amp;lt;CONVERSATION_ID&amp;gt;/messages', 
  '[{"text": "' + responseFromDialog + '", "sender": "&amp;lt;USER_ID&amp;gt;", "type": "UserMessage"}]',
  {
    headers: {
      'Authorization': 'Bearer &amp;lt;SECRET_KEY&amp;gt;,
      'Content-Type': 'application/json'
    }
  })
  .then(res =&amp;gt; {
    console.log(`statusCode: ${res.statusCode}`);

  })
  .catch(error =&amp;gt; {
    console.error(error)
  })
  .catch((error) =&amp;gt; console.log( error.response.request._response ) );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s call this method.&lt;/p&gt;

&lt;p&gt;Re-open the file &lt;em&gt;user.js&lt;/em&gt; and add a call to &lt;code&gt;sendReplyToTalkJS&lt;/code&gt; here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;router.post('/', function(req, res) {
  var body = req.body;
  var message = body.data.message.text;
  console.log("Message Text: " + message);
  res.status(200).send();
  var replyFromDialogFlow = sendMessageToDialogflowrunSample('chatbot-talkjs', message);
sendReplyToTalkJS(replyFromDialogFlow);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Launch your application and enter your training phrase again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ySjIuNed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzb99rttssn5m1vx50qo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ySjIuNed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzb99rttssn5m1vx50qo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This time you should see the response from Dialogflow appearing as a reply in your conversation!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-talkjs-with-websockets-and-chatbots"&gt;
  &lt;/a&gt;
  How to use TalkJS with websockets and chatbots!
&lt;/h2&gt;

&lt;p&gt;Using a combination of websockets and our REST API has allowed us to integrate Dialogflow into the TalkJS workflow. However, you are not limited to Dialogflow. The principles we have learned today apply to many different offerings in the market. So what are you waiting for? Go and build the best chatbot you can, with a little help from TalkJS!&lt;/p&gt;

</description>
      <category>api</category>
      <category>webdev</category>
      <category>chat</category>
      <category>chatbot</category>
    </item>
    <item>
      <title>Sorting Algorithms Visualizer</title>
      <author>Akshay Pai</author>
      <pubDate>Tue, 08 Jun 2021 12:54:49 +0000</pubDate>
      <link>https://dev.to/sadanandpai/sorting-algorithms-visualizer-4631</link>
      <guid>https://dev.to/sadanandpai/sorting-algorithms-visualizer-4631</guid>
      <description>&lt;p&gt;Hello folks,&lt;/p&gt;

&lt;p&gt;Designed and developed "Sorting Algorithms Visualizer" (using React and Zustand) to help everyone, learning popular sorting algorithms easier and fun.&lt;/p&gt;

&lt;p&gt;Link to the webapp: &lt;a href="https://sadanandpai.github.io/sorting-visualizer/dist/"&gt;https://sadanandpai.github.io/sorting-visualizer/dist/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Repo: &lt;a href="https://github.com/sadanandpai/sorting-visualizer"&gt;https://github.com/sadanandpai/sorting-visualizer&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>algorithms</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How To Write Your First Node.js Script</title>
      <author>Boyan Iliev</author>
      <pubDate>Tue, 08 Jun 2021 12:31:50 +0000</pubDate>
      <link>https://dev.to/boiliev/how-to-write-your-first-node-js-script-h05</link>
      <guid>https://dev.to/boiliev/how-to-write-your-first-node-js-script-h05</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Until recently(if you think that 2009 is recently), we could only run JS code in a web browser. Node is a JavaScript runtime that executes code outside of the browser. We can use the same JS syntax we know and love to write server-side code, instead of relying on other languages like Python or Ruby. You can build Web Servers, Command Line Tools, Native Apps(VSCode is a Node app!), Video Games, Drone Software, and a whole lot more.&lt;/p&gt;

&lt;p&gt;In this post, I am going to show you how to write your first little Node script which will make you a directory with an HTML, CSS, and JavaScript file in it.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h1&gt;

&lt;p&gt;First, you need to check if you have Node installed on your machine. If you don't know if you have it, just go to the terminal and write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will print out the Node.js version which is currently installed. If you see an error and nothing prints, then you don't have Node installed.&lt;/p&gt;

&lt;p&gt;In order to install Node, go to the node website and just press the download button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/en/"&gt;https://nodejs.org/en/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After installing Node, we need to create a JavaScript file. Let's call this file &lt;code&gt;script.js&lt;/code&gt;. In this file, we are going to write our script.&lt;/p&gt;

&lt;p&gt;Now that we have Node installed and our file created, it's time to write our script. For this script, we are going to need to know what the &lt;code&gt;process&lt;/code&gt; object is and how the &lt;code&gt;fs&lt;/code&gt; module works. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-run-node-files"&gt;
  &lt;/a&gt;
  How To Run Node Files
&lt;/h1&gt;

&lt;p&gt;In order to run Node files, you just need to write &lt;code&gt;node&lt;/code&gt; and then the file name next to it in the terminal. Th file must be in the same folder that you're in, or you need to reference that full path relative to where you are at the moment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node script.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#-raw-process-endraw-amp-raw-argv-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;process&lt;/code&gt; &amp;amp; &lt;code&gt;argv&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;process&lt;/code&gt; is an object that's available which is in the global scope. It provides information about, and control over, the current Node.js process. It has a bunch of methods and properties. For example, we can see our current working directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;process.cwd()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is a method called &lt;code&gt;process.argv&lt;/code&gt;. It returns an array containing the command line arguments passed when the Node.js process was launched. The first element will be the path where the node executable is, and the second will be the path to the JS file being executed. To call this method you need to go to your JS file and &lt;code&gt;console.log()&lt;/code&gt; it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(process.argv);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then after running your file, you should see this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node script.js
[ '/usr/local/bin/node', '/Users/ghostman/scripts/script.js' ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any remaining element will be additional command-line arguments. We can pass them as arguments into a script. Not a function, but it's a similar idea. I can pass in arguments to a script. &lt;/p&gt;

&lt;p&gt;Here is an example of a little script that prints out the additional command-line arguments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const args = process.argv.slice(2)  -&amp;gt; slice to remove first two items.

for(let arg of args){
    console.log(`Hello ${arg}`)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then when we run the file like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node script.js Batman Superman
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ou output should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello Batman
Hello Superman
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a fun little script to help you understand how the file and node work together and how they can be used. &lt;/p&gt;

&lt;p&gt;Now let's get to the fun part.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-raw-fs-endraw-module"&gt;
  &lt;/a&gt;
  &lt;code&gt;fs&lt;/code&gt; Module
&lt;/h1&gt;

&lt;p&gt;The fs module enables interacting with the file system. It has hundreds of methods that you can use. Here is a list so you can see how much they are.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/dist/latest-v14.x/docs/api/fs.html"&gt;https://nodejs.org/dist/latest-v14.x/docs/api/fs.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order for us to use the &lt;code&gt;fs&lt;/code&gt; module, we have to &lt;code&gt;require&lt;/code&gt; it. We have to save it in a variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const fs = require('fs')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our &lt;code&gt;fs&lt;/code&gt; module, here are the methods that we will be needing for our script.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-fsmkdirsync-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;fs.mkdirSync&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This method creates a directory in our current working directory. There is also an &lt;code&gt;fs.mkdir&lt;/code&gt; method, but we will be using the synchronous method because it will not execute anything else until this method is completed. Here is an example of our method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fs.mkdirSync('dirName')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-fswritefilesync-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;fs.writeFileSync&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This method creates files for us. Just like &lt;code&gt;fs.mkdirSync&lt;/code&gt;, this method will not let anything else run until it has finished its process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fs.writeFileSync('fileName')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check for errors with the &lt;code&gt;try..catch&lt;/code&gt; statements if your code doesn't seem to work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;try {
    fs.writeFileSync('fileName')
} catch (e){
    console.log(e)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#writting-our-node-script"&gt;
  &lt;/a&gt;
  Writting Our Node Script
&lt;/h1&gt;

&lt;p&gt;Now that you have a basic knowledge of Node, try writing a script that creates a directory with three files inside it on your own. If you can't, that OK. Here is how to write your script:&lt;/p&gt;

&lt;p&gt;First, you need to require the &lt;code&gt;fs&lt;/code&gt; module. Then you must use &lt;code&gt;process.argv&lt;/code&gt; to set the name of your directory. After that, you need to use the &lt;code&gt;fs.mkdirSync&lt;/code&gt; method and the &lt;code&gt;fs.writeFileSync&lt;/code&gt; method to create the directory and the files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const fs = require('fs')
const folderName = process.argv[2] || 'Project'

try {
    fs.mkdirSync(folderName);
    fs.writeFileSync(`${folderName}/index.html`);
    fs.writeFileSync(`${folderName}/style.css`);
    fs.writeFileSync(`${folderName}/app.js`);
} catch (err) {
    console.log(`Error!`);
console.log(err)
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After writing the code for the script, we can run it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node script.js SecretProject
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we don't give an additional command-line argument, it will automatically set the directory name to &lt;code&gt;Project&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#consclusion"&gt;
  &lt;/a&gt;
  Consclusion
&lt;/h1&gt;

&lt;p&gt;I hope that this post has helped you understand Node.js a little bit more and made you more comfortable with it. Don't be scared to try some new stuff and experiment with all those &lt;code&gt;fs&lt;/code&gt; module methods.&lt;/p&gt;

&lt;p&gt;Let me know if this has been of help to you through Twitter. You can follow me &lt;a href="https://twitter.com/bo_iliev21"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>developer</category>
    </item>
    <item>
      <title>Best Online Code Editors For Web Developers</title>
      <author>themeselection</author>
      <pubDate>Tue, 08 Jun 2021 11:58:52 +0000</pubDate>
      <link>https://dev.to/theme_selection/best-online-code-editors-for-web-developers-5bpn</link>
      <guid>https://dev.to/theme_selection/best-online-code-editors-for-web-developers-5bpn</guid>
      <description>&lt;p&gt;Are you looking for Best Online Code editors? Then here is the collection of Best Online Code Editors For Web Developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-online-code-editor"&gt;
  &lt;/a&gt;
  What is an Online code editor?
&lt;/h2&gt;

&lt;p&gt;An online code editor is a tool that resides on a remote server and is accessible via browsers. Some online code editors have basic features more similar to text editors while others are like complete IDEs. In this article, we will review both types.&lt;/p&gt;

&lt;p&gt;Some online code editors focus on one language or even a framework. For example, there are products that call themselves – JavaScript online code editors or  react  online editor.&lt;/p&gt;

&lt;p&gt;As a developer, your main tool is obviously the one that allows you to turn your ideas into code: A text editor. As time goes by, more online text editors are created that can help you code from any computer with Internet access. In this article, let’s take a look at 10+ useful online code editors.&lt;/p&gt;

&lt;p&gt;Following are the major advantages of using online code editors&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Zero setups. You won’t have to download, install and configure an IDE;&lt;/li&gt;
&lt;li&gt;  Sharing and Collaboration. Start coding and then forward the URL to your colleague to continue your work or help you debug it;&lt;/li&gt;
&lt;li&gt;  Zero or little cost. The vast majority of online code editors have free versions that will be enough for you for most of the daily tasks;&lt;/li&gt;
&lt;li&gt;  Subscription-based pricing. It might be very useful to pay monthly for online editors instead of yearly licenses.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-choose-an-online-code-editor"&gt;
  &lt;/a&gt;
  How to choose an online code editor?
&lt;/h2&gt;

&lt;p&gt;Most famous online code editors share many great features. These include autocompletion, git integration, plugin support, CI/CD pipelines, and others. But it’s the little things that can make a specific editor a better fit for you than others.&lt;/p&gt;

&lt;p&gt;Let’s run through some aspects you need to keep in mind choosing an online IDE/code editor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  How fast an application works&lt;/li&gt;
&lt;li&gt;  Languages support&lt;/li&gt;
&lt;li&gt;  For free editors: how much ads it shows&lt;/li&gt;
&lt;li&gt;  Ease of setup&lt;/li&gt;
&lt;li&gt;  Integrations with repository managers&lt;/li&gt;
&lt;li&gt;  NPM support&lt;/li&gt;
&lt;li&gt;  A number of text and layout settings&lt;/li&gt;
&lt;li&gt;  Terminal support&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's begin the collection..!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LVBoKsXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlj2cwy8kj90fe05kr4c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LVBoKsXM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vlj2cwy8kj90fe05kr4c.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stackblitz"&gt;
  &lt;/a&gt;
  &lt;a href="https://stackblitz.com/"&gt;StackBlitz&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MPJ4E-Aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luol7ziogvk6dt5x3pqq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MPJ4E-Aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/luol7ziogvk6dt5x3pqq.png" alt="StackBlitz"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackblitz.com/"&gt;StackBlitz&lt;/a&gt; claims to allow you to code the future in your browser. And after trying it, I’m confident you’ll agree that this web application is extremely useful for coders.&lt;/p&gt;

&lt;p&gt;StackBlitz features 5 workspaces: React, AngularJS, JavaScript, Ignite UI and KendoReact. Once launched, you will notice a similarity between StackBlitz and the VSCode editor, which is a good thing if you’re used to Microsoft’s editor.&lt;/p&gt;

&lt;p&gt;Another extremely cool StackBlitz feature is that all applications get deployed automatically on their servers, and hosted for free.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Native support for Firebase (which is something I don’t personally use, but hey, it’s a boon for those not wanting to dive into the murky depths of the backend)&lt;/li&gt;
&lt;li&gt;  Intellisense, Project Search&lt;/li&gt;
&lt;li&gt;  Hot reloading as you type&lt;/li&gt;
&lt;li&gt;  Import npm packages&lt;/li&gt;
&lt;li&gt;  Edit offline when not connected!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#codepen"&gt;
  &lt;/a&gt;
  &lt;a href="https://codepen.io/"&gt;Codepen&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jc_E6hvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9o8qinxgb3zsbencem5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jc_E6hvP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9o8qinxgb3zsbencem5.png" alt="Codepen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Probably the most popular online code editor. &lt;a href="https://codepen.io/"&gt;CodePen&lt;/a&gt; is fast, easy to use, and allows a web developer to write and share HTML/CSS/JS code online. CodePen is free and creating an account isn’t mandatory, so you can start writing code and create a new web application straight from your web browser quickly and efficiently.&lt;/p&gt;

&lt;p&gt;CodePen editor allows you to use Vim Key Bindings which are command-line keyboard shortcuts. Both of these tools together can help to create a faster workflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  File system&lt;/li&gt;
&lt;li&gt;  Autocomplete&lt;/li&gt;
&lt;li&gt;  Private sandboxes&lt;/li&gt;
&lt;li&gt;  Website deployment&lt;/li&gt;
&lt;li&gt;  Collaboration mode&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#codesandbox"&gt;
  &lt;/a&gt;
  &lt;a href="https://codesandbox.io/"&gt;CodeSandbox&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LWj22hUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43ynieckvc54g6a8gdlh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LWj22hUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/43ynieckvc54g6a8gdlh.png" alt="Codesandbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/"&gt;CodeSandbox&lt;/a&gt; can be thought of as a much more powerful and complete take on JSFiddle. True to its name, CodeSandbox provides a complete code editor experience and a sandboxed environment for front-end development.&lt;/p&gt;

&lt;p&gt;This complete development environment is loaded with many features and code templates that will definitely make your coding faster and easier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Npm support:&lt;/strong&gt;  Yes, you can add pretty much any package that is available on npm.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Files, folders, modules:&lt;/strong&gt;  You can split your code into multiple files, add/remove images from the public folder, and build/import modules as you see fit. The workflow mirrors that of a modern module bundler, so you don’t need to set up (almost) anything.&lt;/li&gt;
&lt;li&gt;  Support for TypeScript, hot reloading, GitHub export, static file hosting, etc.&lt;/li&gt;
&lt;li&gt;  It is built on  &lt;strong&gt;Monaco editor&lt;/strong&gt;, the same beast that powers the favorite  &lt;a href="https://code.visualstudio.com/"&gt;VSCode&lt;/a&gt;  editor. This brings powerful features like “Go To,” “Find References,” and necessary refactoring to your fingertips!&lt;/li&gt;
&lt;li&gt;  Snippet support for  &lt;a href="https://emmet.io/"&gt;Emmet&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  Integrated DevTools, linting, error overlays, testing frameworks (Jest), keybindings, and more.&lt;/li&gt;
&lt;li&gt;  Powerful CLI to directly import local projects into CodeSandbox.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#jsfiddle"&gt;
  &lt;/a&gt;
  &lt;a href="https://jsfiddle.net/"&gt;JSFiddle&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hZT6B95V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zl4udkn7xu9q845jyhbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hZT6B95V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zl4udkn7xu9q845jyhbf.png" alt="JSFiddle"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While  &lt;a href="https://jsfiddle.net/"&gt;JSFiddle&lt;/a&gt;  can’t replace a full-fledged text editor, it does a damn good job of handling one-off frontend scripts. It’s so popular that Q&amp;amp;A sites like StackOverflow already support the embedding of JSFiddle links directly in their platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Free to use (no hidden fee or freemium features). JSFiddle supports itself through ads (at least as of writing), and you can see an Adobe ad in the lower left of the screenshot above.&lt;/li&gt;
&lt;li&gt;  Code collaboration features — ideal for building concepts together, interviews, etc.&lt;/li&gt;
&lt;li&gt;  Multiple layouts, font sizes, light/dark themes, etc.&lt;/li&gt;
&lt;li&gt;  Code formatting (tidying), upcoming support for linters (CSS and JS), and more&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#jsbin"&gt;
  &lt;/a&gt;
  &lt;a href="https://jsbin.com/"&gt;JSbin&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g8SfXisI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m3l4p51fore0c4rxbrr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g8SfXisI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m3l4p51fore0c4rxbrr.png" alt="JSBin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://jsbin.com/"&gt;JSBin&lt;/a&gt; is an online text editor primarily focused on Javascript, with a fast and simple interface. Each of your code snippets can be tested through your web browser, and then exported into a text file.&lt;/p&gt;

&lt;p&gt;Another good thing to note is that JSBin can import popular HTML/CSS/JS frameworks such as jQuery and Bootstrap, allowing you to easily create modern pages and web applications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Live reload both in editor and in full preview&lt;/li&gt;
&lt;li&gt;  Codecasting - blog post&lt;/li&gt;
&lt;li&gt;  Console&lt;/li&gt;
&lt;li&gt;  Full unmodified rendered view&lt;/li&gt;
&lt;li&gt;  Gist support: import and export&lt;/li&gt;
&lt;li&gt;  Processors. HTML. CSS. Sass &amp;amp; SCSS (with Compass &amp;amp; Bourbon) &lt;/li&gt;
&lt;li&gt;  Debug/source mode&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#gitpod"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.gitpod.io/"&gt;Gitpod&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8VEJeJAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bhwvmgqtxxrm4s7k6ro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8VEJeJAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bhwvmgqtxxrm4s7k6ro.png" alt="Gitpod"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.gitpod.io/"&gt;Gitpod&lt;/a&gt;  is a refreshing take on cloud code editors (or IDEs, if you will) that aims to keep your code always tested and up to date. In other words, it’s deeply integrated with GitHub, and every time you add code, it runs your testing and CI/CD pipelines to make sure code is always at 100% health.&lt;/p&gt;

&lt;p&gt;Worth checking out if you love the VSCode experience and want something that supports all major back-end/front-end languages and frameworks&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.gitpod.io/docs/#-dev-environments-as-code"&gt;Dev environments as code&lt;/a&gt;  - Gitpod applies lessons learned from infrastructure-as-code. Spinning up dev environments is easily repeatable and reproducible empowering you to automate, version-control and share dev environments across your team.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prebuilt dev environments&lt;/li&gt;
&lt;li&gt;Integrated Docker build &lt;/li&gt;
&lt;li&gt;GitLab, GitHub, and Bitbucket integration &lt;/li&gt;
&lt;li&gt;Integrated code reviews&lt;/li&gt;
&lt;li&gt;Collaboration&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#codespace"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/features/codespaces"&gt;Codespace&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OsqFT6Td--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7hazzxln97vxwjnz8fh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OsqFT6Td--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7hazzxln97vxwjnz8fh.png" alt="Codespaces"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/features/codespaces"&gt;Codespaces&lt;/a&gt; is a configurable cloud development environment available in your browser on GitHub or through Visual Studio Code. A codespace includes everything developers need to develop for a specific repository, including the Visual Studio Code editing experience and common languages, tools, and utilities&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#theia"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.theia-ide.org/"&gt;Theia&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nz-wgLco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j509u86arxamjlw0hbtf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nz-wgLco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j509u86arxamjlw0hbtf.jpg" alt="Theia"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’re a die-hard SOLID fan and a nit-picking software architect, the  &lt;a href="https://www.theia-ide.org/"&gt;Theia IDE&lt;/a&gt;  will tickle your separation-of-concerns bone. It’s a TypeScript-coded (five points for style straightaway!) code IDE that has a perfectly separate front-end and backend. The front-end runs in a browser, while the backend can be anywhere — local machine or the cloud!&lt;/p&gt;

&lt;p&gt;But that’s not all — the front-end can be run as an Electron app with a fully functional, isolated browser environment, giving you the look-and-feel of a native desktop app should you crave it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Establish a platform to build IDE-like products.&lt;/li&gt;
&lt;li&gt;  Provide the end-user with a full-fledged multi-language IDE (not just a smart editor)&lt;/li&gt;
&lt;li&gt;  Support equally the paradigm of Cloud IDE and Desktop IDE.&lt;/li&gt;
&lt;li&gt;  Provide support for multiple languages via the language and debug server protocols.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#coder"&gt;
  &lt;/a&gt;
  &lt;a href="https://coder.com/"&gt;Coder&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rgz6DF5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zw1zn7qx99hqgog34dcy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rgz6DF5e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zw1zn7qx99hqgog34dcy.png" alt="coder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://coder.com/"&gt;Coder&lt;/a&gt; is a VSCode environment bundled in a server that can be run locally or in the cloud. The recommended configuration is to run the IDE as a server in the cloud and access it locally via the browser. There are prebuilt Docker images for zero-hassle setups, and an enterprise plan should you need support or have different needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-cloud9"&gt;
  &lt;/a&gt;
  &lt;a href="https://aws.amazon.com/cloud9/"&gt;AWS Cloud9&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--89FtDqTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ifb9a2ce3vydhmgg7ur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--89FtDqTo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ifb9a2ce3vydhmgg7ur.png" alt="AWS Cloud9"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/cloud9/"&gt;Cloud9&lt;/a&gt; was arguably the first browser-based IDE that offered serious features and took the idea of browser-as-an-editor mainstream. No wonder that Amazon later acquired it, and today, Cloud9 is part of the AWS offerings.&lt;/p&gt;

&lt;p&gt;There are no additional charges for using Cloud9. You can connect Cloud9 to an existing/new AWS compute instance, and you pay only for that instance. It’s also possible to connect to a third-party server over SSH — for exactly no fee&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; First-class support for AWS Server less applications (debugging, etc.)&lt;/li&gt;
&lt;li&gt; Direct terminal access to AWS from within the editor &lt;/li&gt;
&lt;li&gt; Over 40 programming languages supported (Go, C++, Ruby, Node, Python, PHP, Java . . . take your pick)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h3&gt;

&lt;p&gt;So, this was the collection of the best online code editors for web developers in 2021.  You can pick any of them as per your need and requirements.&lt;/p&gt;

&lt;p&gt;This is of course not a complete list, as there are many other online code editors available on internet that you can use. We have collected these online editor tools by their popularity.&lt;/p&gt;

&lt;p&gt;Tell us which one is you are currently using and which we can add in the list in the comment section below. Also, do not forget to bookmark and share this collection.&lt;/p&gt;

&lt;p&gt;We hope you find this collection helpful.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why Elasticsearch is an indispensable component of the Adyen stack</title>
      <author>Deepu K Sasidharan</author>
      <pubDate>Tue, 08 Jun 2021 11:48:36 +0000</pubDate>
      <link>https://dev.to/adyen/why-elasticsearch-is-an-indispensable-component-of-the-adyen-stack-2f5o</link>
      <guid>https://dev.to/adyen/why-elasticsearch-is-an-indispensable-component-of-the-adyen-stack-2f5o</guid>
      <description>&lt;p&gt;&lt;em&gt;By Willem Pino, Bengisu Sahin, Diego Costa and Deepu K Sasidharan&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At Adyen, we use Elasticsearch to power various parts of our payments platform. This includes payment search, monitoring, and log search. Let’s take a look at how we use Elastic for these different use cases and see how we capitalize on the power of Elasticsearch.&lt;/p&gt;

&lt;p&gt;We recently did a talk about some of our Elasticsearch adventures at an Elastic meetup. &lt;a href="https://www.youtube.com/watch?v=OCO7lgWVBQw"&gt;You can find a recording here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we look into our different use cases, it helps to get a high-level understanding of Adyen’s architecture.&lt;/p&gt;

&lt;p&gt;At Adyen, we do many things, but the core of what we do is payment processing. Our payment platform is built for any business and every customer journey. We process payments across all sales channels.&lt;/p&gt;

&lt;p&gt;Let’s say you want to buy a beer at the local pub (a merchant) and you want to pay with your credit card, which you received from a bank, called the issuing bank. Now when you pay for the beer, the pub wants to know if your account is valid and if you can make the payment. For this, the pub needs to contact the issuing bank.&lt;/p&gt;

&lt;p&gt;This is where Adyen comes in.&lt;/p&gt;

&lt;p&gt;When you provide your payment details — a credit card in this example — to the pub, the pub contacts Adyen with the payment details, and Adyen figures out the rest. This usually means sending the payment details to a third-party, or scheme, such as Mastercard or Visa, which forwards it to the issuer.&lt;/p&gt;

&lt;p&gt;The Adyen flow looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d2cszX06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2406/0%2AR4KekhX77MFhDciJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d2cszX06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2406/0%2AR4KekhX77MFhDciJ.png" alt="high-level architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But why doesn’t the merchant contact the scheme directly?&lt;/p&gt;

&lt;p&gt;Because the next shopper might not use a credit card but wants to pay by scanning a WeChat Pay QR code. The merchant does not want to build a separate integration for every way of paying, because it should also work for payment methods like credit/debit cards, SEPA, iDeal, Klarna, PayPal, and so on. This is especially true for international merchants, and this is where part of the power of Adyen lies.&lt;/p&gt;

&lt;p&gt;Now imagine we do such a transaction not just once but hundreds of times per second. These are the principles that we follow that allow us to keep doing this efficiently and still be flexible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One platform worldwide&lt;/li&gt;
&lt;li&gt;A single application that receives payments&lt;/li&gt;
&lt;li&gt;Abstract away differences between payments to make it easier to handle the data later&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is, of course, a very simplified view and explanation. In reality, there are hundreds of components and moving parts that work seamlessly together to make everything work.&lt;/p&gt;

&lt;p&gt;Now that we have a basic understanding of the scale of the architecture, let’s look at how we use Elastic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#payment-search"&gt;
  &lt;/a&gt;
  Payment search
&lt;/h2&gt;

&lt;p&gt;Customer Area is our merchant-facing web application where merchants can gain insights into their transactions and perform operational actions. In the Customer Area, there is a feature called payment search. It is the most used functionality in the Customer Area, and it allows merchants to search their payments by using an order reference, email address, payment method, and so on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bwzladND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3600/0%2AgTBfinrzMWq_Bpaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bwzladND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3600/0%2AgTBfinrzMWq_Bpaq.png" alt="payment search page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use Elasticsearch as a search engine in our application because it is built to provide simple REST APIs and has a distributed nature, speed, and scalability.&lt;/p&gt;

&lt;p&gt;Adyen processes millions of payments every day. We want to provide a near real-time payment search functionality for merchants.&lt;/p&gt;

&lt;p&gt;So, imagine that a shopper is purchasing a pair of shoes in a store. The credit-card payment for the shoes needs to be immediately visible to the merchant so they know the buyer’s purchase was successfully processed — usually within seconds.&lt;/p&gt;

&lt;p&gt;In order to make this possible, we have to index all this data into the Elasticsearch cluster when the payment is successfully processed. For these purposes, we have an in-house streaming/consumer framework that helps us to make this happen in a scalable way. It is implemented to take the burden from accounting clusters and create a summary of the data in the streaming clusters. This data is fed to the consumer framework, which indexes the data into the payment Elasticsearch cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w0zcB2-v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2732/0%2Aje3xiniPnDdrZ3Dr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w0zcB2-v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2732/0%2Aje3xiniPnDdrZ3Dr.png" alt="payment search flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The consumer framework implements three parts of the indexing journey:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first part is &lt;strong&gt;filtering&lt;/strong&gt;, which decides if the current stream item is of any interest to this consumer. This is used to filter out the payments which have a creation date before a certain date.&lt;/li&gt;
&lt;li&gt;The filtered payment goes to the &lt;strong&gt;consuming&lt;/strong&gt; part, where we apply the business logic. In our use case, it converts a payment to a payment document and creates index/update requests depending on the status of the payment.&lt;/li&gt;
&lt;li&gt;After the consumer framework reaches a certain amount of consumed payment or a certain time, it goes to a &lt;strong&gt;persisting&lt;/strong&gt; level where it performs the bulk operation with the bulk request. The bulk request consists of index/update requests that we consumed so far. After it gets a successful response from the Elasticsearch cluster, it saves the in-memory state of the consumer to db. In case some requests fail, the consumer framework includes them into the next persist and then saves the state. This helps us make sure we index all the data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This cycle in the consumer framework runs continuously, as long as we have new payments processed. It allows us to give our customers a near real-time, reliable, and fast payment search experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#platform-monitoring"&gt;
  &lt;/a&gt;
  Platform monitoring
&lt;/h2&gt;

&lt;p&gt;The goal of the monitoring team at Adyen is to provide solutions that can monitor the whole platform for merchant-facing issues. This is already quite a challenging task, and on top of that, the solution must be flexible enough to be used by other teams, each with a very unique use case.&lt;/p&gt;

&lt;p&gt;Plus, the alerts must occur on a (near) real-time basis. To summarize, monitoring aims to provide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Real-time alerts&lt;/li&gt;
&lt;li&gt;End-to-end monitoring&lt;/li&gt;
&lt;li&gt;Integrated, scalable solutions to all teams at Adyen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To accomplish this, we leverage the Elastic Stack as the underlying basis to build the necessary tools. The monitoring solution looks upon custom-based analytical events. The analytic events are freely created by the programmers and are the main data source for all the configurable monitors.&lt;/p&gt;

&lt;p&gt;These events exist in parallel and complement the logging infrastructure — and the data in databases. Next, the monitors accommodate the analytic events into multiple use cases, such as spikes, drops, underperforming transactions, anomaly detection, forecasting, and more. These monitors are responsible for creating alerts that are, finally, delivered to the right individuals (or teams).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9TEa0G-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3600/0%2AqbRgza_CrTqXKwIb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9TEa0G-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3600/0%2AqbRgza_CrTqXKwIb.png" alt="monitoring flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From a business perspective, the objectives were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Customizable monitors for predefined use cases:&lt;/strong&gt; Provide monitors for standard use cases (such as a drop in volume, or a spike in errors) that are easy to set up for anyone in the organization&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Out-of-the-box measurements:&lt;/strong&gt; Every new merchant, or host, is already capable of generating events from Day 1&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;End-to-end alert lifecycle integration:&lt;/strong&gt; Use a single interface to create any monitor, tweak its settings, and receive the alerts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i0zcY8zo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2972/0%2AXrwMrHYVsFdcvnMY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i0zcY8zo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2972/0%2AXrwMrHYVsFdcvnMY.png" alt="monitoring goals"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From a development perspective, the objectives of monitoring were:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-time user-based analytical events&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parallel and complementary with the logging structure&lt;/li&gt;
&lt;li&gt;Seamless ES template mapping to/from java objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Enabled/disable event materialization routes on top-level events.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Long-term storage&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#keeping-the-lights-on"&gt;
  &lt;/a&gt;
  Keeping the lights on
&lt;/h2&gt;

&lt;p&gt;Apart from payment search and monitoring, we also use Elasticsearch for storing and retrieving logs, and we use Kibana for log search, which is integral for troubleshooting issues internally.&lt;/p&gt;

&lt;p&gt;Our logging cluster was at 1 petabyte at one point. For payment search, we did a migration from Elasticsearch v1.7 to v7.6 with 12TB of data last year, and the flexibility of Elasticsearch made the migration smooth. So at Adyen, Elasticsearch will continue to be an integral part of keeping our lights on.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://www.elastic.co/blog/why-elasticsearch-is-an-indispensable-component-of-the-adyen-stack"&gt;https://www.elastic.co&lt;/a&gt; on May 27, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>fintech</category>
      <category>elasticsearch</category>
      <category>adyen</category>
      <category>architecture</category>
    </item>
    <item>
      <title>How to auto-document the database schema of your Rails app</title>
      <author>Kevin Gilpin</author>
      <pubDate>Tue, 08 Jun 2021 11:46:33 +0000</pubDate>
      <link>https://dev.to/appland/how-to-auto-document-the-database-schema-of-your-rails-app-50b</link>
      <guid>https://dev.to/appland/how-to-auto-document-the-database-schema-of-your-rails-app-50b</guid>
      <description>&lt;p&gt;I’m wrapping up my &lt;a href="https://www.railsconf.org/"&gt;RailsConf 2021&lt;/a&gt; presentation recap today. Check out &lt;a href="https://dev.to/appland/we-need-a-better-way-to-communicate-and-explain-our-code-decisions-1nic"&gt;Part 1&lt;/a&gt;, &lt;a href="https://dev.to/appland/how-to-auto-document-end-to-end-flows-with-appmap-41d2"&gt;Part 2 &lt;/a&gt; and &lt;a href="https://dev.to/appland/how-to-auto-generate-swagger-openapi-doc-for-your-web-services-3npn"&gt;Part 3&lt;/a&gt; in case you missed them! This final post recaps the demo I gave on how to auto-document database schemas with a gem called &lt;code&gt;rails-erd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An entity relationship diagram (ERD) shows the tables, columns and relations in a relational database schema. To auto-generate an ERD for a specific version of your code directly from the database, you can use the &lt;code&gt;rails-erd&lt;/code&gt; gem. It does this by: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Gathering database meta data through active record (it uses ActiveRecord so it’s database independent).&lt;/li&gt;
&lt;li&gt;  Analyzing the schema and then generating a DOT file, which can be processed into a PDF.&lt;/li&gt;
&lt;li&gt;  Bundling all of this up into a rake task, which you can use to update the ERD when you modify the schema.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the ERD PDF file, you can see a detailed diagram of your database schema. This is useful for analyzing the data model of an app and identifying features such as nullable and not nullable columns, column types, primary keys, foreign keys and the different types of relationships. &lt;/p&gt;

&lt;p&gt;You can also get other insights from looking at the schema, such as security information. In my demo, for instance, I was able to see that the password remember and reset token were all stored as a one-way digest. So, if an attacker was able to obtain access to this database, I know they wouldn’t be able to obtain these secrets.  &lt;/p&gt;

&lt;p&gt;You can watch this portion of my RailsConf talk in the video clip above. If you want to follow along in the code or look it up later, I’ve created a branch called &lt;code&gt;erd&lt;/code&gt; within the &lt;code&gt;land-of-apps&lt;/code&gt; fork of the Rails Sample App. Check it out here: &lt;/p&gt;

&lt;p&gt;&lt;a href="http://github.com/land-of-apps/sample_app_6th_ed/tree/erd"&gt;http://github.com/land-of-apps/sample_app_6th_ed/tree/erd&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;I’d love to hear your comments, suggestions and questions in &lt;a href="https://discord.com/invite/N9VUap6"&gt;Discord&lt;/a&gt;! And feel free to explore the other two types of code design docs that I demoed how to auto-generate, including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://github.com/land-of-apps/sample_app_6th_ed/tree/eager-loading"&gt;AppMap covering end-to-end data flows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/land-of-apps/sample_app_6th_ed/tree/swagger"&gt;Swagger covering web services and APIs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>rails</category>
      <category>database</category>
    </item>
    <item>
      <title>JavaScript v TypeScript</title>
      <author>JavaCode7</author>
      <pubDate>Tue, 08 Jun 2021 11:45:44 +0000</pubDate>
      <link>https://dev.to/javacode7/javascript-v-typescript-3i1g</link>
      <guid>https://dev.to/javacode7/javascript-v-typescript-3i1g</guid>
      <description>&lt;p&gt;JavaScript. By far one of the most famous programming languages for its applications in scripting, gamedev and most notably web apps 🌐. Then its brother, TypeScript. Famous for being statically typed. It adds more features to JavaScript. Which one is better? 🤔 I guess today we find out.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h4&gt;

&lt;p&gt;What follows is going to be my opinion inferred from fact. This may or may not be true. Please read this article accordingly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript has many features, scripting, web apps and is even supported in some game engines. To sum it up nicely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✔  Dynamically typed (beginners don't mix up typing)&lt;/li&gt;
&lt;li&gt;❌ No optional parameters&lt;/li&gt;
&lt;li&gt;❌ No interfaces&lt;/li&gt;
&lt;li&gt;✔  Some game engine support&lt;/li&gt;
&lt;li&gt;✔  Compiled not transpiled&lt;/li&gt;
&lt;li&gt;❌ No TS file imports&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  TypeScript
&lt;/h2&gt;

&lt;p&gt;TypeScript has similar syntax to JavaScript but with a few features added.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;❌ Statically typed&lt;/li&gt;
&lt;li&gt;✔  Optional parameters&lt;/li&gt;
&lt;li&gt;✔  Interfaces&lt;/li&gt;
&lt;li&gt;❌ Transpiled&lt;/li&gt;
&lt;li&gt;✔  Both TS and JS imports&lt;/li&gt;
&lt;li&gt;✔  Most JS frameworks support TS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on all of this, and my experience using both languages. I would say that TypeScript is better than JavaScript. You may disagree however. If you do, please comment 💬! I would love to hear your opinions!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>watercooler</category>
      <category>healthydebate</category>
    </item>
    <item>
      <title>Simple progress bar component with React and Tailwind</title>
      <author>Yogini Bende</author>
      <pubDate>Tue, 08 Jun 2021 10:45:27 +0000</pubDate>
      <link>https://dev.to/ms_yogii/simple-progress-bar-component-in-react-with-tailwind-i6a</link>
      <guid>https://dev.to/ms_yogii/simple-progress-bar-component-in-react-with-tailwind-i6a</guid>
      <description>&lt;p&gt;Hello folks, &lt;/p&gt;

&lt;p&gt;Recently, I was working on a feature and I had to implement a &lt;strong&gt;progress bar&lt;/strong&gt; in it. Till now, I have always been scared of progress bars (reason: unknown 😂). Most of my previous projects used Bootstrap, and because bootstrap has its own &lt;a href="https://getbootstrap.com/docs/5.0/components/progress/"&gt;progress&lt;/a&gt; component, I didn't need to create a progress bar all by myself. &lt;/p&gt;

&lt;p&gt;But fortunately, the current project I am working on is using &lt;strong&gt;Tailwind&lt;/strong&gt; and that means I had to create a progress bar myself! Initially I felt this will be super complicated and I will have to handle so many states and all. But it ends up being a very small and fairly simple component. &lt;/p&gt;

&lt;p&gt;In this article, let's understand how to create this easy and simple progress bar. So next time, we will not need any library for this!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let's get started&lt;/strong&gt; 🚀&lt;/p&gt;

&lt;p&gt;To build a progress bar we will need only two parts. &lt;br&gt;
1- We will need an outer div to show the complete progress bar.&lt;br&gt;
2- Inner div to show the progress.&lt;/p&gt;

&lt;p&gt;Let's dive into the code and understand this! Our progress bar component will look something like this -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ProgressBar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;progressPercentage&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h-1 w-full bg-gray-300&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
                &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;progressPercentage&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;%`&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
                &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`h-full &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;
                    &lt;span class="nx"&gt;progressPercentage&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;70&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-red-600&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bg-green-600&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These 4 lines of code and your basic progress bar component is ready. 😇&lt;/p&gt;

&lt;p&gt;If you see in code, the outer div is the complete progress bar. It has a total of 3 classes, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;background color&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The height here is kept &lt;code&gt;4px&lt;/code&gt; only, but that you can change as per your need. Here, to make it more generic, we made the width 100%. Due to this, we will be able to control the width of the progress bar based on the outer component. The background color given to this div defines the empty state of progress bar. Hence we have used &lt;code&gt;bg-gray-300&lt;/code&gt; from tailwind default colors.&lt;/p&gt;

&lt;p&gt;Now, as the inner width represents actual progress of this progress bar, we will need to keep its width dependent on the value passed as a percentage of progress. So, we have added an inline style attribute to this div and the percentage goes as a value to the width property. Also, we added 100% height to this inner div. Hence it will consume the whole height of the outer div.&lt;/p&gt;

&lt;p&gt;As per my use case, if the progress is below 70%, we need to show the progress bar in red color otherwise green. We can achieve this simply by using conditional styling. You can see we are conditionally applying the classes of background color to this div. If you have more than one condition, you can use a variable to get the value of the background color and apply that class to this div. &lt;/p&gt;

&lt;p&gt;This is the bare minimum structure of any progress bar and you can keep on adding more features to it as per requirements. But I guess, this basic structure will solve most of the needs. &lt;/p&gt;

&lt;p&gt;That’s it for now. &lt;strong&gt;I have created a &lt;a href="https://github.com/ms-yogi/React-Tailwind-Component"&gt;github repo&lt;/a&gt; to create React and Tailwind components.&lt;/strong&gt; You can check that out and feel free to add more components there if you are interested. &lt;/p&gt;

&lt;p&gt;Thank you so much for reading this article. Let me know your thoughts on this and you can follow me on &lt;a href="https://twitter.com/ms_yogii"&gt;twitter&lt;/a&gt; for more daily updates 😇&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy coding and keep learning 🙌&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tailwindcss</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>UI Dev Newsletter #60</title>
      <author>Silvestar Bistrović</author>
      <pubDate>Tue, 08 Jun 2021 09:54:14 +0000</pubDate>
      <link>https://dev.to/starbist/ui-dev-newsletter-60-1jbm</link>
      <guid>https://dev.to/starbist/ui-dev-newsletter-60-1jbm</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/2SY1pMK"&gt;25 Years of CSS&lt;/a&gt;&lt;br&gt;
Eric A. Meyer takes a look at notes about CSS that he wrote 25 years ago while attending the WWW5 conference.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3vYkMUC"&gt;Styling And Animating SVGs With CSS&lt;/a&gt;&lt;br&gt;
Sara Soueidan explains why it is essential to optimize your SVGs, why put in the effort to make them accessible, and how to style and animate them with CSS.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3fTtbTt"&gt;HTML and CSS techniques to reduce your JavaScript&lt;/a&gt;&lt;br&gt;
Anthony Ricaud explores native solutions that are available to most of your users and don’t require JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/2T5Wr0j"&gt;The perfect link&lt;/a&gt;&lt;br&gt;
Rian Rietveld tries to answer how do we write, design, and code a link that works for everyone on every device.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/2T3p7ag"&gt;Don't Develop Just for Yourself - A Developer's Checklist to Accessibility&lt;/a&gt;&lt;br&gt;
Eevis Panula provides information about accessibility and what things to check manually after automated testing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/34YZbzf"&gt;Color psychology in web design&lt;/a&gt;&lt;br&gt;
Eleftheria Batsou shares a quick guide about picking the “right” color for the web-based on psychology.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3cnXAar"&gt;JavaScript Notes &amp;amp; Reference&lt;/a&gt;&lt;br&gt;
Wes Bos shares helpful notes based on his Beginner JavaScript Video Course.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://bit.ly/3uWovkj"&gt;Compress Image Online&lt;/a&gt;&lt;br&gt;
Compress JPG and PNG images at light speed with a Browser-based Image compressor. Private, Works Offline, No Limits, 0 carbon emission.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/34155z3"&gt;Subscribe to the newsletter here!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What browser do you use and why? 🌐</title>
      <author>JavaCode7</author>
      <pubDate>Tue, 08 Jun 2021 09:32:38 +0000</pubDate>
      <link>https://dev.to/javacode7/what-browser-do-you-use-and-why-4i3e</link>
      <guid>https://dev.to/javacode7/what-browser-do-you-use-and-why-4i3e</guid>
      <description></description>
      <category>watercooler</category>
      <category>healthydebate</category>
    </item>
  </channel>
</rss>
