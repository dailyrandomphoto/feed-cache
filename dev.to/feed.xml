<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 Trending Javascript Projects For Web Developer on GitHub</title>
      <author>Tips and Tricks</author>
      <pubDate>Sat, 28 Aug 2021 02:23:15 +0000</pubDate>
      <link>https://dev.to/tips_tricks/10-trending-javascript-projects-for-web-developer-on-github-2pco</link>
      <guid>https://dev.to/tips_tricks/10-trending-javascript-projects-for-web-developer-on-github-2pco</guid>
      <description>&lt;p&gt;The best way to learn a new programming language is to build projects.&lt;/p&gt;
&lt;p&gt;I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.&lt;/p&gt;
&lt;p&gt;My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.&lt;/p&gt;
&lt;p&gt;That will test if you have really learned the concepts or not.&lt;/p&gt;
&lt;p&gt;You can click on any of the projects listed below to jump to that section of the article.&lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/the-best-beginner-javascript-projects-for-2021/&amp;amp;ved=2ahUKEwjx8-Pl09LyAhWkxjgGHUMUDw4QtwJ6BAgsEAE&amp;amp;usg=AOvVaw16eIeKYPB8xzH6B1hMi2E6"&gt;Trending Javascript Projects for Web Developer on GitHub&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>ELI5 Memoized DOM</title>
      <author>Siddharth</author>
      <pubDate>Sat, 28 Aug 2021 02:03:52 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/eli5-memoized-dom-1jj</link>
      <guid>https://dev.to/siddharthshyniben/eli5-memoized-dom-1jj</guid>
      <description>&lt;p&gt;There have been many, many DOMs – Incremental DOM, Shadow DOM, Virtual DOM – But I'm not sure what the Memoized DOM is. I know what memoization is, and as far as my searches tell me that "DOM memoizing is caching the work of functions that modify the DOM". So isn't that supposed to be similar to VDOM? &lt;/p&gt;

</description>
      <category>explainlikeimfive</category>
      <category>help</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Sending GET, POST, PUT, DELETE Requests In Python</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sat, 28 Aug 2021 00:50:53 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/sending-get-post-put-delete-requests-in-python-45o8</link>
      <guid>https://dev.to/ayabouchiha/sending-get-post-put-delete-requests-in-python-45o8</guid>
      <description>&lt;p&gt;Hello, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, today, we'll talk about sending requests in python using the requests module&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip install requests
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#whats-get-request"&gt;
  &lt;/a&gt;
  What's GET request
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt;: is a request used for getting or retrieving data or information from a specified server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-get-requests-in-python-using-requests"&gt;
  &lt;/a&gt;
  Sending GET requests in Python using requests
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://jsonplaceholder.typicode.com/posts/1'&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# &amp;lt;Response [200]&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 200
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# {
#  "userId": 1,
#  "id": 1,
#  "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",
#  "body": "quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto"
#}
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# https://jsonplaceholder.typicode.com/posts/1
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# application\json; charset=utf-8
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# b'{\n  "userId": 1,\n  "id": 1,\n  "title": "sunt aut facere repellat provident occaecati excepturi optio reprehenderit",\n  "body": "quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto"\n}'
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# {'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto'}
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# &amp;lt;class 'dict'&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

&lt;span class="c1"&gt;# for more information
# print(dir(response))
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#whats-post-request"&gt;
  &lt;/a&gt;
  What's POST request
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt;: is a request that is used for sending information or data to a specific server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-post-requests-in-python-using-requests"&gt;
  &lt;/a&gt;
  Sending POST requests in Python using requests
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://jsonplaceholder.typicode.com/posts'&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'buy new mouse'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'I need to buy a new mouse !'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;'userId'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,}&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'content-type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'application/json; charset=UTF-8'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# 201
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# b'{\n  "title": "buy new mouse",\n  "body": "I need to buy a new mouse !",\n  "userId": 5,\n  "id": 101\n}'
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# {
#   "title": "buy new mouse",
#   "body": "I need to buy a new mouse !",
#   "userId": 5,
#   "id": 101
# }
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# &amp;lt;class 'str'&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# https://jsonplaceholder.typicode.com/posts
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# application/json; charset=utf-8
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# utf-8
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#whats-the-put-request"&gt;
  &lt;/a&gt;
  What's the PUT request
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;PUT&lt;/strong&gt;:  is a request used for creating or updating a resource in a specific server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-put-requests-in-python-using-requests"&gt;
  &lt;/a&gt;
  Sending PUT requests in Python using requests
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://jsonplaceholder.typicode.com/posts/1'&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'userId'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'drink water'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'body'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'drinking water is important'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'application/json; charset=UTF-8'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="c1"&gt;# 200
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# True
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# b'{\n  "id": 1,\n  "userId": 2,\n  "title": "drink water",\n  "body": "drinking water is important"\n}'
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# {
#   "id": 1,
#   "userId": 2,
#   "title": "drink water",
#   "body": "drinking water is important" 
# }
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# &amp;lt;class 'str'&amp;gt;
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# https://jsonplaceholder.typicode.com/posts
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# application/json; charset=utf-8
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# utf-8
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#whats-a-delete-request"&gt;
  &lt;/a&gt;
  What's a delete request
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;DELETE&lt;/strong&gt;: is a request used to delete a specific resource in a server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-a-delete-request-in-python"&gt;
  &lt;/a&gt;
  Sending a DELETE request in python
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://jsonplaceholder.typicode.com/posts/1'&lt;/span&gt;

&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'application/json; charset=UTF-8'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 200
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# True
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# &amp;lt;class 'str'&amp;gt;
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# https://jsonplaceholder.typicode.com/posts/1
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Content-Type'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;# application/json; charset=utf-8
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# utf-8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have a good day&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Spread Operator: How Spread Works in JavaScript</title>
      <author>Oluwatobi Sofela</author>
      <pubDate>Fri, 27 Aug 2021 23:16:16 +0000</pubDate>
      <link>https://dev.to/oluwatobiss/spread-operator-how-spread-works-in-javascript-4fdn</link>
      <guid>https://dev.to/oluwatobiss/spread-operator-how-spread-works-in-javascript-4fdn</guid>
      <description>&lt;p&gt;The &lt;strong&gt;spread operator&lt;/strong&gt; (&lt;code&gt;...&lt;/code&gt;) is a syntax that helps to expand iterables into individual elements.&lt;/p&gt;

&lt;p&gt;The spread syntax serves within &lt;em&gt;array literals&lt;/em&gt;, &lt;em&gt;function calls&lt;/em&gt;, and &lt;em&gt;initialized properties object&lt;/em&gt; to spread the values of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables"&gt;iterable objects&lt;/a&gt; into separate items.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A spread syntax is effective only when used within array literals, function calls, or initialized properties objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, what exactly does this mean? Let’s see with some examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spread-example-1-how-spread-works-in-an-array-literal"&gt;
  &lt;/a&gt;
  Spread Example 1: How spread works in an array literal
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sofela&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;aboutMe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oluwatobi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aboutMe&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// The invocation above will return:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oluwatobi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sofela&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;is&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;a href="https://stackblitz.com/edit/web-platform-rd1npd?file=script.js"&gt;Try it on StackBlitz&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The snippet above used spread (&lt;code&gt;...&lt;/code&gt;) to copy &lt;code&gt;myName&lt;/code&gt; array into &lt;code&gt;aboutMe&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Alterations to &lt;code&gt;myName&lt;/code&gt; will not reflect in &lt;code&gt;aboutMe&lt;/code&gt; because the spread operator simply copied and paste &lt;code&gt;myName&lt;/code&gt;’s content into &lt;code&gt;aboutMe&lt;/code&gt; without creating any reference back to the original array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Suppose we did not use the spread syntax to duplicate &lt;code&gt;myName&lt;/code&gt;’s content. For instance, if we had written &lt;code&gt;const aboutMe = ["Oluwatobi", myName, "name."]&lt;/code&gt;. In such a case, the computer would have assigned a reference back to &lt;code&gt;myName&lt;/code&gt;. As such, any change made in the original array would reflect in the duplicated one.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#spread-example-2-how-to-use-spread-to-convert-a-string-into-individual-array-items"&gt;
  &lt;/a&gt;
  Spread Example 2: How to use spread to convert a string into individual array items
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oluwatobi Sofela&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="c1"&gt;// The invocation above will return:&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;O&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;l&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;u&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;w&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;t&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;o&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;i&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;S&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;o&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;f&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;e&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;l&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;a href="https://stackblitz.com/edit/web-platform-axvtye?file=script.js"&gt;Try it on StackBlitz&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the snippet above, we used the spread syntax (&lt;code&gt;...&lt;/code&gt;) within an array literal object (&lt;code&gt;[...]&lt;/code&gt;) to expand &lt;code&gt;myName&lt;/code&gt;’s string value into individual items.&lt;/p&gt;

&lt;p&gt;As such, &lt;code&gt;"Oluwatobi Sofela"&lt;/code&gt; got expanded into &lt;code&gt;[ "O", "l", "u", "w", "a", "t", "o", "b", "i", " ", "S", "o", "f", "e", "l", "a" ]&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spread-example-3-how-the-spread-operator-works-in-a-function-call"&gt;
  &lt;/a&gt;
  Spread Example 3: How the spread operator works in a function call
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// The invocation above will return:&lt;/span&gt;
&lt;span class="mi"&gt;16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;a href="https://stackblitz.com/edit/web-platform-nrn8f3?file=script.js"&gt;Try it on StackBlitz&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the snippet above, we used the spread syntax to spread the &lt;code&gt;numbers&lt;/code&gt; array’s content across &lt;code&gt;addNumbers()&lt;/code&gt;’s parameters.&lt;/p&gt;

&lt;p&gt;Suppose the &lt;code&gt;numbers&lt;/code&gt; array had more than four items. In such a case, the computer will only use the first four items as &lt;code&gt;addNumbers()&lt;/code&gt; argument and ignore the rest.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s an example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;59&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addNumbers&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// The invocation above will return:&lt;/span&gt;
&lt;span class="mi"&gt;16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;a href="https://stackblitz.com/edit/web-platform-ef3ncm?file=script.js"&gt;Try it on StackBlitz&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s another example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oluwatobi Sofela&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;spellName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spellName&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;      &lt;span class="c1"&gt;// returns: "Olu"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spellName&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;   &lt;span class="c1"&gt;// returns: "wundefinedundefined"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spellName&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;]));&lt;/span&gt;    &lt;span class="c1"&gt;// returns: "O,l,u,w,a,t,o,b,i, ,S,o,f,e,l,aundefinedundefined"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spellName&lt;/span&gt;&lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;}));&lt;/span&gt;    &lt;span class="c1"&gt;// returns: "[object Object]undefinedundefined"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;a href="https://stackblitz.com/edit/web-platform-pkrxjd?file=script.js"&gt;Try it on StackBlitz&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spread-example-4-how-spread-works-in-an-object-literal"&gt;
  &lt;/a&gt;
  Spread Example 4: How spread works in an object literal
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oluwatobi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sofela&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;myNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;runs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;codesweetly.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// The invocation above will return:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oluwatobi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sofela&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;runs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;codesweetly.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;a href="https://stackblitz.com/edit/web-platform-qnmxsu?file=script.js"&gt;Try it on StackBlitz&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the snippet above, we used spread inside the &lt;code&gt;bio&lt;/code&gt; object to expand &lt;code&gt;myNames&lt;/code&gt; values into individual properties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-stuff-to-know-about-the-spread-operator"&gt;
  &lt;/a&gt;
  Important stuff to know about the spread operator
&lt;/h2&gt;

&lt;p&gt;Keep these two essential pieces of info in mind whenever you choose to use the spread operator.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#info-1-spread-operators-cant-expand-object-literals-values"&gt;
  &lt;/a&gt;
  Info 1: Spread operators can’t expand object literal’s values
&lt;/h3&gt;

&lt;p&gt;Since a properties object is not an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterables"&gt;iterable object&lt;/a&gt;, you cannot use the spread syntax to expand its values.&lt;/p&gt;

&lt;p&gt;However, you can use the &lt;em&gt;spread operator&lt;/em&gt; to clone &lt;em&gt;properties&lt;/em&gt; from one object into another.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s an example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oluwatobi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sofela&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;website&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;codesweetly.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// The invocation above will return:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oluwatobi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sofela&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;website&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;codesweetly.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;a href="https://stackblitz.com/edit/web-platform-psnsa8?file=script.js"&gt;Try it on StackBlitz&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The snippet above used the spread operator to clone &lt;code&gt;myName&lt;/code&gt;’s content into the &lt;code&gt;bio&lt;/code&gt; object.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The spread operator can expand &lt;em&gt;iterable objects&lt;/em&gt;’ values only.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An object is iterable only if it (or any object in its prototype chain) has a property with a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol"&gt;@@iterator&lt;/a&gt; key.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator"&gt;Array&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator"&gt;TypedArray&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator"&gt;String&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator"&gt;Map&lt;/a&gt;, and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator"&gt;Set&lt;/a&gt; are all built-in iterable types because they have the &lt;code&gt;@@iterator&lt;/code&gt; property by default.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A properties object is not an iterable &lt;a href="https://www.codesweetly.com/document-vs-data-vs-code"&gt;data&lt;/a&gt; type because it does not have the &lt;code&gt;@@iterator&lt;/code&gt; property by default.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator#user-defined_iterables"&gt;make a properties object iterable&lt;/a&gt; by adding &lt;code&gt;@@iterator&lt;/code&gt; onto it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#info-2-the-spread-operator-does-not-clone-identical-properties"&gt;
  &lt;/a&gt;
  Info 2: The spread operator does not clone identical properties
&lt;/h3&gt;

&lt;p&gt;Suppose you used the spread operator to clone properties from object A into object B. And suppose object B contains properties identical to those in object A. In such a case, B’s versions will override those inside A.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s an example:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tobi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sofela&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;myName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oluwatobi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;website&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;codesweetly.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bio&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// The invocation above will return:&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Oluwatobi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sofela&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;website&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;codesweetly.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;a href="https://stackblitz.com/edit/web-platform-gjhjue?file=script.js"&gt;Try it on StackBlitz&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Observe that the spread operator did not copy &lt;code&gt;myName&lt;/code&gt;’s &lt;code&gt;firstName&lt;/code&gt; property into the &lt;code&gt;bio&lt;/code&gt; object because &lt;code&gt;bio&lt;/code&gt; already contains a &lt;code&gt;firstName&lt;/code&gt; property.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-it-up"&gt;
  &lt;/a&gt;
  Wrapping it up
&lt;/h2&gt;

&lt;p&gt;This article discussed what the spread operator is. We also looked at how spread works in array literals, function calls, and object literals.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>coding</category>
    </item>
    <item>
      <title>Advanced PostgreSQL Features: A Guide
</title>
      <author>Arctype Team</author>
      <pubDate>Fri, 27 Aug 2021 23:03:16 +0000</pubDate>
      <link>https://dev.to/arctype/advanced-postgresql-features-a-guide-5dl0</link>
      <guid>https://dev.to/arctype/advanced-postgresql-features-a-guide-5dl0</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4xSORB_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630103698731/a3JnD1zJJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4xSORB_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630103698731/a3JnD1zJJ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;​&lt;br&gt;
Despite the rise in popularity of NoSQL databases, relational databases still continue to be preferred for many applications. This is because of their strong querying abilities and their robustness. &lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;Relational databases excel in running complex queries and reporting based on the data in cases where the data structure does not change frequently. Open-source relational databases like MySQL and PostgreSQL provide a cost-effective alternative as a stable production-grade database compared to licensed counterparts like Oracle, MSSQL, etc. If your organization works extensively with such a relational database, you should check Arctype - A collaborative SQL editor that helps visualize a database like a spreadsheet. This post is about the advanced features of PostgreSQL - A free and open-source database management system that focuses on extensibility and SQL compliance.&lt;br&gt;
​&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#postgresql-common-use-cases"&gt;
  &lt;/a&gt;
  PostgreSQL - Common Use Cases
&lt;/h2&gt;

&lt;p&gt;​&lt;br&gt;
PostgreSQL’s unique feature-set allows it to be used as a transactional database or as a data warehouse. The excellent transaction support and high write performance make it an ideal candidate for running online transactional processing workloads. At the same time, the rich built-in functions that include analytical and windows functions allow it to be used as a data warehouse that can be used by the analysts to derive insights. &lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;JSON data types and JSON functions in PostgreSQL make it possible to run NoSQL workloads using PostgreSQL. Another unique feature that PostgreSQL supports is the ability to store geospatial data and run queries over them. This is made possible by the GIS plugin. The full-text feature in PostgreSQL helps one to search documents without using complex regular expressions. Other than this, PostgreSQL also supports many advanced features like schema inheritance, nonatomic columns, views, etc. We will take a detailed look into these advanced features in the next section. &lt;br&gt;
​&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#postgresql-advanced-features"&gt;
  &lt;/a&gt;
  PostgreSQL - Advanced features
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h3&gt;

&lt;p&gt;​&lt;br&gt;
PostgreSQL supports inheritance to enable users to create clean tables that model their model structures. For example, imagine you have a use-case where there is a customer table and there is a specific type of customer with an additional field called office_address. In a database that does not support inheritance, this has to be handled through two separate tables using the below DDL statements.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE CUSTOMERS (
    name text,
    age int,
    address text
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE OFFICE_CUSTOMERS(
    name text,
    age int,
    address text,
    office_address text
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With PostgreSQL’s inheritance feature, this can be handled using the below DDL statements. Using Arctype, create DDL statements as below.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE CUSTOMERS (
    name text,
    age int,
    address text
);

CREATE TABLE OFFICE_CUSTOMERS(
    office_address text
) INHERITS (customer)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above query will create two tables with the office_customers table inheriting from the main customer table.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Nwzk047--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-16-09-03.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Nwzk047--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-16-09-03.png" alt="Create Succeeded"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This helps in keeping the schemas clean as well as in database performance. &lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;Let us now insert a few entries to see how this works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO CUSTOMERS VALUES('ravi','32','32, head street');
INSERT INTO CUSTOMERS VALUES('michael','35','56, gotham street');
INSERT INTO OFFICE_CUSTOMERS VALUES('bane','28','56, circadia street','92 homebush');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​&lt;br&gt;
If you need to access data from only the first table, you can use the ONLY keyword. This is done as below.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * from ONLY CUSTOMER WHERE age &amp;gt; 20 ;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result will be as follows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Vn0M1YV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-19-39-45-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Vn0M1YV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-19-39-45-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you need to retrieve the entries from both tables, you can use the query without the ‘ONLY’ keyword.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * from CUSTOMERS WHERE age &amp;gt; 20 ;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​&lt;br&gt;
The result will be as follows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GkPw7929--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-19-39-54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GkPw7929--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-19-39-54.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#nonatomic-columns"&gt;
  &lt;/a&gt;
  Non-Atomic Columns
&lt;/h3&gt;

&lt;p&gt;​&lt;br&gt;
One of the main constraints of a relational model is that columns should be atomic. PostgreSQL does not have this constraint and allows columns to have sub-values that can be accessed via queries.&lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;It is possible to create tables with fields as arrays of any data type. Open Arctype and try creating a table using the below statement.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE customer (
   name            text,
   Address         text,
   payment_schedule  integer[],
   );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lvvHBQnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-16-09-03-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lvvHBQnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-16-09-03-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the above table, the payment_schedule field is an array of integers. Each integer can be accessed separately by specifying the index number. &lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;Insert a few rows via the below command.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO CUSTOMER_SCHEDULE VALUES( 'jack',
'Athens, Colarado',
'{1,2,3,4}'
)

INSERT INTO CUSTOMER_SCHEDULE VALUES( 'jackson',
'Tennessey, greece',
'{1,7,3,4}'
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result will be as follows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vfscye5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-19-40-22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vfscye5r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-19-40-22.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM CUSTOMER_SCHEDULE WHERE
CUSTOMER_SCHEDULE.payment_schedule[1] &amp;lt;&amp;gt; CUSTOMER_SCHEDULE.payment_schedule[2];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​&lt;br&gt;
The result will be as follows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nJy3ayIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Q_obSa6BNhYicn7_1frDnvq9yfoC2em0_G2kXhslEadmmo9417D4eKJOg9rk-OVB0CJtLRTA4dJ-14ZVUojrIVNF0nj2QQZNoA18v-k2N6WEcom-OzqRpEbCfnt-xte94_LBlwBF%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nJy3ayIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Q_obSa6BNhYicn7_1frDnvq9yfoC2em0_G2kXhslEadmmo9417D4eKJOg9rk-OVB0CJtLRTA4dJ-14ZVUojrIVNF0nj2QQZNoA18v-k2N6WEcom-OzqRpEbCfnt-xte94_LBlwBF%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#window-functions"&gt;
  &lt;/a&gt;
  Window functions
&lt;/h3&gt;

&lt;p&gt;​&lt;br&gt;
PostgreSQL window functions play an important role in making them a favorite for analytics applications. Window functions help users to execute functions spanning over multiple rows and return the same number of rows. Window functions are different from the aggregate functions in the sense that the latter can only return a single row after aggregation.&lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;Imagine you have a table with employee name, employee id,  salary, and division name.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE employees (
   empno            int,
   salary         float,
   division  text
   );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let us insert some values into the table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO employees VALUES(1,2456.7,'A')
INSERT INTO employees VALUES(2,10000.0,'A');
INSERT INTO employees VALUES(3,12000.0,'A');
INSERT INTO employees VALUES(4,2456.7,'B');
INSERT INTO employees VALUES(5,10000.0,'B');
INSERT INTO employees VALUES(6,10000.0,'C');
INSERT INTO employees VALUES(7,2456.7,'C');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now suppose you want to display the average salary of a division along with the employee details. You can achieve this using the below query. &lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT empno, salary, division,
avg(salary) OVER (PARTITION BY division) FROM EMPLOYEES;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output will be as below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VgR8X4HT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-19-41-34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VgR8X4HT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-19-41-34.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#support-for-json-data"&gt;
  &lt;/a&gt;
  Support for JSON Data
&lt;/h3&gt;

&lt;p&gt;​&lt;br&gt;
The ability to store and query JSON allows PostgreSQL to run NoSQL workloads as well. Suppose, you are designing a database to store data from various sensors and you are not sure about the specific columns that you will need to support all kinds of sensors. In that case, you can design a table such that one of the columns is JSON to store the unstructured or frequently changing data.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE sensor_data (
    id serial NOT NULL PRIMARY KEY,
    data JSON NOT NULL
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---0pZKezA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-16-09-03-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---0pZKezA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-16-09-03-2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can then insert data using the below statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO sensor_data (data)
VALUES('{ "ip": "J10.3.2.4", "payload": {"temp": "33.5","brightness": "73"}}');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lctKid_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-19-40-22-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lctKid_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-19-40-22-1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PostgreSQL allows you to query the specific fields in the JSON data via the below construct.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT data-&amp;gt;&amp;gt; 'ip' as ip from sensor_data;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRNNSXZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-19-41-53.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRNNSXZC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-19-41-53.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fulltext-search"&gt;
  &lt;/a&gt;
  Full-text Search
&lt;/h3&gt;

&lt;p&gt;​&lt;br&gt;
The full-text search feature in PostgreSQL allows one to search for documents based on the words that are present in the field. You might say that any database that supports a LIKE query construct should be able to do it. But PostgreSQL’s full-text search goes one step above what LIKE provides. To do a complete search using the LIKE query for a word, you will need to use elaborate regex expressions. On the other hand, PostgreSQL's full-text feature will even allow searching based on the root words or lexeme. A lexeme is best explained using an example. Let’s say you want to search your document for the word ‘work’ in a document. The word work may be present in the document in multiple forms like ‘Working, works, worked’ etc. PostgreSQL full-text search is intelligent enough to consider all such forms in the search. Imagine the trouble if you try to do this using regular expressions and LIKE queries.  Let us see the full-text search in action now.&lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;Let us create a table LOG for storing error logs.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE log(
   name text,
   description text
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, insert a few error values using the below statements.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO LOG VALUES('ERROR1','Failed to retreive credentials');
INSERT INTO LOG VALUES('ERROR2','Fatal error. No records present. Please try again with a different value');
INSERT INTO LOG VALUES('ERROR3','Unable to connect. Credentials missing');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​&lt;br&gt;
Let us now try to retrieve the rows that contain the word ‘miss’ using the full-text search. This needs two functions. The to_tsvector function converts the values to their lexeme and the to_tsquery function will try to match the words.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM LOG WHERE to_tsvector(description) @@ to_tsquery('miss');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The result will be as follows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LCJEguMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/R-t2g2Ct8mXaSKVcFZdcxTBY_Krneaenw_RWe5y2IyG1XzRVnIP2LdQf1FOpYDiacWftpmWCjfGWiSRskvO3_Z3r-jZRQyyP0rnybV9XWlJ58GuPonBJz7umE8T8XWWCxRLUdUbn%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LCJEguMy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/R-t2g2Ct8mXaSKVcFZdcxTBY_Krneaenw_RWe5y2IyG1XzRVnIP2LdQf1FOpYDiacWftpmWCjfGWiSRskvO3_Z3r-jZRQyyP0rnybV9XWlJ58GuPonBJz7umE8T8XWWCxRLUdUbn%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that the query managed to return the row even though the actual word in the description was ‘missing’ and not ‘miss’ that we searched for.&lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;The full-text features are available with various localization configurations. Hence it can be used with many languages too.&lt;br&gt;
​&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#postgres-views"&gt;
  &lt;/a&gt;
  Postgres Views
&lt;/h3&gt;

&lt;p&gt;​&lt;br&gt;
Views can be considered as virtual tables that meet specific criteria. For example, let’s assume you have a staff table and salary table. Where id is the common key. If your workflow requires you to combine these tables often and analyze them, you can define a view with your desired criteria. This view will reflect all changes in the underlying tables and will act like a combined table. Let’s see this in action below.&lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;Create the tables using the below DDL statements.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE TABLE staff(
   id int,
   age int,
   address text
);


CREATE TABLE salary(
   sal_id int,
   salary int,
   division text
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Insert a few entries using the below statements.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO STAFF VALUES(1,32,'michael');
SELECT * FROM STAFF_SALARY_COMBINED;

INSERT INTO STAFF VALUES(2,32,'sarah');
INSERT INTO SALARY VALUES(1,18000,'A');
INSERT INTO SALARY VALUES(2,32000,'B');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a view using the below statement.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CREATE VIEW STAFF_SALARY_COMBINED AS (
    SELECT * 
    FROM staff,salary 
    WHERE id=sal_id
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then query the view as a normal table.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM STAFF_SALARY_COMBINED;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​&lt;br&gt;
The output in Arctype will be as follows.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aY3YWFaT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/cC13AzgX1_f3bFgcepnHesuIYhq69EptXLyUgfsFnp2TX_VnIyOe2AxXq1LFBq1FsHCm4DAXSuNR5EAepWm5pCZaZ9vKCcQvQpzxxDl-uTh8wv1JsSptff4_7e8gwsRreQzUPAia%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aY3YWFaT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/cC13AzgX1_f3bFgcepnHesuIYhq69EptXLyUgfsFnp2TX_VnIyOe2AxXq1LFBq1FsHCm4DAXSuNR5EAepWm5pCZaZ9vKCcQvQpzxxDl-uTh8wv1JsSptff4_7e8gwsRreQzUPAia%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#handling-geospatial-data-in-postgres"&gt;
  &lt;/a&gt;
  Handling Geospatial Data in Postgres
&lt;/h3&gt;

&lt;p&gt;​&lt;br&gt;
PostgreSQL with GIS extension allows one to store geometrical coordinates and shape information in tables. What makes it special is the ability to execute queries over these coordinates through built-in functions to calculate distances, area, etc. This makes PostgreSQL the de facto choice in use cases where the output or inputs are geographical coordinates and there are significant spatial processing requirements. For example, let's say you have the geometric information of all the cities and you want to know the area of a city, it is as easy as executing the below query.&lt;br&gt;
​&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT city.name
FROM burn_area, city
WHERE ST_Contains(burn_area.geom, city.geom)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;​&lt;br&gt;
The result will display the city name meeting the coordinate conditions provided.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W0g2ZFSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-19-44-11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W0g2ZFSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/08/Screenshot-from-2021-08-24-19-44-11.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;​&lt;br&gt;
PostgreSQL has many advanced features that make it unique in the sea of relational databases. Taking advantage of these unique features and collaborating with others is the foundation of building powerful applications using PostgreSQL. Having access to an SQL editor that can help you take advantage of these advanced features can make your job easier. Check out Arctype - A collaborative SQL editor that helps you build dashboards and visualize tables like spreadsheets.&lt;/p&gt;

</description>
      <category>postgres</category>
      <category>guide</category>
      <category>geospatial</category>
      <category>data</category>
    </item>
    <item>
      <title>Typewriter Effect with CSS</title>
      <author>Alvaro Montoro</author>
      <pubDate>Fri, 27 Aug 2021 22:13:36 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/typewriter-effect-with-css-38im</link>
      <guid>https://dev.to/alvaromontoro/typewriter-effect-with-css-38im</guid>
      <description>&lt;p&gt;A &lt;a href="https://www.reddit.com/r/css/comments/pc0pkf/any_of_you_guys_know_how_to_do_that_type_writer/"&gt;reddit user asked in the CSS channel&lt;/a&gt; if there was a way of building a typewriter effect. Some people pointed out at &lt;a href="https://css-tricks.com/snippets/css/typewriter-effect/"&gt;Geoff Graham's article on CSS Tricks&lt;/a&gt; (which includes different versions in CSS and JS), and many more recommended using JavaScript or some JS libraries/modules... and I tried to come up with my own &lt;a href="https://codepen.io/alvaromontoro/pen/rNwVpdd"&gt;CSS-only version&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/rNwVpdd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The idea is to animate the &lt;code&gt;content&lt;/code&gt; property of a pseudo-element like &lt;code&gt;::before&lt;/code&gt; to show one character at a time. And then, we can use the &lt;code&gt;::after&lt;/code&gt; element to display a blinking caret.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;content&lt;/code&gt; property is discretely animatable. This means that there won't be transitions –it would have been nice–, but it will still animate it "step by step," which it's exactly what we want.&lt;/p&gt;

&lt;p&gt;It is not perfect, but it can be eye-catchy, and it has some nice pros compared to similar CSS-only solutions. Also, it is slightly customizable (the caret can change color and size), and I tried to make it as accessible as possible.&lt;/p&gt;

&lt;p&gt;The main issue is calculating the steps and the time at which they must happen. To simplify and generalize the process, I created a short JavaScript snippet to help generate the animation steps for any set of words... Unfortunately, although it works in most cases, my math is wrong, and it sometimes fails. (I'll add a link once I verify it works fine.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros-and-cons"&gt;
  &lt;/a&gt;
  Pros and Cons
&lt;/h2&gt;

&lt;p&gt;Pros of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is multiline: many of the CSS-only typewriter animations only work for single lines/words. This one will work in multiple lines too.&lt;/li&gt;
&lt;li&gt;It doesn't cut letters/words: each letter is added individually instead of hiding with overflows that may display them partially (as it happens in other solutions).&lt;/li&gt;
&lt;li&gt;No need for monospace fonts: related to the point above. Other animations only work with monospace to go around the cutting words/letters issue. This one will work with non-monospace fonts too.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Requires some accessibility boost (see below): in my defense, most animations that do this (CSS or JS) have this issue.&lt;/li&gt;
&lt;li&gt;It involves a lot of code: the CSS animation will have as many lines as letters are in total... which is annoying, but in some cases, it may still be less code and less weight than with a JS solution.&lt;/li&gt;
&lt;li&gt;It is a pain to write the animation steps: a lot of calculations! So I created a small script to generalize the process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To go around this last part, maybe I could have used the &lt;code&gt;steps()&lt;/code&gt; timing function. But in the end, it would require some (simpler) calculations too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h2&gt;

&lt;p&gt;We are going to do a couple of things to boost the accessibility of this animation... and one of them consists of removing the animations 😅&lt;/p&gt;

&lt;p&gt;First, while a sighted user can see the text changing, that may not be the case for a user of assistive technologies (AT). For example, a screen reader user won't get information about the text growing/shrinking –and thank you, because it would be a pain in the neck!&lt;/p&gt;

&lt;p&gt;To avoid getting a half description of the title, we should add an &lt;code&gt;aria-label&lt;/code&gt; to the container with the full description.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"I'm a developer, writer, reader, and human."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  I'm a&lt;span class="ni"&gt;&amp;amp;nbsp;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"typewriter"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Without the &lt;code&gt;aria-label&lt;/code&gt;, screen readers will read the title as "&lt;em&gt;I'm a&lt;/em&gt;"; with the &lt;code&gt;aria-label&lt;/code&gt;, they'll read "&lt;em&gt;I'm a developer, writer, reader, and human.&lt;/em&gt;", which is much better.&lt;/p&gt;

&lt;p&gt;The other thing we can do to make the component a bit more accessible is to remove the actual animations. If a user has the reduced motion setting on, we should stop the caret blinking, leave it fixed, and maybe show the words fully instead of letter by letter. To do so, CSS counts with the &lt;code&gt;prefers-reduce-motion&lt;/code&gt; media query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* let the caret be fixed instead of blinking */&lt;/span&gt;
  &lt;span class="nc"&gt;.typewriter&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c"&gt;/* replace the letter popup for a shorter animation */&lt;/span&gt;
  &lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;sequencePopup&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"developer"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;25&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"writer"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"reader"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;75&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"human"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.sequencePopup&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"developer"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We didn't fully remove the animation; we only replaced it with another that is more accessibility-friendly. Not all animations are bad, and "reduced motion" doesn't mean "no motion."&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>TensorFlow and PyTorch on Graviton2 using Anaconda</title>
      <author>Jason Andrews</author>
      <pubDate>Fri, 27 Aug 2021 21:17:57 +0000</pubDate>
      <link>https://dev.to/aws-builders/tensorflow-and-pytorch-on-graviton2-using-anaconda-5hd5</link>
      <guid>https://dev.to/aws-builders/tensorflow-and-pytorch-on-graviton2-using-anaconda-5hd5</guid>
      <description>&lt;p&gt;&lt;a href="https://www.anaconda.com"&gt;Anaconda&lt;/a&gt; advertises 25 million users worldwide and offers an easy way to perform machine learning on a single machine.&lt;/p&gt;

&lt;p&gt;Until recently, it has been difficult to install TensorFlow and PyTorch on Arm machines, including Graviton. There are numerous articles outlining difficult installation methods, most of which involve building source code. As the Arm software ecosystem continues to improve, more and more software just works on Arm. One of the latest improvements is Anaconda.&lt;/p&gt;

&lt;p&gt;Today, let’s see how to get started with two popular machine learning frameworks, &lt;a href="https://www.tensorflow.org/"&gt;TensorFlow&lt;/a&gt; and &lt;a href="https://pytorch.org/"&gt;PyTorch&lt;/a&gt;, on &lt;a href="https://aws.amazon.com/ec2/graviton/"&gt;Graviton&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup-a-graviton2-ec2-instance"&gt;
  &lt;/a&gt;
  Setup a Graviton2 EC2 instance
&lt;/h2&gt;

&lt;p&gt;First, create a new EC2 instance. The instance can be any of the instance types powered by Graviton processors including A1, T4g, M6g, C6g, or R6g. There are numerous &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html"&gt;AWS tutorials&lt;/a&gt; about how to create an AWS account and use the AWS Console to configure and launch a new EC2 instance. Make sure to substitute one of the above instance types in any tutorial you use.&lt;/p&gt;

&lt;p&gt;The t4g.micro instances are free (up to 750 hours per month) until December 31, 2021. With 2 vCPUs and 1 GiB memory, the t4g.micro won't provide enough performance for machine learning projects, but does work to try out the steps in this article.&lt;/p&gt;

&lt;p&gt;For this example, I created a t4g.medium running Ubuntu 20.04 with a public IP address and accessible from my desktop via ssh. &lt;/p&gt;

&lt;p&gt;Find the public IP address of the EC2 instance in the AWS console and connect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh -i mykey.pem ubuntu@&amp;lt;ec2-ip-address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once connected, update the software, install Anaconda, and source the bash environment.&lt;/p&gt;

&lt;p&gt;The Anaconda install script will review the license agreement and ask to accept the terms. Then accept the default installation directory of $HOME/anconda3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sudo apt update ; sudo apt upgrade -y 
$ wget https://repo.anaconda.com/archive/Anaconda3-2021.05-Linux-aarch64.sh
$ sh ./Anaconda3-2021.05-Linux-aarch64.sh
$ . ~/.bashrc

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The default conda environment is named base and this will be shown in the shell prompt.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(base) ubuntu@ip-10-0-0-251:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-tensorflow"&gt;
  &lt;/a&gt;
  Install TensorFlow
&lt;/h2&gt;

&lt;p&gt;Create a new conda environment named tf, install TensorFlow, and activate the new environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ conda create -n tf tensorflow
$ conda activate tf
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The shell prompt will now show the tf environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(tf) ubuntu@ip-10-0-0-251:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run a simple check to make sure TensorFlow is working.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python
Python 3.9.6 (default, Aug 19 2021, 13:29:06)
[GCC 10.2.0] :: Anaconda, Inc. on linux
Type "help", "copyright", "credits" or "license" for more information.
&amp;gt;&amp;gt;&amp;gt; import tensorflow as tf
&amp;gt;&amp;gt;&amp;gt; print(tf.__version__)
2.5.0
&amp;gt;&amp;gt;&amp;gt; print(tf.reduce_sum(tf.random.normal([1000,1000])))
2021-08-27 17:21:47.972262: I tensorflow/core/common_runtime/process_util.cc:146] Creating new thread pool with default inter op setting: 2. Tune using inter_op_parallelism_threads for best performance.
tf.Tensor(-955.8242, shape=(), dtype=float32)
&amp;gt;&amp;gt;&amp;gt; exit()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Exit the tf environment and move on to install PyTorch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ conda deactivate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#install-pytorch"&gt;
  &lt;/a&gt;
  Install PyTorch
&lt;/h2&gt;

&lt;p&gt;Create a new conda environment named torch, install PyTorch, and activate the new environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ conda create -n torch pytorch
$ conda activate torch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The shell prompt will now show the tf environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(torch) ubuntu@ip-10-0-0-251:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run a simple check to make sure TensorFlow is working.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python
Python 3.9.6 (default, Aug 19 2021, 13:29:06)
[GCC 10.2.0] :: Anaconda, Inc. on linux
Type "help", "copyright", "credits" or "license" for more information.
&amp;gt;&amp;gt;&amp;gt; import torch
&amp;gt;&amp;gt;&amp;gt; x = torch.rand(5,3)
&amp;gt;&amp;gt;&amp;gt; print(x)
tensor([[1.1011e-01, 8.9852e-02, 2.9613e-01],
        [5.8129e-01, 3.6840e-01, 4.8840e-04],
        [2.8552e-01, 9.0869e-02, 3.5286e-01],
        [5.6122e-01, 9.2791e-01, 9.2109e-01],
        [7.4704e-01, 7.4170e-01, 8.9604e-01]])
&amp;gt;&amp;gt;&amp;gt; exit()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Try the &lt;a href="http://yann.lecun.com/exdb/mnist/"&gt;MNIST&lt;/a&gt; example from &lt;a href="https://github.com/pytorch/examples"&gt;PyTorch&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/pytorch/examples.git
$ pip install -r requirements.txt
$ cd examples
$ python main.py --epochs 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are many machine learning articles and examples using MNIST and now they can be done on Graviton2.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapup"&gt;
  &lt;/a&gt;
  Wrap-up
&lt;/h2&gt;

&lt;p&gt;I have spent many hours building machine learning frameworks from source for the Arm architecture. Although it’s challenging and satisfying to succeed, I can really appreciate how easy Anaconda makes getting started with TensorFlow and PyTorch on Graviton. Previously, the setup time was significant. With Anaconda, the setup time is short and there is more time available to create machine learning applications.&lt;/p&gt;

&lt;p&gt;It's great to see an Anaconda installer just for Graviton2 on the bottom of the &lt;a href="https://www.anaconda.com/products/individual"&gt;installation page&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3qkiMiTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c33x2z1bs4i4nfwnvms1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3qkiMiTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c33x2z1bs4i4nfwnvms1.png" alt="Anaconda installers"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Introducing Hoppscotch 2.0!! A fresh new perspective.</title>
      <author>Andrew Bastin</author>
      <pubDate>Fri, 27 Aug 2021 21:08:17 +0000</pubDate>
      <link>https://dev.to/hoppscotch/introducing-hoppscotch-2-0-a-fresh-new-perspective-1j44</link>
      <guid>https://dev.to/hoppscotch/introducing-hoppscotch-2-0-a-fresh-new-perspective-1j44</guid>
      <description>&lt;p&gt;This week marks the 2nd anniversary of the Hoppscotch project. The &lt;a href="https://github.com/hoppscotch/hoppscotch/commit/91c08a5e6305cc95a0df46a33fdd0013bf7339b4"&gt;initial commit&lt;/a&gt; to the project was made two years ago on August 21. Since, then, we have garnered: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;21,000 monthly users&lt;/li&gt;
&lt;li&gt;450,000+ all-time users&lt;/li&gt;
&lt;li&gt;140 contributors&lt;/li&gt;
&lt;li&gt;30,000+ GitHub stars&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These metrics are crazy and we want to thank all our users, our supporters, and our open source friends and contributors for helping us reach these numbers. Due to these huge numbers, we have realized we have large shoes to fill now. There is a much bigger expectation of what Hoppscotch is and should be. This marked a requirement for the project to be refactored so that every component of it can grow effectively with the expanded scope and today we are announcing our initial efforts towards this huge goal.&lt;/p&gt;

&lt;p&gt;The Hoppscotch app over the span of 2 years had to grow from a simple app to a multi-faceted feature-heavy app. We have had many contributors come and go over the years and the codebase over this span didn't feature a fixed standard for how things are supposed to be done. This has lead to many inconsistent behaviors across the app and a really messy internal architecture. Hence, over the past few months, we devoted ourselves to working solely on building an infrastructure that could stand and support rapid growth. We accomplished this by splitting the codebase into properly segregated parts that communicate over well-defined interfaces and by following fixed proper code standards throughout the codebase. This effort is still a work in progress, but the base foundation for this effort is done. Hence, we are happy to introduce Hoppscotch 2.0, a release to mark the shift in perspective of what Hoppscotch is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uef0ckfz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s5cdaknsk6e8oxaxrsm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uef0ckfz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8s5cdaknsk6e8oxaxrsm.png" alt="screely-1630087497099"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, let's talk about the new design, we wanted to capture a UI that can evolve over time and yet feel familiar. We wanted it to be utilitarian and streamlined. A common complaint we received was all the excessive scrolling required to navigate the old interface and the negative space around the UI elements. Everything is cut short and made to the point with no scroll required to move around the app anymore. It's not just a new coat of paint, it also brought along with a bunch of extra features. One notable addition is the highlighting applied to environment variable references throughout the app, it's subtle, but it exposes important information like its validity (it turns red if the variable is invalid) and the current value. The streamlined internal architecture also brings the possibility for more seamless experiences. For example, Hoppscotch can now remember your session across devices (if you are logged in) and it can automatically save requests you have opened in your sessions. There are many more features in the works, which we can't wait to share with you later.&lt;/p&gt;

&lt;p&gt;We had launched Hoppscotch for Teams last June as a &lt;a href="https://twitter.com/liyasthomas/status/1402123004843155461"&gt;closed invite-only beta&lt;/a&gt;. Since then, we have received more than 400 invites. We have received feedback from about 30 companies and teams across the globe who has test-driven the feature and have reported their support and cited the ease of use and the low barrier of entry as the key positives. Teams will continue in a closed invite-only beta state for a month more, but we are hoping to start with the public beta by the end of September. If you and your team are interested to try out Teams, you can request an invite over at &lt;a href="https://hoppscotch.io/beta"&gt;https://hoppscotch.io/beta&lt;/a&gt;. We will be revealing more info about Teams and it's roadmap to general availability in the coming days, so stay tuned and follow us on our social channels to get the latest info!  &lt;/p&gt;

&lt;p&gt;With the 2.0 release, we want to mark a change in perspective of what Hoppscotch should be as a project. We are setting our sights on building a collaborative platform, open and inviting from end to end where developers (and non-developers), whether as individuals or as teams can work with and collaborate on APIs. I believe as of right now, we have a solid base in API testing, we have rich support for REST, GraphQL, and many Real-time protocols and we actively see contributions from the OSS community regarding the improvements that can be made to all of these facets. Hence, we are planning to shift to our next plan which is &lt;em&gt;API Collaboration&lt;/em&gt;. With API Collaboration, we want to focus on developing features that help our users share, collaborate, and document APIs from within the Hoppscotch ecosystem itself. Hoppscotch for Teams is one of the core elements to this strategy, but we have more features in our pipeline we are working on which will be announced in the coming months. Another thing we are working towards in gradual but firm steps is providing a fully managed self-hostable version of Hoppscotch for the enterprises and teams which require it. Stay tuned to our social channels for this as Liyas will be announcing the plans of the project regarding the same later this week!&lt;/p&gt;

&lt;p&gt;Hoppscotch has been mostly a two-person team that until just recently worked on the project part-time. We had received a lot of help and useful contributions to the app from our amazing open source contributors and we are forever thankful to them and continue to look forward to the support of the team. But, that being said, the project has started to become too relevant and massive in scope for just two guys to tackle by themselves. Hence, we have decided it is time to start hiring! If you are interested in building with us the future of how we as developers work with APIs, please head on over to &lt;a href="https://forms.gle/2xM9x9NyYzirQ9ki8?_imcp=1"&gt;https://forms.gle/2xM9x9NyYzirQ9ki8?_imcp=1&lt;/a&gt; and have a look at our open positions. We can't wait to have you on our team!&lt;/p&gt;

&lt;p&gt;If you like what you saw, what are you waiting for! Head on over to &lt;a href="https://hoppscotch.io"&gt;https://hoppscotch.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Password Generator With Bootstrap 5 And Javascript.</title>
      <author>prosperyong</author>
      <pubDate>Fri, 27 Aug 2021 21:01:56 +0000</pubDate>
      <link>https://dev.to/yongdev/password-generator-with-bootstrap-5-and-javascript-3n70</link>
      <guid>https://dev.to/yongdev/password-generator-with-bootstrap-5-and-javascript-3n70</guid>
      <description>&lt;p&gt;Dear friends and family: I hope you're doing well. Using Bootstrap and Javascript, I'll show you how to construct your own password generator with a copy button. To create safe passwords for DBMS(Database Management System) and other highly sensitive web applications, a password generator may be essential I included a copy button so you may copy the password and store it somewhere. If you use Google Chrome or other compatible browsers, they will urge you to save the created passwords.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites.
&lt;/h2&gt;

&lt;p&gt;You should be familiar with Javascript.&lt;br&gt;
Knowledge of HTML and CSS. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#youll-learn-how-to"&gt;
  &lt;/a&gt;
  You'll learn How to.
&lt;/h2&gt;

&lt;p&gt;Create a Password Generator&lt;br&gt;
Copy button.&lt;/p&gt;

&lt;p&gt;##Setup &amp;amp; Structure of Files.&lt;br&gt;
To begin, make a folder called Generator and arrange it as follows:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#file-structure"&gt;
  &lt;/a&gt;
  File Structure
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Generator:
├── assets
│   ├── css
│   │   ├── style.css
│   └──js
│      ├── passgen.js
│    
|
└── index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#1-setting-the-javascript-magic-smile"&gt;
  &lt;/a&gt;
  1. Setting The Javascript Magic 😄
&lt;/h3&gt;

&lt;p&gt;Open the already created &lt;code&gt;passgen.html&lt;/code&gt; file and paste the following code into it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function genPass() {
    // define result variable 
    var Password = "";
    // define allowed characters
    var characters = "0123456789@#$%!-&amp;amp;*ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

    // define length of password character
    var long = "30";
    for (var i = 0; i &amp;lt; long; i++) {
        // generate password
        gen = characters.charAt(Math.floor(Math.random() * characters.length));
        Password += gen;
    }
    // send the output to the input
    document.getElementById('pass').value = Password;
}
// Copy password button
function copy() {
    // get password from input text field
    var copyText = document.getElementById("pass");
    // Set selection range to copy longer text on mobile devices
    copyText.setSelectionRange(0, 9999);
    //Copy the text from the text field 
    navigator.clipboard.writeText(copyText.value);
    // Get the toast container
    var x = document.getElementById("toast")
    // Add the "show" class to the container
    x.className = "show";
    //Show toast for 3sec
    setTimeout(function() { x.className = x.className.replace("show", ""); }, 3000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The first thing we need to do is construct a function. You may call it whatever you want, but I went with genpass ().
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function genPass() {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In order to save the loop's output, we establish a variable named password.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function genPass() {
// define result variable 
    var Password = "";
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Next, we define the characters that can be used in the password string.You can even add new characters to the existing password string if you like.Before the alphabets, numbers and special characters were introduced to create a variable that was dominated by these characters.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function genPass() {
// define result variable 
    var Password = "";
     // define allowed characters
    var characters = "0123456789@#$%!-&amp;amp;*ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";   
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Then we define the length of our password.The string long was chosen for a reason that will be explained later.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function genPass() {
// define result variable 
    var Password = "";
     // define allowed characters
    var characters = "0123456789@#$%!-&amp;amp;*ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    // define length of password character
    var long = "30";
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The password is then generated using a for loop.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (var i = 0; i &amp;lt; long; i++) {
        // generate password
        gen = characters.charAt(Math.floor(Math.random() * characters.length));
        Password += gen;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A counter is created and set to zero before any loop execution begins. To construct counters, this phrase &lt;code&gt;i&lt;/code&gt; is often used. The scope of variables generated here is the loop. They are deleted once the loop has ended.&lt;code&gt;for (var i = 0;)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every iteration is preceded by a check for the condition.The condition is set to check if the counter is less than the specified length.This expression evaluates to true if it is omitted. The loop's statement is executed if it evaluates to true. The loop ends if it evaluates to false.&lt;code&gt;for (i &amp;lt; long;)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After each iteration, the final expression &lt;code&gt;for (i++)&lt;/code&gt; is executed. If the condition is true, it increases the length of the long variable by the amount specified by the condition.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (var i = 0; i &amp;lt; long; i++) {
        // generate password
        gen = characters.charAt(Math.floor(Math.random() * characters.length));
        Password += gen;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the math.random() function, you would generate random passwords. Numbers are rounded to the closest integer using Math.floor. The &lt;code&gt;characters.length&lt;/code&gt; counts how many characters are in the character variable and creates a random string from that amount.&lt;/p&gt;

&lt;p&gt;Let's finish off by putting the produced string in the input box. Using the tag's id, we transmit the value.&lt;br&gt;
&lt;code&gt;document.getElementById('pass').value = Password;&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#creating-the-copy-function"&gt;
  &lt;/a&gt;
  Creating the copy function
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first thing we need to do is construct a function. You may call it whatever you want, but I went with copy().&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In order to get the text to copy , we selected the element by its id.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next we called the selection range variable to copy a very long variable up to 9999.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then we called the function to copy the text to clipboard.&lt;br&gt;
*Last but not least, we created a function to display a toast to indicate that the password was successfully copied.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
function copy() {
}
 // Copy password button
function copy() {
    // get password from input text field
    var copyText = document.getElementById("pass");
    // Set selection range to copy longer text on mobile devices
    copyText.setSelectionRange(0, 9999);
    //Copy the text from the text field 
    navigator.clipboard.writeText(copyText.value);
    // Get the toast container
    var x = document.getElementById("toast")
    // Add the "show" class to the container
    x.className = "show";
    //Show toast for 3sec
    setTimeout(function() { x.className = x.className.replace("show", ""); }, 3000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#2-setting-html"&gt;
  &lt;/a&gt;
  2. Setting HTML
&lt;/h3&gt;

&lt;p&gt;Open the already created &lt;code&gt;index.html&lt;/code&gt; file and paste the following code into it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no"&amp;gt;
    &amp;lt;title&amp;gt;Password Generator&amp;lt;/title&amp;gt;
    &amp;lt;link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"&amp;gt;
    &amp;lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" integrity="sha512-1ycn6IcaQQ40/MKBW2W4Rhis/DbILU74C1vSrLJxCq57o941Ym01SwNsOMqvEBFlcgUa6xLiPY/NS5R+E6ztJQ==" crossorigin="anonymous" referrerpolicy="no-referrer"/&amp;gt;
    &amp;lt;link rel="stylesheet" href="assets/css/style.css"&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;section class="login-clean"&amp;gt;
        &amp;lt;form method="post"&amp;gt;
            &amp;lt;h1&amp;gt;&amp;lt;strong&amp;gt;Password Generator&amp;lt;/strong&amp;gt;&amp;lt;/h1&amp;gt;
            &amp;lt;div class="mt-5 mb-5"&amp;gt;&amp;lt;/div&amp;gt;
            &amp;lt;div class="mb-3"&amp;gt;
                &amp;lt;input class="form-control" type="text" id="pass" placeholder="Click the Generate Password Button"&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="mb-3 "&amp;gt;
                &amp;lt;button class="btn btn-primary re w-100 " type="button" onclick="copy()"&amp;gt;
                    &amp;lt;i class="fa fa-copy "&amp;gt;&amp;lt;/i&amp;gt;&amp;amp;nbsp; Copy&amp;lt;/button&amp;gt;
                &amp;lt;button class="btn btn-primary d-block w-100 " type="button" style="background: var(--bs-indigo); " onclick="genPass();"&amp;gt;Generate Password&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/form&amp;gt;
        &amp;lt;div id="toast"&amp;gt;Password Copied !&amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;
    &amp;lt;script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src="assets/js/passgen.js "&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-css"&gt;
  &lt;/a&gt;
  Setting Css
&lt;/h3&gt;

&lt;p&gt;Open the already created &lt;code&gt;style.css&lt;/code&gt; file and paste the following code into it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; .login-clean {
        background: #f1f7fc;
        padding: 80px 0;
    }

    .login-clean form {
        max-width: 520px;
        width: 90%;
        margin: 0 auto;
        background-color: #ffffff;
        padding: 40px;
        border-radius: 4px;
        color: #505e6c;
        box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.1);
    }

    .login-clean form .form-control {
        background: #f7f9fc;
        border: none;
        border-bottom: 1px solid #dfe7f1;
        border-radius: 0;
        box-shadow: none;
        outline: none;
        color: inherit;
        text-indent: 1px;
        height: 42px;
    }

    .login-clean form .btn-primary {
        background: #f4476b;
        border: none;
        border-radius: 4px;
        padding: 11px;
        box-shadow: none;
        margin-top: 26px;
        text-shadow: none;
        outline: none !important;
    }

    .login-clean form .btn-primary:hover,
    .login-clean form .btn-primary:active {
        background: #eb3b60;
    }

    .login-clean form .btn-primary:active {
        transform: translateY(1px);
    }

    #toast {
        visibility: hidden;
        background: #333333;
        border-radius: 2px;
        position: fixed;
        color: #fff;
        text-align: center;
        left: 50%;
        min-width: 250px;
        margin-left: -140px;
        bottom: 50px;
        padding: 16px;
        padding-left: 32px;
    }

    #toast.show {
        visibility: visible;
        -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
        animation: fadein 0.5s, fadeout 0.5s 2.5s;
    }

    @-webkit-keyframes fadein {
        from {
            bottom: 0;
            opacity: 0;
        }
        to {
            bottom: 50px;
            opacity: 1;
        }
    }

    @keyframes fadein {
        from {
            bottom: 0;
            opacity: 0;
        }
        to {
            bottom: 50px;
            opacity: 1;
        }
    }

    @-webkit-keyframes fadeout {
        from {
            bottom: 50px;
            opacity: 1;
        }
        to {
            bottom: 0;
            opacity: 0;
        }
    }

    @keyframes fadeout {
        from {
            bottom: 50px;
            opacity: 1;
        }
        to {
            bottom: 0;
            opacity: 0;
        }
    }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what you get when you run the codes above.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z4j1kYaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsgaa55ikmdw3owa6d7o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z4j1kYaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsgaa55ikmdw3owa6d7o.png" alt="Password Generator"&gt;&lt;/a&gt;&lt;br&gt;
And when you click the copy button you get.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UlTuRZNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qj4r430pa1dvzodbyapl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UlTuRZNQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qj4r430pa1dvzodbyapl.png" alt="Password copied"&gt;&lt;/a&gt;&lt;br&gt;
You can find the code &lt;a href="https://github.com/prosperyong/Password-Generator-with-Bootstrap5-and-js"&gt;here&lt;/a&gt;and you can leave a star.You are allowed to copy the source code and use it in your own projects. Please like and comment below. Don't forget to follow us and share the post; doing so will motivate us to develop more lessons in the future.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>security</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>How to quickly start a webpack project</title>
      <author>Marcin Wosinek</author>
      <pubDate>Fri, 27 Aug 2021 20:24:00 +0000</pubDate>
      <link>https://dev.to/marcinwosinek/how-to-quickly-start-a-webpack-project-381i</link>
      <guid>https://dev.to/marcinwosinek/how-to-quickly-start-a-webpack-project-381i</guid>
      <description>&lt;p&gt;In this article, I'll show a simple way to start a webpack project with &lt;a href="https://www.npmjs.com/package/degit"&gt;degit&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#degit"&gt;
  &lt;/a&gt;
  degit
&lt;/h1&gt;

&lt;p&gt;degit is a tool that lets you take another repository from GitHub and use it to scaffold your project. You can see it being used in serious projects such as &lt;a href="https://how-to.dev/how-to-start-a-project-with-solidjs"&gt;SolidJS&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#webpackstarter"&gt;
  &lt;/a&gt;
  webpack-starter
&lt;/h1&gt;

&lt;p&gt;Since I started working on this blog, I created more than 10 repositories with simple applications build with webpack. As I try keeping the code rather minimalistic, in most cases, all the projects end up almost the same. So today, I created a starter project to save me few seconds when starting new demo projects.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx degit how-to-js/webpack-starter
npx: installed 1 in 0.671s
&amp;gt; cloned how-to-js/webpack-starter#HEAD

$ npm install
npm notice created a lockfile as package-lock.json. You should commit this file.
added 121 packages from 158 contributors and audited 121 packages in 3.164s

17 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

$ npm run build                    

&amp;gt; webpack-starter@1.0.0 build /home/marcin/workspace/github/webpack-starter-demo
&amp;gt; webpack

asset main.js 22 bytes [compared for emit] [minimized] (name: main)
./src/index.js 23 bytes [built] [code generated]

WARNING in configuration
The 'mode' option has not been set, webpack will fallback to 'production' for this value.
Set 'mode' option to 'development' or 'production' to enable defaults for each environment.
You can also set it to 'none' to disable any default behavior. Learn more: https://webpack.js.org/configuration/mode/

webpack 5.51.1 compiled with 1 warning in 186 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The resulting application does nothing but says hello in the development console.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/how-to-js/webpack-starter"&gt;webpack-starter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;In this article, I have presented a simple project started for the webpack application.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webpack</category>
    </item>
    <item>
      <title>Determine the kind of Software</title>
      <author>Prakhar Yadav</author>
      <pubDate>Fri, 27 Aug 2021 20:06:06 +0000</pubDate>
      <link>https://dev.to/prakh_r/determine-the-kind-of-software-4m4k</link>
      <guid>https://dev.to/prakh_r/determine-the-kind-of-software-4m4k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#iterative-approach-effect-on-prerequisite"&gt;
  &lt;/a&gt;
  Iterative approach effect on prerequisite
&lt;/h2&gt;

&lt;p&gt;Different kinds of software projects need different balances between preparation and construction.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(scroll to the Appendix at the end to see some good practices for common kind of software practices)&lt;/em&gt; 👇 &lt;/p&gt;

&lt;p&gt;Some projects need iterative &amp;amp; some need sequential approach.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;misinformed opinion&lt;/code&gt; is that iterative techniques don't need to focus on prerequisites.&lt;br&gt;
However in reality, Iterative approaches only tend to reduce the impact of inadequate upstream work, but they don’t eliminate it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pRkdR9lk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630089987527/iPsNh7Adq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pRkdR9lk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630089987527/iPsNh7Adq.png" alt="poster showing stop misinformation slogan"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Example &lt;strong&gt;table below compares 2 approaches&lt;/strong&gt; with respect to prerequisites. Approach 1 relies solely on testing &amp;amp; discovers defects later, making the cost higher, and Approach 2 discovers defects iteratively as the project progresses.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Skipping Prerequisites&lt;/th&gt;
&lt;th&gt;Focusing on Prerequisites&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lzk66kRA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630088826811/lxW77-9ip.jpeg" alt="tabular representation of skipping prerequisite cost in both approaches"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WhO6XRSw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630088856875/HIynBJs1J.jpeg" alt="tabular representation of costs when prerequisites are focused in both approaches"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;A focus on prerequisites can reduce costs regardless of whether you use an iterative or a sequential approach.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most projects are neither completely sequential nor completely iterative. It isn’t practical to specify 100% of the requirements or design up front.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7pivhiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630090425063/eehHslclL.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7pivhiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630090425063/eehHslclL.jpeg" alt="thumb image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;One common rule of thumb&lt;/em&gt;&lt;/strong&gt; is to plan to specify about 80 percent of the requirements up front, and then practice systematic change control to accept only the most valuable new requirements. Another alternative is to specify only the most important 20 percent of the requirements up front and plan to develop the rest of the software in small increments.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-to-choose-between-iterative-and-sequential-approaches"&gt;
  &lt;/a&gt;
  How to choose between Iterative and Sequential Approaches
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--syR_SD2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630090559663/EQEDpe_G4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--syR_SD2R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630090559663/EQEDpe_G4.jpeg" alt="a thinking gorilla"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;
You might &lt;strong&gt;choose&lt;/strong&gt; a more &lt;strong&gt;sequential&lt;/strong&gt; (upfront) &lt;strong&gt;approach&lt;/strong&gt; &lt;strong&gt;when&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;requirements are fairly stable.&lt;/li&gt;
&lt;li&gt;design is straightforward and well understood.&lt;/li&gt;
&lt;li&gt;development team is familiar with the applications area.&lt;/li&gt;
&lt;li&gt;project contains little risk.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might &lt;strong&gt;choose&lt;/strong&gt; a more &lt;strong&gt;iterative&lt;/strong&gt; (as-you-go) &lt;strong&gt;approach when&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;requirements are not well understood.&lt;/li&gt;
&lt;li&gt;design is complex.&lt;/li&gt;
&lt;li&gt;development team is unfamiliar with the applications area.&lt;/li&gt;
&lt;li&gt;project contains a lot of risk.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#appendix"&gt;
  &lt;/a&gt;
  Appendix
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Table: Good practices for 3 common kinds of projects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1F3DqT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630090922688/yRXfulcNp.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y1F3DqT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630090922688/yRXfulcNp.jpeg" alt="tabular comparison of good practices"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aywsG_pV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630090930422/UtU9TwSu4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aywsG_pV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1630090930422/UtU9TwSu4.jpeg" alt="tabular comparison of more good practices"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>books</category>
      <category>softwaredevelopment</category>
      <category>computerscience</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>A New Way To Use Apple Mail For Email Sanity 🤯</title>
      <author>Louis Min</author>
      <pubDate>Fri, 27 Aug 2021 20:05:45 +0000</pubDate>
      <link>https://dev.to/louismin/a-new-way-to-use-apple-mail-for-email-sanity-92d</link>
      <guid>https://dev.to/louismin/a-new-way-to-use-apple-mail-for-email-sanity-92d</guid>
      <description>&lt;h6&gt;
  &lt;a href="#this-article-is-intended-for-apple-users%E2%80%8A%E2%80%8Aas-the-primary-email-application-that-will-be-used-is-the-apple-mail-app-in-this-article-youll-learn-about-a-workflow-i-use-to-follow-the-inbox-zero-approach-without-having-to-navigate-between-different-apps"&gt;
  &lt;/a&gt;
  &lt;em&gt;This article is intended for apple users -- as the primary email application that will be used is the Apple Mail app. In this article, you'll learn about a workflow I use to follow the Inbox Zero approach without having to navigate between different apps.&lt;/em&gt;
&lt;/h6&gt;




&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Apple Mail can be used as an "email aggregator" that works as a holistic app for you to handle all your incoming emails from Gmail, Outlook, &lt;em&gt;[insert other email service providers]&lt;/em&gt;, etc. &lt;strong&gt;In a nutshell, the "magic sauce" is a mixture of the email forwarding feature all email service providers have and the Apple ecosystem with Apple Mail&lt;/strong&gt;. The workflow requires all emails to be forwarded to your iCloud email address. After that, the only job to do is to follow an Inbox Zero approach &lt;em&gt;(keeping your inbox empty or almost empty)&lt;/em&gt; for your iCloud Inbox. Yes, it's really that simple 🤷‍♂️. In this article, I'll go into further details about why using Apple Mail and basic email forwarding can significantly improve the way you handle your emails.&lt;/p&gt;




&lt;p&gt;Before diving in, keep in mind some of these pros and cons I've experienced using this workflow:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Takes advantage of the Apple ecosystem&lt;/li&gt;
&lt;li&gt;Reduces the number of apps you need to manage your emails with&lt;/li&gt;
&lt;li&gt;Doesn't rely on a 3rd-party service (often a paid service) to aggregate your emails&lt;/li&gt;
&lt;li&gt;Keeps a "backup" of your original emails&lt;/li&gt;
&lt;li&gt;Easier to follow the Inbox Zero approach&lt;/li&gt;
&lt;li&gt;On macOS, Apple Mail automatically sets the correct email address to reply from&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Tedious initial setup -- depends on how many email accounts you need to add to your device(s) (personally, I had 8 email accounts I had to set up on 4 devices -- iPhone, iPad, Mac Pro, MacBook Pro)&lt;/li&gt;
&lt;li&gt;iCloud Mail service downtime (I haven't experienced this, but thought I should include this based on some google results talking about this issue)&lt;/li&gt;
&lt;li&gt;On iOS and iPadOS, Apple Mail doesn't automatically set the correct email address to reply from (other email apps don't as well)&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#lets-get%C2%A0started"&gt;
  &lt;/a&gt;
  Let's Get Started! &lt;br&gt;&lt;br&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-create-icloud-email-address-amp%C2%A0enable"&gt;
  &lt;/a&gt;
  1. Create iCloud Email Address &amp;amp; Enable
&lt;/h3&gt;

&lt;p&gt;If you haven't already done so, you'll need to create your iCloud email address and enable iCloud Mail in your iCloud account. If you're on macOS, you can set up your iCloud email address by going to Internet Accounts from System Preferences and enabling Mail from your iCloud account. If you're on iOS or iPadOS, enabling iCloud Mail in your iCloud account will prompt you to create an email.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92yg05uV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnnx2qpn5bsbirm17ooa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92yg05uV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pnnx2qpn5bsbirm17ooa.png" alt="On macOS, go to Systems Preferences to access Internet Accounts (left). On iOS &amp;amp; iPadOS, go to Settings then iCloud to access iCloud Mail (right)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#on-macos-go-to-systems-preferences-to-access-internet-accounts-left-on-ios-amp-ipados-go-to-settings-then-icloud-to-access-icloud-mail-right"&gt;
  &lt;/a&gt;
  &lt;em&gt;On macOS, go to Systems Preferences to access Internet Accounts (left). On iOS &amp;amp; iPadOS, go to Settings then iCloud to access iCloud Mail (right).&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#2-add-all-email-addresses-to-your-devices"&gt;
  &lt;/a&gt;
  2. Add All Email Addresses To Your Device(s)
&lt;/h3&gt;

&lt;p&gt;For each device, you'll have to add all your Gmail, Outlook, etc. email accounts. For macOS, you can do so by going to Internet Accounts (make sure these accounts are enabled by going to the Mail app preferences). For iOS and iPadOS, navigate to Apple Mail under settings and tap Accounts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dzArHlGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe2yvkarp7tmqvd422r5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dzArHlGy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xe2yvkarp7tmqvd422r5.png" alt='On macOS Apple Mail, navigate to accounts and make sure "enable this account" checkbox is selected for all email addresses.'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#on-macos-apple-mail-navigate-to-accounts-and-make-sure-enable-this-account-checkbox-is-selected-for-all-email-addresses"&gt;
  &lt;/a&gt;
  &lt;em&gt;On macOS Apple Mail, navigate to accounts and make sure "enable this account" checkbox is selected for all email addresses.&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;/h6&gt;

&lt;h3&gt;
  &lt;a href="#3-forward-all-email-addresses-to-icloud%C2%A0email"&gt;
  &lt;/a&gt;
  3. Forward All Email Addresses To iCloud Email
&lt;/h3&gt;

&lt;p&gt;With your iCloud email address created and email accounts added to your device(s), it's time to start forwarding all your other email address to iCloud. For brevity, I've only included images of the steps to take for Gmail. The steps should be similar for other email service providers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s2ZRDHAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zhdir4dqc2kp6njxfla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s2ZRDHAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zhdir4dqc2kp6njxfla.png" alt='Click the gear icon to access all settings (left). From the Settings page, navigate to "Forwarding and POP/IMAP" to add a forwarding email address (right)'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#click-the-gear-icon-to-access-all-settings-left-from-the-settings-page-navigate-to-forwarding-and-popimap-to-add-a-forwarding-email-address-right"&gt;
  &lt;/a&gt;
  &lt;em&gt;Click the gear icon to access all settings (left). From the Settings page, navigate to "Forwarding and POP/IMAP" to add a forwarding email address (right).&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;/h6&gt;

&lt;p&gt;Once you've added a forwarding email address, click Forward a copy of incoming mail to and select the iCloud email address. After doing so, you'll have the option to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep Gmail's copy in the Inbox&lt;/li&gt;
&lt;li&gt;Mark Gmail's copy as read&lt;/li&gt;
&lt;li&gt;Archive Gmail's copy&lt;/li&gt;
&lt;li&gt;Delete Gmail's copy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to keep a "backup" of your emails, don't select Delete Gmail's copy. This is just personal preference. Any other option, when enabled, will keep the original email even if you delete the forwarded email from your iCloud Inbox.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-organize-apple%C2%A0mail"&gt;
  &lt;/a&gt;
  4. Organize Apple Mail
&lt;/h3&gt;

&lt;p&gt;After forwarding all your emails, it's time to start organizing Apple Mail to your liking. The placement and settings for each inbox in Apple Mail is device-dependent, so you'll have to repeat this process for each device. For reference, I've included an image below of my sidebar configuration:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--04ocRBZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7z9mu6t0imk35i8o8r8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--04ocRBZD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7z9mu6t0imk35i8o8r8q.png" alt="My macOS Apple Mail sidebar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#my-macos-apple-mail-sidebar"&gt;
  &lt;/a&gt;
  &lt;em&gt;My macOS Apple Mail sidebar&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;/h6&gt;

&lt;p&gt;For this workflow, the main objective is to reach Inbox Zero from your iCloud Inbox. So, I moved the iCloud email account towards the top and minimized all other email accounts. It's important to note that for consistency, all email actions from replying to deleting should be done only in the iCloud Inbox.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-delete-old-email-apps%C2%A0"&gt;
  &lt;/a&gt;
  5. Delete Old Email Apps 🎉
&lt;/h3&gt;

&lt;p&gt;Finally! It's time to delete your old email apps and be on your way to reaching Inbox Zero!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#faqs"&gt;
  &lt;/a&gt;
  FAQs
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#why-forward-emails-to-an-icloud-email-instead-of-just-adding-email-accounts-to-apple%C2%A0mail"&gt;
  &lt;/a&gt;
  Why forward emails to an iCloud email instead of just adding email accounts to Apple Mail?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the major issues of using email services providers with Apple Mail, specifically for iOS and iPadOS, is how data is received (i.e. how you get a new email notification). Because push notification is no longer supported, the only methods available are fetch and manual. This means that notifications won't show up in real-time. You can set the data to be fetched manually at a 15 minute interval but this would lead to battery drain and more data usage. The benefits of push are real-time notifications, less battery drain, and less data usage. So, you need an iCloud email for Apple Mail to have push notifications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#why-not-use-the-gmailoutlook-app-to-manage-multiple%C2%A0emails"&gt;
  &lt;/a&gt;
  Why not use the Gmail/Outlook app to manage multiple emails?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;You can! But there's one caveat for Gmail -- no Gmail app on the Mac App Store. This means that for macOS, you'll have to stick to juggling between different windows and tabs to access all your Gmail accounts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#does-this-workflow-trap-you-in-the-apple-ecosystem"&gt;
  &lt;/a&gt;
  Does this workflow trap you in the Apple ecosystem?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;No. Rather than replacing your email accounts to a single iCloud email address, this email workflow describes a method of "email aggregation" to easily follow the Inbox Zero approach. Also, when you're on a non-Apple device, you can always manage your iCloud email from &lt;a href="https://icloud.com"&gt;Apple's iCloud home page&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-bonus-tip-custom-email-signatures"&gt;
  &lt;/a&gt;
  ⭐️ Bonus Tip: Custom Email Signatures
&lt;/h2&gt;

&lt;p&gt;A cool feature of Apple Mail on macOS is Apple Mail's ability to automatically set the correct email address to respond from (this also means a custom signature you set for your email address will be used!). To set your custom signatures on iOS and iPadOS, head over to Apple Mail under settings and select Signatures. After doing so, select Per Account -- if you have different signatures for different email addresses. For macOS, go to Apple Mail's preferences page and select the Signatures tab. If you're using a styled signature, make sure to uncheck Always match my default message font before pasting your signature to retain your custom layout and font styles.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SW7EFhvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f22v6kf9mg849clrsy9a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SW7EFhvc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f22v6kf9mg849clrsy9a.png" alt='On macOS, go to Signatures tab under Apple Mail preferences (left). On iOS &amp;amp; iPadOS, go to Apple Mail under settings and tap "Per Account" for email-specific signatures (right).'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#on-macos-go-to-signatures-tab-under-apple-mail-preferences-left-on-ios-amp-ipados-go-to-apple-mail-under-settings-and-tap-per-account-for-emailspecific-signatures-right"&gt;
  &lt;/a&gt;
  &lt;em&gt;On macOS, go to Signatures tab under Apple Mail preferences (left). On iOS &amp;amp; iPadOS, go to Apple Mail under settings and tap "Per Account" for email-specific signatures (right).&lt;/em&gt;&lt;br&gt;&lt;br&gt;
&lt;/h6&gt;




&lt;h2&gt;
  &lt;a href="#authors-note"&gt;
  &lt;/a&gt;
  Author's Note
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Thank you for taking the time to read about an email workflow that I've been using to manage my personal and work email addresses. Personally, I've disciplined myself to keep my iCloud Inbox empty by the end of the day. In doing so, this has made a huge impact on my overall productivity. I'm excited to share my email workflow and I would love to hear about your email workflow in the Discussion below!&lt;/p&gt;

&lt;p&gt;-Be Positive. Stay Productive.-&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>productivity</category>
      <category>tutorial</category>
      <category>ios</category>
      <category>ipad</category>
    </item>
  </channel>
</rss>
