<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Production Ready React</title>
      <author>Joel Warrington</author>
      <pubDate>Tue, 18 Jan 2022 15:54:13 +0000</pubDate>
      <link>https://dev.to/jobber/production-ready-react-14hg</link>
      <guid>https://dev.to/jobber/production-ready-react-14hg</guid>
      <description>&lt;p&gt;&lt;strong&gt;A pragmatic guide to maintainable React components powered by GraphQL.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Writing performant, testable, and readable React can be thought of as an art, but instead, I hope to convince you that it can instead be achieved with a simple toolkit üîß , a few recipes üßæ , and some examples üß™ .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-with-graphql"&gt;
  &lt;/a&gt;
  Starting with GraphQL
&lt;/h2&gt;

&lt;p&gt;One common approach and pitfall is to start implementation from the front-end and work backward towards your GraphQL API. In my experience, this can lead towards less-than-ideal schema design, negatively impacting the GraphQL experience for any other consumer of your API, where types end up as sacks of data void of any meaning and without purpose.&lt;/p&gt;

&lt;p&gt;Things to consider include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How will other frontend views get this data?&lt;/li&gt;
&lt;li&gt;How will nullability be applied?&lt;/li&gt;
&lt;li&gt;Will the data make sense to other developers?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting with GraphQL will not only be better for your schema, but it will also be better and crucial for you and your team when building maintainable front-end systems. To start building your GraphQL API and building a truly resilient schema, you should almost certainly consult &lt;a href="https://book.productionreadygraphql.com"&gt;Production Ready GraphQL&lt;/a&gt;, and a worthy companion tutorial; &lt;a href="https://github.com/Shopify/graphql-design-tutorial/blob/master/TUTORIAL.md"&gt;Designing a GraphQL API&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-the-jump"&gt;
  &lt;/a&gt;
  Making the jump
&lt;/h2&gt;

&lt;p&gt;Now that we've got a production-ready GraphQL schema, how do we implement its consuming counterpart? Let's start with the most fundamental components in our larger application and explore some of the first tools in your toolbox üîß ; component composition and GraphQL fragments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fragments let you construct sets of fields, and then include them in queries where you need to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fragments can be used to achieve one concept commonly used in React; collocation, where you're able to contain all of the data needed from a component alongside your logic, styling, and rendering.&lt;/p&gt;

&lt;p&gt;In practice, you're able to create a component that doesn't need to query its data but instead provides an interface to how it should receive its data when used in other components (hence, component composition).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example üß™&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;A small component that receives all of its data from props and defines how it expects to receive data using a GraphQL fragment.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#is-this-thing-on"&gt;
  &lt;/a&gt;
  Is this thing on?
&lt;/h2&gt;

&lt;p&gt;To build maintainable and shippable React, you'll want to test functionality in isolation in a way that makes it very clear when things break so that you and your team will be confident with every release.&lt;/p&gt;

&lt;p&gt;Testing React components isn't as hard as it's made to be, especially with modern-day tools such as &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;React Testing Library&lt;/a&gt;, and &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;, which take out all the guesswork of rendering and interacting with a component. Jest will act as the test runner and provide the overall structure of your unit tests, while React Testing Library will provide the methods needed to accurately assert functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#user-functionality"&gt;
  &lt;/a&gt;
  User functionality
&lt;/h3&gt;

&lt;p&gt;Getting started with &lt;a href="https://testing-library.com/docs/react-testing-library/intro/"&gt;React Testing Library&lt;/a&gt; is quick and no different than writing unit tests for functions and classes. Every test case should start by rendering a component with the render method and destructuring the return to get access to the rendered result, and document queries such as getByText, getByLabel (see the &lt;a href="https://testing-library.com/docs/react-testing-library/cheatsheet/#queries"&gt;query cheat sheet&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example üß™&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;An example test file using React Testing Library and our previously defined &lt;code&gt;Message&lt;/code&gt; component. Showing how one could test user functionality with predictable results.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#cloudy-with-a-chance-of-bugs"&gt;
  &lt;/a&gt;
  Cloudy with a chance of bugs ‚õÖüêúüêõ
&lt;/h3&gt;

&lt;p&gt;Jest uses a package called &lt;a href="https://istanbul.js.org/"&gt;Istanbul&lt;/a&gt; to provide test coverage metrics such as statement, branch, function, and line coverage so that you can understand and enforce the quality of your test suite, providing more confidence in releases.&lt;/p&gt;

&lt;p&gt;It's highly recommended you set coverage thresholds that make you comfortable and don't burden you with covering every test case and flow, and subsequently integrate coverage tests into your CI/CD pipeline and block failing builds.&lt;/p&gt;

&lt;p&gt;To get started and collect test coverage, you can run the following command (or add the --coverage argument to your existing node test script):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx jest &lt;span class="nt"&gt;--coverage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Some things to keep in mind when trying to achieve high coverage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;test units should interact with your component using every variation&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;if&lt;/strong&gt; and &lt;strong&gt;early return&lt;/strong&gt; statements need to be considered and both or multiple paths need to be tested&lt;/li&gt;
&lt;li&gt;optional chaining (&lt;strong&gt;?.&lt;/strong&gt;) gets increasingly harder to test the longer the chain and GraphQL type nullability should be a factor to consider when building your component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At Jobber, our test coverage targets sit around 85%!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#putting-the-pieces-together"&gt;
  &lt;/a&gt;
  Putting the pieces together üß©
&lt;/h2&gt;

&lt;p&gt;Now that we've defined our component and how it will get its data, how can we use it at scale and alongside other components? Let's take a look at the loader concept and how to bubble up your fragment!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example üß™&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Multiple components showing how one can reuse and build larger components made up of smaller components that implement fragment collocation and data fetching (using a loader component). Using the previously defined &lt;code&gt;Message&lt;/code&gt; component.&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;




&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Using the &lt;code&gt;loader&lt;/code&gt; pattern, we can easily implement and test our &lt;code&gt;Conversation&lt;/code&gt; component and handle query transformation in our loader component. In addition, we don't need to mock as much using &lt;code&gt;MockedProvider&lt;/code&gt; from Apollo (&lt;a href="https://www.apollographql.com/docs/react/development-testing/testing/"&gt;see testing react components using Apollo&lt;/a&gt;). In addition, queries or fragments will be much easier to add when using a tool such as &lt;a href="https://www.graphql-code-generator.com/"&gt;GraphQL Code Generator&lt;/a&gt; our Typescript types become very easy to implement!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-jobber"&gt;
  &lt;/a&gt;
  About Jobber
&lt;/h2&gt;

&lt;p&gt;Interested in React &amp;amp; GraphQL? Consider joining Jobber or contributing to our open-source design system &lt;a href="https://atlantis.getjobber.com/"&gt;Atlantis&lt;/a&gt;. We're hiring for remote positions across Canada at all software engineering levels! &lt;/p&gt;

&lt;p&gt;Our awesome Jobber technology teams span across Payments, Infrastructure, AI/ML, Business Workflows &amp;amp; Communications. We work on cutting edge &amp;amp; modern tech stacks using React, React Native, Ruby on Rails, &amp;amp; GraphQL. &lt;/p&gt;

&lt;p&gt;If you want to be a part of a collaborative work culture, help small home service businesses scale and create a positive impact on our communities, then visit our careers site to learn more!help small home service businesses scale and create a positive impact on our communities, then visit our &lt;a href="https://getjobber.com/about/careers?utm_source=devto&amp;amp;utm_medium=social&amp;amp;utm_campaign=eng_blog"&gt;careers&lt;/a&gt; site to learn more!&lt;/p&gt;

</description>
      <category>react</category>
      <category>graphql</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>How to use really long environment variables in Netlify functions</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Tue, 18 Jan 2022 15:38:28 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/how-to-use-really-long-environment-variables-in-netlify-functions-1el2</link>
      <guid>https://dev.to/whitep4nth3r/how-to-use-really-long-environment-variables-in-netlify-functions-1el2</guid>
      <description>&lt;p&gt;Regardless of what stage you‚Äôre at in your development career, you‚Äôve probably given or received this particular piece of advice: do not store secrets and API keys in your code repositories. Instead, use environment variables!&lt;/p&gt;

&lt;p&gt;Popular front end JavaScript frameworks such as React, Next.js, Vue.js and Gatsby have built-in support for using environment variables with &lt;code&gt;.env&lt;/code&gt; files, and Netlify allows you to manage environment variables for your projects via the Netlify UI, CLI or configuration files. But there is a tiny catch. Due to the limitations of AWS Lambda under the hood, &lt;strong&gt;stored environment variable values that exceed a maximum length of 256 characters cannot be used in Netlify serverless functions&lt;/strong&gt;. This might sound like bad news if, for example, you need to store a private key as an environment variable for use in your functions files. &lt;/p&gt;

&lt;p&gt;But all is not lost! We can harness the power of a handy Netlify build plugin to allow you to use longer environment variables in your functions files. Let‚Äôs take a look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;This guide assumes you are familiar with Netlify functions and have configured the location of your Netlify functions folder either in the Netlify UI or with a &lt;code&gt;netlify.toml&lt;/code&gt; build configuration file in your repository. If you‚Äôre new to Netlify serverless functions, &lt;a href="https://docs.netlify.com/functions/overview/"&gt;check out the official documentation to learn more&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-the-plugin"&gt;
  &lt;/a&gt;
  Installing the plugin
&lt;/h2&gt;

&lt;p&gt;We‚Äôre going to install the &lt;a href="https://github.com/bencao/netlify-plugin-inline-functions-env"&gt;netlify-plugin-inline-functions-env&lt;/a&gt; plugin by &lt;strong&gt;bencao&lt;/strong&gt;. This will inline build-time environment variables into Netlify function code, making them available at run-time. This build plugin does not affect your source code, edit your environment variables stored in Netlify, or expose your environment variables to a client. All transformed code lives on the Netlify servers and is only changed at build-time when you push a deployment to your site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installation-via-the-netlify-ui"&gt;
  &lt;/a&gt;
  Installation via the Netlify UI
&lt;/h3&gt;

&lt;p&gt;On the Netlify UI dashboard, click on Plugins. Search for ‚ÄúInline functions environment variables‚Äù and press enter. Click the install button next to the plugin in the list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FpHi5FVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf37sl1rxcdf7sm8z5xj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpHi5FVU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf37sl1rxcdf7sm8z5xj.png" alt="A screenshot of the Netlify UI showing the inline functions environment variables in the plugin list" width="880" height="674"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose which site you‚Äôd like to add the plugin to, and confirm.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z90K7ik5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtl3w1pbww7wjoz95hwk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z90K7ik5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mtl3w1pbww7wjoz95hwk.png" alt="A screenshot of the next step of the plugin installation process, asking where I would like to install the plugin. In the search box is whitep4nth3r.com showing the UI is ready for me to select my site." width="880" height="705"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Technically, you‚Äôre now good to go! All environment variables that you use in your Netlify function files will now be inlined at build-time. This means that function code that looks like this in your repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm inlining my environment variables!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;myEnvVar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REALLY_LONG_ENV_VAR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will be transformed to this at build-time ‚Äî¬†and stored on Netlify servers ‚Äî when you push your code to Netlify:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm inlining my environment variables!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;myEnvVar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;KYwvDpY5yNzMnvHqQMF3pgp7QPNC4rAtrZhnz44RDKBYcyU3JLGRuCGvBHEK38Smu5XkBCNZjyNGWkRLZZX8zUBePeGvnd6krczZ...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, you might want more control over which environment variables are transformed. Let‚Äôs look at how we can do that with a Netlify configuration file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-build-plugin-options"&gt;
  &lt;/a&gt;
  Configuring build plugin options
&lt;/h2&gt;

&lt;p&gt;Build plugin options can be configured in your code with a Netlify configuration file. If you don‚Äôt have a configuration file in your repository already, create a &lt;code&gt;netlify.toml&lt;/code&gt; file at the root of your project. To learn more about configuration files with Netlify, &lt;a href="https://docs.netlify.com/configure-builds/file-based-configuration/"&gt;check out our official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Add the following to your &lt;code&gt;netlify.toml&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[plugins]]
package = "netlify-plugin-inline-functions-env"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you already have a &lt;code&gt;netlify.toml&lt;/code&gt; file which currently uses plugins, make sure to add the full code snippet above, including &lt;code&gt;[[plugins]]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To specify environment variables you‚Äôd like the build plugin to include, use the &lt;code&gt;include&lt;/code&gt; option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[plugins]]
package = "netlify-plugin-inline-functions-env"
  [plugins.inputs]
  include = ["REALLY_LONG_ENV_VAR"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To configure the build plugin to transform all environment variables by default, but exclude specific values, use the &lt;code&gt;exclude&lt;/code&gt; option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[plugins]]
package = "netlify-plugin-inline-functions-env"
  [plugins.inputs]
  exclude = ["DO_NOT_TRANSFORM_ME"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commit and push your &lt;code&gt;netlify.toml&lt;/code&gt; file changes to create a new deployment on Netlify. The environment variables you specified to include via the build plugin options will be converted to plain text and inlined with your function code ‚Äî all behind the scenes on the server without affecting your committed code! You can now use super-long environment variables in your Netlify projects!&lt;/p&gt;

&lt;p&gt;For further reading, &lt;a href="https://docs.netlify.com/configure-builds/build-plugins/"&gt;check out the official documentation on the power of build plugins&lt;/a&gt; and if this article helped you out, &lt;a href="https://twitter.com/netlify"&gt;let us know on Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>netlify</category>
      <category>node</category>
    </item>
    <item>
      <title>OSCP and CRL: what could go wrong?</title>
      <author>Cossack Labs</author>
      <pubDate>Tue, 18 Jan 2022 15:38:05 +0000</pubDate>
      <link>https://dev.to/cossacklabs/oscp-and-crl-what-could-go-wrong-4kf3</link>
      <guid>https://dev.to/cossacklabs/oscp-and-crl-what-could-go-wrong-4kf3</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Read this post to learn everything to know about TLS certificate revocation protocols: OCSP and CRL. &lt;br&gt;
How to use OCSP and CRL for validating TLS certificates in Go apps? Even though Golang has native support for TLS, it has extremely limited support for OCSP and CRL. So, what should you do then?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Online_Certificate_Status_Protocol"&gt;OCSP (Online Certificate Status Protocol)&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc6960"&gt;RFC6960&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Certificate_revocation_list"&gt;CRL (Certificate Revocation List)&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc5280"&gt;RFC5280&lt;/a&gt; provide a way to verify whether the TLS certificate was revoked by a Certificate Authority before the app establishes secure communication with a service that uses this certificate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zCkRumPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rp9i805jn9alflc7nu14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zCkRumPn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rp9i805jn9alflc7nu14.png" alt="OCSP and CRL" width="880" height="744"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-could-go-wrong-in-using-ocsp-and-crl"&gt;
  &lt;/a&gt;
  What could go wrong in using OCSP and CRL?
&lt;/h2&gt;

&lt;p&gt;Here's just a quick list:&lt;/p&gt;

&lt;p&gt;üî¥  &lt;strong&gt;Establishing session before validating the TLS certificate&lt;/strong&gt; (don't be tempted to "optimise" things if OCSP and CRL cause visible delays in the application work).&lt;br&gt;
üî¥  &lt;strong&gt;Unreachable CRL / OCSP responders&lt;/strong&gt; (this could destabilise the whole solution, as applications can be stuck in limbo, not communicating with other services while validating the certificates).&lt;br&gt;
üî¥  &lt;strong&gt;Accepting "Unknown" status as valid&lt;/strong&gt; (if the application treats OCSP "Unknown" status as "the certificate is still valid", it might continue talking to the already malicious service, treating it as a valid).&lt;br&gt;
üî¥  &lt;strong&gt;Certificate revocation checks are too rare&lt;/strong&gt; (balance performance and security, mind a threat model and security requirements).&lt;br&gt;
üî¥  &lt;strong&gt;Lack of signature validation&lt;/strong&gt; (it's essential to verify the CRL response signature to prevent potential attackers from tampering with the list).&lt;br&gt;
üî¥  &lt;strong&gt;CRL cache poisoning&lt;/strong&gt; (if CRL is cached in a local file without any integrity checks, the application won't recognise that the file was changed).&lt;br&gt;
üî¥  &lt;strong&gt;Delta CRLs&lt;/strong&gt; (if implemented poorly, issues with network connectivity might result in the application not receiving some delta CRLs and continuing to trust the revoked certificates).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-needs-ocsp-and-crl"&gt;
  &lt;/a&gt;
  Who needs OCSP and CRL?
&lt;/h2&gt;

&lt;p&gt;We stumbled upon intricacies in OCSP and CRL when building &lt;a href="https://www.cossacklabs.com/acra/"&gt;Acra database security suite&lt;/a&gt;, an application that sits between the app and the database and encrypts/decrypts sensitive data. The support of OCSP and CRL is crucial for Acra to prevent unauthorised connections from malicious or misconfigured apps to sensitive data. &lt;/p&gt;

&lt;p&gt;To meet our security model, we had to implement OCSP/CRL verification in Golang ourselves. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#see-ocsl-and-crl-implementation-examples"&gt;
  &lt;/a&gt;
  See OCSL and CRL implementation examples
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° As it was not easy but interesting task, we put our findings into a new engineering blog post: &lt;a href="https://www.cossacklabs.com/blog/tls-validation-implementing-ocsp-and-crl-in-go/"&gt;TLS validation: implement OCSP and CRL verifiers in Go&lt;/a&gt;. Follow the link to learn more about OCSP/CRL design, implementation and security tips, example code and popular mistakes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you're a Golang engineer that works closely with TLS, our blog post will give you lots of moments to think about. &lt;/p&gt;

&lt;p&gt;To illustrate everything we‚Äôve posted above, we created minimalistic OCSP and CRL implementations in Go. &lt;/p&gt;

&lt;p&gt;Check out the &lt;a href="https://cossacklabs.com/blog/tls-validation-implementing-ocsp-and-crl-in-go/#ocsp-crl-live-examples"&gt;4. Live examples&lt;/a&gt; chapter with all the scripts to generate TLS certificates, OCSP responder based on OpenSSL, and Golang server-side and client-side apps. Feel free to review and run examples to see how the verification works with valid and revoked certificates.&lt;/p&gt;

</description>
      <category>security</category>
      <category>go</category>
      <category>development</category>
      <category>encryption</category>
    </item>
    <item>
      <title>Convince me that Web3 is the worst</title>
      <author>Ben Halpern</author>
      <pubDate>Tue, 18 Jan 2022 15:37:43 +0000</pubDate>
      <link>https://dev.to/ben/convince-me-that-web3-is-the-worst-3b4n</link>
      <guid>https://dev.to/ben/convince-me-that-web3-is-the-worst-3b4n</guid>
      <description>&lt;p&gt;Just for the fun of it, I want to hear everyone's arguments for why Web3 is not, or should not be the future.&lt;/p&gt;

&lt;p&gt;In case you need a better understanding of what we're talking about here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/narottam04" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5QLDKQV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--w8o-R6Cl--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/540306/ae8f12de-c8b6-47a5-a3cc-02030460ee04.jpeg" alt="narottam04"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/narottam04/web-10-web-20-web-30-explained-591n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Web 1.0, Web 2.0 &amp;amp; Web3 Explained &lt;/h2&gt;
      &lt;h3&gt;Narottam04 „Éª Dec 24 '21 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#blockchain&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#web3&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/dabit3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gYALFAE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--YawV5F9h--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/126437/41231eb2-054b-4417-bc35-814e491a2d5d.jpeg" alt="dabit3"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/dabit3/defining-the-web3-stack-39ef" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Defining the web3 stack&lt;/h2&gt;
      &lt;h3&gt;Nader Dabit „Éª Dec 23 '21 „Éª 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#web3&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#blockchain&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#ethereum&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;This shouldn't be personal, or aggressive. Keep it light, and give me your argument.&lt;/p&gt;

</description>
      <category>web3</category>
      <category>webdev</category>
      <category>healthydebate</category>
      <category>discuss</category>
    </item>
    <item>
      <title>WEBCode.run Private Endpoints on Observablehq.com Released!</title>
      <author>Tom Larkworthy</author>
      <pubDate>Tue, 18 Jan 2022 15:27:20 +0000</pubDate>
      <link>https://dev.to/tomlarkworthy/webcoderun-private-endpoints-on-observablehqcom-released-8n</link>
      <guid>https://dev.to/tomlarkworthy/webcoderun-private-endpoints-on-observablehqcom-released-8n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#webcoderun-private-endpoints-released"&gt;
  &lt;/a&gt;
  &lt;a href="https://webcode.run"&gt;WEBCode.run&lt;/a&gt; Private Endpoints Released
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HqITeIFlRXI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://webcode.run"&gt;WEBCode.run&lt;/a&gt; is growing! We have added our first paid feature which will help support it long term. WEBCode is bootstrapped so this is a big milestone!&lt;/p&gt;

&lt;p&gt;For those that do not know, &lt;a href="https://webcode.run"&gt;WEBCode.run&lt;/a&gt; allows you to run serverless compute workloads from within &lt;a href="https://observablehq.com"&gt;Observable&lt;/a&gt; notebooks. Until now, notebooks containing &lt;a href="https://webcode.run"&gt;WEBCode.run&lt;/a&gt; handlers had to be public so that WEBCode's compute layer could read the code. Not anymore!&lt;/p&gt;

&lt;p&gt;We have added a new feature for Observable &lt;a href="https://observablehq.com/@observablehq/getting-started-with-teams"&gt;Team&lt;/a&gt; accounts that allows public access to serverless endpoints while keeping the source code private. We feel this feature best suits commercial teams, and thus, is a perfect fit for a paid tier. Find out more on the &lt;a href="https://webcode.run"&gt;webcode.run website&lt;/a&gt; or contact &lt;a href="//mailto://sales@webcode.run"&gt;sales@webcode.run&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For those that want to use WEBCode to build transparent open source services, they can continue do so at no charge.&lt;/p&gt;

&lt;p&gt;As part of the work in providing a paid tier, we have updated the &lt;a href="https://webcode.run"&gt;website&lt;/a&gt; significantly. You can also email me at &lt;a href="//mailto://tom@webcode.run"&gt;tom@webcode.run&lt;/a&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coming-soon"&gt;
  &lt;/a&gt;
  Coming soon
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://webcode.run"&gt;WEBCode.run&lt;/a&gt; enables running HTTP services with excellent performance and observability from within a notebook. In the coming months we will demonstrate why this is an important primitive. &lt;a href="https://webcode.run"&gt;WEBCode.run&lt;/a&gt; is a connection technology for something larger, it enables completely self documenting projects to be bundled into a single encapsulated artifact. In the coming months the focus will be on delivering preconfigured artifacts you can one click fork to self-host and customize.&lt;/p&gt;

&lt;p&gt;In our vision of the future, source level customization and self-hosting at the service level is a single click away. This is only possible when the backend and frontend + all the extras (documentation, monitoring) are a single forkable artifact, &lt;a href="https://webcode.run"&gt;WEBCode.run&lt;/a&gt; &lt;em&gt;with&lt;/em&gt; &lt;a href="https://observablehq.com"&gt;Observablehq.com&lt;/a&gt; are able to deliver this.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#support-us-on-product-hunt"&gt;
  &lt;/a&gt;
  Support us on Product Hunt
&lt;/h3&gt;

&lt;p&gt;We are launching the paid tier and &lt;a href="https://webcode.run"&gt;webcode.run&lt;/a&gt; on Product Hunt. Help us get to #1 with some love &lt;a href="https://www.producthunt.com/posts/webcode-run"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow-the-newsletter"&gt;
  &lt;/a&gt;
  Follow the newsletter
&lt;/h3&gt;

&lt;p&gt;I am going to start posting webcode.run updates to a &lt;a href="https://webcode.substack.com/"&gt;newsletter&lt;/a&gt;, so this is another option you can stay up to date&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>What is DevOps? REALLY understand it</title>
      <author>Techworld with Nana</author>
      <pubDate>Tue, 18 Jan 2022 15:18:45 +0000</pubDate>
      <link>https://dev.to/techworld_with_nana/what-is-devops-really-understand-it-29j7</link>
      <guid>https://dev.to/techworld_with_nana/what-is-devops-really-understand-it-29j7</guid>
      <description>&lt;p&gt;A &lt;strong&gt;detailed look&lt;/strong&gt; at what DevOps really is with the goal to clarify all questions and doubts around it ‚úÖ&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is the written version of &lt;a href="https://youtu.be/0yWAtQ6wYNM"&gt;my new youtube video&lt;/a&gt;&lt;/em&gt; ‚úçÔ∏è üôÇ&lt;/p&gt;

&lt;p&gt;DevOps has been gaining a lot of popularity and is taking over the traditional way of software development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zDgVNd7_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqovjuv73o31hhxxpjfm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zDgVNd7_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dqovjuv73o31hhxxpjfm.png" alt="DevOps popularity" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#difficulty-to-define-devops"&gt;
  &lt;/a&gt;
  Difficulty to define DevOps
&lt;/h1&gt;

&lt;p&gt;However, "DevOps" term itself is so broad and includes so many things that it became difficult to exactly define it and clearly set the boundaries of DevOps compared to other IT fields. So this post tries to answer the question of "what DevOps is" in detail.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;simplest definition&lt;/strong&gt; is that &lt;code&gt;"DevOps is an intersection of Development and Operations"&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;But where do boundaries of DevOps start and end?  Which part of development is not DevOps? Or what part of operations is not DevOps? And why was there even a need for something between development and operations? üôâ&lt;/p&gt;

&lt;p&gt;Development and Operations are &lt;strong&gt;two main components in the whole application release process&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TAMU1HNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jr07ly5zuwj5r9lxhhoc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TAMU1HNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jr07ly5zuwj5r9lxhhoc.png" alt="Dev and Ops in Application Release Process" width="880" height="558"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let's look in detail at this release process starting from the very beginning!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#application-release-process"&gt;
  &lt;/a&gt;
  Application Release Process
&lt;/h1&gt;

&lt;p&gt;Whenever we're developing an application, we always have the &lt;strong&gt;same process of delivering that application to the end users&lt;/strong&gt;. So this is the main goal no matter if you use waterfall or agile or whatever approach. At its core: 1) you create an application 2) and you want to deliver it to your end users so that they can use it. üë©‚Äçüíª&lt;/p&gt;

&lt;p&gt;So let's say you have a great idea about a cool application. You define its functionality or in other words what features it will have,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you &lt;strong&gt;code&lt;/strong&gt; it,&lt;/li&gt;
&lt;li&gt;you &lt;strong&gt;test&lt;/strong&gt; it &lt;/li&gt;
&lt;li&gt;and now that you have a tested application you want to actually &lt;strong&gt;deploy&lt;/strong&gt; it on a public server and let users access it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For that you &lt;strong&gt;build and package your application&lt;/strong&gt; in some kind of executable form so that it can run. You configure the public server with all the needed stuff like installing any tools the application needs and deploy your application there, you configure firewall rules to allow access to the application on the server and you have launched, users can start using it! üöÄ &lt;/p&gt;

&lt;p&gt;So that's the &lt;strong&gt;simplified basis of any application release&lt;/strong&gt;, but that's not the end of the journey. While in use, you of course have to check in on your application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is everything running fine?&lt;/li&gt;
&lt;li&gt;Are users experiencing any issues?&lt;/li&gt;
&lt;li&gt;Maybe there are bugs in the application that you didn't catch when testing&lt;/li&gt;
&lt;li&gt;Can application handle high user loads?&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdaYEJO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or18fr416kiktxlqljtk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZdaYEJO9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/or18fr416kiktxlqljtk.png" alt="Typical Software Release Process" width="880" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So after launching it, you have to actually make sure that your application is accessible and usable by end users and if there are any issues for users, of course you should fix them. &lt;/p&gt;

&lt;p&gt;Now that was the initial launch of your application, but the application development is not done yet. If you see users like your application you would want to make it even cooler, add new features, maybe optimize the performance by getting better servers or making your application faster and so on. So you still have a lot of things to do and every time you improve your application either the code itself or the server configuration you want to make this improvement accessible to the end users immediately.&lt;/p&gt;

&lt;p&gt;So after the initial launch you do multiple updates to your application and to keep track of these updates you version those changes.&lt;/p&gt;

&lt;p&gt;And &lt;strong&gt;you do that over and over again&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you have an idea of improvement&lt;/li&gt;
&lt;li&gt;you implement it in code&lt;/li&gt;
&lt;li&gt;you test it&lt;/li&gt;
&lt;li&gt;build and package it&lt;/li&gt;
&lt;li&gt;you deploy it&lt;/li&gt;
&lt;li&gt;and once released, you observe it in the production to see whether there are any new improvement possibilities or any issues that need to be fixed right away&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So this gives you a process of &lt;strong&gt;continuous delivery of changes&lt;/strong&gt; an endless cycle of improvements to your application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And DevOps is about making this process of continuous delivery &lt;strong&gt;fast&lt;/strong&gt; and with &lt;strong&gt;minimal errors and bugs&lt;/strong&gt;:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhYSBHIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxctyhjeuwgfmm8qvbh3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhYSBHIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxctyhjeuwgfmm8qvbh3.png" alt="DevOps fast and minimal errors" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So with DevOps improvements get created and delivered to users fast, but also those improvements are of high quality and well tested.  And that is a &lt;strong&gt;big challenge: quickly delivering high quality code&lt;/strong&gt;. üò≥&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#challenges-devops-tries-to-solve"&gt;
  &lt;/a&gt;
  Challenges DevOps tries to solve
&lt;/h1&gt;

&lt;p&gt;Now let's see what are exactly the &lt;strong&gt;challenges that teams may face during this process and which DevOps tries to solve&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;During this whole release process we have roadblocks and frictions:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qoLExefo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oive77i2sl300jq79qmk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qoLExefo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oive77i2sl300jq79qmk.png" alt="Roadblocks and frictions" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now what are the frictions and roadblocks in the release process? ü§î&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-miscommunication-and-lack-of-collaboration-%EF%B8%8F"&gt;
  &lt;/a&gt;
  1) Miscommunication and Lack of Collaboration ‚õîÔ∏è
&lt;/h3&gt;

&lt;p&gt;First and the most important challenge is &lt;strong&gt;miscommunication and lack of collaboration between developers and operations&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So releasing application has two main parts: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;you code the application&lt;/li&gt;
&lt;li&gt;you deploy and run the application&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Developers are responsible for coding. Operations are responsible for running the application.&lt;/p&gt;

&lt;p&gt;And between these two there might be a gap of: "I wrote an application, but I can't run it" or "I'm running the application, but i don't know how it works" üôáüèª‚Äç‚ôÇÔ∏è:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8TODphl0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmky5r045jz19q2kfasu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TODphl0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmky5r045jz19q2kfasu.png" alt="Miscommunications between devs and ops" width="880" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So developers would code without considering where or how the code will be deployed, while operations would try to deploy without really understanding what and why they are deploying or how the application even works. And this would result in miscommunications between these two.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
Developers finish coding but the deployment guide for the operations team is not good enough or well-documented enough, so operations team struggles deploying it, so release takes longer.&lt;/p&gt;

&lt;p&gt;This kind of miscommunication could cause &lt;strong&gt;stretching the release periods for days and weeks&lt;/strong&gt; and in complex badly maintained projects maybe even month.&lt;/p&gt;

&lt;p&gt;So between the developer is done with the feature and operation starts deploying it, there is &lt;strong&gt;no clearly defined automated process of handover&lt;/strong&gt;. It's based on a complex bureaucratic process of what checklists üìù need to be completed and what needs to be documented and who needs to manually approve what for the release and so on. So no streamlines or automated processes here. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#2-conflict-of-interest-%EF%B8%8F"&gt;
  &lt;/a&gt;
  2) Conflict of Interest ‚õîÔ∏è
&lt;/h3&gt;

&lt;p&gt;Apart from miscommunications between development and operations, in a traditional setup, where one team is only responsible for development and other team only for operations, these two have seemingly &lt;strong&gt;different incentives&lt;/strong&gt; that make it hard for them to work together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers want to push out new features fast&lt;/strong&gt;, while &lt;strong&gt;operations want to make sure those changes don't break anything&lt;/strong&gt;, because operations are incentivized to maintain stability in production. Their main focus is to make sure the application is available, doesn't crash, doesn't show 500 errors to the users and so on.&lt;/p&gt;

&lt;p&gt;This means that &lt;strong&gt;operations need to resist the speed of release&lt;/strong&gt; and check all the aspects of a new release to make sure it's 100% safe, which again slows down the process, especially considering that operations don't really understand the code or the application. So it's even more effort for them to evaluate this new release.&lt;/p&gt;

&lt;p&gt;So even though the main &lt;strong&gt;common goal&lt;/strong&gt; of everyone in a company should be to deliver high quality applications to the end users fast, in practice the &lt;strong&gt;more immediate goals&lt;/strong&gt; are for each role to do their job. And developers job is to quickly create new features and push them out, operations job is to maintain the system stability and resist new changes being pushed out: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rfEyACwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j7zx8paqaptjoepzzuz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rfEyACwg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j7zx8paqaptjoepzzuz.png" alt="Conflict of Interest" width="880" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This gives us a &lt;strong&gt;conflict of interest&lt;/strong&gt; and this kind of setup naturally makes it difficult for those two to collaborate. ü§∑‚Äç‚ôÄÔ∏è&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-security-%EF%B8%8F"&gt;
  &lt;/a&gt;
  3) Security ‚õîÔ∏è
&lt;/h3&gt;

&lt;p&gt;Another showstopper when releasing a feature is Security. Just like operations team carefully evaluates and changes to make sure they won't affect system stability, security team will &lt;strong&gt;evaluate any changes to make sure they don't affect systems security&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iB-1v-fe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkdjibblmch1ie87e0hx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iB-1v-fe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gkdjibblmch1ie87e0hx.png" alt="Security Release Showstopper" width="880" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And in a traditional setup this is the same &lt;strong&gt;manual bureaucratic process as operations&lt;/strong&gt;, which takes days or weeks and slows down the release process. &lt;/p&gt;

&lt;p&gt;And as I mentioned DevOps is about removing any roadblocks that slow down the process, so it includes this one as well.&lt;/p&gt;

&lt;p&gt;However, even though this is part of the DevOps solution, there was a separate term created for that called "DevSecOps" in order to highlight and just remind the teams of the &lt;strong&gt;importance of security&lt;/strong&gt;, because it somehow got left out.&lt;/p&gt;

&lt;p&gt;I actually have a separate dedicated video on DevSecOps, which you can also check out if you're interested: &lt;a href="https://youtu.be/nrhxNNH5lt0"&gt;DevSecOps explained&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-application-testing-%EF%B8%8F"&gt;
  &lt;/a&gt;
  4) Application Testing ‚õîÔ∏è
&lt;/h3&gt;

&lt;p&gt;Now adding to the list of show stoppers is application testing. In many projects there are separate teams or roles for testers, who test the application changes on different levels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;like testing just the feature&lt;/li&gt;
&lt;li&gt;testing the whole application,&lt;/li&gt;
&lt;li&gt;testing on multiple environments etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And &lt;strong&gt;often these tests are done manually&lt;/strong&gt;, when teams cannot totally rely only on their automated tests and only after manual testing is done, can the change be released:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l_yJcP0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ff236g54d0m3espzcxi6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l_yJcP0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ff236g54d0m3espzcxi6.png" alt="Application Testing slowing down release process" width="880" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even though this may not be done by development or operations role, but rather a separate tester role, this is an important part of the release process and may also slow it down considerably!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-manual-work-%EF%B8%8F"&gt;
  &lt;/a&gt;
  5) Manual Work ‚õîÔ∏è
&lt;/h3&gt;

&lt;p&gt;As I mentioned, &lt;strong&gt;many of the tasks&lt;/strong&gt; during the release process like testing, security checks, deployment etc &lt;strong&gt;used to be done manually&lt;/strong&gt;. üôáüèª‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;p&gt;For example, operations would do most of the operations tasks manually, either by directly executing commands on the servers to install tools, configure stuff, do patches or have scripts or small programs they execute. But in both cases this is manual work:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1fV6Gu_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovdcosbbyt6inw8y5yom.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1fV6Gu_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovdcosbbyt6inw8y5yom.png" alt="Manual Work in release process" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Drawbacks of manual work&lt;/em&gt;&lt;br&gt;
This &lt;strong&gt;manual work is slow and more error prone&lt;/strong&gt;, because of human error plus with manual work you have a disadvantage that knowledge sharing is very difficult, because people who do the tasks would have to document it and others would have to read it. &lt;/p&gt;

&lt;p&gt;It's also very &lt;strong&gt;intransparent&lt;/strong&gt;, because it's hard to trace, who executed what when and finally when infrastructure configuration and so on was done manually, if something happens to the infrastructure, it may be really &lt;strong&gt;hard to recover and replicate the exact state&lt;/strong&gt; fast. You would have to remember exactly what was done on the servers, in which order to get to that previous infrastructure state. ü§¶üèΩ‚Äç‚ôÄÔ∏è&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#devops-tries-to-remove-these-roadblocks"&gt;
  &lt;/a&gt;
  DevOps tries to remove these roadblocks ‚úÖ
&lt;/h3&gt;

&lt;p&gt;So you see the &lt;strong&gt;main characteristic&lt;/strong&gt; of all these issues is that they all &lt;strong&gt;slow down the release cycle&lt;/strong&gt; and create roadblocks on the way. And you also see in case of security and testing, that DevOps may even go over only development or only operations responsibilities and tasks:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---HZZDcmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2h5sn5s8nwl8a4x58fi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---HZZDcmg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2h5sn5s8nwl8a4x58fi.png" alt="DevOps including Development, Operations, Testing and Security" width="880" height="487"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's why to understand DevOps &lt;strong&gt;instead of focusing on the name and what it means, we're focusing on what it tries to achieve&lt;/strong&gt;: üí°&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DevOps tries to remove all these roadblocks and things that slow down the release process, whatever that may be and instead of manual inefficient processes helps create fully automated streamlined processes for release cycles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And this can be done step by step, removing one roadblock at a time until you have a fully optimized and automated DevOps process, that makes your application release super easy. üöÄ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ovyyypy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkcc6nsfofig1xxnvjs6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ovyyypy3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkcc6nsfofig1xxnvjs6.png" alt="DevOps tries to remove all roadblocks" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#devops-concept-as-a-solution"&gt;
  &lt;/a&gt;
  DevOps Concept as a Solution
&lt;/h1&gt;

&lt;p&gt;So how does DevOps help achieve this and solve all these challenges? üëÄ&lt;/p&gt;

&lt;p&gt;Well, by the &lt;strong&gt;official definition&lt;/strong&gt; and this was the original idea of DevOps:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DevOps defines a combination of cultural philosophies, practices and tools for doing that.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So DevOps is not just one set of tools or one specific concept, it's a &lt;strong&gt;combination of anything that creates the process of releasing the software fast and with high quality&lt;/strong&gt;. And the main part of the concept was that developers and operations people should work together more often, talk to each other more often and collaborate better to achieve that.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#devops-in-practice-devops-as-a-separate-role"&gt;
  &lt;/a&gt;
  DevOps in Practice: DevOps as a separate Role
&lt;/h1&gt;

&lt;p&gt;But actually this definition is too broad and too high level and makes it hard to imagine how it works in practice. üôâ So it's just not specific enough. So naturally different companies implemented DevOps in different ways. So the &lt;strong&gt;actual implementation of DevOps looked pretty different from company to company&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But since companies started adopting it, gradually it got a more concrete form with some of the common patterns across many companies and one of these patterns was that &lt;strong&gt;DevOps evolved into an actual role called a "Devops Engineer"&lt;/strong&gt;, where either developers are doing DevOps as a job next to development or operations are doing it or someone is doing DevOps exclusively as their only job.&lt;/p&gt;

&lt;p&gt;And a set of technologies that were used to implement the DevOps principles became &lt;strong&gt;DevOps technologies&lt;/strong&gt;, which now DevOps engineers would need to learn:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QX89fHEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxu1cmk44tnl4p8ov16b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QX89fHEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxu1cmk44tnl4p8ov16b.png" alt="DevOps Engineer Role and DevOps Tools" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I understand that many people are resisting the idea of DevOps engineer and the creators of the DevOps concept didn't see it used this way, but the reality is often different from the theory. We see that concept was adjusted and bent to meet the needs of the end goal and DevOps engineer role is what came out of it. ü§∑‚Äç‚ôÄÔ∏è&lt;/p&gt;

&lt;p&gt;And that DevOps role is responsible for creating a streamlined release process without any roadblocks slowing down the release and that's why in the &lt;strong&gt;center of DevOps is the well-known Continuous Integration / Continuous Delivery process&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#devops-in-practice-how-to-become-a-devops-engineer"&gt;
  &lt;/a&gt;
  DevOps in Practice: How to become a DevOps Engineer
&lt;/h1&gt;

&lt;p&gt;Check out my other blog article to see:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3f3BcUx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9mw2nnlf1yizqntt5fe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3f3BcUx7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9mw2nnlf1yizqntt5fe.png" alt="Overview DevOps in Practice" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/techworld_with_nana" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WechM825--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--_H3FtWZg--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/319175/d2dd8825-6a90-429a-ba3e-70b5c3e19557.png" alt="techworld_with_nana"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/techworld_with_nana/devops-roadmap-2021-how-to-become-a-devops-engineer-1n9p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;DevOps Roadmap - How to become a DevOps Engineer&lt;/h2&gt;
      &lt;h3&gt;Techworld with Nana „Éª Jan 17 '21 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devops&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cloud&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;After reading this, you may be thinking, these are a lot of things to learn and it may be hard to know, where to start or what to learn first or what resources to use. ü§Ø&lt;/p&gt;

&lt;p&gt;Well, there are many resources out there to learn individual DevOps technologies, üëç I actually cover many of the DevOps technologies on &lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA"&gt;my Youtube channel&lt;/a&gt;. üòä&lt;br&gt;
But ideally you want to &lt;strong&gt;follow a well-structured step-by-step roadmap and more importantly learn how to use these technologies together in combination&lt;/strong&gt;, because that's what DevOps engineers do. They use and integrate multiple technologies together to create DevOps processes and of course you want to learn all these with &lt;strong&gt;actual real-life project examples to know how it will look like in a real job&lt;/strong&gt;. And very few courses and learning resources offer this and that's exactly &lt;strong&gt;why we created a &lt;a href="https://www.techworld-with-nana.com/devops-bootcamp"&gt;complete DevOps Bootcamp&lt;/a&gt;&lt;/strong&gt;  with a clear structure and lots of hands-on projects.&lt;/p&gt;

&lt;p&gt;So if you're thinking about becoming a DevOps engineer or slowly transitioning into DevOps you can definitely check out our DevOps bootcamp üöÄ&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#devops-vs-sre-how-sre-fits-into-the-whole-devops-process"&gt;
  &lt;/a&gt;
  DevOps vs SRE - How SRE fits into the whole DevOps process
&lt;/h1&gt;

&lt;p&gt;To get a full picture of DevOps I want to mention one more concept, which is SRE or &lt;strong&gt;S&lt;/strong&gt;ite &lt;strong&gt;R&lt;/strong&gt;eliability &lt;strong&gt;E&lt;/strong&gt;ngineering and how it fits into DevOps.&lt;/p&gt;

&lt;p&gt;We just learned that there are two definitions of DevOps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the original definition, which is &lt;strong&gt;more high level&lt;/strong&gt; and more broad and doesn't specify how exactly DevOps should be implemented&lt;/li&gt;
&lt;li&gt;and a &lt;strong&gt;more practical one&lt;/strong&gt;, which evolved over time with its own DevOps engineer role.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So when we compare DevOps with SRE it's important to know &lt;strong&gt;which definition of DevOps we're using for this comparison&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;1. First broader definition of DevOps vs. SRE&lt;/em&gt;&lt;br&gt;
DevOps is a more high-level concept that defines &lt;strong&gt;what needs to be done&lt;/strong&gt; to achieve the automated streamlined release process, while SRE is more specific about &lt;strong&gt;how to exactly implement this process&lt;/strong&gt; and how to implement DevOps principles.&lt;/p&gt;

&lt;p&gt;So many people would say that &lt;strong&gt;SRE is a specific implementation of the DevOps concepts&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y9zZ00ro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi34pvwmn158xq6un2kt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y9zZ00ro--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fi34pvwmn158xq6un2kt.png" alt="SRE implementing DevOps" width="880" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;2. Practical DevOps vs. SRE&lt;/em&gt;&lt;br&gt;
But as we saw DevOps itself also became more practical with its own role and specific technologies and ways to implement it. So what's the comparison here? ü§î&lt;br&gt;
Well, in many companies this practical DevOps implementation became &lt;strong&gt;more focused and concentrated on the speed of delivery&lt;/strong&gt; for the application changes and of course even though it's part of the DevOps principles to not only release fast, but release quality code many DevOps teams in practice again seemed to optimize more for the speed than reliability.&lt;/p&gt;

&lt;p&gt;So as a great &lt;strong&gt;complementary part of DevOps, SRE emerged with the same principles and goals in mind&lt;/strong&gt;, which is release quality code fast, but as the name suggests &lt;strong&gt;more focused on reliability and keeping systems stable&lt;/strong&gt;, while allowing for fast changes:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jj7W89CI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ls53su3l74rlf9mg8g7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jj7W89CI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ls53su3l74rlf9mg8g7k.png" alt="SRE complementary to DevOps" width="880" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So SRE is its own role with its own set of tools for making systems reliable. So these two were kind of parallel developments and are now often seen as &lt;strong&gt;two sides of the same coin&lt;/strong&gt; and it's not uncommon for teams to have both DevOps engineer and SRE helping implement the DevOps principles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Own 'What is SRE' video coming soon.. üé¨&lt;/strong&gt;&lt;br&gt;
This was just a short look at SRE to understand it in comparison to DevOps, but since I have received many questions about what SRE is, I will release its own follow-up video on SRE in the next weeks to explain in more detail like how SRE works in practice, what are the tasks and responsibilities of a Site Reliability engineer and so on.&lt;/p&gt;




&lt;p&gt;For DevOps I hope I could clarify all your questions about it. If not leave a comment in the video and I will try to answer them üòä&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good-luck-on-your-devops-journey"&gt;
  &lt;/a&gt;
  Good luck on your DevOps journey! üéâ üí™
&lt;/h3&gt;




&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üòç for more content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCdngmbVKX1Tgre699-XLlUA?sub_confirmation=1"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.instagram.com/techworld_with_nana/"&gt;Instagram - for behind-the-scenes and previews&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Njuchi_"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.facebook.com/groups/techworldwithnana"&gt;Private FB group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//linkedin.com/in/nana-janashia"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>devops</category>
      <category>beginners</category>
      <category>development</category>
      <category>sre</category>
    </item>
    <item>
      <title>What to pursure after graduation?</title>
      <author>Trishiraj</author>
      <pubDate>Tue, 18 Jan 2022 15:16:41 +0000</pubDate>
      <link>https://dev.to/trishiraj/what-to-pursure-after-graduation-hkb</link>
      <guid>https://dev.to/trishiraj/what-to-pursure-after-graduation-hkb</guid>
      <description>&lt;p&gt;If you've just graduated as a computer science major and if Programming is something you are interested in, Then you should try and focus on any one of these.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Data Scientist - Learn and specialise more in DSA based problems. Platforms like LeetCode can help you become a better competitive programmer with good tests over algorithm knowledge.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web Development (Vue/React) - The world of web is immensely huge and has everything you need as far as you choose the right tool. Else it can get overwhelming sometimes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;App development (Native/PWA/Flutter) - There was a time when native app development was the only way to go but now that you have amazing hybrid app tools and PWA with regards to web development. I think it's safe to say learning web development can strike two goals in one shot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI/UX Design (Figma/Adobe XD) - If you've seen enough of boring UIs out there and would like to kick it up a notch, it would be a good start to study different design concepts like "Material design, neuromorphism, Flat design" and then play with it as you see fit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;API handling &amp;amp; Testing (Postman/Swagger/Php/Node/Laravel) - If you're to work for a company you would definitely need to handle the backend for their given frontend application. Being able to create - test and handle API is a good start. You might have heard the term "REST" in a lot of places, now is a good time to learn more about it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Database/Backend services (Cloud services, Mongo, Redis etc) - Depending on the type of frontend you are working on, it's essential to choose the right backend to handle the flow within the application, else it would be a cumbersome work trying to deal with it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AI/ML - To put it straight, AI and ML are definitely not on the easier domains with regards to the above mentioned titles. This takes a lot of patience, practice and effort to pull it through. If you do manage to pull it through then consider that there's nothing stopping you from getting you what you need in this domain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AR/VR - If you haven't heard about the hype of Metaverse, NFT and what not. You are either living under a cave or you've become a wise person. None the less, dealing with AR/VR can be quite some fun if things tend to workd right. A good place to start would be modelling your 3D objects (Blender) and using AR tools like Google's ARcore.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me know what you think! Would love to know what you're pursuing right now and how it got started!&lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>devjournal</category>
      <category>motivation</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My Road To Software Engineering </title>
      <author>Doug Jones </author>
      <pubDate>Tue, 18 Jan 2022 15:04:38 +0000</pubDate>
      <link>https://dev.to/codejones/my-road-to-software-engineering-no4</link>
      <guid>https://dev.to/codejones/my-road-to-software-engineering-no4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-beginning"&gt;
  &lt;/a&gt;
  The Beginning
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_iXFz_ed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sdbs67avxrdhhhi8buk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_iXFz_ed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sdbs67avxrdhhhi8buk.jpeg" alt="description" width="322" height="157"&gt;&lt;/a&gt; &lt;br&gt;
I started 2021 with no software engineering experience. &lt;br&gt;
If you would of asked me to type "Hello World" in HTML. &lt;br&gt;
I would of looked at you as if you had 3 three dragon heads.&lt;br&gt;
I was looking to start a new career and find something different. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#career-karma"&gt;
  &lt;/a&gt;
  Career Karma
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UNFsVXeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/772mu68g85sagjjpyila.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UNFsVXeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/772mu68g85sagjjpyila.jpeg" alt="description" width="351" height="144"&gt;&lt;/a&gt;&lt;br&gt;
I saw an advertisement for the Career Karma app. I was looking to make a change in my life and find a new direction. &lt;br&gt;
I took the quiz to see if software engineering was right for me. After the quiz I accepted the 21 day challenge (&lt;strong&gt;Which I finished&lt;/strong&gt;) and started my journey into the tech field. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flatiron"&gt;
  &lt;/a&gt;
  Flatiron
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VOukfAp0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p176cv0q62apa627o90n.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VOukfAp0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p176cv0q62apa627o90n.jpeg" alt="description" width="298" height="169"&gt;&lt;/a&gt;&lt;br&gt;
After committing to learning about programming. I took a quiz to find the right bootcamps for me. Through some personal research combined with the results of my test. I enrolled in Flatiron School and my commitment to this journey continued. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-journey"&gt;
  &lt;/a&gt;
  The Journey
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--srJ-8Xt0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqzkz69txsefaqevvuj3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--srJ-8Xt0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqzkz69txsefaqevvuj3.jpeg" alt="description" width="300" height="168"&gt;&lt;/a&gt;&lt;br&gt;
Every journey starts with a first step or code in this case. I began learning a new way of thinking and processing information. A new language because &lt;em&gt;let's be honest not everyone speaks code&lt;/em&gt; ü•∏. A new community of friends. All of a sudden I went from talking about sports and the latest video games, to text editors, keyboards, and VS code themes.&lt;br&gt;
The world of possibilities to create new things and help improve old one's was opened to me and I jump right in. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-growth"&gt;
  &lt;/a&gt;
  The Growth
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A7_bYHob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/km5gcu1s26uzacl9whp7.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7_bYHob--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/km5gcu1s26uzacl9whp7.jpeg" alt="description" width="362" height="139"&gt;&lt;/a&gt;&lt;br&gt;
Taking the journey to becoming a software engineer challenged me beyond my limits. The skills I was learning didn't just begin or end with doing coding labs or build projects. They transferred to all areas of life. I was to apply these problem solving processes at my current job, helping to teach my kids how to break problems down and solve them. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-now"&gt;
  &lt;/a&gt;
  The Now
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YwpUjRpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8jk21j4hz9vkq90p0bf.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YwpUjRpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8jk21j4hz9vkq90p0bf.jpeg" alt="description" width="300" height="295"&gt;&lt;/a&gt; &lt;br&gt;
When I stated at Flatiron they asked us Why Software Engineering? Now I would say the real question is Why Not? &lt;br&gt;
In a world where more and more things in our everyday lives are being powered by apps and technology continues to grow. Software Engineering really puts the world at your finger tips. I hope you take the journey to &lt;/p&gt;

&lt;p&gt;Happy Coding üë®üèø‚Äçüíªüë®üèª‚Äçüíªüßëüèæ‚Äçüíªüë©‚Äçüíª&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Cross Browser Testing In Selenium [Tutorial]</title>
      <author>himanshuseth004</author>
      <pubDate>Tue, 18 Jan 2022 15:01:34 +0000</pubDate>
      <link>https://dev.to/himanshusheth004/cross-browser-testing-in-selenium-tutorial-54f7</link>
      <guid>https://dev.to/himanshusheth004/cross-browser-testing-in-selenium-tutorial-54f7</guid>
      <description>&lt;p&gt;Selenium is a popular automation testing framework that is primarily used for cross browser testing. It is an open-source framework that is primarily used for &lt;a href="https://www.lambdatest.com/automation-testing?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=rn&amp;amp;utm_content=webpage"&gt;automating testing&lt;/a&gt; of web applications (and websites) across a range of browsers like Firefox, Chrome, Internet Explorer, Microsoft Edge, etc.&lt;/p&gt;

&lt;p&gt;If you are a Selenium enthusiast, you would have definitely tried out Selenium 4 ‚Äì the latest version of the Selenium framework. Selenium 4 has been in the works since the last three years and we have been toying around with Selenium 4 since the time it was in the Alpha stage.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-bWLFK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1476699944211910660/Ub17LND7_normal.jpg" alt="Simon Mavi Stewart profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Simon Mavi Stewart
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @shs96c
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      üéâüéâ Woohoo! üéâüéâ I am absolutely over-the-moon excited to announce that we have just shipped Selenium 4.0.0! &lt;a href="https://twitter.com/hashtag/selenium4"&gt;#selenium4&lt;/a&gt;&lt;br&gt;&lt;br&gt;It's taken over 4000 commits, one brand new Grid implementation, and almost three years since the last stable release, but it's here for you now!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:50 PM - 13 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1448285008809144333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1448285008809144333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1448285008809144333" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Relative locators, renewed Selenium Grid implementation, W3C compliance and super-powerful newly architectured Selenium Grid are some of the talking points of Selenium 4.&lt;/p&gt;

&lt;p&gt;In this Selenium WebDriver tutorial, we deep dive into the essential components of Selenium framework including Selenium WebDriver architecture, performing cross browser testing using Selenium, along with touching upon the most useful features of the Selenium 4 framework.&lt;/p&gt;

&lt;p&gt;This Selenium WebDriver Tutorial for beginners and professionals will help you learn what‚Äôs new in Selenium 4 (Features and Improvements).&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Mmp_FiNIYtQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;What is Cross Browser Testing ?&lt;/p&gt;

&lt;p&gt;Cross browser testing is the process of testing a website or web application on different combinations of browsers and browser versions. The browser market share for desktops is a clear indicator about the fragmentation that exists in the desktop browser market.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7etVRwDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/powu7bfhptde7q99ei3x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7etVRwDE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/powu7bfhptde7q99ei3x.png" alt="Stats Counter" width="880" height="576"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://gs.statcounter.com/browser-market-share"&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Though Internet Explorer (IE) does not surface in the list of prominent browsers, the fact is that testing on Internet Explorer is still relevant as a certain percentage of users still use IE as their primary web browser. As every browser has its own rendering engine, there is a possibility that certain functionalities might not work (as expected) on those browsers and operating systems.&lt;/p&gt;

&lt;p&gt;Cross browser compatibility testing is an approach through which you can test your website (or web application) on different browsers, browser versions, and operating systems. It is essential for ensuring that the product experience is uniform across browsers and platforms (or operating systems).&lt;/p&gt;

&lt;p&gt;Why use Selenium for Cross Browser Testing ?&lt;br&gt;
For starters, Selenium is a popular open-source framework that is used for cross browser testing or automation testing of websites (or web applications). The Selenium framework provides language bindings for popular programming languages like Python, Java, JavaScript, C#, Ruby, and PHP.&lt;/p&gt;

&lt;p&gt;Shown below is the overall timeline (or version history) of the Selenium framework:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uIMw9xZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8llrv8eygmp5qm7sekp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uIMw9xZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8llrv8eygmp5qm7sekp.png" alt="Evolution of the Selenium framework" width="880" height="537"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the whole, Selenium is a powerful test automation framework that is not only instrumental in web automation testing but also helps in accelerating the overall software release via integration with popular CI/CD tools like Jenkins, TeamCity, GitLab CI, and more. The only downside about Selenium is that it cannot be used for automation desktop applications.&lt;/p&gt;

&lt;p&gt;Selenium versions prior to Selenium 4 were using the JSON Wire Protocol for communicating between the client and server. However, JSON Wire protocol is retiring in Selenium 4, as WebDriver W3C protocol is used in the Selenium 4 framework. This essentially means that your cross browser tests would be more stable (or less flaky) when the tests are performed on the Selenium 4 Grid.&lt;/p&gt;

&lt;p&gt;In case you are looking for the Selenium 4 upgrade guide, make sure to check out our blog that deep dives into how to upgrade from Selenium 3 to 4.&lt;/p&gt;

&lt;p&gt;Selenium framework is designed in a manner that updates (or enhancements) in the browsers have minimal impact on the test scenarios. Interaction with the WebElements on the page that is rendered on the browser is facilitated via the browser drivers.&lt;/p&gt;

&lt;p&gt;Now that we have covered the basic essentials of the Selenium framework, let‚Äôs look into the what and how of cross browser testing in Selenium.&lt;/p&gt;

&lt;p&gt;Seamless User Experience&lt;br&gt;
Every web product consists of the front end and back end. HTML, CSS, and JavaScript are some of the most widely-used web languages for front-end development. On the other hand, the back-end can be developed using popular programming PHP, Python, Java, amongst others.&lt;/p&gt;

&lt;p&gt;Also, every web browser uses a different rendering engine and JavaScript engine that might result in differentiated experience across different web browsers. For example, Google Chrome uses Blink engine, Mozilla Firefox uses Gecko engine, Apple Safari uses WebKit engine, and so on.&lt;/p&gt;

&lt;p&gt;Role of rendering engines in browsers has played a major role in the importance of cross browser testing of websites (and web applications). In a nutshell, cross browser testing is required to ensure that your website (or web app) visitors are presented with a uniform experience, irrespective of the browser, browser version, or OS being used for accessing the same.&lt;/p&gt;

&lt;p&gt;Increased Browser Coverage&lt;br&gt;
Browser coverage is an integral aspect of test coverage. The primary agenda of cross browser testing is to perform testing on different browsers and version combinations.&lt;/p&gt;

&lt;p&gt;Using Selenium for cross browser testing helps in rigorous testing of the code across multiple browsers; thereby helping achieve better browser coverage. This in turn helps in improving the user experience across the target web browsers. Browser compatibility matrix can be instrumental in prioritizing the web browsers that are in use by the target audience.&lt;/p&gt;

&lt;p&gt;Shorter Release Cycles&lt;br&gt;
True potential of cross browser testing with Selenium can be exploited by running tests on a Selenium Grid. The Selenium Grid is a Hub-Node (or Client-Server) based architecture that lets you run cross browser tests in parallel on different browser and OS combinations.&lt;/p&gt;

&lt;p&gt;Based on the test combination, Hub in Selenium Grid hands over the test execution to the best-suited Node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9aVgGEl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/036xz2f9afczs4fnh4u1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9aVgGEl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/036xz2f9afczs4fnh4u1.png" alt="Selenium Grid Architecture" width="548" height="524"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The in-house Selenium Grid infrastructure can help in expediting test execution but at the expense of higher maintenance and lower reliability.&lt;/p&gt;

&lt;p&gt;Major release bottlenecks like high test flakiness, high test execution time, low test reliability and mounting infrastructure costs can be fixed by migrating cross browser tests to a secure, reliable, and scalable cloud Grid like LambdaTest.&lt;/p&gt;

&lt;p&gt;The combination of cloud grid, parallel cross browser testing using Selenium, and integration with the best CI/CD tools can be instrumental in achieving improved product quality and accelerated time to market.&lt;/p&gt;

&lt;p&gt;Selenium WebDriver Architecture&lt;br&gt;
Before we get our hands dirty with cross browser testing using Selenium, let‚Äôs have a brief look at some of the integral components of the Selenium Suite. Apart from Selenium Grid, the Selenium IDE and Selenium Grid are the major components of the Selenium Suite.&lt;/p&gt;

&lt;p&gt;Selenium RC (Remote Control) which was a part of Selenium suite until V2, was officially deprecated in Selenium v3. Selenium WebDriver can be considered as the soul of Selenium, as it helps in establishing the communication with the web browser through its corresponding browser driver.&lt;/p&gt;

&lt;p&gt;The JSON Wire protocol which was used for communication between the Selenium Client libraries and Browser Drivers is no longer a part of Selenium 4. The JSON Wire protocol in Selenium 3 is replaced with W3C WebDriver protocol in Selenium 4, there is no necessity of encoding and decoding of test requests. You can expect better test stability when using the Selenium 4 framework.&lt;/p&gt;

&lt;p&gt;Shown below is the pictorial representation of the Selenium 3 WebDriver Architecture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iax3CxV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mza8tfxs8gqw485xf2u4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iax3CxV7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mza8tfxs8gqw485xf2u4.png" alt="WebDriver Architecture in Selenium 3" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As Selenium 4 is compliant with the W3C WebDriver, there is no necessity of encoding and decoding the test requests. Shown below is the pictorial representation of the Selenium 4 WebDriver Architecture:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QKjD4ho_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk44w4nqz8bl2ga2eug0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QKjD4ho_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk44w4nqz8bl2ga2eug0.png" alt="WebDriver Architecture in Selenium 4" width="844" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Demonstration: Cross Browser Testing using Selenium&lt;br&gt;
Finally, let‚Äôs get our hands dirty with cross browser testing using Selenium. We would be running tests on LambdaTest Selenium grid. Website testing on cloud provides numerous benefits, the major ones are listed below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reliable and accelerated test execution&lt;/li&gt;
&lt;li&gt;Massive reduction in test flakiness&lt;/li&gt;
&lt;li&gt;Shorter release cycles and faster TTM (Time to Market)&lt;/li&gt;
&lt;li&gt;Improved product user experience owing to cross browser compatibility tests being conducted on a range of browser, OS, and viewport combinations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Parameterized testing in Selenium and data driven testing in Selenium are two major options to realize cross browser testing using Selenium at a scale. Though the mechanism of reading test parameters differ in the two cases, the primary goal of performing cross browser tests across different test combinations is met.&lt;/p&gt;

&lt;p&gt;Now that you are aware of the major advantages offered by a cloud Selenium Grid, let‚Äôs look at a simple demonstration of cross browser testing using Selenium.&lt;/p&gt;

&lt;p&gt;Test Scenario&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open MVC ToDo App&lt;/li&gt;
&lt;li&gt;Add 5 new items in the list&lt;/li&gt;
&lt;li&gt;Delete all the items till the ToDo list is empty&lt;/li&gt;
&lt;li&gt;Assert if the list is not empty&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cross Browser Test Combinations&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Browser&lt;/th&gt;
&lt;th&gt;Browser Version&lt;/th&gt;
&lt;th&gt;Platform&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Chrome&lt;/td&gt;
&lt;td&gt;latest&lt;/td&gt;
&lt;td&gt;Windows 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Firefox&lt;/td&gt;
&lt;td&gt;latest&lt;/td&gt;
&lt;td&gt;Windows 10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Microsoft Edge&lt;/td&gt;
&lt;td&gt;latest&lt;/td&gt;
&lt;td&gt;MacOS Catalina&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Implementation&lt;/p&gt;

&lt;p&gt;The demonstration of cross browser testing is done using the TestNG framework with Selenium. We have used the IntelliJ IDEA IDE, however you have the flexibility of using Eclipse IDE for development. TestNG Eclipse step-by-step guide is the ideal resource in case you are just getting started with TestNG with Selenium using the Eclipse IDE.&lt;/p&gt;

&lt;p&gt;As seen in the project setup, we have created a class file named Test1 under src/test/java folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HJZn4O5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/juzfr3naofzyuf44py31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HJZn4O5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/juzfr3naofzyuf44py31.png" alt="Directory" width="724" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we would be passing the browser and OS combinations as parameters, the code will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt;
   &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

   &amp;lt;groupId&amp;gt;org.example&amp;lt;/groupId&amp;gt;
   &amp;lt;artifactId&amp;gt;AutomationDemo&amp;lt;/artifactId&amp;gt;
   &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;

   &amp;lt;properties&amp;gt;
       &amp;lt;maven.compiler.source&amp;gt;16&amp;lt;/maven.compiler.source&amp;gt;
       &amp;lt;maven.compiler.target&amp;gt;16&amp;lt;/maven.compiler.target&amp;gt;
   &amp;lt;/properties&amp;gt;

   &amp;lt;dependencies&amp;gt;
       &amp;lt;dependency&amp;gt;
           &amp;lt;groupId&amp;gt;org.testng&amp;lt;/groupId&amp;gt;
           &amp;lt;artifactId&amp;gt;testng&amp;lt;/artifactId&amp;gt;
           &amp;lt;version&amp;gt;6.9.10&amp;lt;/version&amp;gt;
           &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
       &amp;lt;/dependency&amp;gt;
       &amp;lt;dependency&amp;gt;
           &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
           &amp;lt;artifactId&amp;gt;slf4j-nop&amp;lt;/artifactId&amp;gt;
           &amp;lt;version&amp;gt;1.7.28&amp;lt;/version&amp;gt;
           &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
       &amp;lt;/dependency&amp;gt;
       &amp;lt;dependency&amp;gt;
           &amp;lt;groupId&amp;gt;org.seleniumhq.selenium&amp;lt;/groupId&amp;gt;
           &amp;lt;artifactId&amp;gt;selenium-java&amp;lt;/artifactId&amp;gt;
           &amp;lt;version&amp;gt;3.141.59&amp;lt;/version&amp;gt;
       &amp;lt;/dependency&amp;gt;
       &amp;lt;dependency&amp;gt;
           &amp;lt;groupId&amp;gt;org.seleniumhq.selenium&amp;lt;/groupId&amp;gt;
           &amp;lt;artifactId&amp;gt;selenium-remote-driver&amp;lt;/artifactId&amp;gt;
           &amp;lt;version&amp;gt;3.141.59&amp;lt;/version&amp;gt;
       &amp;lt;/dependency&amp;gt;
       &amp;lt;dependency&amp;gt;
           &amp;lt;groupId&amp;gt;org.seleniumhq.selenium&amp;lt;/groupId&amp;gt;
           &amp;lt;artifactId&amp;gt;selenium-chrome-driver&amp;lt;/artifactId&amp;gt;
           &amp;lt;version&amp;gt;3.141.59&amp;lt;/version&amp;gt;
       &amp;lt;/dependency&amp;gt;
       &amp;lt;dependency&amp;gt;
           &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
           &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
           &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt;
           &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
       &amp;lt;/dependency&amp;gt;
       &amp;lt;dependency&amp;gt;
           &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
           &amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt;
           &amp;lt;version&amp;gt;4.5.13&amp;lt;/version&amp;gt;
       &amp;lt;/dependency&amp;gt;
   &amp;lt;/dependencies&amp;gt;

   &amp;lt;build&amp;gt;
       &amp;lt;defaultGoal&amp;gt;install&amp;lt;/defaultGoal&amp;gt;
       &amp;lt;plugins&amp;gt;
           &amp;lt;plugin&amp;gt;
               &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
               &amp;lt;version&amp;gt;3.0&amp;lt;/version&amp;gt;
               &amp;lt;configuration&amp;gt;
                   &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;
                   &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;
               &amp;lt;/configuration&amp;gt;
           &amp;lt;/plugin&amp;gt;
           &amp;lt;plugin&amp;gt;
               &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
               &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;
               &amp;lt;version&amp;gt;2.12.4&amp;lt;/version&amp;gt;
               &amp;lt;configuration&amp;gt;
                   &amp;lt;suiteXmlFiles&amp;gt;
                       &amp;lt;!-- TestNG suite XML files --&amp;gt;
                       &amp;lt;suiteXmlFile&amp;gt;testng.xml&amp;lt;/suiteXmlFile&amp;gt;
                   &amp;lt;/suiteXmlFiles&amp;gt;
               &amp;lt;/configuration&amp;gt;
           &amp;lt;/plugin&amp;gt;
           &amp;lt;plugin&amp;gt;
               &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
               &amp;lt;artifactId&amp;gt;maven-surefire-report-plugin&amp;lt;/artifactId&amp;gt;
               &amp;lt;version&amp;gt;3.0.0-M5&amp;lt;/version&amp;gt;
           &amp;lt;/plugin&amp;gt;
       &amp;lt;/plugins&amp;gt;
   &amp;lt;/build&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt;
&amp;lt;!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd"&amp;gt;
&amp;lt;suite name="[Demo] Cross Browser Testing Using Selenium" parallel="tests" thread-count="3"&amp;gt;
   &amp;lt;test name="[Demo] Cross Browser Testing Using Selenium"/&amp;gt;
   &amp;lt;test name="[LambdaTest] Test Scenario - 1"&amp;gt;
       &amp;lt;parameter name="browser" value="Chrome"/&amp;gt;
       &amp;lt;parameter name="version" value="latest"/&amp;gt;
       &amp;lt;parameter name="platform" value="Windows 10"/&amp;gt;
       &amp;lt;parameter name="resolution" value="1024x768"/&amp;gt;
       &amp;lt;classes&amp;gt;
           &amp;lt;class name="AutomationDemo"&amp;gt; &amp;lt;/class&amp;gt;
       &amp;lt;/classes&amp;gt;
   &amp;lt;/test&amp;gt;
   &amp;lt;test name="[LambdaTest] Test Scenario - 2"&amp;gt;
       &amp;lt;parameter name="browser" value="Firefox"/&amp;gt;
       &amp;lt;parameter name="version" value="latest"/&amp;gt;
       &amp;lt;parameter name="platform" value="Windows 10"/&amp;gt;
       &amp;lt;parameter name="resolution" value="1024x768"/&amp;gt;
       &amp;lt;classes&amp;gt;
           &amp;lt;class name="AutomationDemo"&amp;gt; &amp;lt;/class&amp;gt;
       &amp;lt;/classes&amp;gt;
   &amp;lt;/test&amp;gt;
   &amp;lt;test name="[LambdaTest] Test Scenario - 3"&amp;gt;
       &amp;lt;parameter name="browser" value="MicrosoftEdge"/&amp;gt;
       &amp;lt;parameter name="version" value="latest"/&amp;gt;
       &amp;lt;parameter name="platform" value="MacOS Catalina"/&amp;gt;
       &amp;lt;parameter name="resolution" value="1024x768"/&amp;gt;
       &amp;lt;classes&amp;gt;
           &amp;lt;class name="AutomationDemo"&amp;gt; &amp;lt;/class&amp;gt;
       &amp;lt;/classes&amp;gt;
   &amp;lt;/test&amp;gt;
&amp;lt;/suite&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import org.openqa.selenium.*;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;

public class AutomationDemo
{
   WebDriver driver = null;
   public static String status = "passed";
   String username = "user_name";
   String access_key = "access_key";

   String testURL = "https://todomvc.com/examples/react/#/";
   String testURLTitle = "React ‚Ä¢ TodoMVC";

   @BeforeTest
   @Parameters(value={"browser","version","platform", "resolution"})
   public void testSetUp(String browser, String version, String platform, String resolution) throws Exception
   //public void testSetUp() throws Exception
   {
       DesiredCapabilities capabilities = new DesiredCapabilities();
       capabilities.setCapability("build", "[LambdaTest] Demonstration of Selenium Automation Testing");
       capabilities.setCapability("name", "[LambdaTest] Demonstration of Selenium Automation Testing");
       capabilities.setCapability("platform", platform);
       capabilities.setCapability("browserName", browser);
       capabilities.setCapability("version",version);
       capabilities.setCapability("resolution",resolution);
       capabilities.setCapability("tunnel",false);
       capabilities.setCapability("network",true);
       capabilities.setCapability("console",true);
       capabilities.setCapability("visual",true);

       try
       {
           driver = new RemoteWebDriver(new URL("https://" + username + ":" + access_key + "@hub.lambdatest.com/wd/hub"), capabilities);
       }
       catch (MalformedURLException e)
       {
           System.out.println("Invalid grid URL");
       }
       System.out.println("Started session");
   }

   @Test(description="To Do App on React App")
   public void test_element_addition() throws InterruptedException
   {
       driver.get(testURL);
       Thread.sleep(5000);

       /* Selenium Java 3.141.59 */
       WebDriverWait wait = new WebDriverWait(driver, 5);
       /* WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10)); */

       /* Click on the Link */
       By elem_new_item_locator = By.xpath("//input[@class='new-todo']");
       WebElement elem_new_item = driver.findElement(elem_new_item_locator);

       /* Add 5 items in the list */
       Integer item_count = 5;

       for (int count = 1; count &amp;lt;= item_count; count++)
       {
           /* Enter the text box for entering the new item */
           elem_new_item.click();
           elem_new_item.sendKeys("Adding a new item " + count + Keys.ENTER);
           Thread.sleep(2000);
       }

       WebElement temp_element;

       /* Now that the items are added, we mark the top three items as completed */
       for (int count = 1; count &amp;lt;= item_count; count++)
       {
           Integer fixed_cta_count = 1;

           /* Enter the text box for entering the new item */
           /* Create a varying string to create a new XPath */
           String xpath_str = "//ul[@class='todo-list']/li[" + fixed_cta_count + "]" + "//input[@class='toggle']";
           temp_element = driver.findElement(By.xpath(xpath_str));

           temp_element.click();
           Thread.sleep(2000);
           /* Toggle button to destroy */
           driver.findElement(By.xpath("//li[@class='completed']//button[@class='destroy']")).click();
           Thread.sleep(1000);
       }

       /* Once you are outside this code, the list would be empty */
   }

   @AfterTest
   public void tearDown()
   {
       if (driver != null)
       {
           ((JavascriptExecutor) driver).executeScript("lambda-status=" + status);
           driver.quit();
       }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Code Walkthrough&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Addition of Project Dependencies&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have created a new Maven project in IntelliJ IDEA. Once the project is created, the necessary dependencies are added in pom.xml. The POM file contains all the project configurations and dependencies that are used by Maven for building the project.&lt;/p&gt;

&lt;p&gt;For demonstrating cross browser testing with Selenium, we have used the Selenium 3.141.59 on LambdaTest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DIl2ZdXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a7t8w0p9q9d85xaef1o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DIl2ZdXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a7t8w0p9q9d85xaef1o.png" alt="Code" width="860" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The requisite test combinations would be passed in the form of parameters to the test method. Parameterized testing in TestNG is one of the ideal ways to provide test scenarios with different test combinations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G1L-mwA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uora1t04uo1la2nvjlo8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G1L-mwA6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uora1t04uo1la2nvjlo8.png" alt="Code" width="734" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Implementation of Test Method&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have only one test method in src\test\java\Automation.java. We import all the necessary packages at the start of the implementation. Since Selenium cross browser testing is performed on the cloud grid (i.e. LambdaTest), we import the methods in the RemoteWebDriver class.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XNXfV2lp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0cv59ipu4m82a575bqp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XNXfV2lp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0cv59ipu4m82a575bqp.png" alt="Code" width="880" height="221"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we are using Selenium 3, we would be using the methods provided by the DesiredCapabilities class. It is important to note that DesiredCapabilities is deprecated in Selenium 4. Please refer to our What is Deprecated in Selenium 4 blog that deep dives into the additions and depreciation in the Selenium 4 release.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tPqrIBNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1r1so3ciilzxg44rk9go.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPqrIBNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1r1so3ciilzxg44rk9go.png" alt="Code" width="880" height="207"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Different annotations in TestNG like @BeforeTest, &lt;a class="mentioned-user" href="https://dev.to/test"&gt;@test&lt;/a&gt;, @Parameters, @AfterTest, etc. are used for creating more robust tests. The methods implemented under @BeforeTest &amp;amp; @AfterTest annotations are invoked respectively before &amp;amp; after the execution of the test methods.&lt;/p&gt;

&lt;p&gt;The cleanup activity (or Teardown) is normally done as a part of the method implemented under the @AfterTest annotation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RM6HJXLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/caenvf9feovz68u2wfe2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RM6HJXLw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/caenvf9feovz68u2wfe2.png" alt="Code" width="880" height="207"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OfKBhrjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alk30y3bk2chaetq5aaa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OfKBhrjI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/alk30y3bk2chaetq5aaa.png" alt="Code" width="880" height="212"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The testSetUp method implemented under the @BeforeTest annotation is a parameterized method that takes the following input parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;browser&lt;/li&gt;
&lt;li&gt;version&lt;/li&gt;
&lt;li&gt;platform&lt;/li&gt;
&lt;li&gt;resolution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These test combinations are passed from testng.xml. We will be discussing the same in the next section.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qPWrT26A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xef2ovu9ap3my44u0dos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qPWrT26A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xef2ovu9ap3my44u0dos.png" alt="Code" width="880" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A new object named capabilities of the type DesiredCapabilities is created in the testSetUp method. The capabilities object sets the browser, browser version, platform, and other relevant properties that are necessary for performing cross browser testing using Selenium.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8FtHPjyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eekydavycz9f441v9s51.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FtHPjyS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eekydavycz9f441v9s51.png" alt="Code" width="880" height="272"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the tests are run on the Selenium cloud grid on LambdaTest, the desired capabilities are generated using the Selenium Capabilities Generator on LambdaTest.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DadQ2Xb0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bhisa5u443p5nqtbwke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DadQ2Xb0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bhisa5u443p5nqtbwke.png" alt="Selenium Capabilities Generator" width="880" height="317"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An instance of RemoteWebDriver in Selenium created in the testSetUp method. The following parameters are passed to the RemoteWebDriver method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;username&lt;/li&gt;
&lt;li&gt;accesskey&lt;/li&gt;
&lt;li&gt;LambdaTest Hub URL [i.e. @hub.lambdatest.com/wd/hub]&lt;/li&gt;
&lt;li&gt;capabilities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MapmIEp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3n2iks4acxc66k3ob0rk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MapmIEp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3n2iks4acxc66k3ob0rk.png" alt="code" width="880" height="241"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the test method test_element_addition(), we first set the test URL using driver.get in Selenium. For adding a new item in the ToDo list, we first use the relevant locators in Selenium to find the desired WebElement in the DOM. In our case, we have used the XPath locator in Selenium to locate the required element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--huMmk2Ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrghgkstx6gd5ukag767.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--huMmk2Ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrghgkstx6gd5ukag767.png" alt="Selenium Locator" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;findElement in Selenium WebDriver is used for accessing the element that was earlier located using the XPath locator. The XPath locators cheat sheet is the ideal resource in case you want to check the numerous ways of using the XPath locator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VEN11cit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qte296tf0kn3i04dwko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VEN11cit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qte296tf0kn3i04dwko.png" alt="Code" width="880" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we want to add 5 elements in the ToDo list, we run a for loop of 1 to 5 where the required item is added to the list. Click method in Selenium is used for clicking inside the text box where the text for ToDo item needs to be inserted.&lt;/p&gt;

&lt;p&gt;The send_keys method which is a part of the Action Class in Selenium is used for entering a new item to the list. Keys.ENTER simulates the Enter key, owing to which the desired item (or text) is added to the list.&lt;/p&gt;

&lt;p&gt;You can read our detailed tutorial on keyboard actions in Selenium WebDriver to know more about handling keyboard actions with Selenium. A sleep of 2000 ms (i.e. 2 seconds) is added to ensure that the elements to be interacted with are available in the DOM. Waits in Selenium are used for handling dynamic elements on a web page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ue93m_9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyjskrlxb9i53ekqixe6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ue93m_9a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyjskrlxb9i53ekqixe6.png" alt="Code" width="880" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the 5 items are added to the ToDo list, we use a simple logic to locate each item using its XPath. In our case, we have used the POM Builder extension in Chrome that helps compute dynamic XPath with ease.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQnYx7Ur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hnd38nmq6oojld5p404.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQnYx7Ur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hnd38nmq6oojld5p404.png" alt="X path" width="880" height="625"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q4ystFEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkiw5tcu8n8hltze1stv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q4ystFEM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkiw5tcu8n8hltze1stv.png" alt="Code" width="880" height="177"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that the element is located, the click method in Selenium is used for clicking the element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qBmxNgxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50u2nii6ob7r4fgzyxhs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qBmxNgxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50u2nii6ob7r4fgzyxhs.png" alt="Code" width="880" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thread sleep in Selenium Java is used for adding a few seconds of delay. Though we have used it for demonstrating cross browser testing using Selenium, thread sleep should not be used for large-scale test applications. The destroy (or ‚Äòx‚Äô) icon is located using its XPath.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cIYM13aS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka6mh0kfzs4bffze7g3i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cIYM13aS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka6mh0kfzs4bffze7g3i.png" alt="Selenium Testing" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the click method is applied on the destroy icon, the respective item is removed from the ToDo list. The same steps are repeated until the entire list is empty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G0rmxrL3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1ookk3o24n6ou7cagaw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G0rmxrL3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i1ookk3o24n6ou7cagaw.png" alt="code" width="880" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the method implemented under the @AfterTest annotation, JavaScriptExecutor in Selenium WebDriver is used for executing JavaScript code from WebDriver. The executeScript method executes JavaScript in the context of the currently selected window or frame in Selenium.&lt;/p&gt;

&lt;p&gt;Finally, quit in Selenium WebDriver closes all the browser windows and releases all the resources used by the WebDriver instance by terminating all the instances of WebDriver.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nO8MykRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnfrdi8ov0ibh5da5qn2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nO8MykRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bnfrdi8ov0ibh5da5qn2.png" alt="Code" width="880" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Passing Test Parameters from testng.xml&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The test suite comprises a single test that is run against three different browser and OS combinations. Parallel execution with TestNG in Selenium is used for achieving parallelism at the ‚Äútests‚Äù level. This means that the test against 3 input combinations is run in parallel on the LambdaTest cloud grid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K7m2QSws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9plvbazhofiyjurmdsc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K7m2QSws--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k9plvbazhofiyjurmdsc.png" alt="Code" width="880" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The  tag in TestNG lets you pass the parameter(s) to the tests. In this cross browser testing in Selenium demo, three test combinations are added in testng.xml.&lt;/p&gt;

&lt;p&gt;Execution&lt;/p&gt;

&lt;p&gt;To run the tests, right click on testng.xml in the IDE and press Run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XRcckZeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s63gs2rjnwrdmc6vrn6q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XRcckZeY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s63gs2rjnwrdmc6vrn6q.png" alt="Testing" width="880" height="1556"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hop on to Automation Dashboard on LambdaTest to check the status of the test execution. My plan on LambdaTest supports parallel execution upto five tests. As seen below, three tests are running in parallel on the LambdaTest cloud Selenium Grid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9b42yIIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic7gjvs266upt98bk46e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9b42yIIf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ic7gjvs266upt98bk46e.png" alt="Automation Test" width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can click on videos, logs, and other available information to gain more insights on the test execution. As seen below, the demo on cross browser testing in Selenium was successful since all the three tests passed without any failures.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I2F4GLXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9un6x9ah0n9o8vjmetg6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I2F4GLXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9un6x9ah0n9o8vjmetg6.png" alt="Testing" width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;Cross browser testing is crucial when launching a website or web application. It ensures you reach your audience with a consistent and flexible approach to browsing online. However, the biggest concern of organizations is how to perform cross browser testing. The manual testing approach can be straining, time-consuming, and expensive for modern businesses.&lt;/p&gt;

&lt;p&gt;Automated cross-browser testing using frameworks like &lt;a href="https://www.lambdatest.com/selenium?utm_source=devto&amp;amp;utm_medium=organic&amp;amp;utm_campaign=jan18_cd&amp;amp;utm_term=rn&amp;amp;utm_content=webpage"&gt;Selenium&lt;/a&gt; is the best solution for businesses of all sizes. LambdaTest proves to be the best option for any business need with real-time cross browser testing using Selenium Grid.&lt;/p&gt;

&lt;p&gt;In this Selenium WebDriver tutorial, we have discussed the key components of the Selenium WebDriver framework, such as its architecture and browser compatibility, and highlight the most useful features in Selenium 4.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>test</category>
    </item>
    <item>
      <title>How to Create a Progressive Web App with Angular</title>
      <author>Kingsley Ubah</author>
      <pubDate>Tue, 18 Jan 2022 14:51:51 +0000</pubDate>
      <link>https://dev.to/sanity-io/how-to-create-a-progressive-web-app-with-angular-2dgi</link>
      <guid>https://dev.to/sanity-io/how-to-create-a-progressive-web-app-with-angular-2dgi</guid>
      <description>&lt;p&gt;In this guide, we'll learn how to create an angular application with PWA features, making it act and feel like a progressive web application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-progressive-web-app"&gt;
  &lt;/a&gt;
  What is a Progressive Web App?
&lt;/h2&gt;

&lt;p&gt;Progressive Web Apps, also known as PWAs are basically web applications enhanced to look and feel like native apps.&lt;/p&gt;

&lt;p&gt;PWAs are configured to run on multiple devices using a single codebase. Thus once a progressive web app is deployed to the web, the app is also installable as a native application.&lt;/p&gt;

&lt;p&gt;PWAs can be made to work offline using service workers; service workers can be used to cache and display content to a user even when the user is offline. No more error page with a dinosaur game.&lt;/p&gt;

&lt;p&gt;Progressive Web Apps have been increasingly popular in the last couple of years as developers look for ways to increase the reach of their applications and improve user experience on their apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-an-angular-project-with-the-angular-cli"&gt;
  &lt;/a&gt;
  Setting Up an Angular Project with the Angular CLI
&lt;/h2&gt;

&lt;p&gt;Let's install the Angular CLI and create a new Angular project with it.&lt;/p&gt;

&lt;p&gt;As a prerequisite, you must have the latest versions of node.js and NPM (Node package manager) installed on your system to be able to install and use the Angular CLI. &lt;/p&gt;

&lt;p&gt;At the time of writing, the current LTS version of node.js is v16.13.1. Head to the official website and &lt;a href="https://nodejs.org/en/download/"&gt;grab the installers for your operating system.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you have the latest version of node.js installed, head over to a new command-line interface and run the following command to install the Angular CLI globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;angular&lt;/span&gt;&lt;span class="sr"&gt;/cl&lt;/span&gt;&lt;span class="err"&gt;i
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's create an angular app via the CLI using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ng&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;pwa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To configure your app, the CLI will first ask if you want to install the Angular router and then prompt you to select a stylesheet. You should install the router and select the default CSS for styling.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ng new&lt;/code&gt; command will create a workspace folder named &lt;code&gt;pwa-app&lt;/code&gt; and generate the angular materials and files inside of it.&lt;/p&gt;

&lt;p&gt;If you are setting out with the intention of building a progressive app with Angular, you can just add the &lt;code&gt;--service-worker&lt;/code&gt; flag to the command, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ng&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;pwa&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, for the sake of learning, we'll go with the former approach so we can later add the service worker package using the &lt;code&gt;ng add&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Once the folder is generated, run the ng build command to generate build files for your app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ng&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt; 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Barring any issues, your app's final build files will be bundled into a directory named &lt;code&gt;dist/&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3M8ib6Yx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/two83vbb4uwss1z1x7ix.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3M8ib6Yx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/two83vbb4uwss1z1x7ix.png" alt="CLI after building app" width="764" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the browser files ready, you can now serve your app by running the &lt;code&gt;npm run start&lt;/code&gt; script, this will in turn execute on the &lt;code&gt;ng serve&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;Follow the link provided on your command terminal and you will be directed to the starter page for your Angular project, hosted on &lt;a href="http://localhost:4200/"&gt;http://localhost:4200/&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--238_TYO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xcdmkr801apqrex78o2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--238_TYO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9xcdmkr801apqrex78o2.png" alt="Starter Page for Angular" width="880" height="714"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please note that at this point, our app is not yet a progressive web app. You can check for this by inspecting your page‚Äôs HTML file using your browser's developer tool.&lt;/p&gt;

&lt;p&gt;If you are on chrome, open your developer tool with &lt;code&gt;cmd&lt;/code&gt;+&lt;code&gt;shift&lt;/code&gt;+&lt;code&gt;i&lt;/code&gt;, click on the Application tab, and then navigate to the Service Workers tab. As shown below, our app has no registered service worker:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R5VrPz2e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3k05m88pfc0bi2jd0gt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R5VrPz2e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3k05m88pfc0bi2jd0gt.png" alt="Without Service Worker" width="687" height="299"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now select the offline checkbox to simulate offline mode on your browser.&lt;/p&gt;

&lt;p&gt;After simulating offline mode, go ahead and refresh the page. The following page will be displayed if you are on Google Chrome:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Aob-uMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zurmrbc8tdhe9y9bd5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Aob-uMo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0zurmrbc8tdhe9y9bd5j.png" alt="Internet Switched Off" width="524" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the following section, we'll add the angular PWA library to our angular app using the &lt;code&gt;ng add&lt;/code&gt; command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-angular-service-worker-with-angularpwa"&gt;
  &lt;/a&gt;
  Adding Angular Service Worker with @angular/pwa
&lt;/h2&gt;

&lt;p&gt;A service worker is a JavaScript file that is run by your browser in the background, separate from your web page, and handles events fired either by the browser or your webpage. Service workers can be used to make a web page work offline or to make the page perform well on slow networks.&lt;/p&gt;

&lt;p&gt;Now that we have created an Angular project from scratch, let's turn it into a progressive web application.&lt;/p&gt;

&lt;p&gt;Open your command terminal, then cd to your workspace folder and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ng&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;angular&lt;/span&gt;&lt;span class="sr"&gt;/pw&lt;/span&gt;&lt;span class="err"&gt;a
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will generate templates and files for your PWA. Here's the image of all generated files:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rY8YR5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m57swft7h4u6j16vprq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rY8YR5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7m57swft7h4u6j16vprq.png" alt="Installing Angular PWA package" width="539" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once installation is complete, rebuild and serve your app with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="nx"&gt;ng&lt;/span&gt; &lt;span class="nx"&gt;serve&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Follow the link to the browser and open the service worker tab on the developer tool just like before. This time you'll find a registered service worker file called &lt;code&gt;ngsw-worker.js&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OpaGmA0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbphsu3tzhtnbnrv5b6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OpaGmA0v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbphsu3tzhtnbnrv5b6x.png" alt="Service Worker Now registered" width="716" height="336"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll also find information about your PWA under the Manifest tab:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9E-zzrlr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xducgphtyh5d235gkzh8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9E-zzrlr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xducgphtyh5d235gkzh8.png" alt="Web Manifest shown on DevTool" width="768" height="615"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks to caching from the service worker, your PWA will still be displayed even without an internet connection.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;manifest.webmanifest&lt;/code&gt; and &lt;code&gt;ngsw-config.json&lt;/code&gt; files were generated as a result of adding the &lt;code&gt;@angular/pwa&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Now let's take a brief look at these two files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#customize-your-pwa-with-the-web-app-manifest"&gt;
  &lt;/a&gt;
  Customize your PWA with the Web App Manifest
&lt;/h2&gt;

&lt;p&gt;Every PWA should have a web app manifest. The &lt;code&gt;manifest.webmanifest&lt;/code&gt; file found in the &lt;code&gt;dist/pwa-app&lt;/code&gt; folder contains information regarding the appearance and behaviour of your PWA.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pwa-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;short_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pwa-app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;theme_color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#1976d2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background_color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fafafa&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;display&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;standalone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scope&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start_url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icons&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;assets/icons/icon-72x72.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sizes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;72x72&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;assets/icons/icon-96x96.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sizes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;96x96&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="c1"&gt;// other icons&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This includes the name for your app which will show up on the home screen, the theme and background colours, the URL which should be loaded when the application is launched, as well as the different icons for your app's use.&lt;/p&gt;

&lt;p&gt;You can customize your app's properties by changing the values in the JSON object inside of the &lt;code&gt;manifest.webmanifest&lt;/code&gt; file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#service-worker-configuration-with-ngswconfigjson"&gt;
  &lt;/a&gt;
  Service worker configuration with ngsw-config.json
&lt;/h2&gt;

&lt;p&gt;Another file generated by adding the angular PWA library is the &lt;code&gt;ngsw-config.json&lt;/code&gt; file, found in the root directory. &lt;/p&gt;

&lt;p&gt;This config file is used to specify which files and data URLs the service worker should cache and how it should update the cached files and data. &lt;a href="https://angular.io/guide/service-worker-config"&gt;More detailed documentation on available configuration options can be found here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's take a look at how to use this file to cache resources and API endpoints for offline display.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caching-resources-for-offline-use"&gt;
  &lt;/a&gt;
  Caching resources for offline use
&lt;/h3&gt;

&lt;p&gt;Suppose you want to cache a set of fonts for offline use, you'll have to manually add a &lt;code&gt;urls&lt;/code&gt; entry for those resources inside the &lt;code&gt;resources&lt;/code&gt; object as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// [...]&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;installMode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prefetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resources&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;files&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/favicon.ico&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/manifest.webmanifest&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/*.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/*.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;urls&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@700&amp;amp;display=swap&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="c1"&gt;// other resources goes here&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="c1"&gt;// [...]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are adding the Roboto font to be cached by the service worker. Every resource you add inside the array will be accessed by the PWA in offline mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#caching-data-from-api-endpoints-for-offline-use"&gt;
  &lt;/a&gt;
  Caching data from API endpoints for offline use
&lt;/h3&gt;

&lt;p&gt;Within &lt;code&gt;ngsw-config.js&lt;/code&gt;, you can also cache data from API (Application Programming Interface) endpoints. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dataGroups&lt;/code&gt; field accepts an array of API groups which should be cached by the service worker.&lt;/p&gt;

&lt;p&gt;Suppose our PWA displays the latest football results which it retrieves from an API endpoint. We can cache the API by inserting it into a &lt;code&gt;dataGroups&lt;/code&gt; array as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$schema&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./node_modules/@angular/service-worker/config/schema.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/index.html&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;assetGroups&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="c1"&gt;// [...]&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dataGroups&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;football-results-api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;urls&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;https://api.footyresults.com/list&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cacheConfig&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;strategy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;freshness&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;maxSize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;maxAge&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;10min&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;dataGroups&lt;/code&gt; tells the service worker what APIs to cache for offline use.&lt;/p&gt;

&lt;p&gt;Each API group is defined inside an object. In our example, we defined a name for our API using the &lt;code&gt;name&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;Under the &lt;code&gt;url&lt;/code&gt; property, we supplied the URL to the API that we want the service worker to cache. Since it is an array, we can pass in multiple URLs all of which will be under the same API name.&lt;/p&gt;

&lt;p&gt;The final property is &lt;code&gt;cacheConfig&lt;/code&gt;, which has a value set to an object with some options. &lt;code&gt;freshness&lt;/code&gt; checks for the endpoint(s) before falling back to the service worker cache. &lt;code&gt;maxSize&lt;/code&gt; defines the maximum number of responses that the service worker should cache, and &lt;code&gt;maxAge&lt;/code&gt; defines how long the cache is valid for.&lt;/p&gt;

&lt;p&gt;You can learn more about cache configuration options from the angular docs.&lt;/p&gt;

&lt;p&gt;Without an internet connection, the PWA will show the last cached football results. After the user comes back online, the PWA will then pull the latest football results from the football results API.&lt;/p&gt;

&lt;p&gt;Thus after 10 minutes, the list of results cached by the service worker will become invalid and as a result, a newer version of data will be cached from the API for offline display.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-your-pwa-with-swupdate"&gt;
  &lt;/a&gt;
  Update your PWA with SwUpdate
&lt;/h3&gt;

&lt;p&gt;Whenever you deploy a new version of your PWA, it might take a while for the updates to reflect on the page.&lt;/p&gt;

&lt;p&gt;For example, inside &lt;code&gt;pwa-app/src/app/app.component.html&lt;/code&gt;, if you change any text content, save the file, rebuild the app and then restart your server, it might take a while for your updates to reflect, though this depends on your cache policies.&lt;/p&gt;

&lt;p&gt;This issue can be resolved using the &lt;code&gt;SwUpdate&lt;/code&gt; class from the Angular service worker library. &lt;code&gt;SwUpdate&lt;/code&gt; basically tells the service worker to update the PWA whenever an update is available.&lt;/p&gt;

&lt;p&gt;Inside &lt;code&gt;/src/app.component.ts&lt;/code&gt;, we'll use &lt;code&gt;swUpdate&lt;/code&gt; to tell the service worker to check the http server for updates using the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SwUpdate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/service-worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pwa-app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;swUpdate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SwUpdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;swUpdate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;available&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;swUpdate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;available&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we create a constructor method on our &lt;code&gt;app&lt;/code&gt; component, passing in &lt;code&gt;SwUpdate&lt;/code&gt; as an argument. Inside the constructor method, we subscribe to an event with a callback function that triggers a page reload.&lt;/p&gt;

&lt;p&gt;Save the file. Rebuild your app and view it on the browser. Now any updates you make will reflect on the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--27deNrMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbkhwv16h47gpjf1o779.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--27deNrMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jbkhwv16h47gpjf1o779.png" alt="Updated Page" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Throughout this guide, we have walked through the process of creating a progressive web application with the Angular framework.&lt;/p&gt;

&lt;p&gt;We have covered the &lt;code&gt;manifest.webmanifest&lt;/code&gt; file which is used for setting the metadata for a progressive web application. We also used the &lt;code&gt;ngsw-config.js&lt;/code&gt; to cache resources and API data for offline usage.&lt;/p&gt;

&lt;p&gt;You can learn more about progressive web apps and service workers in Angular by reading &lt;a href="https://angular.io/guide/service-worker-intro"&gt;the Service Worker and PWA guide from the official Angular documentation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Laravel Community Surprised Me!</title>
      <author>Mostafa Said</author>
      <pubDate>Tue, 18 Jan 2022 14:39:25 +0000</pubDate>
      <link>https://dev.to/moose_said/laravel-community-surprised-me-4pe8</link>
      <guid>https://dev.to/moose_said/laravel-community-surprised-me-4pe8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#today-is-special"&gt;
  &lt;/a&gt;
  Today is special
&lt;/h2&gt;

&lt;p&gt;Unexpectedly Laravel community surprised me! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--51I9HFlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642101019222/UKK_f8fy1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--51I9HFlm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642101019222/UKK_f8fy1.png" alt="image.png" width="593" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#let-me-tell-you-the-whole-story-from-the-very-beginning"&gt;
  &lt;/a&gt;
  Let me tell you the whole story from the very beginning:
&lt;/h2&gt;

&lt;p&gt;I work as a Business Operations Specialist at VodafoneGroup (_VOIS) and I actually love it and I'm very good with Project Management, Operations Management and communication.&lt;/p&gt;

&lt;p&gt;I started to learn Web Development '2' months ago hoping that I will be able to shift my career eventually. You may be wondering now "Since you're good at your job and you love it, why would you do career shifting?", and that's a good question but allow me to answer that in another post later. For now, let me focus on the great surprise.&lt;/p&gt;

&lt;p&gt;I spent the past 2 months self-motivating and praising myself for every little accomplishment on twitter even though I didn't have audience at all except the auto-bots retweeting my tweets with hashtags.&lt;/p&gt;

&lt;p&gt;Few days ago I released my first complete Laravel project on GitHub and started to share it on twitter with my !audience and of course I found almost no motivation at all as if I created nothing. I was so disappointed because I thought what I created was very cool for only '1' month studying Laravel but felt like that I built something cool yet no one came to see it.&lt;/p&gt;

&lt;p&gt;But that didn't stop me from self motivating and keep sharing it and modify the repository on GitHub everyday. I kept exciting myself and before going to sleep I imagine myself creating even more awesome content to an extent that it wakes me up all night. &lt;/p&gt;

&lt;p&gt;And then.. Povilas happened! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-woke-up-to-this"&gt;
  &lt;/a&gt;
  I woke up to this:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yCIa0lrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642102776319/69rstEFjj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yCIa0lrE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642102776319/69rstEFjj.png" alt="image.png" width="593" height="529"&gt;&lt;/a&gt;&lt;br&gt;
Tweet:  &lt;a href="https://dev.toLink"&gt;https://twitter.com/PovilasKorop/status/1481516878384320516&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I didn't even have the chance to wash my face or get ready to attend a scheduled meeting related to my current job. I just watched this great motivational video on LaravelDaily Youtube Channel :&lt;br&gt;
 &lt;a href="https://dev.toLink"&gt;https://www.youtube.com/watch?v=FBk56ocB2D8&amp;amp;t=208s&lt;br&gt;
&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In case you don't have the time to watch the video. In this video Povilas is saying that &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mostafa is an inspiration to others and he should be proud of himself.&lt;/p&gt;

&lt;p&gt;Mostafa reminds me of myself when I started LaravelDaily in 2015.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He discussed my project, recommended modifications and some other pretty cool stuff..&lt;/p&gt;

&lt;p&gt;This might mean nothing to someone else but for me it meant the world really! I mean I was learning while having hundreds of thoughts everyday thinking if I'm doing the right thing or should I just stick with the job I have. And then something like this happens out of nowhere! Someone you look up to and learn from, suddenly he is giving you a shout-out and good feedback in front of his fans and followers. &lt;/p&gt;

&lt;p&gt;You might think this is funny but my wife told me that this could be some sort of a sign that I'm in the right direction and that I should continue chasing my dream of becoming a great Web Developer. And I choose to see it the same way she sees it. And I shall continue chasing my dream.&lt;/p&gt;

&lt;p&gt;Today I felt that I belong to a community, and I love it. &lt;/p&gt;

&lt;p&gt;And you know what? I will make all new developers feel the same as much as I can.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>webdev</category>
      <category>twitter</category>
      <category>github</category>
    </item>
    <item>
      <title>Why We‚Äôre Bringing ‚ÄúGoogle Maps for Code‚Äù to Node.js Apps</title>
      <author>Kevin Gilpin</author>
      <pubDate>Tue, 18 Jan 2022 14:18:35 +0000</pubDate>
      <link>https://dev.to/appland/why-were-bringing-google-maps-for-code-to-nodejs-apps-45mg</link>
      <guid>https://dev.to/appland/why-were-bringing-google-maps-for-code-to-nodejs-apps-45mg</guid>
      <description>&lt;p&gt;We love JavaScript and TypeScript just as much as the next dev, but building high-performing, highly scalable Node.js apps sure isn‚Äôt easy! In particular, determining how exactly components work and interact with each other in different libraries and frameworks can be really challenging. &lt;/p&gt;

&lt;p&gt;Also, event-driven code execution makes it hard to understand how Node.js backend code actually works, especially when you‚Äôre working with older code that uses callbacks (&lt;a href="http://callbackhell.com/"&gt;callback hell&lt;/a&gt;  or &lt;a href="https://en.wikipedia.org/wiki/Pyramid_of_doom_(programming)"&gt;pyramid of doom&lt;/a&gt;, anyone?!). JavaScript‚Äôs relative lack of guardrails and not dictating design patterns as much as other languages do is great, but that increased freedom means you need solid architectural oversight and thorough code reviews. &lt;/p&gt;

&lt;p&gt;We‚Äôve also found that while the Node.js core is super stable, the dev tooling is a bit immature compared to other languages. If you‚Äôre not careful, you end up writing messy Node.js apps. It takes a lot of grit and discipline to write really good JavaScript and TypeScript code! This is probably why the languages can be so difficult to learn on your own, and why skilled JavaScript and TypeScript developers can be so hard to find.&lt;/p&gt;

&lt;p&gt;So‚Ä¶ let‚Äôs solve some of these challenges, shall we?! &lt;/p&gt;

&lt;p&gt;We are THRILLED to announce that after many requests from &lt;a href="https://appland.com/community/"&gt;our community&lt;/a&gt;, we‚Äôre releasing the &lt;a href="https://appland.com/docs/quickstart/"&gt;beta version of AppMap for JavaScript&lt;/a&gt;!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-appmap"&gt;
  &lt;/a&gt;
  What‚Äôs AppMap?
&lt;/h3&gt;

&lt;p&gt;Here‚Äôs the deal for those of you who aren‚Äôt yet familiar: &lt;a href="https://appland.com/docs/appmap-overview.html"&gt;AppMap&lt;/a&gt; is like Google Maps for your backend code. It works with Ruby, Java, Python - and now JavaScript and TypeScript. AppMap collects information about how your code works and what it does as your code runs, and this information is presented as interactive maps (aka AppMaps) that you can search and navigate. It works equally well with monolithic code bases and microservices.  &lt;/p&gt;

&lt;p&gt;AppMap is free and open source, and you can use it right in your code editor (&lt;a href="https://marketplace.visualstudio.com/items?itemName=appland.appmap"&gt;VSCode&lt;/a&gt; or &lt;a href="https://plugins.jetbrains.com/plugin/16701-appmap"&gt;JetBrains&lt;/a&gt;) so your flow isn‚Äôt ever interrupted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-can-i-do-with-it"&gt;
  &lt;/a&gt;
  What can I do with it?
&lt;/h3&gt;

&lt;p&gt;AppMap is a really helpful tool for working with complex languages like JavaScript and TypeScript, because it allows you to a) understand what exactly you‚Äôve just built and b) what other devs have built. &lt;/p&gt;

&lt;p&gt;For example, you can use AppMap to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Document and explain your code&lt;/em&gt;&lt;/strong&gt; -- AppMap automatically documents end-to-end code and data flows, web services catalogs and your app‚Äôs database schema as you work. You can also record interactive maps of any piece of code and share it with other devs via a URL or by attaching it to a ticket in Jira or GitHub to clearly communicate your code‚Äôs behavior, logic and design.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Understand how new-to-you code works&lt;/em&gt;&lt;/strong&gt; -- Instead of trying to decipher an entirely new codebase, you can use AppMaps to learn and read just the code that‚Äôs relevant to your task. Source code is just a click away, so you can easily move back and forth between high-level code design views, code execution traces and source code details.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Debug code&lt;/em&gt;&lt;/strong&gt; -- Since AppMap provides interactive maps of all the factors that might be contributing to a bug, you can figure out where things are going wrong. You can quickly navigate around source code, and see parameter values, HTTP server and client requests and complete SQL queries.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-requirements"&gt;
  &lt;/a&gt;
  What are the requirements?
&lt;/h3&gt;

&lt;p&gt;You‚Äôll need Node v14, 16, 17 (latest update) to get the most out of AppMap for JavaScript. &lt;/p&gt;

&lt;p&gt;Currently, AppMap for JavaScript is optimized to work with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An application that has mocha tests, mocha &amp;gt;= 8.0.0 (older versions are not supported)&lt;/li&gt;
&lt;li&gt;An application that uses the Express.js framework 4.x&lt;/li&gt;
&lt;li&gt;A git repository&lt;/li&gt;
&lt;li&gt;An application that uses one of these DB drivers: mysql, pg or sqlite3&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-do-i-get-started"&gt;
  &lt;/a&gt;
  How do I get started?
&lt;/h3&gt;

&lt;p&gt;Here‚Äôs a brief video that walks you through how to install the AppMap extension for VSCode, how to install the AppMap agent for JavaScript and how to use them to visualize the architecture of a Node.js application: &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qFjBiLVGXgg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-can-i-find-more-info"&gt;
  &lt;/a&gt;
  Where can I find more info?
&lt;/h3&gt;

&lt;p&gt;Check out &lt;a href="https://appland.com/docs/appmap-overview.html"&gt;our doc site&lt;/a&gt; for more info on how AppMap works and what you can use it for. A detailed reference guide for AppMap for JavaScript can be found &lt;a href="https://appland.com/docs/reference/appmap-agent-js.html"&gt;here&lt;/a&gt; and breakdown of the install process is available &lt;a href="https://github.com/land-of-apps/appmap-agent-js-demo/tree/main/appmap"&gt;here&lt;/a&gt;. For more AppMap tutorials, check out &lt;a href="https://appland.com/blog/"&gt;our blog&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCxVv4gVnr2Uf2PSzoELZUcg"&gt;YouTube channel&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Let us know what you think or if you have any questions! You can &lt;a href="https://discord.com/invite/N9VUap6"&gt;chat with us 1:1 on our Discord server&lt;/a&gt;, &lt;a href="https://twitter.com/landofapps"&gt;tweet us @LandofApps&lt;/a&gt; or &lt;a href="//mailto:%20support@app.land"&gt;email us anytime&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Happy AppMapping!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
  </channel>
</rss>
