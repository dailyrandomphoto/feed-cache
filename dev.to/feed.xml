<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Automate Azure Service Bus SAS tokens with Github</title>
      <author>Marcel.L</author>
      <pubDate>Sun, 14 Nov 2021 10:04:58 +0000</pubDate>
      <link>https://dev.to/pwd9000/automate-azure-service-bus-sas-tokens-with-github-37ok</link>
      <guid>https://dev.to/pwd9000/automate-azure-service-bus-sas-tokens-with-github-37ok</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;In todays tutorial I will demonstrate how to use powerShell in Github Actions to automate Azure Service Bus SAS tokens to generate short lived usable tokens with a validity period of 10 minutes and securely store the newly generated SAS tokens inside of an Azure Key Vault ready for consumption.&lt;/p&gt;

&lt;p&gt;We will create an &lt;a href="https://docs.microsoft.com/en-gb/azure/service-bus-messaging/service-bus-messaging-overview"&gt;Azure Service Bus&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-gb/azure/key-vault/general/overview"&gt;Key Vault&lt;/a&gt; and a single &lt;strong&gt;reusable&lt;/strong&gt; github workflow to handle our SAS token requests as well as a service principal / Azure identity to fully automate everything. For the purpose of this demonstration we will also have a main workflow that is triggered manually. Our main workflow, when triggered, will first call our &lt;strong&gt;reusable&lt;/strong&gt; github workflow that will generate our temporary SAS token that will only be valid for 10 minutes and store the SAS token inside of the key vault (The token validity period can be adjusted based on your needs or requirement). Our main workflow will then retrieve the SAS token from the key vault and send the message through to our service bus queue.&lt;/p&gt;

&lt;p&gt;This means that whenever we need to call our service bus we can now generate a temporary SAS token to call our Azure service bus using a &lt;strong&gt;reusable&lt;/strong&gt; GitHub workflow to generate our token for us and we can access the token securely from key vault using a different process or even a different github workflow.&lt;/p&gt;

&lt;p&gt;Lets take a look at a sample use case flow diagram of how this would look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1FDO57P_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/flowdiag001.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1FDO57P_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/flowdiag001.png" alt="image.png" width="842" height="312"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Maintaining Service Bus SAS tokens using an Azure key vault is particularly useful for teams who maintain secrets management and need to ensure that only relevant users, principals and processes can access secrets from a secure managed location and also be rotated on a regular basis. Azure key vaults are also particularly useful for security or ops teams who maintain secrets management, instead of giving other teams access to your deployment repositories in Github, teams who look after deployments no longer have to worry about giving access to other teams in order to manage secrets as secrets management will be done from an Azure key vault which nicely separates roles of responsibility when spread across different teams.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#protecting-secrets-in-github"&gt;
  &lt;/a&gt;
  Protecting secrets in github
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.github.com/en/actions/reference/encrypted-secrets"&gt;Github Secrets&lt;/a&gt; is a great way that will allow us to store sensitive information in our organization, repository, or repository environments. In fact we will set up a github secret later in this tutorial that will allow us to authenticate to Azure.&lt;/p&gt;

&lt;p&gt;Even though this is a great feature to be able to have secrets management in Github, you may be looking after many repositories all with different secrets, this can become an administrative overhead when secrets or keys need to be rotated on a regular basis for best security practice, that's where &lt;a href="https://docs.microsoft.com/en-gb/azure/key-vault/general/overview"&gt;Azure key vault&lt;/a&gt; can also be utilized as a central source for all your secret management in your GitHub workflows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-we-need-to-start-generating-service-bus-sas-tokens"&gt;
  &lt;/a&gt;
  What do we need to start generating Service Bus SAS tokens?
&lt;/h3&gt;

&lt;p&gt;For the purpose of this demo and so you can follow along, I will set up the Azure environment with all the relevant resources described below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Azure key vault:&lt;/strong&gt; This will be where we centrally store, access and manage all our Service Bus SAS tokens.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Service Bus Namespace:&lt;/strong&gt; We will create a service Bus Namespace and Queue.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Azure AD App &amp;amp; Service Principal:&lt;/strong&gt; This is what we will use to authenticate to Azure from our github workflows.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Github repository:&lt;/strong&gt; This is where we will keep all our source code and workflows.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#create-an-azure-key-vault"&gt;
  &lt;/a&gt;
  Create an Azure key vault
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; A complete script for all the steps/Pre-Reqs described in building the environment can be found on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/main/posts/Github-Rotate-ServiceBus-SAS/code/Pre-Reqs.ps1"&gt;GitHub code page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this step I will be using Azure CLI using a powershell console. First we will log into Azure by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next we will set some variables:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;#Set variables&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$randomInt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Get-Random&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-Maximum&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;9999&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$subscriptionId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tsv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Actions-Service-Bus-Demo"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"UKSouth"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$keyVaultName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"secrets-vault&lt;/span&gt;&lt;span class="nv"&gt;$randomInt&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$nameSpaceName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"githubactions"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$queueName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"queue01"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$policyName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"myauthrule"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$currentUser&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;signed-in-user&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"objectId"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tsv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next we will create a &lt;code&gt;resource group&lt;/code&gt; and &lt;code&gt;key vault&lt;/code&gt; by running:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;#Create ResourceGroup and Key Vault&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$location&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;keyvault&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$keyVaultName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--resource-group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--enable-rbac-authorization&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;#Grant Key Vault Creator/Current User [Key Vault Secrets Officer]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;assignment&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--assignee-object-id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$currentUser&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Key Vault Secrets Officer"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--scope&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/subscriptions/&lt;/span&gt;&lt;span class="nv"&gt;$subscriptionId&lt;/span&gt;&lt;span class="s2"&gt;/resourceGroups/&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="s2"&gt;/providers/Microsoft.KeyVault/vaults/&lt;/span&gt;&lt;span class="nv"&gt;$keyVaultName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--assignee-principal-type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"User"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you see above we use the option &lt;code&gt;--enable-rbac-authorization&lt;/code&gt;. The reason for this is because our &lt;code&gt;current logged in user&lt;/code&gt; as well as our &lt;code&gt;service principal&lt;/code&gt; used by our github workflow we will create later, will access this key vault using the RBAC permission model. We also grant the key vault creator, in our case the &lt;code&gt;current logged in user&lt;/code&gt; &lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#key-vault-secrets-officer"&gt;Key Vault Secrets Officer&lt;/a&gt; access to the key vault as we will store our service bus policy primary key in the key vault.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-an-azure-service-bus"&gt;
  &lt;/a&gt;
  Create an Azure Service Bus
&lt;/h3&gt;

&lt;p&gt;Next we will create a &lt;code&gt;Service Bus Namespace&lt;/code&gt; and &lt;code&gt;Queue&lt;/code&gt; by running:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;#Create Service Bus and Queue (and policy with Send and Listen rights)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;servicebus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--resource-group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$nameSpaceName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--sku&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Basic"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;servicebus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--resource-group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--namespace-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$nameSpaceName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$queueName&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;servicebus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;authorization-rule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--resource-group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--namespace-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$nameSpaceName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$policyName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--rights&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Send"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Listen"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;#Retrieve and save primary key of new policy to key vault (will be used later as a GH Secret in GH workflow)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$policyPrimaryKey&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;servicebus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;namespace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;authorization-rule&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--resource-group&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--namespace-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$nameSpaceName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$policyName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"primaryKey"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--output&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tsv&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;keyvault&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;secret&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--vault-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$keyVaultName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;$policyName&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;PrimaryKey"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--value&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$policyPrimaryKey&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You will notice that our Service Bus has a Policy called &lt;code&gt;myauthrule&lt;/code&gt; with only &lt;code&gt;Send&lt;/code&gt; and &lt;code&gt;Listen&lt;/code&gt; configured:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCgAOk0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/sb1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCgAOk0r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/sb1.png" alt="image.png" width="880" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And our policies &lt;code&gt;Primary Key&lt;/code&gt; will be saved in our key vault called &lt;code&gt;myauthrulePrimaryKey&lt;/code&gt;. We will use this secret later in our GitHub workflow to generate our temp SAS token:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhktzvX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/sb2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhktzvX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/sb2.png" alt="image.png" width="610" height="520"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-an-azure-ad-app-amp-service-principal"&gt;
  &lt;/a&gt;
  Create an Azure AD App &amp;amp; Service Principal
&lt;/h3&gt;

&lt;p&gt;Next we will create our &lt;code&gt;Azure AD App&lt;/code&gt; by running the following in a powershell console window:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# a name for our azure ad app&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$appName&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"gitHubActionsVaultUser"&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="c"&gt;# create Azure AD app&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--display-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$appName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--homepage&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost/&lt;/span&gt;&lt;span class="nv"&gt;$appName&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next we will retrieve the App ID and set it to a powershell variable &lt;code&gt;$appId&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;# get the app id&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nv"&gt;$appId&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--display-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$appName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;appId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-o&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tsv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now that we have our &lt;code&gt;appId&lt;/code&gt; we can create our service principal that we will use to authenticate our GitHub workflow with Azure and also give our principal the correct &lt;code&gt;Role Based Access Control (RBAC)&lt;/code&gt; permissions on our key vault we created earlier. We will give our principal the RBAC/IAM role: &lt;a href="https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#key-vault-secrets-officer"&gt;Key Vault Secrets Officer&lt;/a&gt; because we want our workflow to be able to retrieve &lt;code&gt;secret keys&lt;/code&gt; and also set secrets for our &lt;code&gt;Service Bus SAS tokens&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight powershell"&gt;&lt;code&gt;&lt;span class="c"&gt;#Create Service Principal to be used as GH Secret credential to authenticate to Azure (Make note of JSON output on this step)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;az&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ad&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;create-for-rbac&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$appId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--role&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Key Vault Secrets Officer"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--scopes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;/subscriptions/&lt;/span&gt;&lt;span class="nv"&gt;$subscriptionId&lt;/span&gt;&lt;span class="nx"&gt;/resourceGroups/&lt;/span&gt;&lt;span class="nv"&gt;$resourceGroupName&lt;/span&gt;&lt;span class="nx"&gt;/providers/Microsoft.KeyVault/vaults/&lt;/span&gt;&lt;span class="nv"&gt;$keyVaultName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;`
&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;--sdk-auth&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above command will output a JSON object with the role assignment credentials that provide access to your key vault. Copy this JSON object for later. You will only need the sections with the &lt;code&gt;clientId&lt;/code&gt;, &lt;code&gt;clientSecret&lt;/code&gt;, &lt;code&gt;subscriptionId&lt;/code&gt;, and &lt;code&gt;tenantId&lt;/code&gt; values:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"clientId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;GUID&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"clientSecret"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;PrincipalSecret&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"subscriptionId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;GUID&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"tenantId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;GUID&amp;gt;"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#configure-our-github-repository"&gt;
  &lt;/a&gt;
  Configure our GitHub repository
&lt;/h3&gt;

&lt;p&gt;Next we will configure our Github repository and Github workflow. My Github repository is called &lt;code&gt;Azure-Service-Bus-SAS-Management&lt;/code&gt;. You can also take a look or even use my github repository as a template &lt;a href="https://github.com/Pwd9000-ML/Azure-Service-Bus-SAS-Management"&gt;HERE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Remember at the beginning of this post I mentioned that we will create a github secret, we will now create this secret on our repository which will be used to authenticate our Github workflow to Azure when it's triggered.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;, browse your repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select Settings &amp;gt; Secrets &amp;gt; New repository secret.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Paste the JSON object output from the Azure CLI command we ran earlier into the secret's value field. Give the secret the name &lt;code&gt;AZURE_CREDENTIALS&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ix6L7L7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/githubAzureCredentials1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ix6L7L7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/githubAzureCredentials1.png" alt="image.png" width="880" height="581"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because we will have two workflows in this demo we will create our &lt;strong&gt;reusable&lt;/strong&gt; workflow first called &lt;code&gt;new-service-bus-sas-token.yaml&lt;/code&gt; then we will create our main workflow that will send a message to our Service bus called &lt;code&gt;main.yaml&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configure-our-github-workflows"&gt;
  &lt;/a&gt;
  Configure our GitHub workflows
&lt;/h3&gt;

&lt;p&gt;Now create a folder in the repository called &lt;code&gt;.github&lt;/code&gt; and underneath another folder called &lt;code&gt;workflows&lt;/code&gt;. In the workflows folder we will create a YAML file called &lt;code&gt;new-service-bus-sas-token.yaml&lt;/code&gt;. The YAML file can also be accessed &lt;a href="https://github.com/Pwd9000-ML/Azure-Service-Bus-SAS-Management/blob/master/.github/workflows/new-service-bus-sas-token.yaml"&gt;HERE&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;## //code/new-service-bus-sas-token.yaml&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;New Service Bus SAS Token&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;azure_credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Azure&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Credential&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;passed&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;from&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;main&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;caller&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;workflow'&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;new-sas-token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;windows-latest&lt;/span&gt;
    &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;KEY_VAULT_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secrets-vault7839&lt;/span&gt;
      &lt;span class="na"&gt;SB_NAMESPACE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;githubactions&lt;/span&gt;
      &lt;span class="na"&gt;SB_POLICY_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;myauthrule&lt;/span&gt;
      &lt;span class="na"&gt;SB_POLICY_KEY_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;myauthrulePrimaryKey&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check out repository&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Log into Azure using github secret AZURE_CREDENTIALS&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure/login@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;creds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.azure_credentials }}&lt;/span&gt;
          &lt;span class="na"&gt;enable-AzPSSession&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get Service Bus Policy Key&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure/get-keyvault-secrets@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;keyvault&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ env.KEY_VAULT_NAME }}&lt;/span&gt;
          &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ env.SB_POLICY_KEY_NAME }}&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sbPrimaryKey&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate Service Bus SAS token&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azure/powershell@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;inlineScript&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;$null = [Reflection.Assembly]::LoadWithPartialName("System.Web")&lt;/span&gt;

            &lt;span class="s"&gt;#Set Variables&lt;/span&gt;
            &lt;span class="s"&gt;$keyVaultName="${{ env.KEY_VAULT_NAME }}"&lt;/span&gt;
            &lt;span class="s"&gt;$serviceBusNameSpace="${{ env.SB_NAMESPACE }}"&lt;/span&gt;
            &lt;span class="s"&gt;$accessPolicyName="${{ env.SB_POLICY_NAME }}"&lt;/span&gt;
            &lt;span class="s"&gt;$accessPolicyKeyName="${{ env.SB_POLICY_KEY_NAME }}"&lt;/span&gt;
            &lt;span class="s"&gt;$dateTime=(Get-Date).ToString()&lt;/span&gt;
            &lt;span class="s"&gt;$URI="$serviceBusNameSpace.servicebus.windows.net"&lt;/span&gt;
            &lt;span class="s"&gt;$accessPolicyKey="${{ steps.sbPrimaryKey.outputs.myauthrulePrimaryKey }}"&lt;/span&gt;

            &lt;span class="s"&gt;#Generate Temp SAS Token&lt;/span&gt;
            &lt;span class="s"&gt;##Token expires now+600(10 min)&lt;/span&gt;
            &lt;span class="s"&gt;$expires=([DateTimeOffset]::Now.ToUnixTimeSeconds())+600&lt;/span&gt;
            &lt;span class="s"&gt;$signatureString=[System.Web.HttpUtility]::UrlEncode($URI)+ "`n" + [string]$expires&lt;/span&gt;
            &lt;span class="s"&gt;$HMAC = New-Object System.Security.Cryptography.HMACSHA256&lt;/span&gt;
            &lt;span class="s"&gt;$HMAC.key = [Text.Encoding]::ASCII.GetBytes($accessPolicyKey)&lt;/span&gt;
            &lt;span class="s"&gt;$signature = $HMAC.ComputeHash([Text.Encoding]::ASCII.GetBytes($signatureString))&lt;/span&gt;
            &lt;span class="s"&gt;$signature = [Convert]::ToBase64String($signature)&lt;/span&gt;
            &lt;span class="s"&gt;$SASToken = "SharedAccessSignature sr=" + [System.Web.HttpUtility]::UrlEncode($URI) + "&amp;amp;sig=" + [System.Web.HttpUtility]::UrlEncode($signature) + "&amp;amp;se=" + $expires + "&amp;amp;skn=" + $accessPolicyName&lt;/span&gt;

            &lt;span class="s"&gt;#Set Temp SAS token in Azure Key Vault&lt;/span&gt;
            &lt;span class="s"&gt;Write-Output "Update SAS token in: [$keyVaultName]" &lt;/span&gt;
            &lt;span class="s"&gt;$secretToken = ConvertTo-SecureString -String $SASToken -AsPlainText -Force&lt;/span&gt;
            &lt;span class="s"&gt;$tags = @{ "Automation" = "Github-Workflow";  "Temp-SAS" = "true"; "Generated-On" = "$dateTime"}&lt;/span&gt;
            &lt;span class="s"&gt;$null = Set-AzKeyVaultSecret -VaultName $keyVaultName -Name "$accessPolicyName-SAS-TOKEN" -SecretValue $secretToken -Tags $tags&lt;/span&gt;
            &lt;span class="s"&gt;Write-Output 'SAS Token Saved to Key Vault Secret as: [$accessPolicyName-SAS-TOKEN] '&lt;/span&gt;
          &lt;span class="na"&gt;azPSVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;latest'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above YAML workflow has a special trigger as shown below, which will only run when called by another GitHub workflow. Also note that we have to declare any secrets that are sent into the workflow from the caller using the &lt;code&gt;secrets&lt;/code&gt; argument.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;## //code/new-service-bus-sas-token.yaml#L3-L8&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;azure_credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Azure&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Credential&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;passed&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;from&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;main&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;caller&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;workflow'&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The only fields that needs to be updated for the &lt;code&gt;new-service-bus-sas-token.yaml&lt;/code&gt; workflow to be used in your environment are shown below. (Unfortunately it is not possible to use environment variables inside of step outputs, so we also have to explicitly reference our key vault secret name):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;## //code/new-service-bus-sas-token.yaml#L7-L11&lt;/span&gt;
&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;KEY_VAULT_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secrets-vault7839&lt;/span&gt;
  &lt;span class="na"&gt;SB_NAMESPACE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;githubactions&lt;/span&gt;
  &lt;span class="na"&gt;SB_POLICY_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;myauthrule&lt;/span&gt;
  &lt;span class="na"&gt;SB_POLICY_KEY_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;myauthrulePrimaryKey&lt;/span&gt;

&lt;span class="c1"&gt;## //code/new-service-bus-sas-token.yaml#L49-L49&lt;/span&gt;
&lt;span class="s"&gt;$accessPolicyKey="${{ steps.sbPrimaryKey.outputs.myauthrulePrimaryKey }}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Note that our &lt;strong&gt;reusable&lt;/strong&gt; github workflow will save the temporary Service Bus SAS token in Azure keyvault under the &lt;code&gt;secret&lt;/code&gt; key name: &lt;strong&gt;[ServiceBusPolicyName-SAS-TOKEN]&lt;/strong&gt;. This SAS token will only be valid for 10 minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NnomcFln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/sastoken.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NnomcFln--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/sastoken.png" alt="image.png" width="677" height="532"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now onto our main workflow file. In the same workflows folder we will create a second YAML file called &lt;code&gt;main.yaml&lt;/code&gt;. The YAML file can also be accessed &lt;a href="https://github.com/Pwd9000-ML/Azure-Service-Bus-SAS-Management/blob/master/.github/workflows/main.yaml"&gt;HERE&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;## //code/main.yaml&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Send Service Bus Message&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;new-sas-token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate New Sas Token&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pwd9000-ML/Azure-Service-Bus-SAS-Management/.github/workflows/new-service-bus-sas-token.yaml@master&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;azure_credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.AZURE_CREDENTIALS }}&lt;/span&gt;

  &lt;span class="na"&gt;send-sb-message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Send Service Bus Message&lt;/span&gt;
    &lt;span class="na"&gt;needs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;new-sas-token&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;windows-latest&lt;/span&gt;
    &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;KEY_VAULT_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secrets-vault7839&lt;/span&gt;
      &lt;span class="na"&gt;SB_NAMESPACE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;githubactions&lt;/span&gt;
      &lt;span class="na"&gt;SB_QUEUE_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;queue01&lt;/span&gt;
      &lt;span class="na"&gt;SB_POLICY_SAS_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;myauthrule-SAS-TOKEN&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Check out repository&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Log into Azure using github secret AZURE_CREDENTIALS&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure/login@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;creds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.AZURE_CREDENTIALS }}&lt;/span&gt;
        &lt;span class="na"&gt;enable-AzPSSession&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get Service Bus SAS Token&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Azure/get-keyvault-secrets@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;keyvault&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ env.KEY_VAULT_NAME }}&lt;/span&gt;
        &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ env.SB_POLICY_SAS_NAME }}&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sbSasToken&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Send Service Bus Message&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;azure/powershell@v1&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;inlineScript&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;$message = [pscustomobject] @{ "Body" = "Hello ActionsHackathon21" }&lt;/span&gt;

          &lt;span class="s"&gt;$serviceBusNameSpace="${{ env.SB_NAMESPACE }}"&lt;/span&gt;
          &lt;span class="s"&gt;$serviceBusQueueName="${{ env.SB_QUEUE_NAME }}"&lt;/span&gt;
          &lt;span class="s"&gt;$body = $message.Body&lt;/span&gt;
          &lt;span class="s"&gt;$message.psobject.properties.Remove("Body")&lt;/span&gt;

          &lt;span class="s"&gt;$URI = "https://$serviceBusNameSpace.servicebus.windows.net/$serviceBusQueueName/messages"&lt;/span&gt;
          &lt;span class="s"&gt;$token = "${{ steps.sbSasToken.outputs.myauthrule-SAS-TOKEN }}"&lt;/span&gt;
          &lt;span class="s"&gt;$headers = @{ "Authorization" = "$token"; "Content-Type" = "application/atom+xml;type=entry;charset=utf-8" }&lt;/span&gt;
          &lt;span class="s"&gt;$headers.Add("BrokerProperties", $(ConvertTo-JSON -InputObject $message -Compress))&lt;/span&gt;

          &lt;span class="s"&gt;#Invoke rest method&lt;/span&gt;
          &lt;span class="s"&gt;$null = Invoke-RestMethod -Uri $URI -Headers $headers -Method "Post" -Body $body&lt;/span&gt;
        &lt;span class="na"&gt;azPSVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;latest'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above YAML workflow has a manual trigger as shown below. Also note that we have to explicitly pass secrets on to our &lt;strong&gt;reusable&lt;/strong&gt; workflow we are calling in the first job using the &lt;code&gt;secrets&lt;/code&gt; argument.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;## Trigger: //code/main.yaml#L2-L3&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="c1"&gt;## Explicitly pass secret: //code/main.yaml#L6-L10&lt;/span&gt;
&lt;span class="na"&gt;new-sas-token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate New Sas Token&lt;/span&gt;
&lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Pwd9000-ML/Azure-Service-Bus-SAS-Management/.github/workflows/new-service-bus-sas-token.yaml@master&lt;/span&gt;
&lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;azure_credentials&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.AZURE_CREDENTIALS }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The only fields that needs to be updated for the &lt;code&gt;main.yaml&lt;/code&gt; workflow to be used in your environment are shown below. (Unfortunately it is not possible to use environment variables inside of step outputs, so we also have to explicitly reference our key vault secret name):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;## //code/new-service-bus-sas-token.yaml#L16-L20&lt;/span&gt;
&lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;KEY_VAULT_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;secrets-vault7839&lt;/span&gt;
    &lt;span class="na"&gt;SB_NAMESPACE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;githubactions&lt;/span&gt;
    &lt;span class="na"&gt;SB_QUEUE_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;queue01&lt;/span&gt;
    &lt;span class="na"&gt;SB_POLICY_SAS_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;myauthrule-SAS-TOKEN&lt;/span&gt;

&lt;span class="c1"&gt;## //code/new-service-bus-sas-token.yaml#L51-L51&lt;/span&gt;
&lt;span class="s"&gt;$token = "${{ steps.sbSasToken.outputs.myauthrule-SAS-TOKEN }}"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#testing-workflows"&gt;
  &lt;/a&gt;
  Testing Workflows
&lt;/h3&gt;

&lt;p&gt;Let's trigger our &lt;code&gt;main.yaml&lt;/code&gt; workflow. It should trigger our &lt;strong&gt;reusable&lt;/strong&gt; workflow called &lt;code&gt;new-service-bus-sas-token.yaml&lt;/code&gt; that will generate a temp Service Bus SAS token and save this token in our Key Vault. Afterwards it will return to the &lt;code&gt;main.yaml&lt;/code&gt; workflow and retrieve the temp SAS token from the key vault and send our Service Bus a message with a body of: &lt;strong&gt;"Hello ActionsHackathon21"&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yk9IPxQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/gh1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yk9IPxQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/gh1.png" alt="image.png" width="880" height="311"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both our workflows ran successfully. The first job generates our temp SAS token from a &lt;strong&gt;reusable&lt;/strong&gt; workflow and the second job consumes that temporary SAS token from key vault sends our message to our Service Bus using the short lived SAS token.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQLK2U0i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/gh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQLK2U0i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/gh2.png" alt="image.png" width="880" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see our message was sent to our Service Bus Queue using the temporary SAS token retrieved from the keyvault:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---TbtHO_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/test.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---TbtHO_U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Pwd9000-ML/blog-devto/main/posts/Github-Rotate-ServiceBus-SAS/assets/test.png" alt="image.png" width="880" height="701"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The main take away of this tutorial is to know that we can create &lt;strong&gt;reusable&lt;/strong&gt; GitHub Action workflows that can be called as separate jobs in other workflows. By carving up large workflows and referencing reusable workflows we can cut down on duplication and also make our workflows much more dynamic. Additionally we did something cool by creating a security process in which we generate short lived secure Service Bus SAS tokens that are stored in an Azure Key Vault and can be permissioned and consumed by other services in a controlled manner.&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this post and have learned something new. You can also find the code samples used in this blog post on my &lt;a href="https://github.com/Pwd9000-ML/blog-devto/tree/main/posts/Github-Rotate-ServiceBus-SAS/code"&gt;Github&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;Additionally you can use this &lt;a href="https://github.com/Pwd9000-ML/Azure-Service-Bus-SAS-Management"&gt;github repository&lt;/a&gt; used in this tutorial as a template in your own github account and start to generate and automate your Service Bus SAS tokens today. ❤️&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#author"&gt;
  &lt;/a&gt;
  &lt;em&gt;Author&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Like, share, follow me on: 🐙 &lt;a href="https://github.com/Pwd9000-ML"&gt;GitHub&lt;/a&gt; | 🐧 &lt;a href="https://twitter.com/pwd9000"&gt;Twitter&lt;/a&gt; | 👾 &lt;a href="https://www.linkedin.com/in/marcel-l-61b0a96b/"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__620034"&gt;
  
    .ltag__user__id__620034 .follow-action-button {
      background-color: #0cbb58 !important;
      color: #000000 !important;
      border-color: #0cbb58 !important;
    }
  
    &lt;a href="/pwd9000" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Amb4rEJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L_SDLOmq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620034/93be2c72-3a13-478e-8af1-a4bedc1b2331.jpeg" alt="pwd9000 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/pwd9000"&gt;Marcel.L&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/pwd9000"&gt;Cloud Solutions &amp;amp; DevOps Architect.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>devops</category>
      <category>security</category>
      <category>azure</category>
      <category>github</category>
    </item>
    <item>
      <title>Debugging HTTP headers in Hugo</title>
      <author>·ſ</author>
      <pubDate>Sun, 14 Nov 2021 09:57:10 +0000</pubDate>
      <link>https://dev.to/jmau111/debugging-http-headers-in-hugo-2807</link>
      <guid>https://dev.to/jmau111/debugging-http-headers-in-hugo-2807</guid>
      <description>&lt;p&gt;Hugo can add all headers, including security headers, on the local server ( when you type &lt;code&gt;hugo server&lt;/code&gt; in the terminal). It's pretty helpful for the debug, as some can break your website.&lt;/p&gt;

&lt;p&gt;I had a problem setting them at first, but it occurred to me it was a small typo in the documentation, as it does not work well if you target .html only:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discourse.gohugo.io/t/cant-make-the-local-server-use-headers/35519/"&gt;read the thread&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The documentation has been updated since then, and you can test headers locally with a few lines in &lt;code&gt;config.toml&lt;/code&gt;, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[server]
    [[server.headers]]
        for = '/**'
        [server.headers.values]
            Permissions-Policy = "interest-cohort=()"
            Strict-Transport-Security = "max-age=31536000; includeSubDomains"
            X-Frame-Options = "SAMEORIGIN"
            X-Content-Type-Options = "nosniff"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://gohugo.io/getting-started/configuration/#configure-server"&gt;See complete documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>hugo</category>
      <category>http</category>
      <category>headers</category>
      <category>server</category>
    </item>
    <item>
      <title>Setup Node Version Manager (NVM) on macOS M1 Silicon</title>
      <author>Eric Bishard</author>
      <pubDate>Sun, 14 Nov 2021 09:50:41 +0000</pubDate>
      <link>https://dev.to/httpjunkie/setup-node-version-manager-nvm-on-mac-m1-7kl</link>
      <guid>https://dev.to/httpjunkie/setup-node-version-manager-nvm-on-mac-m1-7kl</guid>
      <description>&lt;p&gt;As a web developer these days, we typically need to be able to switch versions of Node on the fly, for this we want to install Node Version Manager on a clean install of our machine, we don't want to start by installin Node on it's own as this will give us a single version of Node (whichever we decide to install)&lt;/p&gt;

&lt;p&gt;If you install Node first and then try to install NVM, things can get complicated, so if you have already installed Node, my suggestion is to completely remove it before installing NVM.&lt;/p&gt;

&lt;p&gt;As well, NVM is explicitly not supported when installed via homebrew - the only correct way to install it is with the install script in &lt;a href="https://github.com/nvm-sh/nvm/blob/master/README.md#install--update-script"&gt;NVM's Readme&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So if you have a Mac M1, these are the steps I would encourage you to try.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Navigate to your home directory
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;.zshrc&lt;/code&gt; file (if it doesn't exist)
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;touch&lt;/span&gt; .zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Install NVM using the curl command found on the NVM Readme
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-o-&lt;/span&gt; https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This last command will update your &lt;code&gt;.zshrc&lt;/code&gt; file to look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;NVM_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.nvm"&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NVM_DIR&lt;/span&gt;&lt;span class="s2"&gt;/nvm.sh"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NVM_DIR&lt;/span&gt;&lt;span class="s2"&gt;/nvm.sh"&lt;/span&gt;  &lt;span class="c"&gt;# This loads nvm&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NVM_DIR&lt;/span&gt;&lt;span class="s2"&gt;/bash_completion"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\.&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$NVM_DIR&lt;/span&gt;&lt;span class="s2"&gt;/bash_completion"&lt;/span&gt;  &lt;span class="c"&gt;# This loads nvm bash_completion&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Install Node using NVM
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nvm &lt;span class="nb"&gt;install &lt;/span&gt;node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will install the latest version of Node (currently Node v&lt;code&gt;17.x&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;NOTE: Node versions before v&lt;code&gt;15.x&lt;/code&gt; are not necessarily ARM compatible, but it seems that Node has addressed this issue, so if you do install a version prior to v&lt;code&gt;15.x&lt;/code&gt; hopefully, you will not need to use Rosetta to run.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install LTS version of Node
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nvm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--lts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this command installed the current LTS at the time of this GIST which is v&lt;code&gt;16.x&lt;/code&gt;, I think I will try to stick with this version or better when developing, however; that's the beauty of NVM is that if I need and older version it's easy to switch!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;List the versions of Node I have installed
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nvm &lt;span class="nb"&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Select an alternate version that I have installed
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nvm use 16
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nvm use &lt;span class="nt"&gt;--lts&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finallly, to clear the nvm cache to reduce clutter, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nvm cache clear
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Those will both allow me to use the LTS version we just installed! Hope that helps, Happy Noding~!&lt;/p&gt;

&lt;p&gt;This is not widely talked about and the best sources I have found on the subject came from &lt;a href="https://www.youtube.com/watch?v=LOd0Dx_ZrYQ"&gt;Code Fallacy on YouTube&lt;/a&gt; and &lt;a href="https://twitter.com/mkbaldwin21"&gt;Michael Baldwin&lt;/a&gt; who both have good information on this topic, so much thanks to them where credit is due...&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>devops</category>
    </item>
    <item>
      <title>Migration of Categories (Collections) using Shopify API</title>
      <author>ThePylot</author>
      <pubDate>Sun, 14 Nov 2021 09:27:49 +0000</pubDate>
      <link>https://dev.to/thepylot/migration-of-categories-collections-using-shopify-api-did</link>
      <guid>https://dev.to/thepylot/migration-of-categories-collections-using-shopify-api-did</guid>
      <description>&lt;p&gt;(In this post)[], we'll use Shopify Admin API to create collections in our store. Before we go on, you are going to need a development store and create a private app where it provides API credentials to interact with store data.&lt;/p&gt;

&lt;p&gt;I highly recommend watching the video below to set up a development store in Shopify:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XL-Z53sN3f8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you already have one, then let's start migrating categories to our Shopify store.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-shopify-client"&gt;
  &lt;/a&gt;
  Building Shopify Client
&lt;/h2&gt;

&lt;p&gt;In this part, we are going to build client to interact with Shopify API by sending requests and receiving responses. Simply, we are creating a separate class where it holds all request-response logic and related attributes.  That'll make our project more clean and maintainable in the future.&lt;/p&gt;

&lt;p&gt;Create an empty directory named &lt;code&gt;client&lt;/code&gt; and inside it add &lt;code&gt;__init__.py&lt;/code&gt; the file which makes it a python package. Next, create another file named &lt;code&gt;shopify_client.py&lt;/code&gt; and start by adding a class named &lt;code&gt;ShopifyClient&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;client/shopify_client.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ShopifyClient&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;api_password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shop_url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api_password&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shop_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shop_url&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"Accept"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'application/json'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'application/json'&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The constructor includes the main properties of the client that will be used across functions to interact with Shopify API. For each request, we need the  following properties:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;api_password&lt;/code&gt; - Password that is given in the private app of Shopify Dev Store.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;shop_url&lt;/code&gt; - Shop URL of development store.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;endpoint&lt;/code&gt; - Endpoint that will be used to send requests for.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;headers&lt;/code&gt; -  Header rules to include for each request.&lt;/p&gt;

&lt;p&gt;Shopify requires an authorization header, so it knows which particular shop data it should serve. At this point, we'll set only API password as value to header named &lt;code&gt;X-Shopify-Access-Token&lt;/code&gt;. Let's continue by creating a new function named &lt;code&gt;api_request&lt;/code&gt; that will handle all types of requests:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;client/shopify_client.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;api_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="s"&gt;"X-Shopify-Access-Token"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_password&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"method"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"method"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shop_url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"timeout"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"headers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"method"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Simply, we're updating the headers to include the authorization header as well. Now, let's see what's inside context:.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;method&lt;/code&gt; - It defines the request method type such as GET, POST or DELETE and takes the value from kwargs.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;url&lt;/code&gt; - The shop_url concatenated with endpoint to produce an absolute URL where the requests will be sent.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;timeout&lt;/code&gt; - Maximum time of waiting for a response.&lt;/p&gt;

&lt;p&gt;After that, we're checking if the &lt;code&gt;method&lt;/code&gt; is &lt;code&gt;POST&lt;/code&gt; then insert &lt;code&gt;data&lt;/code&gt; inside &lt;code&gt;context&lt;/code&gt; as well. Once the &lt;code&gt;context&lt;/code&gt; is built the &lt;code&gt;request()&lt;/code&gt; function will send it and return a response as a &lt;code&gt;json&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-data-models"&gt;
  &lt;/a&gt;
  Adding Data Models
&lt;/h2&gt;

&lt;p&gt;Now, we need a dummy dataset where it'll migrate to Shopify. To achieve that, we can use &lt;code&gt;factory_boy&lt;/code&gt; package to produce fake data based on the specific model.  Create a directory named data and also include &lt;code&gt;__init__.py&lt;/code&gt; file inside it. Let's create the base structure of our model by using &lt;code&gt;dataclass&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;data/entities.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;body_html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;
    &lt;span class="n"&gt;sort_order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Where all these attributes are coming from? The attributes represent required fields of &lt;a href="https://shopify.dev/api/admin-rest/2021-10/resources/collection#resource_object"&gt;Shopify Collections API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kR42z4kW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codepylot.dev/content/images/size/w1000/2021/10/shopifycollectionssketch-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kR42z4kW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.codepylot.dev/content/images/size/w1000/2021/10/shopifycollectionssketch-01.png" alt="shopify api python" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Currently, we only need the fields above to create a Shopify Collection. The list of belonged products will remain empty for now since we don't have one. Now, it's time to create factories using &lt;code&gt;factory_boy&lt;/code&gt; to produce some data to migrate it later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;data/factories.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;factory&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;factory.fuzzy&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;data.entities&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CategoryFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Factory&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Category&lt;/span&gt;

    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Faker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;body_html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Faker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sentence'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;published&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fuzzy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FuzzyChoice&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;sort_order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"manual"&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Faker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'image_url'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This factory above creates instances of &lt;code&gt;Category&lt;/code&gt; model with fake data based on the attributes we provide by using &lt;code&gt;Faker&lt;/code&gt;. In other words, we are mocking the &lt;code&gt;Category&lt;/code&gt; class to test our functionalities.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#migration-of-categories"&gt;
  &lt;/a&gt;
  Migration of Categories
&lt;/h2&gt;

&lt;p&gt;So, we finished setting up the client and produce some fake data to migrate it later. Now, it's to start creating the base logic which will put everything together and migrate all data to Shopify. Create another file named &lt;code&gt;category.py&lt;/code&gt; in the root level of your directory:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;category.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;client.shopify_client&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ShopifyClient&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;data.factories&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CategoryFactory&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CategoryMigration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ShopifyClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;api_password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"YOUR_API_PASSWORD"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;shop_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"YOUR_SHOP_URL"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ShopifyStoreAdmin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;COLLECTION_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We are going to use &lt;code&gt;logging&lt;/code&gt; module to print data in the console to see the process in real-time. Also, initializing the Shopify client to make it ready for sending requests.&lt;/p&gt;

&lt;p&gt;Next, let's use the factory to produce a list of instances with fake data:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_categories&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;category_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CategoryFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_batch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;collections_shopify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;category_data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;collection_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;"custom_collection"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;"body_html"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body_html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;"published"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;"sort_order"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_order&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;collections_shopify&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;collection_row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;collections_shopify&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you see, we are building the &lt;a href="https://shopify.dev/api/admin-rest/2021-10/resources/collection#resource_object"&gt;object structure&lt;/a&gt; as Shopify requires and appending it into the list. The python dictionary will be converted to actual &lt;code&gt;json&lt;/code&gt; in our client whenever request prepared to be sent.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;migrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;collections_shopify&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_categories&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;collect&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;collections_shopify&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Response %s"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;categories_migration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CategoryMigration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;categories_migration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migrate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Lastly, iterate through generated data and send them to Shopify by using POST the method. The logs will let us know what's going on behind the scenes.&lt;/p&gt;

&lt;p&gt;Great! Now you can run the file and watch the migration of data to your development store.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python category.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#source-code-available"&gt;
  &lt;/a&gt;
  Source code available:
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/thepylot"&gt;
        thepylot
      &lt;/a&gt; / &lt;a href="https://github.com/thepylot/shopify-migration"&gt;
        shopify-migration
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Migrating data using Shopify API
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#video-explanation-with-more-details"&gt;
  &lt;/a&gt;
  Video Explanation with more details
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QxeRDBnCmLA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support 🌏
&lt;/h2&gt;

&lt;p&gt;If you feel like you unlocked new skills, please share them with your friends and subscribe to the youtube channel to not miss any valuable information.&lt;/p&gt;

</description>
      <category>python</category>
      <category>database</category>
    </item>
    <item>
      <title>Day 37 of 100 Days of Code &amp; Scrum: Choice Overload, Web Hosting, and Ghost</title>
      <author>Rammina</author>
      <pubDate>Sun, 14 Nov 2021 09:18:02 +0000</pubDate>
      <link>https://dev.to/rammina/day-37-of-100-days-of-code-scrum-choice-overload-web-hosting-and-ghost-54ba</link>
      <guid>https://dev.to/rammina/day-37-of-100-days-of-code-scrum-choice-overload-web-hosting-and-ghost-54ba</guid>
      <description>&lt;p&gt;Happy new week, everyone!&lt;/p&gt;

&lt;p&gt;Today, I felt overwhelmed by the amount of projects I want to work on and topics I'd like to learn. There are so many things I find interesting, and a lot of them I would definitely need later on. I should focus on things that will provide value to me right away, and I need to put other distracting matters aside.&lt;/p&gt;

&lt;p&gt;This is probably the first week where I'm not really sure what to do, and there is still the issue of not having Internet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;Just like I do every weekend, I did my 5th Weekly Sprint Review and Retrospective, in which I went over what I've managed to do well, what my shortcomings were, and what I could do better in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;It's a new week, so I have to prioritize my tasks and establish my new &lt;code&gt;Sprint Goals&lt;/code&gt;. My focus for this week will still be my &lt;strong&gt;company website&lt;/strong&gt;, &lt;strong&gt;Next.js&lt;/strong&gt;, and &lt;strong&gt;Typescript&lt;/strong&gt;. I'll still be studying &lt;strong&gt;Scrum&lt;/strong&gt;, but I am going to put the guide writing on hold. Finishing my company website is more beneficial to me as of the moment.&lt;/p&gt;

&lt;p&gt;Another technology I'm really interested in right now is &lt;strong&gt;Ghost&lt;/strong&gt; for blogging. I've heard it's open-source and a great alternative to WordPress for hosting blog.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;build my company website (and avoid getting distracted by more interesting projects).&lt;/li&gt;
&lt;li&gt;continue to learn Next.js.&lt;/li&gt;
&lt;li&gt;go through the Typescript documentation at least 30 minutes each day.&lt;/li&gt;
&lt;li&gt;continue studying for Professional Scrum Master I (PSM I) certification.&lt;/li&gt;
&lt;li&gt;continue networking, but allocate less time to this (coding is more important).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you for reading. Have a great week!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9gNNIpK9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9ayfxxxaz2g2hfcqbsk.png" alt="Thank You Banner" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app?utm_source=next-site&amp;amp;utm_medium=nav-cta&amp;amp;utm_campaign=next-website"&gt;Official Next.js tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;The Typescript Handbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ghost.org/docs/introduction/"&gt;Introduction | Ghost Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#other-media"&gt;
  &lt;/a&gt;
  Other Media
&lt;/h3&gt;

&lt;p&gt;Feel free to check me in other media and reach out to me!&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://twitter.com/RamminaR"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C341ckO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636792959/twitter-logo_laoyfu_pdbagm.png" alt="Twitter logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;a href="https://github.com/Rammina"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u4ZlXeay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/rammina/image/upload/v1636795051/GitHub-Emblem2_epcp8r.png" alt="Github logo" width="128" height="50"&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Day 4; Basic Python Collections(Python 30 Day challenge)</title>
      <author>ourjulybeauty</author>
      <pubDate>Sun, 14 Nov 2021 09:00:32 +0000</pubDate>
      <link>https://dev.to/ourjulybeauty/day-4-basic-python-collectionspython-30-day-challenge-pdb</link>
      <guid>https://dev.to/ourjulybeauty/day-4-basic-python-collectionspython-30-day-challenge-pdb</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-lists"&gt;
  &lt;/a&gt;
  1. &lt;strong&gt;Lists&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Lists are created by having characters inside square brackets, separated by commas, with each value inside quotation marks&lt;br&gt;
The code below also shows how to access items within a list&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SHF9zkAN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6nw3cmzaarivy2vzmkn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SHF9zkAN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6nw3cmzaarivy2vzmkn.png" alt="Lists and how to access them" width="872" height="936"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-items-to-a-list"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Adding items to a list&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#using-the-append-method"&gt;
  &lt;/a&gt;
  using the .append() method
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DCZaSE7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhe29ur868zhlzs45aof.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DCZaSE7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhe29ur868zhlzs45aof.png" alt="adding items to a list using the append method" width="872" height="594"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-operator"&gt;
  &lt;/a&gt;
  using the + operator
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iSZARiOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwlxu37b3zfz148s047c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iSZARiOi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wwlxu37b3zfz148s047c.png" alt="adding items to a list using the + operator" width="872" height="556"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-extend-method"&gt;
  &lt;/a&gt;
  using the .extend() method
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_6NzuRSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xagrkbze1qs6yh1qxll9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_6NzuRSJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xagrkbze1qs6yh1qxll9.png" alt="adding items to a list using the extend method" width="872" height="670"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-insert-method"&gt;
  &lt;/a&gt;
  using the .insert() method
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7a_fz-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gecppprqzad0j5wztq8e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7a_fz-V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gecppprqzad0j5wztq8e.png" alt="adding items to a list using the insert method" width="872" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#removing-items-from-a-list"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Removing items from a list&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#using-the-remove-method"&gt;
  &lt;/a&gt;
  using the .remove() method
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A7sfdNgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9to8d3e12hx27lfyeh07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7sfdNgv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9to8d3e12hx27lfyeh07.png" alt="Image description" width="872" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-del"&gt;
  &lt;/a&gt;
  using the del
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fOpJ2dRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3v9fqkhm1eklfz8cbh1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fOpJ2dRf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v3v9fqkhm1eklfz8cbh1.png" alt="Image description" width="872" height="556"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-pop-method"&gt;
  &lt;/a&gt;
  using the .pop() method
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9MtzCCw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s3ixe03lecepucg3pi1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9MtzCCw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s3ixe03lecepucg3pi1.png" alt="Image description" width="872" height="1012"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-clear-method"&gt;
  &lt;/a&gt;
  using the .clear() method
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YgZlr5LE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oev2h7rvhq7xniwapph8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YgZlr5LE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oev2h7rvhq7xniwapph8.png" alt="Image description" width="872" height="556"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-tuples"&gt;
  &lt;/a&gt;
  2. &lt;strong&gt;Tuples&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Tuples are immutable i.e once created they cannot be changed&lt;br&gt;
But they can be nested inside lists, where they are easily accessible using their index&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LBJMClY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89t93dfl51d8j1pjgm1y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LBJMClY3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89t93dfl51d8j1pjgm1y.png" alt="Image description" width="872" height="974"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-exercise-day-4-code"&gt;
  &lt;/a&gt;
  2. &lt;strong&gt;Exercise day 4 code&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--USPtOHZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bugs69bs4urpaasugnqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--USPtOHZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bugs69bs4urpaasugnqf.png" alt="Image description" width="872" height="1658"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>cloudengineering</category>
    </item>
    <item>
      <title>Future of Ruby – AST Tooling</title>
      <author>Brandon Weaver</author>
      <pubDate>Sun, 14 Nov 2021 08:22:39 +0000</pubDate>
      <link>https://dev.to/baweaver/future-of-ruby-ast-tooling-9i1</link>
      <guid>https://dev.to/baweaver/future-of-ruby-ast-tooling-9i1</guid>
      <description>&lt;p&gt;This is a series meant to explore the potential future of the Ruby programming language by visiting current technologies and ideas around them, and how those might apply to the future. In this series you'll find some tools which can be used today, some which may be used tomorrow, and a collection of aspirations of what could be.&lt;/p&gt;

&lt;p&gt;As this is a look into a potential future, you may or may not see these things come to pass, and that's ok. This is not meant to be prescriptive, but to start conversations on what things could be.&lt;/p&gt;

&lt;p&gt;With that being said, let's take a look into the potential future of Ruby.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ast-tooling"&gt;
  &lt;/a&gt;
  AST Tooling
&lt;/h2&gt;

&lt;p&gt;Programs are, at their core, text with special semantic meaning. Using Regex we can certainly treat Ruby as just plain text, but in doing so we lose the semantic meaning of what makes Ruby Ruby.&lt;/p&gt;

&lt;p&gt;Enter in ASTs, or Abstract Syntax Trees. ASTs are a data structure that represents a Ruby program as a series of nested nodes, broken into relevant pieces using knowledge of the language.&lt;/p&gt;

&lt;p&gt;Ruby has a few different implementations of this, the core implementation being Ripper:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;pp&lt;/span&gt; &lt;span class="no"&gt;Ripper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sexp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'def hello(world) "Hello, #{world}!"; end'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# [:program,&lt;/span&gt;
&lt;span class="c1"&gt;#   [[:def,&lt;/span&gt;
&lt;span class="c1"&gt;#     [:@ident, "hello", [1, 4]],&lt;/span&gt;
&lt;span class="c1"&gt;#     [:paren,&lt;/span&gt;
&lt;span class="c1"&gt;#      [:params, [[:@ident, "world", [1, 10]]], nil, nil, nil, nil, nil, nil]],&lt;/span&gt;
&lt;span class="c1"&gt;#     [:bodystmt,&lt;/span&gt;
&lt;span class="c1"&gt;#      [[:string_literal,&lt;/span&gt;
&lt;span class="c1"&gt;#        [:string_content,&lt;/span&gt;
&lt;span class="c1"&gt;#         [:@tstring_content, "Hello, ", [1, 18]],&lt;/span&gt;
&lt;span class="c1"&gt;#         [:string_embexpr, [[:var_ref, [:@ident, "world", [1, 27]]]]],&lt;/span&gt;
&lt;span class="c1"&gt;#         [:@tstring_content, "!", [1, 33]]]]],&lt;/span&gt;
&lt;span class="c1"&gt;#      nil,&lt;/span&gt;
&lt;span class="c1"&gt;#      nil,&lt;/span&gt;
&lt;span class="c1"&gt;#      nil]]]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The AST is represented as a series of nested arrays. The problem with this, of course, is that it can be difficult to work on programmatically for tooling developers.&lt;/p&gt;

&lt;p&gt;Enter the Whitequark parser, which you can experiment with &lt;a href="https://nodepattern.herokuapp.com/"&gt;here&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;ruby_code&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'def hello(world) "Hello, #{world}!"; end'&lt;/span&gt;
&lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Parser&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CurrentRuby&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ruby_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# s(:def, :hello,&lt;/span&gt;
&lt;span class="c1"&gt;#   s(:args,&lt;/span&gt;
&lt;span class="c1"&gt;#     s(:arg, :world)),&lt;/span&gt;
&lt;span class="c1"&gt;#   s(:dstr,&lt;/span&gt;
&lt;span class="c1"&gt;#     s(:str, "Hello, "),&lt;/span&gt;
&lt;span class="c1"&gt;#     s(:begin,&lt;/span&gt;
&lt;span class="c1"&gt;#       s(:lvar, :world)),&lt;/span&gt;
&lt;span class="c1"&gt;#     s(:str, "!")))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are a few others like Melbourne, JRubyParser, and ruby_parser but we'll focus on the Whitequark parser for the sake of this article.&lt;/p&gt;

&lt;p&gt;Put simply, I believe that it's more accessible and easily usable than Ripper, and will be the base of a lot of what could be the future of Ruby tooling. That's what we're going to explore today.&lt;/p&gt;

&lt;p&gt;We'll be covering the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Find and Replace&lt;/strong&gt; - Regex and literal F&amp;amp;R is limited and prone to accidental replacements. Can we be more precise?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;EmberJS Style Codemods&lt;/strong&gt; - EmberJS uses Codemods to upgrade itself, and ships with them every major version. Think that, but Rails or other major Ruby gems.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Babel Transpilation&lt;/strong&gt; - JS evolves so quickly because you can fairly easily try out experimental syntax via Babel and get proofs-of-concept out fast.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A to B Inferred Transforms&lt;/strong&gt; - Given code "A" find the transformations necessary to get to code "B".&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Macros&lt;/strong&gt; - The Whitequark parser has a dual, Unparser. If Parser was standard Ruby, and any live code could be turned into an AST, we could rearrange it for some dramatic effects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that's a lot of ground to cover, so shall we get started?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#find-and-replace"&gt;
  &lt;/a&gt;
  Find and Replace
&lt;/h3&gt;

&lt;p&gt;Let's say you wanted to replace every instance of a certain piece of text in your program with another one. Most editors have a find and replace function with added regex support which can be very handy.&lt;/p&gt;

&lt;p&gt;For this example let's say you decided that you had named a variable &lt;code&gt;hash&lt;/code&gt; and want to replace it with something more descriptive, such as &lt;code&gt;person&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HTTP&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'some_site/people/1.json'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;then&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; was found!"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sure, it'd work for this case, but say that right below that code was something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;test_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is currently &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;test_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hash&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A global find and replace would be a real bad idea in this case, changing the meaning of your program. This is because the text "hash" has no semantic meaning, but a node related to "hash" definitely does:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# HEREDOCs surrounded in single-quotes prevents interpolation, which&lt;/span&gt;
&lt;span class="c1"&gt;# we need here.&lt;/span&gt;
&lt;span class="no"&gt;Parser&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CurrentRuby&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class="no"&gt;'RUBY'&lt;/span&gt;&lt;span class="sh"&gt;
  hash = HTTP.get('some_site/people/1.json').then { JSON.parse(_1) }
  puts "&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt; was found!"
  puts "&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;test_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt; is currently &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;test_object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hash&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="sh"&gt;"
&lt;/span&gt;&lt;span class="no"&gt;RUBY&lt;/span&gt;

&lt;span class="c1"&gt;# This generates the following AST:&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:begin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:lvasgn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:numblock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:send&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:send&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:const&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:HTTP&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;:get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"some_site/people/1.json"&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="ss"&gt;:then&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:send&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:const&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:JSON&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;:parse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:lvar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:_1&lt;/span&gt;&lt;span class="p"&gt;)))),&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:send&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:puts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:dstr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:begin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:send&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:lvar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:hash&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;:[]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt;
      &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" was found!"&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:send&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:puts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:dstr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:begin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:send&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:send&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:test_object&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;" is currently "&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:begin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:send&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:send&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:test_object&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;:hash&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have &lt;code&gt;hash&lt;/code&gt; referring to a node of type &lt;code&gt;:lvasgn&lt;/code&gt; (local variable assign) and &lt;code&gt;:lvar&lt;/code&gt; (local variable) as opposed to the later node &lt;code&gt;s(:send, s(:send, nil, :test_object), :hash)))&lt;/code&gt; which relates to the &lt;code&gt;hash&lt;/code&gt; method being called on the &lt;code&gt;test_object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ASTs gave distinct meaning to each part of that text, and given that we could more easily do replacements in a much more descriptive way. Think of it, in a way, like static typing for manipulating a program and ensuring your intent is more clearly expressed and executed.&lt;/p&gt;

&lt;p&gt;Editors currently have regex support, but who's to say that we couldn't have AST or NodePattern support in the future?&lt;/p&gt;

&lt;p&gt;Using &lt;a href="https://nodepattern.herokuapp.com/"&gt;MarcAndre's NodePattern tool&lt;/a&gt; we can even use a regular language designed for ASTs known as NodePattern to find any local variable or assignment related to &lt;code&gt;hash&lt;/code&gt; (borrowing some from &lt;a href="https://github.com/marcandre/np/blob/4f45f184d7f4c147e1efe60d7a0fe51aa446ab11/lib/np/debugger.rb#L4"&gt;src&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"rubocop"&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"parser/current"&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ruby_parser&lt;/span&gt;
  &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;RuboCop&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Parser&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CurrentRuby&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;diagnostics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all_errors_are_fatal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
  &lt;span class="n"&gt;parser&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ast_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Parser&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Source&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'(ruby)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;source: &lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;ruby_parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;node_pattern&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;RuboCop&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;NodePattern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;hash_match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node_pattern&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;~&lt;/span&gt;&lt;span class="no"&gt;NODE&lt;/span&gt;&lt;span class="sh"&gt;
  { # OR pattern
    ({lvasgn lvar} :hash _) # Either a local var or assignment
    (send nil? :hash)       # ...or a call to that variable
  } # End OR pattern
&lt;/span&gt;&lt;span class="no"&gt;NODE&lt;/span&gt;

&lt;span class="n"&gt;hash_match&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"hash = {}"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="c1"&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact this is how RuboCop autocorrect works by searching for a certain node and doing something when it's found.&lt;/p&gt;

&lt;p&gt;Some of these tools have even already been wrapped, like &lt;a href="https://github.com/jonatas/fast"&gt;Jonatas's work on FFast&lt;/a&gt; which works on top of NodePattern and some of RuboCop's previous work. Really the only things between us and this future is a bit more wrapping and polish, as well as integrations into something like VSCode.&lt;/p&gt;

&lt;p&gt;Any takers? I may well wrap some of this in a more minimalist gem that provides an easier-to-use interface to build on, as the current parts are non-intuitive unless you're willing to dig into the code on a non-trivial basis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#emberjs-style-codemods"&gt;
  &lt;/a&gt;
  EmberJS Style Codemods
&lt;/h3&gt;

&lt;p&gt;There are a lot, and I mean a lot, of ideas we can and should be taking from Javascript in the Ruby community. One of them is the idea of code mods for migrating syntaxes, and &lt;em&gt;especially&lt;/em&gt; for upgrades from old versions.&lt;/p&gt;

&lt;p&gt;When I was working with EmberJS there were &lt;a href="https://github.com/ember-codemods"&gt;multiple codemods&lt;/a&gt; designed to make migrating from one version to the next, and it was a very pleasant experience. The idea was that after you upgraded dependencies you ran one command and most if not all of the upgrade was done for your syntax.&lt;/p&gt;

&lt;p&gt;Why can't we have that in Ruby? Why not especially for Rails? Turns out the answer is that there are indeed some of these things already:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.rubocop.org/rubocop-rails/cops_rails.html"&gt;https://docs.rubocop.org/rubocop-rails/cops_rails.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that several of those support "autocorrection", meaning that running RuboCop with &lt;code&gt;-a&lt;/code&gt; will fix them for you:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;rubocop &lt;span class="nt"&gt;-a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's take a glance at the &lt;code&gt;action_filter&lt;/code&gt; cop real quick &lt;a href="https://github.com/rubocop/rubocop-rails/blob/master/lib/rubocop/cop/rails/action_filter.rb"&gt;here&lt;/a&gt;, but just a quick part of it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_method_node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;method_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method_name&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;bad_methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;MSG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;prefer: &lt;/span&gt;&lt;span class="n"&gt;preferred_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="ss"&gt;current: &lt;/span&gt;&lt;span class="n"&gt;method_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;add_offense&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;corrector&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;corrector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;preferred_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;source&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that after &lt;code&gt;add_offense&lt;/code&gt; it uses &lt;code&gt;corrector.replace&lt;/code&gt; to replace with a preferred method source. Not only that, but if we went over to the &lt;a href="https://github.com/rubocop/rubocop-rails/blob/master/spec/rubocop/cop/rails/action_filter_spec.rb"&gt;specs&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;described_class&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FILTER_METHODS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;"registers an offense for &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;offenses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inspect_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; :name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offenses&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...we can see that there are even tests for it, meaning that we can not only describe and implement transformations, but programmatically test them so we don't have to manually rerun them on our entire codebases.&lt;/p&gt;

&lt;p&gt;That's a lot of power. Imagine with me that new versions of Rails were bundled with autocorrectors which got people 90%+ done with a Rails upgrade, just from running one more command or potentially even bundling it in the official Rails upgrade process itself.&lt;/p&gt;

&lt;p&gt;We could dramatically reduce the potential for manual errors, and make upgrading a substantially more seamless and painless process.&lt;/p&gt;

&lt;p&gt;The secret here is that I do not believe this is far off, and there may well be people already doing this on the Rails core team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#babel-transpiler"&gt;
  &lt;/a&gt;
  Babel Transpiler
&lt;/h3&gt;

&lt;p&gt;Another lesson we can and should take from Javascript is the Babel traspiler. Babel allows for the introduction of syntax before it's officially in the language, making it extremely effective for testing and experimentation of new language features. Proof-of-concepts can be more easily verified, and frequently TC-39 uses them in formal proposals.&lt;/p&gt;

&lt;p&gt;Not only that, but the language can polyfill older versions with new features and enhancements, allowing developers to use features only present in newer versions more easily. For Javascript that's a huge deal as they have to deal with such variance in web browser support.&lt;/p&gt;

&lt;p&gt;As it would happen, the folks behind &lt;a href="https://github.com/ruby-next/ruby-next"&gt;Ruby Next&lt;/a&gt; have some ideas here, and have done a significant amount of work in enabling this very vision to become a reality.&lt;/p&gt;

&lt;p&gt;They wrote quite a bit on that very topic here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://evilmartians.com/chronicles/ruby-next-make-all-rubies-quack-alike"&gt;https://evilmartians.com/chronicles/ruby-next-make-all-rubies-quack-alike&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...and a lot of those terms are going to look very familiar to what you've been reading already, and there's a &lt;em&gt;very&lt;/em&gt; good reason for that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-to-b-inferred-transforms"&gt;
  &lt;/a&gt;
  A to B Inferred Transforms
&lt;/h3&gt;

&lt;p&gt;Perhaps the most troublesome part of writing regex, and really any regular language, is getting the syntax right. The same is true of NodePatterns. Why can't we just say that we have code "A" here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;even?&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and have it figure out the syntax to go to code "B" here?:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:even?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For us as humans that seems pretty straightforward. If the block argument matches the body, and only one operation is happening directly on it, we can replace that with the shorthand block syntax.&lt;/p&gt;

&lt;p&gt;What if we had a way to give code "A" and "B" and have Ruby find the transformations between the two?&lt;/p&gt;

&lt;p&gt;For simple cases that algorithm might look like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Match the original syntax&lt;/li&gt;
&lt;li&gt;Find similarities with the desired target syntax&lt;/li&gt;
&lt;li&gt;Find what has changed&lt;/li&gt;
&lt;li&gt;Identify which parts of the code moved where&lt;/li&gt;
&lt;li&gt;Create matchers to capture moved parts in the original code&lt;/li&gt;
&lt;li&gt;Create code to generate the target code&lt;/li&gt;
&lt;li&gt;Profit&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;...but those are tree algorithms which are unfortunately beyond me at the moment. The implications, however, are staggering if this is pulled off. Having a meta-language that allows one to quickly generate code migration syntax would lower the barrier to entry of code migrations that can be bundled with upgrades, and also allow whole new methods of refactoring.&lt;/p&gt;

&lt;p&gt;Perhaps I'll experiment with this more later, but at the moment it is most certainly beyond my skills. I would venture a guess that algorithms used to solve word ladders, or perhaps levenshtein/word distances, could be used here though.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#macros"&gt;
  &lt;/a&gt;
  Macros
&lt;/h3&gt;

&lt;p&gt;Having a method to express A to B is great even in static files, but what if such things could be done in a running program?&lt;/p&gt;

&lt;p&gt;If ASTs were accessible in running Ruby programs, we could potentially create syntax which could rewrite syntax.&lt;/p&gt;

&lt;p&gt;Now if you're not familiar with the idea of macros from Crystal or LISP-like languages, you might wonder why you might care. One of the primary advantages is unfolding loops, allowing algorithms to go from &lt;code&gt;O(n^2)&lt;/code&gt; to &lt;code&gt;O(n)&lt;/code&gt;, meaning massive performance benefits.&lt;/p&gt;

&lt;p&gt;I'd written on this some time ago with &lt;code&gt;matchable&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/baweaver/matchable-class-level-pattern-matching-macros-explained-32df"&gt;https://dev.to/baweaver/matchable-class-level-pattern-matching-macros-explained-32df&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The particularly relevant part is replacing the idea of &lt;code&gt;public_send&lt;/code&gt; with a directly inlined code-path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;valid_keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;deconstructed_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;deconstructed_values&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...as &lt;code&gt;public_send&lt;/code&gt; is slow compared to directly calling a method. If taken to logical extremes one could not only inline the actual method call, but extract the method code and interpolate it directly into such a method.&lt;/p&gt;

&lt;p&gt;There are already some techniques capable of doing just this, by combining Parser with &lt;a href="https://github.com/mbj/unparser"&gt;Unparser&lt;/a&gt;, but of course such things can only be done on Ruby files read in rather than in a REPL session which is where a lot more fun could happen.&lt;/p&gt;

&lt;p&gt;A live AST could really make a very interesting future here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Now you might have noticed something particularly interesting with this article: Almost all of these items are either not that far off, or are already being used in production by several major players in the Ruby ecosystem.&lt;/p&gt;

&lt;p&gt;The truth is the future has already been coming, and perhaps our issues are not as much around tooling, but in making the tooling more accessible and well understood to our community.&lt;/p&gt;

&lt;p&gt;If this is combined with more official support from the Ruby core team, especially around the Whitequark and RuboCop parsers, I believe we'll take a great step forward. The challenge now is documentation, education, advocacy, and support.&lt;/p&gt;

&lt;p&gt;I believe all of those are very possible.&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>Error Boundaries in React, how it's made?</title>
      <author>Artem Malko</author>
      <pubDate>Sun, 14 Nov 2021 07:57:17 +0000</pubDate>
      <link>https://dev.to/artemmalko/error-boundaries-in-react-how-its-made-3lam</link>
      <guid>https://dev.to/artemmalko/error-boundaries-in-react-how-its-made-3lam</guid>
      <description>&lt;p&gt;Hello everyone from Siberia ❄!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TLDR&lt;/strong&gt; This post is not about how to use Error Boundaries, but why we have to use it in a React app.&lt;/p&gt;

&lt;p&gt;Let's imagine, we had a React app, where we could read and write reviews. So, a user opened a reviews list, scrolled it a little, clicked on a button “Write a review”. After that, the user saw a popup above the list. He tried to type his email, but a code, that had to check it, had been written with a bug.&lt;br&gt;
As a result — there was only white screen. React just could not render anything cause of that error, somewhere in the popup. &lt;/p&gt;

&lt;p&gt;The first thought is “we could keep the list on the screen”! There weren't any errors in the list. So, you have to use &lt;a href="https://reactjs.org/docs/error-boundaries.html"&gt;Error Boundaries&lt;/a&gt; to catch and handle any error in render-phase in React, to prevent its propagation. But the main question is — why only that way? This post was made for the most curious developers. Let's find out.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#trycatch-is-on-the-way-to-help"&gt;
  &lt;/a&gt;
  try/catch is on the way to help
&lt;/h2&gt;

&lt;p&gt;Ok, let's start with something simple. If somebody will ask you, how to catch and process any error in JavaScript, you'll answer without no doubts, that it's possible with try/catch block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello, World! My name is error!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's run the code in a browser's console. We will see a message and a callstack of the error. Quite simple idea, known from 1995. Everything is understandable here.&lt;/p&gt;

&lt;p&gt;Now, we'll talk about React. There is one simple idea behind it. We can say, React is a function, which takes any data as a parameter and returns its visual representation. Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;UI&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know, it looks abstract a little, but it'll be enough right now. Looks like we can apply the same approach for error handling here, which is used everywhere in a JavaScript code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everything looks fine. Let's try to implement it in a real code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-the-world-with-trycatch"&gt;
  &lt;/a&gt;
  Wrap the world with try/catch
&lt;/h2&gt;

&lt;p&gt;Each React app has an “entry point”. I'm talking about ReactDOM.render. This method allows us to render our app into a specific DOM-Node:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An old fashioned synchronous render of &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; and all of its components. Hm, the best place to wrap our app with try/catch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React render error: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All errors which will be thrown during the first render will be handled by that try/catch.&lt;/p&gt;

&lt;p&gt;But, if the error will be thrown during a state change somewhere in a component inside, that try/catch will be useless. ReactDOM.render will be executed, its work has been done — the first render of &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; into the DOM. All other things is not about ReactDOM.render.&lt;/p&gt;

&lt;p&gt;There is &lt;a href="https://codesandbox.io/s/nostalgic-newton-5b5el?file=/src/index.js"&gt;a demo&lt;/a&gt;, where you can try such approach. AppWithImmediateError.js contains a component, which throws an error during the first render. On the other hand, AppWithDeferredError.js contains a component, which throws an error while inner state is changing. As you can see, our version of “global try/catch” will handle the error from AppWithImmediateError.js only. Check out a console.&lt;/p&gt;

&lt;p&gt;But, It doesn't look like a popular approach. That was just an illustration of the first render. There will be some strange examples lately. But they will be quite useful for us, cause they will reveal some features from React, its internals. &lt;/p&gt;

&lt;p&gt;By the way, new ReactDom's render methods from React 18 won't be synchronous anymore. So, our approach won't work, even for the first render.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#trycatch-inside-a-component"&gt;
  &lt;/a&gt;
  try/catch inside a component
&lt;/h2&gt;

&lt;p&gt;“Global try/catch” is an interesting idea, but it doesn't work. So, the next concept is to use try/catch inside each component. And there is no any taboo to do it. Let's forget about declarative programming, pure functions and etc. JSX syntax allows us to use try/catch inside render:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// We can use a class here too&lt;/span&gt;
&lt;span class="c1"&gt;// Just wrap an inner of the render method&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChildWithError&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App error handler: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FallbackUI&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there is &lt;a href="https://codesandbox.io/s/optimistic-antonelli-sbsyz?file=/src/App.js"&gt;another demo&lt;/a&gt; where you can find an implementation of a such concept. Just open it and click a button “Increase value”. When a value inside &lt;code&gt;&amp;lt;ChildWithError/&amp;gt;&lt;/code&gt; will be 4, this component will throw an error inside render. But there won't be any message in console, no any fallback UI. Wait, WAT? We all know, that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ChildWithError&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will become&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ChildWithError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after babel/typescript/something else processing. It means, all of our JSX will be transformed to React.createElement execution. But it means, try/catch has to handle all of the errors. What is wrong? Does React can stop JS-function  execution?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-going-on-inside-render"&gt;
  &lt;/a&gt;
  What is going on inside render?
&lt;/h2&gt;

&lt;p&gt;If you will look closely, you will see, there is no render execution of ChildWithError component inside React.createElement(ChildWithError, null). But wait, what is a result of React.createElement execution? If you want to see the source code, &lt;a href="https://github.com/facebook/react/blob/a724a3b578dce77d427bef313102a4d0e978d9b4/packages/react/src/ReactElement.js#L148"&gt;there is a link&lt;/a&gt;. In general, the next object will be returned:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// The source: https://github.com/facebook/react/blob/main/packages/react/src/ReactElement.js#L148&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// This tag allows us to uniquely identify this as a React Element&lt;/span&gt;
 &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="na"&gt;$typeof&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;REACT_ELEMENT_TYPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Built-in properties that belong on the element&lt;/span&gt;
 &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Record the component responsible for creating this element.&lt;/span&gt;
 &lt;span class="na"&gt;_owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, there will be just some objects inside other objects. For our example we will get an object, which describes &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt;. And there will be an object, which describe &lt;code&gt;&amp;lt;ChildWithError /&amp;gt;&lt;/code&gt; inside props.children of that &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt;. You can see it by yourself, just try to console.log it.&lt;/p&gt;

&lt;p&gt;There is no ChildWithError's render function execution. We've just created a scheme for React. Render will be executed from parents to children. It looks like we talk to React: if &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; is rendered, &lt;code&gt;&amp;lt;ChildWithError /&amp;gt;&lt;/code&gt; has to be rendered too, inside that &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is the main idea of declarative views in React.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you can say, that we need to execute ChildWithError's render to create such object. And you are right! But ChildWithError's render function won't be executed inside &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt;. I can say at the moment, React will call all render functions by itself, somewhere in its own context. I'll describe this idea lately.&lt;/p&gt;

&lt;p&gt;There is an analogy: componentDidUpdate will be executed via React after render. Or another one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wow!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error from catch: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That error from a promise won't be catched inside try/catch cause it will be thrown in a microtasks queue. Catch is from a sync callstack queue.&lt;/p&gt;

&lt;p&gt;By the way, you can check it by yourself. Just replace &lt;code&gt;&amp;lt;ChildWithError /&amp;gt;&lt;/code&gt; to {ChildWithError()} inside &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt;. It means, we will call ChildWithError's render by ourselves. And voila! You will see an error message in the console and the fallback UI in the browser!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n9ymNs6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1msrlowspkiyrx9s08ej.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n9ymNs6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1msrlowspkiyrx9s08ej.gif" alt="Voila" width="275" height="252"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And why not to write like this everywhere? Just call all of the render functions? It must work faster, we do not need to wait, when React will render all of the components. &lt;/p&gt;

&lt;p&gt;If you have such thoughts, you have to read a brilliant Dan Abaramov's article — &lt;a href="https://overreacted.io/react-as-a-ui-runtime/"&gt;React as a UI Runtime&lt;/a&gt;. It might help you understand the React programming model in more depth. It is strongly recommended to check out &lt;a href="https://overreacted.io/react-as-a-ui-runtime/#inversion-of-control"&gt;Inversion of Control&lt;/a&gt; and &lt;a href="https://overreacted.io/react-as-a-ui-runtime/#lazy-evaluation"&gt;Lazy Evaluation&lt;/a&gt; from that article.&lt;/p&gt;

&lt;p&gt;Funny fact, sometimes ago manual component execution was recommended as a pattern how to increase performance of any React app. There is an example, when such approach will broke our app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setItems&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;}])&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Add Item&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is &lt;a href="https://codesandbox.io/s/empty-morning-x104i"&gt;a demo&lt;/a&gt; with the code above. After the first click to AddItem button where will be an error with hooks order. This example is taken from a Kent C. Dodds' article &lt;a href="https://kentcdodds.com/blog/dont-call-a-react-function-component"&gt;Don't call a React function component&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's go back to the error handling in a React app. As we understand try/catch inside render() {} is not enough. We have to handle errors in all lifecycle-methods too in case of usage of class components. It doesn't look like a smart idea. So, what is the conclusion? Yes, we have to use only functional components, cause it's much more easy to use try/catch there =)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-real-life-example"&gt;
  &lt;/a&gt;
  The "real life" example
&lt;/h2&gt;

&lt;p&gt;I have &lt;a href="https://codesandbox.io/s/intelligent-beaver-zyujd?file=/src/App.js"&gt;a little demo&lt;/a&gt; with Error Boundaries and classic try/catch.&lt;/p&gt;

&lt;p&gt;What do we have here: functional component &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt;, which has internal state (via useState). The value of that state is shared via React.context. &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; renders &lt;code&gt;&amp;lt;Child /&amp;gt;&lt;/code&gt;. &lt;code&gt;&amp;lt;Child /&amp;gt;&lt;/code&gt; is wrapped with HOC memo. &lt;code&gt;&amp;lt;Child /&amp;gt;&lt;/code&gt; renders &lt;code&gt;&amp;lt;GrandChild /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The most interesting thing here is try/catch inside &lt;code&gt;&amp;lt;Child /&amp;gt;&lt;/code&gt;. In my idea, this try catch has to handle all errors from &lt;code&gt;&amp;lt;GrandChild /&amp;gt;&lt;/code&gt;. And &lt;code&gt;&amp;lt;GrandChild /&amp;gt;&lt;/code&gt; has a specific logic to throw an error, when the value from the context will be more that 3. There is a scheme:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hXFSvnV5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awoy4b8zvi0wkfdgqgrz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXFSvnV5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/awoy4b8zvi0wkfdgqgrz.png" alt="The scheme of the demo" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have getDerivedStateFromError and componentDidCatch inside &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt;. It means, &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; is used as Error Boundary.&lt;/p&gt;

&lt;p&gt;Let's click a button. After the first click &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;GrandChild /&amp;gt;&lt;/code&gt; will be rerendered. &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; — cause of the state change, &lt;code&gt;&amp;lt;GrandChild /&amp;gt;&lt;/code&gt; — cause of the context value change. Looks like there is no any &lt;code&gt;&amp;lt;Child /&amp;gt;&lt;/code&gt; between &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;GrandChild /&amp;gt;&lt;/code&gt;. It's because of HOC memo. Let's highlight all rerendered components:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FkKNRoZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypxtglc2qbuislhblmkr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FkKNRoZn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ypxtglc2qbuislhblmkr.png" alt="The first render result" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, if we will continue to increase the counter from &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; two times more, an error will be thrown inside &lt;code&gt;&amp;lt;GrandChild /&amp;gt;&lt;/code&gt;. But &lt;code&gt;&amp;lt;Child /&amp;gt;&lt;/code&gt; do not know about anything around with its try/catch.&lt;/p&gt;

&lt;p&gt;This demo is just a simple model that illustrated, that React decides what to render and when.&lt;/p&gt;

&lt;p&gt;By the way, we've just seen, how to use Error Boundaries) But I strongly recommend you to &lt;a href="https://reactjs.org/"&gt;read the docs&lt;/a&gt;. Moreover, it doesn't mean, what try/catch is totally useless. We have to use it for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event handlers&lt;/li&gt;
&lt;li&gt;Async code&lt;/li&gt;
&lt;li&gt;Errors thrown in the error boundary itself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, the next part is the most interesting — let's find out, how Error Boundaries works. Is it a special try/catch?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reacts-trycatch"&gt;
  &lt;/a&gt;
  React's try/catch
&lt;/h2&gt;

&lt;p&gt;Say hello to magic React Fiber. This is a name of an architecture and a name of internal entity from React itself. By the way, you could see it in &lt;a href="https://reactjs.org/docs/faq-internals.html"&gt;React docs&lt;/a&gt;, after 16th version has been released.&lt;/p&gt;

&lt;p&gt;If you will log the result of React.createElement execution, you will see quite much information (there is just a part of it):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NwbV6Ewr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vq2v1rrzciqmrehd9n7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NwbV6Ewr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vq2v1rrzciqmrehd9n7.png" alt="React component instance internals" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What does it mean for us? In addition to data about a component's type, props and etc, there is an info from a Fiber Node. This Node is connected with React component, and it has a lot of useful information (for React) about the component: new and old props, what effect should be executed, should the component be rerendered right now and etc. You can get more info about Fiber- architecture on &lt;a href="https://indepth.dev/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react"&gt;inDepth.dev&lt;/a&gt; or &lt;a href="https://github.com/acdlite"&gt;acdlite's&lt;/a&gt; (React-core team member) article &lt;a href="https://github.com/acdlite/react-fiber-architecture"&gt;React Fiber Architecture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ok, React knows an internal data of each component. It means, React knows what to do in a case of any error, which could be thrown during the render phase. React can stop the render phase for the current tree (not a component!). After that React tries to find the closest parent of the component with the error, which has defined getDerivedStateFromError or componentDidCatch method (one of them). And it's not a big deal, cause every Fiber-Node has a link to its parent Fiber-Node. There is &lt;a href="https://github.com/facebook/react/blob/bc9bb87c2b01bff8a15e02c8416addf6177e9055/packages/react-reconciler/src/ReactFiberThrow.new.js"&gt;the source code&lt;/a&gt; of how it works.&lt;/p&gt;

&lt;p&gt;The render process in React is represented with a quite simple code — &lt;a href="https://github.com/facebook/react/blob/bc9bb87c2b01bff8a15e02c8416addf6177e9055/packages/react-reconciler/src/ReactFiberWorkLoop.new.js#L1582"&gt;workLoop&lt;/a&gt;. As you can see, there is no magic, workLoop is wrapped with try/catch. If any error is catched, React will try &lt;a href="https://github.com/facebook/react/blob/bc9bb87c2b01bff8a15e02c8416addf6177e9055/packages/react-reconciler/src/ReactFiberThrow.new.js#L460"&gt;to find a component with Error Boundary&lt;/a&gt;. If such component is found, it means, that React can throw away just only that tree, till the boundary.&lt;/p&gt;

&lt;p&gt;If we will try to imagine a work with React as a dialog with a real person, it will look like this (“Explain Like I'm 5” style)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Hi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="nx"&gt;Thanks&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;instructions&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;JSX&lt;/span&gt; &lt;span class="nx"&gt;about&lt;/span&gt; &lt;span class="nx"&gt;what&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
&lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;coffee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;doing&lt;/span&gt; &lt;span class="nx"&gt;my&lt;/span&gt; &lt;span class="nx"&gt;job&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;working&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;Oops&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

  &lt;span class="nx"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;find&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;component&lt;/span&gt; 
  &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
  &lt;span class="nx"&gt;Maybe&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="nx"&gt;All&lt;/span&gt; &lt;span class="nx"&gt;other&lt;/span&gt; &lt;span class="nx"&gt;work&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;saved&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-message"&gt;
  &lt;/a&gt;
  The message
&lt;/h2&gt;

&lt;p&gt;I think, such questions, strange experiments and so on can help you to dive deep into a technology, which is used by you. It can help you to truly understand, how to work with it. Maybe you will find something new for yourself. I am absolutely sure that such a journey always pays off.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-list-of-useful-links"&gt;
  &lt;/a&gt;
  A list of useful links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/docs/error-boundaries.html"&gt;Error Boundaries&lt;/a&gt;, React docs.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://overreacted.io/react-as-a-ui-runtime/"&gt;React as a UI Runtime&lt;/a&gt;. The article which will help you understand the React programming model in more depth.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://kentcdodds.com/blog/dont-call-a-react-function-component"&gt;Don't call a React function component&lt;/a&gt; Kent C. Dodds about manual component execution.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCCQY962PmHabTjaHv2wJzfQ"&gt;Facebook Open Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://indepth.dev/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react"&gt;Inside Fiber: in-depth overview of the new reconciliation algorithm in React&lt;/a&gt;. And one more &lt;a href="https://indepth.dev/posts/1007/the-how-and-why-on-reacts-usage-of-linked-list-in-fiber-to-walk-the-components-tree"&gt;The how and why on React’s usage of linked list in Fiber to walk the component’s tree&lt;/a&gt;. These articles are for hardcore lovers.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/acdlite/react-fiber-architecture"&gt;React Fiber Architecture&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Machine Learning - Streamlit  
[Python]</title>
      <author>Bek Brace</author>
      <pubDate>Sun, 14 Nov 2021 07:48:13 +0000</pubDate>
      <link>https://dev.to/bekbrace/data-science-with-streamlitpython-52oi</link>
      <guid>https://dev.to/bekbrace/data-science-with-streamlitpython-52oi</guid>
      <description>&lt;p&gt;Streamlit, an open-source Python library that makes it easy to create and share beautiful, custom web apps for machine learning and data science. &lt;br&gt;
In this tutorial, you will see how in just a few minutes you can build a financial web app which you can use it for presentation or your own use.&lt;/p&gt;

&lt;p&gt;Streamlit turns data scripts into shareable web apps in minutes; and the best part is that it's all in Python, and it's open source which means all for free. No front‑end experience required. So to create animation sliders, rendering charts/graphs, animating download bars and much more is done without any HTML/CSS/JS , just Python.&lt;/p&gt;

&lt;p&gt;To try it out, go ahead to your terminal and type:&lt;/p&gt;

&lt;p&gt;$ pip install streamlit&lt;br&gt;
then fire the server for demo apps:&lt;br&gt;
$ streamlit hello&lt;/p&gt;

&lt;p&gt;This is the latest Data Science video tutorial created on the channel :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/e_OPmGjkAVs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hope you enjoy it, and I will see in next video posts :)&lt;/p&gt;

&lt;p&gt;✨ Streamlit Website:  &lt;a href="https://streamlit.io"&gt;https://streamlit.io&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#social-media"&gt;
  &lt;/a&gt;
  🔗 Social Media  
&lt;/h2&gt;

&lt;p&gt;Facebook : &lt;a href="https://www.facebook.com/bekbrace%E2%80%8B%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://www.facebook.com/bekbrace​​​​&lt;/a&gt; &lt;br&gt;
Twitter : &lt;a href="https://twitter.com/BekBrace"&gt;https://twitter.com/BekBrace&lt;/a&gt;&lt;br&gt;
Instagram : &lt;a href="https://www.instagram.com/bek_brace/"&gt;https://www.instagram.com/bek_brace/&lt;/a&gt;&lt;br&gt;
Tech Blog : ttps://dev.to/bekbrace​​​​&lt;br&gt;
GitHub profile : &lt;a href="https://github.com/BekBrace%E2%80%8B%E2%80%8B%E2%80%8B"&gt;https://github.com/BekBrace​​​&lt;/a&gt;&lt;br&gt;
Website : &lt;a href="https://bekbrace.com"&gt;https://bekbrace.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>machinelearning</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Amazon Redshift: Cost Optimization | AWS White Paper Summary
</title>
      <author>Adit Modi</author>
      <pubDate>Sun, 14 Nov 2021 07:28:31 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/amazon-redshift-cost-optimization-aws-white-paper-summary-13j1</link>
      <guid>https://dev.to/awsmenacommunity/amazon-redshift-cost-optimization-aws-white-paper-summary-13j1</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Amazon Redshift is a fast, fully managed, petabyte-scale data warehouse service that makes it simple and cost-effective to efficiently analyze all your data using your existing business intelligence tools. This document shares the most common cost optimization methods adopted across our customer base.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#sizing-considerations"&gt;
  &lt;/a&gt;
  Sizing Considerations
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cost optimization starts with choosing the right node type, instance type, and payment structure to meet your cloud data warehouse requirements such as, CPU, RAM, storage capacity and type, and availability. When you select your instance type consider that Amazon Redshift compresses data up to four times. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you start using Amazon Redshift for the first time, you will receive a recommendation for the best node type based on your needs. You can easily scale up or down if your business need changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Redshift RA3 nodes with managed storage enable you to optimize your data warehouse by scaling and paying for compute and managed storage independently. With RA3, you choose the number of nodes based on your performance requirements and pay only for the managed storage that you use. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should size your RA3 cluster based on the amount of data you process daily. There’s a recommendation engine built into the console to help you make the right selection.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Redshift managed storage uses large, high-performance SSDs in each RA3 node for fast local storage and Amazon Simple Storage Service (Amazon S3) for longer-term durable storage. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If the data in a node grows beyond the size of the large local SSDs, Amazon Redshift managed storage automatically offloads that data to Amazon S3. You pay the same low rate for Amazon Redshift managed storage regardless of whether the data sits in high-performance SSDs or Amazon S3. For workloads that require ever-growing storage, managed storage lets you automatically scale your data warehouse storage capacity without adding and paying for additional nodes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Previous generation nodes include DC2 (Compute intensive), DS2 (Storage Intensive). Reserved instances (RI) (also called reserved nodes in the Amazon Redshift console) can provide up to 75% savings vs on-demand pricing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Instance type&lt;/th&gt;
&lt;th&gt;Size&lt;/th&gt;
&lt;th&gt;Memory&lt;/th&gt;
&lt;th&gt;CPUs&lt;/th&gt;
&lt;th&gt;1-Year&lt;/th&gt;
&lt;th&gt;3-Year&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;RA3 4xlarge&lt;/td&gt;
&lt;td&gt;Scales to 64 TB&lt;/td&gt;
&lt;td&gt;96 GB&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;34%&lt;/td&gt;
&lt;td&gt;63%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RA3 16xlarge&lt;/td&gt;
&lt;td&gt;Scales to 64 TB&lt;/td&gt;
&lt;td&gt;384 GB&lt;/td&gt;
&lt;td&gt;48&lt;/td&gt;
&lt;td&gt;34%&lt;/td&gt;
&lt;td&gt;63%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DC2 large&lt;/td&gt;
&lt;td&gt;160 GB&lt;/td&gt;
&lt;td&gt;16 GB&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;37%&lt;/td&gt;
&lt;td&gt;62%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DC2 8xlarge&lt;/td&gt;
&lt;td&gt;2.56 TB&lt;/td&gt;
&lt;td&gt;244 GB&lt;/td&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;34%&lt;/td&gt;
&lt;td&gt;69%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DS2 xlarge&lt;/td&gt;
&lt;td&gt;2 TB&lt;/td&gt;
&lt;td&gt;32 GB&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;42%&lt;/td&gt;
&lt;td&gt;75%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DS2 8xlarge&lt;/td&gt;
&lt;td&gt;16 TB&lt;/td&gt;
&lt;td&gt;244 GB&lt;/td&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;42%&lt;/td&gt;
&lt;td&gt;75%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#trusted-advisor"&gt;
  &lt;/a&gt;
  Trusted Advisor
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The Trusted Advisor application (available under management and governance) runs automated checks against your Amazon Redshift resources in your account to notify you about cost optimization opportunities. Checks include following:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Redshift Reserved Node Optimization&lt;/strong&gt;: Checks usage to provide&lt;br&gt;
recommendations about when to purchase reserved nodes to help reduce costs. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Recommended Action&lt;/strong&gt;: Evaluate and identify clusters that will benefit from purchasing reserved nodes. Moving from on-demand will result in between 60-75% cost savings.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Underutilized Redshift Clusters&lt;/strong&gt;: Checks for clusters that appear to be underutilized (&amp;lt; 5% average CPU utilization for 99% of last 7 days).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Recommended Action&lt;/strong&gt;: Shutting down the cluster and taking a final snapshot or downsizing will save costs.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#cost-explorer"&gt;
  &lt;/a&gt;
  Cost Explorer
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;AWS Cost Explorer&lt;/strong&gt; helps you visualize, understand, and manage your AWS costs and usage over time. It provides the following features, insights, and alerts to manage your Amazon Redshift cluster by breaking down its usage across linked accounts, regions, usage groups, and tags from the last 12 months.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Budgets:&lt;/strong&gt; Create budgets based on cost, usage, Reserved node&lt;br&gt;
utilization/coverage. Amazon Redshift customers can create budgets based on usage type (paid snapshots, node hours, and data scanned in TB), or usage type groups (Amazon Redshift running hours) and schedule automated alerts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cost and Usage Reports:&lt;/strong&gt; Amazon Redshift cost and usage reports include usage by an account and AWS Identity and Access Management (IAM) users in hourly or daily line items, as well as tags for cost allocation. It can provide complex insights and aggregations. It integrates with Amazon Athena, Amazon Redshift, and Amazon Quicksight. It supports compression types such as Gzip, zip, and Parquet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reservations:&lt;/strong&gt; Provides recommendations on RI purchase for Amazon Redshift cluster based the last 30 to 60 days. These recommendations include potential savings (monthly/yearly) based on payment terms (no upfront/partial upfront/all upfront). RI coverage and utilization reports give insights on the cluster usage to help with decisions to purchase reservations for Amazon Redshift.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-redshift-advisor"&gt;
  &lt;/a&gt;
  Amazon Redshift Advisor
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When it comes to assisting with not only the operating costs of your Amazon Redshift cluster, but also improving the performance, Amazon Redshift offers its own Trusted Advisor. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Amazon Redshift Advisor tool is built directly in the Amazon Redshift console. It identifies undesirable end-user behaviors for resolutions by providing recommendations to improve performance and reduce cost. Amazon Redshift Advisor generates automatic observations and recommendations based on your cluster workload. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two of the most important cost recommendations provided are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;alerts to idle clusters that could be deleted or down sized &lt;/li&gt;
&lt;li&gt;alerts to excessive uncompressed storage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#table-compression"&gt;
  &lt;/a&gt;
  Table Compression
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;On the topic of cost optimization, one of the first things that should come to mind when thinking of a data warehouse (DW) is compressing the table data. When you don't use compression, data consumes additional space and requires additional disk I/O. That additional space and I/O will directly correlate to increases in your Amazon Redshift bill. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Advisor tracks uncompressed storage and reviews storage metadata associated with large uncompressed columns that aren't sort key columns. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Advisor offers a recommendation to rebuild tables with uncompressed columns when the total amount of uncompressed storage exceeds 15 percent of total storage space, or at the following node-specific thresholds. When it comes time to select the correct compression, use the &lt;code&gt;ANALYZE COMPRESSION&lt;/code&gt; command to suggest a compression. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Encoding type&lt;/th&gt;
&lt;th&gt;Keyword in CREATE TABLE and ALTER TABLE&lt;/th&gt;
&lt;th&gt;Data Types&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Raw (no compression)&lt;/td&gt;
&lt;td&gt;RAW&lt;/td&gt;
&lt;td&gt;ALL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AZ64&lt;/td&gt;
&lt;td&gt;AZ64&lt;/td&gt;
&lt;td&gt;SMALLINT, INTEGER, BIGINT, DECIMAL, DATE, TIMESTAMP, TIMESTAMPTZ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Byte Dictionary&lt;/td&gt;
&lt;td&gt;BYTEDICT&lt;/td&gt;
&lt;td&gt;SMALLINT, INTEGER, BIGINT, DECIMAL, REAL, DOUBLE PRECISION, CHAR, VARCHAR, DATE, TIMESTAMP, TIMESTAMPTZ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Delta&lt;/td&gt;
&lt;td&gt;DELTA, DELTA3K&lt;/td&gt;
&lt;td&gt;SMALLINT, INT, BIGINT, DATE, TIMESTAMP, DECIMAL INT, BIGINT, DATE, TIMESTAMP, DECIMAL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LZO&lt;/td&gt;
&lt;td&gt;LZO&lt;/td&gt;
&lt;td&gt;SMALLINT, INTEGER, BIGINT, DECIMAL, CHAR, VARCHAR, DATE, TIMESTAMP, TIMESTAMPTZ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mostlyn&lt;/td&gt;
&lt;td&gt;MOSTLY8&lt;/td&gt;
&lt;td&gt;SMALLINT, INT, BIGINT, DECIMAL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;MOSTLY16&lt;/td&gt;
&lt;td&gt;INT, BIGINT, DECIMAL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;MOSTLY32&lt;/td&gt;
&lt;td&gt;BIGINT, DECIMAL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Run-Length&lt;/td&gt;
&lt;td&gt;RUNLENGTH&lt;/td&gt;
&lt;td&gt;SMALLINT, INTEGER, BIGINT, DECIMAL, REAL, DOUBLE PRECISION, BOOLEAN, CHAR, VARCHAR, DATE, TIMESTAMP, TIMESTAMPTZ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;TEXT255, TEXT32K&lt;/td&gt;
&lt;td&gt;VARCHAR only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zstandard&lt;/td&gt;
&lt;td&gt;ZSTD&lt;/td&gt;
&lt;td&gt;SMALLINT, INTEGER, BIGINT, DECIMAL, REAL, DOUBLE PRECISION, BOOLEAN, CHAR, VARCHAR, DATE, TIMESTAMP, TIMESTAMPTZ&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;## Compressing Amazon S3 file objects loaded by COPY&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;COPY command&lt;/code&gt; integrates with the massively parallel processing (MPP) architecture in Amazon Redshift to read and load data in parallel from Amazon S3, Amazon DynamoDB, and text output. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Advisor analysis identifies COPY commands that load large uncompressed datasets. In this case, Advisor generates a recommendation to implement compression on the source files in Amazon S3. This greatly reduces data transfer costs. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The ideal object size is 1to 128 MB after compression. You can also use the COPY command with &lt;code&gt;COMPUPDATE&lt;/code&gt; set to ON to analyze and apply compression automatically. You can use automatic compression when you create and load a brand new table. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The COPY command performs a compression analysis. You can also perform a compression analysis without loading data or changing the compression on a table by running the &lt;code&gt;ANALYZE COMPRESSION&lt;/code&gt; command on an already populated table. You can also compress files with Gzip, lzop, or bzip2 format.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pause-and-resume"&gt;
  &lt;/a&gt;
  Pause and Resume
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You may choose to use the pause and resume feature your cluster to quickly suspend the on demand billing of your cluster while it is in downtime. While production workloads often run 24/7, development works can be easily shut on and off enabling you to optimize your spend for the hours the dev cluster is not in use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the cluster is turned off you are no longer charged for the clusters compute. You will still incur associated storage charges. In order to invoke pause and resume you can either use the Amazon Redshift console or the Amazon Redshift API. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;## Cluster Resize&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;As your Amazon Redshift capacity or performance changes throughout its lifecycle, you may find yourself needing to resize in order to make the best use of your cluster. If you find yourself with an oversized cluster, you have three options to resize for the appropriate workload.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#elastic-resize"&gt;
  &lt;/a&gt;
  Elastic Resize
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Elastic Resize is the optimal and fastest way to quickly add or remove nodes or change node types from an existing cluster. It automates the steps of taking a snapshot, creating a new cluster, deleting the old cluster and renaming the new cluster into a&lt;br&gt;
simple, quick and familiar operation. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The elastic resize operation can be run at any time or can be scheduled to run at a future time. Customers can quickly upgrade their existing DS2 or DC2 node type-based cluster to the new RA3 node type with elastic resize. This leads to serious cost control as you can downsize if you are working with oversized cluster or you can start with a small, cost effective data warehouse and scale up ondemand as your needs grow. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When a cluster is resized using elastic resize with the same node type, it automatically redistributes the data to the new nodes. The process only takes ten to fifteen minutes to complete as the resize does not create a new cluster. A snapshot would be created and a new cluster is provisioned for you with the latest data from the snapshot. The cluster is temporarily unavailable for writes (reads will be available) when the data is transferred to the new cluster. Amazon Redshift will send an event notification once the resize completes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For dc2.large or ds2.xlarge node types, you can double the size or half the size of the number of nodes of the original cluster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For dc2.8xlarge, ds2.8xlarge, ra3.4xlarge, or ra3.16xlarge node types, you can change the number of nodes to half the current number to double the current number of nodes.&lt;br&gt;
A 4-node cluster can be resized to 2, 3, 5, 6, 7, or 8 nodes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#classic-resize"&gt;
  &lt;/a&gt;
  Classic Resize
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Classic resize is the manual approach to resizing your cluster and is the predecessor to Elastic Resize. Elastic resize is the recommended option.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#concurrency-scaling"&gt;
  &lt;/a&gt;
  Concurrency Scaling
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;While resizing your cluster is fit for known workloads, for spiky workloads you should consider using the concurrency scaling feature. Concurrency scaling is a cost-effective way to pay only for additional capacity during large workload spikes, as opposed to adding persistent nodes in the cluster that will incur extra costs during downtime. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Users can right-size to a more cost-effective cluster and Amazon Redshift will automatically add additional cluster capacity when you need it to process an increase in concurrent read queries (write operations continue as normal). Each cluster earns up to one hour of free concurrency scaling credits per day, which is sufficient capacity for almost of all workload types. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For the small chance you go over your allotted free credits, you simply pay a per-second on-demand rate for the usage that exceeds those credits. To implement the concurrency scaling, the user will route queries to concurrency scaling clusters by enabling a workload manager (WLM) queue as a concurrency scaling queue. To enable concurrency scaling on a queue, you will set the concurrency scaling mode value to auto.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#amazon-redshift-spectrum"&gt;
  &lt;/a&gt;
  Amazon Redshift Spectrum
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Redshift and the Amazon Redshift Spectrum feature powers the lake house architecture – enabling you to query data across your data warehouse, data lake, and operational databases to gain faster and deeper insights not possible otherwise. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With a lake house architecture, you can store data in open file formats in your Amazon S3 data lake.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With an Amazon Redshift lake house architecture, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easily query data in your data lake and write data back to your data lake in openformats.&lt;/li&gt;
&lt;li&gt;Use familiar SQL statements to combine and process data across all your data stores.&lt;/li&gt;
&lt;li&gt;Queries span both the frequently accessed hot data stored locally in Amazon Redshift and the warm or cold data stored cost-effectively in Amazon S3, using views with no schema binding for external tables.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Redshift has many advantages when it comes to cost management. You can start small at just $0.25 per hour, and scale to 1TB for just under $1,000TB per year. You can take advantage of reserved instances, which save up to 75% compared to ondemand prices when you commit to using Amazon Redshift for a 1- or 3-year term. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It starts with choosing the appropriate cluster configuration, leveraging tools to keep track of the costs during its operationalization, following advisor recommendations for its management, pause and resume for specified downtimes, and resizing options for changing demands and use cases. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Amazon Redshift also provides predictability in month-to-month cost even when you have unpredictable or highly concurrent workloads because each Amazon Redshift cluster earns up to an hour of free concurrency scaling credits per day, which can be used to offset the cost of the transient clusters that are automatically added to handle high concurrency. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As the size of data grows, infrequently accessed data can also be stored cost-effectively in Amazon S3 and still be queried with Amazon Redshift.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://d1.awsstatic.com/whitepapers/amazon-redshift-cost-optimization.pdf?did=wp_card&amp;amp;trk=wp_card"&gt;Original paper&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>datascience</category>
      <category>bigdata</category>
      <category>opensource</category>
    </item>
    <item>
      <title>code every day with me</title>
      <author>duccanhole</author>
      <pubDate>Sun, 14 Nov 2021 07:21:28 +0000</pubDate>
      <link>https://dev.to/coderduck/code-every-day-with-me-487k</link>
      <guid>https://dev.to/coderduck/code-every-day-with-me-487k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#day-20"&gt;
  &lt;/a&gt;
  --DAY 20--
&lt;/h2&gt;

&lt;p&gt;Hi, I am going to make #100DaysOfCode Challenge. Everyday I will try solve 1 problem from leetcode or hackerrank. Hope you can go with me until end.&lt;br&gt;
&lt;strong&gt;Now let's solve problem today:&lt;/strong&gt;&lt;br&gt;
Problem: Two Sum II&lt;br&gt;
Detail: &lt;a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/"&gt;here&lt;/a&gt;&lt;br&gt;
My solution(javascript):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var twoSum = function(numbers, target) {
    let i=0,j=numbers.length-1;
    while(i&amp;lt;j){
        if(numbers[i]+numbers[j]==target){
            return [i+1,j+1];
        }
        else if (numbers[i] + numbers[j] &amp;lt; target)
            i++;
        else
            j--;
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;--&amp;gt;&lt;em&gt;If you have better solution or any question, please comment below. I will appreciate.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>algorithms</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Node.js Event Loop In Action</title>
      <author>Altamash Ali</author>
      <pubDate>Sun, 14 Nov 2021 07:20:22 +0000</pubDate>
      <link>https://dev.to/altamashali/nodejs-event-loop-in-action-d5o</link>
      <guid>https://dev.to/altamashali/nodejs-event-loop-in-action-d5o</guid>
      <description>&lt;p&gt;In my last post(&lt;a href="https://dev.to/altamashali/deep-dive-into-nodejs-architecture-5190"&gt;Deep dive into Node.js Architecture&lt;/a&gt;), we learnt about the internals of Node.js and how multiple asynchronous operations work efficiently in a single-threaded environment. We also talked about how event loop works and facilitates the event-driven architecture of Node.js. I would recommend going through my previous post before reading this one.&lt;/p&gt;

&lt;p&gt;In this article, we are going to learn more about event loop and it's different phases along with a code example.&lt;/p&gt;

&lt;p&gt;Before we start, you might ask why does a Node.js developer need to know about Event loop. The answer to this is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;event loop is the one that handles all the scheduling of your application code and any misconceptions regarding this can lead to poor performance and buggy code,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;and it is a very important interview question if you are applying for Nodejs backend role.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;so, Let's start :)&lt;/p&gt;

&lt;p&gt;As we discussed earlier, Event loop is nothing but a loop. It just loops over the set of events sent by Synchronous Event Demultiplexer, trigger callbacks and move the application along. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#event-loop-phases"&gt;
  &lt;/a&gt;
  Event Loop Phases
&lt;/h2&gt;

&lt;p&gt;The event loop has several different phases to it and each one of these phases maintains a queue of callbacks that are to be executed. Callbacks are destined for different phases based on how they are used by the application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--glgmzZoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tg3gnbnntwdmdbvutpgo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--glgmzZoH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tg3gnbnntwdmdbvutpgo.png" alt="Image description" width="119" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#poll"&gt;
  &lt;/a&gt;
  Poll
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The poll phase executes I/O-related callbacks.&lt;/li&gt;
&lt;li&gt;Most of the application code executes in this phase.&lt;/li&gt;
&lt;li&gt;Starting point of Node.js application&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#check"&gt;
  &lt;/a&gt;
  Check
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In this phase, callbacks that are triggered via &lt;code&gt;setImmediate()&lt;/code&gt; are executed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#close"&gt;
  &lt;/a&gt;
  Close
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This phase executes callbacks triggered via &lt;code&gt;EventEmitter close events&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For example, when a net.Server TCP server closes, it emits a close events that runs in this phase.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#timers"&gt;
  &lt;/a&gt;
  Timers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;In this phase, callbacks triggered via &lt;code&gt;setTimeout()&lt;/code&gt; and &lt;code&gt;setInterval()&lt;/code&gt; are executed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#pending"&gt;
  &lt;/a&gt;
  Pending
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Special system events are run in this phase, like when a net.Socket TCP soccer throws an &lt;code&gt;ECONNREFUSED&lt;/code&gt; error.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from these, there are &lt;strong&gt;two special microtask queues&lt;/strong&gt; that can have callbacks added to them while a phase is running.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first microtask queue handles callbacks registered using &lt;code&gt;process.nextTick()&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second microtask queues handles &lt;code&gt;promises&lt;/code&gt; that reject or resolve.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#execution-priority-and-order"&gt;
  &lt;/a&gt;
  Execution Priority and order
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Callback in the microtask queues take priority over callbacks in the phase's normal queue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Callbacks in the next tick microtask queue run before callbacks in the promise microtask queue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the application starts running, the event loop is also started and the phases are handled one at a time. Node.js adds callbacks to different queues as appropriate while the application runs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the event loop gets to a phase, it will run all the callbacks in the phase's queue. Once all the callbacks in a given phase are executed, the event loop then moves on to the next phase.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's see one code example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vpHxux9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ij235b1f7tffh8rphneu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vpHxux9T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ij235b1f7tffh8rphneu.png" alt="Image description" width="880" height="818"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Output will be : 8, 3, 2, 1,  4, 7, 6, 5&lt;/p&gt;

&lt;p&gt;Let's see what is happening behind the scene:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code execution starts off executing line by line in the poll phase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;First, the fs module is required.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, the &lt;code&gt;setImmediate()&lt;/code&gt; call is run and its callback is added to the &lt;code&gt;check queue&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, the &lt;code&gt;promise&lt;/code&gt; resolves, adding callback to the &lt;code&gt;promise microtask queue&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then, &lt;code&gt;process.nextTick()&lt;/code&gt; runs next, adding its callback to the &lt;code&gt;next tick microtask queue&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, the &lt;code&gt;fs.readFile()&lt;/code&gt; tells Node.js to start reading the file, placing its callback in the &lt;code&gt;poll queue&lt;/code&gt; once it is ready.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally &lt;code&gt;console.log(8)&lt;/code&gt; is called and 8 is printed to the screen.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's it for the current stack.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now, the two microtask queues are consulted. The next tick microtask queue is always checked first, and callback 3 is called. Since, there is only one callback in the next tick microtask queue, the promise microtask queue is checked next and callback 2 is executed. That finished the two micro-task queues and the current poll phase is completed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, the event loop enters the check phase. This phase has callback 1 in it, which is then executed. Both the microtask queues are empty at this point, so the check phase ends.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The close phase is checked next but is empty, so the loop continues. The same happens with the timers phase and the pending phase, and the event loop continues back around to the poll phase.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once it is back in the poll phase, the application doesn't have much else going on, so it basically waits until the file has finished being read. Once that happens, the &lt;code&gt;fs.readFile()&lt;/code&gt; callback is run.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The number 4 is immediately printed since it's the first line in the callback.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;next, the &lt;code&gt;setTimeout()&lt;/code&gt; call is made and callback 5 is added to the timers queue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;setImmediate()&lt;/code&gt; call happens next, adding callback 6 to the check queue.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, the process.nextTick() call is made, adding callback 7 to the next ticket microtask queue.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The poll phase is now finished and the microtask queues are again consulted. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Callback 7 runs from the next tick queue,&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the promise queue is consulted and found empty, and the poll phase ends.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Again the event loop enters to the check phase where callback 6 is encountered. The number is printed and microtask queues are determined to be empty and the phase ends.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The close phase is checked again and found empty.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, the timers phase is consulted and callback 5 is executed and prints 5 on the console.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once that's done, the applications doesn't have any more work to do and it exits.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we know, Node.js runtime environment is single-threaded. Running too much code in a single stack will stall the event loop and prevent other callbacks from firing. To prevent this event loop starving situation, you can break your CPU-heavy operations up across multiple stacks. For example, if you are processing 1000 data records, you can consider breaking down into 10 batches of 100 records, using &lt;code&gt;setImmediate()&lt;/code&gt; at the end of each batch to continue processing the next batch. Another option is forking a new child process and offload processing to it. But never break up such work using &lt;code&gt;process.nextTick()&lt;/code&gt;. Doing so will lead to a microtask queue that never empties and your application will be trapped in the same phase forever. The runtime won't throw any error instead it will remain a zombie process that eats through CPU.&lt;/p&gt;

&lt;p&gt;That's all about event loop.&lt;/p&gt;

&lt;p&gt;Similar question was asked to me in an interview and that time I had no clue about it and yeah, it was screwed :( . So, I have done some research on it and found this whole concept in the book &lt;strong&gt;'Distributed Systems with Node.js'&lt;/strong&gt;. This whole article is referenced for this book. If you want to learn more, have a look into it. No credits stealing ! &lt;/p&gt;

&lt;p&gt;I hope you have enjoyed reading this article and found it interesting and useful :)&lt;/p&gt;

&lt;p&gt;Thanks and see you later !&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
