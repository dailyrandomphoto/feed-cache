<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Advanced JavaScript Series - Part 4.2: Scope Chains and their working, Lexical and Variable Environments</title>
      <author>Pranav</author>
      <pubDate>Sun, 16 Jan 2022 20:25:36 +0000</pubDate>
      <link>https://dev.to/pranav016/advanced-javascript-series-part-42-scope-chains-and-their-working-lexical-and-variable-environments-19d5</link>
      <guid>https://dev.to/pranav016/advanced-javascript-series-part-42-scope-chains-and-their-working-lexical-and-variable-environments-19d5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-scope-chain"&gt;
  &lt;/a&gt;
  What is a Scope Chain?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The Scope Chain is the hierarchy of scopes that will be searched in order to find a function or variable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cAgLjVDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kz8mt8i5eo0plhotv8j1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cAgLjVDV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kz8mt8i5eo0plhotv8j1.png" alt="Scope Chain" width="829" height="660"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Credits- &lt;a href="https://hashnode.com/@anuradha"&gt;Anuradha Aggarwal&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When a variable is used in JavaScript, the &lt;strong&gt;JavaScript engine&lt;/strong&gt; will try to find the variable’s value in the current scope. If it could not find the variable, it will look into the outer scope and will continue to do so until it finds the variable or reaches &lt;strong&gt;global scope&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;If it’s still could not find the variable, it will either &lt;strong&gt;implicitly declare the variable&lt;/strong&gt; in the global scope (if not in strict mode) or return an &lt;strong&gt;error&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The Scope Chain is used to &lt;strong&gt;resolve variables&lt;/strong&gt;. When asked to resolve a variable, JavaScript always starts at the &lt;strong&gt;innermost level&lt;/strong&gt; of the code nest and keeps jumping back to the parent scope until it finds the variable or any other resource it is looking for. &lt;/li&gt;
&lt;li&gt;The scope chain can simply be defined as an &lt;strong&gt;object&lt;/strong&gt; that contains a bunch of other objects. Each object has the &lt;strong&gt;variable-to-value mapping&lt;/strong&gt; for its particular execution context.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example-
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let c = 10
function a() {
  let b = 25;  
  console.log('Inside function a()');
}
a();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#sample-scope-chain-object-for-the-function-raw-a-endraw-"&gt;
  &lt;/a&gt;
  Sample Scope chain object for the function &lt;code&gt;a&lt;/code&gt;-
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;functionLexicalEnvironment = {
  environmentRecord: {
      b    : 25,
  }
  outer: {
    c  : 10,
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lexical-environment"&gt;
  &lt;/a&gt;
  Lexical Environment-
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A lexical environment is a structure that holds &lt;strong&gt;identifier-variable mapping&lt;/strong&gt;. &lt;br&gt;
(here identifier refers to the name of variables/functions, and the variable is the reference to actual object [including function object and array object] or primitive value).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Simply put, a lexical environment is a place where &lt;strong&gt;variables and references to the objects&lt;/strong&gt; are stored.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lexical environment conceptually looks like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lexicalEnvironment = {
  environmentRecord: {
    &amp;lt;identifier&amp;gt; : &amp;lt;value&amp;gt;,
    &amp;lt;identifier&amp;gt; : &amp;lt;value&amp;gt;
  }
  outer: &amp;lt; Reference to the parent lexical environment&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Let's understand this with the help of an example-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let language = 'JS';
function a() {
  let b = 25;  
  console.log('Inside function a()');
}
a();
console.log('Inside global execution context');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The JavaScript engine creates a new &lt;strong&gt;lexical environment&lt;/strong&gt; to store the variables and functions defined in the global scope when it establishes a &lt;strong&gt;global execution context&lt;/strong&gt; to execute global code. As a result, the lexical environment for the global scope will be as follows:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;globalLexicalEnvironment = {
  environmentRecord: {
      language    : 'JS',
      a : &amp;lt; reference to function object &amp;gt;
  }
  outer: null
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Because there is no outer &lt;strong&gt;lexical environment&lt;/strong&gt; for the global scope, the outer lexical environment is set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the engine establishes an &lt;strong&gt;execution context&lt;/strong&gt; for the &lt;code&gt;a()&lt;/code&gt; function, it also creates a lexical environment in which variables defined in the function can be stored while the function is being executed. As a result, the function's &lt;strong&gt;lexical environment&lt;/strong&gt; will look like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;functionLexicalEnvironment = {
  environmentRecord: {
      b    : 25,
  }
  outer: &amp;lt;globalLexicalEnvironment&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Because the function is surrounded by the &lt;strong&gt;global scope&lt;/strong&gt; in the source code, the function's outer lexical environment is set to the global lexical environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When a function finishes executing, its execution context is removed from the stack, but its lexical environment &lt;strong&gt;may or may not be erased from memory&lt;/strong&gt;, depending on whether it is referenced by any other lexical environments in their &lt;strong&gt;outer lexical environment property&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#variable-environment"&gt;
  &lt;/a&gt;
  Variable Environment-
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;The variable environment is a representation of the &lt;strong&gt;lexical environment’s local memory&lt;/strong&gt;. In the environment record, the lexical environment stores variables as well as other information such as the infamous this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We've previously used one variable environment, the &lt;strong&gt;global environment's memory&lt;/strong&gt;, which holds variables that are universally available throughout the script. While the lexical environment refers to this global environment, the variable environment only refers &lt;strong&gt;to variables created within the scope&lt;/strong&gt; of the provided function within the lexical environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The variable environment &lt;strong&gt;maps the local scope&lt;/strong&gt; of a given environment. In other words, the variable environment stores those variables defined within the given working code block &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7MALeaCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olf5ymfxixmr88y5i2jf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7MALeaCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/olf5ymfxixmr88y5i2jf.png" alt="Img" width="823" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Credits-  &lt;a href="https://stackoverflow.com/users/1348195/benjamin-gruenbaum"&gt;Benjamin Gruenbaum&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#appendix"&gt;
  &lt;/a&gt;
  Appendix-
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-1-behind-the-scenes-javascript-engine-ats-hidden-classes-garbage-collection-3ajj"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 1&lt;/strong&gt;: Behind the scenes (JavaScript Engine, ATS, Hidden Classes, Garbage Collection)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-1-execution-context-and-call-stack-l1o"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 2&lt;/strong&gt;: Execution Context and Call Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-3-weird-js-behavior-strict-mode-and-hoisting-26a3"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 3&lt;/strong&gt;: Weird JS behavior, Strict Mode and Hoisting, Temporal Dead Zone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/pranav016/advanced-javascript-series-part-41-global-function-and-block-scope-lexical-vs-dynamic-scoping-20pg"&gt;&lt;strong&gt;Advanced JavaScript Series - Part 4.1&lt;/strong&gt;: Global, Function and Block Scope, Lexical vs Dynamic Scoping&lt;/a&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References-
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://anuradha.hashnode.dev/scope-chain-and-lexical-environment-in-javascript"&gt;https://anuradha.hashnode.dev/scope-chain-and-lexical-environment-in-javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bitsrc.io/understanding-scope-and-scope-chain-in-javascript-f6637978cf53"&gt;https://blog.bitsrc.io/understanding-scope-and-scope-chain-in-javascript-f6637978cf53&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@bdov_/javascript-typescript-execution-vs-lexical-vs-variable-environment-37ff3f264831"&gt;https://medium.com/@bdov_/javascript-typescript-execution-vs-lexical-vs-variable-environment-37ff3f264831&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/20721626/value-of-variable-and-lexical-environment-after-creating-execution-context"&gt;https://stackoverflow.com/questions/20721626/value-of-variable-and-lexical-environment-after-creating-execution-context&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>react</category>
    </item>
    <item>
      <title>How I made an Online E-book store and reader</title>
      <author>Akbar Ali</author>
      <pubDate>Sun, 16 Jan 2022 19:26:19 +0000</pubDate>
      <link>https://dev.to/pulimoodan/how-i-made-an-online-e-book-store-and-reader-53h2</link>
      <guid>https://dev.to/pulimoodan/how-i-made-an-online-e-book-store-and-reader-53h2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;First of all, I am a full stack web developer working as a freelancer. I have done many projects with Django for many of my clients, but recently I thought about initiating a startup. Many ideas came up among my friends and we decided to start working on some of them.&lt;/p&gt;

&lt;p&gt;One of the ideas was to build an online e-book store for monthly subscription. I didn't think about any copy-right issues and competitors. We found some pdfs of famous books and I just started developing. Yeah, I am the one and only developer among my friends. I have to develop it myself. They ask me about the updates everyday.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems-to-solve"&gt;
  &lt;/a&gt;
  Problems to solve
&lt;/h2&gt;

&lt;p&gt;I have seen many e-book readers like Kindle, Google books, Wattpad and so on. But I always wondered about how they manage to deliver each page to users without any chance to steal their book. I tried inspecting many web apps and found no loopholes. At last, Made an API to request each page of the book to server and return page as base64 image. &lt;/p&gt;

&lt;p&gt;But still the problem exists. The users can download the image of the page. Surfed around the internet. I found some other guys who asks the same questions - "&lt;strong&gt;How to protect images from being downloaded?&lt;/strong&gt;"&lt;/p&gt;

&lt;p&gt;Some of them said to disable right clicking and downloading using JavaScript. Others said to provide image as a background URL. And many of them said to print it in canvas. Still, an advanced user can download the image easily. Putting watermark on them was another solution. But it's about reading. Watermark affects reading.&lt;/p&gt;

&lt;p&gt;This problem still exists and I am seeking for the answer currently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-web-app"&gt;
  &lt;/a&gt;
  The Web App
&lt;/h2&gt;

&lt;p&gt;We all learn CRUD functionalities when we research about backend development. So, making a book store wasn't a great challenge. The main steps in the development were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Books&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Authors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Categories&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Authors&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Book objects have their Review object and they related with Categories and Authors. Every user has Follow, Library, BookRead objects. Users can follow authors, read books when the page will be stored for another opening. They can add books to their library. Books can be listed according to Categories, Authors.&lt;br&gt;
I also implemented a search functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#payment"&gt;
  &lt;/a&gt;
  Payment
&lt;/h2&gt;

&lt;p&gt;At last, applied on Razorpay, bought domain and vps deployed project as &lt;a href="https://publiso.in/"&gt;publiso.in&lt;/a&gt;. I developed subscription system on deployment. Every user has to pay 99 Indian Rupees to get a 30 days subscription. That's mandatory to read any book.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#better-luck-next-time"&gt;
  &lt;/a&gt;
  Better luck next time
&lt;/h2&gt;

&lt;p&gt;I was happy completing this project and waited for users to register here. Even spent 650 Rupees in google ads which resulted 144 clicks and nothing. No-one made an account and no penny credited to our account.&lt;/p&gt;

&lt;p&gt;I realized that all books we have is available in the internet for free. So, there is no meaning to sell them for money. It's better to deliver them free and people will enjoy it.&lt;/p&gt;

&lt;p&gt;Removed all subscription and payments stuff. Made it totally free.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  Github
&lt;/h2&gt;

&lt;p&gt;I published the project on GitHub and you guys are welcome to test the code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pulimoodan/publiso/tree/master&amp;lt;br&amp;gt;%0A!%5BImage%20description%5D(https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cx6uz60y9h261l6x9u94.png)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leave your feedback as comments.&lt;br&gt;
&lt;strong&gt;Can we develop this into a big project ?&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Anyone interested to contribute ?&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to use TailwindCSS 3.0 without external NPM scripts, just Hugo pipes</title>
      <author>Jonas Duri</author>
      <pubDate>Sun, 16 Jan 2022 19:20:35 +0000</pubDate>
      <link>https://dev.to/jonas_duri/how-to-use-tailwindcss-30-without-external-npm-scripts-just-hugo-pipes-2lg9</link>
      <guid>https://dev.to/jonas_duri/how-to-use-tailwindcss-30-without-external-npm-scripts-just-hugo-pipes-2lg9</guid>
      <description>&lt;p&gt;TailwindCSS is a utility-first CSS framework for rapid UI development and as of version 3, the JIT mode is the new default. Among other benefits, it renders a CSS file, that only contains the code, that your site is actually using -- nothing more!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-what-changed-since-tailwindcss-3"&gt;
  &lt;/a&gt;
  1. What changed since TailwindCSS 3
&lt;/h2&gt;

&lt;p&gt;Since version 3, TailwindCSS only uses the JIT compiler to do its magic. That means, that utility classes will be generated on demand instead of purging unused classes afterward. The thing with TailwindCSS is, that only the compilation result changes, not the input file. For this reason, Hugo Pipes won't work beyond the initial render pass. This behavior is perfectly fine for a production build, but it doesn't detect changes when running a Hugo development server in "watch" mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="c"&gt;/* Doesn't work in "watch" mode */&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt; &lt;span class="s"&gt;"tailwind.css"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PostCSS&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Minify&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-how-to-use-tailwindcss-without-external-npm-scripts-just-hugo-pipes"&gt;
  &lt;/a&gt;
  2. How to use TailwindCSS without external NPM scripts, just Hugo Pipes
&lt;/h2&gt;

&lt;p&gt;First up, we use TailwindCSS as a PostCSS plugin. This is key to using Hugo's build-in &lt;code&gt;resources.PostCSS&lt;/code&gt; pipe. You can read how to setup PostCSS with TailwindCSS here: &lt;a href="https://tailwindcss.com/docs/using-with-preprocessors#using-post-css-as-your-preprocessor"&gt;https://tailwindcss.com/docs/using-with-preprocessors#using-post-css-as-your-preprocessor&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make work in both production and development the "Hugo Way", I came up with a little hack. Rather than using the input file as a regular CSS resource, we can tell Hugo to treat it like a template file using the &lt;code&gt;resources.ExecuteAsTemplate&lt;/code&gt; pipe.&lt;/p&gt;

&lt;p&gt;To ensure that the result always changes, we can create a random string and pass it into the CSS input template. Also, the final CSS file has the generated random string as part of its file name. &lt;/p&gt;

&lt;p&gt;Note that this is only necessary during development. In production, a single render pass by Hugo is all it takes to work with TailwindCSS.&lt;/p&gt;

&lt;p&gt;This is the complete code that a came up with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsServer&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"weqklrjfmnk213409ufasdfhnlk3j4bladsfsl"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;delimit&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md5&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt; &lt;span class="s"&gt;"tailwind.css"&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PostCSS&lt;/span&gt;
    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExecuteAsTemplate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt; &lt;span class="s"&gt;"tailwind.dev.%s.css"&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{{ $style.RelPermalink }}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt;
    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Get&lt;/span&gt; &lt;span class="s"&gt;"tailwind.css"&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PostCSS&lt;/span&gt;
        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Minify&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"{{ $style.RelPermalink }}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-conclusions"&gt;
  &lt;/a&gt;
  3. Conclusions
&lt;/h2&gt;

&lt;p&gt;In this article, we discussed how to use TailwindCSS without external NPM scripts by using Hugo pipes. First, we discussed how to use the JIT mode in TailwindCSS 3.0. Next, I showed how to use Hugo pipes to treat the input file like a template so that it always triggers a re-compilation when running Hugo in "watch" mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-references-and-further-reading"&gt;
  &lt;/a&gt;
  4. References and further reading
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gohugo.io/hugo-pipes/postcss/"&gt;https://gohugo.io/hugo-pipes/postcss/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com/docs/using-with-preprocessors#using-post-css-as-your-preprocessor"&gt;https://tailwindcss.com/docs/using-with-preprocessors#using-post-css-as-your-preprocessor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.brycewray.com/posts/2021/11/making-tailwind-jit-work-hugo/"&gt;https://www.brycewray.com/posts/2021/11/making-tailwind-jit-work-hugo/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>hugo</category>
      <category>tailwindcss</category>
      <category>postcss</category>
    </item>
    <item>
      <title>Thirty Days of Rust: Day Five</title>
      <author>Sammy Shear</author>
      <pubDate>Sun, 16 Jan 2022 19:09:15 +0000</pubDate>
      <link>https://dev.to/sammyshear/thirty-days-of-rust-day-five-29ml</link>
      <guid>https://dev.to/sammyshear/thirty-days-of-rust-day-five-29ml</guid>
      <description>&lt;p&gt;Today I wanted to take it easy a little bit and try some WebAssembly with Rust. Over the years I've gotten very used to JavaScript, but now that I'm doing this challenge, I wanted to dip my feet into WebAssembly, so that's exactly what I did. I found a &lt;a href="https://rustwasm.github.io/book/introduction.html"&gt;book&lt;/a&gt; that basically told me everything I needed to know, and then I got started. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rust-setup"&gt;
  &lt;/a&gt;
  Rust Setup
&lt;/h3&gt;

&lt;p&gt;So instead of a new Rust app, I needed to make a Rust lib, which I could do with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cargo new day5 &lt;span class="nt"&gt;--lib&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I added two things to my &lt;code&gt;Cargo.toml&lt;/code&gt; so it looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight toml"&gt;&lt;code&gt;&lt;span class="nn"&gt;[package]&lt;/span&gt;
&lt;span class="py"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"day5"&lt;/span&gt;
&lt;span class="py"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.1.0"&lt;/span&gt;
&lt;span class="py"&gt;edition&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2021"&lt;/span&gt;

&lt;span class="nn"&gt;[lib]&lt;/span&gt;
&lt;span class="py"&gt;crate-type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"cdylib"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"rlib"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html&lt;/span&gt;

&lt;span class="nn"&gt;[dependencies]&lt;/span&gt;
&lt;span class="py"&gt;wasm-bindgen&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"0.2.78"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I went ahead and installed &lt;code&gt;wasm-pack&lt;/code&gt; with cargo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cargo &lt;span class="nb"&gt;install &lt;/span&gt;wasm-pack
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#rust-code"&gt;
  &lt;/a&gt;
  Rust Code
&lt;/h3&gt;

&lt;p&gt;The only thing I wanted this app to do was add two numbers together. It's probably too simple for this challenge to really mean anything, but I didn't want to spend too much time on this because tomorrow I want to rebuild my hangman game in the browser and I figured today could be a little bit shorter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;wasm_bindgen&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;prelude&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nd"&gt;#[wasm_bindgen]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that was simple, as I expected and now I just had to pack it together with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wasm-pack build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#js-setup"&gt;
  &lt;/a&gt;
  JS Setup
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pnpm init wasm-app www
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;www
&lt;span class="nv"&gt;$ &lt;/span&gt;pnpm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all, now I just imported the wasm file and console logged the result of the add function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;wasm&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../pkg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wasm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I could just run &lt;code&gt;pnpm serve&lt;/code&gt; and open up &lt;code&gt;localhost:8080&lt;/code&gt; to get to my app. When I opened up the console, it showed the logged value of 40.&lt;br&gt;
That's about it from me today, but I look forward to tomorrow and sorry if this one was a little less exciting.&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>rust</category>
      <category>webassembly</category>
      <category>programming</category>
    </item>
    <item>
      <title>Forms In React | Day 13</title>
      <author>Web.Developer.io</author>
      <pubDate>Sun, 16 Jan 2022 19:02:36 +0000</pubDate>
      <link>https://dev.to/developerioweb/forms-in-react-day-13-436c</link>
      <guid>https://dev.to/developerioweb/forms-in-react-day-13-436c</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Forms&lt;/code&gt; → They are used to take in the use Input.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goals :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build Form with React&lt;/li&gt;
&lt;li&gt;Understanding What Controlled Component are&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iZGTGvPI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqwddbmxvzit52pjh0qn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZGTGvPI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xqwddbmxvzit52pjh0qn.png" alt="React Forms" width="880" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;So in the HTML forms , they have their own state , the whole Application doesn’t know about the Form’s Data until we hit &lt;code&gt;Submit&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;So they are Called the &lt;code&gt;Un-controlled Component&lt;/code&gt; , Where Site can’t access the form data.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O6j621Si--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzrtidgyrha2slnkfcow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O6j621Si--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jzrtidgyrha2slnkfcow.png" alt="React State" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When our app has access to the form Data they are called the &lt;code&gt;Controlled-Component&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5l74ClC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fz74umksmzwlosyjohc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5l74ClC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5fz74umksmzwlosyjohc.png" alt="Component" width="880" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the case of HTML the Form has it own State and it changes based on the User-Input.&lt;/p&gt;

&lt;p&gt;But in React , We keep all our mutable data in the State and set it using the &lt;code&gt;setState.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So how do we Control the React State ??&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So we keep all our mutable data in the State , So what we can do is to store the &lt;strong&gt;&lt;code&gt;User-input&lt;/code&gt;&lt;/strong&gt; in the &lt;strong&gt;&lt;code&gt;State&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let’s have a look on this Example 👇&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ControlledForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter Your Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The value u Entered is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//It is a Asynchronomus process so it will take some time.&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Controlled Form&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ControlledForm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/controlled-form-gdchs?file=/src/ControlledForm.js:0-628"&gt;Try This on CodeSandBox&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;So in the Input tag we have set the value attribute to be &lt;code&gt;Text&lt;/code&gt; (which is a State).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The Function &lt;strong&gt;&lt;em&gt;&lt;code&gt;handleChange&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; runs on every keystroke to update the React state, the displayed value will update as the user types.&lt;/li&gt;
&lt;li&gt;With a controlled component, every state mutation will have an associated handler function. This makes it easy to modify or validate user input.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The HandleClick Method →&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Updated!!!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#handling-multiple-events-%E2%86%92"&gt;
  &lt;/a&gt;
  Handling Multiple Events →
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;What if we want to use multiple input tag , Do we have make new &lt;code&gt;onChange event Handler&lt;/code&gt; for Everyone??&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The answer is NO!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K9Eh1g9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dmjctvnrfp2g6bf2pz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K9Eh1g9X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dmjctvnrfp2g6bf2pz2.png" alt="ES2015" width="880" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1jZRypih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdzb7ucdbtcpgxvoxv3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1jZRypih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdzb7ucdbtcpgxvoxv3h.png" alt="Property name" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;So we can Compute a Property in the Object also using the &lt;code&gt;square-brakets []&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Like this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--08FvkZ98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g83ea7ju6otlo92wc088.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--08FvkZ98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g83ea7ju6otlo92wc088.png" alt="React" width="880" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;So Instead of making separate &lt;code&gt;onChange&lt;/code&gt; handler for every single input , we can make some generic function.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ISzQxI0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7h89lcui78g9zydglwb4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ISzQxI0s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7h89lcui78g9zydglwb4.png" alt="React" width="880" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;To do so first we have include the &lt;code&gt;name&lt;/code&gt; attribute to the input tag , and the name should match to the one we have declared in the state.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;And in the &lt;code&gt;handleChange&lt;/code&gt; function we have to use the square braces to make changes in the right place.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_vU29zzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77129ms5rsjff1hdw5ur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_vU29zzx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/77129ms5rsjff1hdw5ur.png" alt="React Forms" width="880" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BOUR43hZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbd204vfxe6war7fq0x6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BOUR43hZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbd204vfxe6war7fq0x6.png" alt="React Forms" width="880" height="719"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MultiInputForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// const [Text, setText] = useState("");&lt;/span&gt;
  &lt;span class="c1"&gt;//We have defined a Object.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The value u Entered is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// In this we are restoring the res ones and only changing the requierd ones.&lt;/span&gt;
    &lt;span class="nx"&gt;setText&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;evt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="c1"&gt;// console.log(Text); //It is a Asynchronomus process so it will take some time.&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Multiple Input Form&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Be carful while setting the name it should be same as that u have entered in the state */&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Name"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
          &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Enter Email"&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Email"&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt;
          &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;
          &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Enter Mobile Number"&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Number"&lt;/span&gt;
        &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleSubmit&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MultiInputForm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/controlled-form-gdchs?file=/src/MultiInputForm.js:0-1272"&gt;Controlled Form&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-html-for"&gt;
  &lt;/a&gt;
  The HTML For
&lt;/h3&gt;

&lt;p&gt;When ever u are using the &lt;code&gt;label&lt;/code&gt; use &lt;strong&gt;&lt;code&gt;htmlFor&lt;/code&gt;&lt;/strong&gt; instead of &lt;strong&gt;&lt;code&gt;for&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cuz for is a Reserved word in the javaScript same with the instead we should use the &lt;code&gt;className&lt;/code&gt; cuz class is also a Reserved keyword.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#passing-data-to-parent-component"&gt;
  &lt;/a&gt;
  Passing Data to Parent Component
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gRqPYw05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ax8zi8whma8uxlx10dx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gRqPYw05--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ax8zi8whma8uxlx10dx.png" alt="Passing Data To Parent" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;So Forms are generally Stateful so there should be a way to pass the state to the parent Component.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;So we make a Form Component and changes it’s state using &lt;code&gt;handleChange&lt;/code&gt; Function and after on submit we have an &lt;code&gt;handleSubmit&lt;/code&gt; function which then call the Function which we passed as props and send the state as an argument and&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;then in parent Component we get that state and update the changes.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shopping-list-example"&gt;
  &lt;/a&gt;
  Shopping List Example
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TKs1J1I5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uqh2k4wm3m1gmjk7j5t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TKs1J1I5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uqh2k4wm3m1gmjk7j5t.png" alt="Shopping List" width="880" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keys-and-uuid"&gt;
  &lt;/a&gt;
  Keys and UUID
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rasu16El--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ztuow2u4ge7xzvyckmt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rasu16El--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4ztuow2u4ge7xzvyckmt.png" alt="Keys and UUID" width="880" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Happy Coding ☺️&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>REST API Design</title>
      <author>Blind Kai</author>
      <pubDate>Sun, 16 Jan 2022 18:41:12 +0000</pubDate>
      <link>https://dev.to/blindkai/rest-api-design-27j9</link>
      <guid>https://dev.to/blindkai/rest-api-design-27j9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;This article is written primarily for backend developers that are looking for some practical examples of "how-to" design their REST APIs so they would be strain forward for other developers as well as for API consumers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-anatomy-of-the-endpoint-path"&gt;
  &lt;/a&gt;
  The anatomy of the end-point path
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#http-method"&gt;
  &lt;/a&gt;
  HTTP method
&lt;/h3&gt;

&lt;p&gt;Every endpoint belongs to the HTTP method. Those methods give developers and users a basic understanding of "what action" is performed on resources on that path. It's required to use the proper HTTP method for each endpoint. The details about each of the listed below methods can be found in &lt;a href="https://datatracker.ietf.org/doc/html/rfc2616#section-9"&gt;RFC2616&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;GET&lt;/code&gt; should be used if the endpoint returns information about the given resource &lt;em&gt;("list items", "get the item with ID=5", "get all subitems of the item with ID=5" and so on)&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;POST&lt;/code&gt; should be used if the endpoint creates a resource during request or should somehow change the state of the resources &lt;em&gt;("create new item", "perform authentication")&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUT&lt;/code&gt; is used when there is a need to completely replace a resource with an updated version. It's mostly used for update operations &lt;em&gt;("update item")&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PATCH&lt;/code&gt; is similar to &lt;code&gt;PUT&lt;/code&gt; but mostly is usable when you want to indicate, that the resource can be partly updated &lt;em&gt;("change user status to active", "grant user a permission/access")&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DELETE&lt;/code&gt; as the name says, it indicates that the endpoint performs deletion of resource &lt;em&gt;("delete item", "delete all items")&lt;/em&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other HTTPS methods are less common to use and you probably will know if you need to use them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#endpoint-path"&gt;
  &lt;/a&gt;
  Endpoint path
&lt;/h3&gt;

&lt;p&gt;As we already know, the HTTP method is a verb, so to describe the endpoint path we need to use nouns (in other words "domain names").&lt;/p&gt;

&lt;p&gt;For example to create a user we write:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;POST /users          // GOOD
POST /create-user    // BAD
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've already specified &lt;code&gt;POST&lt;/code&gt; as a method so we know, "it's going to create a user".&lt;/p&gt;

&lt;p&gt;Another example to update user status:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PATCH /users/status     // GOOD
PATCH /users/set-status // BAD do not use verbs in paths
PUT   /users/status     // BAD use proper HTTP method
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Most of the time you will face CRUD routes with some additional end-points to work with sub-entities:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET    /users             // Get list of users
GET    /users/${userID}   // Get single user details
POST   /users             // Create a new user
PUT    /users/${userID}   // Update user
DELETE /users/${userID}   // Delete user

PATCH  /users/access      // Partly update user

GET    /users/${userID}/photos            // Get sub-entity
POST   /users/${userID}/photos            // Create sub-entity
DELETE /users/${userID}/photos/${photoID} // Delete sub-entity
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#query-parameters"&gt;
  &lt;/a&gt;
  Query parameters
&lt;/h3&gt;

&lt;p&gt;Often you need to specify additional parameters for pagination or some kind of filtering that is provided by your server.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pagination"&gt;
  &lt;/a&gt;
  Pagination
&lt;/h4&gt;

&lt;p&gt;If you're not using pagination on end-points that return lists of items, you probably should, because the growth of the database request would last a long time and suddenly block your server or database from running. The user also won't be happy to wait 15 seconds for items he doesn't want to see in numbers.&lt;/p&gt;

&lt;p&gt;Example of query string with pagination:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /users?page=1&amp;amp;pageSize=25    // "Classic" pagination
GET /users?fromId=1232142        // Cursor pagination
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#filtering"&gt;
  &lt;/a&gt;
  Filtering
&lt;/h4&gt;

&lt;p&gt;In case you need to specify some additional search parameters or return only specific entity fields you will also add them into query string and parse on the server-side:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /users?search=John      // Search for user with name John
GET /users?status=active,banned&amp;amp;age=18-21,22-27,40-49 // Return only active or banned users within the specified age groups. If you want to specify few filters you separate them by ","
GET /users?online=2021-12-01,2022-01-01 // Fetch users that were online in range of dates
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#sorting"&gt;
  &lt;/a&gt;
  Sorting
&lt;/h4&gt;

&lt;p&gt;Users usually want to see "recent" items or updates, but sometimes they want to apply other sorting options:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GET /users?sort=last_online         // Sort by last online ASC
GET /users?sort=last_online,status  // Sort by 2 fields
GET /users?sort=name&amp;amp;desc=true      // Sort by name in descending order
GET /users?sort=+name,-status       // Multisort with specifying "+"/"-" as ASC/DESC
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#response-http-status-codes"&gt;
  &lt;/a&gt;
  Response HTTP status codes
&lt;/h3&gt;

&lt;p&gt;Depending on the result of the request the server should return a proper status code to indicate if the request was successfully finished or there were errors and it can't be finished.&lt;/p&gt;

&lt;p&gt;It's also a good practice to use the defined set of codes for all end-points and provide additional messages within a response or in the documentation.&lt;/p&gt;

&lt;p&gt;Those status codes are described at &lt;a href="https://datatracker.ietf.org/doc/html/rfc2616#section-10"&gt;RFC 2616&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc4918#section-11"&gt;RFC 4918&lt;/a&gt;, &lt;a href="https://datatracker.ietf.org/doc/html/rfc6585"&gt;RFC 6585&lt;/a&gt; and others.&lt;/p&gt;

&lt;p&gt;Most of the time, you would be using those status codes:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#2xx"&gt;
  &lt;/a&gt;
  2xx
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;200 OK&lt;/code&gt; - Simply means that the request was successfully performed and resource is available in response.&lt;br&gt;
&lt;code&gt;201 Created&lt;/code&gt; - Mostly used in &lt;code&gt;POST&lt;/code&gt; requests as an indication that resource was successfully created and stored in the server.&lt;br&gt;
&lt;code&gt;204 No Content&lt;/code&gt; - Mostly used in &lt;code&gt;DELETE&lt;/code&gt; requests to indicate that resource doesn't exist anymore.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#4xx"&gt;
  &lt;/a&gt;
  4xx:
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;400 Bad Request&lt;/code&gt; - the request doesn't satisfy validation rules and the server denies processing it. Addition details about errors can be specified in the response body.&lt;br&gt;
&lt;code&gt;401 Unautorized&lt;/code&gt; - user is not authorized to use this end-point. Most of the time this is a status code to use if the user session is timed out or access token/session token was not provided in the Authorization header or within a cookie.&lt;br&gt;
&lt;code&gt;403 Forbidden&lt;/code&gt; - if it's a response to a sing-in end-point request it simply means that "there is no user with such username &amp;amp; password combination" or that user has no right to perform the request.&lt;br&gt;
&lt;code&gt;404 Not Found&lt;/code&gt; - the resource doesn't exist or there is no end-point on this address. The additional message about the error should be provided in the response body.&lt;br&gt;
&lt;code&gt;409 Conflict&lt;/code&gt; - mostly used when performing the request is impossible due to a constraint on the server (for example user with the specified nickname already exists) or if the given entity was already modified before the user sent a request.&lt;br&gt;
&lt;code&gt;422 Unprocessable Entity&lt;/code&gt; - means that the request schema is correct and it passes validation rules, but the server can't process the request or work with that query.&lt;br&gt;
&lt;code&gt;429 Too Many Requests&lt;/code&gt; - simply means that the user sent too many requests to the server (for example if the user tries to log in too many times in 1 minute).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#5xx"&gt;
  &lt;/a&gt;
  5xx
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;500 Internal Server Error&lt;/code&gt; - your server should have a handler for unexpected errors and send a response to the user if there is something wrong before shutting the server down.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;It's important to use things as they were designed to be used and to provide an interface that would be intuitive and easy to work with.&lt;br&gt;
Also, don't forget to document your APIs using popular instruments like Swagger. It's helpful when you want to provide some explanations over "what does this status code mean" or "how to use filters in this end-point".&lt;br&gt;
You will get some experience only by doing things. With all the basic rules you should be fine until you will come to some specific cases.&lt;/p&gt;

</description>
      <category>rest</category>
    </item>
    <item>
      <title>How to Setup Next App, and MUI5 with Typescript</title>
      <author>Agboola Ishola Idris</author>
      <pubDate>Sun, 16 Jan 2022 18:38:52 +0000</pubDate>
      <link>https://dev.to/agboolaidris/how-to-setup-nextjs-app-mui5-with-typescript-2me7</link>
      <guid>https://dev.to/agboolaidris/how-to-setup-nextjs-app-mui5-with-typescript-2me7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/"&gt;&lt;strong&gt;Next.js&lt;/strong&gt;&lt;/a&gt; is a JavaScript open-source framework built on top of Node.js that enables you to build superfast and extremely user-friendly static websites, as well as web applications using React. React documentation mentions Next.js among "Recommended Toolchains" advising it to developers as a solution when "building a server-rendered website with Node.js.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mui.com/"&gt;&lt;strong&gt;Material&lt;/strong&gt;&lt;/a&gt;  UI is an open-source, front-end framework for React components that has 60,500 plus stars on Github. It is built using Less. Less (stands for Leaner Style Sheets), is a backward-compatible language extension for CSS. Material UI is based on Google’s Material Design to provide a high-quality, digital experience while developing front-end graphics. Material Design focuses on providing bold and crisp designs – it builds textures by focusing on how the components cast shadows and reflect light.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TypeScript&lt;/strong&gt; adds additional syntax to JavaScript to support a tighter integration with your editor. Catch errors early in your editor. TypeScript code converts to JavaScript, which runs anywhere JavaScript runs: In a browser, on Node.js or Deno, and in your apps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;Before we get started, let’s confirm that we have Nodejs  installed on our machine by running the following command on our terminal:&lt;br&gt;
&lt;code&gt;node --version&lt;/code&gt;&lt;br&gt;
and also run the following command to check if NPM installed on our computer&lt;br&gt;
&lt;code&gt;npm --version&lt;/code&gt;&lt;br&gt;
If this returns an error, click &lt;a href="https://nodejs.org/en/download/"&gt;here &lt;/a&gt;to download and install Nodejs on your local machine. Nodejs installation comes with NPM by default, which we’ll be using to install the packages need for this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step 1&lt;/strong&gt;&lt;br&gt;
With Nodejs and NPM installed, let’s begin by installing Nextjs and Typescript by running the following command on our terminal:&lt;br&gt;
&lt;code&gt;npx create-next-app@latest  --ts&lt;br&gt;
&lt;/code&gt;You will be asked, "What is your project named?"  Type in the name you want to give the project and click enter&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;br&gt;
cd into the directory,  and type the following command to open the project in VScode:&lt;br&gt;
&lt;code&gt;code .&lt;br&gt;
&lt;/code&gt;we don't need to worry about the Typescript setup because the project has come with Typescript setup. let move on to the next step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step 3&lt;/strong&gt;&lt;br&gt;
let install Material UI by typing the following command on our terminal&lt;br&gt;
&lt;code&gt;npm install @mui/material @emotion/react @emotion/styled&lt;/code&gt;&lt;br&gt;
 we need to configure Nextjs to work with Material UI &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;step 4&lt;/strong&gt;&lt;br&gt;
let create createEmotionCache.ts to configure emotion  to work with material  by typing the following command on your terminal&lt;br&gt;
&lt;code&gt;touch createEmotionCache.ts&lt;/code&gt;&lt;br&gt;
copy the following code into the createEmotionCache.ts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import createCache from '@emotion/cache';
 const createEmotionCache = () =&amp;gt; {
  return createCache({ key: 'css' });
};
export default createEmotionCache;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;step 5&lt;/strong&gt;&lt;br&gt;
create a file for Material UI theme, for this tutorial, name the file &lt;strong&gt;theme.ts&lt;/strong&gt;&lt;br&gt;
and copy the following code to the file. to learn more about the Material UI theme click &lt;a href="https://mui.com/customization/theming/"&gt;here&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { createTheme } from '@mui/material/styles';
import { red } from '@mui/material/colors';

const theme = createTheme({
    palette: {
    primary: {
      main: '#556cd6',
    },
    secondary: {
      main: '#19857b',
    },
    error: {
      main: red.A400,
    },
  },
});
export default theme;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;step 6&lt;/strong&gt;&lt;br&gt;
We will be extending the &lt;code&gt;&amp;lt;Document /&amp;gt;&lt;/code&gt; and injecting the server-side rendered styles into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;.&lt;br&gt;
To override that default behavior, you must create a file at &lt;code&gt;./pages/_document.tsx&lt;/code&gt;, where you can extend the Document class.&lt;br&gt;
copy the following code to the file,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as React from 'react';
import Document, { Html, Head, Main, NextScript } from 'next/document';
import createEmotionServer from '@emotion/server/create-instance';
import theme from '../styles/theme';
import createEmotionCache from '../lib/createEmotionCache';

export default class MyDocument extends Document {
  render() {
    return (
      &amp;lt;Html lang="en"&amp;gt;
        &amp;lt;Head&amp;gt;
          {/* PWA primary color */}
          &amp;lt;meta name="theme-color" content={theme.palette.primary.main} /&amp;gt;
          &amp;lt;link
            rel="stylesheet"
            href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&amp;amp;display=swap"
          /&amp;gt;
        &amp;lt;/Head&amp;gt;
        &amp;lt;body&amp;gt;
          &amp;lt;Main /&amp;gt;
          &amp;lt;NextScript /&amp;gt;
        &amp;lt;/body&amp;gt;
      &amp;lt;/Html&amp;gt;
    );
  }
}

// `getInitialProps` belongs to `_document` (instead of `_app`),
// it's compatible with static-site generation (SSG).
MyDocument.getInitialProps = async (ctx) =&amp;gt; {
  // Resolution order
  //
  // On the server:
  // 1. app.getInitialProps
  // 2. page.getInitialProps
  // 3. document.getInitialProps
  // 4. app.render
  // 5. page.render
  // 6. document.render
  //
  // On the server with error:
  // 1. document.getInitialProps
  // 2. app.render
  // 3. page.render
  // 4. document.render
  //
  // On the client
  // 1. app.getInitialProps
  // 2. page.getInitialProps
  // 3. app.render
  // 4. page.render

  const { renderPage: originalRenderPage } = ctx;

  // You can consider sharing the same emotion cache between all the SSR requests to speed up performance.
  // However, be aware that it can have global side effects.
  const cache = createEmotionCache();
  const { extractCriticalToChunks } = createEmotionServer(cache);

  ctx.renderPage = () =&amp;gt;
    originalRenderPage({
      // eslint-disable-next-line react/display-name
      enhanceApp: (App: any) =&amp;gt; (props) =&amp;gt;
        &amp;lt;App emotionCache={cache} {...props} /&amp;gt;,
    });

  const initialProps = await Document.getInitialProps(ctx);
  // This is important. It prevents emotion to render invalid HTML.
  // See https://github.com/mui-org/material-ui/issues/26561#issuecomment-855286153
  const emotionStyles = extractCriticalToChunks(initialProps.html);
  const emotionStyleTags = emotionStyles.styles.map((style) =&amp;gt; (
    &amp;lt;style
      data-emotion={`${style.key} ${style.ids.join(' ')}`}
      key={style.key}
      // eslint-disable-next-line react/no-danger
      dangerouslySetInnerHTML={{ __html: style.css }}
    /&amp;gt;
  ));

  return {
    ...initialProps,
    // Styles fragment is rendered after the app and page rendering finish.
    styles: [
      ...React.Children.toArray(initialProps.styles),
      ...emotionStyleTags,
    ],
  };
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;step 7&lt;/strong&gt; &lt;br&gt;
we also need to wrap material UI with the app component,  let copy the following lines of code to _app.ts file inside the page folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as React from 'react';
import Head from 'next/head';
import { AppProps } from 'next/app';
import { ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import { CacheProvider, EmotionCache } from '@emotion/react';
import theme from '../styles/theme';
import createEmotionCache from '../../src/lib/createEmotionCache';

// Client-side cache, shared for the whole session of the user in the browser.
const clientSideEmotionCache = createEmotionCache();

interface MyAppProps extends AppProps {
  emotionCache?: EmotionCache;
}

const App = (props: MyAppProps) =&amp;gt; {
  const { Component, emotionCache = clientSideEmotionCache, pageProps } = props;
  return (
    &amp;lt;CacheProvider value={emotionCache}&amp;gt;
      &amp;lt;Head&amp;gt;
        &amp;lt;title&amp;gt;My page&amp;lt;/title&amp;gt;
        &amp;lt;meta name="viewport" content="initial-scale=1, width=device-width" /&amp;gt;
      &amp;lt;/Head&amp;gt;
      &amp;lt;ThemeProvider theme={theme}&amp;gt;
        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}
        &amp;lt;CssBaseline /&amp;gt;
        &amp;lt;Component {...pageProps} /&amp;gt;
      &amp;lt;/ThemeProvider&amp;gt;
    &amp;lt;/CacheProvider&amp;gt;
  );
};

export default App;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>typescript</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>You're running untrusted code!</title>
      <author>Nicolas Frankel</author>
      <pubDate>Sun, 16 Jan 2022 18:35:29 +0000</pubDate>
      <link>https://dev.to/nfrankel/youre-running-untrusted-code-28od</link>
      <guid>https://dev.to/nfrankel/youre-running-untrusted-code-28od</guid>
      <description>&lt;p&gt;Last December, Log4Shell shortened the nights of many people in the JVM world. Worse, using the earthquake analogy caused many aftershocks after the initial quake. I immediately made the connection between Log4Shell and the Security Manager. At first, I didn't want to write about it, but I've received requests to do so, and I couldn't walk away.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--IYBD8BoM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1148611280204455938/ztafPrwB_normal.jpg" alt="Johannes Rabauer profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Johannes Rabauer
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @johannesrabauer
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Hey &lt;a href="https://twitter.com/nicolas_frankel"&gt;@nicolas_frankel&lt;/a&gt;, isn't the &lt;a href="https://twitter.com/hashtag/Log4j"&gt;#Log4j&lt;/a&gt;-Exploit the perfect argument against deprecation of the Java SecurityManager?!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:01 AM - 15 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1471012592495865860" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1471012592495865860" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1471012592495865860" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;As a reminder, the Oracle team deprecated the Security Manager in Java 17. One of the arguments it based its decision on is that it was initially designed to protect against applets. Applets were downloaded from the Internet, so they had to be considered untrusted code. Hence, we had to run them in a sandbox.&lt;/p&gt;

&lt;p&gt;Though they never said so, there's an implicit consequence of this statement: because applets are now deprecated, we run only trusted code. &lt;em&gt;Ergo&lt;/em&gt;, we can let go of the Security Manager. It's plain wrong, and I'll explain why in this post.&lt;/p&gt;

&lt;p&gt;The premise that the code that runs inside your infrastructure can be trusted is dangerous - on-premise or in the Cloud. Let me enumerate some arguments that support this claim.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#libraries-cant-be-trusted"&gt;
  &lt;/a&gt;
  Libraries can't be trusted
&lt;/h2&gt;

&lt;p&gt;Wise developers don't reinvent the wheel: they use existing libraries and/or frameworks.&lt;/p&gt;

&lt;p&gt;Obviously, from a security point of view, it means users of such third-party code should carefully audit it. We should look for flaws: both bugs and vulnerabilities.&lt;/p&gt;

&lt;p&gt;In two decades in the industry, I've never seen such an audit happen.&lt;/p&gt;

&lt;p&gt;One could argue in favor of custom code. Unfortunately, it doesn't solve anything. Custom code suffers from the same issues, bugs, and vulnerabilities. Worse, it doesn't get the same attention as standard libraries, so researchers cannot spend their time to find these issues, which costs nothing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#builds-cant-be-trusted"&gt;
  &lt;/a&gt;
  Builds can't be trusted
&lt;/h2&gt;

&lt;p&gt;Imagine that you have all resources necessary to audit the code - time, money, and skills. Imagine further that the audit reveals nothing fishy. Finally, imagine that the audit's conclusion is 100% reliable.&lt;/p&gt;

&lt;p&gt;The issue is that nothing guarantees that the JAR is the result of the build from the source code, even if the build is public. A malicious provider could replace the genuine JAR with another one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#identities-cant-be-trusted"&gt;
  &lt;/a&gt;
  Identities can't be trusted
&lt;/h2&gt;

&lt;p&gt;A provider can sign a JAR to guarantee it's genuine. The signature is based on asymmetric cryptography:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The provider signs the JAR with its private key&lt;/li&gt;
&lt;li&gt;It generates a public key with the private key&lt;/li&gt;
&lt;li&gt;One can read the signature using the public key and check that the provider signed the JAR.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hence, anybody can verify that a JAR comes from a specific provider.&lt;/p&gt;

&lt;p&gt;The JDK provides the &lt;code&gt;jarsigner&lt;/code&gt; tool to sign JARs. Unfortunately, most libraries don't use it. As an example, I've verified the following dependencies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.slf4j:slf4j-api:1.7.32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.fasterxml.jackson.core:jackson-core:2.13.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.mockito:mockito-core:4.1.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.junit.jupiter:junit-jupiter-api:5.8.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.apache.commons:commons-collections4:4.4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.eclipse.collections:eclipse-collections:10.4.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.google.protobuf:protobuf-java:3.18.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.itextpdf:itextpdf:5.5.13.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.zaxxer:HikariCP:5.0.0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;com.vladmihalcea.flexy-pool:flexy-pool-core:2.2.3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.springframework:spring-beans:5.3.13&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jakarta.platform:jakarta.jakartaee-api:9.1.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Among the twelve JARs above, only a single one is signed with &lt;code&gt;jarsigner&lt;/code&gt;. If you're interested, it's Eclipse Collections.&lt;/p&gt;

&lt;p&gt;However, to counter &lt;a href="https://en.wikipedia.org/wiki/Supply_chain_attack"&gt;supply-chain attacks&lt;/a&gt;, artifact repositories have started to require signed artifacts. For example, Sonatype &lt;a href="https://central.sonatype.org/publish/requirements/#sign-files-with-gpgpgp"&gt;requires a signature&lt;/a&gt; for each uploaded file, &lt;em&gt;i.e.&lt;/em&gt;, the POM, the JAR, the sources JAR, the JavaDocs JAR, etc.&lt;/p&gt;

&lt;p&gt;One can verify the signature with Maven:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mvn org.simplify4u.plugins:pgpverify-maven-plugin:show &lt;span class="nt"&gt;-Dartifact&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;com.zaxxer:HikariCP:5.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It outputs the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Artifact:
        groupId:     com.zaxxer
        artifactId:  HikariCP
        type:        jar
        version:     5.0.0

PGP signature:
        version:     4
        algorithm:   SHA256withRSA
        keyId:       0x4CC08E7F47C3EC76
        create date: Wed Jul 14 04:49:52 CEST 2021
        status:      valid

PGP key:
        version:     4
        algorithm:   RSA (Encrypt or Sign)
        bits:        2048
        fingerprint: 0xF3A90E6B10E809F851AB4FC54CC08E7F47C3EC76
        create date: Wed Sep 18 02:51:23 CEST 2013
        uids:        [Brett Wooldridge (Sonatype) &amp;lt;brett.wooldridge@gmail.com&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, none of this amounts to much. Signing doesn't assert the identity of the provider. It tells that a private key with the referenced email signed it with a private key with the referenced email. Nothing prevents a malicious actor from creating another private key with the same email or a similar one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-cant-be-trusted"&gt;
  &lt;/a&gt;
  Features can't be trusted
&lt;/h2&gt;

&lt;p&gt;At this point, I think the picture looks pretty gloomy. But it's even worse than that. None of the above explains the Log4J vulnerability. The core reason is that it provides features that most developers neither need nor use.&lt;/p&gt;

&lt;p&gt;I don't want to delve into too much detail, as it already has been explained in many places. Suffice to say that Log4J provides &lt;a href="https://logging.apache.org/log4j/2.x/manual/lookups.html"&gt;lookups&lt;/a&gt;. A lookup is an integration with another system, which allows enriching the log beyond the mere message. For example, the Spring Boot lookup allows getting Spring Boot properties. It makes sense to enrich the log, for example, with &lt;code&gt;spring.application.name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In all available lookups, some seem a bit fishy. For example, environment variables, system properties, or even JNDI. It's the latter that is the root cause of the Log4J vulnerability.&lt;/p&gt;

&lt;p&gt;This kind of hidden features is not specific to Log4J. I happen to know there's a Swing-based GUI administration application inside the H2 database driver. I learned about it just by chance.&lt;/p&gt;

&lt;p&gt;The problem is that developers use a library for their core capability, &lt;em&gt;e.g.&lt;/em&gt;, logging. If one stops at that, one will never know all the library's capabilities. Hence, one will be surprised when the library does something it was not assumed to do, &lt;em&gt;e.g.&lt;/em&gt;, read from a remote JNDI resource tree.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-jvm-cant-be-trusted"&gt;
  &lt;/a&gt;
  The JVM can't be trusted
&lt;/h2&gt;

&lt;p&gt;I admit the section's title is misleading, but I couldn't find a good one following the series. It's a follow-up to the previous section, this time applied to the JVM.&lt;/p&gt;

&lt;p&gt;The JVM provides tons of features, of which you use a handful or two. The most blatant problem is the Attach API. This API, available since Java 1.6, allows a JVM to update the bytecode already loaded into another JVM. Yes, you read it correctly: you can change the bytecode of an application that's running. Worse, if you restart the JVM, the code will be loaded again, leaving no trace.&lt;/p&gt;

&lt;p&gt;It's a cool feature if you want to quickly monkey-patch a fix in production.&lt;br&gt;
However:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most people don't use it&lt;/li&gt;
&lt;li&gt;Most people don't know about it&lt;/li&gt;
&lt;li&gt;The feature needs to be explicitly disabled. It's on by default.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;May I suggest that the first thing you do tomorrow is to check your infrastructure and disable it?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-security-manager-could-be-trusted"&gt;
  &lt;/a&gt;
  The Security Manager could be trusted
&lt;/h2&gt;

&lt;p&gt;I hope that at this point, you understand the problem. A lot of code that you're running can't be trusted. Worse, I'm only considering regular applications: software built on a plugin architecture run untrusted code by definition.&lt;/p&gt;

&lt;p&gt;The Security Manager was a JVM component that allowed you to define a white list of what an application could do, regardless of the application code. It solved all the above issues: you could run any code but only allowed it to do a limited number of things.&lt;/p&gt;

&lt;p&gt;The Security Manager came with several drawbacks; chief amongst them is that it was a bore to configure permissions. However, there are tools to generate the policy file. Since they are automated, you need to review the discovered permissions carefully. It's easier to read through ~500 lines of configuration than 10k or 100k lines of code.&lt;/p&gt;

&lt;p&gt;Since many didn't know about tools, few did use the Security Manager. But when it was, it was very beneficial. To prove my claim, you can read &lt;a href="https://xeraa.net/blog/2021_mitigate-log4j2-log4shell-elasticsearch/"&gt;this post&lt;/a&gt; or jump to the conclusion: &lt;em&gt;though Elasticsearch embeds a vulnerable Log4J version, it's not susceptible to Log4Shell!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Security is a Non-Functional Requirement. NFRs don't bring any competitive advantage and cost money. In short, they divert the budget from business requirements to &lt;code&gt;/dev/null&lt;/code&gt;. That's at least how most business departments see it.&lt;/p&gt;

&lt;p&gt;I think we should handle security through the lenses of risk assessment. It requires first to list all possible risks. I'm afraid the deprecation of the Security Manager just added several lines to that risk, all linked to running untrusted code.&lt;/p&gt;

&lt;p&gt;Note that the debate regarding the depreciation of the Security Manager has not been a civil one. Since I took side &lt;strong&gt;against&lt;/strong&gt; the depreciation, I've been publicly attacked, even to the point of plain bullying. Others voices that backed me up received similar treatment.&lt;/p&gt;

&lt;p&gt;I don't expect reactions to this post to be any different. However, I have to tell community members what happened and what we lost.&lt;/p&gt;

&lt;p&gt;Thanks to Peter Firmstone and &lt;a href="https://twitter.com/GeertjanW"&gt;Geertjan Wielenga&lt;/a&gt; for their help in reviewing this post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To go further:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://xeraa.net/blog/2021_mitigate-log4j2-log4shell-elasticsearch/"&gt;Mitigate Log4j2 / Log4Shell in Elasticsearch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://foojay.io/today/jep-411-what-it-means-for-javas-security-model/"&gt;"JEP 411: What it Means for Java’s Security Model and Why You Should Apply the Principle of Least Privilege"&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://foojay.io/today/why-jep-411-will-have-a-negative-impact-on-java-security/"&gt;The Principle of Least Privilege and How JEP 411 Will Have a Negative Impact on Java Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.frankel.ch/focus/jvm-security/"&gt;JVM Security Focus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://blog.frankel.ch/running-untrusted-code/"&gt;A Java Geek&lt;/a&gt; on January 22&lt;sup&gt;th&lt;/sup&gt;, 2022&lt;/em&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>security</category>
      <category>securitymanager</category>
      <category>log4shell</category>
    </item>
    <item>
      <title>Habits to build
</title>
      <author>Jiří Rejman</author>
      <pubDate>Sun, 16 Jan 2022 18:32:41 +0000</pubDate>
      <link>https://dev.to/rejmank1/habits-to-build-jcb</link>
      <guid>https://dev.to/rejmank1/habits-to-build-jcb</guid>
      <description>&lt;p&gt;The topic of habits is mentioned in almost every self-help book. And it is no wonder why. If I look back at what helped me last year it was just a few habits that had a tremendous impact on me. And the same seems to be true for my work as a developer. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notetaking"&gt;
  &lt;/a&gt;
  Note-taking
&lt;/h2&gt;

&lt;p&gt;For me, note-taking was an ad hoc thing that was painful, but over time I managed to get better at it and even be able to have a system. The more projects, places to do things, and how to you will have the more you appreciate good note-taking systems. You will stop to ask your colleagues for that link to documentation and googling how to connect to that strange DB your backend is using, you just open your notes and there it will be.&lt;br&gt;
I use zettelkatsen combined with a second brain system but there are endless options. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commit-clean-up"&gt;
  &lt;/a&gt;
  Commit clean up
&lt;/h2&gt;

&lt;p&gt;Before each commit, I go through the diff, file after file, and fix all the small issues I found. Forgotten console.logs, commented code you name it I take care of this mess before it will go public. Doing this allows your coworkers to focus on important things during the code review, instead of focusing on where you left commented code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading"&gt;
  &lt;/a&gt;
  Reading
&lt;/h2&gt;

&lt;p&gt;We work in an ever-changing environment, with new frameworks, libraries, languages... Regular reading will allow you to have an overview of the emerging technologies. Pick a few quality sources (Twitter accounts, newsletters...) and regularly check them. But have in mind that you do not need to learn everything you will read about.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overcoming-resistance"&gt;
  &lt;/a&gt;
  Overcoming Resistance
&lt;/h2&gt;

&lt;p&gt;Resistance is a concept from Steven Pressfield and his book war of art. For me regularly reminding myself that the reason why I want to "just check Twitter before I start to code that functionality" is just because I do not want to fight the resistance. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automate"&gt;
  &lt;/a&gt;
  Automate
&lt;/h2&gt;

&lt;p&gt;You will break all your habits. Even the most bake in. So why not automate them? Running test before commit? Automate it, linting your code? The same. We have tools for all of this so take advantage of them and make your life easier. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Those are the most important habits that help me with my work. There is nothing magical about them and building them hurts, but working without them would hurt me much more.&lt;/p&gt;

&lt;p&gt;If you like this article follow me here or on twitter &lt;a href="https://twitter.com/rejmank1"&gt;https://twitter.com/rejmank1&lt;/a&gt;. Thanks!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>I've read... The Pragmatic Programmer</title>
      <author>Darkø Tasevski</author>
      <pubDate>Sun, 16 Jan 2022 18:24:51 +0000</pubDate>
      <link>https://dev.to/puritanic/ive-read-the-pragmatic-programmer-2bn9</link>
      <guid>https://dev.to/puritanic/ive-read-the-pragmatic-programmer-2bn9</guid>
      <description>&lt;p&gt;Truly a classic. It's definitely a must-read book for programmers and even people managing programmers. Initially released in 1999, &lt;a href="https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/"&gt;The Pragmatic Programmer&lt;/a&gt; is a book about becoming a Pragmatic Programmer - programmer that's a true professional in their craft. And, even though it was published twenty years ago, it's fascinating to see the struggles we still face day in and day out discussed even then.&lt;/p&gt;

&lt;p&gt;When I first started reading this book, I've expected a lot of technical details and lessons, which is probably one of the reasons why I've been avoiding this book so far. I mean, it's &lt;strong&gt;twenty&lt;/strong&gt; years old, and in today's pace of technology, technical details do not stay up to date very long. But instead, this book concerns the most challenging parts of the programmer's career: writing scalable and maintainable software and scaling themselves as professionals.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;There are code snippets&lt;/em&gt;, but the authors are aware of the code and techniques getting out of date in a matter of years, so the book is not focusing on them too much.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In general, there are not many surprises in what the book's authors are trying to deliver. Any programmer who cares about their craft, has no fear of change, and already has a few years of experience will already know many themes explored in this book. In my opinion, most programmers are aware of the guidelines this book is preaching, but they are also quick on finding excuses to ignore them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Pragmatic Programmer&lt;/em&gt; centers on how to use software to solve problems effectively and how to grow as the developer pragmatically; not just how to be a good programmer, but also how to solve the complex issues that surround coding, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Writing clean code through &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY&lt;/a&gt; (Don't repeat yourself) and &lt;a href="https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it"&gt;YAGNI&lt;/a&gt; (You aren't gonna need it)&lt;/li&gt;
&lt;li&gt;  How to estimate the software delivery.&lt;/li&gt;
&lt;li&gt;  How to institute change when others are hesitant.&lt;/li&gt;
&lt;li&gt;  How to combat stagnancy as a developer.&lt;/li&gt;
&lt;li&gt;  How to make the software processes resilient and efficient through automation and testing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The examples and explanations are not abstract or far-fetched but are somewhat real-world applications of things you could see in the industry (though some stuff is outdated).&lt;/p&gt;

&lt;p&gt;Some of the significant points of the book that I'm going to go through are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  We should take &lt;strong&gt;responsibility&lt;/strong&gt; for our code and decisions.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Do not leave broken windows unrepaired.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Think critically&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Know your tools&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Program and refactor deliberately&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Use Version Control&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Test your code&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Automate all the things&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hunt and Thomas are stating that the last three things from the list above are the essence of the Pragmatic Starter Kit, and that they should be the three legs that support every project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#responsibility"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Responsibility&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;When you have responsibility for something, you should prepare yourself to be held accountable. If you make mistakes and cannot fulfil those responsibilities, you have to make up for them and find a solution. Don't give excuses and play the &lt;a href="https://en.wikipedia.org/wiki/Cover_your_ass"&gt;finger-pointing game&lt;/a&gt;. When you make a mistake (to err is human) or an error in judgment, admit it honestly and try to offer alternatives. Don't blame all the problems on a vendor, a programming language, management, or your coworkers. Any of these may play a role, but it is up to you to provide solutions, not excuses.&lt;/p&gt;

&lt;p&gt;Don't approach anyone to tell them that something couldn't be done before you are entirely sure that that's correct. Additionally, don't just say you can't do it, like it's the end of the story. Instead, provide options and explain what &lt;em&gt;can&lt;/em&gt; be done to salvage the situation.&lt;/p&gt;

&lt;p&gt;As the authors of the book say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Try to flush out the lame excuses before voicing them aloud. Does your excuse sound reasonable or stupid? How's it going to sound to your boss? (...) If you must, tell your cat first.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#broken-windows"&gt;
  &lt;/a&gt;
  Broken windows
&lt;/h2&gt;

&lt;p&gt;There is a story in the book, about research studying the &lt;a href="https://www.simplypsychology.org/broken-windows-theory.html"&gt;effect of broken windows&lt;/a&gt; on urban areas:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One broken window, left unrepaired for any substantial length of time, instills in the inhabitants of the building a sense of abandonment—a sense that the powers that be don't care about the building. So another window gets broken. People start littering. Graffiti appears. Serious structural damage begins. In a relatively short span of time, the building becomes damaged beyond the owner's desire to fix it, and the sense of abandonment becomes a reality.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We, programmers, have probably seen this in some codebases. We see some broken code and think it's okay to leave it. We'll just come back when there is not enough work and fix it. But, unfortunately, this is just the first step to degradation of code quality and serious tech debt. After one broken window, the others will start appearing more frequently, and this is usually the time when developers start looking for a new job, leaving a dumpster fire behind.&lt;/p&gt;

&lt;p&gt;So, (please), &lt;strong&gt;don't leave "broken windows" (bad designs, wrong decisions, or poor code) unrepaired&lt;/strong&gt;. Fix each one as soon as it is discovered. If there is insufficient time to fix it properly, create a ticket, fix the most offending issue if possible, comment out the code, or leave a screaming comment. Ultimately, you should take action to prevent further damage and show that you're on top of the situation.&lt;/p&gt;

&lt;p&gt;Do not fall to &lt;a href="https://en.wikipedia.org/wiki/Bystander_effect"&gt;the Bystander effect&lt;/a&gt;, hoping that other developers will fix the problems. Instead, take the initiative, and be a catalyst for change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#think-critically"&gt;
  &lt;/a&gt;
  Think critically
&lt;/h2&gt;

&lt;p&gt;You should think critically about what you read and hear. You need to ensure that your knowledge and opinions are unswayed by either vendor or media hype. Beware of the salesman who insists that their solution provides the only answer; it may or may not apply to you and your project, or they might be just trying to sell you the snake oil.&lt;/p&gt;

&lt;p&gt;Try to ask and think with the following questions when you want to get to the bottom of something:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Ask the "Five Whys"&lt;/strong&gt; - Ask a question, and get an answer. Then, dig deeper by asking another "why?" Then, repeat the question as long as it's reasonable to do. You might be able to get closer to a root cause this way.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Who does this benefit?&lt;/strong&gt; - It may sound cynical, but following the money can be a helpful path to analyze.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;What's the context?&lt;/strong&gt; - Everything occurs in its context, which is why "one size fits all" solutions often don't work. Good questions to consider are "best for who?" What are the prerequisites, what are the consequences, short and long term?&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;When or Where would this work?&lt;/strong&gt; - Under what circumstances? Don't stop with first-order thinking (what will happen next), but use second-order thinking: what will happen after that?&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Why is this a problem?&lt;/strong&gt; - Is there an underlying model? How does the underlying model work? Do you even have the same problem?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#know-your-tools"&gt;
  &lt;/a&gt;
  Know your tools
&lt;/h2&gt;

&lt;p&gt;This could seem like simple advice, but we are surrounded by a wide range of tools in our daily jobs. I don't know the ins and outs of each one I'm using, for sure.&lt;/p&gt;

&lt;p&gt;For example, a few days ago, I've learned about &lt;a href="https://johnkary.net/blog/git-add-p-the-most-powerful-git-feature-youre-not-using-yet/"&gt;&lt;em&gt;git add --patch&lt;/em&gt;&lt;/a&gt; functionality that allows us to stage only parts of the changed files.&lt;/p&gt;

&lt;p&gt;While I'm not sure that it would be advisable to learn everything possible about tools we're using for development, learning about stuff that can make you productive is definitely something you should strive for. For example, pay attention to your daily flow and see what manual actions you are performing most often. Then look if those can be automated or improved somehow.&lt;/p&gt;

&lt;p&gt;The book teaches us that it's essential to find the proper tools before starting the development. By essential tools, it's not just the IDE but also the programming language and services. The more you are versed with different technologies, the wider the picture you'll have.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marcel.is/quench/"&gt;So before blindly jumping into coding, take a step back&lt;/a&gt;. Understand why the problem or the feature at hand needs to be built in the first place. Next, find the right tools for the job and start coding.&lt;/p&gt;

&lt;p&gt;Some of the authors' recommendations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Use plain text for everything. Avoid using binary formats to keep knowledge (such as MS Word).&lt;/li&gt;
&lt;li&gt;  Learn some scripting language well to use it for text manipulation (Js, Ruby, Python).&lt;/li&gt;
&lt;li&gt;  Learn shell (awk, grep, etc.)&lt;/li&gt;
&lt;li&gt;  Have your &lt;a href="https://github.com/Puritanic/.dotfiles_new"&gt;dotfiles&lt;/a&gt; configured and backup them regularly&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#program-and-refactor-deliberately"&gt;
  &lt;/a&gt;
  Program and refactor deliberately
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In the face of ambiguity, refuse the temptation to guess.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Be wary of premature optimization. It's always a good idea to make sure an algorithm is a bottleneck before investing your precious time trying to improve it. The less code is there, the fewer chances for bugs to happen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Always be aware of what you are doing&lt;/strong&gt; - if you don't understand the background of the feature you're implementing, you may fall victim to false assumptions. Don't blindly copy/paste code you don't understand, and don't do shotgun programming or programming by coincidence, as the book's authors call it. For example, suppose you don't know why or how your program works. In that case, you'll probably end up in a situation where you don't understand why the code is failing, which would usually result in spending a significant amount of time chasing the piece of code until you (if) know how it was working in the first place.&lt;/p&gt;

&lt;p&gt;A litmus test for the above - can you explain your code to a more junior programmer? If not, perhaps you are relying on coincidences.&lt;/p&gt;

&lt;p&gt;As mentioned in the previous section, don't jump to coding right away. Instead, &lt;strong&gt;create a plan&lt;/strong&gt;, even if it's just a to-do list written as comments in your editor or on a napkin. After that, prioritize your efforts by spending time first on the complex parts of the problem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't be a slave to history,&lt;/strong&gt; meaning that you should not let existing code dictate future code. All code can be replaced if it is no longer appropriate. Even within one program, don't let what you've already done constrain what you do next, be ready to refactor, but keep in mind that this decision may impact the project schedule. The assumption here is that the impact of doing refactor will be less than the cost of not making the change.&lt;/p&gt;

&lt;p&gt;Martin Fowler &lt;a href="https://www.martinfowler.com/bliki/DefinitionOfRefactoring.html"&gt;defines refactoring as&lt;/a&gt; a:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A change made to the internal structure of software to make it easier to understand and cheaper to modify without changing its observable behavior.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The critical parts of this definition are that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The activity is disciplined, not a free-for-all&lt;/li&gt;
&lt;li&gt;External behavior does not change; this is not the time to add features&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To guarantee that the external behavior hasn't changed, you need good (preferably) automated unit testing that validates the code's behavior.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-version-control"&gt;
  &lt;/a&gt;
  Use Version Control
&lt;/h2&gt;

&lt;p&gt;This advice sounds a bit outdated, but it's worth a mention. Today's software development landscape is very different from twenty years ago, at least when version control is considered. &lt;code&gt;git&lt;/code&gt; is deeply entrenched in the development flow, and I, myself, can't imagine working on a project without version control.&lt;/p&gt;

&lt;p&gt;Additionally, the book suggests using version control for everything we deem important, notes and documentation as an example.&lt;/p&gt;

&lt;p&gt;My take on this is that besides the version control, you should also strive to keep your git history clean and searchable (by using semantic commits, for example) and utilize the VCS for automation whenever possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-your-code"&gt;
  &lt;/a&gt;
  Test your code
&lt;/h2&gt;

&lt;p&gt;Yet another common-sense advice. And still, one that's not utilized as much as it should be, in most cases. Testing was important twenty years ago, but today it's even more critical when we account for a growing number of programs that can &lt;a href="https://en.wikipedia.org/wiki/Therac-25"&gt;quickly&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Multidata_Systems_International#accident"&gt;kill&lt;/a&gt; &lt;a href="https://en.wikipedia.org/wiki/Boeing_737_MAX_groundings"&gt;people&lt;/a&gt; in case of malfunction.&lt;/p&gt;

&lt;p&gt;Book authors even suggest that the test code should be larger than the program source code and that we should treat the test code with the same care as any production code. Keep it decoupled, clean, and robust. Don't rely on unreliable things like the absolute position of pages in a GUI system, exact timestamps in a server log, or the exact wording of error messages. Testing for these sorts of things will result in fragile (flaky) tests.&lt;/p&gt;

&lt;p&gt;The pragmatic programmer is ruthlessly testing their code. The time it takes to write test code is worth the effort, as it ends up being much cheaper in the long run, with a chance of producing a product with close to zero defects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automate-all-the-things"&gt;
  &lt;/a&gt;
  Automate all the things
&lt;/h2&gt;

&lt;p&gt;Automation is the core principle of being a pragmatic programmer. You should find whatever manual task you've or someone on your team has been doing and automate them. Automation leaves less space for human error and drastically improves the processes.&lt;/p&gt;

&lt;p&gt;Automation also plays nicely with the other two "legs" of the pragmatic starter kit, version control, and tests. You should automate your processes to run tests on VSC changes and, if stable enough, even deploy the code to production on demand.&lt;/p&gt;

&lt;p&gt;The more stuff you automate, the more time you'll have to dedicate to the real problems. But (!), don't fall into &lt;a href="https://xkcd.com/1205/"&gt;the trap of automating something that's not really worth the effort&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a2YLrk7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/is_it_worth_the_time.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a2YLrk7w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgs.xkcd.com/comics/is_it_worth_the_time.png" alt="obligatory XKCD" width="571" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pragmatic-teams"&gt;
  &lt;/a&gt;
  Pragmatic Teams
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"Great things in business are never done by one person. They're done by a team of people."&lt;br&gt;
&lt;cite&gt;-- Steve Jobs&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Teams as a whole should not tolerate broken windows—those slight imperfections that no one fixes. Instead, the team must take responsibility for the quality of the product.&lt;/p&gt;

&lt;p&gt;As a final note, the book says that we, as individuals, should take pride in our work and leave our mark on it. However, we still need to balance this out when working in teams to not become prejudiced in favor of our code and against our coworkers. You shouldn't jealously defend your code against intruders, and you should treat other people's code with respect. The Golden Rule ("Do unto others as you would have them do unto you") and a foundation of mutual respect among the developers are critical to make this work.&lt;/p&gt;

&lt;p&gt;Anonymity can provide a breeding ground for sloppiness, mistakes, sloth, and bad code, especially on large projects. It becomes too easy to see yourself as just a cog in the wheel, producing lame excuses in endless status reports instead of good code.&lt;/p&gt;

&lt;p&gt;While code must be owned, it doesn't have to be owned by an individual. In fact, Kent Beck's eXtreme Programming recommends &lt;a href="http://www.extremeprogramming.org/rules/collective.html"&gt;collective ownership of code&lt;/a&gt; (but this also requires additional practices, such as pair programming, to guard against the dangers of anonymity).&lt;/p&gt;

&lt;p&gt;In the end, what you want of your career as a pragmatic programmer is for other people to recognize your signature. They see the feature or program built by you and expect it to be solid, well-written, tested, and documented.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I suggest this book to everyone; it's an easy and interesting read, even though senior developers are less likely to learn something new from it. Also, this is just a quick and short(&lt;em&gt;ish&lt;/em&gt;) overview of the book's content, I haven't covered everything I've learned from it, and there is a lot of stuff that's also worth reading about, such as Orthogonality, Design by Contract, debugging, Tracer Bullets technique, and more.&lt;/p&gt;

</description>
      <category>books</category>
      <category>programming</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>I created Quiz-app a quiz game ecosystem
</title>
      <author>john</author>
      <pubDate>Sun, 16 Jan 2022 18:14:19 +0000</pubDate>
      <link>https://dev.to/johnbabu021/i-created-quiz-app-a-quiz-game-ecosystem-2kn2</link>
      <guid>https://dev.to/johnbabu021/i-created-quiz-app-a-quiz-game-ecosystem-2kn2</guid>
      <description>&lt;p&gt;I have created a quiz-app with Html and Javascript 4 months ago which i used to learn javascript intermediately it uses basic javascript queries &lt;br&gt;
This Application is best for beginners and Intermediate Javascript Learners&lt;/p&gt;

&lt;p&gt;Story so far&lt;br&gt;
when i was thinking to create a Quiz-app for students who can take excerises from an application i didn't found a free Application that's why i created this project&lt;/p&gt;

&lt;p&gt;features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open sourced&lt;/li&gt;
&lt;li&gt;Runs online&lt;/li&gt;
&lt;li&gt;Have Multi-platform support&lt;/li&gt;
&lt;li&gt;Have Multi-device support&lt;/li&gt;
&lt;li&gt;Accesibility from anywhere&lt;/li&gt;
&lt;li&gt;Dark and Light Themes&lt;/li&gt;
&lt;li&gt;13 Contributors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;feel free to contribute on&lt;br&gt;
 &lt;a href="https://github.com/johnbabu021/quiz-app"&gt;Github&lt;/a&gt; 👩‍💻&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#light-mode"&gt;
  &lt;/a&gt;
  Light mode:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_OdJdJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/58719884/135747992-942328a0-3cf4-45eb-906e-d862d2b98c09.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_OdJdJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/58719884/135747992-942328a0-3cf4-45eb-906e-d862d2b98c09.png" alt="Screenshot from 2021-10-03 14-59-41" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dark-mode"&gt;
  &lt;/a&gt;
  Dark mode:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nT3M8xPQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/58719884/135747965-89c60f7b-0cb7-400f-9775-54e6f899b8b2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nT3M8xPQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/58719884/135747965-89c60f7b-0cb7-400f-9775-54e6f899b8b2.png" alt="Screenshot from 2021-10-03 14-58-42" width="880" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Running Live &lt;a href="https://johnbabu021.github.io/quiz-app/"&gt;Demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel Free to Contribute on &lt;a href="https://github.com/johnbabu021/quiz-app"&gt;Github&lt;/a&gt; 👩‍💻&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I created Sweetgradients a Color gradient Ecosystem  🧠 🧠

</title>
      <author>john</author>
      <pubDate>Sun, 16 Jan 2022 18:13:17 +0000</pubDate>
      <link>https://dev.to/johnbabu021/i-created-sweetgradients-a-color-gradient-ecosystem-4jh9</link>
      <guid>https://dev.to/johnbabu021/i-created-sweetgradients-a-color-gradient-ecosystem-4jh9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#sweetgradients-a-platform-where-you-can-find-out-color-graidents-easily"&gt;
  &lt;/a&gt;
  &lt;a href="https://sweetgradients.vercel.app/"&gt;SweetGradients&lt;/a&gt; -A Platform where you can find out color graidents easily
&lt;/h2&gt;

&lt;p&gt;Story behind SweetGradients -When i was looking for gradients to be used in a project i didn't find anything but finally i findout a web app called Uigradients built with Vue.js.So i created a React.js version of that&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/johnbabu021/sweetgradients"&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://sweetgradients.vercel.app/"&gt;demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel Free to contribute on this project &lt;br&gt;
&lt;a href="https://github.com/johnbabu021/sweetgradients"&gt;Github&lt;/a&gt;&lt;br&gt;
Made with  🥳&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
