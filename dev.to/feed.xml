<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Buckle Up For a Wild Decade in Cloud Computing</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 09 Jun 2021 14:22:19 +0000</pubDate>
      <link>https://dev.to/ben/buckle-up-for-a-wild-decade-in-cloud-computing-1cff</link>
      <guid>https://dev.to/ben/buckle-up-for-a-wild-decade-in-cloud-computing-1cff</guid>
      <description>&lt;p&gt;I‚Äôm sure you were affected by &lt;a href="https://www.npr.org/2021/06/09/1004684932/fastly-tuesday-internet-outage-down-was-caused-by-one-customer-changing-setting"&gt;the Fastly outage yesterday&lt;/a&gt;. The company responded quickly, and it wasn‚Äôt the end of the world‚Äî But it was wild!&lt;/p&gt;

&lt;p&gt;If you‚Äôve been following closely, though, this was by far not the biggest story Fastly got tied into in the past year‚Äî Even if they were not really part of the new story by name the last time around. In the last fifteen months, Fastly‚Äôs stock has a low of about $14 and a high of about $136, as of writing this it‚Äôs sitting at around $60 (up 45% in the past month to boot!).&lt;/p&gt;

&lt;p&gt;What causes a company whose core offering is a configuration layer which allows for slightly more efficient distribution of commodity bytes across the web to have such a chaotic financial journey as a publicly traded company? There are a lot of reasons‚Äî A pandemic which made efficient distribution of commodity bytes turn into the way we kept in touch with our loved ones. They are also a fairly young company which has typically not operated profitably, so there is a lot of speculation on their growth potential as opposed to classical evaluation of their track record.&lt;/p&gt;

&lt;p&gt;Those are all contributing factors, but Fastly‚Äôs real hurricane came in the form of &lt;a href="https://www.nytimes.com/2020/09/21/business/trump-tiktok-deal.html"&gt;Donald Trump, TikTok and the Chinese government&lt;/a&gt;. Yes‚Äî Fastly is the kind of cloud infrastructure company which rises with the tides of its customers and TikTok became a big deal in the past couple years. Its rise in popularity also raised questions about data privacy and hostile international relationships.&lt;/p&gt;

&lt;p&gt;The TikTok fiasco seems like a million years ago. For the average consumer, it played out as a bizarre question over whether the service would continue to exist. Players like Facebook were conveniently aligned in the sentiment that the Chinese government is not to be trusted, and Trump was trying to look like the tough guy‚Äî Likely without a greater agenda.&lt;/p&gt;

&lt;p&gt;Following this story was exhausting and there is no public information about how things ultimately played out, but Fastly, the company with servers all over the world responsible for compressing and distributing TikTok‚Äôs bytes landed in a fairly untenable position. The company may have had to develop a much more sophisticated philosophy around video storage and distribution with regards to international borders‚Äî Or perhaps the chaos of the theatrical bidding war over the whole thing just forced them to change vendors. Fastly‚Äî leaders in this nascent space‚Äî were both unimportant and critically important to the whole story, depending on your perspective.&lt;/p&gt;

&lt;p&gt;The situation was as fascinating as it was chaotic. The next version of this probably won‚Äôt come in the Donald Trump variety, but it will happen. Questions around how data is stored and distributed and how that relates to national sovereignty and security are truly the kind that are unprecedented and unlikely to be addressed in a ‚Äúgreater good‚Äù capacity.&lt;/p&gt;

&lt;p&gt;Censorship, spying, hacking, AI‚Äî All the stuff that is juicy enough to make the top headline in the news have huge implications in the ever-more geopolitical cloud computing landscape. It now matters where servers are, where the computing happens, and who can access them‚Äî Or it doesn‚Äôt. Lobbyists for Google, Amazon and Microsoft will certainly work hard to position the debate in whichever way will best support their cloud product suite. &lt;a href="https://www.nytimes.com/2021/05/11/podcasts/the-daily/mark-zuckerberg-tim-cook-facebook-apple.html"&gt;Facebook and Apple will argue&lt;/a&gt; for their best narrative around conscientious stewardship over our privacy and livelihoods.&lt;/p&gt;

&lt;p&gt;Most people won‚Äôt follow these stories in any capacity. Some will keep up with &lt;a href="https://podcasts.voxmedia.com/show/pivot"&gt;Scott Galloway and Kara Swisher&lt;/a&gt;‚Äôs pseudo-informed takes. And some will keep a close eye on how things unfold because part of their job involves pretending to know how GDPR works. Constructing a mental model for the interplay of government, digital security and cloud infrastructure is challenging and exhausting, on some level we just have to be along for the wild ride.&lt;/p&gt;




&lt;p&gt;I centered some themes of this post in Fastly‚Äôs &lt;em&gt;stock price&lt;/em&gt; which is a good measure for chaos, but somewhat unimportant in all of this. But from that financial perspective, they are an interesting study.&lt;/p&gt;

&lt;p&gt;Fastly is on the bleeding edge and big enough to basically take down the whole Internet when a customer enters incorrect input (fun fact, I &lt;em&gt;personally&lt;/em&gt; caused a similar but much smaller outage on Heroku one time‚Äî but that is another story), but small enough that they can‚Äôt lobby or have a say in the Trump/TikTok madness. All in all I think they are in a great position to keep innovating in edge computing and benefit from this chaos in the end. I‚Äôm not a professional investor but I‚Äôm long Fastly, for what it‚Äôs worth. üòÖ&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>fastly</category>
      <category>aws</category>
      <category>azure</category>
    </item>
    <item>
      <title>Should You Really be Coding in Dark Mode?</title>
      <author>Saji Wang</author>
      <pubDate>Wed, 09 Jun 2021 14:16:51 +0000</pubDate>
      <link>https://dev.to/codesphere/should-you-really-be-coding-in-dark-mode-4ng8</link>
      <guid>https://dev.to/codesphere/should-you-really-be-coding-in-dark-mode-4ng8</guid>
      <description>&lt;p&gt;There are few debates as contentious in the development and UX world as color schemes. Among developers, however, there seems to be a pretty significant skew towards coding in a light on dark mode (&lt;a href="https://css-tricks.com/poll-results-light-on-dark-is-preferred/"&gt;This poll&lt;/a&gt; found that ‚Öî of surveyed developers prefer to use a dark mode in their code editor).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UJZ5SGo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wlt8u1cv5hd8ts4nvj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UJZ5SGo2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wlt8u1cv5hd8ts4nvj5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dark mode advocates cite a number of benefits, including reduced eye strain, better sleep, and reduced power consumption. While many of the arguments for dark mode undoubtedly have merit, there is far from a scientific consensus on many of its benefits.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#a-little-bit-of%C2%A0history"&gt;
  &lt;/a&gt;
  A Little Bit of¬†History
&lt;/h3&gt;

&lt;p&gt;While we might think of dark mode as a relatively new trend, it was actually the original color scheme that was used for computers. Most early computers used light text on dark background in order to save power. As computers became more consumer-friendly, however, developers began to use black text on white backgrounds to imitate the black ink on white paper that most people were used to.&lt;/p&gt;

&lt;p&gt;More recently, countless devices, websites, and apps have added support for dark mode for both optical and aesthetic reasons. Software developers, who spend most of their work time staring at computer screens, have been some of the most fervent advocates for dark mode.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-eye-strain-and-readability"&gt;
  &lt;/a&gt;
  1. Eye Strain and Readability
&lt;/h3&gt;

&lt;p&gt;The first argument for dark mode that's worth taking a look at the claim that dark mode is better for your eyes. While there is no doubt that using light mode in a dark room can be blinding, there also seems to be evidence that our brains are just better at reading and comprehending black text on a white screen.&lt;/p&gt;

&lt;p&gt;For example, &lt;a href="https://www.researchgate.net/publication/264903980_Smaller_pupil_size_and_better_proofreading_performance_with_positive_than_with_negative_polarity_displays"&gt;A 2013 study&lt;/a&gt; by Psychologist Dr. Cosima Piepenbrock looked at how adults with normal vision performed at visual acuity and proofreading text across dark and light color schemes. The study found that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Pupil sizes were smaller and proofreading performance was better with positive(Dark on Light) than with negative(Light on Dark) polarity displays"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, for substantial digital tasks where you are attentively reading text(Such as coding), *&lt;em&gt;having dark text on a light background (i.e. light mode) can help you focus and comprehend better. *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What this means in practice is that your eyes and brain may have to work harder to read and write code if your IDE is in dark mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-blue-light-and-sleep"&gt;
  &lt;/a&gt;
  2. Blue Light and Sleep
&lt;/h3&gt;

&lt;p&gt;Another commonly cited claim is that using your IDE in dark mode reduces blue light consumption, and therefore can help you sleep. While dark mode definitely does reduce blue light, blue light may not be the primary culprit that actually messes up your sleep schedule.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sciencedaily.com/releases/2019/12/191216173654.htm"&gt;A 2019 study&lt;/a&gt; by the University of Manchester found that blocking blue light only slightly improved people‚Äôs sleep patterns. Instead, the real culprit is the use of warmer colors(Like reds and yellows) at night, which trick our brain into thinking it's daytime. &lt;/p&gt;

&lt;p&gt;If you want to get better sleep, &lt;strong&gt;dark mode may in fact help, but the real solution is to not use screens altogether before going to bed.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-power-consumption"&gt;
  &lt;/a&gt;
  3. Power Consumption
&lt;/h3&gt;

&lt;p&gt;Another argument for using dark mode in your IDE is that it can save you money on your power bill. If you are using an OLED display, which most modern monitors do, then this is definitely true. &lt;/p&gt;

&lt;p&gt;It is probably important to note, however, that if you are developing software that is computationally heavy, like rendering 3D graphics or training and using machine learning models, the reduced power consumption from dark mode probably won‚Äôt make any sort of noticeable dent in your power bill. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-accessibility"&gt;
  &lt;/a&gt;
  4. Accessibility
&lt;/h3&gt;

&lt;p&gt;Regardless of what you personally prefer while you code, you should always add support for both dark and light modes in the software that you build. Many people who have certain color blindness or eye conditions can find one of these themes extremely hard or even impossible to use. Giving your users flexibility is therefore very important.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In summation, the jury is still out on whether dark mode is actually better for coding. While it might save you a tiny amount of power and, if you are using it at night, marginally help your sleep schedule, these benefits don‚Äôt seem to be that substantial. In addition, &lt;strong&gt;reading dark text on a light background may help you read and write code more efficiently.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your theme therefore should come down to what is best for you, because there is not a scientific consensus that one color scheme is going to be better than the other. If you think dark mode looks sleeker and you are doing a lot of coding at night or in the dark, then go ahead and use dark mode. If you prefer the readability of dark text on a light background, then go ahead and use light mode. &lt;/p&gt;

&lt;p&gt;So what do you prefer and why? Personally, I think dark mode is more aesthetically pleasing but I definitely notice how it can be harder to read.&lt;/p&gt;

&lt;p&gt;Let us know in the comments what you think!&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>productivity</category>
      <category>darkmode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 NPM Packages to Secure Your Node.js Backend in 5 Minutes </title>
      <author>Nitin Ranganath</author>
      <pubDate>Wed, 09 Jun 2021 13:59:17 +0000</pubDate>
      <link>https://dev.to/itsnitinr/5-npm-packages-to-secure-your-node-js-backend-in-5-minutes-2732</link>
      <guid>https://dev.to/itsnitinr/5-npm-packages-to-secure-your-node-js-backend-in-5-minutes-2732</guid>
      <description>&lt;p&gt;When you start to focus on the performance and security of your backend alongside the other features, you know that you're growing and maturing as a developer. It goes without saying but having some sort of security measure against common attacks is essential, even if it's just a hobby project.&lt;/p&gt;

&lt;p&gt;If you're new to security or want to quickly get started with some basic protection, these 5 NPM packages will help you get started in just a few minutes. The best part about these packages is that all you have to do is just install them and use them as middleware. It's that easy! &lt;/p&gt;

&lt;p&gt;In a hurry or just need the list of packages? Here are the 5 NPM packages that I'll be going over:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Package Name&lt;/th&gt;
&lt;th&gt;Package Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;helmet&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/helmet"&gt;NPM Link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xss-clean&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/xss-clean"&gt;NPM Link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hpp&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/hpp"&gt;NPM Link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;express-mongo-sanitize&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/express-mongo-sanitize"&gt;NPM Link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;express-rate-limit&lt;/td&gt;
&lt;td&gt;&lt;a href="https://www.npmjs.com/package/express-rate-limit"&gt;NPM Link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#helmet"&gt;
  &lt;/a&gt;
  Helmet
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt; Sets security-related HTTP response headers to protect against some well-known web vulnerabilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does it protect against:&lt;/strong&gt; Cross-site scripting attacks, cross-site injections, clickjacking, MIME sniffing and targeted attacks towards Express servers by disabling the &lt;code&gt;X-Powered-By&lt;/code&gt; header.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use it:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install helmet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;helmet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;helmet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Using helmet middleware&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;helmet&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/helmetjs"&gt;
        helmetjs
      &lt;/a&gt; / &lt;a href="https://github.com/helmetjs/helmet"&gt;
        helmet
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Help secure Express apps with various HTTP headers
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Helmet&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://badge.fury.io/js/helmet" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6c25e172959765545eb8fd310e4c65007fc913b551ca6fcff4d0ad84b3a74d2b/68747470733a2f2f62616467652e667572792e696f2f6a732f68656c6d65742e737667" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/helmetjs/helmet" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7ab19b285def6c03995b54d1daeb1903512d52fb61d6ad7258ac35d804b2820a/68747470733a2f2f64617669642d646d2e6f72672f68656c6d65746a732f68656c6d65742e737667" alt="npm dependency status"&gt;&lt;/a&gt;
&lt;a href="https://app.fossa.io/projects/git%2Bhttps%3A%2F%2Fgithub.com%2Fhelmetjs%2Fhelmet?ref=badge_shield" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ca0f62740ff445933e67bfd9ba9f2e419be6549003bfa3b7e2735d7160c74ac6/68747470733a2f2f6170702e666f7373612e696f2f6170692f70726f6a656374732f67697425324268747470732533412532462532466769746875622e636f6d25324668656c6d65746a7325324668656c6d65742e7376673f747970653d736869656c64" alt="FOSSA Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Helmet helps you secure your Express apps by setting various HTTP headers. &lt;em&gt;It's not a silver bullet&lt;/em&gt;, but it can help!&lt;/p&gt;
&lt;h2&gt;
Quick start&lt;/h2&gt;
&lt;p&gt;First, run &lt;code&gt;npm install helmet --save&lt;/code&gt; for your app. Then, in an Express app:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;express&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;"express"&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;helmet&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;"helmet"&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;app&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;express&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;helmet&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-c"&gt;// ...&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
How it works&lt;/h2&gt;
&lt;p&gt;Helmet is &lt;a href="https://github.com/senchalabs/connect"&gt;Connect&lt;/a&gt;-style middleware, which is compatible with frameworks like &lt;a href="https://expressjs.com/" rel="nofollow"&gt;Express&lt;/a&gt;. (If you need support for other frameworks or languages, &lt;a href="https://helmetjs.github.io/see-also/" rel="nofollow"&gt;see this list&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;The top-level &lt;code&gt;helmet&lt;/code&gt; function is a wrapper around 15 smaller middlewares, 11 of which are enabled by default.&lt;/p&gt;
&lt;p&gt;In other words, these two things are equivalent:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;// This...&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-en"&gt;helmet&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-c"&gt;// ...is equivalent to this:&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;helmet&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/helmetjs/helmet"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#xssclean"&gt;
  &lt;/a&gt;
  XSS-Clean
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt; Sanitizes user input coming from POST request body (&lt;code&gt;req.body&lt;/code&gt;), GET request query (&lt;code&gt;req.query&lt;/code&gt;) and URL parameters (&lt;code&gt;req.params&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does it protect against:&lt;/strong&gt; Cross-site scripting / XSS attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use it:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install xss-clean
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;xssClean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;xss-clean&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Protect against XSS attacks, should come before any routes&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xssClean&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jsonmaur"&gt;
        jsonmaur
      &lt;/a&gt; / &lt;a href="https://github.com/jsonmaur/xss-clean"&gt;
        xss-clean
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Middleware to sanitize user input
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Node.js XSS-Clean&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/jsonmaur/xss-clean" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2dd601cd11b31f76d0013a8cfc4123ccee1e3771994a200157b9f68df9e2fe52/68747470733a2f2f7472617669732d63692e6f72672f6a736f6e6d6175722f7873732d636c65616e2e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/jsonmaur/xss-clean?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d90a8bb9adc07b9564693134f12f501002bdc8a2be6f3adf64e4e93684dec58e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6a736f6e6d6175722f7873732d636c65616e2f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Node.js Connect middleware to sanitize user input coming from POST body, GET queries, and url params. Works with &lt;a href="http://expressjs.com/" rel="nofollow"&gt;Express&lt;/a&gt;, &lt;a href="http://restify.com/" rel="nofollow"&gt;Restify&lt;/a&gt;, or any other &lt;a href="https://github.com/senchalabs/connect"&gt;Connect&lt;/a&gt; app.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jsonmaur/xss-clean/master/#use"&gt;How to Use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/jsonmaur/xss-clean/master/#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
How to Use&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm install xss-clean --save&lt;/pre&gt;

&lt;/div&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;restify&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'restify'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;xss&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'xss-clean'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;

&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;app&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;restify&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;createServer&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;

&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;restify&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;bodyParser&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;

&lt;span class="pl-c"&gt;/* make sure this comes before any routes */&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;xss&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;

&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;listen&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-c1"&gt;8080&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This will sanitize any data in &lt;code&gt;req.body&lt;/code&gt;, &lt;code&gt;req.query&lt;/code&gt;, and &lt;code&gt;req.params&lt;/code&gt;. You can also access the API directly if you don't want to use as middleware.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;clean&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'xss-clean/lib/xss'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-c1"&gt;clean&lt;/span&gt;

&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;cleaned&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;clean&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-c"&gt;// will return "&amp;amp;lt;script&amp;gt;&amp;amp;lt;/script&amp;gt;"&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/jsonmaur/xss-clean/master/LICENSE"&gt;MIT&lt;/a&gt; ¬© &lt;a href="http://maur.co" rel="nofollow"&gt;Jason Maurer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jsonmaur/xss-clean"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hpp"&gt;
  &lt;/a&gt;
  HPP
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt; Puts the array parameters in &lt;code&gt;req.query&lt;/code&gt; and/or &lt;code&gt;req.body&lt;/code&gt; asides and just selects the last parameter value to avoid HTTP Parameter Pollution attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does it protect against:&lt;/strong&gt; Bypassing input validations and denial of service (DoS) attacks by uncaught &lt;code&gt;TypeError&lt;/code&gt; in async code, leading to server crash.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use it:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install hpp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hpp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hpp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Protect against HPP, should come before any routes&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hpp&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/analog-nico"&gt;
        analog-nico
      &lt;/a&gt; / &lt;a href="https://github.com/analog-nico/hpp"&gt;
        hpp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Express middleware to protect against HTTP Parameter Pollution attacks
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
HPP&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://expressjs.com" rel="nofollow"&gt;Express&lt;/a&gt; middleware to &lt;strong&gt;protect against HTTP Parameter Pollution attacks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/analog-nico/hpp" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/298cb8d2fe348b23f279fed74bc4562a9db6967fe66d2d79576bd5b508149722/68747470733a2f2f7472617669732d63692e6f72672f616e616c6f672d6e69636f2f6870702e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt; &lt;a href="https://coveralls.io/r/analog-nico/hpp?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e113d154ed772ef1b38a6db1effb90b05c21f0760f2604e63a06a0d5225a8c43/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f616e616c6f672d6e69636f2f6870702f62616467652e706e67" alt="Coverage Status"&gt;&lt;/a&gt; &lt;a href="https://david-dm.org/analog-nico/hpp" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/689e89902a1e0e009bfaf93beb54eba92d8b4be4fd3e4fcb8b0a2359622c4fe0/68747470733a2f2f64617669642d646d2e6f72672f616e616c6f672d6e69636f2f6870702e737667" alt="Dependency Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Why?&lt;/h2&gt;
&lt;p&gt;Let &lt;a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=48" rel="nofollow"&gt;Chetan Karande's slides&lt;/a&gt; do the explaining:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=48" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SMA1bUE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/analog-nico/hpp/master/img/slide48.jpg" alt="Slide 48"&gt;&lt;/a&gt;
&lt;a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=49" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w5GDaL6g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/analog-nico/hpp/master/img/slide49.jpg" alt="Slide 49"&gt;&lt;/a&gt;
&lt;a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=50" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDCJhyOl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/analog-nico/hpp/master/img/slide50.jpg" alt="Slide 50"&gt;&lt;/a&gt;
&lt;a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=54" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J66qB-13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/analog-nico/hpp/master/img/slide54.jpg" alt="Slide 54"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;...and exploits may allow &lt;a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=57" rel="nofollow"&gt;bypassing the input validation&lt;/a&gt; or even result in &lt;a href="https://speakerdeck.com/ckarande/top-overlooked-security-threats-to-node-dot-js-web-applications?slide=55" rel="nofollow"&gt;denial of service&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
And HPP solves this how exactly?&lt;/h2&gt;
&lt;p&gt;HPP puts array parameters in &lt;code&gt;req.query&lt;/code&gt; and/or &lt;code&gt;req.body&lt;/code&gt; aside and just selects the last parameter value. You add the middleware and you are done.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://npmjs.org/package/hpp" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ba639d11a633c34546f0c683c9bc21c63d042f2b511be359f816e8d133c5d7f3/68747470733a2f2f6e6f6465692e636f2f6e706d2f6870702e706e673f646f776e6c6f6164733d74727565" alt="NPM Stats"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a module for node.js and io.js and is installed via npm:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm install hpp --save&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Getting Started&lt;/h2&gt;
&lt;p&gt;Add the HPP middleware like this:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;// ...&lt;/span&gt;
&lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-s1"&gt;hpp&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'hpp'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-c"&gt;// ...&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;bodyParser&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;urlencoded&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt; &lt;span class="pl-c"&gt;// Make sure the body is parsed beforehand.&lt;/span&gt;

&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;hpp&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt; &lt;span class="pl-c"&gt;// &amp;lt;- THIS IS THE NEW LINE&lt;/span&gt;

&lt;span class="pl-c"&gt;// Add your own middlewares afterwards, e.g.:&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;get&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'/search'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/analog-nico/hpp"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#express-mongo-sanitize"&gt;
  &lt;/a&gt;
  Express Mongo Sanitize
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;What it does:&lt;/strong&gt; Searches for any keys in objects that begin with a &lt;code&gt;$&lt;/code&gt; sign or contain a &lt;code&gt;.&lt;/code&gt; from &lt;code&gt;req.body&lt;/code&gt;, &lt;code&gt;req.query&lt;/code&gt; or &lt;code&gt;req.params&lt;/code&gt; and either removes such keys and data or replaces the prohibited characters with another allowed character.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does it protect against:&lt;/strong&gt; MongoDB Operator Injection. Malicious users could send an object containing a &lt;code&gt;$&lt;/code&gt; operator, or including a &lt;code&gt;.&lt;/code&gt;, which could change the context of a database operation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use it:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express-mongo-sanitize
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mongoSanitize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express-mongo-sanitize&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Remove all keys containing prohibited characters&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mongoSanitize&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/fiznool"&gt;
        fiznool
      &lt;/a&gt; / &lt;a href="https://github.com/fiznool/express-mongo-sanitize"&gt;
        express-mongo-sanitize
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Sanitize your express payload to prevent MongoDB operator injection.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Express Mongoose Sanitize&lt;/h1&gt;
&lt;p&gt;Express 4.x middleware which sanitizes user-supplied data to prevent MongoDB Operator Injection.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/fiznool/express-mongo-sanitize/workflows/Node.js%20CI/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xMzj-Qrv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/fiznool/express-mongo-sanitize/workflows/Node.js%2520CI/badge.svg" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://img.shields.io/npm/v/express-mongo-sanitize" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/81332616a56d2a94d47eb80447d000e85e7fff4efd97c5629a9fc55fd8cf7279/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f657870726573732d6d6f6e676f2d73616e6974697a65" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="https://img.shields.io/npm/dw/express-mongo-sanitize?color=blue" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b07468e80ac0b87d66712adf814dd07e59219740eb282aeeeb0d7b211674d0c9/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64772f657870726573732d6d6f6e676f2d73616e6974697a653f636f6c6f723d626c7565" alt="npm downloads per week"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/fiznool/express-mongo-sanitize" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/15f78f42f80fe1786b78a51a63021d9c809439a7f937be826fa7a48ef5ffd530/68747470733a2f2f64617669642d646d2e6f72672f66697a6e6f6f6c2f657870726573732d6d6f6e676f2d73616e6974697a652e737667" alt="Dependency Status"&gt;&lt;/a&gt;
&lt;a href="https://david-dm.org/fiznool/express-mongo-sanitize#info=devDependencies" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a73f4dbb18c9e43dab2c120eaa8a917f988bd807020d9554b4c0ed797e5e722e/68747470733a2f2f64617669642d646d2e6f72672f66697a6e6f6f6c2f657870726573732d6d6f6e676f2d73616e6974697a652f6465762d7374617475732e737667" alt="devDependency Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm install express-mongo-sanitize&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Add as a piece of express middleware, before defining your routes.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;express&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'express'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;bodyParser&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'body-parser'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;mongoSanitize&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'express-mongo-sanitize'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;app&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-s1"&gt;express&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;bodyParser&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;urlencoded&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-c1"&gt;extended&lt;/span&gt;: &lt;span class="pl-c1"&gt;true&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;bodyParser&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;json&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-c"&gt;// To remove data, use:&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;mongoSanitize&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-c"&gt;// Or, to replace prohibited characters with _, use:&lt;/span&gt;
&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;
  &lt;span class="pl-s1"&gt;mongoSanitize&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-c1"&gt;replaceWith&lt;/span&gt;: &lt;span class="pl-s"&gt;'_'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
&lt;code&gt;onSanitize&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;onSanitize&lt;/code&gt; callback is called after the request's value was sanitized.&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-s1"&gt;app&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;use&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;
  &lt;span class="pl-en"&gt;mongoSanitize&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-en"&gt;onSanitize&lt;/span&gt;: &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;/pre&gt;‚Ä¶
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/fiznool/express-mongo-sanitize"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#express-rate-limit"&gt;
  &lt;/a&gt;
  Express Rate Limit
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;What does it do:&lt;/strong&gt; Used to limit IP addresses from making repeated requests to API endpoints. An example would be to rate limit an endpoint that is responsible for sending password reset emails, which can incur additional fees.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does it protect against:&lt;/strong&gt; Brute force, denial of service (DoS) and distributed denial of service (DDoS) attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to use it:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express-rate-limit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rateLimit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express-rate-limit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Restrict all routes to only 100 requests per IP address every 1o minutes&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;limiter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rateLimit&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;windowMs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c1"&gt;// 10 minutes&lt;/span&gt;
    &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;                     &lt;span class="c1"&gt;// 100 requests per IP&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limiter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1337&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nfriedly"&gt;
        nfriedly
      &lt;/a&gt; / &lt;a href="https://github.com/nfriedly/express-rate-limit"&gt;
        express-rate-limit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Basic rate-limiting middleware for express
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Express Rate Limit&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/nfriedly/express-rate-limit/actions"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UheL5WKP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/nfriedly/express-rate-limit/workflows/Node.js%2520CI/badge.svg" alt="Node.js CI"&gt;&lt;/a&gt;
&lt;a href="https://npmjs.org/package/express-rate-limit" title="View this project on NPM" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0c43e9c94efa0ecea3d1640141b634793abe15e682cd8752f45557df2910cd72/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f657870726573732d726174652d6c696d69742e737667" alt="NPM version"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/express-rate-limit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b28345c06b227c65085cf4c58dc12507eda3bd9af3963c16cd42c6d6d591e832/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f657870726573732d726174652d6c696d6974" alt="npm downloads"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Basic rate-limiting middleware for Express. Use to limit repeated requests to public APIs and/or endpoints such as password reset.&lt;/p&gt;
&lt;p&gt;Plays nice with &lt;a href="https://www.npmjs.com/package/express-slow-down" rel="nofollow"&gt;express-slow-down&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note: this module does not share state with other processes/servers by default. It also buckets all requests to an internal clock rather than starting a new timer for each end-user. It's fine for abuse-prevention but might not produce the desired effect when attempting to strictly enforce API rate-limits or similar. If you need a more robust solution, I recommend using an external store:&lt;/p&gt;
&lt;h3&gt;
Stores&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Memory Store &lt;em&gt;(default, built-in)&lt;/em&gt; - stores hits in-memory in the Node.js process. Does not share state with other servers or processes, and does not start a separate timer for each end user.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://npmjs.com/package/rate-limit-redis" rel="nofollow"&gt;Redis Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://npmjs.org/package/rate-limit-memcached" rel="nofollow"&gt;Memcached Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/rate-limit-mongo" rel="nofollow"&gt;Mongo Store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Alternate Rate-limiters&lt;/h3&gt;
&lt;p&gt;This module was designed to only handle the basics and didn't even support external stores initially. These other options‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nfriedly/express-rate-limit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;With these 5 NPM packages, you can make your Node.js + Express.js application much more secure in just 5 minutes. All of the packages above are extremely easy to use, just export and use as a middleware.&lt;/p&gt;

&lt;p&gt;What security precautions do you take? Or did I miss any of your favorite packages? Let me know in the discussion below and I'll be happy to hear your thoughts.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>security</category>
      <category>beginners</category>
    </item>
    <item>
      <title>D v C++</title>
      <author>JavaCode7</author>
      <pubDate>Wed, 09 Jun 2021 13:52:28 +0000</pubDate>
      <link>https://dev.to/javacode7/d-v-c-5571</link>
      <guid>https://dev.to/javacode7/d-v-c-5571</guid>
      <description>&lt;p&gt;D was created as an alternative to C++. It supposedly "fixed" all the errors in C++. But did it &lt;em&gt;really&lt;/em&gt;? Today we find out in D v C++.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits üòä
&lt;/h4&gt;

&lt;p&gt;Thanks to &lt;a class="mentioned-user" href="https://dev.to/pranavbaburaj"&gt;@pranavbaburaj&lt;/a&gt;
 for some of these points.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C++
&lt;/h2&gt;

&lt;p&gt;C++. By far one of the most well known programming languages. One of its achievements was adding OOP to C. Let's look at some strong (and weak) points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;‚úî ¬†Fast&lt;/li&gt;
&lt;li&gt;‚úî ¬†Compiled&lt;/li&gt;
&lt;li&gt;‚úî ¬†Game engine support&lt;/li&gt;
&lt;li&gt;‚úî ¬†OpenGL support&lt;/li&gt;
&lt;li&gt;‚úî ¬†Well known&lt;/li&gt;
&lt;li&gt;‚ùå Somewhat complicated&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#d"&gt;
  &lt;/a&gt;
  D
&lt;/h2&gt;

&lt;p&gt;D was made to improve C++ but did it do a good job?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;‚úî ¬†Compiled&lt;/li&gt;
&lt;li&gt;‚úî ¬†OpenGL support&lt;/li&gt;
&lt;li&gt;‚ùå No game engine support&lt;/li&gt;
&lt;li&gt;‚ùå Not very well known&lt;/li&gt;
&lt;li&gt;‚úî ¬†Simple&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, all of this evidence gives a clear winner. C++. If you disagree however, go comment down below with your reasoning! I would love to hear what you think.&lt;/p&gt;

</description>
      <category>dlang</category>
      <category>cpp</category>
      <category>healthydebate</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>React Native for mobile app development: points to consider in 2021</title>
      <author>Alex</author>
      <pubDate>Wed, 09 Jun 2021 13:48:47 +0000</pubDate>
      <link>https://dev.to/alexanderkdev/react-native-for-mobile-app-development-points-to-consider-in-2021-3i39</link>
      <guid>https://dev.to/alexanderkdev/react-native-for-mobile-app-development-points-to-consider-in-2021-3i39</guid>
      <description>&lt;p&gt;React Native is a cross-platform framework for developing mobile applications born out of the joint efforts of Facebook and enthusiasts. The framework provides engineers with the possibilities of the React library so they can create native applications that have full access to platform system APIs. React Native supports platforms such as Android, Android TV, iOS, macOS, Apple tvOS, Web, Windows, and UWP.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXe73wyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sci05849ouz3haek8wg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXe73wyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sci05849ouz3haek8wg9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
As it gets evident from the graph, the React Native app development is on the rise. The framework was the most popular cross-platform mobile tool both in 2019 and 2020. The world's most reputable brands, such as Facebook, Instagram, or Tesla, use React Native. &lt;/p&gt;

&lt;p&gt;The question needs to be asked: how did the framework manage to become so popular? Here‚Äôs a quick recap before we plunge into details: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React Native is compact but has a lot to offer to developers;&lt;/li&gt;
&lt;li&gt;The opportunity to write in JavaScript and use React makes it possible to create an application for both platforms quickly. Surely, it‚Äôs more profitable for any business;&lt;/li&gt;
&lt;li&gt;The framework provides a large library of native and non-native components;
One can go on with a browser for debugging. Besides, there‚Äôs also a hot-reload feature for checking out applied changes. You don‚Äôt have to restructure an application if you change the code;&lt;/li&gt;
&lt;li&gt;The native components of the system (all buttons, pictures, and texts) are all standard components of the operating system. It is impossible to distinguish a native application from a native one. In fact, a React Native app is a native app in itself;&lt;/li&gt;
&lt;li&gt;It‚Äôs easy to manage your own library for React Native using the native functionality of the system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you've decided to develop an app using native languages ‚Äã‚Äãsuch as Java, Objective-C, and C#, be sure that  the development process will take considerable time. Besides, if you hire an experienced professional, it will not come cheap. So what your next step might be? Why do so many people consider React Native when developing a mobile app? Let‚Äôs find out. &lt;/p&gt;

&lt;p&gt;The pros and cons of React Native&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wgwD6pD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc5miled3o1zx28s30rj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wgwD6pD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc5miled3o1zx28s30rj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In itself, a React Native mobile app shouldn‚Äôt be seen as HTML5 or a hybrid one. Instead, it is a mobile application in its own right. True, React Native-based applications may not be as fast as native ones, but you get very close to native performance. I‚Äôd say the speed is almost indistinguishable. &lt;/p&gt;

&lt;p&gt;One way or another, you can still improve the performance of a React Native app with native code. When talking about optimization, native code works like a breeze. To get the best out of the performance, use both sources of code. I mean, some features can be built with native code, and some using React Native‚Äôs code.&lt;/p&gt;

&lt;p&gt;Convenience &lt;br&gt;
Essentially, an experienced full-stack developer can start creating mobile apps in React Native without going through specialized training. So how can you get started? Well, the first thing to do is to familiarize yourself with writing code in Javascript and know a thing or two about React. However, you need to know the peculiarities of both Android and iOS. These platforms have many similar and specific features, so the risk of confusion in the development process is high. In other words, React Native is simple and convenient if the developer understands what he is doing and what an eventual goal is.&lt;/p&gt;

&lt;p&gt;It‚Äôs worth noting that React Native can be added at any time. You can start with RC (greenfield applications) or add it to an existing app (brownfield apps). That basically means that if there is a native application, and you want to update it with common features, it‚Äôs unnecessary to do this natively.&lt;/p&gt;

&lt;p&gt;Awesome user interfaces&lt;br&gt;
The framework makes it possible to design aesthetically appealing user interfaces using pre-built components such as Slider, Switch, Picker, or Button. Besides, it‚Äôs also possible to develop custom components with TouchableNativeFeedback and TouchableOpacity. Hopefully, there‚Äôs a myriad of iOS and Android components that work efficiently on corresponding mobile devices.&lt;/p&gt;

&lt;p&gt;F is for fast &lt;br&gt;
React Native is powerful when it comes to a variety of components. You have all you might need when developing: text, images, keyboard input, animation, clipboard, scrolling lists, progress bar, and links. These components significantly accelerate the development process, not to mention Hot Reloading, which reloads the application without recompiling all the code.&lt;/p&gt;

&lt;p&gt;React Native libraries such as Redux and MobX handle the state of an app, while Awesome React Native - a catalog of components and demos - helps finish the mobile app development faster. Besides, tools like VS Code, WebStorm, and Nuclide for coding, Sentry for monitoring bugs and crashes, and React Developer Tools for debugging also add to the list of React‚Äôs advantages. &lt;/p&gt;

&lt;p&gt;Strong community&lt;br&gt;
Here are some amazing stats: React Native has over 2000 contributors with 95,000+ stars on GitHub. Many reputable companies have contributed to the platform. This way, you will easily find many React Native components and libraries built by the developer community on sites like JS.coach and Native Directory. You will always find someone who can help you on StackOverflow, Reddit, Codementor, or the Reactiflux Discord Community.&lt;/p&gt;

&lt;p&gt;Drawbacks &lt;br&gt;
Let‚Äôs be honest: there are pros and cons to everything. I've talked about many of the positive aspects of React Native, but it has several problems such as large app size, memory leaks in Android apps due to unnecessary processes running in the background, and a slow app startup problem because of some dependencies. However, you can fix these problems to some extent.&lt;/p&gt;

&lt;p&gt;For instance, you can solve the Android app memory leak issue with scrollable lists like FlatList, SectionList, or VirtualList. Refrain from using ListView to prevent memory leaks. To solve a slow application startup problem, you need to reduce the number of dependencies in your application and use components that work very well. What‚Äôs more, Hermes, a JavaScript engine optimized for React Native, helps launch applications faster, owing to build-time precompilation of JavaScript into effective bytecode.&lt;/p&gt;

&lt;p&gt;How we can help you with React Native (+ video case study)&lt;br&gt;
Here at Akveo, we use React Native a lot. We said it once, and we‚Äôll say it again: using React Native is the easiest yet reliable method to reach the market faster. We‚Äôve helped our clients save on development costs while providing them with cross-platform applications that work perfectly on any platform.&lt;/p&gt;

&lt;p&gt;What‚Äôs more, as React Native advocates, we developed our own products based on React Native UI Kitten is an open-source and free framework for creating cross-platform mobile applications. Design system-based, UI Kitten brings your product from an MVP to the final product version. &lt;/p&gt;

&lt;p&gt;However, as the title suggests, a picture is worth a thousand words. Let me speak about one of our clients and how we helped them with React Native. Enter the client: Felmo is a German company from the industry of veterinary services. The customer came up with the idea of developing a mobile application that links vet clinics and pet owners that want to receive medical care services online. Using UI Kitten, our team reduced front-end development time by 25% and saved thousands of dollars for the client. The end result of the project is a multifunctional mobile application with a set of custom icons and illustrations.&lt;/p&gt;

&lt;p&gt;To sum up (and take action) &lt;br&gt;
If you want a quick conclusion, it's easy to formulate it in one phrase. React Native is a robust mobile app development tool that allows developers to quickly create products while saving costs on development. When comparing the pros and cons of React Native mobile development, it's a no-brainer to realize that the advantages outweigh the minor drawbacks.&lt;/p&gt;

&lt;p&gt;We know it firsthand, as our React Native expertise is rich. We‚Äôre already familiar with all the pain points and workarounds. Besides, we‚Äôre professionals in native development as well, so we know for sure when and how to use both methods. Sure, the trends in mobile development may change, but some things always remain in great demand. React Native is widely used by big brands, so don't it won‚Äôt disappear any time soon. Contact us (&lt;a href="https://exceed-team.com/"&gt;https://exceed-team.com/&lt;/a&gt;) to get the quote, and let‚Äôs build your React Native-based mobile app.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>app</category>
      <category>mobileapp</category>
    </item>
    <item>
      <title>Exciting time ahead.  I joined the Foremüå± team</title>
      <author>Anuj Bhavsar</author>
      <pubDate>Wed, 09 Jun 2021 13:37:45 +0000</pubDate>
      <link>https://dev.to/anujbhavsar96/exciting-time-ahead-i-joined-the-forem-team-25do</link>
      <guid>https://dev.to/anujbhavsar96/exciting-time-ahead-i-joined-the-forem-team-25do</guid>
      <description>&lt;p&gt;Hello Everyoneüëã,&lt;/p&gt;

&lt;p&gt;My name is Anuj Bhavsar, based in Ahmedabad, IndiaüáÆüá≥. And I'm proud to announce that I have recently joined the Foremüå± team as a Product Designer.&lt;/p&gt;

&lt;p&gt;I'll be working with &lt;a class="mentioned-user" href="https://dev.to/lisasy"&gt;@lisasy&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/pp"&gt;@pp&lt;/a&gt;
 designing the experience for empowering communities.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About meüòé
&lt;/h3&gt;

&lt;p&gt;I'm a computer science dropped-out student(competitive coding wasn't my cup of tea, and then the creative field came to rescue). I made my way into design industry five years back by self-learning and the help of the online community. I've been working in this industry for the last four years. Before Forem, I've worked with India's biggest Edtech startup Vedantu. Also, I've experience working with a Design studio.&lt;/p&gt;

&lt;p&gt;When I'm not designing, I enjoy binge-watching series &amp;amp; movies üé¨, clicking &amp;amp; editing picturesüì∏ , and watching cute animals on Instagram. I'm always grooving on some tunes on Spotifyü•Å while working.&lt;/p&gt;

&lt;p&gt;Nowadays I'm into cookingü•ò, workoutsüèãüèª, dog parentingüê∂ , and house decorationsüèµ.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-forem"&gt;
  &lt;/a&gt;
  Why Foremü§î?
&lt;/h3&gt;

&lt;p&gt;Because why not? Where will I find such a dream team dedicated to working towards such a noble and fascinating problem? &lt;/p&gt;

&lt;p&gt;Being a self-taught designer, I know the importance of community. DEV is such an incredible example of that. And Forem is helping creators drive such communities.&lt;/p&gt;

&lt;p&gt;The thing I like about Forem+DEV is open-source and the habit of building in public. Transparency is everything in such time. &lt;/p&gt;




&lt;p&gt;Excited to work with these talented folks and enhance the user experience for Foremüå±&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#where-you-can-find-me"&gt;
  &lt;/a&gt;
  Where you can find meüëÄ
&lt;/h3&gt;

&lt;p&gt;Follow me here on DEV for work-related updates.&lt;br&gt;
&lt;a href="https://twitter.com/anujbhavsar50"&gt;Twitter&lt;/a&gt; ‚Ä¢ &lt;a href="https://www.instagram.com/anuj.png/"&gt;Instagram&lt;/a&gt; ‚Ä¢ &lt;a href="https://dribbble.com/anujbhavsar50"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>meta</category>
      <category>design</category>
    </item>
    <item>
      <title>Looking for CSS wizards to contribute</title>
      <author>Przemyslaw Michalak</author>
      <pubDate>Wed, 09 Jun 2021 13:30:18 +0000</pubDate>
      <link>https://dev.to/przemek/looking-for-css-wizards-to-contribute-1d34</link>
      <guid>https://dev.to/przemek/looking-for-css-wizards-to-contribute-1d34</guid>
      <description>&lt;p&gt;Hi everyone. I'm co-creator of the project that you might heard of already. In short - it is automated front-end Studio that works in the browser and has it's own repository of fully customizable Widgets, Live Preview, meta-framework and a much more. You can read about it &lt;a href="https://dev.to/przemek/front-end-studio-powered-by-solidjs-e5o"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the features that comes with the Studio are Widgets. They can be inserted inside of any project within one click. All of them have consistent naming when it comes to their styles which makes them easy to customize by either scoped CSS files or Global Styles.&lt;/p&gt;

&lt;p&gt;Right now we are thinking of implementing the library with pre-made Global Styles that can be inserted inside of the project within one click and give initial look to the app created by developer. Unfortunately neither me or &lt;a href="https://dev.to/chrisczopp"&gt;Chris&lt;/a&gt; are UI designers. But that gives the great opportunity for our community.&lt;/p&gt;

&lt;p&gt;The Studio is offered in FREEMIUM model. So anyone can create their own project for FREE, use as many of basic Widgets (52 at the moment) and style them, use advantage of setup free Live Preview, Implementation Assistant (in context notification system that generate files and necessary glue code while triggered by an user) and export code outside of the Studio to clean and well organized JSX powered by &lt;a href="http://solidjs.com/"&gt;SolidJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And that's the deal. We are looking for developers who would be interested in creating Global Styles for the Studio. As a return we will offer 6 months of 'freelancer' plan for free. That gives a great opportunity for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;everyone that is looking for alternative fast ways of delivering more competitive products to their customers&lt;/li&gt;
&lt;li&gt;learners who would like to add to their CV/portfolio new project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although you can create projects from simple landing pages to advanced administration panels for absolutely FREE, the 'Freelancer' plan offers a couple of amazing features as automatically generated prerenders that allows to hit over 90% score in well know tools measuring speed of websites (lighthouse for example) or access to repository with more advanced Widgets (34 at the moment).&lt;/p&gt;

&lt;p&gt;How it works?&lt;/p&gt;

&lt;p&gt;You can clone repository from &lt;a href="https://github.com/gluecodes/gluecodes-global-styles"&gt;here&lt;/a&gt; and use it's README as a guideline what exactly needs to be styled. Then you can access the &lt;a href="https://ide.glue.codes/?openedTab=demos"&gt;Studio&lt;/a&gt; boilerplate that I prepared for you. All the Widgets have consistent naming which makes styling of the whole app very fast, smooth and easy. When you finish with everything you can simply copy the CSS or export the project, add it to cloned GitHub repository and commit changes.&lt;/p&gt;

&lt;p&gt;What is worth to know?&lt;/p&gt;

&lt;p&gt;Before you submit your work you can create your thumbnail and short README file where you can leave your name that will be visible for everyone before inserting your styles to their project. Also remember that you don't need to style every single class that you find in the boilerplate.&lt;/p&gt;

&lt;p&gt;If you will need help with anything you can use our group on FB where you can ask any questions related to GlueCodes Studio:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/groups/gluecodesstudio"&gt;https://www.facebook.com/groups/gluecodesstudio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just in case you missed it, here is our website:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.glue.codes"&gt;https://www.glue.codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the GitHub repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/gluecodes/gluecodes-ide/pull/66"&gt;https://github.com/gluecodes/gluecodes-ide/pull/66&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to download node js on macOS</title>
      <author>Nerd Clump</author>
      <pubDate>Wed, 09 Jun 2021 13:24:07 +0000</pubDate>
      <link>https://dev.to/nerdclump7/how-to-download-node-js-on-macos-2ol6</link>
      <guid>https://dev.to/nerdclump7/how-to-download-node-js-on-macos-2ol6</guid>
      <description>&lt;p&gt;This guide is for people who want help with how to download node.js on macOS and you will know everything step by step.&lt;br&gt;
This process will take about 1 minute to install the node.js file.&lt;br&gt;
Node.js is not a library or framework. but in fact, it‚Äôs a runtime environment. It helps programmers to write Server-Side scripts with the help of javascript. Node.js is built on Chrome‚Äôs V8 JavaScript engine.&lt;br&gt;
Let‚Äôs Get Started&lt;br&gt;
Read all the steps to know how to download node.js on macOS&lt;br&gt;
Step 1: Go to &lt;a href="https://nodejs.org"&gt;Nodejs.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j0T9c1LN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/843dkaxij6yz58auit9y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j0T9c1LN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/843dkaxij6yz58auit9y.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 2: Click on the current version to download the latest version of the nodejs and it will automatically updates the node.js. And Download the File to continue&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Hk0dMDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cfe1wisbs635g8xmqot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Hk0dMDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cfe1wisbs635g8xmqot.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 3: Go to Finder and then Download tab to find node.js package. Then Double click on the file to install.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVDMYKzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asixvs90krur334mwbfw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVDMYKzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asixvs90krur334mwbfw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 4: If you get this then follow the below steps as shown in image 4, If you don‚Äôt get it then skip to &lt;a href="//www.nerdclump.com/how-to-download-node-js-in-mac/"&gt;step 7&lt;/a&gt; to continue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o8e_nf1v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/131kzx0yd6l5o8h9a5ae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o8e_nf1v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/131kzx0yd6l5o8h9a5ae.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 5: Open System Preferences&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R_QOiAcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1tk6487indan8cyytk2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R_QOiAcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1tk6487indan8cyytk2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read the Full Article here &lt;a href="//www.nerdclump.com/how-to-download-node-js-in-mac/"&gt;How to download node js on macOS&lt;/a&gt;&lt;br&gt;
This Article is from &lt;a href="//www.nerdclump.com/"&gt;Nerd Clump&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: All the images are from &lt;a href="https://www.nerdclump.com/"&gt;Nerd Clump&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Hexagons and Beyond: Responsive Grid Patterns, Sans Media Queries</title>
      <author>Temani Afif</author>
      <pubDate>Wed, 09 Jun 2021 13:21:25 +0000</pubDate>
      <link>https://dev.to/this-is-learning/hexagons-and-beyond-responsive-grid-patterns-sans-media-queries-1nb4</link>
      <guid>https://dev.to/this-is-learning/hexagons-and-beyond-responsive-grid-patterns-sans-media-queries-1nb4</guid>
      <description>&lt;p&gt;Since the rise of Flexbox and CSS Grid, everyone is claming the same: "float is dead!", "stop using float!" but I'm here to resurrect our old friend float to create complex and responsive layouts‚Äâthat you cannot achieve using flexbox and CSS grid. All this without any single media query.&lt;/p&gt;

&lt;p&gt;I know, it's hard to believe. So let's start with a working demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/zYoZBOy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is a fully responsive hexagon grid made without media queries, JavaScript, or a ton of hacky CSS. Resize the demo screen and see the magic. In addition to being responsive, the grid also scales. For example, we can chuck more hexagons in there by adding more divs, and control both the sizing and spacing using CSS variables.&lt;/p&gt;

&lt;p&gt;Cool, right? And this is only one example among many grids we will build in the same manner.&lt;/p&gt;

&lt;p&gt;This article is a generic version of a previous one where I only talked about hexagon shapes: &lt;a href="https://dev.to/afif/responsive-hexagon-grid-without-media-query-57g7"&gt;https://dev.to/afif/responsive-hexagon-grid-without-media-query-57g7&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#making-a-grid-of-hexagons"&gt;
  &lt;/a&gt;
  Making a grid of hexagons
&lt;/h2&gt;

&lt;p&gt;First, we create our hexagon shape. This task is fairly easy using &lt;code&gt;clip-path&lt;/code&gt;. We will consider a variable &lt;code&gt;S&lt;/code&gt; that will define the dimension of our element. Bennett Feely's &lt;a href="https://bennettfeely.com/clippy/"&gt;Clippy&lt;/a&gt; is a great online generator for clip paths.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lWe56Si2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/hex-clip-path.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lWe56Si2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/hex-clip-path.png" alt="Hexagon shape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each hexagon is an &lt;code&gt;inline-block&lt;/code&gt; element. The markup can go something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--etc. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚Ä¶and the CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* we will talk about this later ... */&lt;/span&gt;
  &lt;span class="py"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c"&gt;/* size  */&lt;/span&gt;
  &lt;span class="py"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c"&gt;/* margin */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* disable white space between inline block element */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1.1547&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* we reset the font-size if we want to add some content */&lt;/span&gt;
  &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing complex so far. We have a main element that holds a container which, in turn, holds the hexagons. Since we are dealing with &lt;code&gt;inline-block&lt;/code&gt;, we need to fight the common white space issue (using the &lt;code&gt;font-size&lt;/code&gt; trick) and we consider some margin (defined with the variable &lt;code&gt;M&lt;/code&gt;) to control the space.&lt;/p&gt;

&lt;p&gt;Here‚Äôs the result so far:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0A6Mf8XK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/CefrNYpk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0A6Mf8XK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/CefrNYpk.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every other row needs some negative offset so the rows overlap rather than stack directly on top of each other. That offset will be equal to 25% of the element height (see Figure 1). We apply that offset to &lt;code&gt;margin-bottom&lt;/code&gt; to get the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1.1547&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.2886&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* some negative margin to create overlap */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚Ä¶and the result becomes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vsF7rvXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619908434242_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsF7rvXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619908434242_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the real trick is how we can shift the second row to get a perfect hexagon grid. We've already scrunched things to the point where the rows overlap each other vertically, but what we need is to push every other row toward the right so the hexagons stagger rather than overlap. Here's where &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;shape-outside&lt;/code&gt; come into play.&lt;/p&gt;

&lt;p&gt;Did you wonder why we have a &lt;code&gt;.main&lt;/code&gt; element wrapping our container and having &lt;code&gt;display: flex&lt;/code&gt; ? That &lt;code&gt;div&lt;/code&gt; is also a part of the trick. In a &lt;a href="https://dev.to/afif/float-an-element-to-the-bottom-corner-342n"&gt;previous article&lt;/a&gt;, I used float and I needed that flexbox container in order to be able to use &lt;code&gt;height: 100%&lt;/code&gt;. I will be doing the same thing here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am using the &lt;code&gt;container::before&lt;/code&gt; pseudo-element to create a float element that take up all the height at the left of the grid, and that has a width equal to half a hexagon (plus its margin). We get the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2lNYVg6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/PTuQEwm8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2lNYVg6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/PTuQEwm8.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can reach for &lt;code&gt;shape-outside&lt;/code&gt;. Let's take a quick refresher on what it does:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;shape-outside&lt;/code&gt; CSS property defines a shape‚Äîwhich may be non-rectangular‚Äîaround which adjacent &lt;strong&gt;inline content&lt;/strong&gt; should wrap. By default, inline content wraps around its margin box; shape-outside provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes. &lt;sup&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside"&gt;ref&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Notice "inline content" in the definition. This explains exactly why the hexagons need to be &lt;code&gt;inline-block&lt;/code&gt; elements. But to understand what kind of shape we need, let's zoom into the pattern.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aiuhqz9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619910028475_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aiuhqz9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619910028475_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's cool about &lt;code&gt;shape-outside&lt;/code&gt; is that it actually works with gradients. But what kind of gradient fits our situation?&lt;/p&gt;

&lt;p&gt;If, for example, we have 10 rows of hexagons, we only need to shift means every even row. Seen differently, we need to shift every second row so we need a kind of repetition‚Äâ‚Äî‚Äâperfect for a repeating gradient!&lt;/p&gt;

&lt;p&gt;We'll create a gradient with two colors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A transparent one to create the ‚Äúfree space‚Äù while allowing the first row to stay in place (illustrated by the blue arrow above).&lt;/li&gt;
&lt;li&gt;An opaque color to shift the second row to the right so the hexagons aren‚Äôt directly stacked on top of one another (illustrated by the green arrow).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our &lt;code&gt;shape-outside&lt;/code&gt; value will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;shape-outside&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;#0000&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#000&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* #0000 = transparent */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's find the value of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;. &lt;code&gt;B&lt;/code&gt; will simply be equal to the height of two rows since our logic need to repeat each two rows.&lt;/p&gt;

&lt;p&gt;The height of two rows is equal to the height of two hexagons (including their margins), minus twice the overlap (&lt;code&gt;2*Height + 4*M - 2*Height*25% = 1.5*Height + 4*M&lt;/code&gt;). Or, expressed in CSS with &lt;code&gt;calc()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;732&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--m&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's a lot! So, let's hold all of this in a CSS custom property, &lt;code&gt;F&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The value of &lt;code&gt;A&lt;/code&gt; (defined by the blue arrow in the previous figure) needs to be at least equal to the size of one hexagon, but it can also be bigger. In order to push the second row over to the right, we need few pixel of opaque color so &lt;code&gt;A&lt;/code&gt; can simply be equal to &lt;code&gt;B - Xpx&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is a small value.&lt;/p&gt;

&lt;p&gt;We end up with something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;shape-outside&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;#0000&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--f&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="err"&gt;#000&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--f&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nqF2D4j3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619910864415_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nqF2D4j3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619910864415_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See that? Our repeating linear gradient's shape is pushing every other row to the right by one half the width of a hexagon to offset the pattern.&lt;/p&gt;

&lt;p&gt;Let's put that all together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c"&gt;/* size  */&lt;/span&gt;
  &lt;span class="py"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c"&gt;/* margin */&lt;/span&gt;
  &lt;span class="py"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1.732&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* disable white space between inline block element */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1.1547&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.2885&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! With no more than 15 CSS declarations, we have a responsive grid that fit nicely into all the screen sizes and we can easily adjust things by simply controling two variables.&lt;/p&gt;

&lt;p&gt;You may have noticed that I am adding &lt;code&gt;-1px&lt;/code&gt; to the variable &lt;code&gt;F&lt;/code&gt;. Since we are dealing with calculation that involve decimals, the rounding may give us bad results. To avoid this we add or remove few pixels. I am also using &lt;code&gt;120%&lt;/code&gt; instead of &lt;code&gt;100%&lt;/code&gt; for the height of the floated element for similar reasons. There is no particular logic with theses values; we simply adjust them to make sure to cover most of the cases without any misaligning our shapes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#want-more-shapes"&gt;
  &lt;/a&gt;
  Want more shapes?
&lt;/h2&gt;

&lt;p&gt;We can do more than hexagons with this approach! Let‚Äôs create a "rhombus" grid instead. Again, we start with our &lt;code&gt;clip-path&lt;/code&gt; to create the shape:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhkvsxUN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/rhombus-clip-path.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhkvsxUN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/rhombus-clip-path.png" alt="Rhombus clip-path shape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is basically the same. What's changing are the calculations and values. Find below a table that will illustrate the changes.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Hexagon grid&lt;/th&gt;
&lt;th&gt;Rhombus grid&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;height&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--s)*1.1547)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;var(--s)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;clip-path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;polygon(50% 0, 100% 50%, 50% 100%, 0 50%)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;margin-bottom&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--m) - var(--s)*0.2885)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--m) - var(--s)*0.5)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--f&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--s)*1.7324 + 4*var(--m))&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--s) + 4*var(--m))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;And we‚Äôre done! A mere four changes to our code gets us a completely new grid but with a different shape.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWbpjvw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#just-how-flexible-is-this"&gt;
  &lt;/a&gt;
  Just how flexible is this?
&lt;/h2&gt;

&lt;p&gt;We saw how we were able to make the hexagon and rhombus grids using the exact same code structure, but different calculations. &lt;/p&gt;

&lt;p&gt;Let me blow your mind with another idea: What about making that calculation a variable so that we can easily switch between different grids without changing the code? We can certainly do that!&lt;/p&gt;

&lt;p&gt;We'll use an octagonal shape because it's more of a generic shape from that we can use to create other shapes (a hexagon, a rhombus, a rectangle, etc.) simply by changing a few values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jb1lb-pA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/octagon-clip-path.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jb1lb-pA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/octagon-clip-path.png" alt="Octagon shape clip-path"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our octagon is defined with four variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;S&lt;/code&gt;: the width.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;R&lt;/code&gt;: the ratio that will help us defines the height based on the width.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hc&lt;/code&gt; and &lt;code&gt;vc&lt;/code&gt; : both of these will control our &lt;code&gt;clip-path&lt;/code&gt; values and the shape we want to get. &lt;code&gt;hc&lt;/code&gt; will be based on the width while &lt;code&gt;vc&lt;/code&gt; on the height&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know it looks hefty, but the &lt;code&gt;clip-path&lt;/code&gt; is defined using eight points (like shown in the figure). Adding some CSS variables, we get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;clip-path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;polygon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
   &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--hc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--hc&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="c"&gt;/* 2 points at the top */&lt;/span&gt;
   &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--vc&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--vc&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt; &lt;span class="c"&gt;/* 2 points at the right */&lt;/span&gt;
   &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--hc&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--hc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="c"&gt;/* 2 points at the bottom */&lt;/span&gt;
   &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--vc&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--vc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;/* 2 points at the left */&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what we're aiming for:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zYxWTRRz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619961411571_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zYxWTRRz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619961411571_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs zoom in to identify the different values:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LCVvFzqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619963939847_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LCVvFzqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619963939847_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The overlap between each row (illustrated by the red arrow) can be expressed using the vc variable which gives us a &lt;code&gt;margin-bottom&lt;/code&gt; equal to &lt;code&gt;M - vc&lt;/code&gt; (where &lt;code&gt;M&lt;/code&gt; is our margin).&lt;/p&gt;

&lt;p&gt;In addition to the margin we applied between our element, we also need an additional horizontal margin (illustrated by the yellow arrow) equal to &lt;code&gt;S - 2*hc&lt;/code&gt;. Let's define another variable for the horizontal margin (&lt;code&gt;MH&lt;/code&gt;) that is equal to &lt;code&gt;M + (S - 2*hc)/2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The height of two rows is equal to twice the size of a shape (plus the margin), minus twice the overlap, or &lt;code&gt;2*(S + 2*M) - 2*vc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's update our table of values to see how we're calculating things between the different grids:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Hexagon grid&lt;/th&gt;
&lt;th&gt;Rhombus grid&lt;/th&gt;
&lt;th&gt;Octagon grid&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;height&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--s)*1.1547)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;var(--s)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--s)*var(--r)))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;clip-path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;polygon(50% 0, 100% 50%, 50% 100%, 0 50%)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;polygon(var(--hc) 0, calc(100% - var(--hc)) 0,100% var(--vc),100% calc(100% - var(--vc)), calc(100% - var(--hc)) 100%,var(--hc) 100%,0 calc(100% - var(--vc)),0 var(--vc))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--mh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;‚Äì&lt;/td&gt;
&lt;td&gt;‚Äì&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--m) + (var(--s) - 2*var(--hc))/2)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;margin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;var(--m)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;var(--m)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;var(--m) var(--mh)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;margin-bottom&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--m) - var(--s)*0.2885)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--m) - var(--s)*0.5)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--m) - var(--vc))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--f&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--s)*1.7324 + 4*var(--m))&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--s) + 4*var(--m))&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(2*var(--s) + 4*var(--m) - 2*var(--vc))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Alright, let‚Äôs update our CSS with those adjustments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c"&gt;/* size  */&lt;/span&gt;
  &lt;span class="py"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* ratio */&lt;/span&gt;

  &lt;span class="c"&gt;/* clip-path parameter */&lt;/span&gt;
  &lt;span class="py"&gt;--hc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="py"&gt;--vc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="py"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* vertical margin */&lt;/span&gt;
  &lt;span class="py"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--hc&lt;/span&gt;&lt;span class="p"&gt;))/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* horizontal margin */&lt;/span&gt;
  &lt;span class="py"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--vc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* disable white space between inline block element */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--vc&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, the code structure is the same. We simply added more variable to control the shape and extend the &lt;code&gt;margin&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;And below a working example. Adjust the different variables to control the shape while having a fully responsive grid:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWpExVW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;An interactive demo, you say? You bet!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/NWpaJMJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;To make things easier, I am expressing the &lt;code&gt;vc&lt;/code&gt; and &lt;code&gt;hc&lt;/code&gt; as percetange of the width and height so we can easily scale our elements without breaking the &lt;code&gt;clip-path&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From the above we can easily get the initial hexagonal grid:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-KbJ-xA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619967785492_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-KbJ-xA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619967785492_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The rhombus grid:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6s4UbiqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619967852929_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6s4UbiqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619967852929_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And yet another hexagon grid:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TZNf-Uau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/vm8u1y_Y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TZNf-Uau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/vm8u1y_Y.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A masonry-like grid:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUGpWNxm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619968042870_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUGpWNxm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619968042870_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And a checkerboard while we are at it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oM1VzgIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619968097777_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oM1VzgIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619968097777_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A lot of possibilities to create a responsive grid with any kind of shape! All we have to do is adjust few variables.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#fixing-the-alignment"&gt;
  &lt;/a&gt;
  Fixing the alignment
&lt;/h3&gt;

&lt;p&gt;Let's try to control the alignment of our shapes. Since we are dealing with &lt;code&gt;inline-block&lt;/code&gt; elements, we're dealing with default left alignment and some empty space at the end, depending on viewport width.&lt;/p&gt;

&lt;p&gt;Notice that we alternate between two kind of grids based on the screen width: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kQdj3TZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1620174099369_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kQdj3TZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1620174099369_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grid #1: A different number of items per row (N, N-1,N, N-1, etc.)&lt;/li&gt;
&lt;li&gt;Grid #2: The same number of items per row (N, N, N, N, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It would be good to always have one of the grid all the time (either #1 or #2) and center everything so that the free space is equally divided on both sides.&lt;/p&gt;

&lt;p&gt;In order to get the first grid in the figure above, the container width needs to be a multiplier of the size of one shape, plus its margin, or &lt;code&gt;N*(S + 2*MH)&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer value.&lt;/p&gt;

&lt;p&gt;This may sound impossible with CSS, but it's indeed possible. I made it using CSS grid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto-fit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;.main&lt;/code&gt; is now a grid container. Using &lt;code&gt;grid-template-columns&lt;/code&gt;, I define the column width (as previously explained) and use the &lt;code&gt;auto-fit&lt;/code&gt; value to get as many columns as possible into the available space. Then, the &lt;code&gt;.container&lt;/code&gt; spans all of the grid columns using &lt;code&gt;1/-1&lt;/code&gt;‚Äâ‚Äî‚Äâwhich means that the width of our container will be a mutiplier of one column size.&lt;/p&gt;

&lt;p&gt;All it takes to center things is &lt;code&gt;justify-content: center&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Yes, CSS is magic!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/poeWYqv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Resize the demo and notice that not only do we have the first grid from the figure, but everything is perfectly centered as well.&lt;/p&gt;

&lt;p&gt;But wait, we removed &lt;code&gt;display: flex&lt;/code&gt; and swapped in &lt;code&gt;display: grid&lt;/code&gt;‚Ä¶ so how is the percentage-based height of the float still working? I had said that using a flex container was the key for that, no?&lt;/p&gt;

&lt;p&gt;Well, turns out CSS grid sports that feature too. From &lt;a href="https://www.w3.org/TR/css-grid-1/#algo-overview"&gt;the specification&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Once the size of each grid area is thus established, the grid items are laid out into their respective containing blocks. The grid area‚Äôs width and height are considered definite for this purpose.&lt;br&gt;
Note: Since formulas calculated using only definite sizes, such as the stretch fit formula, are also definite, the size of a grid item which is stretched is also considered definite.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A grid item has a &lt;code&gt;stretch&lt;/code&gt; alignment by default, so its height is definite, meaning using a percentage as a height inside it is perfectly valid.&lt;/p&gt;

&lt;p&gt;Let's say we instead want the second grid in the figure‚Äâ‚Äî‚Äâwe simply add an extra column with a width equal to half the width of the other columns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto-fit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/rNyGRbM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now, in addition to a fully responsive grid that is flexible enough to take custom shapes, everything is perfectly centred!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wait-one-more-a-pyramidal-grid"&gt;
  &lt;/a&gt;
  Wait, one more: a pyramidal grid
&lt;/h2&gt;

&lt;p&gt;Let's take everything we've learned and build another amazing grid. This time, we‚Äôll transform the grid we just made into a pyramidal one.&lt;/p&gt;

&lt;p&gt;Consider that, unlike the grid we've made so far, the number of elements is important especially for the responsive part. It‚Äôs required to know the number of elements and more precesily the number of rows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7RW0y9Nk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/different-pyramid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7RW0y9Nk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/different-pyramid.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It doesn't mean we need a bunch of hardcoded values; rather we use an extra variable to adjust things based on the number of rows.&lt;/p&gt;

&lt;p&gt;The logic is based on the number of rows because different numbers of elements may give us the same number of rows. For example, there are five rows when we have between 11 and 15 elements, even if the last row is not fully occupied. Having between 16 and 21 elements gives us six rows, and so on. The number of rows is our new variable.&lt;/p&gt;

&lt;p&gt;Before digging into the geometry and the math here is a working demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/gOmjZOO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Notice that most of the code is the same as what we‚Äôve done in the previous examples. So let's focus on the new properties that we‚Äôve added:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--nr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c"&gt;/* number of rows */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;NR&lt;/code&gt; is our variable for the number of rows. The width of the container needs to be equal to the last row of the pyramid to make sure it hold all the elements. If you check the previous figure, you'll see that the number of the items contained in the last row is simply equal to the number of rows, which means the formula is: &lt;code&gt;NR* (S + 2*MH)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may have also noticed that we also added an &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; element in there. We did that because we need two floating elements where we will apply &lt;code&gt;shape-outside&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To understand why we need two floating elements let's see what is done behind the scenes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AzCdlFuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/behind-the-scenes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AzCdlFuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/behind-the-scenes.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The blue elements are our floating elements. Each one is having a width equal to half the container size, minus half a shape size, plus margin. The height is equal to four rows in our case, and to &lt;code&gt;NR - 1&lt;/code&gt; in a more generic case. Earlier, we defined the height of two rows, &lt;code&gt;F&lt;/code&gt;, so the height of one row is &lt;code&gt;F/2&lt;/code&gt;. That's how we landed at &lt;code&gt;height: calc(var(--f)*(var(--nr) - 1)/2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have the size of our elements, we need to apply a gradient to our shape-outside.&lt;/p&gt;

&lt;p&gt;The purple coloration in the figure above is the restricted area for our elements (it need to be an opaque color). The remaining area is the free space where the elements can flow (it need to be a transparent color). This can be done using a diagonal gradient:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;shape-outside&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;bottom&lt;/span&gt; &lt;span class="nt"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#000&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;#0000&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We simply change right with left for the other floated element. You have probably noticed that this is not responsive. In fact, go ahead and adjust the viewport width of the demo and see just how unresponsive this is.&lt;/p&gt;

&lt;p&gt;We have a couple of options to get responsive:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We can fall back to the first grid when the container width is smaller than the viewport width. It's a bit tricky to code, but it allows us to preserve the same size for our elements.&lt;/li&gt;
&lt;li&gt;We can reduce the size of our elements in order to keep the pyramidal grid. This is easier to code using the percentage-based value trick, but that could result in super tiny elements on smaller screen sizes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's go with the first solution. We like a good challenge, right?&lt;/p&gt;

&lt;p&gt;To get the pyramidal grid, we needed two floated element. The initial grid needed just one floated element. Luckily, our structure allows us to have three floated elements without needing to add more elements to the markup, thanks to pseudo-elements. We will use &lt;code&gt;container::before&lt;/code&gt;, &lt;code&gt;i::before&lt;/code&gt;, &lt;code&gt;i::after&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Same as before... */&lt;/span&gt;

&lt;span class="c"&gt;/* The initial grid */&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* The pyramidal grid */&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need a trick that lets us use either the first floated element or the other two, but not all of them at the same time. This condition should be based on the width of our container:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the container width is bigger than the width of the last row, we can have our pyramid and use the floated elements inside of &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the container width is smaller than the width of the last row, we switch to the other grid and use the first floated element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can use &lt;code&gt;clamp()&lt;/code&gt; for this! It's sort of like a conditional function that sets a minimum and maximum range and, within that range, we provide it an "ideal" value to use between those points. This way, we can "switch" between grids using our formulas as clamped values, and still avoid using media queries.&lt;/p&gt;

&lt;p&gt;Our code will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* the other variables won't change*/&lt;/span&gt;
  &lt;span class="py"&gt;--lw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt; &lt;span class="c"&gt;/* width of last row */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* The initial grid */&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* The pyramidal grid */&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On larger screens, the width of the container (&lt;code&gt;LW&lt;/code&gt;) is now equal to its &lt;code&gt;max-width&lt;/code&gt;, so &lt;code&gt;100% == LW&lt;/code&gt;. That means that the width of &lt;code&gt;.container::before&lt;/code&gt; is equal to &lt;code&gt;0px&lt;/code&gt; (and results in this floated element becoming disabled).&lt;/p&gt;

&lt;p&gt;For the other floating elements, we clamp the width:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;clamp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--lw&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;)*&lt;/span&gt;&lt;span class="err"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--mh&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--s&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚Ä¶where the middle value &lt;code&gt;((100% - LW + 1px)*1000)&lt;/code&gt; is equal to &lt;code&gt;(0 + 1px)*1000 = 1000px&lt;/code&gt; (an intentionally large, but arbitrary value). It gets clamped to &lt;code&gt;calc(50% - var(--mh) - var(--s)/2)&lt;/code&gt;. In other words, these floated elements are enabled with the correct width (the one we defined previously)&lt;/p&gt;

&lt;p&gt;Voil√†! we have a pyramidal shape on large screen.&lt;/p&gt;

&lt;p&gt;Now, when the container width get smaller, &lt;code&gt;LW&lt;/code&gt; is going to be greater than &lt;code&gt;100%&lt;/code&gt;. So, &lt;code&gt;(LW - 100%)&lt;/code&gt; will be positive. Multiplied by a big value, it's clamped to &lt;code&gt;calc(var(--s)/2 + var(--mh))&lt;/code&gt;, which enables the first floated element. For the other float elements, &lt;code&gt;(100% - LW + 1px)&lt;/code&gt; resolves to a negative value and is clamped to &lt;code&gt;0px&lt;/code&gt;, which disables the float elements.&lt;/p&gt;

&lt;p&gt;Resize the below demo and see how we switch between both grids&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/zYZEXRp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's try adding more elements:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/zYZEXaR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;See that? Things are scaling perfectly. We can also combine this with the CSS grid alignment trick we used earlier:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/WNpZWaG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Do you think ‚Äúfloat‚Äù is such a bad thing now?&lt;/p&gt;

&lt;p&gt;Want invert the pyramid?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1x3i9f0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1620991346257_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1x3i9f0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1620991346257_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like illustrated with the above figure, two changes to the previous code can invert our pyramid:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I change the direction of the gradient from &lt;code&gt;to bottom left|right&lt;/code&gt; to &lt;code&gt;to top left|right&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;I add a &lt;code&gt;margin-top&lt;/code&gt; equal to the height of one row.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWpEdJG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And, hey, we can swap between both pyramid easily:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/bGqoyrr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Isn't this beautiful? We have a responsive pyramidal grid with custom shapes that we can easily invert and that fallback to another responsive grid on small screen while everything is perfectly centred. All this without a single media query or JavaScript, but instead using the often overlooked float property.&lt;/p&gt;

&lt;p&gt;You will probably notice some missalignment in some particular cases. Yes, it's again some rounding issue related to the calculation we are doing and the fact that we are trying to make this generic with the interactive demos. To rectify this, we simply adjust few values manually (epsecially the percentage of the gradient) until we get back a perfect alignment.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-a-float-wrap"&gt;
  &lt;/a&gt;
  That's a &lt;del&gt;float&lt;/del&gt; wrap!
&lt;/h2&gt;

&lt;p&gt;There we have it: combining &lt;code&gt;float&lt;/code&gt; with &lt;code&gt;shape-outside&lt;/code&gt; can help us make complex, flexible and responsive layouts‚Äâ‚Äî‚Äâlong live float!&lt;/p&gt;

&lt;p&gt;The article ends here but this is only the beginning. I provided you with the layout and now you can easily put any content inside the divs, apply a background, shadows, animations, etc.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/mdWBYqE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Advanced TypeScript: A Generic Function to Update and Manipulate Object Arrays</title>
      <author>Chris Frewin</author>
      <pubDate>Wed, 09 Jun 2021 13:20:47 +0000</pubDate>
      <link>https://dev.to/fullstackchris/advanced-typescript-a-generic-function-to-update-and-manipulate-object-arrays-1efb</link>
      <guid>https://dev.to/fullstackchris/advanced-typescript-a-generic-function-to-update-and-manipulate-object-arrays-1efb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#always-pushing-for-cleaner-code"&gt;
  &lt;/a&gt;
  Always Pushing for Cleaner Code
&lt;/h2&gt;

&lt;p&gt;While building my newest SaaS product, &lt;a href="https://reduxplate.com"&gt;ReduxPlate&lt;/a&gt;, I realized a common pattern kept cropping up in my array manipulation functions. I was always updating a specific value at a specific key, based on a specific test on some &lt;em&gt;other&lt;/em&gt; key.&lt;br&gt;
&lt;br&gt;
&lt;em&gt;*Plug: Speaking of &lt;a href="https://reduxplate.com"&gt;ReduxPlate&lt;/a&gt;, which automatically generates Redux code for you, &lt;a href="https://chrisfrew.in/book"&gt;I'm writing a book that documents every step I took along the way to build ReduxPlate&lt;/a&gt;,‚Ääfrom boilerplate starters to the finished live product. I'd love it if you check it out! Yes, You've read this correctly! I literally build ReduxPlate from start to finish, right before your eyes‚Ää-‚Ääand the code is all public!&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;For example, for the editor widget on the &lt;a href="https://reduxplate.com"&gt;ReduxPlate homepage&lt;/a&gt;, I use a stateful array of type IEditorSettings to determine which editor is currently active and what the actual code value is in the editor:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IEditorSetting&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;fileLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Such behavior required me to write two event handlers: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;onChangeCode&lt;/code&gt; for when the code changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setEditorSettingsState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editorSettingsState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editorSetting&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editorSetting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;editorSetting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;editorSetting&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;code&gt;onChangeTab&lt;/code&gt; for when the editor tab changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeTab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setEditorSettingsState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editorSettingsState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editorSetting&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;editorSetting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;editorSetting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileLabel&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;fileLabel&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;editorSetting&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Examine these two functions closely. With both, I am mapping over a state variable &lt;code&gt;editorSettingsState&lt;/code&gt; and setting a property in the array according to some test condition. In the &lt;code&gt;onChangeCode&lt;/code&gt;, the test condition is if the &lt;code&gt;isActive&lt;/code&gt; property value is true. In &lt;code&gt;onChangeTab&lt;/code&gt;, the test condition is if &lt;code&gt;fileLabel&lt;/code&gt; property value matches the &lt;code&gt;fileLabel&lt;/code&gt; passed in. As opposed to &lt;code&gt;onChangeCode&lt;/code&gt;, &lt;code&gt;onChangeTab&lt;/code&gt; will set the &lt;code&gt;isActive&lt;/code&gt; value for &lt;em&gt;all&lt;/em&gt; items in the array.&lt;/p&gt;

&lt;p&gt;With a bit of effort, we should be able to implement a generic function that we can use to replace these functions, and more importantly: reuse throughout our applications anywhere we need the same type of functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rewriting-both-functions-for-a-better-overview-of-their-structure"&gt;
  &lt;/a&gt;
  Rewriting Both Functions for a Better Overview of Their Structure
&lt;/h2&gt;

&lt;p&gt;To get a better idea of the function we will write, let's expand the two functions with an &lt;code&gt;else&lt;/code&gt; statement, while keeping their functionalities exactly the same. &lt;/p&gt;

&lt;p&gt;For &lt;code&gt;onChangeCode&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setEditorSettingsState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editorSettingsState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editorSetting&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editorSetting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isActive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;editorSetting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// do nothing :)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;editorSetting&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and for &lt;code&gt;onChangeTab&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeTab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setEditorSettingsState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editorSettingsState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editorSetting&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;editorSetting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fileLabel&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;fileLabel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;editorSetting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;editorSetting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;editorSetting&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this form, it's clear that our generic function should have some sort of test criteria, which will live in the &lt;code&gt;if&lt;/code&gt; statement. Then we need the key and value of the property which is to be updated in the array if the test criteria passes. Furthermore, what occurs in the &lt;code&gt;else&lt;/code&gt; block should be optional - that is, there should be an optional way to set a default value if the test fails. Really what this means is that this will become an &lt;code&gt;else if&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;The body of our new generic function would then take on the same type of form as these two expanded functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;testKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;testValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;updateKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;updateValue&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testFailValue&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;updateKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;testFailValue&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll need to provide a &lt;code&gt;testKey&lt;/code&gt; and value as our test criteria, as well as an &lt;code&gt;updateKey&lt;/code&gt; and &lt;code&gt;updateValue&lt;/code&gt; if the test passes. Finally, an optional parameter will be &lt;code&gt;testFailValue&lt;/code&gt;. If &lt;code&gt;testFailValue&lt;/code&gt; is not &lt;code&gt;undefined&lt;/code&gt;, then we will execute the &lt;code&gt;else if&lt;/code&gt; block.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typing-the-function"&gt;
  &lt;/a&gt;
  Typing the Function
&lt;/h2&gt;

&lt;p&gt;The most challenging part of writing this function was ensuring that the value passed for &lt;code&gt;testValue&lt;/code&gt; matches the expected type of &lt;code&gt;T[testKey]&lt;/code&gt;. The same should be true for &lt;code&gt;updateValue&lt;/code&gt; /  &lt;code&gt;testFailValue&lt;/code&gt; with &lt;code&gt;T[updateKey]&lt;/code&gt;. With TypeScript, it &lt;em&gt;is&lt;/em&gt; possible to do this, though we'll need to explicitly provide a bit of information in the calling signature in order to enforce it. Our &lt;code&gt;array&lt;/code&gt; in question is of type &lt;code&gt;Array&amp;lt;T&amp;gt;&lt;/code&gt;, that much is clear. But what about the types for &lt;code&gt;testKey&lt;/code&gt; and &lt;code&gt;updateKey&lt;/code&gt;? We'll need to introduce two more generic types to get those to work, &lt;code&gt;U&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt;. To ensure that both &lt;code&gt;testKey&lt;/code&gt; and &lt;code&gt;updateKey&lt;/code&gt; are actual keys of object &lt;code&gt;T&lt;/code&gt;, we'll employ TypeScripts's &lt;code&gt;extends&lt;/code&gt; keyword, i.e. defining &lt;code&gt;U&lt;/code&gt; as &lt;code&gt;U extends keyof T&lt;/code&gt;, and &lt;code&gt;V&lt;/code&gt; as &lt;code&gt;V extends keyof T&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;With types &lt;code&gt;U&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; defined, &lt;code&gt;testKey&lt;/code&gt; and &lt;code&gt;updateKey&lt;/code&gt; can be defined by &lt;code&gt;keyof T&lt;/code&gt;, as well as their corresponding values: &lt;code&gt;testValue&lt;/code&gt; as &lt;code&gt;T[U]&lt;/code&gt;, and &lt;code&gt;updateValue&lt;/code&gt; as &lt;code&gt;T[V]&lt;/code&gt;. &lt;code&gt;testFailValue&lt;/code&gt; follows &lt;code&gt;updateValue&lt;/code&gt; with the identical type &lt;code&gt;T[V]&lt;/code&gt;. Finally, since this is an array function &lt;code&gt;map&lt;/code&gt;, we'll be returning a fresh array of type &lt;code&gt;T&lt;/code&gt;. Because this signature is rather complex, I add them all to a &lt;code&gt;param&lt;/code&gt; object so that when we call this &lt;code&gt;updateArray&lt;/code&gt; function, it will be easy to read and understand. Such a structure also makes it easier to extend and add additional parameters later.&lt;/p&gt;

&lt;p&gt;So, we have our function signature:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;U&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;V&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;testKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;
  &lt;span class="nx"&gt;testValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;U&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;updateKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;
  &lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;testFailValue&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-result"&gt;
  &lt;/a&gt;
  Final Result
&lt;/h2&gt;

&lt;p&gt;Hooking in the &lt;code&gt;map&lt;/code&gt; logic from above, the full &lt;code&gt;updateArray&lt;/code&gt; function in full is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Updates an object array at the specified update key with the update value,&lt;/span&gt;
&lt;span class="c1"&gt;// if the specified test key matches the test value.&lt;/span&gt;
&lt;span class="c1"&gt;// Optionally pass 'testFailValue' to set a default value if the test fails.&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;U&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;V&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;testKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;
  &lt;span class="nx"&gt;testValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;U&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;updateKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;
  &lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;testFailValue&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}):&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;testKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;testValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;updateKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;testFailValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;testKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;testValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;updateKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;updateValue&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;testFailValue&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;updateKey&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;testFailValue&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A possible improvement to add to this function might be to differentiate between the &lt;code&gt;updateKey&lt;/code&gt; on success and on fail. Perhaps in some rare case you would want to set the value of some other key if the test fails.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-it"&gt;
  &lt;/a&gt;
  Use It!
&lt;/h2&gt;

&lt;p&gt;Let's return to our original functions and refactor them to use our fancy generic function &lt;code&gt;updateArray&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Referring to &lt;code&gt;IEditorSetting&lt;/code&gt; above may be helpful (recall that &lt;code&gt;editorSettingsState&lt;/code&gt; is an array of &lt;code&gt;IEditorSetting&lt;/code&gt;). Here's the refactored &lt;code&gt;onChangeCode&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setEditorSettingsState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateArray&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;editorSettingsState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;testKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isActive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;testValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;updateKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;code&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;code&gt;onChangeTab&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onChangeTab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setEditorSettingsState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateArray&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;array&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;editorSettingsState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;testKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fileLabel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;testValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;fileLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;updateKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isActive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;updateValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;testFailValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to our &lt;code&gt;U extends keyof T&lt;/code&gt; and &lt;code&gt;U extends keyof T&lt;/code&gt;, our function is type safe: for example, TypeScript won't allow passing a string like &lt;code&gt;"hello world"&lt;/code&gt; to &lt;code&gt;updateValue&lt;/code&gt;, since the expected type for the &lt;code&gt;IEditorSetting&lt;/code&gt; on the &lt;code&gt;isActive&lt;/code&gt; key is &lt;code&gt;boolean&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Congratulations, we're done!&lt;/p&gt;

&lt;p&gt;You may also want to check this snippet out on my &lt;a href="https://chrisfrew.in/snippets"&gt;Full Stack Snippets page&lt;/a&gt;, which has further additional snippet goods like this function!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#verbosity-vs-reusability-and-readability"&gt;
  &lt;/a&gt;
  Verbosity vs. Reusability and Readability
&lt;/h2&gt;

&lt;p&gt;Indeed, calling &lt;code&gt;updateArray&lt;/code&gt; is rather verbose. However, this is a small price to pay when you consider that we no longer have to think about crafting all those pesky &lt;code&gt;map&lt;/code&gt; manipulations throughout our apps!&lt;/p&gt;

&lt;p&gt;Is this an over-optimization? I don't think so - take a look at your own projects using either React or Redux, or both. I guarantee you have the same times of array mapping and manipulations, either in your state changes or render functions!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks!
&lt;/h2&gt;

&lt;p&gt;With this powerful generic function, you should never need to think about &lt;code&gt;map&lt;/code&gt; array manipulations at a property level ever again! Additionally, the strongly typed signature also protects you from passing either a &lt;code&gt;testValue&lt;/code&gt; or &lt;code&gt;updateValue&lt;/code&gt; that doesn't correspond with its respective key's expected type!&lt;/p&gt;

&lt;p&gt;Cheers! üç∫&lt;/p&gt;

&lt;p&gt;-Chris&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>generics</category>
      <category>javascript</category>
      <category>redux</category>
    </item>
    <item>
      <title>Raku malware analysis</title>
      <author>Paula</author>
      <pubDate>Wed, 09 Jun 2021 13:02:19 +0000</pubDate>
      <link>https://dev.to/terceranexus6/raku-malware-analysis-jon</link>
      <guid>https://dev.to/terceranexus6/raku-malware-analysis-jon</guid>
      <description>&lt;p&gt;Not long ago I &lt;a href="https://dev.to/terceranexus6/yara-for-daily-analysis-1o8"&gt;explained how to do a simple malware analysis using Yara tool&lt;/a&gt;. Yara is nice, mostly because is the common query in most public resources of discovered malware. Although, I wondered about the limits of the rules, and how to look for regex conditionals as I would do in other TTP (Tactics, Techniques and Procedures) &lt;strong&gt;queries&lt;/strong&gt;. Also I wondered if it might be more convenient for a light environment such as my manjaro RPI for malware analysis. SO anyway let's explore about Raku possibilities for this topic. First of all, Raku was created by some Perl enthusiasts, one of them (the one who also taught me about it) has a &lt;a href="https://dev.to/jj"&gt;blog here too&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;It's interesting because it keeps the ideal of making a language accessible but doesn't quite forget about the flexibility. One of the things that got me at first about it was the grammar options. Grammar let's you parse information, which is very useful for website back-end stuff (check it out!). But now, grammar has something called "rules" that lets you regex stuff in order to fit in a description.  &lt;/p&gt;

&lt;p&gt;But rules can be used apart from the Grammar, and that's the main point of the script I'm wondering about. Variable declarations look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my @string = 'this is a string';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we also have tokens, that allows yo to use rules...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my @string = 'this is a string';
my token somestuff {@string 'other string as well'}
my rule example {&amp;lt;token&amp;gt;.*}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So as you can see we can kind of manipulate a token to be some kind of object to work with, and rules to be applied on those tokens. Rules can be False or True, so we can check them like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my token hey {'how''are''you'}
my rule match {&amp;lt;hey&amp;gt;*}

say so 'how are you' ~~ &amp;amp;match; #OUTPUT: TRUE

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case &lt;code&gt;say so&lt;/code&gt; will let us check the value of the rule &lt;code&gt;match&lt;/code&gt;. Now let's think of our particular case: We need genes (usually strings) that might be related to malware of malicious executables in general, some virus may share genes, and we would like to know this information from a given binary file. So! My approach:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# configuring the genes and the virus (some virus share genes)

my token gene {'this is a malware gene'}
my rule virusx {&amp;lt;gene&amp;gt;.*}

# reading the sample line by line from a binary file

for '/script/mysample'.IO.lines -&amp;gt; $line {
        # If the line contains the gene, print it
    if $line ~~ &amp;amp;virusx {say "Genes from virus X were found: "; say $line; }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the simplest example but in the rule virus several genes could be mixed, and you can create as much rules as virus you want to check. Also the regex used for the rules are standard, which is convenient. &lt;/p&gt;

&lt;p&gt;A &lt;code&gt;strace&lt;/code&gt; benchmark of a bash script launching yara and a bash script launching the raku script with docker revealed that the time difference is so small is not worth mentioning itself, but the methodology could be interesting to explore. In the end Yara is very popular and useful, but this way could be awesome for easy API implementations (Raku is well known for back-end, as I said previously) and more flexible due to the rules being less limited. &lt;/p&gt;

</description>
      <category>raku</category>
      <category>security</category>
    </item>
    <item>
      <title>Software Development Myths</title>
      <author>Krowser Web Services </author>
      <pubDate>Wed, 09 Jun 2021 12:59:05 +0000</pubDate>
      <link>https://dev.to/krowser/software-development-myths-331m</link>
      <guid>https://dev.to/krowser/software-development-myths-331m</guid>
      <description>&lt;p&gt;Myths have accompanied man since ancient times and still exist in our high-tech world. So despite the fact software development is a fairly formal science, this does not prevent the existence of many myths and misconceptions in this industry. In this article, we will discuss just some of them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth#1. One programming language is better than others&lt;/strong&gt;&lt;br&gt;
Programmers love to praise the language in which they program. You can often hear that some language is better than others. But the truth is that each language serves a specific purpose, and one cannot say for sure that one language is better than another. It‚Äôs like asking which language is better: Italian or French? Surely, it depends on the country in which you are located. On this basis, the benefit of a specific programming language can only be determined within a specific task. And often tasks require knowledge of several languages. Therefore, languages ‚Äã‚Äãwork together, not against each other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth#2. More people are better&lt;/strong&gt;&lt;br&gt;
So if we fail in the planning, we can add more programmers to the team and advance the lost time. This situation sometimes called as ‚Äúconcept of the Mongolian horde‚Äù. In fact, software development is not a mechanical process like manufacturing. So usually adding people to a delayed software project delays it even more. At first, this statement may seem counterintuitive. However, when new people are added, it is needed to learn them and to spend time communicating with the team. So this amount of time cannot be spent on product development. People can be added, but only in a planned and well-coordinated manner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth#3. Programmers can only write code.&lt;/strong&gt;&lt;br&gt;
The creators of such myths about programming are undoubtedly very far from this sphere and do not know how the development process takes place. Usually, the problems solved by computer programs go far beyond the field of information technology. For example, let‚Äôs take the tools for accounting. In order to create a quality product, the programmer should, in general, understand this subject area.&lt;br&gt;
The ideal is the option of cooperation of a professional accountant who knows what he wants and a coder who understands programming and knows how to explain to a machine what to do. However, an accountant in most cases is too far from computer science and is simply unable to explain in detail what he expects from the product. So, the programmer has to go into economic concepts and schemes on his own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth#4. Faster is better&lt;/strong&gt;&lt;br&gt;
Yes, there are projects that can be easily and quickly implemented through the designer and a set of custom solutions from the company‚Äôs experience. But these projects, as a rule, close a very narrow target audience and will not bring a high income to the owners of this product. All serious engineering solutions are often not only developed over several years but also require support and have been developed over the years. For example, the history of the creation of the Microsoft Office package. When the task was assigned to it, the implementation period was estimated at 3 months. As a result, the project itself took 6 years.&lt;br&gt;
As a result of this myth, there is an opinion that programmers work around the clock. However, trawls, processing and other ‚Äî they do not bring anything good. Developer productivity drops dramatically if they are forced to work long hours. And it falls so much that in ten hours they begin to do as much as they used to do in six. Therefore, many companies are convinced that programmers cannot work more than six hours a day. After all, both the speed and quality of work are sharply reduced further, which is much worse.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth#5. Sticking to the plan is a must&lt;/strong&gt;&lt;br&gt;
It is indisputable, that software development is a set of complex actions that require coordination and attention to detail. So planning is surely is a must. In the early stages of development, it is very important to dive deep into the details, think over the functionality in detail and carefully study the technical task. But not always everything goes according to plan. It is really hard to meet a project, the requirements for which have remained constant throughout the development. For manufacturing processes with frequent repetition of steps, this is a good approach to track every step ‚Äî but it is not suitable for innovation in development. New insights can come daily, and conditions can change constantly. So plans should be considered as initial hypotheses that are constantly being revised.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth#6. Nothing is impossible&lt;/strong&gt;&lt;br&gt;
The widespread myth ‚Äúnothing is impossible‚Äù became one of the foundations for this myth. The fact is that, at the mention of IT, there are rarely any limitations and ‚Äúinconvenient‚Äù conditions. For example, if you look at the interface of any search engine from the perspective of an ordinary person, you will not see any difficulties. A set of small phrases and small pictures. However, this is all worth much more than it might seem. Everything has its limitations, even IT sphere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth#7. Success from the first trial&lt;/strong&gt;&lt;br&gt;
Experiments with different ideas are an indispensable part of the innovation process. When you experiment often and quickly, of course, you will have to accept the failure of many ideas. But it allows teams to quickly cast away bad decisions and concentrate on more promising ones.&lt;br&gt;
Success from the first time sends teams to the territory of less risky decisions ‚Äî even if customers do not consider them to be a significant improvement over what they were before. Teams do not receive an incentive to develop innovative solutions to user problems.&lt;/p&gt;

&lt;p&gt;The above are only the most popular myths, but besides them, there are many others. All of them in some way create a culture of IT-sphere. Developers, like all other professionals, have their own traditions and customs, sometimes even very funny, but this is another story.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>python</category>
    </item>
  </channel>
</rss>
