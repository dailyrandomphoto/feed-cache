<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How do I disable GoLang's auto-formatting on file save in VSCode?</title>
      <author>Calin Baenen</author>
      <pubDate>Thu, 13 May 2021 19:19:40 +0000</pubDate>
      <link>https://dev.to/baenencalin/how-do-i-disable-the-golang-s-auto-formatting-on-file-save-in-vscode-1nh</link>
      <guid>https://dev.to/baenencalin/how-do-i-disable-the-golang-s-auto-formatting-on-file-save-in-vscode-1nh</guid>
      <description>&lt;p&gt;I'm new to Go, and trying to make something using it, however, each time I press the save button (or use the shortcut &lt;code&gt;Ctrl&lt;/code&gt;+&lt;code&gt;S&lt;/code&gt;) (so basically, whenever I save the file &lt;b&gt;MANUALLY&lt;/b&gt;).&lt;/p&gt;

&lt;p&gt;Though, the strange thing is, I have autosave turned on in VSCode, and the file will save after like a second or two, and whenever VSC saves the file, it doesn't get formatted (contrast to when I try to save it myself (as I've just stated)).&lt;br&gt;
There are the GoLang related settings in VSCode's &lt;code&gt;settings.json&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"go.lintOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"[go]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"go.languageServerExperimentalFeatures"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"format"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;Property&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"format"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;allowed.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can someone please tell me what I'm doing wrong? I looked at &lt;a href="https://github.com/microsoft/vscode-go/issues/2902"&gt;this&lt;/a&gt; and even looked at what Go themselves had to say on their &lt;a href="https://code.visualstudio.com/docs/languages/go#_formatting"&gt;VSCode extension page&lt;/a&gt;, but neither of these are helping.&lt;/p&gt;

&lt;p&gt;Thanks a lot in advance!&lt;br&gt;
Cheers!&lt;/p&gt;

</description>
      <category>go</category>
      <category>beginners</category>
      <category>vscode</category>
      <category>help</category>
    </item>
    <item>
      <title>If you had a time machine what is ONE thing you would tell yourself when you started coding?</title>
      <author>Fum</author>
      <pubDate>Thu, 13 May 2021 18:55:55 +0000</pubDate>
      <link>https://dev.to/inspirezone/if-you-had-a-time-machine-what-is-one-thing-you-would-tell-yourself-when-you-started-coding-2jn2</link>
      <guid>https://dev.to/inspirezone/if-you-had-a-time-machine-what-is-one-thing-you-would-tell-yourself-when-you-started-coding-2jn2</guid>
      <description>&lt;p&gt;I would probably tell myself to look up what imposter syndrome is so I can be relieved from all my doubts... Only discovered it was a real thing years into my career.&lt;/p&gt;

&lt;p&gt;What about you? I’m very curious to know!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>career</category>
      <category>beginners</category>
      <category>reflect</category>
    </item>
    <item>
      <title>3 Steps Protocol to boost your Learning Speed and Memory</title>
      <author>Patryk Jeziorowski</author>
      <pubDate>Thu, 13 May 2021 18:51:20 +0000</pubDate>
      <link>https://dev.to/pjeziorowski/3-steps-protocol-to-boost-your-learning-speed-and-memory-29dn</link>
      <guid>https://dev.to/pjeziorowski/3-steps-protocol-to-boost-your-learning-speed-and-memory-29dn</guid>
      <description>&lt;p&gt;In this post, I'll show you how you can use hormones that are naturally produced in your body (cortisol and epinephrine, a.k.a adrenaline) to help you learn faster, improve your memory and increase your overall performance.&lt;/p&gt;

&lt;p&gt;If you don't have the time to read the whole article, I'll give you the three steps protocol to follow to get all the benefits. I strongly recommend reading the entire article to understand better the science behind which will allow you to implement it in your life more easily and adjust to your needs if needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-steps-formula-to-improve-your-learning-and-performance"&gt;
  &lt;/a&gt;
  3 Steps Formula to improve your learning and performance
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Start the session with 90 minutes of deep focus learning or work (expect distractions in the first ~10 minutes, as well as at the end of the session)&lt;/li&gt;
&lt;li&gt;Increase adrenaline in your body using the Wim Hof breathing or any other breathing method&lt;/li&gt;
&lt;li&gt;Go into a non-sleep deep rest state (e.g. meditation, or something equally relaxing) for about 10-20 minutes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Additionally, make sure at the end of the day, your sleep is high quality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-magic-science-behind"&gt;
  &lt;/a&gt;
  The magic (science) behind
&lt;/h2&gt;

&lt;p&gt;Many of you may know those hormones (cortisol and adrenaline/epinephrine) as something terrible, released when you are stressed, in a fight-or-flight mode. It's true, partially. I would like you to think about those hormones as hormones of alertness, activation, energy, though.&lt;/p&gt;

&lt;p&gt;In fact, cortisol and epinephrine are vital to your health. They are helping you boost your immune system, be alert and ready to act, boost energy levels, and have many other positive effects, including better learning performance.&lt;br&gt;
Cortisol is vital. You shouldn't call it a stress hormone. It makes you more alert and ready to take action, which is often perceived as anxiety if it raises too high levels. &lt;/p&gt;

&lt;p&gt;Cortisol can be more thought of as a hormone of energy. It makes you want to act, increases your heartbeat, makes you alert and turns off some non-vital processes like digestion.&lt;/p&gt;

&lt;p&gt;In general, cortisol can be a good tool if released at the right time, for the right amount of time, and in the correct dose - the same goes for adrenaline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pubmed.ncbi.nlm.nih.gov/19555723/"&gt;Research says a sharp increase in cortisol and adrenaline leads to better learning and performance&lt;/a&gt;. Epinephrine is actually your best friend when it comes down to learning and remembering. &lt;/p&gt;

&lt;p&gt;It does so because it's usually released before extreme situations, e.g. you'll easily remember every detail of what happened before a car accident, and you'll remember it for a long time. I still remember how I crashed my uncle's car... It's all about how much, when and for how long you release cortisol and epinephrine.&lt;/p&gt;

&lt;p&gt;This is why increasing your adrenaline levels after a learning session may help you learn faster, and remember more. This is something deeply ingrained in human evolution. The same way a child learns not to touch a hot stove, you learn whatever you want to learn, as long as you get the adrenaline boost right after you stopped learning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-those-hormones-are-harmful"&gt;
  &lt;/a&gt;
  When those hormones are harmful?
&lt;/h2&gt;

&lt;p&gt;They are harmful when being in a stress state is chronic and not controlled. You can not stay in this highly alert state for long. If you are stressed for more than a day you can consider it harmful.&lt;/p&gt;

&lt;p&gt;Also, remember that you want those shots of hormones right AFTER the learning session, not while learning!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-control-it-when-its-chronic"&gt;
  &lt;/a&gt;
  How to control it when it's chronic?
&lt;/h2&gt;

&lt;p&gt;Many methods may help you reduce cortisol levels in your body, but it's a topic for another article. Among those, you may find things like... meditation, breathing, deep rest, and all of the well-known relaxation methods.&lt;/p&gt;

&lt;p&gt;Avoid fasting, high-intensity training, cold showers as they all tend to increase cortisol and adrenaline levels in your body. Try to sleep well. Take care of yourself first. The basics are the most important!&lt;/p&gt;

&lt;p&gt;However, if you do everything well, take care of all the basics but still struggle, you can look at supplements like &lt;a href="https://examine.com/supplements/ashwagandha/"&gt;Ashwagandha&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'll cover the topic of dealing with chronic high levels of cortisol in your body in one of the next articles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-words"&gt;
  &lt;/a&gt;
  Last words
&lt;/h2&gt;

&lt;p&gt;To summarize - the so-called stress hormone and adrenaline are not your enemies. They are vital for your well being &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4034215/"&gt;and immune system&lt;/a&gt;. Use them as tools, take the control and get benefits in your learning and performance.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>biohacking</category>
      <category>learning</category>
      <category>health</category>
    </item>
    <item>
      <title>TIL - HTML Lazy Load</title>
      <author>James Cox</author>
      <pubDate>Thu, 13 May 2021 18:47:33 +0000</pubDate>
      <link>https://dev.to/jamesncox/til-html-lazy-load-1m6c</link>
      <guid>https://dev.to/jamesncox/til-html-lazy-load-1m6c</guid>
      <description>&lt;h1&gt;
  &lt;a href="#til"&gt;
  &lt;/a&gt;
  #TIL
&lt;/h1&gt;

&lt;p&gt;Today I learned about &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading"&gt;HTML's lazy loading&lt;/a&gt; property. Once again, HTML provides us another simple solution for a once-difficult problem.&lt;/p&gt;

&lt;p&gt;So what is "lazy loading"?&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://www.sitepoint.com/five-techniques-lazy-load-images-website-performance/"&gt;this sitepoint article&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lazy loading images means loading images on websites asynchronously — that is, after the above-the-fold content is fully loaded, or even conditionally, only when they appear in the browser’s viewport. This means that if users don’t scroll all the way down, images placed at the bottom of the page won’t even be loaded.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why-should-we-care"&gt;
  &lt;/a&gt;
  Why Should We Care?
&lt;/h2&gt;

&lt;p&gt;Let's say you visit a site like &lt;a href="https://unsplash.com/"&gt;https://unsplash.com/&lt;/a&gt;. They host zillions of high-quality photos, that require a decent amount of resources to load. Without the ability to load them as you need them, you would be saddled with WAY MORE data-usage than you likely would need or want!&lt;/p&gt;

&lt;p&gt;In the past, you had a few options to load images on demand, but none of them were intuitive or developer-friendly. Enter the HTML &lt;code&gt;loading="lazy"&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lazy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. 14 characters is all the code required to achieve image-on-demand functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-effect-in-action"&gt;
  &lt;/a&gt;
  The Effect in Action!
&lt;/h2&gt;

&lt;p&gt;I created both a CodeSandbox and an small app hosted on vercel, &lt;a href="https://html-load-lazy.vercel.app/"&gt;https://html-load-lazy.vercel.app/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/pbsro"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;In my &lt;a href="https://pbsro.csb.app/"&gt;CodeSandbox&lt;/a&gt; I fetch to the &lt;a href="https://imgflip.com/api"&gt;Imgflip API&lt;/a&gt;, which gives us their 100 current most popular memes. The embedded CodeSandbox here actually shows the lazy loading behaviour really well! Press the &lt;code&gt;Get Memes&lt;/code&gt; button, and start scrolling down. You will notice that images near the bottom, coming into view, appear to blink. That's the website loading each image on demand!&lt;/p&gt;

&lt;p&gt;For whatever reason, it doesn't work as well in full-browser mode. Well, it does work. However, potentially without the visual cue each image is loading, like you do here with the embed. Possibly because the images are all cached from testing the API already.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;temporaryValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;randomIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;randomIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;temporaryValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temporaryValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;memes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMemes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.imgflip.com/get_memes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getMemes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BASE_URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memeData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;setMemes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;memeData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed to load memes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clearPhotos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setMemes&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shuffledMemes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;memes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;HTML&lt;/span&gt; &lt;span class="nx"&gt;Lazy&lt;/span&gt; &lt;span class="nx"&gt;Loading&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn-wrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getMemes&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="nx"&gt;Memes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clearPhotos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Clear&lt;/span&gt; &lt;span class="nx"&gt;Photos&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;memes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;shuffledMemes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;meme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lazy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I fetch to the API, store the array of images in state, &lt;code&gt;setMemes(memeData.data.memes)&lt;/code&gt;. I decided to shuffle them with the &lt;code&gt;shuffle()&lt;/code&gt; function at the top of our &lt;code&gt;App.js&lt;/code&gt; component, and map through the &lt;code&gt;shuffledMemes&lt;/code&gt; to render both the name of the meme and its corresponding image!&lt;/p&gt;

&lt;p&gt;Thanks, HTML, once again you've solved a difficult problem with such poise and elegance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-code"&gt;
  &lt;/a&gt;
  Bonus Code
&lt;/h2&gt;

&lt;p&gt;As mentioned above, I hosted a small app on Vercel, &lt;a href="https://html-load-lazy.vercel.app/"&gt;https://html-load-lazy.vercel.app/&lt;/a&gt; in which I fetch to both Imgflip and the &lt;a href="https://unsplash.com/developers"&gt;Unsplash API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the full &lt;code&gt;App.js&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;temporaryValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;randomIndex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;randomIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;currentIndex&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;temporaryValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;currentIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomIndex&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;randomIndex&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;temporaryValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;REACT_APP_ACCESS_KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;memes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setMemes&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;photos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setPhotos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MEME_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.imgflip.com/get_memes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UNSPLASH_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.unsplash.com/photos/?client_id=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ACCESS_KEY&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getMemes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MEME_URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memeData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;setMemes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;memeData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;memes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setPhotos&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed to load memes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getPhotos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;UNSPLASH_URL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;photoData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;setPhotos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;photoData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;setMemes&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Failed to load memes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clearPhotos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setMemes&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
    &lt;span class="nx"&gt;setPhotos&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shuffledMemes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;memes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shuffledPhotos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;photos&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;HTML&lt;/span&gt; &lt;span class="nx"&gt;LAZY&lt;/span&gt; &lt;span class="nx"&gt;LOADING&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn-wrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getMemes&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="nx"&gt;Memes&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;getPhotos&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt; &lt;span class="nx"&gt;Photos&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;clearPhotos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Clear&lt;/span&gt; &lt;span class="nx"&gt;Photos&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;memes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;shuffledMemes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;meme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meme&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lazy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;shuffledPhotos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="nx"&gt;photos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;photo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;photo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt;
              &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;unsplash-img&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;photo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;regular&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;photo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alt_description&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lazy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you learned something new today! I certainly did. Also, I hope this inspires you to dig more into HTML, a seriously underrated programming language (yes I went there 😈😈😈), that provides us developers with a TON of awesome functionality.&lt;/p&gt;

&lt;p&gt;As always, let me know in the comments if you have any questions, concerns, corrections, compliments... you get it. &lt;/p&gt;

&lt;p&gt;Thanks for reading and I look forward to sharing my next #TIL post with you!&lt;/p&gt;

</description>
      <category>html</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>react</category>
    </item>
    <item>
      <title>Apple’s AirTag Security Concerns, a Deep Neural Network Hack, &amp; more on DevNews!</title>
      <author>Josh Puetz</author>
      <pubDate>Thu, 13 May 2021 18:37:33 +0000</pubDate>
      <link>https://dev.to/devteam/apple-s-airtag-security-concerns-a-deep-neural-network-hack-more-on-devnews-30gm</link>
      <guid>https://dev.to/devteam/apple-s-airtag-security-concerns-a-deep-neural-network-hack-more-on-devnews-30gm</guid>
      <description>&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 and I are back for another episode of hot tech takes and developer news demystification...&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s4-e5-apple-s-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S4:E5 - Apple’s AirTag Security Concerns, a Deep Neural Network Hack, an Oil Pipeline Cyber Attack, and a Shortage of Semiconductors&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s4-e5-apple-s-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s4-e5-apple-s-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s4-e5-apple-s-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s4-e5-apple-s-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s4-e5-apple-s-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s4-e5-apple-s-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors"&gt;
      &lt;img id="episode-profile-image" alt="S4:E5 - Apple’s AirTag Security Concerns, a Deep Neural Network Hack, an Oil Pipeline Cyber Attack, and a Shortage of Semiconductors" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#in-this-episode-we-cover"&gt;
  &lt;/a&gt;
  &lt;strong&gt;In this episode, we cover...&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Apple’s AirTag security concerns (the anti-stalking features you've heard about might not be cutting it)&lt;/li&gt;
&lt;li&gt;A US oil pipeline cyberattack and shutdown (ransomware attacks affect all industries, unfortunately) &lt;/li&gt;
&lt;li&gt;A shortage in semiconductors (semiconductors, MEGA short supplies)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also chatted with &lt;a href="//twitter.com/sanghyun_hong"&gt;Sanghyun Hong&lt;/a&gt; and &lt;a href="//twitter.com/yigitcankaya1"&gt;Yigitcan Kaya&lt;/a&gt; — Ph.D. students in Computer Science at the University of Maryland College Park, and co-authors of a research paper about how hackers could make AI networks consume much more energy than they already do.&lt;/p&gt;

&lt;p&gt;Thanks for tuning in!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s4-e5-apples-airtag-security-concerns-deep-neural-network/id1525581923?i=1000521592596"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/7s3kj5xtQmio9EIHigaADW"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzI5?sa=X&amp;amp;ved=0CAQQkfYCahcKEwiwrbzHo8fwAhUAAAAAHQAAAAAQCA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s4-e5-apples-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors-83928383"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews-dev-fH8hvsClkWp/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=163027033"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.dev/podcasts/devnews/episodes/162"&gt;Transcript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Our season four sponsors, &lt;a href="https://scoutapm.com/devnews"&gt;Scout APM&lt;/a&gt; and &lt;a href="https://rudderstack.com/"&gt;Rudderstack&lt;/a&gt; ❤️ &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5xaOcLyzuYxpQyCgy9G/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5xaOcLyzuYxpQyCgy9G/giphy.gif" alt="Valerie Cherish Newsflash"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>💉 VacCoWIN - Check Available Slots for CoWIN Vaccination right from your Terminal!</title>
      <author>Dhruv Panchal</author>
      <pubDate>Thu, 13 May 2021 18:27:54 +0000</pubDate>
      <link>https://dev.to/dhhruv/vaccowin-check-available-slots-for-cowin-vaccination-right-from-your-terminal-23f5</link>
      <guid>https://dev.to/dhhruv/vaccowin-check-available-slots-for-cowin-vaccination-right-from-your-terminal-23f5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.cowin.gov.in/home"&gt;CoWIN Portal&lt;/a&gt;&lt;/strong&gt; is used to self-register yourself for the &lt;strong&gt;Vaccination&lt;/strong&gt; process in India. Here you can register yourself with your Phone Number and avail a slot from the available slots in various Vaccination Centres around the country.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;VacCowin&lt;/strong&gt; is a Python Script to find open slots for Vaccination in India based on your &lt;strong&gt;pincode (or multiple pincodes) or State and District&lt;/strong&gt;. This script will recheck after every few minutes and as soon the slots open, inform you via Beeping sound &amp;amp; Desktop notification.&lt;/p&gt;

&lt;p&gt;Since India has started the Vaccination Drive for those above 18 years of age, there is a very heavy rush and slots get booked soon. This script will come in handy for finding those slots as soon as they open.&lt;/p&gt;

&lt;p&gt;The data is retrieved using the open public APIs at &lt;a href="https://apisetu.gov.in/public/marketplace/api/cowin"&gt;API Setu&lt;/a&gt;. It works on both Linux and Windows.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dhhruv"&gt;
        dhhruv
      &lt;/a&gt; / &lt;a href="https://github.com/dhhruv/Vac-Cowin"&gt;
        Vac-Cowin
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      💉 Check Available Slots for CoWIN Vaccination right from your Terminal!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Install Python&lt;/li&gt;
&lt;li&gt;Clone this repository...
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/dhhruv/Vac-Cowin.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Install, create and activate virtual environment.
For instance we create a virtual environment named 'venv'.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;virtualenv
python &lt;span class="nt"&gt;-m&lt;/span&gt; virtualenv venv
venv&lt;span class="se"&gt;\S&lt;/span&gt;cripts&lt;span class="se"&gt;\a&lt;/span&gt;ctivate.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Install dependencies
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  Input:
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tags&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-h, --help&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show the Help Message and exiting the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-p, --pincode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Pincode(s) to look for slots.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-a, --age&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Age of the User(Default = 18).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-d, --date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Date to check Vaccination(Format = DD-MM-YYYY).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-w, --wizard&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;For a User Friendly Interface.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-i, --interval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Interval in which to read Data from CoWin Website in Seconds. (Default = 300)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-s, --state&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The State you want to search for.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-t, --district&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The District you want to search for.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1.  Using Pincode(s):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  You can check the available slots by entering Pincode(s) using &lt;code&gt;-p&lt;/code&gt; specified with age using &lt;code&gt;-a&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example: &lt;code&gt;python VacCowin.py -p 382150 -a 47&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CL5JojRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuwfiqhou9d4kjwfxoiz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CL5JojRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuwfiqhou9d4kjwfxoiz.gif" alt="Method 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.  Using State and District:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  You can check the available slots by entering State using &lt;code&gt;-s&lt;/code&gt; and District using&lt;code&gt;-t&lt;/code&gt; specified with age using &lt;code&gt;-a&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example: &lt;code&gt;python VacCowin.py -s Gujarat -t Ahmedabad -a 19&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ark06agp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ef864do4esavrdms55h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ark06agp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ef864do4esavrdms55h.gif" alt="Method 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.  Using Wizard Mode(For Beginners):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;   If you're a beginner then you can specify &lt;code&gt;-w&lt;/code&gt; in the Terminal or directly run the Script to enter the Wizard Mode for Beginners.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;br&gt;
&lt;code&gt;python VacCowin.py -w&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;OR&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;code&gt;python VacCowin.py&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Enter the Information asked to check the Available Slots.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--flEAmmf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9hzi4ax15qapgh4qt4i.gif" alt="Method 3"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, stay tuned for further updates on GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dhhruv"&gt;
        dhhruv
      &lt;/a&gt; / &lt;a href="https://github.com/dhhruv/Vac-Cowin"&gt;
        Vac-Cowin
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      💉 Check Available Slots for CoWIN Vaccination right from your Terminal!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;b&gt;Note:- Either Proceed through Pincode Method OR (State and District) Method for a reliable response.&lt;/b&gt;&lt;/p&gt; 

</description>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>python</category>
    </item>
    <item>
      <title>React hooks - working with state (arrays)</title>
      <author>Joseph Lynn</author>
      <pubDate>Thu, 13 May 2021 18:21:04 +0000</pubDate>
      <link>https://dev.to/joelynn94/react-hooks-working-with-state-arrays-24di</link>
      <guid>https://dev.to/joelynn94/react-hooks-working-with-state-arrays-24di</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-to-declare-initial-state"&gt;
  &lt;/a&gt;
  How to declare initial state
&lt;/h1&gt;

&lt;p&gt;To use the useState hook you will need to import it from React.&lt;/p&gt;

&lt;p&gt;You can view the code sandbox for a more interactive way to follow and mess around with the code (recommended to fork and try out yourself): &lt;a href="https://codesandbox.io/s/working-with-state-arrays-3g99o"&gt;code sandbox&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To keep track of the state, we need to call the useState hook with an initial value. Since useState returns an array we are able to destructure the current state value and a function that lets you update the state.&lt;/p&gt;

&lt;p&gt;Here's what that looks like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// variable name is up to you (state)&lt;/span&gt;
&lt;span class="c1"&gt;// then name your function, the variable name but with "set" as a prefix (setState)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#creating-the-component"&gt;
  &lt;/a&gt;
  Creating the component
&lt;/h1&gt;

&lt;p&gt;Let's start building a basic component. Here we will create the initial state to a basic component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// import React and the useState hook&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./styles.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// component function &lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SimpleArrayComponent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// set the initial state (an array of user id's to start with)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setUsers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SimpleArrayComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a basic button to change the state and a spot in the DOM to see the state change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// JSX we want to return&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// parent div to hold the ul and li's&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* map over the users array */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="c1"&gt;// display an &amp;lt;li&amp;gt; element with the userId&lt;/span&gt;
          &lt;span class="c1"&gt;// each element needs to have a unique key&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
        &lt;span class="c1"&gt;// **optional** if you do not have a unique key (like an id) then you are able to use the array index instead&lt;/span&gt;
        &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt; 
        &lt;span class="c1"&gt;// **end optional**&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleAddUserId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what we will have to start with: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LDKBI3F_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbjr5tye8gnwqg2rlv3v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LDKBI3F_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbjr5tye8gnwqg2rlv3v.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#creating-component-functionality"&gt;
  &lt;/a&gt;
  Creating component functionality
&lt;/h1&gt;

&lt;p&gt;You see we declared a function called "handleAddUser". That function doesn't exist yet. Lets create that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// delcare the function&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleAddUserId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// it's important to not mutate state directly, so here we are creating a copy of the current state using the spread syntax&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateUsers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="c1"&gt;// copy the current users state&lt;/span&gt;
      &lt;span class="c1"&gt;// you can also clone an array using users.slice() (see below)&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;// for simplistic purposes, we are just adding the new length of the array&lt;/span&gt;
      &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// // updated the state to the updatedUsers&lt;/span&gt;
    &lt;span class="nx"&gt;setUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateUsers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// array.slice method&lt;/span&gt;
    &lt;span class="c1"&gt;// create a copy of the users array&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updatedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// push the new length value to the copied array&lt;/span&gt;
    &lt;span class="nx"&gt;updatedArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// set the new state&lt;/span&gt;
    &lt;span class="nx"&gt;setUsers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Click the "Add user" button and you will see a new list item added to the state: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4sy-0UvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/py057xfa08wo1n7rvv0m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4sy-0UvY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/py057xfa08wo1n7rvv0m.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This quick tutorial shows you how to setup basic state values using arrays and how you can return a new array state value.&lt;/p&gt;

&lt;p&gt;Thanks for reading! &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>state</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Svelte Router - A Proposal</title>
      <author>Arthur Germano</author>
      <pubDate>Thu, 13 May 2021 18:16:25 +0000</pubDate>
      <link>https://dev.to/arthurgermano/svelte-router-a-proposal-2c6f</link>
      <guid>https://dev.to/arthurgermano/svelte-router-a-proposal-2c6f</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ag5c8w7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnimi5ub61s2zgm1gqty.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ag5c8w7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnimi5ub61s2zgm1gqty.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;Photo by Matt Duncan on Unsplash&lt;/small&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;Hi.. I am using Svelte for quite a while now. I think it is a pretty sweet compiler for front-end.&lt;/p&gt;

&lt;p&gt;But why do I decided to write a Router ?&lt;/p&gt;

&lt;p&gt;Because until now I didn’t find a router to attend to specific need. Well not a router embedded inside a framework like the Framework7.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong, Framework7 is awesome too, but what if I just want a router not an entire framework.&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-what-should-a-router-do-"&gt;
  &lt;/a&gt;
  So.. What Should a Router do ?
&lt;/h1&gt;

&lt;p&gt;That is an important question and all the routers I saw, until now, doesn’t give me the control that I need. They are great routers, but let’s face it what is important for a router to do.&lt;/p&gt;

&lt;p&gt;One can say routing.. of course — but is a little more than that.&lt;/p&gt;

&lt;p&gt;It has to control the routing and:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If it should route to a route;&lt;/li&gt;
&lt;li&gt;What to do before enter each route;&lt;/li&gt;
&lt;li&gt;What to do before enter that specific route;&lt;/li&gt;
&lt;li&gt;What to do when it is allowed to enter that route;&lt;/li&gt;
&lt;li&gt;Allow we to control all that above behavior in a easy way;&lt;/li&gt;
&lt;li&gt;And last but not least — access to everything everywhere!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is what I think a route should deliver. Kind of what VueRouter delivers to us.&lt;/p&gt;

&lt;p&gt;VueRouter is great and works like a charm.. so why shouldn’t Svelte have a great router too ?&lt;/p&gt;

&lt;p&gt;As I said that Svelte does have good routers however I personally don’t like routes based on structure. I like routers to give me the choice to do what I want to do when I want to do.&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#scr-svelte-client-router-the-proposal"&gt;
  &lt;/a&gt;
  SCR — Svelte Client Router — The Proposal
&lt;/h1&gt;

&lt;p&gt;Who Am I to create a router right? I know my limitations I am not the wisest guy around, but I try to do my best =).&lt;/p&gt;

&lt;p&gt;That’s why I came with this proposal — I have created a router for Svelte that does exactly what I think it should do.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dsl0Y5iT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pkipng4fu752t38ejj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dsl0Y5iT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pkipng4fu752t38ejj5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;ta-daaa! A lot of work =D&lt;/small&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;The key concept of this router is allow us to control the behavior before enter a route. So we can set:&lt;/p&gt;

&lt;p&gt;-&lt;b&gt;Global Before Enter Functions:&lt;/b&gt; To execute a function or array of functions to each route — Applied to all routes;&lt;br&gt;
-&lt;b&gt;Route Before Enter Functions:&lt;/b&gt; To execute a function or array of functions to a single route — Applied to a single route;&lt;br&gt;
-&lt;b&gt;Ignore Global Enter Functions:&lt;/b&gt; To just ignore Global Before Enter functions on a single route — Applied to a single route;&lt;br&gt;
-&lt;b&gt;Revert Order Of Execution:&lt;/b&gt; To execute Route Before Functions Before Global Before Functions;&lt;/p&gt;

&lt;p&gt;Of course it offers more than just that.. but it is focused on deliver that!&lt;/p&gt;

&lt;p&gt;With this router you will be able to control every aspect of routing, passing information forward throughout Before Enter Functions and After Before Enter Functions and receiving it in all components.&lt;/p&gt;

&lt;p&gt;One of the cooliest things is that every param, variable defined will be delivered in all places — functions, components, etc, as soon as possible.&lt;/p&gt;

&lt;p&gt;That means if you define a parameter inside of a Before Enter Function it will be delivered in the next one until the end, plus it will be delivered in your components.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Why is this nice, one can ask?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;em&gt;Because I can control the behavior of routing and even alter as soon as I want to.&lt;/em&gt;&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ah.. I almost forget you can set loading components to it — Global and Per Route too!&lt;/p&gt;

&lt;p&gt;As soon as Before Enter Functions kicks in it will show a loading component if the loading take time enough.&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#try-it-test-it-documentation"&gt;
  &lt;/a&gt;
  Try It — Test It — Documentation
&lt;/h1&gt;

&lt;p&gt;Yes, It is in its early stages however I think it is awesome!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://arthurgermano.github.io/svelte-client-router/#/svelte-client-router"&gt;SCR - Svelte Client Router - Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h1&gt;
  &lt;a href="#npm-package"&gt;
  &lt;/a&gt;
  NPM Package
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://arthurgermano.github.io/svelte-client-router/#/svelte-client-router"&gt;SCR - Svelte Client Router - Package&lt;/a&gt;&lt;/p&gt;


&lt;/blockquote&gt;



&lt;h1&gt;
  &lt;a href="#see-on-github"&gt;
  &lt;/a&gt;
  See on Github
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/arthurgermano/svelte-client-router"&gt;SCR - Svelte Client Router - Code&lt;/a&gt;&lt;/p&gt;


&lt;/blockquote&gt;



&lt;h1&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h1&gt;

&lt;p&gt;I have worked with a little personal project and Svelte is really wonderful. I missed one thing in Svelte Community though, a good not embedded router.&lt;/p&gt;

&lt;p&gt;So here it my proposal. Please check out — test it and let me know your thoughts. =)&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#finance-notes-project"&gt;
  &lt;/a&gt;
  Finance Notes Project
&lt;/h1&gt;

&lt;p&gt;If you want to check out my personal project..&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jgWpayi---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxe8hhbi9o0sdoa5r16i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jgWpayi---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxe8hhbi9o0sdoa5r16i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;Finance Notes Project — PWA&lt;/small&gt;&lt;/center&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://financenotes.com.br/"&gt;Finance Notes Project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/arthurgermano/my-experience-building-a-pwa-app-with-svelte-js-4pme"&gt;My Experience Building a PWA App with Svelte JS&lt;/a&gt;&lt;/p&gt;


&lt;/blockquote&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>router</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Incremental Build Improvements, Angular 12, Distributed Task Execution, and more in Nx 12.3!</title>
      <author>Brandon Roberts</author>
      <pubDate>Thu, 13 May 2021 18:08:58 +0000</pubDate>
      <link>https://dev.to/nx/incremental-build-improvements-angular-12-distributed-task-execution-and-more-in-nx-12-3-41m9</link>
      <guid>https://dev.to/nx/incremental-build-improvements-angular-12-distributed-task-execution-and-more-in-nx-12-3-41m9</guid>
      <description>&lt;p&gt;&lt;strong&gt;Nx 12.3 includes many new features, including Incremental Build Improvements, Angular 12, Distributed Task Execution, and more!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nx&lt;/strong&gt; is a suite of powerful, extensible dev tools to help you architect, test, and build at any scale - integrating seamlessly with modern technologies and libraries while providing a robust CLI, computation caching, dependency management, and more.&lt;/p&gt;

&lt;p&gt;If you aren't familiar with it, learn about Nx at &lt;a href="https://nx.dev/angular"&gt;nx.dev/angular&lt;/a&gt; and &lt;a href="https://nx.dev/react"&gt;nx.dev/react&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#incremental-build-improvements"&gt;
  &lt;/a&gt;
  Incremental Build Improvements
&lt;/h2&gt;

&lt;p&gt;Nx already supports incremental builds, and to enhance this feature we have introduced Target Dependencies. Each project's target may now declare other targets that the project depends on, meaning that those targets are completed before the project target is run.&lt;/p&gt;

&lt;p&gt;As an example, let's look at an application with a dependency on a buildable library. The following workspace configuration below displays &lt;code&gt;app1&lt;/code&gt; and &lt;code&gt;lib1&lt;/code&gt; with lib1 needing to be built before &lt;code&gt;app1&lt;/code&gt; is built. Previously, the &lt;code&gt;--with-deps&lt;/code&gt; option was always required to build the dependencies of &lt;code&gt;app1&lt;/code&gt;. Without specifying this option, the application would not build because its dependencies were not built. Because this requirement always has to be met, the &lt;code&gt;build&lt;/code&gt; target for &lt;code&gt;app1&lt;/code&gt; should declare a dependency on the build target of projects that app1 depends on. These dependencies can now be defined in the &lt;code&gt;workspace.json&lt;/code&gt; within the target configuration for the project.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now running &lt;code&gt;nx build app1&lt;/code&gt; will also schedule and build &lt;code&gt;nx build lib1&lt;/code&gt; without passing &lt;code&gt;--with-deps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another example is serving an application that requires building itself beforehand. Now you can also specify that the target depends on another target defined for the same project.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now serving &lt;code&gt;app1&lt;/code&gt; will first build &lt;code&gt;app1&lt;/code&gt;, along with any additional target dependencies. Target Dependencies give you more control and customization over project dependencies. Now for incremental builds, you don't have to specifically pass &lt;code&gt;--with-deps&lt;/code&gt;; The build is always incremental based on its target dependencies.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#support-for-updating-to-angular-version%C2%A012"&gt;
  &lt;/a&gt;
  Support for updating to Angular version 12
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Angular version 12 was just recently released and includes new features that many users are excited about, such as:&lt;/li&gt;
&lt;li&gt;Support for TypeScript 4.2.&lt;/li&gt;
&lt;li&gt;Full support for Webpack 5. In Angular 11, Webpack 5 was an opt-in feature.&lt;/li&gt;
&lt;li&gt;Support for NgRx version 12.&lt;/li&gt;
&lt;li&gt;Deprecation of Protractor as an E2E solution. Fortunately, Nx provides first-party support for &lt;a href="https://cypress.io"&gt;Cypress&lt;/a&gt; E2E testing.&lt;/li&gt;
&lt;li&gt;Angular ESLint has been updated to version 4.&lt;/li&gt;
&lt;li&gt;Updated Angular Storybook to use the new Storybook version 6 syntax.&lt;/li&gt;
&lt;li&gt;Removal of the lint target with TSLint in favor of community-maintained packages. Fortunately, Nx also provides first-party support for &lt;a href="https://github.com/angular-eslint/angular-eslint"&gt;Angular ESLint&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nx also helps users migrate from TSLint to ESLint automatically. See the video below for a walkthrough.&lt;/p&gt;

&lt;p&gt;Migrating Angular Applications from TSLint to ESLint&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JtVqJMzsqyY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As an additional note, users of Storybook 5 must upgrade to Storybook 6.2+ before upgrading to Angular 12. This is necessary because Storybook 6.2+ is needed to support Webpack 5+. See our &lt;a href="https://nx.dev/latest/angular/storybook/overview#upgrading-to-storybook-6-using-the-nx-migration-generator"&gt;Storybook 5 to 6 migration guide&lt;/a&gt; for more details on how you can upgrade.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-highlights"&gt;
  &lt;/a&gt;
  Other Highlights
&lt;/h2&gt;

&lt;p&gt;Each release of Nx also contains additional minor features and bug fixes. Some notable features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gatsby is listed as a &lt;strong&gt;&lt;em&gt;preset&lt;/em&gt;&lt;/strong&gt; when creating new Nx workspaces.&lt;/li&gt;
&lt;li&gt;Added &lt;strong&gt;style-jsx&lt;/strong&gt; support for Gatsby.&lt;/li&gt;
&lt;li&gt;Next.js has been updated to &lt;strong&gt;version 10.2&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Next.js apps now have support for &lt;strong&gt;incremental builds&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;strong&gt;getJestProjects()&lt;/strong&gt; utility method to &lt;strong&gt;@nrwl/jest package&lt;/strong&gt; for the root jest.config.js.&lt;/li&gt;
&lt;li&gt;Added &lt;strong&gt;strict&lt;/strong&gt; option when generating React applications.
ESLint now has a &lt;strong&gt;recommended extension&lt;/strong&gt; included for new workspaces.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-update%C2%A0nx"&gt;
  &lt;/a&gt;
  How to Update Nx
&lt;/h2&gt;

&lt;p&gt;Updating Nx is done with the following command, and will update your dependencies and code to the latest version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx migrate latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After updating your dependencies, run any necessary migrations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx migrate &lt;span class="nt"&gt;--run-migrations&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#distributed-task-execution-for-nx%C2%A0cloud"&gt;
  &lt;/a&gt;
  Distributed Task Execution for Nx Cloud
&lt;/h2&gt;

&lt;p&gt;When working in large codebases, only running tasks based on what is affected in your Continuous Integration(CI) environment is a time-saver. Even when you do need to run those sets of tasks, it's better to run them in parallel to speed up your CI process. Traditionally, you would set up a parent job to split your tasks such as linting and testing into "buckets", and use child jobs to run each bucket of tasks, each with its own task details. This turns into a very challenging and ongoing effort to distribute and gather results from these tasks across a grid of machines. We've solved this problem numerous times, and are working on an exciting new feature for Nx Cloud called Distributed Task Execution (DTE). DTE is a new way to distribute the work of many tasks across many machines. DTE provides a Zero-Config️ way to coordinate and schedule all the tasks, execute them across multiple machines, and collect the results from these tasks into a single run, giving you a clean consolidated view of all tasks run and their details.&lt;/p&gt;

&lt;p&gt;Watch as Victor Savkin demos this new feature using the Nx GitHub repo.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Exs64pscwxA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;DTE is in private beta right now, and will available to the public soon, and will be free for open-source projects. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explore-more"&gt;
  &lt;/a&gt;
  Explore More
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.nrwl.io/nx-is-modern-angular-bda6cf10746d"&gt;Nx is Modern Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.nrwl.io/how-to-never-build-or-test-the-same-code-twice-2dc58e413279"&gt;How to never build or test the same code twice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.nrwl.io/plugging-into-the-dependency-graph-construction-for-nx-bc79814f5521"&gt;Plugging into the Dependency Graph Construction for Nx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.nrwl.io/smarter-and-faster-angular-development-with-nx-6ccca0fe18d1"&gt;Smarter and Faster Angular Development with Nx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get our &lt;a href="https://youtu.be/2mYLe9Kp9VM"&gt;free basic Nx workspaces course on youtube!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purchase our premium video course on advanced practices for Nx workspaces: &lt;a href="https://nxplaybook.com/p/advanced-nx-workspaces"&gt;here&lt;/a&gt;!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;As always, if you are looking for enterprise consulting, training and support, you can find out more about how we work with our clients &lt;a href="https://nrwl.io/services/consulting"&gt;here&lt;/a&gt;.&lt;br&gt;
If you liked this, click the 👏 below so other people will see this here on Medium. Follow &lt;a href="https://dev.to/brandontroberts"&gt;Brandon Roberts&lt;/a&gt; and &lt;a href="https://dev.to/nrwl"&gt;@nrwl_io&lt;/a&gt; to read more about Nx and Nrwl. Also follow &lt;a href="https://twitter.com/brandontroberts"&gt;Brandon&lt;/a&gt;, &lt;a href="https://twitter.com/NxDevTools"&gt;Nx&lt;/a&gt;, and &lt;a href="https://twitter.com/nrwl_io"&gt;Nrwl&lt;/a&gt; on Twitter!&lt;/p&gt;

</description>
      <category>nx</category>
      <category>angular</category>
      <category>monorepos</category>
      <category>react</category>
    </item>
    <item>
      <title>How my world was destroyed </title>
      <author>John 'BBQ' Wollner</author>
      <pubDate>Thu, 13 May 2021 18:05:41 +0000</pubDate>
      <link>https://dev.to/jwollner5/how-my-world-was-destroyed-m9n</link>
      <guid>https://dev.to/jwollner5/how-my-world-was-destroyed-m9n</guid>
      <description>&lt;p&gt;In December of last year I pleaded guilty to a felony in lieu of significant potential prison time. I made a stupid mistake and as a result i have lost everything - job, home, family, possessions - EVERYTHING.&lt;/p&gt;

&lt;p&gt;I'm not a bad person, just a guy who in a bad situation, chose the wrong answer to a problem. Im hoping by posting this, someone may know of an outfit that can look past my crime to the seasoned developer I am and give me a job.&lt;/p&gt;

&lt;p&gt;Thanks for reading - i hope all of my acquaintances here are doing well. &lt;/p&gt;

</description>
      <category>career</category>
      <category>failure</category>
    </item>
    <item>
      <title>Why You Should Use SaaS Boilerplate &amp; Starter-Kits To Speed Up Your App Development</title>
      <author>Condor</author>
      <pubDate>Thu, 13 May 2021 17:40:32 +0000</pubDate>
      <link>https://dev.to/aminebounizel/why-you-should-use-saas-boilerplate-starter-kits-to-speed-up-your-app-development-1p4h</link>
      <guid>https://dev.to/aminebounizel/why-you-should-use-saas-boilerplate-starter-kits-to-speed-up-your-app-development-1p4h</guid>
      <description>&lt;p&gt;Being a SaaS entrepreneur has its good and bad sides. While it comes with the excitement of having new ideas and launching new projects, there is one rather dull part of the process: setting it up. &lt;br&gt;
Setting up the basics and taking care of the technical aspects can be time-consuming, and, to be honest, no one likes to do it. Since it requires a lot of motivation, attention, and many working hours, it can delay your app development by several weeks, even months. So, what can you do to make the process faster?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-saas-boilerplates"&gt;
  &lt;/a&gt;
  What Are SaaS Boilerplates?
&lt;/h2&gt;

&lt;p&gt;What if you found out that a template could take care of all the boring, complicated parts by starting with a boilerplate that has everything that is needed, and you didn't have to do them yourself anymore? Yes, it's possible, and that's exactly what a SaaS boilerplate is. SaaS boilerplates involve functionalities that would otherwise cost entrepreneurs a lot of time and money to build.&lt;br&gt;
There are things that are common across all SaaS Apps. No matter what you are building, your SaaS will most likely be needing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Authentication feature which handles all the login, logout, forgot password.&lt;/li&gt;
&lt;li&gt;Integration to payment and a way to charging the customer and manage subscriptions and plans.&lt;/li&gt;
&lt;li&gt;Features to handle recurring payments, cancelation, charging credit cards.&lt;/li&gt;
&lt;li&gt;Pre-build permission, and roles management to grant and restrict user permissions based on roles with full end-user control.&lt;/li&gt;
&lt;li&gt;Dashboard for your users&lt;/li&gt;
&lt;li&gt;Profile page for your users&lt;/li&gt;
&lt;li&gt;Built-in component library&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;...etc&lt;/p&gt;

&lt;p&gt;There are plenty of different types of boilerplates available on the market, and all of them have a different set of features and facilities.&lt;br&gt;
Based on your preferred programming language and the architecture you think your SaaS platform will require, you can choose one boilerplate or a starter kit that could set the ground for all your future projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boostackio"&gt;
  &lt;/a&gt;
  Boostack.io
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p1d2akFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fddeavnn0uj4mz8zx1pl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p1d2akFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fddeavnn0uj4mz8zx1pl.png" alt="Boostack SaaS Boilerplate"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://boostack.io"&gt;Boostack&lt;/a&gt; provide a proven starting point for new projects that save you months of time when launching your next SaaS Application it uses minimal dependencies, implements idiomatic code, and follows best practices, Boostack comes with a clean project structure and clean architecture that you can easily extend or customize.&lt;br&gt;
Built on MEVN stack, the open-source JavaScript Stack to build powerful and dynamic apps.&lt;br&gt;
Boostack is 100% Javascript with Node.js on the backend and Vue.js on the frontend, so you don't need to write, maintain, or debug in multiple languages.&lt;br&gt;
For makers, bootstrapper or solo-founder Boostack is the perfect SaaS Boilerplate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#railskitscom"&gt;
  &lt;/a&gt;
  Railskits.com
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NmzT4mE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/da4pw8i6hbvk97hn7ixd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NmzT4mE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/da4pw8i6hbvk97hn7ixd.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://railskits.com"&gt;Railskits&lt;/a&gt; gets your new software-as-a-service site off to a running start by providing you a well-tested and proven recurring billing system with credit card payments.&lt;br&gt;
Railskits is a Ruby on Rails framework for building membership-based applications, including account signups upgrades/downgrades, tiered pricing levels with customizable limits (e.g, # of users, # of projects, etc.), multi-tenant data security in a single database, and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#innomaticio"&gt;
  &lt;/a&gt;
  Innomatic.io
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3HQv8wTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh98e3dt83binot57agn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3HQv8wTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh98e3dt83binot57agn.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.innomatic.io/"&gt;Innomatic&lt;/a&gt; the open source platform for building multi-tenant applications in PHP&lt;br&gt;
Innomatic reduces the time and the budget to build SaaS products by providing SaaS engineering, service management, and business management components in ready-to-use form. Innomatic Platform is based on Symfony.&lt;br&gt;
Innomatic also provides a Business Application Framework for creating multi-tenant custom Enterprise applications with prebuilt features like ACL, roles/permissions, site-wide search engine, dashboard widgets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saascoreframeworkcom"&gt;
  &lt;/a&gt;
  Saascoreframework.com
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9meJItCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfmmpyeiu7fawxuafjsn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9meJItCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfmmpyeiu7fawxuafjsn.PNG" alt="Saascoreframework"&gt;&lt;/a&gt; &lt;br&gt;
&lt;a href="http://www.saascoreframework.com/"&gt;Saascoreframework&lt;/a&gt; the saas core framework a multi-tenant framework that would support everything you would expect in a modern SaaS application including free trial setup, a multi-tenant database architecture, and different user roles. The SaaS Core Framework is a generic version of the underlying technology that supports PetSitClick which you can use to build your own SaaS application and save time.&lt;/p&gt;

&lt;p&gt;We hoped this article helped you find the best SaaS Boilerplate to use.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#image-by-garrhet-sampson-on-unsplash"&gt;
  &lt;/a&gt;
  &lt;em&gt;Image by Garrhet Sampson on &lt;a href="https://unsplash.com/"&gt;unsplash&lt;/a&gt;&lt;/em&gt;
&lt;/h6&gt;

</description>
      <category>saas</category>
      <category>boilerplate</category>
      <category>startup</category>
      <category>starterkit</category>
    </item>
    <item>
      <title>How to Maintain Your Skills as a Developer </title>
      <author>Ceora Ford</author>
      <pubDate>Thu, 13 May 2021 17:28:13 +0000</pubDate>
      <link>https://dev.to/ceeoreo/how-to-maintain-your-skills-as-a-developer-1e4e</link>
      <guid>https://dev.to/ceeoreo/how-to-maintain-your-skills-as-a-developer-1e4e</guid>
      <description>&lt;p&gt;It’s no secret that the tech industry is always changing. New frameworks are always emerging and new features are constantly being added to the languages and frameworks that already exist. This can be exciting but sometimes it can be hard to keep up. Some people work in environments that don’t welcome change. Not everyone’s team is looking to implement the latest innovation. &lt;/p&gt;

&lt;p&gt;Zachariah, CEO and CTO of &lt;a href="https://squadcast.fm/"&gt;SquadCast&lt;/a&gt;, had this experience. In &lt;a href="https://codesandbox.io/podcasts/version-one/Zachariah-Moreno-SquadCast"&gt;episode 3 of the Version One podcast&lt;/a&gt;, he talked about an experience he had early on in his career. He was in a position that didn’t allow for much growth. So how was he able to keep his coding skills up to par? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So what I did was I used that time to contribute to open source projects, research, sharpen my skills, [to] kind of stay sharp.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As Zachariah mentioned, there are many things you can do to stay sharp. This post will explain 5 ways you can maintain and grow your coding skills. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-other-peoples-code"&gt;
  &lt;/a&gt;
  Read other people's code
&lt;/h2&gt;

&lt;p&gt;When it comes to getting better at a certain coding language or framework, we usually think that we need to work on some fancy, new project. While that isn't a bad idea, reading other people's code is another very helpful step. Reading other people's code can often be overlooked but it's a great way to familiarize yourself with new and old syntax and to test your ability to understand unfamiliar codebases. &lt;/p&gt;

&lt;p&gt;Where can you find projects to read through? A great place to start is GitHub. Check out your favorite open source projects and products. Casually read through the code and see what you can learn. Is there a feature that you're curious about? Try to find out how it was implemented. You can also search for projects by language. If there is a language you want to brush up on, you can check out some of the most popular &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#work-on-top-of-already-existing-code"&gt;
  &lt;/a&gt;
  Work on top of already existing code
&lt;/h2&gt;

&lt;p&gt;Work on existing projects. You can find your own projects and iterate on them, adding new features or changing the structure of your code. You can also search for open source projects on GitHub. Find a project that's in a language you would like to brush up on and find an issue you can tackle. If you're not quite comfortable with making open source contributions, you can either stick to your own existing projects or read this helpful, &lt;a href="https://codesandbox.io/post/how-to-make-your-first-open-source-contribution"&gt;step-by-step guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Working on existing code is great because it presents new challenges. You have to figure out code that may be deprecated or hard to understand, even if it’s your project. By doing this, you'll train yourself to navigate unfamiliar codebases. This is a very valuable skill to gain since oftentimes in professional settings, you’ll have to add to code that already exists instead of starting something from scratch. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#watch-other-people-code"&gt;
  &lt;/a&gt;
  Watch other people code
&lt;/h2&gt;

&lt;p&gt;Watch other people code on platforms like YouTube and Twitch. Through videos and live streams, you can see other developers code and problem solve out loud. You can follow their thought pattern and see how they fix and tackle bugs and other problems in their code. There’s so much you can gain from watching this process. You can learn new syntax, learn how to approach and solve problems, and learn how to implement new features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-coding-challenges"&gt;
  &lt;/a&gt;
  Do coding challenges
&lt;/h2&gt;

&lt;p&gt;Try completing coding challenges and exercises. There are tons of websites out there like &lt;a href="//hackerrank.com"&gt;HackerRank&lt;/a&gt; and &lt;a href="https://www.codewars.com/"&gt;CodeWars&lt;/a&gt; that present problems that you have to solve with your code stack of choice. These challenges are made to be short and to the point while also forcing you to solve complex problems. They’re a great way to stay sharp and keep up with any language. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-articles-about-code"&gt;
  &lt;/a&gt;
  Read articles about code
&lt;/h2&gt;

&lt;p&gt;There are tons of developer blogs out there. Developer blogs are full of gems. There’s so much you can learn from reading articles. If there’s a topic you want to learn more about, do a quick Google search or search on sites like &lt;a href="http://dev.to"&gt;dev.to&lt;/a&gt; for articles that can help. &lt;/p&gt;

&lt;p&gt;Reading articles written by other developers is another way to see how other people think and problem solve. As mentioned earlier, this is invaluable and can add to your skills and knowledge. So when you come across an article that covers a topic you’re interested in, take the time to read through it. And make note of any points that stood out to you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Tech moves fast but even so, growth can sometimes feel stagnant. If you feel like you’re at a standstill, try these tips. By doing these things, you’ll be able to stay sharp and grow your skills. There’s still more you can learn from Zachariah and his journey to becoming a CEO and CTO of SquadCast. Make sure to give his &lt;a href="https://codesandbox.io/podcasts/version-one/Zachariah-Moreno-SquadCast"&gt;Version One episode&lt;/a&gt; a listen to find out more!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/4MJ9C6HYscUi8UiOsMl2Ej"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
