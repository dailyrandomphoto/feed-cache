<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>üî• Next JS Website Template with Landing Page Theme [Open Source]</title>
      <author>Remi W.</author>
      <pubDate>Fri, 04 Jun 2021 13:07:45 +0000</pubDate>
      <link>https://dev.to/ixartz/next-js-website-template-with-landing-page-theme-open-source-268i</link>
      <guid>https://dev.to/ixartz/next-js-website-template-with-landing-page-theme-open-source-268i</guid>
      <description>&lt;p&gt;Start your website in Next JS, React, TypeScript and Tailwind CSS for your side projects, online products, SaaS, services. The template is integrated with great JavaScript tooling like ESLint, Prettier, Husky, etc. Perfect to build a high quality website without losing time configuring, testing and reading long documentation.&lt;/p&gt;

&lt;p&gt;Fully responsive website theme and highly customizable, this website template helps you save development and design time.&lt;/p&gt;

&lt;p&gt;Here is the result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qievzIIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ixartz/Next-JS-Landing-Page-Starter-Template/master/public/assets/images/nextjs-landing-page-screenshot.png" alt="Nextjs Website Template Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ixartz"&gt;
        ixartz
      &lt;/a&gt; / &lt;a href="https://github.com/ixartz/Next-JS-Landing-Page-Starter-Template"&gt;
        Next-JS-Landing-Page-Starter-Template
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üöÄ Free NextJS Landing Page Template written in Tailwind CSS 2.0 and TypeScript ‚ö°Ô∏è Made with developer experience first: Next.js, TypeScript, ESLint, Prettier, PostCSS, Tailwind CSS.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Landing Page Template built with Next JS 10+, Tailwind CSS 2.0 and TypeScript&lt;/h1&gt;
&lt;p&gt;
  &lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qZYjQwY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ixartz/Next-JS-Landing-Page-Starter-Template/master/public/assets/images/nextjs-landing-page-banner.png%3Fraw%3Dtrue" alt="Next js starter banner"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;üöÄ Landing Page theme written in Next.js, Tailwind CSS and TypeScript ‚ö°Ô∏è Made with developer experience first: &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt;, &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt;, &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;, &lt;a href="https://postcss.org" rel="nofollow"&gt;PostCSS&lt;/a&gt;, &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Clone this project and use it to create your own &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; project. You can check a &lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/" rel="nofollow"&gt;Next js templates demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
DEMO&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7DT1a-7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ixartz/Next-JS-Landing-Page-Starter-Template/master/public/assets/images/nextjs-landing-page-screenshot.png%3Fraw%3Dtrue" alt="Nextjs Landing Page Template Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href="https://creativedesignsguru.com/demo/nextjs-landing-page/" rel="nofollow"&gt;live demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
Features&lt;/h3&gt;

&lt;p&gt;Developer experience first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
üî• &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; for Static Site Generator&lt;/li&gt;
&lt;li&gt;
üé® Integrate with &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üíÖ &lt;a href="https://postcss.org" rel="nofollow"&gt;PostCSS&lt;/a&gt; for processing &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üéâ Type checking &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
‚úèÔ∏è Linter with &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üõ† Code Formatter with &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
ü¶ä SEO metadata, &lt;a href="https://developers.google.com/search/docs/guides/intro-structured-data" rel="nofollow"&gt;JSON-LD&lt;/a&gt; and &lt;a href="https://ogp.me/" rel="nofollow"&gt;Open Graph&lt;/a&gt; tags with &lt;a href="https://github.com/garmeeh/next-seo"&gt;Next SEO&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
‚öôÔ∏è &lt;a href="https://www.npmjs.com/package/@next/bundle-analyzer" rel="nofollow"&gt;Bundler Analyzer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
üåà Include a FREE theme&lt;/li&gt;
&lt;li&gt;
üíØ Maximize lighthouse score&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Built-in feature from Next.js:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
‚òï Minify HTML &amp;amp; CSS&lt;/li&gt;
&lt;li&gt;
üí® Live reload&lt;/li&gt;
&lt;li&gt;
‚úÖ Cache busting&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
Included Components&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Navbar&lt;/li&gt;
&lt;li&gt;Hero&lt;/li&gt;
&lt;li&gt;Features&lt;/li&gt;
&lt;li&gt;CTA banner&lt;/li&gt;
&lt;li&gt;‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ixartz/Next-JS-Landing-Page-Starter-Template"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#made-by-devs-for-developers"&gt;
  &lt;/a&gt;
  Made by devs for developers
&lt;/h2&gt;

&lt;p&gt;This template was made by a developer for React developers. You have access to React components and here is the list of pre-made components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigation component&lt;/li&gt;
&lt;li&gt;Hero component&lt;/li&gt;
&lt;li&gt;Feature component&lt;/li&gt;
&lt;li&gt;Banner component&lt;/li&gt;
&lt;li&gt;Footer component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you need to access to more components, you can visit our &lt;a href="https://creativedesignsguru.com/category/nextjs/"&gt;Next JS template gallery&lt;/a&gt;, a premium version of the website theme.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#premium-next-js-templates-and-themes"&gt;
  &lt;/a&gt;
  Premium Next JS Templates and Themes
&lt;/h2&gt;

&lt;p&gt;Built in modern ways with components and UI blocks. You can also check my portfolio at:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-green-modern-nextjs-theme/"&gt;Green Nextjs Website Template&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-indigo-modern-react-theme/"&gt;Indigo Nextjs Webiste Theme&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-green-modern-nextjs-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4CbDAFVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-green-modern-nextjs-theme-xs.png" alt="Green Nextjs Website Template"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-indigo-modern-react-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FvlCiWRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-indigo-modern-nextjs-theme-xs.png" alt="Indigo Nextjs Website Theme"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-purple-modern-react-theme/"&gt;Purple Nextjs Website Theme&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-blue-modern-react-theme/"&gt;Blue Nextjs Website Theme&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-purple-modern-react-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fsLIO5h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-purple-modern-nextjs-theme-xs.png" alt="Purple Nextjs Website Theme"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-blue-modern-react-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--az4i2Gg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-blue-modern-nextjs-theme-xs.png" alt="Blue Nextjs Website Theme"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#find-more-open-source-projects"&gt;
  &lt;/a&gt;
  Find more open source projects
&lt;/h2&gt;

&lt;p&gt;You can find more open source Next JS template on my GitHub:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;Next JS Boilerplate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you want to build a blog, you can check the &lt;a href="https://github.com/ixartz/Next-js-Blog-Boilerplate"&gt;Next JS blog boilerplate&lt;/a&gt; version&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>nextjs</category>
      <category>webdev</category>
      <category>react</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Introducing the New Appwrite Anonymous Login</title>
      <author>Torsten Dittmann</author>
      <pubDate>Fri, 04 Jun 2021 12:44:50 +0000</pubDate>
      <link>https://dev.to/appwrite/introducing-the-new-appwrite-anonymous-login-4d7j</link>
      <guid>https://dev.to/appwrite/introducing-the-new-appwrite-anonymous-login-4d7j</guid>
      <description>&lt;p&gt;It is important to consider the user experience when someone first comes to your application. The registration process can often prove to be a hurdle for users to use an application, especially if parts of the application are bound to an authentication process and hidden behind a login screen. Moreover, in today's world, the issue of privacy and data protection is a delicate one, especially because of new data privacy regulation, like &lt;a href="https://www.smashingmagazine.com/2018/02/gdpr-for-web-developers/"&gt;GDPR&lt;/a&gt; and &lt;a href="https://www.forbes.com/sites/forbestechcouncil/2020/11/17/cpra-could-bring-stricter-data-privacy-enforcement-heres-how-to-prepare/"&gt;CPRA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Appwrite 0.8 introduces &lt;strong&gt;Anonymous Login&lt;/strong&gt; as an authentication method, which allows users to create an account without providing personal information such as an email address, username or password.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-do-we-need-anonymous-users"&gt;
  &lt;/a&gt;
  Why do we need anonymous users?
&lt;/h1&gt;

&lt;p&gt;This feature is especially useful if you want to provide an easy authentication process for an &lt;a href="https://www.websitepolicies.com/blog/coppa-guide"&gt;underage audience&lt;/a&gt;, mobile apps or use cases where you don't want to store personal information to ensure users anonymity for sensitive subjects like politics or religion.&lt;/p&gt;

&lt;p&gt;With Appwrite you can offer your users the option to create an anonymous account, as well as the possibility to convert it into a full-fledged account with an e-mail address and password or linking to an OAuth2 service provider at a later stage.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h1&gt;

&lt;p&gt;Enough talking, let's learn how we can add Anonymous Authentication to a Web and a Flutter Application using our &lt;a href="https://appwrite.io/docs/getting-started-for-web"&gt;Web SDK&lt;/a&gt; and &lt;a href="https://appwrite.io/docs/getting-started-for-flutter"&gt;Flutter SDK&lt;/a&gt;. The same can be done with other client SDKs we might release in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web"&gt;
  &lt;/a&gt;
  Web
&lt;/h3&gt;

&lt;p&gt;The first step is to add our Web SDK to our project with NPM like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;appwrite &lt;span class="nt"&gt;--save&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're using a bundler (like &lt;a href="https://rollupjs.org/"&gt;Rollup&lt;/a&gt; or &lt;a href="https://webpack.js.org/"&gt;webpack&lt;/a&gt;), you can import the Appwrite module when you need it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;appwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To install with a CDN (content delivery network) add the following scripts to the bottom of your tag, but before you use any Appwrite services:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/appwrite"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to initialize your SDK code with your project ID which can be found in your project settings page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Init your Web SDK&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;appwrite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Appwrite&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;appwrite&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost/v1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your Appwrite Endpoint&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;455x34dfkj&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your Appwrite Project ID&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter
&lt;/h3&gt;

&lt;p&gt;The first step is to add our Flutter SDK to our project.&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;appwrite: ^0.6.0&lt;/code&gt; or the latest version in your project's &lt;code&gt;pubspec.yaml&lt;/code&gt; file under dependencies.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;dependencies&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;appwrite&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;^0.6.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run following command to download the dependencies or upon saving your IDE might automatically run this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;flutter pub get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next step is to initialize your SDK code with your project ID which can be found in your project settings page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:appwrite/appwrite.dart'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setEndpoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://localhost/v1'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your Appwrite Endpoint&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setProject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'455x34dfkj'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your Appwrite Project ID&lt;/span&gt;
&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#create-an-anonymous-user"&gt;
  &lt;/a&gt;
  Create an Anonymous User
&lt;/h1&gt;

&lt;p&gt;Once your SDK is setup, access the Account service and call the &lt;a href="https://appwrite.io/docs/client/account?sdk=web#accountCreateAnonymousSession"&gt;&lt;code&gt;createAnonymousSession()&lt;/code&gt;&lt;/a&gt; method. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web"&gt;
  &lt;/a&gt;
  Web
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an anonymous user and login&lt;/span&gt;
&lt;span class="nx"&gt;appwrite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createAnonymousSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an anonymous user and login&lt;/span&gt;
&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Account&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createAnonymousSession&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;AppwriteException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the &lt;a href="https://appwrite.io/docs/client/account?sdk=web#accountCreateAnonymousSession"&gt;&lt;code&gt;createAnonymousSession()&lt;/code&gt;&lt;/a&gt; method completes without error, the request will create an anonymous user and automatically logs in the user, setting up the cookie for following requests. Now the user is authenticated and is allowed to access his or her private data and settings.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#convert-to-permanent-user"&gt;
  &lt;/a&gt;
  Convert to Permanent User
&lt;/h1&gt;

&lt;p&gt;When an anonymous user signs up, you might want to allow them to continue their work with a permanent account. This will also allow the user to recover his account in the future and switch between devices. &lt;/p&gt;

&lt;p&gt;With Appwrite there is 2 ways of doing so.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#email"&gt;
  &lt;/a&gt;
  E-Mail
&lt;/h2&gt;

&lt;p&gt;By &lt;a href="https://appwrite.io/docs/client/account#accountUpdateEmail"&gt;updating the email address&lt;/a&gt; of an anonymous account, we can pass an email address and a password to the &lt;code&gt;account.updateEmail&lt;/code&gt; method.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web"&gt;
  &lt;/a&gt;
  Web
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;appwrite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateEmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email@example.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;secret&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Success&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Failure&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;updateEmail&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;email:&lt;/span&gt; &lt;span class="s"&gt;'email@example.com'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;password:&lt;/span&gt;&lt;span class="s"&gt;'secret'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;AppwriteException&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will convert the anonymous user to a permanent account with &lt;strong&gt;&lt;a href="mailto:email@example.com"&gt;email@example.com&lt;/a&gt;&lt;/strong&gt; as email and &lt;strong&gt;secret&lt;/strong&gt; as his or her password.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#oauth2"&gt;
  &lt;/a&gt;
  OAuth2
&lt;/h2&gt;

&lt;p&gt;By calling the &lt;a href="https://appwrite.io/docs/client/account#accountCreateOAuth2Session"&gt;&lt;code&gt;account.createOAuth2Session&lt;/code&gt;&lt;/a&gt; method from an anonymous account, the user will be automatically converted.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#web"&gt;
  &lt;/a&gt;
  Web
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;appwrite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createOAuth2Session&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;google&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://localhost/success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://localhost/failure&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;createOAuth2Session&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;provider:&lt;/span&gt; &lt;span class="s"&gt;'google'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Both options offer users to transfer all their information to an account and use them on other devices.&lt;/p&gt;

&lt;p&gt;If you need help or encounter any difficulties setting up Anonymous Login with Appwrite, please &lt;a href="https://appwrite.io/discord"&gt;join our Discord&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/discord"&gt;Appwrite Discord&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io/docs"&gt;Appwrite Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://appwrite.io"&gt;Appwrite Homepage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@jdent?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jason Dent&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/privacy?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>flutter</category>
      <category>javascript</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Codecademy Certificate</title>
      <author>Mehran Khan</author>
      <pubDate>Fri, 04 Jun 2021 12:28:34 +0000</pubDate>
      <link>https://dev.to/mehran1801/codecademy-certificate-22ln</link>
      <guid>https://dev.to/mehran1801/codecademy-certificate-22ln</guid>
      <description>&lt;p&gt;I got this certificate of completion.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Generate custom social card images for your Gatsby blog</title>
      <author>Emma Goto üçô</author>
      <pubDate>Fri, 04 Jun 2021 12:23:18 +0000</pubDate>
      <link>https://dev.to/emma/generate-custom-social-card-images-for-your-gatsby-blog-5ha6</link>
      <guid>https://dev.to/emma/generate-custom-social-card-images-for-your-gatsby-blog-5ha6</guid>
      <description>&lt;p&gt;One of the ways you can make your Gatsby posts stand out to readers is to add a social card image. In this post, you'll learn how to generate these images automatically with &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-plugin-react-social-cards"&gt;gatsby-plugin-react-social-cards&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-social-card"&gt;
  &lt;/a&gt;
  What is a social card?
&lt;/h2&gt;

&lt;p&gt;A social card is the preview shown when you paste a link into a site like Twitter:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2IHd_yma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/emgoto/emgoto.com/master/posts/gatsby-react-social-card/twitter-card-preview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2IHd_yma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/emgoto/emgoto.com/master/posts/gatsby-react-social-card/twitter-card-preview.png" alt="Social card image on Twitter preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This can give readers more context on your post, and entice them to click the link. &lt;/p&gt;

&lt;p&gt;There are a couple of existing &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-plugin-social-cards/"&gt;Gatsby&lt;/a&gt; &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-remark-social-cards/"&gt;plugins&lt;/a&gt; which let you create social card images from a template. However their customisation options are quite limited. Up until now I've been using a modified version of &lt;a href="https://www.maxpou.fr/generate-social-image-share-with-gatsby"&gt;Maxence Poutord's script&lt;/a&gt;, which lets you take a screenshot of a React component.&lt;/p&gt;

&lt;p&gt;I decided to turn this script into a proper Gatsby plugin, &lt;a href="https://www.gatsbyjs.com/plugins/gatsby-plugin-react-social-cards"&gt;gatsby-plugin-react-social-cards&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-gatsbypluginreactsocialcards-work"&gt;
  &lt;/a&gt;
  How does gatsby-plugin-react-social-cards work?
&lt;/h2&gt;

&lt;p&gt;Before diving into the set-up, here's a quick summary of how the plugin works. &lt;/p&gt;

&lt;p&gt;When you run &lt;code&gt;gatsby develop&lt;/code&gt;, the plugin will create new pages for each of your social card images. The page will render your custom React component:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-2Ig_5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/emgoto/emgoto.com/master/posts/gatsby-react-social-card/social-card-page.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-2Ig_5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/emgoto/emgoto.com/master/posts/gatsby-react-social-card/social-card-page.png" alt="Social card page being rendered"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can pass in all the relevant information from your post's frontmatter (like title and description) into the component as props, and render them however you want.&lt;/p&gt;

&lt;p&gt;The plugin then uses &lt;a href="https://developers.google.com/web/tools/puppeteer"&gt;Puppeteer&lt;/a&gt; to take a screenshot of that component, and save it to your images folder:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jtdquc7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/emgoto/emgoto.com/master/posts/gatsby-react-social-card/gatsby-react-social-card-twitter.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jtdquc7N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/emgoto/emgoto.com/master/posts/gatsby-react-social-card/gatsby-react-social-card-twitter.png" alt="Social card image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started-with-gatsbypluginreactsocialcards"&gt;
  &lt;/a&gt;
  Get started with gatsby-plugin-react-social-cards
&lt;/h2&gt;

&lt;p&gt;First, install the Gatsby plugin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;gatsby-plugin-react-social-cards
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn add gatsby-plugin-react-social-cards
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As with all Gatsby plugins, you‚Äôll need to declare it in your &lt;code&gt;gatsby-config.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-config.js&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`gatsby-plugin-react-social-cards`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// TODO&lt;/span&gt;
                &lt;span class="na"&gt;queryToPages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// TODO&lt;/span&gt;
                &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/components/social-card.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="na"&gt;cardLimit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// for debugging purposes&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="s2"&gt;`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I‚Äôll be walking you through each of the option values below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-your-graphql-query"&gt;
  &lt;/a&gt;
  Creating your GraphQL query
&lt;/h2&gt;

&lt;p&gt;The first option, &lt;code&gt;query&lt;/code&gt;, is the GraphQL query you‚Äôll use to fetch all the pages you want social cards for. &lt;/p&gt;

&lt;p&gt;Your Gatsby blog probably fetches a list of pages to render on your site‚Äôs home page. You can copy-paste this query to get started.&lt;/p&gt;

&lt;p&gt;It should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    {
        allMarkdownRemark {
            nodes {
                fields {
                    slug
                }
                frontmatter {
                    title
                    description
                }
            }
        }
    }
`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The query should contain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The slug for the page&lt;/li&gt;
&lt;li&gt;Any data that you want to use in your social card (such as a page's title or description)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-your-querytopages-function"&gt;
  &lt;/a&gt;
  Create your queryToPages function
&lt;/h2&gt;

&lt;p&gt;You will then need to transform the data into a shape that the plugin can use. One of your options will be a &lt;code&gt;queryToPages&lt;/code&gt; function. It should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-config.js&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allMarkdownRemark&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slugWithoutSlashes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;slugWithoutSlashes&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;pageContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;frontmatter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you loop through all the nodes in your query, each object should contain a &lt;code&gt;slug&lt;/code&gt; and a &lt;code&gt;pageContext&lt;/code&gt; object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/my-page-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;pageContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// You can put anything you want in the context!&lt;/span&gt;
        &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My page title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My page description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;pageContext&lt;/code&gt; object will be passed through as a prop to your React component, so make sure you include everything that you want here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-your-social-card-react-component"&gt;
  &lt;/a&gt;
  Create your social card React component
&lt;/h2&gt;

&lt;p&gt;Now we can create our React component. I've created the file in my &lt;code&gt;components&lt;/code&gt; folder.  If you're putting it somewhere else, make sure you change the location in your plugin options.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/social-card.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SocialCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;pageContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SocialCard&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default, the screenshot taken will be with dimensions 1200px by 628px, which is the &lt;a href="https://sproutsocial.com/insights/social-media-image-sizes-guide/#twitter"&gt;recommended image size for Twitter&lt;/a&gt;. &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; will be passed in as props, so feel free to use this to set the size of your React component as well.&lt;/p&gt;

&lt;p&gt;For now you can keep your component simple - I'll be explaining how to test it below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-your-social-card-react-component"&gt;
  &lt;/a&gt;
  Test your social card React component
&lt;/h2&gt;

&lt;p&gt;After completing the above steps, you can start up your Gatsby blog:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;gatsby develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be able to view the pages for your social cards at a URL like &lt;code&gt;localhost:8000/&amp;lt;your-post-slug&amp;gt;-social-card&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üí° &lt;strong&gt;Can't find the page you're looking for?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Try visiting your Gatsby site's 404 page by making up a broken URL e.g. &lt;code&gt;localhost:8000/blahblah&lt;/code&gt;. This will show you a list of all your site's pages. You may be able to spot the social card pages here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since this React component is going to be screenshotted at 1200x628, make sure that it renders as you would expect at this height and width. You could add some CSS like &lt;code&gt;border: 1px solid red&lt;/code&gt; around your component to double-check.&lt;/p&gt;

&lt;p&gt;Once you‚Äôre happy with the React component, you‚Äôre ready to screenshot!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changing-the-cardlimit-value"&gt;
  &lt;/a&gt;
  Changing the cardLimit value
&lt;/h2&gt;

&lt;p&gt;The final option in our plugin settings was the &lt;code&gt;cardLimit&lt;/code&gt; value. This is included to let you debug your component without any screenshots being taken. Initially its value was &lt;code&gt;0&lt;/code&gt;, but you can change it to &lt;code&gt;1&lt;/code&gt; so that it will take one screenshot. This screenshot will be saved in your &lt;code&gt;static&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;After changing your &lt;code&gt;gatsby-config.js&lt;/code&gt; file, your browser will prompt you to restart your server. I recommend instead &lt;strong&gt;killing and starting your Gatsby server&lt;/strong&gt;. I‚Äôve found that when restarting, it will take the screenshot while your site is still loading.&lt;/p&gt;

&lt;p&gt;If you're not happy with a screenshot, delete the image from the &lt;code&gt;static&lt;/code&gt; folder. The next time you start up your server, the screenshot will be taken again.&lt;/p&gt;

&lt;p&gt;When you‚Äôre happy with the screenshot, you can delete the &lt;code&gt;cardLimit&lt;/code&gt; option altogether. Now it will take screenshots for all your pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-your-image-to-your-seo-component"&gt;
  &lt;/a&gt;
  Add your image to your SEO component
&lt;/h2&gt;

&lt;p&gt;Now that we have our social card images, we can add its URL to your site‚Äôs SEO component. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to know more about SEO and meta tags, I have a separate post on all you need to know about &lt;a href="https://www.emgoto.com/gatsby-metatags/"&gt;meta tags with Gatsby&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I‚Äôm assuming that you already have a SEO component set up, so the following code shows the minimum you need to add social card images to your site:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/seo.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Helmet&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-helmet&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SEO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isPost&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;siteUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://www.emgoto.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;slugWithoutSlashes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\/&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;socialCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isPost&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;siteUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;slugWithoutSlashes&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;-social-card.png`&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;siteUrl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/square-social-card.png`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;twitterCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isPost&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;summary_large_image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;summary&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Helmet&lt;/span&gt;
            &lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;
               &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;twitter:card&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;twitterCard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;og:image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;socialCard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;}],&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm passing in a &lt;code&gt;isPost&lt;/code&gt; prop to my SEO component. Since I only generate social card images for my posts, this lets me fall back to a default image for all other pages on my site.&lt;/p&gt;

&lt;p&gt;I use this square image as my fallback:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cNBPqla6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/emgoto/emgoto.com/master/posts/gatsby-react-social-card/summary-image-preview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cNBPqla6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/emgoto/emgoto.com/master/posts/gatsby-react-social-card/summary-image-preview.png" alt="Summary social card image on Twitter preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;twitterCard&lt;/code&gt; value tells Twitter whether the image is a small square image (&lt;code&gt;summary&lt;/code&gt;) or a large cover image (&lt;code&gt;summary_large_image&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#changing-the-screenshot-size"&gt;
  &lt;/a&gt;
  Changing the screenshot size
&lt;/h2&gt;

&lt;p&gt;Different social media sites use different image sizes. If you wanted to use a different set of dimensions, you can pass it in as a plugin option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// gatsby-config.js&lt;/span&gt;
&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
        &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;628&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;suffix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-social-card&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;suffix&lt;/code&gt; value determines the image name e.g. &lt;code&gt;your-slug-social-card.png&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;dimensions&lt;/code&gt; is an array, you can also pass in more than one item, and create multiple images of varying dimensions per post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-options"&gt;
  &lt;/a&gt;
  Other options
&lt;/h2&gt;

&lt;p&gt;You can further customise the plugin with a couple of other settings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;imageFolder&lt;/strong&gt; - defaults to &lt;code&gt;'static'&lt;/code&gt;. Change if you want to save your images to another folder&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;baseUrl&lt;/strong&gt; - defaults to &lt;code&gt;'http://localhost:8000'&lt;/code&gt;. Change if you start your dev server on another port.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;timeout&lt;/strong&gt; - defaults to &lt;code&gt;5000&lt;/code&gt;. These are the milliseconds waited before the screenshot is taken. Increase this number if you need to wait for images to load, or decrease if you‚Äôre finding it to be too slow.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This was my first ever Gatsby plugin, so I would love to hear your feedback if you gave this plugin a go!&lt;/p&gt;

&lt;p&gt;Please feel free to leave a comment below, or raise an issue on the &lt;a href="https://github.com/emgoto/gatsby-plugin-react-social-cards"&gt;gatsby-plugin-react-social-cards&lt;/a&gt; repository.&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>react</category>
    </item>
    <item>
      <title>Button events in React</title>
      <author>Software Development Academy</author>
      <pubDate>Fri, 04 Jun 2021 12:22:30 +0000</pubDate>
      <link>https://dev.to/softwaredevacademy/button-events-in-react-5cml</link>
      <guid>https://dev.to/softwaredevacademy/button-events-in-react-5cml</guid>
      <description>&lt;p&gt;Behind the scenes, buttons in React behave like pure JavaScript buttons. The advantage is that you can put the event directly in the button without creating a variable to reference the button.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.youtube.com/watch?v=h33Srr5J9nY"&gt;Arrow functions&lt;/a&gt;:&lt;/strong&gt; A video that will help you convert normal functions to arrow functions to be comfortable reading React code.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#intended-result"&gt;
  &lt;/a&gt;
  Intended result
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BhgDezS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5zid09b3076vze52rk1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BhgDezS1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5zid09b3076vze52rk1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1: A simple page with 2 buttons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WZbr2UE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw3tutjvi8mgg2ntu14j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WZbr2UE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw3tutjvi8mgg2ntu14j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Figure 2: App hierarchy diagram.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Legend:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;üü¶ &lt;strong&gt;Blue:&lt;/strong&gt; Component created by us.&lt;/li&gt;
&lt;li&gt;‚óªÔ∏è &lt;strong&gt;Grey:&lt;/strong&gt; Normal tags.&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h1&gt;

&lt;p&gt;There are many ways to create button events in React, but let's focus on 2. They depend if you want to call a function without passing arguments or if you need to pass arguments.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#guide-no"&gt;Calling a function without passing arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#guide-yes"&gt;Calling a function that needs to pass arguments&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span id="guide-no"&gt;¬†&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calling-a-function-without-passing-arguments"&gt;
  &lt;/a&gt;
  Calling a function without passing arguments:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;You click me&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's analyze the code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;function myFunction() {}&lt;/code&gt; Is the function called when you click on a button.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onClick={myFunction}&lt;/code&gt; the &lt;code&gt;onClick&lt;/code&gt; property will fire the function that you pass to it. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We don't put parenthesis in the function inside onClick. Doing so will run the function when the page load, and then the button won't work when the user clicks on it.&lt;/p&gt;

&lt;p&gt;&lt;span id="guide-yes"&gt;¬†&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calling-a-function-that-needs-to-pass-arguments"&gt;
  &lt;/a&gt;
  Calling a function that needs to pass arguments:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;myGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Click me&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's analyze the code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;function myGreet(name){}&lt;/code&gt; The function to run, note that it has an argument.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onClick={() =&amp;gt; myGreet("Eduardo")}&lt;/code&gt; In order to pass a function with arguments, we need to create a function on the fly, inside the onClick event. When the user clicks on the button, it will call the arrow function, thus, running any code inside it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is where the arrow function comes to fruition. This allows us to write a shorter syntax to avoid making our JSX messy.&lt;/p&gt;

&lt;p&gt;Finally, you can pass as many arguments as you want. But to be organized, stick to 1 or 2 arguments. If you need to pass more arguments, use an object or array for better organization.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This article will allow you to practice how to use buttons to modify information on the screen by manipulating the state. &lt;/p&gt;

&lt;p&gt;The next article is &lt;a href="https://dev.to/softwaredevacademy/form-events-in-react-4k8a"&gt;Form events in React&lt;/a&gt; that goes deeper into the state, so users can submit data to your application.&lt;/p&gt;

&lt;p&gt;In you want to see the finished code open this &lt;a href="https://github.com/softwaredevacademy/sda-react-articles"&gt;link&lt;/a&gt; and open the branch buttons.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#additional-reading"&gt;
  &lt;/a&gt;
  Additional reading
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/handling-events.html"&gt;Handling Events&lt;/a&gt; official React documentation&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits:
&lt;/h1&gt;

&lt;p&gt;Cover photo: &lt;span&gt;Photo by &lt;a href="https://unsplash.com/@matthew_t_rader?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Matthew T Rader&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Manage server state with useEffect hook</title>
      <author>Software Development Academy</author>
      <pubDate>Fri, 04 Jun 2021 12:18:49 +0000</pubDate>
      <link>https://dev.to/softwaredevacademy/manage-server-state-with-useeffect-hook-3hbc</link>
      <guid>https://dev.to/softwaredevacademy/manage-server-state-with-useeffect-hook-3hbc</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0ZJgIjIuY7U"&gt;
&lt;/iframe&gt;
 &lt;em&gt;Video tutorial of this article&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article will teach the basics of the &lt;code&gt;useEffect()&lt;/code&gt; hook to make fetch calls to a server.&lt;/p&gt;

&lt;p&gt;We will use the fantastic and free API mockup resource called &lt;a href="https://jsonplaceholder.typicode.com"&gt;JsonPlaceholder&lt;/a&gt; to practice some network calls.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sg3RJLCq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/leh6kt6dk45e3jkllmd4.png" alt="Alt Text"&gt;
&lt;/h2&gt;

&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=RvYYCGs45L4"&gt;Promises&lt;/a&gt;: Explains a way to run code &lt;strong&gt;only&lt;/strong&gt; after other code that we don't know when is going to be ready.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you want to use Async &amp;amp; Await, there is a special hook called useCallback, more info in the section: Additional reading.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#intended-result"&gt;
  &lt;/a&gt;
  Intended result
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--78VgdEM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f66iflyzdwluwxnk363j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--78VgdEM6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f66iflyzdwluwxnk363j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Figure 1: Todo list&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4p37cwme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vndc4m6liktn5sebey2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4p37cwme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7vndc4m6liktn5sebey2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Figure 2: App hierarchy chart.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V1EEe1Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bz1jhkc0qj84uzt37rl6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V1EEe1Ae--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bz1jhkc0qj84uzt37rl6.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#anatomy-of-the-useeffect-hook"&gt;
  &lt;/a&gt;
  Anatomy of the useEffect hook
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r2W7qwhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkx5n1ujhnqfzju769re.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r2W7qwhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkx5n1ujhnqfzju769re.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Figure 3: The parameters of the useEffect hook.&lt;/p&gt;

&lt;p&gt;The first parameter is a function usually written as an arrow function. Inside the function, you do your network call using  &lt;code&gt;fetch()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second parameter is an array of state variables. It is used to tell React to re-render the page only when these state variable changes.&lt;/p&gt;

&lt;p&gt;If you omit the second parameter, React will enter an infinite loop, crashing the application. Why? Because as we mentioned during the &lt;a href="https://dev.to/softwaredevacademy/introduction-to-state-management-and-react-hooks-285j"&gt;Introduction to State management&lt;/a&gt;, React refreshes the page each time the state changes. But if we refresh the page, the fetch data will be called again, changing the state, and the page will be refreshed and so on a so forth.&lt;/p&gt;

&lt;p&gt;Think about the second parameter as a &lt;strong&gt;brake&lt;/strong&gt; to tell React to refresh the page once instead of entering an infinite loop.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ib17WKlZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6e8k9h62k09cxcvj5jj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ib17WKlZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i6e8k9h62k09cxcvj5jj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h1&gt;

&lt;p&gt;To tackle the complexity we will focus on 3 areas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#guide-app"&gt;General app setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#guide-first"&gt;useEffect first argument&lt;/a&gt; (function)&lt;/li&gt;
&lt;li&gt;
&lt;a href="#guide-first"&gt;useEffect second argument&lt;/a&gt; (array)
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TaskItem&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1 App.jsx created&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// State&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;taskData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTaskData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;

  &lt;span class="c1"&gt;// Method&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2 App.jsx useEffect()&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/todos/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTaskData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;setTaskData&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// Component&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TaskList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;taskData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TaskItem&lt;/span&gt; &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;TaskList&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ol&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is the first exercise we have a &lt;code&gt;console.log()&lt;/code&gt; inside the code. This is on purpose, so you can open the console and see the exact moment the &lt;code&gt;App.jsx&lt;/code&gt; component is destroyed and recreated once we have the server's data.&lt;/p&gt;

&lt;p&gt;Lets break down the code line by line:&lt;/p&gt;

&lt;p&gt;&lt;span id="guide-app"&gt;¬†&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#general-app"&gt;
  &lt;/a&gt;
  General App:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;We import the new hook &lt;code&gt;useEffect&lt;/code&gt; in addition to the &lt;code&gt;useState&lt;/code&gt; hook.&lt;/li&gt;
&lt;li&gt;We create a state variable called &lt;code&gt;taskItemData&lt;/code&gt; as an empty array to hold the todo items fetched from the server.&lt;/li&gt;
&lt;li&gt;We use the &lt;code&gt;useEffect()&lt;/code&gt; hook directly without assigning a const or a function.&lt;/li&gt;
&lt;li&gt;Finally, TaskList is a list of &lt;code&gt;&amp;lt;TaskItems/&amp;gt;&lt;/code&gt; by using the &lt;code&gt;taskData&lt;/code&gt; state getter, and we pass to each copy its corresponding item.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span id="guide-first"&gt;¬†&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useeffect-first-argument"&gt;
  &lt;/a&gt;
  useEffect first argument:
&lt;/h3&gt;

&lt;p&gt;Inside &lt;code&gt;useEffect&lt;/code&gt;, we pass the arrow function. This will be called each time the contents of the App component change. In this case, we want to refresh the page when new data arrives from the server.&lt;/p&gt;

&lt;p&gt;Inside the arrow function, a &lt;code&gt;fetch()&lt;/code&gt; function calls the server. Note that we need to append 2 &lt;code&gt;then()&lt;/code&gt; statements to: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To convert our raw data into legible JSON.&lt;/li&gt;
&lt;li&gt;To assign this JSON to our &lt;code&gt;taskData&lt;/code&gt; state using the &lt;code&gt;setTaskData()&lt;/code&gt; setter.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;span id="guide-second"&gt;¬†&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#useeffect-second-argument"&gt;
  &lt;/a&gt;
  useEffect second argument:
&lt;/h3&gt;

&lt;p&gt;We put &lt;code&gt;setTaskData&lt;/code&gt; in the array inside the second argument of the &lt;code&gt;useEffect&lt;/code&gt; hook. Because we are only calling the setter and not the getter, we don't need to add &lt;code&gt;taskData.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you omit the &lt;code&gt;[]&lt;/code&gt; entirely, React will enter an infinite loop because each time you set &lt;code&gt;setTaskData,&lt;/code&gt; the state will change, refresh the page, and when you set the data again, it will refresh over and over.&lt;/p&gt;

&lt;p&gt;If you put the &lt;code&gt;[]&lt;/code&gt; but leave it empty, React will refresh the page 1 time only. This will work for this small example, but on bigger projects, this will stop calling other network calls because you aren't allowing the page to refresh when other pieces of state change. So get used to putting the necessary state getters and setters.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This example taught you the basics of fetching data using the useEffect hook.&lt;/p&gt;

&lt;p&gt;You can take a break before moving to the articles intended for the next day, or &lt;a href="https://dev.to/softwaredevacademy/manage-global-state-with-recoil-js-1h6k"&gt;click here&lt;/a&gt; to continue your studies.&lt;/p&gt;

&lt;p&gt;My recommendation is to practice creating individual projects for each API endpoint that &lt;a href="https://jsonplaceholder.typicode.com"&gt;JSONPlaceholder&lt;/a&gt; has. The goal is to get comfortable setting up the useEffect hook and write its 2 arguments without copying and pasting the code.&lt;/p&gt;

&lt;p&gt;If you want to see the finished code, open this &lt;a href="https://github.com/softwaredevacademy/sda-react-articles"&gt;link&lt;/a&gt; and open the branch server-state.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#additional-reading"&gt;
  &lt;/a&gt;
  Additional reading
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/docs/hooks-reference.html"&gt;React hooks&lt;/a&gt; documentation: For a detailed explanation of the difference between all the available hooks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=0ZJgIjIuY7U"&gt;useCallback hook&lt;/a&gt;: A short video tutorial to help you organize your useEffect code into smaller separated async functions.&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Cover: Photo by &lt;a href="https://unsplash.com/@alexxsvch?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Alexey Savchenko&lt;/a&gt; on &lt;a href="/s/photos/city-night?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Video tutorial: &lt;a href="https://www.youtube.com/watch?v=0ZJgIjIuY7U&amp;amp;feature=emb_title"&gt;Learn useEffect In 13 Minutes - React Hooks Explained&lt;/a&gt; by &lt;a href="https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw"&gt;Web Dev Simplified&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Manage local state with useState hook</title>
      <author>Software Development Academy</author>
      <pubDate>Fri, 04 Jun 2021 12:17:44 +0000</pubDate>
      <link>https://dev.to/softwaredevacademy/manage-local-state-with-usestate-hook-3j2k</link>
      <guid>https://dev.to/softwaredevacademy/manage-local-state-with-usestate-hook-3j2k</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/O6P86uwfdR0"&gt;
&lt;/iframe&gt;
&lt;em&gt;Video tutorial for this article&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's put into practice the concepts of state by using the useState hook to show and update information on the screen.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-requisites
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=UgEaJBz3bjY"&gt;Destructuring&lt;/a&gt;: Watch from the beginning when it mentions arrays until it mentions objects.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#intended-result"&gt;
  &lt;/a&gt;
  Intended result
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jAovGs46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jnhvremd1usswuyapd7l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jAovGs46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jnhvremd1usswuyapd7l.png" alt="Alt Text"&gt;&lt;/a&gt; &lt;br&gt;
Figure 1: The components we will build, the one on the left without state and the one on the right with the state hook.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8NOyTKZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g5333gv02ruy75ndz9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8NOyTKZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8g5333gv02ruy75ndz9i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Figure 2: The application hierarchy diagram.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#type-of-react-hooks"&gt;
  &lt;/a&gt;
  Type of React Hooks
&lt;/h1&gt;

&lt;p&gt;React has many kinds of hooks, but today we will focus on the most basic yet most used scenario to keep the learning process simple.&lt;/p&gt;

&lt;p&gt;The most common used React Hooks to manage different kinds of state:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YKl3vi6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc55wo8xrgi0l9xf7zqa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YKl3vi6r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kc55wo8xrgi0l9xf7zqa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article will cover the first case, the &lt;code&gt;useState()&lt;/code&gt; variable for local state management.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#creating-a-usestate-hook"&gt;
  &lt;/a&gt;
  Creating a useState() hook
&lt;/h1&gt;

&lt;p&gt;To create a &lt;code&gt;useState()&lt;/code&gt; state, follow these steps:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Count &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;increase&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increase counter&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For now ignore, the button that calls a function, we will see it in greater detail on the article about buttons.&lt;/p&gt;

&lt;p&gt;Let's analyze the code line by line:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;import {useState} from "react"&lt;/code&gt; allows us to import the React Hook functionality.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;const [state, setState] = useState(0);&lt;/code&gt; allows us to initialize the React Hook. 

&lt;ul&gt;
&lt;li&gt;The first value is the getter.&lt;/li&gt;
&lt;li&gt;The second value is the setter.&lt;/li&gt;
&lt;li&gt;Inside &lt;code&gt;useState()&lt;/code&gt;, we put the initial value. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;{state}&lt;/code&gt; inside the JSX is used to call the getter and display the information on the screen.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;setState()&lt;/code&gt;is used to call the setter and update the information on the screen.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ljlRIIwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucvl4t8xm06j6arqywj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ljlRIIwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ucvl4t8xm06j6arqywj0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can create hooks using strings, numbers, booleans, arrays, and objects.&lt;/p&gt;

&lt;p&gt;Technically, it will allow you to use functions and classes, but those have some synchronization issues, so please stick with the basic data types mentioned above.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;By reading the theory article and practicing with the code example, it will be easy to understand how to use hooks.&lt;/p&gt;

&lt;p&gt;Now we can move to the next article: &lt;a href="https://dev.to/softwaredevacademy/button-events-in-react-5cml"&gt;Button events in React&lt;/a&gt;, to learn how to use events to manipulate the page using buttons.&lt;/p&gt;

&lt;p&gt;In you want to see a similar exercise, open this &lt;a href="https://github.com/softwaredevacademy/sda-react-articles"&gt;link&lt;/a&gt; and open the branch state.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#additional-reading"&gt;
  &lt;/a&gt;
  Additional reading
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/docs/state-and-lifecycle.html"&gt;State and Lifecycle&lt;/a&gt;: The official documentation of React covering state management. Ignore the components that use classes because they are obsolete and focus only on components that use functions.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/docs/hooks-reference.html"&gt;Hook API Reference&lt;/a&gt;: The official documentation of React covering the topic of React Hooks. Read it in case you want a in depth review of how hook works and more advance types of hooks.&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Cover: Photo by &lt;a href="https://unsplash.com/@mael_balland?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Mael BALLAND&lt;/a&gt; on &lt;a href="/s/photos/hooks?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Video tutorial: &lt;a href="https://www.youtube.com/watch?v=O6P86uwfdR0"&gt;Learn useState In 15 Minutes - React Hooks Explained&lt;/a&gt; by &lt;a href="https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw"&gt;Web Dev Simplified&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Master Design Patterns By Building Real Projects - Builder Pattern - Javascript</title>
      <author>Hiep Le</author>
      <pubDate>Fri, 04 Jun 2021 11:58:49 +0000</pubDate>
      <link>https://dev.to/hieptl/master-design-patterns-by-building-real-projects-builder-pattern-javascript-25f2</link>
      <guid>https://dev.to/hieptl/master-design-patterns-by-building-real-projects-builder-pattern-javascript-25f2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#creational-pattern-builder-pattern"&gt;
  &lt;/a&gt;
  Creational Pattern - Builder Pattern.
&lt;/h2&gt;

&lt;p&gt;This is the third part in my series (23 GoF Design Patterns). My series will help you understand about design patterns by building real projects. For this reason, you can see the places in which each pattern could be applied. I want to focus on learning by doing instead of talking too much about theories. &lt;/p&gt;

&lt;p&gt;I'm Hiep. I work as a full-time software engineer. Most of my open-source projects are focused on one thing - to help people learn üìö.&lt;/p&gt;

&lt;p&gt;I created a git repository that help you understand about design patterns by building real projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Github link: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/hieptl/javascript-dessign-patterns"&gt;https://github.com/hieptl/javascript-dessign-patterns&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the repository is useful, please help me share the post and give me a Github's star. It will make me feel motivation to work even harder. I will try to make many open sources and share to the community ‚ù§Ô∏è.&lt;/p&gt;

&lt;p&gt;I created a post to share about &lt;strong&gt;learning React by building Netflix&lt;/strong&gt;, I hope that it is useful for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/hieptl/learn-react-by-building-netflix-1127"&gt;https://dev.to/hieptl/learn-react-by-building-netflix-1127&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Table of Contents&lt;/strong&gt;
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;No.&lt;/th&gt;
&lt;th&gt;Topics&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="#definition"&gt;Definition.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="#scenarios"&gt;Scenarios.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;a href="#building-a-bakery-shop"&gt;Building a Bakery Shop.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;a href="#result"&gt;Result.&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a id="definition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-definition"&gt;
  &lt;/a&gt;
  1. Definition.
&lt;/h2&gt;

&lt;p&gt;Builder pattern will help you to separate the construction of a complex object from its representations. We can reuse the same construction process to create various representations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We can feel free to add properties to an object in different ways by using Javascript, for example, you can use object literal syntax and write something like this:&lt;/p&gt;


&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cake&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;cake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasSugar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;cake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasStrawberry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;However, we should build by ourselves to understand about the core concepts. Therefore, we will feel more interested in programming and increase logical thinking. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a id="scenarios"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-scenarios"&gt;
  &lt;/a&gt;
  2. Scenarios.
&lt;/h2&gt;

&lt;p&gt;We can imagine that we have a bakery. We need to make different cakes by following the requirements from the customers.&lt;/p&gt;

&lt;p&gt;As mentioned before, We can achieve the result in different ways in Javascript. However, we will create the solution by ourselves by using Builder pattern. &lt;/p&gt;

&lt;p&gt;&lt;a id="building-a-bakery-shop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-building-a-bakery"&gt;
  &lt;/a&gt;
  3. Building a Bakery.
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;I want to use Javascript class to implement the idea because in the case you are using object-oriented programming languages or you have to use those languages in the future, you can still implement design patterns by using different languages. In my opinion, design patterns are mindset and approaches and not depend on programming languages.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our classes will be looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Cake&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// you can put other properties for your cake &amp;lt;3.&lt;/span&gt;
  &lt;span class="c1"&gt;// I use sugar and starwberry for the demo purpose.&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasSugar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hasStrawBerry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasSugar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hasSugar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasStrawBerry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hasStrawBerry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CakeBuilder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cake&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Cake&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;withSugar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasSugar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasSugar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hasSugar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;withStrawberry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hasStrawBerry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasStrawBerry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hasStrawBerry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;makeCake&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cake&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstCakeBuilder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CakeBuilder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cake&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstCakeBuilder&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withSugar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withStrawberry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeCake&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cake&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step 1: We create &lt;strong&gt;Cake&lt;/strong&gt; class. The constructor of the class accepts &lt;strong&gt;hasSugar&lt;/strong&gt; and &lt;strong&gt;hasStrawberry&lt;/strong&gt; properties as parameters. (You can add more properties for your cake, two properties are used for the demo purpose üòÑ).&lt;/p&gt;

&lt;p&gt;Step 2: We create &lt;strong&gt;CakeBuilder&lt;/strong&gt; class. In the constructor of the class, a new cake object will be created. On the other hand, we create methods to build the corresponding properites for the cake object, for example, we have &lt;strong&gt;withSugar&lt;/strong&gt; to build &lt;strong&gt;hasSugar&lt;/strong&gt; property, &lt;strong&gt;withStrawberry&lt;/strong&gt; to build &lt;strong&gt;hasStrawberry&lt;/strong&gt; property and so on. If you have many properties, you just need to create more methods to build values for those properties.&lt;/p&gt;

&lt;p&gt;Step 3: We create &lt;strong&gt;makeCake&lt;/strong&gt; method. The method will not be used to build value for any properties. It is used to return the final cake instance.&lt;/p&gt;

&lt;p&gt;Step 4: In order to use the cake builder, we need to create a new object of &lt;strong&gt;CakeBuilder&lt;/strong&gt; class. By invoking different methods from &lt;strong&gt;cakeBuilder&lt;/strong&gt; object, we are building properties for our cake. Please do not forget about &lt;strong&gt;makeCake&lt;/strong&gt; method. It will return the final cake for us. The last but not least, we assign the final result to &lt;strong&gt;cake&lt;/strong&gt; variable and then you can do everything you want with your cake.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cakeBuilder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;CakeBuilder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cake&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cakeBuilder&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withSugar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withStrawberry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeCake&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a id="result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-result"&gt;
  &lt;/a&gt;
  4. Result.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Cake&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;hasSugar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hasStrawBerry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above result describes that the final cake is created by applying Bulider pattern.&lt;/p&gt;

&lt;p&gt;By using design patterns, we can understand the core concepts and make our code become more readable and cleaner. I hope that the post can help you understand about Builder pattern. &lt;/p&gt;

&lt;p&gt;Thanks and Best Regards,&lt;br&gt;
Hiep.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Avoid These Mistakes as a Junior Developer</title>
      <author>yusufcodes</author>
      <pubDate>Fri, 04 Jun 2021 11:53:22 +0000</pubDate>
      <link>https://dev.to/yusufcodes/avoid-these-mistakes-as-a-junior-developer-f2n</link>
      <guid>https://dev.to/yusufcodes/avoid-these-mistakes-as-a-junior-developer-f2n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction üëãüèΩ
&lt;/h1&gt;

&lt;p&gt;Last year, I took my first steps into the industry as a part-time Junior Developer whilst completing my Computer Science degree. In this post, I want to reflect on some mistakes I‚Äôve made, hoping to help other developers who are early into their careers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-asking-for-help"&gt;
  &lt;/a&gt;
  Not asking for help üò®
&lt;/h2&gt;

&lt;p&gt;As an early-career developer, it is so easy to feel like you need to know everything. You feel like you need to prove yourself to your team, and prove that you belong in the role you've landed, so you want to take everything on without asking for help. However, the honest truth is everyone needs a helping hand at some point, no matter what seniority level they're at.&lt;/p&gt;

&lt;p&gt;As a junior, your colleagues will not expect you to know how to do everything. They are there to help you, and have probably faced the issues you are facing before, so you will save a lot of time by reaching out for help! Asking for help is not a reflection of your ability to do your job. So, when you find yourself struggling, make sure to reach out to someone for help!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asking-for-help-in-the-wrong-way"&gt;
  &lt;/a&gt;
  Asking for help in the wrong way ü§î
&lt;/h2&gt;

&lt;p&gt;The time of your colleagues is precious, so you want to make sure you've tried everything you can with your skills and knowledge with any problems you face. An example of this is searching online for solutions, or consulting the documentation for the technologies you are working with. After doing some research, you are in a better position to ask for help. See the following example of asking for help:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OK Approach&lt;/strong&gt;: &lt;em&gt;"Hi, I am struggling with Problem X. Any ideas what to do?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Better Approach&lt;/strong&gt;: &lt;em&gt;"Hi, I am struggling with Problem X. I have read this article (link), and had a look at this tutorial (link), and tried applying these, but I am still having problems. Can anyone guide me further?"&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Explaining what you have already tried can save time for your colleagues, and can help them identify whether your approaches were correct in the first place. Take the time to look into your problems a little further, and you may be able to fix things yourself! (And, if not, you will have a much better way of approaching your colleagues).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-tasks-outside-of-your-comfort-zone"&gt;
  &lt;/a&gt;
  Avoiding tasks outside of your comfort zone üôÖüèΩ‚Äç‚ôÇÔ∏è
&lt;/h2&gt;

&lt;p&gt;Alright, hear me out with this one. I'm not saying you must take on the most difficult ticket on day one. However, as you build up in knowledge and confidence, you will be in a better position to attempt harder tasks. You can use guidance from your management to help you move onto harder tasks. If you stick with the same tasks you always do, without trying to move up in complexity, it will take longer to advance as a developer. Your employer will favour your willingness to try harder things, and in the end it will only help you grow as a developer - so keep pushing yourself! (But not too hard, burnout is real üòÖ).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-breaking-down-big-tasks"&gt;
  &lt;/a&gt;
  Not breaking down big tasks ‚úçüèΩ
&lt;/h2&gt;

&lt;p&gt;When you first get started as a dev, it can be easy to just follow a single ticket through without thinking about the magnitude of the task. However, if you try and think about the individual blocks of tasks you need to carry out, you could break down a larger task into smaller ones.&lt;/p&gt;

&lt;p&gt;The benefit of this is it will help  you work in a more Agile way, allowing you to deliver smaller chunks of work in a quicker timeframe. This can help you receive feedback from your colleagues much sooner, helping you deliver the best piece of software in a better timeframe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#putting-yourself-down"&gt;
  &lt;/a&gt;
  Putting yourself down üòî
&lt;/h2&gt;

&lt;p&gt;If there is anything I excel at, it is putting myself down. When I make progress with a task, I will dismiss it two seconds later and identify what I must do next. This is not a great way to work, because you will never feel satisfied with the progress you're making at such an early stage of your career. It may seem small in the moment, but these little wins will contribute to larger successes as you work on more tasks.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion ‚úÖ
&lt;/h1&gt;

&lt;p&gt;These were just a few little mistakes I've identified in myself as an early-career developer. I hope I can continue identifying and learning from my mistakes, and that these are useful for any other early-career developers out there!&lt;/p&gt;

&lt;p&gt;Can you think of any other mistakes to avoid? Let's generate a discussion in the comments below ü§î!&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>career</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Awesome loading animation you have never seen it before.</title>
      <author>Techy Programmers</author>
      <pubDate>Fri, 04 Jun 2021 11:47:27 +0000</pubDate>
      <link>https://dev.to/kunaal438/how-to-make-this-awesome-loading-animation-136l</link>
      <guid>https://dev.to/kunaal438/how-to-make-this-awesome-loading-animation-136l</guid>
      <description>&lt;p&gt;Hello, glad you are here. I am kunaal and today we will see how to make an awesome loading animation which you have never seen before. You can see demo below.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h1&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kunaal_kumar/embed/jOBzpLG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial-"&gt;
  &lt;/a&gt;
  Video Tutorial -
&lt;/h1&gt;

&lt;p&gt;If you find this article hard or for better explanation. You can watch video tutorial.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9wZTyLLqZhc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you like the video tutorial. Please consider subscribing my youtube channel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h1&gt;

&lt;p&gt;Inside HTML file under &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loading-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"shutter top"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loading-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"shutter bottom"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loading-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"landing-page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add some styles too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--loading-text-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'roboto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.landing-page&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(bg.jpeg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.loading-container&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.shutter&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0a0a0a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.shutter.top&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;slide-top&lt;/span&gt; &lt;span class="m"&gt;5s&lt;/span&gt; &lt;span class="m"&gt;4s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.shutter.bottom&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;slide-bottom&lt;/span&gt; &lt;span class="m"&gt;5s&lt;/span&gt; &lt;span class="m"&gt;4s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.loading-text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(bg.jpeg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--loading-text-size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-text-fill-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-background-clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.top&lt;/span&gt; &lt;span class="nc"&gt;.loading-text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50vh&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--loading-text-size&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt; &lt;span class="m"&gt;1.6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.bottom&lt;/span&gt; &lt;span class="nc"&gt;.loading-text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--loading-text-size&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt; &lt;span class="m"&gt;1.6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--loading-text-size&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt; &lt;span class="m"&gt;1.6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;slide-top&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;slide-bottom&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* media query */&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;996px&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;--loading-text-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;130px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;750px&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;--loading-text-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nd"&gt;:root&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="py"&gt;--loading-text-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At last add JS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loadingText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.loading-text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;loadingText&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;loadingText&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Done. The animation is done. If you want to understand it more clear make sure to checkout tutorial video.&lt;/p&gt;

&lt;p&gt;I hope you understood everything. If you have any doubt or you find any mistake that I made or you have any suggestion feel free to ask me in comment.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are interested in programming and want to know how I a 15yr old teen do coding make these design. You can follow me on my Instagram. I am also planning to post my game development stuff on Instagram.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/kunaal438/loading-animation"&gt;Source Code&lt;/a&gt;,&lt;a href="https://www.youtube.com/c/TechyProgrammers/"&gt;My youtube Channel&lt;/a&gt;, &lt;a href="https://www.instagram.com/techy_programmers/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Scaling Keycloak on Distroless into Kubernetes</title>
      <author>Œõ\: Davin Kevin</author>
      <pubDate>Fri, 04 Jun 2021 11:40:28 +0000</pubDate>
      <link>https://dev.to/stack-labs/scaling-keycloak-on-distroless-into-kubernetes-fj3</link>
      <guid>https://dev.to/stack-labs/scaling-keycloak-on-distroless-into-kubernetes-fj3</guid>
      <description>&lt;p&gt;In the two previous articles, we discovered how to &lt;strong&gt;build&lt;/strong&gt; and &lt;strong&gt;run&lt;/strong&gt; &lt;strong&gt;Keycloak&lt;/strong&gt; with a &lt;strong&gt;Distroless&lt;/strong&gt; base image in a &lt;strong&gt;Kubernetes&lt;/strong&gt; cluster. The previously seen configuration was Ok for one instance, but the &lt;strong&gt;clustering&lt;/strong&gt; capabilities of &lt;strong&gt;Keycloak&lt;/strong&gt; was not used, which can cause some &lt;strong&gt;problems&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ngNK8WMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kv5ulw03zn6qnihvfive.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ngNK8WMG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kv5ulw03zn6qnihvfive.jpeg" alt="clustering"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keycloak&lt;/strong&gt; has a built-in clustering mode, based on &lt;strong&gt;Wildfly&lt;/strong&gt; &amp;amp; &lt;strong&gt;Infinispan&lt;/strong&gt;. To activate it, some &lt;strong&gt;start-up&lt;/strong&gt; scripts are using &lt;strong&gt;environment values&lt;/strong&gt; to set up everything for you‚Ä¶ and of course, those scripts are &lt;code&gt;bash&lt;/code&gt; based, not compatible with our &lt;em&gt;version&lt;/em&gt; of &lt;strong&gt;Keycloak&lt;/strong&gt;. Here, we will see how to configure this and deploy it to &lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#-raw-standalonehaxml-endraw-extraction"&gt;
  &lt;/a&gt;
  &lt;code&gt;standalone-ha.xml&lt;/code&gt; extraction
&lt;/h1&gt;

&lt;p&gt;We will use the same strategy seen before to generate the &lt;code&gt;standalone-ha.xml&lt;/code&gt;, by running the official image with parameters we want to use and extract the file with &lt;code&gt;docker cp&lt;/code&gt; command line. Let's see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# In the first shell&lt;/span&gt;
&lt;span class="c"&gt;# Creation of a docker network&lt;/span&gt;
first-shell&lt;span class="nv"&gt;$ &lt;/span&gt;docker network create keycloak-network
4da77163731b584bef2c6d0b00386b9d62e31fa216204c6c6795f66e109ba1a6
&lt;span class="c"&gt;# Launching PostgreSQL linked to the network previously created&lt;/span&gt;
first-shell&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; postgres &lt;span class="nt"&gt;--net&lt;/span&gt; keycloak-network &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;POSTGRES_DB&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;keycloak &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;POSTGRES_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;keycloak &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;password postgres
229816da42707e772542f1b089c616a2333a6fbe1aea2be7efe658d6f2c934a1
first-shell&lt;span class="nv"&gt;$ &lt;/span&gt;docker run &lt;span class="nt"&gt;-it&lt;/span&gt; &lt;span class="nt"&gt;--rm&lt;/span&gt; &lt;span class="nt"&gt;--name&lt;/span&gt; keycloak &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;DB_ADDR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;postgres &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;DB_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;keycloak &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;DB_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;password &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;KEYCLOAK_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;foo &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;KEYCLOAK_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;bar &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;JGROUPS_DISCOVERY_PROTOCOL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"dns.DNS_PING"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;JGROUPS_TRANSPORT_STACK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tcp &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="nv"&gt;JGROUPS_DISCOVERY_PROPERTIES&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"dns_query=keycloak-headless"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--net&lt;/span&gt; keycloak-network jboss/keycloak:13.0.1

&lt;span class="o"&gt;=========================================================================&lt;/span&gt;

  Using PostgreSQL database

&lt;span class="o"&gt;=========================================================================&lt;/span&gt;

19:15:45,322 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.modules] &lt;span class="o"&gt;(&lt;/span&gt;CLI &lt;span class="nb"&gt;command &lt;/span&gt;executor&lt;span class="o"&gt;)&lt;/span&gt; JBoss Modules version 1.11.0.Final
19:15:45,389 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.msc] &lt;span class="o"&gt;(&lt;/span&gt;CLI &lt;span class="nb"&gt;command &lt;/span&gt;executor&lt;span class="o"&gt;)&lt;/span&gt; JBoss MSC version 1.4.12.Final
19:15:45,399 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.threads] &lt;span class="o"&gt;(&lt;/span&gt;CLI &lt;span class="nb"&gt;command &lt;/span&gt;executor&lt;span class="o"&gt;)&lt;/span&gt; JBoss Threads version 2.4.0.Final
19:15:45,542 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;MSC service thread 1-2&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0049: Keycloak 13.0.1 &lt;span class="o"&gt;(&lt;/span&gt;WildFly Core 15.0.1.Final&lt;span class="o"&gt;)&lt;/span&gt; starting
...
19:16:23,596 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as.server] &lt;span class="o"&gt;(&lt;/span&gt;ServerService Thread Pool &lt;span class="nt"&gt;--&lt;/span&gt; 46&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0010: Deployed &lt;span class="s2"&gt;"keycloak-server.war"&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;runtime-name : &lt;span class="s2"&gt;"keycloak-server.war"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
19:16:23,671 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as.server] &lt;span class="o"&gt;(&lt;/span&gt;Controller Boot Thread&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0212: Resuming server
19:16:23,679 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;Controller Boot Thread&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0025: Keycloak 13.0.1 &lt;span class="o"&gt;(&lt;/span&gt;WildFly Core 15.0.1.Final&lt;span class="o"&gt;)&lt;/span&gt; started &lt;span class="k"&gt;in &lt;/span&gt;25820ms - Started 692 of 978 services &lt;span class="o"&gt;(&lt;/span&gt;686 services are lazy, passive or on-demand&lt;span class="o"&gt;)&lt;/span&gt;
19:16:23,685 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;Controller Boot Thread&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0060: Http management interface listening on http://127.0.0.1:9990/management
19:16:23,686 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.jboss.as] &lt;span class="o"&gt;(&lt;/span&gt;Controller Boot Thread&lt;span class="o"&gt;)&lt;/span&gt; WFLYSRV0051: Admin console listening on http://127.0.0.1:9990 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see we add some extra parameters for the &lt;strong&gt;clustering mode&lt;/strong&gt;, based on &lt;code&gt;JGROUPS&lt;/code&gt;. Some details are in the &lt;a href="https://hub.docker.com/r/jboss/keycloak/"&gt;docker official documentation&lt;/a&gt; but you will find more in the &lt;a href="https://www.keycloak.org/docs/latest/server_installation/#_clustering"&gt;keycloak server installation documentation&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The simplest solution to set up cluster mode in a &lt;strong&gt;Kubernetes&lt;/strong&gt; environment is to use &lt;code&gt;DNS_PING&lt;/code&gt; over &lt;code&gt;TCP&lt;/code&gt;. This is why we defined the following environment values in the previous &lt;code&gt;shell&lt;/code&gt; example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;JGROUPS_DISCOVERY_PROTOCOL="dns.DNS_PING"&lt;/code&gt; to activate &lt;code&gt;DNS_PING&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;JGROUPS_TRANSPORT_STACK=tcp&lt;/code&gt; to activate clustering over &lt;code&gt;TCP&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;JGROUPS_DISCOVERY_PROPERTIES="dns_query=keycloak-headless"&lt;/code&gt; to provide a way to find other instance (we will describe it in the next paragraph).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, in another shell, we will &lt;strong&gt;steal&lt;/strong&gt; again the &lt;code&gt;standalone-ha.xml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: In the previous article, we were targeting the &lt;code&gt;standalone.xml&lt;/code&gt;, the &lt;code&gt;HA&lt;/code&gt; version contains a more robust configuration for our use case in a cluster mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;second-shell&lt;span class="nv"&gt;$ &lt;/span&gt;docker &lt;span class="nb"&gt;cp &lt;/span&gt;keycloak:/opt/jboss/keycloak/standalone/configuration/standalone-ha.xml &lt;span class="nb"&gt;.&lt;/span&gt;
second-shell&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls
&lt;/span&gt;standalone-ha.xml
&lt;span class="c"&gt;# We can now stop the keycloak container&lt;/span&gt;
second-shell&lt;span class="nv"&gt;$ &lt;/span&gt;docker stop keycloak
keycloak
second-shell&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If you want to set up other parameters, you can use this method for almost everything ü§©.&lt;/p&gt;

&lt;p&gt;If we look into the &lt;code&gt;standalone-ha.xml&lt;/code&gt; file, we can see an important configuration for our clustering mode:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- standalone-ha.xml --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;subsystem&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"urn:jboss:domain:jgroups:8.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;channels&lt;/span&gt; &lt;span class="na"&gt;default=&lt;/span&gt;&lt;span class="s"&gt;"ee"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;channel&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"ee"&lt;/span&gt; &lt;span class="na"&gt;stack=&lt;/span&gt;&lt;span class="s"&gt;"tcp"&lt;/span&gt; &lt;span class="na"&gt;cluster=&lt;/span&gt;&lt;span class="s"&gt;"ejb"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/channels&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;stacks&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;stack&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"tcp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;transport&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"TCP"&lt;/span&gt; &lt;span class="na"&gt;socket-binding=&lt;/span&gt;&lt;span class="s"&gt;"jgroups-tcp"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;protocol&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"dns.DNS_PING"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;property&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"dns_query"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;keycloak-headless&lt;span class="nt"&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/protocol&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;protocol&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"MERGE3"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;socket-protocol&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"FD_SOCK"&lt;/span&gt; &lt;span class="na"&gt;socket-binding=&lt;/span&gt;&lt;span class="s"&gt;"jgroups-tcp-fd"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;protocol&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"FD_ALL"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;protocol&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"VERIFY_SUSPECT"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;protocol&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"pbcast.NAKACK2"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;protocol&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"UNICAST3"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;protocol&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"pbcast.STABLE"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;protocol&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"pbcast.GMS"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;protocol&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"MFC"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;protocol&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"FRAG3"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/stack&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/stacks&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/subsystem&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This file will configure &lt;strong&gt;Keycloak&lt;/strong&gt; to find other instances through the &lt;code&gt;DNS_PING&lt;/code&gt; protocol. In fact, &lt;strong&gt;Keycloak&lt;/strong&gt; will forge a DNS request to find IPs behind the domain name &lt;code&gt;keycloak-headless&lt;/code&gt;‚Ä¶ easy as pie!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#kubernetes-deployment"&gt;
  &lt;/a&gt;
  Kubernetes deployment
&lt;/h1&gt;

&lt;p&gt;Keycloak is ready for clustering mode, but we have to adapt our &lt;strong&gt;deployment&lt;/strong&gt; to allow this specific configuration where each instance can communicate to each other. &lt;/p&gt;

&lt;p&gt;The first modification is at &lt;strong&gt;deployment&lt;/strong&gt; level, to expose some extra ports dedicated to instance-to-instance communication:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keycloak&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keycloak&lt;/span&gt;
          &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Standard HTTP port used by keycloak&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt;
              &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
            &lt;span class="c1"&gt;# Port used by Jgroups to communicate&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;containerPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7600&lt;/span&gt;
              &lt;span class="na"&gt;protocol&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;TCP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To work well, &lt;strong&gt;Jgroups&lt;/strong&gt; has to be bound to the Pod IP. In &lt;strong&gt;Kubernetes&lt;/strong&gt; world, we usually don't know the Pod IP in advance, so we will have to inject the Pod IP in the &lt;strong&gt;deployment&lt;/strong&gt; and use it in the &lt;code&gt;args&lt;/code&gt; part, like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;apps/v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Deployment&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keycloak&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;containers&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keycloak&lt;/span&gt;
          &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-D[Standalone]"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-server"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-Xms64m"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-Xmx512m"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-XX:MetaspaceSize=96M"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-XX:MaxMetaspaceSize=256m"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-Djava.net.preferIPv4Stack=true"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-Djboss.modules.system.pkgs=org.jboss.byteman"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-Djava.awt.headless=true"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--add-exports=java.base/sun.nio.ch=ALL-UNNAMED"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--add-exports=jdk.unsupported/sun.misc=ALL-UNNAMED"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;--add-exports=jdk.unsupported/sun.reflect=ALL-UNNAMED"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-Dorg.jboss.boot.log.file=/opt/jboss/keycloak/standalone/log/server.log"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-Dlogging.configuration=file:/opt/jboss/keycloak/standalone/configuration/logging.properties"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-jar"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/opt/jboss/keycloak/jboss-modules.jar"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-mp"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;/opt/jboss/keycloak/modules"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;org.jboss.as.standalone"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-Djboss.home.dir=/opt/jboss/keycloak"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-Djboss.server.base.dir=/opt/jboss/keycloak/standalone"&lt;/span&gt;
            &lt;span class="c1"&gt;# Note we have changed the command here to use the standalone-ha.xml file&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-c=standalone-ha.xml"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-b=0.0.0.0"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-bprivate=0.0.0.0"&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;-bmanagement=0.0.0.0"&lt;/span&gt;
           &lt;span class="c1"&gt;# Thanks to the Kubernetes interpolation, we are able to launch the app&lt;/span&gt;
           &lt;span class="c1"&gt;# with a custom parameter for each pods. &lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;-Djgroups.bind_addr=$(HOST_IP)'&lt;/span&gt;
          &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# the HOST_IP environment value is populated by Kubernetes with &lt;/span&gt;
            &lt;span class="c1"&gt;# the current Pod IP coming from `status.podIP`.&lt;/span&gt;
            &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HOST_IP&lt;/span&gt;
              &lt;span class="na"&gt;valueFrom&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                &lt;span class="na"&gt;fieldRef&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
                  &lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
                  &lt;span class="na"&gt;fieldPath&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;status.podIP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With those modifications, &lt;strong&gt;Keycloak&lt;/strong&gt; will be able to work in cluster mode‚Ä¶ but it won't be able to find any other instances üòî. We have to add a way to discover other instances üíá‚Äç‚ôÄÔ∏è! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#headless-service-to-the-rescue"&gt;
  &lt;/a&gt;
  Headless Service to the rescue!
&lt;/h1&gt;

&lt;p&gt;In &lt;strong&gt;Kubernetes&lt;/strong&gt;, usually we are using &lt;strong&gt;Service&lt;/strong&gt; to expose one domain name with multiple instances of an application behind it. In our case, we want to be able to fetch every IPs behind a domain name, and this is what &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#headless-services"&gt;&lt;strong&gt;Headless Service&lt;/strong&gt;&lt;/a&gt; is for!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Service&lt;/span&gt;
&lt;span class="na"&gt;metadata&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keycloak-headless&lt;/span&gt;
&lt;span class="na"&gt;spec&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Important parameter to discover every instance even before its complete startup&lt;/span&gt;
  &lt;span class="na"&gt;publishNotReadyAddresses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="na"&gt;clusterIP&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;None&lt;/span&gt;
  &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ping&lt;/span&gt;
      &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7600&lt;/span&gt;
      &lt;span class="na"&gt;targetPort&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7600&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keycloak&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to this, every &lt;strong&gt;DNS&lt;/strong&gt; query made by &lt;strong&gt;Jgroups&lt;/strong&gt; on the domaine &lt;code&gt;keycloak-headless&lt;/code&gt; will result to the complete list of &lt;strong&gt;Keycloak&lt;/strong&gt; pod IPs in namespace!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#demo-time"&gt;
  &lt;/a&gt;
  Demo time!
&lt;/h1&gt;

&lt;p&gt;We will deploy and scale our keycloak application and see clustering mode in action. The &lt;code&gt;kustomization.yaml&lt;/code&gt; is similar to version in the second part of this series:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;kustomize.config.k8s.io/v1beta1&lt;/span&gt;
&lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Kustomization&lt;/span&gt;

&lt;span class="na"&gt;namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keycloak&lt;/span&gt;

&lt;span class="na"&gt;resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;keycloak.yaml&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;database.yaml&lt;/span&gt;

&lt;span class="na"&gt;configMapGenerator&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;keycloak&lt;/span&gt;
    &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;standalone-ha.xml&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;database&lt;/span&gt;
    &lt;span class="na"&gt;literals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;user=keycloak&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;name=keycloak&lt;/span&gt;

&lt;span class="na"&gt;secretGenerator&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;database&lt;/span&gt;
    &lt;span class="na"&gt;literals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;password=sPCwZjuq8CMvrBn7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we deploy it, we will have the following result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl apply &lt;span class="nt"&gt;-k&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
configmap/database-56h9f7gfdh created
configmap/keycloak-k97c6gkct6 created
secret/database-8g8gk22d26 created
service/database created
service/keycloak-headless created
service/keycloak created
deployment.apps/database created
deployment.apps/keycloak created
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pods
NAME                        READY   STATUS    RESTARTS   AGE
database-5dcc69b7b6-m48h9   1/1     Running   0          7s
keycloak-7f5f7bd8c6-7s2br   0/1     Running   0          7s
&lt;span class="c"&gt;# After few seconds‚Ä¶&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl get pods
NAME                        READY   STATUS    RESTARTS   AGE
database-5dcc69b7b6-m48h9   1/1     Running   0          67s
keycloak-7f5f7bd8c6-7s2br   1/1     Running   0          67s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we look at the &lt;strong&gt;Keycloak&lt;/strong&gt; logs, everything looks good. We can scale it up and see if &lt;strong&gt;clustering&lt;/strong&gt; mode do its job:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl scale deploy/keycloak &lt;span class="nt"&gt;--replicas&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2
deployment.apps/keycloak scaled
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in the log of the previously running instance, we can see the following messages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl logs keycloak-7f5f7bd8c6-7s2br
20:05:51,480 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;thread-19,ejb,keycloak-7f5f7bd8c6-7s2br&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;actionTokens] ISPN100009: Advancing to rebalance phase READ_NEW_WRITE_ALL, topology &lt;span class="nb"&gt;id &lt;/span&gt;10
20:05:51,480 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;thread-27,ejb,keycloak-7f5f7bd8c6-7s2br&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;offlineSessions] ISPN100009: Advancing to rebalance phase READ_NEW_WRITE_ALL, topology &lt;span class="nb"&gt;id &lt;/span&gt;10
20:05:51,480 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;thread-28,ejb,keycloak-7f5f7bd8c6-7s2br&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;authenticationSessions] ISPN100010: Finished rebalance with members &lt;span class="o"&gt;[&lt;/span&gt;keycloak-7f5f7bd8c6-7s2br, keycloak-7f5f7bd8c6-dbfxh], topology &lt;span class="nb"&gt;id &lt;/span&gt;11
20:05:51,482 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;thread-12,ejb,keycloak-7f5f7bd8c6-7s2br&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;offlineClientSessions] ISPN100009: Advancing to rebalance phase READ_NEW_WRITE_ALL, topology &lt;span class="nb"&gt;id &lt;/span&gt;10
20:05:51,471 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;thread-25,ejb,keycloak-7f5f7bd8c6-7s2br&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;clientSessions] ISPN100009: Advancing to rebalance phase READ_ALL_WRITE_ALL, topology &lt;span class="nb"&gt;id &lt;/span&gt;9
20:05:51,486 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;non-blocking-thread--p6-t2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;sessions] ISPN100010: Finished rebalance with members &lt;span class="o"&gt;[&lt;/span&gt;keycloak-7f5f7bd8c6-7s2br, keycloak-7f5f7bd8c6-dbfxh], topology &lt;span class="nb"&gt;id &lt;/span&gt;11
20:05:51,493 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;non-blocking-thread--p6-t2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;offlineSessions] ISPN100010: Finished rebalance with members &lt;span class="o"&gt;[&lt;/span&gt;keycloak-7f5f7bd8c6-7s2br, keycloak-7f5f7bd8c6-dbfxh], topology &lt;span class="nb"&gt;id &lt;/span&gt;11
20:05:51,493 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;non-blocking-thread--p6-t1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;loginFailures] ISPN100009: Advancing to rebalance phase READ_NEW_WRITE_ALL, topology &lt;span class="nb"&gt;id &lt;/span&gt;10
20:05:51,499 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;non-blocking-thread--p6-t1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;actionTokens] ISPN100010: Finished rebalance with members &lt;span class="o"&gt;[&lt;/span&gt;keycloak-7f5f7bd8c6-7s2br, keycloak-7f5f7bd8c6-dbfxh], topology &lt;span class="nb"&gt;id &lt;/span&gt;11
20:05:51,503 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;thread-28,ejb,keycloak-7f5f7bd8c6-7s2br&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;offlineClientSessions] ISPN100010: Finished rebalance with members &lt;span class="o"&gt;[&lt;/span&gt;keycloak-7f5f7bd8c6-7s2br, keycloak-7f5f7bd8c6-dbfxh], topology &lt;span class="nb"&gt;id &lt;/span&gt;11
20:05:51,506 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;non-blocking-thread--p6-t2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;clientSessions] ISPN100009: Advancing to rebalance phase READ_NEW_WRITE_ALL, topology &lt;span class="nb"&gt;id &lt;/span&gt;10
20:05:51,512 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;non-blocking-thread--p6-t2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;loginFailures] ISPN100010: Finished rebalance with members &lt;span class="o"&gt;[&lt;/span&gt;keycloak-7f5f7bd8c6-7s2br, keycloak-7f5f7bd8c6-dbfxh], topology &lt;span class="nb"&gt;id &lt;/span&gt;11
20:05:51,522 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;thread-28,ejb,keycloak-7f5f7bd8c6-7s2br&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;clientSessions] ISPN100010: Finished rebalance with members &lt;span class="o"&gt;[&lt;/span&gt;keycloak-7f5f7bd8c6-7s2br, keycloak-7f5f7bd8c6-dbfxh], topology &lt;span class="nb"&gt;id &lt;/span&gt;11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see the successful operation made by &lt;strong&gt;Infinispan&lt;/strong&gt; to communicate between instances. In the log we found the name of our current pod &lt;code&gt;keycloak-7f5f7bd8c6-7s2br&lt;/code&gt; and the name of the new one created through the &lt;code&gt;scale&lt;/code&gt; command &lt;code&gt;keycloak-7f5f7bd8c6-dbfxh&lt;/code&gt;. If we scale it back to &lt;code&gt;1&lt;/code&gt; instance, new logs will be available:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;kubectl logs keycloak-7f5f7bd8c6-7s2br
20:10:28,787 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;thread-34,ejb,keycloak-7f5f7bd8c6-7s2br&lt;span class="o"&gt;)&lt;/span&gt; ISPN100001: Node keycloak-7f5f7bd8c6-dbfxh left the cluster
20:10:28,790 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;thread-34,ejb,keycloak-7f5f7bd8c6-7s2br&lt;span class="o"&gt;)&lt;/span&gt; ISPN000094: Received new cluster view &lt;span class="k"&gt;for &lt;/span&gt;channel ejb: &lt;span class="o"&gt;[&lt;/span&gt;keycloak-7f5f7bd8c6-7s2br|4] &lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;keycloak-7f5f7bd8c6-7s2br]
20:10:28,791 INFO  &lt;span class="o"&gt;[&lt;/span&gt;org.infinispan.CLUSTER] &lt;span class="o"&gt;(&lt;/span&gt;thread-34,ejb,keycloak-7f5f7bd8c6-7s2br&lt;span class="o"&gt;)&lt;/span&gt; ISPN100001: Node keycloak-7f5f7bd8c6-dbfxh left the cluster
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And &lt;strong&gt;Voila&lt;/strong&gt;!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;This ends this 3-part article on &lt;strong&gt;Keycloak&lt;/strong&gt;, &lt;strong&gt;Distroless&lt;/strong&gt; and &lt;strong&gt;Kubernetes&lt;/strong&gt;. You are now able to deploy a rock-solid, less vulnerable and scalable instance of &lt;strong&gt;Keycloak&lt;/strong&gt; in your own cluster üöÄ.  &lt;/p&gt;

&lt;p&gt;I hope you enjoyed it as mush as I enjoyed writing this article and share this experience about &lt;strong&gt;Keycloak&lt;/strong&gt; configuration. You can find all the sample files from this article in this &lt;strong&gt;GitLab&lt;/strong&gt; repository: &lt;a href="https://gitlab.com/davinkevin/keycloak-distroless"&gt;davinkevin/keycloak-distroless&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>keycloak</category>
      <category>kubernetes</category>
      <category>security</category>
      <category>docker</category>
    </item>
    <item>
      <title>Ace JavaScript Interviews like a Pro</title>
      <author>Yash Mantri</author>
      <pubDate>Fri, 04 Jun 2021 11:29:27 +0000</pubDate>
      <link>https://dev.to/yashmantri20/ace-javascript-interviews-like-a-pro-5bp6</link>
      <guid>https://dev.to/yashmantri20/ace-javascript-interviews-like-a-pro-5bp6</guid>
      <description>&lt;p&gt;Stop saying I have failed in an interview ‚ùå&lt;br&gt;
Just say I got some interview experience ‚úî&lt;/p&gt;

&lt;p&gt;Are you preparing for JavaScript Interviews?&lt;br&gt;
Yes? ü§î&lt;/p&gt;

&lt;p&gt;Then follow me along üëá&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be confident and remove the fear of failing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Believe in your preparation in case you fail you will be having an experience of the interview and the questions that you were not able to answer.&lt;/p&gt;

&lt;p&gt;Work hard and clear the upcoming interview.&lt;/p&gt;

&lt;p&gt;Always learn from mistakes üòÄ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't just copy-paste the code but first try to understand the code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Reason üëá&lt;br&gt;
If the recruiter asks you to explain the code, then you should be able to explain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Different Interview methods:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;a. Machine Coding Round&lt;br&gt;
b. Technical Round&lt;br&gt;
c. Project Discussion&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a.&lt;/strong&gt; Machine Coding Round&lt;/p&gt;

&lt;p&gt;How to tackle a machine coding round?&lt;/p&gt;

&lt;p&gt;If you have a week, then you have an ample amount of time.&lt;/p&gt;

&lt;p&gt;But what if it is just 3 to 4 hours?&lt;br&gt;
Always try to keep interview modules ready before.&lt;/p&gt;

&lt;p&gt;Example üëá&lt;br&gt;
Styling, Auth, etc&lt;/p&gt;

&lt;p&gt;Don't waste time on basic things&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b.&lt;/strong&gt; Technical Round&lt;/p&gt;

&lt;p&gt;Prepare well for basic concepts of JavaScript.&lt;/p&gt;

&lt;p&gt;You may be thinking that many questions can be asked. So, what are some common questions?&lt;/p&gt;

&lt;p&gt;Hold on üòÅ&lt;/p&gt;

&lt;p&gt;Here is the &lt;strong&gt;list of some common questions&lt;/strong&gt; üëá&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;var vs let vs const&lt;/li&gt;
&lt;li&gt;Arrays&lt;/li&gt;
&lt;li&gt;Block Scope&lt;/li&gt;
&lt;li&gt;== and ===&lt;/li&gt;
&lt;li&gt;Some common Array method: a. map b. reduce c. filter d. find&lt;/li&gt;
&lt;li&gt;Hoisting&lt;/li&gt;
&lt;li&gt;this keyword&lt;/li&gt;
&lt;li&gt;call, bind and apply&lt;/li&gt;
&lt;li&gt;async and defer&lt;/li&gt;
&lt;li&gt;local and session storage&lt;/li&gt;
&lt;li&gt;Timers: setTimeout, setInterval, clearTimeout&lt;/li&gt;
&lt;li&gt;Closure&lt;/li&gt;
&lt;li&gt;Promises&lt;/li&gt;
&lt;li&gt;async/wait&lt;/li&gt;
&lt;li&gt;Polyfills: map, bind&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Good to know:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Debouncing&lt;/li&gt;
&lt;li&gt;Throttling&lt;/li&gt;
&lt;li&gt;Performance Optimization: &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;a. Caching&lt;br&gt;
  b. Code Splitting &lt;br&gt;
  c. Bundling &lt;br&gt;
  d. Minification &lt;br&gt;
  e. Server-Side Rendering&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speak while you write the code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Reason üëá&lt;br&gt;
If you are writing the wrong code recruiter might help you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c.&lt;/strong&gt; Project Discussion Round&lt;/p&gt;

&lt;p&gt;Understand the code and workflow.&lt;/p&gt;

&lt;p&gt;Reason üëá&lt;br&gt;
The recruiter might ask you to tweak some functionality in your project.&lt;/p&gt;

&lt;p&gt;That's All üòÄ&lt;br&gt;
I hope you liked it üòÅ&lt;/p&gt;

&lt;p&gt;Keep Calm and Ace the Interview üòé&lt;/p&gt;

&lt;p&gt;If you fail in an interview, remember one thing: "Failure is success in progress."&lt;/p&gt;

&lt;p&gt;"Never give up. Today is hard, tomorrow will be worst, but the day after tomorrow will be sunshine."&lt;/p&gt;

&lt;p&gt;Your thoughts?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>interview</category>
    </item>
  </channel>
</rss>
