<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The 6 Features of C# 10 you need to know NOW🤯</title>
      <author>Dotnetsafer</author>
      <pubDate>Mon, 27 Sep 2021 17:27:00 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/the-6-features-of-c-10-you-need-to-know-now-oja</link>
      <guid>https://dev.to/dotnetsafer/the-6-features-of-c-10-you-need-to-know-now-oja</guid>
      <description>&lt;p&gt;With only &lt;strong&gt;two months left&lt;/strong&gt; until the official release of C# 10 and &lt;strong&gt;Microsoft has opened a discussion&lt;/strong&gt; about the new features and functions of the tenth version of its C# language. These enhancements are those announced in C# 10.0 Preview 7.&lt;/p&gt;

&lt;p&gt;The features and improvements that Microsoft is going to implement in the next version of C# 10 are the following 👇&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#record-types-can-seal%C2%A0tostring"&gt;
  &lt;/a&gt;
  💥 Record types can seal ToString
&lt;/h2&gt;

&lt;p&gt;Now in C# 10.0 version, &lt;strong&gt;you have the ability&lt;/strong&gt; to add the sealed modifier when you override ToString in a record type.&lt;/p&gt;

&lt;p&gt;Sealing the ToString method &lt;strong&gt;evade the compiler from synthesizing&lt;/strong&gt; a ToString method for any derived record types. This function &lt;strong&gt;allows you&lt;/strong&gt; to ensure all derived record types use the ToString method defined in a common base record type.&lt;/p&gt;

&lt;p&gt;Microsoft &lt;strong&gt;advises us&lt;/strong&gt; that this feature requires setting the  element in the csproj file to preview.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-record-keyword%C2%A0"&gt;
  &lt;/a&gt;
  What is the Record Keyword? 🤔
&lt;/h3&gt;

&lt;p&gt;If you don't know what I'm talking about, this is normally used to &lt;strong&gt;define a reference type&lt;/strong&gt; that provides built-in functionality for encapsulating data.&lt;/p&gt;

&lt;p&gt;A simple example of what can be done with this is that &lt;strong&gt;you can create record types&lt;/strong&gt; with immutable properties using standard property syntax 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="nf"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And what better way to understand it than with a simple example from Microsoft 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;FirstName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#filescoped-namespace-declaration"&gt;
  &lt;/a&gt;
  🏅 File-scoped namespace declaration
&lt;/h2&gt;

&lt;p&gt;You can now use &lt;strong&gt;the new namespace declaration&lt;/strong&gt; form to declare that all subsequently declared declarations are members of the declared namespace 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;NamespaceName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This new syntax, which will be implemented in the new version of C# 10, &lt;strong&gt;will save both vertical and horizontal space&lt;/strong&gt; for the most common namespace declarations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-namespace-keyword%C2%A0"&gt;
  &lt;/a&gt;
  What is namespace keyword? 🤔
&lt;/h3&gt;

&lt;p&gt;To clarify this, the namespace keyword &lt;strong&gt;is used to declare a scope&lt;/strong&gt; that contains a set of related objects. You can use a namespace to &lt;strong&gt;organize&lt;/strong&gt; code elements and to &lt;strong&gt;create&lt;/strong&gt; globally unique types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;SampleNamespace&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ISampleInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;SampleStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;SampleEnum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;delegate&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SampleDelegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Nested&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleClass2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And sure, but…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-filescope-namespace-declarations"&gt;
  &lt;/a&gt;
  What are file-scope namespace declarations? 🤔
&lt;/h3&gt;

&lt;p&gt;These declarations in particular, &lt;strong&gt;allow you to declare all the types of a file&lt;/strong&gt;, which are in a single namespace.&lt;/p&gt;

&lt;p&gt;To go a little deeper, in this version of C# 10.0, the example is similar to the previous one that has been shown by Microsoft, but &lt;strong&gt;uses a file scope namespace&lt;/strong&gt; declaration 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;SampleFileScopedNamespace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SampleClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ISampleInterface&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;SampleStruct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;SampleEnum&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;delegate&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;SampleDelegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#constant-interpolated-strings"&gt;
  &lt;/a&gt;
  ✨ Constant interpolated strings
&lt;/h2&gt;

&lt;p&gt;To understand the Constant interpolated strings, first we need to understand String Interpolation.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;$&lt;/em&gt; character &lt;strong&gt;identifies a string literal&lt;/strong&gt; as an interpolated string. An interpolated string is a string literal that might contain interpolation expressions.&lt;/p&gt;

&lt;p&gt;When an interpolated string is resolved to a result string, items with interpolation expressions &lt;strong&gt;are replaced by the string representations&lt;/strong&gt; of the expression results.&lt;/p&gt;

&lt;p&gt;Perfect, now my question is….&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-constant-interpolated-strings-have-in-c-10%C2%A0"&gt;
  &lt;/a&gt;
  What Constant interpolated strings have in C# 10? 🤔
&lt;/h3&gt;

&lt;p&gt;Talking about this new feature that C# version 10.0 will bring is const strings, which can be initialized using string interpolation only if the placeholders are themselves constant strings.&lt;/p&gt;

&lt;p&gt;String interpolations can create &lt;strong&gt;more readable const strings&lt;/strong&gt; as the const strings used in the application are constructed. &lt;br&gt;
Placeholder expressions cannot be numeric constants because those constants are &lt;strong&gt;converted to strings at runtime&lt;/strong&gt;. The culture currently in place, could affect the string representation.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#extended-property%C2%A0patterns"&gt;
  &lt;/a&gt;
  🔥 Extended Property Patterns
&lt;/h2&gt;

&lt;p&gt;First, I will explain what are the Extended property patterns. These patterns allow you to have property subpatterns refer to nested members, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;MethodCallExpression&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"MethodName"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;MethodCallExpression&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"MethodName"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that this has been clarified…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-extended-property-patterns-have-in-c-10%C2%A0"&gt;
  &lt;/a&gt;
  What Extended Property Patterns have in C# 10? 🤔
&lt;/h3&gt;

&lt;p&gt;The next functionality that Microsoft discusses is that nested fields or properties &lt;strong&gt;could be referenced&lt;/strong&gt; within a property pattern. The example Microsoft gives is a pattern of the form 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Prop1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prop2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Microsoft tells us that &lt;strong&gt;it will be valid in C# 10.0&lt;/strong&gt; and later, and that this is equivalent to 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Prop1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Prop2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is valid in C# version 8.0 and all subsequent versions&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#declaration-and-assignment-in-same-deconstruction"&gt;
  &lt;/a&gt;
  ⚡ Declaration and assignment in same deconstruction
&lt;/h2&gt;

&lt;p&gt;This new change implemented by the new version, &lt;strong&gt;allows to remove the restriction&lt;/strong&gt; of previous versions of C#. The example that Microsoft gives us in this case is 👇&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;…Previously, a deconstruction could assign all values to existing variables, or initialize newly declared variables:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Initialization:&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// assignment:&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;restriction&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;eliminated&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="m"&gt;10.0&lt;/span&gt; &lt;span class="err"&gt;👇&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#global-using-directives"&gt;
  &lt;/a&gt;
  🌐 Global using directives
&lt;/h2&gt;

&lt;p&gt;You can now use the global modifier to any using directive. With this you can tell the compiler that the directive must be applied to all source files in the compilation.&lt;/p&gt;

&lt;p&gt;Perfect, but as before…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-using-directive"&gt;
  &lt;/a&gt;
  What is the using directive? 🤔
&lt;/h3&gt;

&lt;p&gt;This directive allows you to use &lt;strong&gt;types defined&lt;/strong&gt; in a namespace without specifying the entire namespace of that type.&lt;/p&gt;

&lt;p&gt;To summarize, the using directive imports all types from a single namespace, as shown in the following example 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can apply &lt;strong&gt;two modifiers&lt;/strong&gt; to a using directive:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The global modifier has the same effect as adding the same using directive to every source file in your project. This modifier was introduced in C# 10.0.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The static modifier imports the static members and nested types from a single type rather than importing all the types in a namespace.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;If you liked this article, don't forget to FOLLOW US, so that you can be one of the first to read what's new in .NET.&lt;/p&gt;

&lt;p&gt;And if you are reading this, it means that you belong to the &lt;strong&gt;1% of the people&lt;/strong&gt; who read the articles UNTIL THE END, tell me how many coffees ☕ you need per day to continue programming, if I see many coffees ☕ I will not feel alone and &lt;strong&gt;you will make my day!!!&lt;/strong&gt; 😃👍&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nTBUsnr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/vog34yj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nTBUsnr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/vog34yj.gif" alt="a"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>programming</category>
    </item>
    <item>
      <title>Understanding React Props</title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 27 Sep 2021 16:57:03 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/understanding-react-props-1b3d</link>
      <guid>https://dev.to/ubahthebuilder/understanding-react-props-1b3d</guid>
      <description>&lt;p&gt;React props allow us pass attributes to from one component to another component. props stand for &lt;strong&gt;properties&lt;/strong&gt;. We can create two identical components are pass them different props. That way, we create two instances from one component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;boy&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// import child&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// translates to&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;boy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;boy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-variations-of-the-same-component-using-props"&gt;
  &lt;/a&gt;
  Create variations of the same component using props
&lt;/h3&gt;

&lt;p&gt;We can create two different versions of &lt;code&gt;Child&lt;/code&gt; by simply assigning different props to the two children, thereby creating two instances.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// import child&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;girl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// translates to&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;boy&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;girl&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The child functional component must always use the 'props' parameter. Without passing this parameter, you can access any props from a parent.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#using-props-with-class-components"&gt;
  &lt;/a&gt;
  Using props with class components
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;props&lt;/code&gt; can also be used in class-based React components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;


&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Child component will now receive props from the Parent component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./child&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// translates to&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;male&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;female&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#supplying-props-from-a-class-method"&gt;
  &lt;/a&gt;
  Supplying props from a class method
&lt;/h4&gt;

&lt;p&gt;You can supply props into a child component by calling a method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;getBoy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getGirl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;girl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoy&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getGirl&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setting-default-props"&gt;
  &lt;/a&gt;
  Setting default props
&lt;/h3&gt;

&lt;p&gt;Set default value for the props argument. That way if a prop value is omitted from parent, you can use the default value instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;male&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// import child&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;// omitted&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;female&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c1"&gt;// translates to&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;male&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;female&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-spread-syntax-with-props"&gt;
  &lt;/a&gt;
  Using spread syntax with props
&lt;/h3&gt;

&lt;p&gt;You can also pass in an object as props to a component using the spread syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;details&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;kingsley&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boy&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Child&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;details&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; /&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;kingsley&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;boy&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When then access each individual properties using object destructuring&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Child&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;gender&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;React props allow us pass data into React components. React props should only be passed from a reference (such as parent component). Data from props can be accessed by child and then displayed on the view (template).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#join-my-newsletter"&gt;
  &lt;/a&gt;
  Join my newsletter
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--utmgX-KD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632760933679/nCygke_co.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--utmgX-KD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632760933679/nCygke_co.png" alt="testimonial from subscriber"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I release weekly newsletter on how to grow a strong mindset and succeed as a web developer. Subscribe  &lt;a href="https://www.getrevue.co/profile/ubahthebuilder"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>GCP as easy as ABC, a low-code platform for Firestore &amp; Cloud Functions</title>
      <author>Harini Janakiraman</author>
      <pubDate>Mon, 27 Sep 2021 16:44:03 +0000</pubDate>
      <link>https://dev.to/harinilabs/gcp-as-easy-as-abc-a-low-code-platform-for-firestore-cloud-functions-deo</link>
      <guid>https://dev.to/harinilabs/gcp-as-easy-as-abc-a-low-code-platform-for-firestore-cloud-functions-deo</guid>
      <description>&lt;p&gt;It is 2021- you should not be limited to cloud console UI for managing your data and tinkering with CLIs on terminals for deploying cloud functions. &lt;/p&gt;

&lt;p&gt;Google Firestore is great for building and launching scalable apps fast on the serverless stack. There is a drawback though - the Firestore UI looks like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zNq6OxjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A0zkpRVZPQgZfkxA8Uc-vHA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNq6OxjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A0zkpRVZPQgZfkxA8Uc-vHA.png" alt="Firebase UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is hard to navigate the nested document store and the UI is not intuitive. I have personally faced this challenge many times when building products on Firebase. Only developers have access to the data and you don't want to waste their time to build yet another internal portal or data download script. This is one of the main reasons why we built &lt;a href="http://rowy.io/"&gt;&lt;strong&gt;Rowy&lt;/strong&gt;&lt;/a&gt; - an open-source platform to manage your data in an intuitive spreadsheet-like UI. Say goodbye to emailing that "vFinalFinal" Excel sheet.&lt;/p&gt;

&lt;p&gt;But that is just the tip of the iceberg. We also questioned why cloud functions need to be built the way they do now. From starting with a boilerplate code on editors to deploying using CLI on terminals to finally looking at the logs on Google Cloud console. Why?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIIjs4Xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A1IQAIhTIkps2bYA9eETjOA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIIjs4Xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A1IQAIhTIkps2bYA9eETjOA.png" alt="Cloud Function Deploy process today"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We wanted to flip the script by making the process of building and deploying cloud functions &lt;strong&gt;effortless, right in the browser and in the view of your data. No Devops, CI/CD, CLIs, reading docs. It just works.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;While we are at it, doesn't it also make sense to have pre-built commonly used functions and extensions to connect to your favorite third-party tools? We did just that. &lt;/p&gt;

&lt;p&gt;With a goal to help developers focus on building their product functionality fast, we built Rowy with ❤️. &lt;strong&gt;Our code is&lt;/strong&gt; &lt;a href="https://github.com/rowyio/rowy"&gt;&lt;strong&gt;open-source&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;, you fully own your data and your data stays on your own GCP/Firestore project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9LOB9Ebb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AqfzH4gp-A6Bswn9cDbIeGA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9LOB9Ebb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AqfzH4gp-A6Bswn9cDbIeGA.gif" alt="Introducing Rowy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-see-how-you-can-build-on-gcp-within%C2%A0minutes"&gt;
  &lt;/a&gt;
  Let's see how you can build on GCP within minutes
&lt;/h3&gt;

&lt;p&gt;First, you can get setup quickly with this link below to deploy Rowy on your Google Cloud/Firebase project. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://rowy.app/deploy"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdRz3wdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A9kRUsDrC6tI0RiMH0IMM8g.png" alt="One click deploy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once setup is complete, you should be able to access your Firestore data in a collaborative spreadsheet-like UI and perform any CRUD operations. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xXftZlBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AjfzgSG038qzNpYZal1vSJA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xXftZlBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AjfzgSG038qzNpYZal1vSJA.png" alt="Rowy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is just the start. There is so much more you can do here.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#build-your-data-model%C2%A0visually"&gt;
  &lt;/a&gt;
  Build your data model visually
&lt;/h4&gt;

&lt;p&gt;As a first step in building any product, you can build your Firestore data model visually by simply clicking the "Add Table" and "Add column" buttons. Choose from &lt;a href="https://docs.rowy.io/field-types/supported-fields"&gt;30+ fields&lt;/a&gt; including complex data fields like images, files, richtext, subtables, code, flexible fields like json and more. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2_uRzYBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AMh2632MUi8THinBMgg4NxQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2_uRzYBT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AMh2632MUi8THinBMgg4NxQ.gif" alt="data model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#powerful-and-rich-spreadsheetlike-ui"&gt;
  &lt;/a&gt;
  Powerful and rich spreadsheet-like UI
&lt;/h4&gt;

&lt;p&gt;Manage your data intuitively on a familiar spreadsheet-like UI with all the functionality and features that come with it.&lt;/p&gt;

&lt;p&gt;⚡️   Bulk import and export data - csv, json&lt;br&gt;
⚡️   Filter and sort data fields&lt;br&gt;
⚡️   Create your custom flexible views by locking, freezing, hiding columns. Admins have full control over their data views for different user roles, i.e., you can create data portals customized for your operations team, marketing, developers, PMs ... or any user really&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SzgtG9TN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AZJWaWXmZcaoQNlFqi1DspA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SzgtG9TN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AZJWaWXmZcaoQNlFqi1DspA.gif" alt="spreadsheet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#collaborate-with-your%C2%A0team"&gt;
  &lt;/a&gt;
  Collaborate with your team
&lt;/h4&gt;

&lt;p&gt;Invite your team members to collaborate on the data and give them specific granular CRUD permissions at a table-level and field-level using custom roles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUCh9PRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AE9I-D6IcsbWlEnfEdMy4Bg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUCh9PRb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AE9I-D6IcsbWlEnfEdMy4Bg.gif" alt="collaborate with team"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#connect-to-your-favorite-tools"&gt;
  &lt;/a&gt;
  Connect to your favorite tools
&lt;/h4&gt;

&lt;p&gt;With ready-made extensions to Typeform, SendGrid, Algolia, Twilio, Bigquery and more, you can connect to your favorite third-party tools. Also, you have full flexibility to customize these pre-built extensions or build your own.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lfrZLSbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ArRppYgVuJRZibRau0QhCRw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lfrZLSbL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ArRppYgVuJRZibRau0QhCRw.gif" alt="connect to tools"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#multiple-views-for-the-same-data-collection"&gt;
  &lt;/a&gt;
  Multiple views for the same data collection
&lt;/h4&gt;

&lt;p&gt;You can have more than one way to look at the same Firestore collection by using flexible Table views with unique Table IDs. You can build table and column views for your different team members with unique roles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ilYC2uC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A2iZAKFRT-QIpO2QczceZzQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ilYC2uC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A2iZAKFRT-QIpO2QczceZzQ.gif" alt="multiple view"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#default-values-data-validation-required%C2%A0fields"&gt;
  &lt;/a&gt;
  Default values, data validation, required fields
&lt;/h4&gt;

&lt;p&gt;Allowing non-technical users to make changes to production data is scary. To address this, Rowy not only allows permission and access controls at a table-level and field-level but also the ability to validate any field-level CRUD operations with regex checks to ensure critical data is always accurate before updating your Firestore document. You can also define default values for fields (static, null, custom) and make fields mandatory for row creation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mvNAeq09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A_ibiuM9La4xBt4JFqEtLng.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mvNAeq09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A_ibiuM9La4xBt4JFqEtLng.gif" alt="default values"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#write-cloud-functions"&gt;
  &lt;/a&gt;
  Write cloud functions
&lt;/h4&gt;

&lt;p&gt;You can build cloud functions that are triggered on any field-level data changes. Easy deploy, no need for terminals, CLIs and boilerplate code. Import npm packages and use any API. Read full documentation &lt;a href="https://docs.rowy.io/field-types/derivative"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pBGviF6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A04CC8pGsy6_L-MRbn-_6Fw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBGviF6I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2A04CC8pGsy6_L-MRbn-_6Fw.gif" alt="write cloud functions"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;If you like what we are building, give Rowy a quick spin on your Firebase project using the button below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rowy.app/deploy"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wVLLi5wV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2ApuLdUWZHhjKa7-SbEytdWA.png" alt="Quick Deploy Link"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This runs RowyRun (an open-source, cloud run instance) that operates exclusively on your GCP project.&lt;/em&gt; &lt;strong&gt;&lt;em&gt;We will never have access to your service account or any of your data&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;. Alternatively, you can also manually install using the steps detailed&lt;/em&gt; &lt;a href="https://docs.rowy.io/install"&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;Join the community of developers building on GCP/Firebase using Rowy&lt;/p&gt;

&lt;p&gt;😻&lt;a href="https://github.com/rowyio/rowy"&gt;Github&lt;/a&gt; 💬&lt;a href="https://rowy.io/chat"&gt;Discord&lt;/a&gt; 🐦&lt;a href="https://twitter.com/rowyio"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please give us a star on Github to get the latest updates 🌟 We would love to hear from you and get feedback 👋&lt;/p&gt;

</description>
      <category>news</category>
      <category>webdev</category>
      <category>database</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>Getting Started with MicroEJ </title>
      <author>Oderlan Freire</author>
      <pubDate>Mon, 27 Sep 2021 16:38:05 +0000</pubDate>
      <link>https://dev.to/oderlanfreire/getting-started-with-microej-13k0</link>
      <guid>https://dev.to/oderlanfreire/getting-started-with-microej-13k0</guid>
      <description>&lt;p&gt;Based on my first contact with &lt;a href="https://www.microej.com"&gt;MicroEJ&lt;/a&gt; technology and a little bit of research, I decided to make a short introduction to this interesting technology. I am going to talk a little bit about the history behind it, where it can be used and how to install and run a Hello World example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-is-microej"&gt;
  &lt;/a&gt;
  Who is MicroEJ?
&lt;/h2&gt;

&lt;p&gt;MicroEJ is a French company who has created a development application kit focused on embedded systems and IoT, using C, Java® technologies and recently JavaScript® as a programming language. The main objective of this development kit is to help developers create applications for devices which require a high level of performance, compact size, energy efficiency, while still enjoying all the benefits of a high level language such as, Java® or JavaScript®.&lt;/p&gt;

&lt;p&gt;Currently, &lt;a href="https://www.microej.com"&gt;MicroEJ&lt;/a&gt; has three products available:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.microej.com/product/vee/"&gt;MICROEJ VEE&lt;/a&gt;: A virtual machine that can run on devices with very low computing power, including microcontrollers, microprocessors and SoT. It includes free libraries and &lt;a href="https://developer.microej.com/mej32-virtual-software-processor-for-embedded-systems/"&gt;MEJ32&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://www.microej.com/product/sdk/"&gt;MICROEJ SDK&lt;/a&gt;: An application development kit, that involves a complete pack of tools and a library, to develop applications that will run on the MICROEJ VEE virtual machine. As well as  that, it is possible to create embedded systems simulators called Virtual Devices.&lt;br&gt;
&lt;a href="https://www.microej.com/product/forge/"&gt;MICROEJ Forge&lt;/a&gt;: A cloud technology that helps developers and companies to store applications, assets, libraries and more.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#history"&gt;
  &lt;/a&gt;
  History:
&lt;/h2&gt;

&lt;p&gt;MicroEJ was founded in 2004, by &lt;a href="https://www.linkedin.com/in/fredrivard/"&gt;Fred Rivard&lt;/a&gt; PhD. and went by  the name of Industrial Smart Software Technology (IS2T). After a first phase of research and development, the company grew and raised investment with Innovacom at the end of 2011. The company was renamed to &lt;a href="https://www.microej.com"&gt;MicroEJ&lt;/a&gt;, with the challenge of building a virtualization core that needed to be 1000 times lower than Android, to standardize and viabilize the development of applications to more than 10 billion devices that are fabricated every year, embedded devices and IoT. &lt;/p&gt;

&lt;p&gt;Currently, MicroEJ technology runs on 100 million devices, in various industry sectors across manufacturing, smart home, wearables, retail, healthcare, metering, utilities, industrial, consumer, defense, etc.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation-on-windows7-8-81-10"&gt;
  &lt;/a&gt;
  Installation on Windows(7, 8, 8.1, 10):
&lt;/h2&gt;

&lt;p&gt;To start the installation, first you have to go to the &lt;a href="https://developer.microej.com/get-started/"&gt;official MicroEJ download page&lt;/a&gt; and &lt;a href="https://repository.microej.com/packages/SDK/21.03/MicroEJ-SDK-Installer-Win64-21.03.exe"&gt;download&lt;/a&gt; the &lt;a href="https://developer.microej.com/get-started/"&gt;SDK&lt;/a&gt;. The site has all the necessary information for installation, including the necessary requirements and information about what comes installed in the SDK. For the SDK to run on your computer,  you will need to have &lt;a href="https://www.oracle.com/br/java/technologies/javase-jre8-downloads.html"&gt;JRE8&lt;/a&gt; installed on your PC.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CRB8ZX-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6d48htmfjcy4swmajo9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CRB8ZX-A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6d48htmfjcy4swmajo9f.png" alt="Get Started"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then just follow the standard Windows installation by clicking next, accept the terms of use, and follow the process by clicking next until you complete the steps and the IDE installation is finished.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LlbEZhw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6hf3f2fm8rfmc24cx49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LlbEZhw4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z6hf3f2fm8rfmc24cx49.png" alt="Step one of the installation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMKmIA2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8rm4hcgvvxmhs5jbdfq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMKmIA2U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8rm4hcgvvxmhs5jbdfq.png" alt="Step two"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eTqUnKp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2276jwrporqzjr33c1gp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eTqUnKp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2276jwrporqzjr33c1gp.png" alt="Step three"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IFuEFJKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t22u8wiu5nlzx63h7tkc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IFuEFJKL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t22u8wiu5nlzx63h7tkc.png" alt="Step four"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vOk-SiBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rg0pztwf9h4zjqbpvuqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vOk-SiBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rg0pztwf9h4zjqbpvuqe.png" alt="Step five"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SXFTfKV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbcdxxa73qqmp8lm4vwt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SXFTfKV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbcdxxa73qqmp8lm4vwt.png" alt="Step six"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#running-the-basic-hello-world-in-java"&gt;
  &lt;/a&gt;
  Running the basic Hello World in Java:
&lt;/h2&gt;

&lt;p&gt;After starting the IDE, creating a MicroEJ program is quite simple, just go to "File" &amp;gt; "New" &amp;gt; "Standalone Application Project"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s6-6UGlR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ed777te764bsq4ycmo6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s6-6UGlR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9ed777te764bsq4ycmo6.png" alt="creating a project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, give the name of the project and the module name will be filled automatically&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---TW87cbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdhhlbuy6uk1ee95qd10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---TW87cbl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdhhlbuy6uk1ee95qd10.png" alt="building the project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you click "Finish", the Main.java class is built&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QvXLGorr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pizxdq15qj6wrccvap9q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QvXLGorr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pizxdq15qj6wrccvap9q.png" alt="Main class built"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since this is a Main class with Hello World, to run it just right-click on the file, "Run As" &amp;gt; "MicroEJ Application".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLi-zRNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60kx3jlu4wm8q6zzvni4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZLi-zRNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60kx3jlu4wm8q6zzvni4.png" alt="Run as MicroEJ application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After running, the console will display the following message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello World!
=============== [ Completed Successfully ] ===============

SUCCESS
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hello-world-with-microej-template-and-emulator"&gt;
  &lt;/a&gt;
  Hello World with MicroEJ Template and Emulator
&lt;/h2&gt;

&lt;p&gt;To run the &lt;a href="https://www.microej.com"&gt;MicroEJ&lt;/a&gt; &lt;a href="https://repository.microej.com/packages/blue/2.0.2/applications/blue_firmware_applications_1.0.0.zip"&gt;Hello World template&lt;/a&gt;, first, you need to install one of the virtual device emulators, in this case, I'll use the &lt;a href="https://developer.microej.com/create-your-first-application/get-started-app-development-on-nxp-om13098-lpcxpresso54628/"&gt;NXP OM13098&lt;/a&gt;. After downloading it, save it in your workspace. Run the MicroEJ IDE, go to "Window" &amp;gt; "Preferences" &amp;gt; "MicroEJ" &amp;gt; "Virtual Device menu".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82aw0axn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sup16knlk8drqpvpxjwz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82aw0axn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sup16knlk8drqpvpxjwz.png" alt="Virtual Devices"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step is to import the emulator and select the directory where the emulator is saved.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YQglZuEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/krxn1wo0fo63am4149st.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YQglZuEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/krxn1wo0fo63am4149st.png" alt="Select the directory"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ohLMg3aE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u035ivqoptxrwt6egnl2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ohLMg3aE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u035ivqoptxrwt6egnl2.png" alt="Directory"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After selection, simply accept the terms of use of the emulator, click "finish", wait for the import process to finish and click "apply and close".The emulator will be installed and ready for use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JIff-Eil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amwws4iwu7sruosx6mx6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JIff-Eil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/amwws4iwu7sruosx6mx6.png" alt="License Agreement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LppOSkN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2k6vr4ffgob3blwiblf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LppOSkN0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2k6vr4ffgob3blwiblf.png" alt="Importing the Device"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2CSyJIk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdefs0qh6j2nleour192.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2CSyJIk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wdefs0qh6j2nleour192.png" alt="Device ready to use"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To demonstrate the execution of the virtual device, I will use the &lt;a href="https://repository.microej.com/packages/blue/2.0.2/applications/blue_firmware_applications_1.0.0.zip"&gt;Hello World template provided by MicroEJ for download&lt;/a&gt;. The template comes ready to run, you only need to import the file to the IDE after unzipping it. Unlike the HelloWorld in the first example, this one has to be executed by right-clicking on the folder as it contains more than one file. Follow the same steps: “Run As” &amp;gt; “MicroEJ Application”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fkk60W_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk8nauj2xbnpw0zrq80a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkk60W_b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk8nauj2xbnpw0zrq80a.png" alt="Run as MicroEJ Application"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This should be the result in the &lt;a href="https://developer.microej.com/create-your-first-application/get-started-app-development-on-nxp-om13098-lpcxpresso54628/"&gt;NXP OM13098&lt;/a&gt; virtual device:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--emROt3yK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cw08a3zr9bl8qajcsdu1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--emROt3yK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cw08a3zr9bl8qajcsdu1.png" alt="Result in the NXP OM13098 virtual device"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember that &lt;a href="https://www.microej.com"&gt;MicroEJ&lt;/a&gt; supports execution on various types of simulators, such as &lt;a href="https://developer.microej.com/create-your-first-application/get-started-app-development-on-stmicroelectronics-stm32f746g-disco/"&gt;STM32&lt;/a&gt;, &lt;a href="https://developer.microej.com/create-your-first-application/get-started-app-development-on-espressif-esp32-wroverkit-v41/"&gt;ESP32&lt;/a&gt; and more.&lt;/p&gt;

&lt;p&gt;Conclusion:&lt;br&gt;
    &lt;a href="https://www.microej.com"&gt;MicroEJ&lt;/a&gt; is a very interesting technology, focused on development for embedded devices, that makes it possible to run Java® technology on microcontrollers with low computing power and even IoT. It has a very easy installation and setup due to the Java® programming language used. Also the IDE is well known by software developers as they use Eclipse, and they provide a well-organized &lt;a href="https://forum.microej.com"&gt;forum&lt;/a&gt; and &lt;a href="https://developer.microej.com"&gt;specific site for developers&lt;/a&gt; in addition to its own &lt;a href="https://repository.microej.com"&gt;repository&lt;/a&gt;. This provides a great help for those who are starting out or are just curious to know more about how to create Java® applications for MCUs.&lt;/p&gt;

&lt;p&gt;I am Oderlan Freire from Ocara, Ceará. I started working at TotalCross in 2021, a student of Information Systems at the Federal University of Ceará, and I participated in the SharinAgro project, one of the top projects selected for the Microsoft contest IA for Earth.&lt;/p&gt;

</description>
      <category>poweredbymicroej</category>
    </item>
    <item>
      <title>🌈 Rainbow</title>
      <author>Abdelmgeid Sobhi</author>
      <pubDate>Mon, 27 Sep 2021 16:25:25 +0000</pubDate>
      <link>https://dev.to/abdelmgeid/rainbow-3fk8</link>
      <guid>https://dev.to/abdelmgeid/rainbow-3fk8</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Abdelmgeid-/embed/RwgqzeG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>The secret of big O notation</title>
      <author>Nspired</author>
      <pubDate>Mon, 27 Sep 2021 16:06:45 +0000</pubDate>
      <link>https://dev.to/nspired/the-secret-of-big-o-notation-4apg</link>
      <guid>https://dev.to/nspired/the-secret-of-big-o-notation-4apg</guid>
      <description>&lt;p&gt;&lt;strong&gt;⚡ TL;DR:&lt;/strong&gt; Big O notation helps us describe the efficiency of algorithms. It will help you make a more informed decision as to which algorithm is right for your specific use case. In addition, you'll likely be expected to know this in any technical interview.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#which-one-do-you-choose"&gt;
  &lt;/a&gt;
  Which one do you choose? 🤔
&lt;/h3&gt;

&lt;p&gt;Imagine you're getting ready to download Animal Crossing to play with a group of friends. You don't think twice about it, you click "Install" and a few minutes later it's ready to play. &lt;br&gt;
But now, you hear Drake is having a concert on Fortnite on Saturday. You're super excited, he just dropped his new album. You &lt;em&gt;have&lt;/em&gt; to see that! Now think about this. Fortnite is about 20GB. &lt;br&gt;
Assuming you have a somewhat decent internet connection, it could still take up to 3 days to download it! Amazon offers next day delivery for the physical copy of Fortnite #AmazonPrime. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HFYGZFjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/l2QDSKSkhqITBLYBy/giphy.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HFYGZFjF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/l2QDSKSkhqITBLYBy/giphy.webp" alt="Next-day delivery"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see how in some cases it might be faster to get a game from Amazon, and in some cases it's just faster to download it. But regardless of the game's size, getting it from Amazon with next-day delivery is always going to take the same amount of time. Downloading a game on the other hand, varies based on its size.&lt;/p&gt;

&lt;p&gt;In this case, Amazon takes &lt;code&gt;O(1)&lt;/code&gt; time to get a game (it's constant!), and downloading it is &lt;code&gt;O(n)&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt; being the size of the game: the bigger the game, the longer it will take.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-o1-endraw-raw-on-endraw-what-does-that-even-mean"&gt;
  &lt;/a&gt;
  &lt;code&gt;O(1)&lt;/code&gt;, &lt;code&gt;O(n)&lt;/code&gt;, what does that even mean? 🤷‍♀️
&lt;/h3&gt;

&lt;p&gt;The big O notation is used to classify time and space requirements of your algorithms. &lt;/p&gt;

&lt;p&gt;Here are some rules to remember when trying to find the complexity of an algorithm:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always drop constant terms.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;twoLoops&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// First loop, O(n)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Second loop, also O(n)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, our &lt;code&gt;twoLoops&lt;/code&gt; function iterates &lt;code&gt;n&lt;/code&gt; times twice. What do you think the big O notation for this function should be?&lt;/p&gt;

&lt;p&gt;Intuitively, we could start by saying that it is &lt;code&gt;O(2n)&lt;/code&gt;: the first loop is &lt;code&gt;O(n)&lt;/code&gt; and the second loop is also &lt;code&gt;O(n)&lt;/code&gt;, adding them up we get &lt;code&gt;2 ✕ O(n)&lt;/code&gt; or &lt;code&gt;O(2n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With out first rules, we know that constant terms (here, &lt;code&gt;2&lt;/code&gt;) must disappear. So our big O complexity is actually &lt;code&gt;O(n)&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Always drop non-dominant terms.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;nestedLoops&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// First loop, O(n)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Nested loop, O(n²)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we still have the first loop but we also have a nested loop. Adding those two big O together, we would get &lt;code&gt;O(n + n²)&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This rule tells us that since &lt;code&gt;n²&lt;/code&gt; "dominates" (it's the biggest term), we need to remove any other term. We end up with &lt;code&gt;O(n²)&lt;/code&gt;, exponential growth.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;💡 Did you know?&lt;/em&gt; Big O has a few siblings, including the &lt;a href="https://en.wikipedia.org/wiki/Big_O_notation#Related_asymptotic_notations"&gt;little o and big Omega notations&lt;/a&gt;, which are other examples of asymptotic notations. However, in the case of technical interviews, big O is the most useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#space-and-time-complexity"&gt;
  &lt;/a&gt;
  Space AND Time complexity
&lt;/h3&gt;

&lt;p&gt;In an interview setting, you'll likely be asked to talk about the big O complexity of the solution you provided to a problem. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Space complexity measures the space growth of your algorithm. It helps you answer the question "How much space will my algorithm require relative to the size of the input?". &lt;/li&gt;
&lt;li&gt;Time complexity measures the runtime growth of your algorithm. It helps you answer the question "How much time will my algorithm run relative to the size of the input?".
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;badFibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arr length:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;badFibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;badFibonacci&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="mi"&gt;21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How could we go about calculating the big O complexity here?&lt;/p&gt;

&lt;p&gt;For space complexity, we need to look at the variables we're using: &lt;code&gt;arr&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt;. &lt;code&gt;i&lt;/code&gt; doesn't change in size, it's constant. Knowing our rule about constants, we can ignore it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;arr&lt;/code&gt; however, is different: its size is going to grow relative to &lt;code&gt;n&lt;/code&gt;. The bigger the &lt;code&gt;n&lt;/code&gt;, the larger the array: this is linear growth, &lt;code&gt;O(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To calculate the time complexity, we look at the number of steps taken to reach the solution. In this case, there is a single loop that grows relative to &lt;code&gt;n&lt;/code&gt;, which means our big O complexity is also &lt;code&gt;O(n)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K2j-oi13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/5z0cCCGooBQUtejM4v/giphy.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K2j-oi13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/5z0cCCGooBQUtejM4v/giphy.webp" alt="Problem solved"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;When you see this, you might not necessarily think that anything is wrong with this solution. After all, it does what you want it to do. &lt;br&gt;
However, this is when you think to yourself: &lt;em&gt;can this solution be better?&lt;/em&gt; The answer is yes, it can and this is the concept of &lt;em&gt;Optimization&lt;/em&gt; and &lt;em&gt;Brute Force&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;🚨 During your interviews, your first solution is often a &lt;em&gt;Brute Force&lt;/em&gt; approach. You just want to get the code working. &lt;em&gt;Optimization&lt;/em&gt; happens after you have identified a solution and you want to improve its runtime and space requirements. &lt;br&gt;
Your interviewer will let you know what type of solution they want you to provide.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tradeoffs"&gt;
  &lt;/a&gt;
  Tradeoffs
&lt;/h3&gt;

&lt;p&gt;In most cases, when optimizing a solution, you are going to make tradeoffs: give up speed, to lessen space requirements, or give up space, to improve speed.&lt;/p&gt;

&lt;p&gt;🚨 This is an important talking point during your interview to be able to explain your optimization choices in terms of tradeoffs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-or-worst-case-scenario"&gt;
  &lt;/a&gt;
  Best or worst case scenario?
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;badFindIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;needle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;haystack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;haystack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;needle&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;haystack&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;badFindIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;badFindIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="kc"&gt;null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, the best case scenario is when &lt;code&gt;needle&lt;/code&gt; is the first element of &lt;code&gt;haystack&lt;/code&gt;: we don't have to traverse the rest of the array in order to find the target.&lt;/p&gt;

&lt;p&gt;For the worst case scenario, &lt;code&gt;needle&lt;/code&gt; is not in the &lt;code&gt;haystack&lt;/code&gt;. However, we have to traverse the entire array just to confirm it's not present.&lt;/p&gt;

&lt;p&gt;🚨 The array is really small here, but in an interview setting, you have to think big! Google has databases with billions of records -- try to think of these kind of scenarios when optimizing your solution.&lt;/p&gt;

&lt;p&gt;When calculating big O, &lt;em&gt;always&lt;/em&gt; think of the worst case scenario!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;To wrap things up, the secret to big O notation is knowing how to choose the right algorithm while considering factors such as space and time complexity, tradeoffs and best and worst case scenarios. &lt;/p&gt;

&lt;p&gt;Hopefully, you now feel prepared for your next technical interview! &lt;/p&gt;




&lt;p&gt;What did you think of the post? Did you learn anything new? We would love to hear from you!&lt;/p&gt;

&lt;p&gt;If you are still looking for more practice, be on the lookout for our next post. We will solve &lt;a href="https://leetcode.com/problems/valid-parentheses/"&gt;a popular interview coding problem from leetcode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also there is &lt;a href="https://leetcode.com/problems/valid-parentheses/"&gt;a free computer science course on EdX&lt;/a&gt; taught by Hardvard professors where you will learn fundamental principles. It's a great resume builder and you get a certificate at the end of the course! &lt;/p&gt;




&lt;p&gt;As an added bonus, here's a big O cheatsheet we made! 🔥&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kftQ6AiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632000025302/-sa8Yu0tn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kftQ6AiF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632000025302/-sa8Yu0tn.png" alt="big-o.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>career</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Arrays and Lists 📚</title>
      <author>Nspired</author>
      <pubDate>Mon, 27 Sep 2021 15:58:38 +0000</pubDate>
      <link>https://dev.to/nspired/arrays-and-lists-1gc7</link>
      <guid>https://dev.to/nspired/arrays-and-lists-1gc7</guid>
      <description>&lt;p&gt;&lt;strong&gt;⚡ TL;DR:&lt;/strong&gt; Arrays are fast and compact. Linked lists are not as compact, but adding or removing elements from them can be more efficient!&lt;/p&gt;




&lt;p&gt;You probably already know how to use arrays and are familiar with methods like &lt;code&gt;push&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, etc. The purpose of this issue is to give you an understanding of arrays as a data structure and how they differ from lists.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;**Why would you care?&lt;/em&gt;* For those who are preparing for a technical interview or would like to deepen your knowledge of computer science, this is the article for you.*&lt;/p&gt;

&lt;p&gt;Arrays and lists are easy to mix up, so let’s try to make sense of what the differences are and how they work! ⚙️&lt;/p&gt;

&lt;p&gt;You can think of memory as a bookshelf:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CBhiSFil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631549902604/Nl9Hq-ENm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CBhiSFil--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631549902604/Nl9Hq-ENm.png" alt="bookshelf.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now imagine you got the first four volumes of Game of Thrones 🐉:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4T50PRrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631548903531/mNLdaL4El.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4T50PRrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631548903531/mNLdaL4El.png" alt="4-volumes.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is your array. Now you wouldn’t want to store these volumes separately: if you find volume 1 you want to be able to find volume 2 easily. So you’ll find a place were you can put the four of them together. Luckily, our top shelf has room for &lt;em&gt;exactly&lt;/em&gt; four volumes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H2r6slcd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631549352361/aIc3dH3wT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H2r6slcd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631549352361/aIc3dH3wT.png" alt="bookshelf-with-4-volumes.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You found a spot for these, great. But, surprise! A friend comes over and gives you volume 5 📕&lt;/p&gt;

&lt;p&gt;You run to your bookshelf, only to realize, you don’t have any room left next to volume 4 🙁&lt;/p&gt;

&lt;p&gt;Reorganizing the bookshelf to make more room near volume 4 would work, but that seems like a lot of effort…&lt;/p&gt;

&lt;p&gt;Instead, we’re going to move the first four volumes to a larger empty space. Now we can add the fifth volume!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlpwH4_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631549385659/6uZBHOc4a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlpwH4_7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631549385659/6uZBHOc4a.png" alt="volume-5-fits.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Phew, that wasn’t easy! 🥵 These volumes are heavy, and you don’t want to go through the hassle of moving all of them every time you don’t have enough room for a new one.&lt;/p&gt;

&lt;p&gt;So what are your options here? Well, we tried to do it the &lt;em&gt;array&lt;/em&gt; way: put each volume next to each other, and move the entire series when you don’t have enough room for another volume. What if we tried to do it the &lt;em&gt;list&lt;/em&gt;¹ way instead?&lt;/p&gt;

&lt;p&gt;We’ll need a little bit of setup before getting into this. We are going to assign a letter to each shelf, and a number to each column of book:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOSGoMNL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631549407512/IGng7n0NQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOSGoMNL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631549407512/IGng7n0NQ.png" alt="bookshelf-with-coordinates.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, each location on our bookshelf has a set of coordinates. For example, the third book of the top shelf is at position &lt;code&gt;A2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead of storing our volumes next to each other, we are going to put the first volume anywhere in the bookshelf:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TRnbRAEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631549432886/7_Q4QgmCh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TRnbRAEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631549432886/7_Q4QgmCh.png" alt="bookshelf-volume-1.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now, we’re going to do the same with the second volume. Once we’ve found a location for it, we’re going to add a note next to the first volume with the coordinates of the second volume:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFstLTZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631549464315/Tg3H6aVhK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZFstLTZz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631549464315/Tg3H6aVhK.png" alt="bookshelf-volumes-1-2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can do this until we reach the fourth volume, where the note will be empty since we don’t have our fifth volume yet:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KdKnyYAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631549520108/DumU3r0CB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KdKnyYAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631549520108/DumU3r0CB.png" alt="bookshelf-4-linked-books.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We just made a &lt;em&gt;singly linked list&lt;/em&gt;: we have a single note next to each book that tells us where to find the next one.&lt;/p&gt;

&lt;p&gt;Now you might be thinking, this is great, but why do I have to waste so much space storing those notes?&lt;/p&gt;

&lt;p&gt;And you would be right: linked lists take up more space than arrays²! You give up some space, but you don’t have to worry about moving things around to add a volume to your series. As long as you have space for a book and a note, everything’s fine! Removing a volume in the middle is also a lot simpler: if you want to remove volume 2, just change the note after volume 1 with the coordinates of volume 3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Key takeaway&lt;/strong&gt;: trade-offs. When discussing the differences between &lt;em&gt;arrays&lt;/em&gt; and &lt;em&gt;lists&lt;/em&gt;, it is important to understand when and why to use one or the other — knowing this will make you stand out during any technical interview! ✨&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[1]: Usually, people use **list&lt;/em&gt;* to mean &lt;strong&gt;linked list&lt;/strong&gt;, and more specifically &lt;strong&gt;singly linked lists&lt;/strong&gt;. There are other types of lists, but &lt;strong&gt;singly linked lists&lt;/strong&gt; are the most common type.*&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[2]: Technically this might not always be true, because of the way programming languages handles memory allocation for arrays. You can read more about this &lt;a href="https://en.wikipedia.org/wiki/Dynamic_array#Growth_factor"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tip-of-the-week"&gt;
  &lt;/a&gt;
  💡 Tip of the week
&lt;/h2&gt;

&lt;p&gt;You can use &lt;code&gt;git switch -&lt;/code&gt; to switch back to your previous branch:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; git switch other-branch
&lt;span class="o"&gt;(&lt;/span&gt;other-branch&lt;span class="o"&gt;)&lt;/span&gt; git switch -
&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://git-scm.com/docs/git-switch"&gt;Learn more&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-else-is-going-on-in-tech"&gt;
  &lt;/a&gt;
  🔗 What else is going on in tech?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you are starting to learn about flexbox in CSS, this might be for you: &lt;a href="https://knightsoftheflexboxtable.com/"&gt;https://knightsoftheflexboxtable.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For all the Rubyist around here, Stripe had some exciting news! &lt;a href="https://sorbet.org/blog/2021/07/30/open-sourcing-sorbet-compiler"&gt;https://sorbet.org/blog/2021/07/30/open-sourcing-sorbet-compiler&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A beautiful and free library of UI components for Tailwind: &lt;a href="https://daisyui.com/"&gt;https://daisyui.com/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, if GitHub is your daily driver, checkout this new awesome feature! &lt;a href="https://twitter.com/DynamicWebPaige/status/1425502379777019909"&gt;https://twitter.com/DynamicWebPaige/status/1425502379777019909&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;PS: We would love to know how you felt about this article, did you find it helpful, and are there topics you’d love to see covered? Tag @nspiredTech on Twitter if there’s anything you want to share :-)&lt;/em&gt;&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Migrating from Vue 2 to Vue 3.1</title>
      <author>Morgan</author>
      <pubDate>Mon, 27 Sep 2021 15:57:06 +0000</pubDate>
      <link>https://dev.to/grapecity/migrating-from-vue-2-to-vue-3-1-1ng1</link>
      <guid>https://dev.to/grapecity/migrating-from-vue-2-to-vue-3-1-1ng1</guid>
      <description>&lt;p&gt;Developers enjoy using the open-source Vue.js, a model-view-viewmodel (MVVM) JavaScript framework, to build user interfaces and single-page applications. Its incremental, adaptable, and monolithic framework has core libraries focused on the view layer and integrates with other libraries for other layers. &lt;/p&gt;

&lt;p&gt;Vue version 2 does have its drawbacks, like limited typescript support, performance bottlenecks, challenging maintainability, and finite scalability. Vue version 3 aims to solve these issues with significant changes in architecture and function to ensure better performance, readability, maintainability, and security. Although Vue 3 is relatively new and still a work-in-progress, almost all projects will eventually need to convert or migrate to Vue 3.&lt;/p&gt;

&lt;p&gt;Let’s explore some changes in the new version of Vue.js and use a hands-on example to demonstrate how to migrate an application from Vue 2 to Vue 3. You’ll need to be familiar with Vue 2 to follow along.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vue-3-changes"&gt;
  &lt;/a&gt;
  Vue 3 Changes
&lt;/h3&gt;

&lt;p&gt;Vue 3 has many changes, including fundamental architectural changes such as a new Global API, a new Composition API, changes to the Template Directives, changes to the Render function API, and many more. We’ll go over these differences briefly, but you can explore Vue’s &lt;a href="https://v3.vuejs.org/guide/migration/introduction.html#breaking-changes"&gt;documentation&lt;/a&gt; for the most in-depth information about each development. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#global-api-or-create-an-application"&gt;
  &lt;/a&gt;
  Global API or Create an Application
&lt;/h4&gt;

&lt;p&gt;The Vue 2 method of creating applications kept the global state accessible so that global configurations like plugins and mixins could permanently mutate the state. This ability could potentially pollute the application.&lt;/p&gt;

&lt;p&gt;The Vue version 2 app creation syntax is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; new Vue({
   store,
   render: h =&amp;gt; h(App)
 }).$mount('#app');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In contrast, Vue version 3 uses the new .createApp method for creating a new application. Since this is the entry-point of all Vue applications, the new root API is a major breaking change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Vue, { createApp } from 'vue';

createApp(App)
  .use(store)
  .mount("#app");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#defining-new-components"&gt;
  &lt;/a&gt;
  Defining New Components
&lt;/h4&gt;

&lt;p&gt;Vue 3 also changes the way Vue creates components.  &lt;/p&gt;

&lt;p&gt;The Vue 2 way is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Vue.component('component-name', 
{   
 // component code here
})  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vue 3 replaces Vue.component with the root component as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = Vue.createApp({…})
app.component(‘component-name’){
   ///Component code
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#using-data-options"&gt;
  &lt;/a&gt;
  Using Data Options
&lt;/h4&gt;

&lt;p&gt;Vue 3 considers data as a function that returns whatever objects you need. Data isn’t an object anymore.&lt;/p&gt;

&lt;p&gt;Vue 2 handles data like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = new Vue({
   // options object
    el: '#app'
    data: 
    {
          object: &amp;lt;some object&amp;gt;
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vue 3 uses data like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = Vue.createApp({ 
  // options object    
data(){ 
       return {
            object: &amp;lt;some object or string etc&amp;gt;
      }
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#vif-and-vfor-precedence"&gt;
  &lt;/a&gt;
  V-if and V-for Precedence
&lt;/h4&gt;

&lt;p&gt;If we use both the v-if and v-for directives on the same element, the v-for takes precedence in Vue 2. This precedence reverses in Vue 3, so v-if takes precedence.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vue-router-changes"&gt;
  &lt;/a&gt;
  Vue Router Changes
&lt;/h4&gt;

&lt;p&gt;The new version of Vue Router also introduces a few breaking changes of its own. The main change is the new createRouter function. Modes like history also have create functions. &lt;/p&gt;

&lt;p&gt;The new way to use Router in Vue 3 is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { createRouter, createWebHistory } from 'vue-router'
createRouter({
  history: createWebHistory(),
  hash: createWebHashHistory(),
  abstract: createMemoryHistory()
  routes: [],
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use Router, we employ the app.use(router) option before mounting the application, where the app is the root component.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vuex-changes"&gt;
  &lt;/a&gt;
  Vuex Changes
&lt;/h4&gt;

&lt;p&gt;The new Vuex version, which is compatible with Vue 3, also has application-breaking changes similar to Vue Router. We first need to import createStore from Vuex, then use the createStore function to create a store for our application.&lt;/p&gt;

&lt;p&gt;To use Vuex in Vue 2:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default new Vuex.Store({
  …
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, to use Vuex createStore in Vue 3:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { createStore } from 'vuex'
export const store = createStore({
  state () {
    return {
      count: 1
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vue 3 also introduces the useStore. Vuex 4 uses the useStore function to get the store from a setup hook in a Vue application. According to Vue 3’s documentation, we operate useStore as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useStore } from 'vuex'
export default {
  setup () {
    const store = useStore()
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These new methods change the way we declare and use these components in a Vue application. For a list of all the other changes in Vue 3, refer to its &lt;a href="https://v3.vuejs.org/guide/migration/introduction.html#breaking-changes"&gt;documentation.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#migration-build"&gt;
  &lt;/a&gt;
  Migration Build
&lt;/h3&gt;

&lt;p&gt;Because of Vue 3’s many changes, when developers try to run their Vue 2 application after upgrading their Vue version from 2 to 3, it fails compilation with multiple errors. Considering the size of production applications, correcting all the compiler and runtime errors can be daunting.&lt;/p&gt;

&lt;p&gt;To ease app migration from Vue 2 to Vue3, the Vue team introduced a &lt;a href="https://v3.vuejs.org/guide/migration/migration-build.html"&gt;migration build.&lt;/a&gt; According to its documentation, it helps developers configure Vue 2 behavior in Vue 3.&lt;/p&gt;

&lt;p&gt;This build runs in Vue 2 mode by default, so most public APIs (with a few exceptions) behave precisely like Vue 2. When features change or are deprecated, the migration build produces runtime warnings. Developers can also enable or disable each component’s compatibility.&lt;/p&gt;

&lt;p&gt;The migration build helps shift your application from version 2 to version 3 without rewriting the entire application. It works by running the Vue 2 application as-is, including breaking changes, in Vue 3. At the same time, it throws warnings to show what code you need to change. This build provides a smoother, easier way to make your Vue 2 app changes for Vue 3 compliance. The migration build doesn’t handle the Vue 2 specific libraries and depreciated APIs.&lt;/p&gt;

&lt;p&gt;The migration build is not an ideal, long-term solution, but you can use it as an intermediary to upgrading. That said, you can use it for production applications, if essential, according to its documentation: "If you do get your app running on the migration build, you can ship it to production before the migration is complete. Although there is a small performance/size overhead, it should not noticeably affect production UX."&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run-a-vue-2-application-with-a-migration-build"&gt;
  &lt;/a&gt;
  Run a Vue 2 Application with a Migration Build
&lt;/h3&gt;

&lt;p&gt;To understand how to migrate an application, we'll explore an example. We built a Vue 2 album manager similar to Brad Traversy's To-do Manager application. Album Manager can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add an album&lt;/li&gt;
&lt;li&gt;Delete an album&lt;/li&gt;
&lt;li&gt;Mark an album as “heard”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The application looks like this in Vue 2:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urqfd4_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/spread/20210921-migrating-from-vue-2-to-vue-3-1/Image1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urqfd4_1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/spread/20210921-migrating-from-vue-2-to-vue-3-1/Image1.png" alt="image1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our app doesn’t use any third-party libraries. However, if your application does rely on these libraries, it’s best to wait for their Vue 3-compatible versions before migrating the application.&lt;/p&gt;

&lt;p&gt;According to the Vue documentation, dependencies relying on internal Vue 2 APIs or undocumented behavior commonly use private properties on VNodes. Although you can use the migration build for server-side rendering (SSR), migrating a custom setup is more involved: Vue 3 doesn’t have a bundle renderer. Vue’s creators recommend using Vue 3 SSR with Vite.&lt;/p&gt;

&lt;p&gt;If you use Nuxt.js, Vuetify, Quasar, or ElementUI, the Vue team recommends waiting for the next version. Although most significant libraries plan to release Vue 3 compatible versions soon, your application may use minor libraries that break.&lt;/p&gt;

&lt;p&gt;It may be challenging to migrate large and complex libraries even when using the migration build. However, Vue’s creators say they plan to backport Composition API and other Vue 3 features to the 2.7 release.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-ready-for-the-migration-build"&gt;
  &lt;/a&gt;
  Getting Ready for the Migration Build
&lt;/h3&gt;

&lt;p&gt;To start the migration build, we first install the current Vue version globally on our system. To check for the Vue version, we trigger the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vue – version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command should return the current version of Vue.&lt;/p&gt;

&lt;p&gt;Next, to install the migration build, we run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -global vue@^3.1.0 @vue/compat@^3.1.0
npm install -global --save-dev @vue/compiler-sfc@^3.1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have installed the compatibility build, we can uninstall the template compiler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall vue-template-compiler
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we run the Vue upgrade to check if any dependent libraries need upgrading.&lt;/p&gt;

&lt;p&gt;Now that we have installed all our dependencies and Vue migration build, we can enable the build. To do this, we edit or create a vue.config.js file with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  chainWebpack: config =&amp;gt; {
    config.resolve.alias.set('vue', '@vue/compat')

    config.module
      .rule('vue')
      .use('vue-loader')
      .tap(options =&amp;gt; {
        return {
          ...options,
          compilerOptions: {
            compatConfig: {
              MODE: 2
            }
          }
        }
      })
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we have added the code and saved our file, we can run the application in compatibility mode by running the&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;npm run serve&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 command.&lt;/p&gt;

&lt;p&gt;If we’ve resolved all the dependencies correctly, the application runs as-is. But, when we open the console window, we may see multiple warnings.&lt;/p&gt;

&lt;p&gt;For example, the application runs when we run Album Manager in migration build mode, but we see the following error:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uD_MFrOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/spread/20210921-migrating-from-vue-2-to-vue-3-1/Image2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uD_MFrOV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/spread/20210921-migrating-from-vue-2-to-vue-3-1/Image2.png" alt="image2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The running application looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LyxxEMpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/spread/20210921-migrating-from-vue-2-to-vue-3-1/Image3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LyxxEMpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/spread/20210921-migrating-from-vue-2-to-vue-3-1/Image3.png" alt="image3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The console errors may be warnings, but they’re breaking changes. The migration build lowers their intensity to warnings but simultaneously points out all the changes we need to make for our application to be Vue 3 compatible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bATTalk2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/spread/20210921-migrating-from-vue-2-to-vue-3-1/Image4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bATTalk2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/spread/20210921-migrating-from-vue-2-to-vue-3-1/Image4.png" alt="image4"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#making-changes"&gt;
  &lt;/a&gt;
  Making Changes
&lt;/h3&gt;

&lt;p&gt;Now that we know the required changes, we can start making our application Vue 3 compatible.&lt;/p&gt;

&lt;p&gt;First, we need to upgrade Vuex to the next version. To do so, we run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -global vuex@next
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we upgrade the Vue version using the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g @vue/cli
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s always a good idea to&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;run npm install&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
 as well.&lt;/p&gt;

&lt;p&gt;After we take care of all the upgrades, we next need to change our code. Let’s explore the code changes we need to make Album Manager run as a Vue 3 application.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#changing-the-create-api"&gt;
  &lt;/a&gt;
  Changing the Create API
&lt;/h4&gt;

&lt;p&gt;As we discussed earlier, Vue 3 has a new way of creating the app. To incorporate this change, we change the main.js file. We keep the Vue 2 code commented in the file for comparison. So, we change the main.js to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Vue, { createApp } from 'vue';
import App from './App.vue';
import store from './store/index';

Vue.config.productionTip = false;

//Vue 3 code
createApp(App)
  .use(store)
  .mount("#app");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#changing-the-store"&gt;
  &lt;/a&gt;
  Changing the Store
&lt;/h4&gt;

&lt;p&gt;Let’s simplify the store folder and write all our code in index.js. To keep our application consistent, we create action-types.js, which contains our function names.&lt;/p&gt;

&lt;p&gt;In the Vue 2 version, we create the store using the Veux.store function to enable the modules. In Vue 3, this code changes to the createStore function.&lt;/p&gt;

&lt;p&gt;The Vue 2 version is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Vue.use(Vuex)
 export default new Vuex.Store({
   state: { … },
  mutations: { … },
  actions: ( … },
 modules: {  … }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need to create actions and mutations for all the activities that we perform in the application, like fetching, updating, adding, and deleting albums. To fetch data, we use &lt;a href="https://jsonplaceholder.typicode.com/albums"&gt;Typicode endpoints&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We set up the store similar to the Vue 2 syntax. The only difference is that we set it all inside the createStore function.&lt;/p&gt;

&lt;p&gt;For example, to set up the first action (that is, fetch albums), we create the following index.js:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default Vuex.createStore({
  state: {
    albums: [],
  },
  mutations: {
    [ACTION_TYPES.fetchAlbums]: (state, albums) =&amp;gt; (state.albums = albums),
},
 actions: {
    onFetchAlbums: async ({ commit }) =&amp;gt; {
      const response = await Axios.get(
        "https://jsonplaceholder.typicode.com/albums"
      );
      const data = response.data;
      for (var k in data) {
        data[k].completed = false;
        console.log(data[k]);
      }
      //console.log(response.data);
      commit(ACTION_TYPES.fetchAlbums, data);
    },
 },
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We set up all the other actions similarly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vue-files"&gt;
  &lt;/a&gt;
  Vue Files
&lt;/h3&gt;

&lt;p&gt;In the Vue files, we use the computed, onMounted, and setup functions. We write this code as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useStore } from "vuex";
import { computed, onMounted } from "vue";
export default {
  name: "Fetch Albums",
  setup() {
    const store = useStore();
    const albums = computed(() =&amp;gt; store.state.albums);

  onMounted(() =&amp;gt; {
      store.dispatch("onFetchAlbums");
  });
….
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s look at these changes in a little more detail.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#computed"&gt;
  &lt;/a&gt;
  Computed
&lt;/h4&gt;

&lt;p&gt;The computed function replaces the computed property in Vue 2. We pass a getter to the computed function and get an immutable object in return.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#onmounted"&gt;
  &lt;/a&gt;
  onMounted
&lt;/h4&gt;

&lt;p&gt;The onMounted hook replaces the mounted property from Vue 2, which takes in a callback function.&lt;/p&gt;

&lt;p&gt;For example, in Albums.vue:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;onMounted(() =&amp;gt; {
      store.dispatch("onFetchAlbums");
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setup-function"&gt;
  &lt;/a&gt;
  Setup Function
&lt;/h3&gt;

&lt;p&gt;Vue3 uses the composition API to handle components. The setup function is the starting point of all components.&lt;/p&gt;

&lt;p&gt;The setup function takes properties and context. We directly return the data we want to expose in the application in the setup function.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ref"&gt;
  &lt;/a&gt;
  ref
&lt;/h4&gt;

&lt;p&gt;The AddAlbums.vue file uses the ref function to initialize a &lt;a href="https://v3.vuejs.org/guide/composition-api-introduction.html#reactive-variables-with-ref"&gt;reactive variable.&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { ref } from "vue";

 setup() {
    const store = useStore();
    const title = ref("");
    const addAlbum = e =&amp;gt; {
      e.preventDefault();
      store.dispatch("onAddAlbum", {
        title: title.value
      });
      title.value = "";
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These cover the main changes we need to make our application Vue 3 compatible. When we now run our application in Vue 3, it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Dmg2dW6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/spread/20210921-migrating-from-vue-2-to-vue-3-1/Image5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Dmg2dW6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/spread/20210921-migrating-from-vue-2-to-vue-3-1/Image5.png" alt="image5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Vue 3 has significant architectural changes, like the composition API and functions, new Vuex version, new Vue router, reactive variables, and many more. With these changes comes the possibility that your Vue 2 applications can break. Regardless of the size of an application, it’s daunting to migrate them. The Vue team introduced the migration build to mitigate this issue. The migration build runs the Vue 2 application in compatibility mode while warning about breaking changes and changes required to make your application Vue 3 compatible.&lt;/p&gt;

&lt;p&gt;Although the migration build is beneficial, it can’t cover all the possible problems. This tool also isn’t a long-term solution: It’s simply a springboard to start your migration. Migrating your application from Vue 2 to Vue 3 is still a significant task requiring thorough planning. But, it’s a must-do as developers gradually upgrade to the new version of Vue and take advantage of its improved features.&lt;/p&gt;

&lt;p&gt;Whether you work with Vue 2 or switch over to Vue 3, you can save development time by including GrapeCity’s Vue-compatible components in your application. &lt;a href="https://www.grapecity.com/spreadjs"&gt;SpreadJS&lt;/a&gt; and &lt;a href="https://www.grapecity.com/wijmo"&gt;Wijmo&lt;/a&gt; quickly add spreadsheet components like charts and pivot tables, maps, and more than 100 user interface components to your application.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Our Favorite Dev Tools at Codesphere</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 27 Sep 2021 15:54:40 +0000</pubDate>
      <link>https://dev.to/codesphere/our-favorite-dev-tools-at-codesphere-41mb</link>
      <guid>https://dev.to/codesphere/our-favorite-dev-tools-at-codesphere-41mb</guid>
      <description>&lt;p&gt;“A good craftsman never blames his tools” &lt;/p&gt;

&lt;p&gt;In the oh-so-exciting world of tech today there's an endless list of developer tools to choose from. My personal favorite dev tool is the button on my coffee machine!&lt;/p&gt;

&lt;p&gt;It so happens that I recently got a new laptop so it felt like the perfect time to ask the team here at &lt;a href="https://link.codesphere.com/DZ"&gt;Codesphere&lt;/a&gt;, and you guys, what some of the best dev tools out there are.&lt;/p&gt;

&lt;p&gt;So, here are our, and by extension probably some strangers in the comments, favorite dev tools as of September 2021:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  "Git."
&lt;/h3&gt;

&lt;p&gt;Git is the most popular version control system in the world, so it's no surprise it was the one-word answer given by our Senior Software Engineer, Mr. Roman Frolov, when I asked what his favorite tool was.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JcyzVPLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu8tfdw6m3eamxfta7je.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JcyzVPLd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iu8tfdw6m3eamxfta7je.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the uninitiated out there a version control system, in a nutshell, allows us to manage changes made to our project, track the history of changes, and most importantly, collaborate with others. Version control systems fall into two categories; Centralized and Distributed. &lt;/p&gt;

&lt;p&gt;In a centralized system, each team member connects a central server to get the latest copy of the code and push any changes to it, but the problem here is that if the central server goes down the team is unable to collaborate until the server comes back to life.&lt;/p&gt;

&lt;p&gt;Git is a Distributed system, meaning every team member has a copy of the project and its history on their own machine. &lt;/p&gt;

&lt;p&gt;Git is not the only distributed version control system out there but it is the most popular because it's free, scalable, fast, and open-source. If your git knowledge is lacking, it might be time to get learning. An overwhelmingly large percentage of projects use Git and it should be a mainstay for any dev resume.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OvUTamaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkrhml0jawzgfq3awscp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OvUTamaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkrhml0jawzgfq3awscp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lazy developers ARE good developers. &lt;/p&gt;

&lt;p&gt;Prettier, one of the early IDE extensions installed for most new devs, is an opinionated code formatter that "enforces a consistent style by parsing your code and reprinting it with its own rules that take the maximum line length into account, wrapping code when necessary."&lt;/p&gt;

&lt;p&gt;It's one of the top 10 most popular Visual Code Studio extensions of 2021 for good reason - having a common style guide when working in a dev team is just 👏good 👏practice.&lt;/p&gt;

&lt;p&gt;Prettier is a fully automated style formatter that will re-shape all your code to adhere to the team style guide after each save, making it easier for other devs to read and keeping the whole project looking slick and professional.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#vim"&gt;
  &lt;/a&gt;
  Vim
&lt;/h3&gt;

&lt;p&gt;Vim is a text editor for code, in which you navigate with your keyboard instead of your mouse. But why? I hear you ask, would you ever want to use a keyboard to navigate everywhere in this modern age of IDEs. Because productivity. &lt;/p&gt;

&lt;p&gt;Every time your hand is moving the mouse your productivity declines, working with Vim keeps your fingers on the keyboard and that means more time writing code. Think of it like learning an instrument, learning to code with Vim is going to be difficult at first but after some practice, you'll be a rockstar. No pain, no gain…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XrsOzoDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xizghuc9wiz49w0sxy6t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XrsOzoDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xizghuc9wiz49w0sxy6t.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vim runs on the terminal and is installed on almost every machine. At some point in your coding career, you have probably found yourself dropped into Vim in your terminal with no way to escape? For those who might not know &lt;code&gt;:q&lt;/code&gt; will help you back home in this situation.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vim-modes"&gt;
  &lt;/a&gt;
  Vim Modes
&lt;/h4&gt;

&lt;p&gt;Vim has a variety of different modes -This isn't a tutorial so we will refrain from diving too deep into each but if you're not familiar with Vim yet, a quick overview might give you a better idea of how it works. &lt;/p&gt;

&lt;p&gt;Being entirely keyboard input there is obviously no mouse used to select specific things you want to interact with. In order to extend the functionality of the keyboard, Vim can be toggled into different modes, each of which has a different feature set.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Normal mode&lt;/strong&gt; is the default mode that Vim starts in and is mostly used for navigation, you'll spend most of your time in this mode using Vim. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Insert mode&lt;/strong&gt; is next up, this mode will have the most familiar behavior to most newcomers. Any key you press while in this mode will be displayed on the screen, as the name suggests this mode is used for inserting characters.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visual mode&lt;/strong&gt;, similar to how clicking and dragging work with a mouse, this mode is used to select and apply commands to sections of text.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Command mode&lt;/strong&gt; is used to apply commands that cannot be easily done in normal mode, like replace or find for example.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Last up is &lt;strong&gt;Replace mode&lt;/strong&gt;, used to replace existing text to be replayed by typing over it. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Designed to help you spend more time writing code instead of editing code, Vim is a team favorite for productivity here at Codesphere. If you're not using it yet, maybe this has aroused your interest, go check it out and let us know in the comments what you think.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#colorzilla"&gt;
  &lt;/a&gt;
  ColorZilla
&lt;/h3&gt;

&lt;p&gt;A simple and common tool in any dev's browser, ColorZilla is a color picker extension for Chrome and Mozilla. Use it to quickly get the hex code for any color in your browsers and copy it directly to your clipboard to be pasted into wherever you need.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--13DA__SU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpa0tvk4ii4mbyewjfvj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--13DA__SU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpa0tvk4ii4mbyewjfvj.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not much to say about this one except that it's a must-have for any dev or designer. Get it installed and get color picking today.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#tabnine"&gt;
  &lt;/a&gt;
  TabNine
&lt;/h3&gt;

&lt;p&gt;A personal favorite of mine when I was learning to code. TabNine is an AI code autocomplete plugin for your IDE, that predicts the line of code you are writing and makes intelligent suggestions for you to choose from. A great time saver and a great way to be a truly lazy developer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HAJc3D0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf2bs6gt4oc786w2gyun.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HAJc3D0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gf2bs6gt4oc786w2gyun.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Similar to Google search word or phrase autocomplete works, as you type a list of suggested options will be provided for you to select from, and with a bit of practice, you can move quickly through previously laborious code blocks. &lt;br&gt;
TabNine is by no means perfect, the suggestions aren't always perfect and the default key to select a suggestion is the same as the default to move to a new line so you can input a suggestion you didn't mean to if you're not paying attention. But overall I recommend giving it a go and seeing how you like it. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#tooled-up"&gt;
  &lt;/a&gt;
  Tooled up
&lt;/h3&gt;

&lt;p&gt;So these are some of our team's favorite dev tools here at &lt;a href="https://link.codesphere.com/DZ"&gt;Codesphere&lt;/a&gt;, and I'll be sure to use them on my new machine, but what are yours? What dev tools can't you live without? &lt;br&gt;
Maybe we misrepresented your favorite tool somewhere in our list today? Let us know and we can all get a little better together.&lt;/p&gt;

&lt;p&gt;Hopefully, we've turned you on to something new with our suggestions but with the endless list of tools available nowadays there will always be new toys to play with and new ways to make our coding lives a little better. &lt;/p&gt;

&lt;p&gt;Thanks for reading and have a great day, evening, night wherever you are!&lt;/p&gt;

&lt;p&gt;Written by Dan Parry. &lt;/p&gt;

</description>
      <category>tooling</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>coding</category>
    </item>
    <item>
      <title>3D Design: Creating Printable Solid Shapes from SVG Files with Inkscape and FreeCAD</title>
      <author>Erika Heidi</author>
      <pubDate>Mon, 27 Sep 2021 15:52:01 +0000</pubDate>
      <link>https://dev.to/erikaheidi/3d-design-creating-printable-solid-shapes-from-svg-files-with-inkscape-and-freecad-266e</link>
      <guid>https://dev.to/erikaheidi/3d-design-creating-printable-solid-shapes-from-svg-files-with-inkscape-and-freecad-266e</guid>
      <description>&lt;p&gt;In a previous post in this FreeCAD series, we built a pen holder using the Sketcher + Part Design workbenches. In this guide, which is part 3 of a &lt;a href="https://dev.to/erikaheidi/an-introduction-to-3d-design-with-freecad-part-1-navigation-3gjo"&gt;tutorial series about FreeCAD for beginners&lt;/a&gt;, you'll learn how to import an SVG file and transform it into a shape that can be fused into your 3D model.&lt;/p&gt;

&lt;p&gt;To pack in more useful tips, I'll also include how to create an original SVG file from a shape found on the web, using Inkscape. You can skip step 1 if you already have a simple SVG file that you plan on using, but it's useful to learn how to create your own shapes using a software like &lt;a href="https://inkscape.org/"&gt;Inkscape&lt;/a&gt;. This will give you a lot of freedom when designing your original objects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-preparing-the-svg-file"&gt;
  &lt;/a&gt;
  Step 1: Preparing the SVG file
&lt;/h2&gt;

&lt;p&gt;Ideally, your SVG file should have a single shape. If your SVG has multiple shapes, or a hole inside the shape, you'll need to think through each form separately, creating the individual shapes and using the appropriate boolean operations on FreeCAD to get to the result you want. For instance, something with the form of a letter "A" would need an outside shape that would get padded, and another shape to make a pocket or a boolean operation (difference) to remove that portion from inside.&lt;/p&gt;

&lt;p&gt;In this guide, we'll create an SVG file from scratch using Inkscape. Inkscape is a free and open source graphics software that can be used to create vectorized images and export them as SVG and other formats.&lt;/p&gt;

&lt;p&gt;For this example, we're gonna use &lt;a href="https://en.wikipedia.org/wiki/Rebel_Alliance"&gt;Star War's Rebel Alliance logo&lt;/a&gt;, because it's a rather simple shape and of course also because it's pretty cool:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E8qi0OVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yas6yt3bmsrinl2onqow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E8qi0OVL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yas6yt3bmsrinl2onqow.png" alt="Star Wars Rebel Alliance Logo. source: Wikipedia"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Source: Wikipedia&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Download the PNG file and open it with Inkscape. In the left tool bar, you'll find the vector tool. It's the one right below the pencil. Use it to draw a vector over the shape:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NMdGYpZb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou6th9jalqqik9q70n4a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NMdGYpZb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou6th9jalqqik9q70n4a.gif" alt="Step 1: Start drawing a vector over the shape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the initial shape is done, you will probably need to adjust some things. Use the node selection tool (the second tool from top to bottom) to adjust the shape to look more like the original.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AILA-k3I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hr4eibjbf84z59m9t7c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AILA-k3I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hr4eibjbf84z59m9t7c.gif" alt="Step 2: Adjust the shape to match the original"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you're satisfied, delete the base PNG shape and set the fill color of your vectorized shape to black or any other color. Then, save the file as SVG.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BHjPTM8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujd6s3nv68ekudcdook9.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BHjPTM8a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ujd6s3nv68ekudcdook9.gif" alt="Step 3: Save the SVG file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Can't get the shape right? No worries, vectorizing can be tricky if you are not used to it (but totally worth practicing). You can create a simpler shape using the geometric tools on the left (a square or a circle, for instance, if you just want to practice), or you can &lt;a href="https://erikaheidi.ams3.digitaloceanspaces.com/design3d/rebel_aliance_logo_by_erika.svg"&gt;download my own SVG version of this logo in this link&lt;/a&gt;. Disclaimer: it's not perfect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-importing-svg-on-freecad"&gt;
  &lt;/a&gt;
  Step 2: Importing SVG on FreeCAD
&lt;/h2&gt;

&lt;p&gt;Now, let's go to FreeCAD. To get started, you'll need to open the pen holder source file that we created in the previous tutorial of this series. In case you don't have that file available to you now, you can &lt;a href="https://erikaheidi.ams3.digitaloceanspaces.com/design3d/freecad_penholder_v01.zip"&gt;download this FreeCAD project file&lt;/a&gt; containing the base penholder object and get started from there. When prompted, select "SVG as Geometry (ImportSVG)" in the dialog box that will appear.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7ADPW-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou5ko4klo0ohneodz11l.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z7ADPW-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ou5ko4klo0ohneodz11l.gif" alt="importing the svg file into FreeCAD"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This shape is not an actual solid yet on FreeCAD; it is just a path. We'll now move to the "Draft" workbench, where we can turn this path into a sketch. First, we'll use the "Upgrade Shape" tool, which looks like an arrow pointing upwards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vfL6RMxm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp7wjv6ase23cd7ad1d2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vfL6RMxm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp7wjv6ase23cd7ad1d2.gif" alt="Moving to the Draft Workbench and Upgrading shape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we'll transform this path into a sketch, using the "Draft to Sketch" tool. This tool has an icon with red and blue shapes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JPEfTeC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idlootpa25ssvgk3zk19.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JPEfTeC3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idlootpa25ssvgk3zk19.gif" alt="Converting draft to sketch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll notice that a new sketch was created. This sketch's path might not coincide with the positioning of the original path, and that's OK, we'll move it around once we have a solid part. Working with this shape in a separate body will be an easier approach, then we can fuse both parts together later on.&lt;/p&gt;

&lt;p&gt;We'll create a new body, using the "Create New Body" icon on the top tool bar (Part Design Workbench) and move this sketch to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qSReaTuL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwp0rlynzn5z3ajikuve.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qSReaTuL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwp0rlynzn5z3ajikuve.gif" alt="creating a new body"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we'll use the "Pad" tool from the top tool bar to pad this sketch into a solid.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wDbjXtjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73trzwc6ut4f8jpuo298.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wDbjXtjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73trzwc6ut4f8jpuo298.gif" alt="Using the Pad tool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You now have a solid shape that is already printable. Next, we'll adjust the size and positioning so that we can "glue" this shape on the existing pencil holder.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-adjusting-position-and-size"&gt;
  &lt;/a&gt;
  Step 3: Adjusting Position and Size
&lt;/h2&gt;

&lt;p&gt;Finally, we need to adjust the position and size of the logo so that it fits the external wall of the pen holder. Repositioning and resizing on FreeCAD sometimes can be tricky, so I typically use a combination of different methods to reach the positioning I want. For this example, I used all of these:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#manually-configuring-placement"&gt;
  &lt;/a&gt;
  Manually Configuring Placement
&lt;/h3&gt;

&lt;p&gt;You can set the placement of an object using the "Placement" dialog that can be accessed by selecting the object, then going to the left bottom panel where you find the object settings including positioning.&lt;/p&gt;

&lt;p&gt;In the dialog window that opens up, you can make rotations to the object around the various axis. In my case, I only wanted to move the orientation so that the logo was in the same orientation as the pen holder walls. I changed the X axis to -90 ant that gave me what I wanted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dt7aKdOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uin2dv62o0onkwd7jqo2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dt7aKdOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uin2dv62o0onkwd7jqo2.gif" alt="Manually moving the logo via object settings - placement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resizing-a-shape-in-the-draft-workbench"&gt;
  &lt;/a&gt;
  Resizing a Shape in the Draft Workbench
&lt;/h3&gt;

&lt;p&gt;The easiest way I found to resize a shape is to go to the Draft workbench, and use the "Resize" tool. This will in fact generate a clone shape that is a solid and you can use in boolean operations (essentially, what we want). To use that tool, first select the object, than go to the menu "Modification -&amp;gt; Resize". Click on the object again when asked, then a new dialog will show the proportions. Here, I resized to 0,3 (33% or the original size).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BjegTaft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsh2y7z5hifntj0auz9t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BjegTaft--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hsh2y7z5hifntj0auz9t.gif" alt="Resizing a shape in the Draft Workbench"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the clone is created, you can use the "Transform" tool to move and position the logo exactly how you want it. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-repositioning-via-transform"&gt;
  &lt;/a&gt;
  Visual Repositioning via "Transform"
&lt;/h3&gt;

&lt;p&gt;The "transform" tool allows you to move shapes more visually, using a set of arrows that represent all axis. Double-click the shape to access the "transform" controls. You can also move a whole body with the transform tool, by right-clicking the body name at the project list, and clicking on "transform" on the menu that will show up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Be3QimxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fv7niax3m41pc6lwg7s.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Be3QimxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1fv7niax3m41pc6lwg7s.gif" alt="Using the Transform tool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-fusing-shapes-in-the-part-workbench"&gt;
  &lt;/a&gt;
  Step 4: Fusing Shapes in the Part Workbench
&lt;/h2&gt;

&lt;p&gt;We have our model almost ready now, the only thing left to do is to fuse both parts together. Go to the "Part" Workbench, select the first body (pen holder base) and the cloned, resized version of the logo (it should have an icon that looks like a sheep). Select the "Union" button on the workbench tool bar on the top (the icon looks like two blue circles). Hit "apply" to confirm, and you'll have now the finished model (fusion resulting object).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-4EjhlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbvt702ul0e6wh3sgkor.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-4EjhlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbvt702ul0e6wh3sgkor.gif" alt="Fusing Shapes in the Part Workbench"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now export this model to STL and slice it for 3D printing. To export, select the "fusion..." object that was generated in the final step, then go to "File -&amp;gt; Export". Select STL and save the file. You can now open this file with a slicing software.&lt;/p&gt;

&lt;p&gt;This is the final result as printed with our Prusa MK3S:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1W6frfyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh47270dkptz4plmmzl3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1W6frfyB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh47270dkptz4plmmzl3.jpg" alt="Final result after 3D Printed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#print-specs"&gt;
  &lt;/a&gt;
  Print Specs:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;0.20mm layer height&lt;/li&gt;
&lt;li&gt;10% infill&lt;/li&gt;
&lt;li&gt;Filament: Prusament PLA (Galaxy Black)&lt;/li&gt;
&lt;li&gt;No supports, no brim&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If all you want is the final STL file to print, you can &lt;a href="https://www.myminifactory.com/object/3d-print-150408"&gt;download this model for free on MyMiniFactory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you have enjoyed this short tutorial series about FreeCAD for beginners. Would you like to see more FreeCAD tutorials here? Leave your suggestion in the comments section!&lt;/p&gt;

&lt;p&gt;See you next time ;)&lt;/p&gt;

</description>
      <category>3d</category>
      <category>freecad</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Modular Routing in React</title>
      <author>Kenneth Angelo Reyes</author>
      <pubDate>Mon, 27 Sep 2021 15:48:01 +0000</pubDate>
      <link>https://dev.to/projectkenneth/modular-routing-in-react-2ab1</link>
      <guid>https://dev.to/projectkenneth/modular-routing-in-react-2ab1</guid>
      <description>&lt;p&gt;In a React + React Router environment, routing configuration is a one-to-one mapping between a route and that route's display elements.&lt;/p&gt;

&lt;p&gt;Here's a basic example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Route exact path='/' component={Home} /&amp;gt;
&amp;lt;Route exact path='/drafts' component={DraftListing} /&amp;gt;
&amp;lt;Route path='/drafts/:draftId' component={DraftUpdate} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above approach is suitable for simple applications, but, for complex ones, it's not really ideal.&lt;/p&gt;

&lt;p&gt;Complex applications are usually composed of several modules. Each module is then composed of several components. If this is the application's structure, it is just reasonable for the routing model to follow the same structure, right?&lt;/p&gt;

&lt;p&gt;Well, that's just what we're going to do! In this post, let's look at implementing modular routing in React.&lt;/p&gt;

&lt;p&gt;We're doing this in 3 steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup a theoretical application and identify its modules and components&lt;/li&gt;
&lt;li&gt;Implement a regular routing model for the said application&lt;/li&gt;
&lt;li&gt;Transform the regular routing model into a modular one&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's start!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-application-the-modules-and-the-components"&gt;
  &lt;/a&gt;
  The Application, the Modules, and the Components
&lt;/h2&gt;

&lt;p&gt;Let's say we're building a blog-writing application and we have decided to implement the ff. modules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Post Management&lt;/li&gt;
&lt;li&gt;Draft Management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given the above modules, we'll probably design the routing map like this:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;th&gt;Route&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Post Management&lt;/td&gt;
&lt;td&gt;/posts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Draft Management&lt;/td&gt;
&lt;td&gt;/drafts&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Looking at the above routings, it seems like we're only going to have 3 components directly representing each of our main modules. But, we all know that these modules are still going to be composed of one or more components. &lt;/p&gt;

&lt;p&gt;In fact, we can even argue that these modules are "smaller applications" themselves. For instance, &lt;em&gt;Post Management&lt;/em&gt; should also have a route navigating to the &lt;em&gt;Update Post&lt;/em&gt; component. &lt;em&gt;Draft Management&lt;/em&gt; should have this behavior as well (navigate to the &lt;em&gt;Update Draft&lt;/em&gt; component).&lt;/p&gt;

&lt;p&gt;So, what do we do now? We "push up" the concept of modules and identify the actual components of the application.&lt;/p&gt;

&lt;p&gt;Here's the new routing map but with an added &lt;em&gt;Component&lt;/em&gt; column.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;th&gt;Component&lt;/th&gt;
&lt;th&gt;Route&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Post Management&lt;/td&gt;
&lt;td&gt;Post Listing&lt;/td&gt;
&lt;td&gt;/posts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Update Post&lt;/td&gt;
&lt;td&gt;/posts/:postId&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Draft Management&lt;/td&gt;
&lt;td&gt;Draft Listing&lt;/td&gt;
&lt;td&gt;/drafts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Update Draft&lt;/td&gt;
&lt;td&gt;/drafts/:draftId&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#the-regular-routing-approach"&gt;
  &lt;/a&gt;
  The Regular Routing Approach
&lt;/h2&gt;

&lt;p&gt;Now, we have identified the modules and components for our application. Let's go ahead and implement them!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-new-react-app-first"&gt;
  &lt;/a&gt;
  Create A New React App First
&lt;/h3&gt;

&lt;p&gt;Of course, the first step is to create a brand new React application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app reactjs-module-based-routing
cd reactjs-module-based-routing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll install the &lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;React Router for Web Applications library&lt;/a&gt; since we're building a web application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save react-router-dom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For simplicity, we remove all of the other files under the &lt;code&gt;/src&lt;/code&gt; directory. &lt;/p&gt;

&lt;p&gt;Then, we create a new &lt;code&gt;index.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
import ReactDOM from 'react-dom';

import App from './App';

ReactDOM.render(
  &amp;lt;React.StrictMode&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/React.StrictMode&amp;gt;,
  document.getElementById('root')
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a new &lt;code&gt;App.js&lt;/code&gt; as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
  return (
    &amp;lt;div&amp;gt;

    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check out the code at this point &lt;a href="https://github.com/projectkenneth/reactjs-module-based-routing/tree/Initial-State"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-components"&gt;
  &lt;/a&gt;
  Create The Components
&lt;/h3&gt;

&lt;p&gt;For better maintainability, the components should be grouped by their module. So, we'll have one directory per module and each of these directories will only contain the components relevant to their respective module.&lt;/p&gt;

&lt;p&gt;Just to recap, we'll need to create the components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Draft Listing&lt;/li&gt;
&lt;li&gt;Draft Update&lt;/li&gt;
&lt;li&gt;Post Listing&lt;/li&gt;
&lt;li&gt;Post Update&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Lastly, we'll need to create a Home component as well just so we can render a homepage.&lt;/p&gt;

&lt;p&gt;For the Draft and Post Update components, we will use the &lt;code&gt;useParams&lt;/code&gt; function from &lt;code&gt;react-router-dom&lt;/code&gt; to get the draft or post ID passed in the URL.&lt;/p&gt;

&lt;p&gt;Here's how the Draft Update component looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useParams } from 'react-router-dom';

function DraftUpdate() {
    let { draftId } = useParams();

    return (
        &amp;lt;h1&amp;gt;This is Draft Update: {draftId}&amp;lt;/h1&amp;gt;
    );
}

export default DraftUpdate;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the Draft and Post Listing components, we will use the Link component from &lt;code&gt;react-router-dom&lt;/code&gt; to render links to fake drafts or posts.&lt;/p&gt;

&lt;p&gt;Here's how the Draft Listing component looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Link } from 'react-router-dom';

function DraftListing() {
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;h1&amp;gt;This is Draft Listing&amp;lt;/h1&amp;gt;
            &amp;lt;ul&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;Link to='/drafts/1'&amp;gt;Draft 1&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;Link to='/drafts/2'&amp;gt;Draft 2&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}

export default DraftListing;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can check out how the code looks like at this point &lt;a href="https://github.com/projectkenneth/reactjs-module-based-routing/tree/Added-components"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-initial-routing"&gt;
  &lt;/a&gt;
  Create The Initial Routing
&lt;/h3&gt;

&lt;p&gt;Now, onto the actual routing. We'll need to add the ff. code to the &lt;code&gt;App&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;BrowserRouter&amp;gt;
  &amp;lt;nav&amp;gt;
    &amp;lt;ul&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;Link to='/'&amp;gt;Home&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;Link to='/drafts'&amp;gt;Drafts&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt;&amp;lt;Link to='/posts'&amp;gt;Posts&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;/ul&amp;gt;
  &amp;lt;/nav&amp;gt;
  &amp;lt;Switch&amp;gt;
    &amp;lt;Route exact path='/' component={Home} /&amp;gt;
    &amp;lt;Route exact path='/drafts' component={DraftListing} /&amp;gt;
    &amp;lt;Route exact path='/posts' component={PostListing} /&amp;gt;
  &amp;lt;/Switch&amp;gt;
&amp;lt;/BrowserRouter&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the updated &lt;code&gt;App&lt;/code&gt; code, we now have a navigation section, and the routes to the Homepage, Draft Listing, and Post Listing have been defined.&lt;/p&gt;

&lt;p&gt;Now, how should we add the routes to the draft and post update components?&lt;/p&gt;

&lt;p&gt;We can do this by updating the &lt;code&gt;Switch&lt;/code&gt; section of the &lt;code&gt;App&lt;/code&gt; component code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Switch&amp;gt;
  &amp;lt;Route exact path='/' component={Home} /&amp;gt;
  &amp;lt;Route exact path='/drafts' component={DraftListing} /&amp;gt;
  &amp;lt;Route path='/drafts/:draftId' component={DraftUpdate} /&amp;gt;
  &amp;lt;Route exact path='/posts' component={PostListing} /&amp;gt;
  &amp;lt;Route path='/posts/:postId' component={PostUpdate} /&amp;gt;
&amp;lt;/Switch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Technically, the above approach will already work. But, there's actually a couple of issues here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The references to the route names are scattered across the files which makes the project hard to maintain. For example, the path &lt;code&gt;drafts&lt;/code&gt; can be found in both the &lt;code&gt;App&lt;/code&gt; and &lt;code&gt;DraftListing&lt;/code&gt; components. If we want to change this path, we'd have to update both files.&lt;/li&gt;
&lt;li&gt;The routing for the Draft Management and Post Management module are mixed up together in one file. Essentially defeating the purpose of defining modules in the first place.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before moving to the next section, you can check out what the code looks like at this point &lt;a href="https://github.com/projectkenneth/reactjs-module-based-routing/blob/Initial-Routing-Configuration"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transforming-to-modular-routing"&gt;
  &lt;/a&gt;
  Transforming to Modular Routing
&lt;/h2&gt;

&lt;p&gt;To address the issues I mentioned, we have to consider one very important thing:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Modules should be stand-alone.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Modules should be treated as smaller applications inside a larger one. They have to be in charge of everything related to them and that includes routing. This means that we should detach a module's routing configuration from the &lt;code&gt;App&lt;/code&gt; component and place the configuration inside its respective module.&lt;/p&gt;

&lt;p&gt;To do this, we need to introduce &lt;em&gt;Module Routers&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#module-routers"&gt;
  &lt;/a&gt;
  Module Routers
&lt;/h3&gt;

&lt;p&gt;A module router, as its name suggests, handles all the routing for a module. For this example, &lt;code&gt;Module Routers&lt;/code&gt; are special components.&lt;/p&gt;

&lt;p&gt;Before creating the module router we first need to update the current routing configuration.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;App&lt;/code&gt; component, instead of directly specifying the routes to the Draft Management components, we now do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// From these
&amp;lt;Switch&amp;gt;
    &amp;lt;Route exact path='/drafts' component={DraftListing} /&amp;gt;
    &amp;lt;Route path='/drafts/:draftId' component={DraftUpdate} /&amp;gt;
&amp;lt;/Switch&amp;gt;

// To these
&amp;lt;Switch&amp;gt;
  &amp;lt;Route path='/drafts' component={DraftRouter} /&amp;gt;
&amp;lt;/Switch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, what we're doing here is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All routing that starts with the path &lt;code&gt;/drafts&lt;/code&gt; will be handled by the &lt;code&gt;DraftRouter&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We then create the actual &lt;code&gt;DraftRouter&lt;/code&gt; component. It looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function DraftRouter() {
    let { path } = useRouteMatch();

    return (
        &amp;lt;div&amp;gt;
            &amp;lt;strong&amp;gt;You are in draft management&amp;lt;/strong&amp;gt;
            &amp;lt;Switch&amp;gt;
                &amp;lt;Route exact path={path}&amp;gt;
                    &amp;lt;DraftListing modulePath={path} /&amp;gt;
                &amp;lt;/Route&amp;gt;
                &amp;lt;Route path={`${path}/:draftId`} component={DraftUpdate} /&amp;gt;
            &amp;lt;/Switch&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's what's happening inside the &lt;code&gt;DraftRouter&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We use the &lt;code&gt;useRouteMatch&lt;/code&gt; function to get the current route path. This way, we don't have to hardcode the phrase &lt;code&gt;drafts&lt;/code&gt; and it will only be defined in the &lt;code&gt;App&lt;/code&gt; component.&lt;/li&gt;
&lt;li&gt;We then defined a couple of sub-routes. If we received only the &lt;code&gt;/drafts&lt;/code&gt; path, we'll render the &lt;code&gt;DraftListing&lt;/code&gt; component. If we received the draft ID path, we render the &lt;code&gt;DraftUpdate&lt;/code&gt; component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, you may have noticed the &lt;code&gt;modulePath&lt;/code&gt; property of the &lt;code&gt;DraftListing&lt;/code&gt; component. This is because, at this point, we've updated the &lt;code&gt;DraftListing&lt;/code&gt; component to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function DraftListing(props) {
    return (
        &amp;lt;div&amp;gt;
            &amp;lt;h1&amp;gt;This is Draft Listing&amp;lt;/h1&amp;gt;
            &amp;lt;ul&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;Link to={`${props.modulePath}/1`}&amp;gt;Draft 1&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;
                &amp;lt;li&amp;gt;&amp;lt;Link to={`${props.modulePath}/2`}&amp;gt;Draft 2&amp;lt;/Link&amp;gt;&amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we used the &lt;code&gt;modulePath&lt;/code&gt; property to dynamically inject the &lt;code&gt;/drafts&lt;/code&gt; path. There's no need to hardcode that path in this component as well.&lt;/p&gt;

&lt;p&gt;I've also updated the Post Management module to follow this approach. &lt;/p&gt;

&lt;p&gt;To check out the final state of the code, click &lt;a href="https://github.com/projectkenneth/reactjs-module-based-routing/tree/Hello-Module-Routers/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;So, that's it! We've successfully implemented modular routing in React.&lt;/p&gt;

&lt;p&gt;At this stage, our &lt;code&gt;src&lt;/code&gt; directory looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t-KGv-kD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dh5qrtwc2pjzy4mn50l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t-KGv-kD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dh5qrtwc2pjzy4mn50l.png" alt="wAWv1K2D2"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;With this approach, we can now enjoy the ff. benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If we need to change a module's root path, we just need to change it in one place, in the &lt;code&gt;App&lt;/code&gt; component.&lt;/li&gt;
&lt;li&gt;If we need to remove/disable a module, we can simply remove its routing configuration from the &lt;code&gt;App&lt;/code&gt; component.&lt;/li&gt;
&lt;li&gt;The routes are easier to maintain since each module has its own configuration.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anyway, I hoped you learned something new from me today. Let me know your thoughts in the comments!&lt;/p&gt;




&lt;p&gt;Hey, you! Follow me on &lt;a href="https://twitter.com/projectkenneth"&gt;Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What is Typescript and why should you be using it?🤔</title>
      <author>Karthik Pariti</author>
      <pubDate>Mon, 27 Sep 2021 15:35:59 +0000</pubDate>
      <link>https://dev.to/kardev07/what-is-typescript-and-why-should-you-be-using-it-2lde</link>
      <guid>https://dev.to/kardev07/what-is-typescript-and-why-should-you-be-using-it-2lde</guid>
      <description>&lt;p&gt;I am sure that in your web development career you must have used JavaScript at least once. And I am sure you must have found it very useful and very powerful. But what if I say there is another language that is just as powerful as JavaScript and has way lesser bugs when compared to when you use JavaScript in your app.&lt;/p&gt;

&lt;p&gt;Now, what's the language that I'm talking about?&lt;/p&gt;

&lt;p&gt;That language is TypeScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-typescript"&gt;
  &lt;/a&gt;
  What is &lt;a href="https://www.typescriptlang.org"&gt;TypeScript&lt;/a&gt;?
&lt;/h2&gt;

&lt;p&gt;TypeScript is a programming language developed and maintained by Microsoft licensed using the &lt;a href="https://www.apache.org/licenses/LICENSE-2.0"&gt;Apache License 2.0&lt;/a&gt;. TypeScript is a superset of JavaScript, meaning that all the concepts of JavaScript are present in TypeScript which is combined with TypeScript's own concepts that make the language increasingly powerful.&lt;/p&gt;

&lt;p&gt;If you know JavaScript, it mustn't be a problem switching to TypeScript as it essentially has the same concepts as JavaScript except a few of TypeScript's own concepts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-are-the-advantages-of-using-typescript"&gt;
  &lt;/a&gt;
  So what are the advantages of using TypeScript?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#concepts-similar-to-javascript"&gt;
  &lt;/a&gt;
  Concepts similar to JavaScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;TypeScript has similar concepts as JavaScript which makes the switch seamless&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#typescript-is-typesafe"&gt;
  &lt;/a&gt;
  TypeScript is type-safe
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;TypeScript is type-safe meaning that you have to define the type of the variable before initializing it.&lt;/li&gt;
&lt;li&gt;Making your code type-safe decreases the number of bugs evolved in your app over time and makes it cleaner.&lt;/li&gt;
&lt;li&gt;Types give superior integration to your editor which improves editor support meaning increased developer productivity and gives you a better codebase.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#it-keeps-javascript-in-check"&gt;
  &lt;/a&gt;
  It keeps JavaScript in check
&lt;/h3&gt;

&lt;p&gt;TypeScript keeps your JavaScript in check. Meaning that it validates your code before it's even run which gives you an edge over using simple JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#runs-on-multiple-places"&gt;
  &lt;/a&gt;
  Runs on multiple places
&lt;/h3&gt;

&lt;p&gt;TypeScript runs in multiple places. It converts your JavaScript which can be run on the web, on a phone, or on Node.js.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type-inference"&gt;
  &lt;/a&gt;
  Type Inference
&lt;/h3&gt;

&lt;p&gt;It uses something called &lt;strong&gt;type inference&lt;/strong&gt; which is nothing but adding types to your code which gives safety enabled without you writing long and additional lines of code making your app faster and scalable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-is-developed-and-maintained-by-microsoft"&gt;
  &lt;/a&gt;
  It is developed and maintained by Microsoft
&lt;/h3&gt;

&lt;p&gt;TypeScript is developed and maintained by Microsoft and widely used by many companies which means it's nowhere near to reaching its end. So you can expect regular updates and fixes to the language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#those-were-some-advantages-lets-move-on-to-some-testimonials"&gt;
  &lt;/a&gt;
  Those were some advantages, let's move on to some testimonials!
&lt;/h2&gt;

&lt;p&gt;TypeScript is widely used and loved by developers around the world. Here are some testimonials given by popular companies which is another indication that switching to TypeScript is worth it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Slack:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;According to slack, the switch to TypeScript made their life a lot easier in terms of bug-fixing and productivity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They also said &lt;strong&gt;Static Analysis&lt;/strong&gt; which analyzes your code and tries to infer types and warns the developer in advance before the code even runs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They were overwhelmed by the amount of bugs found when they were converting their code to TypeScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They were also surprised about how powerful editor integration is. Editor integration can be game-changing when your code editor has autocomplete where TypeScript suggests what your next piece of code can be and makes your editor do the same.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Airbnb:&lt;/strong&gt; According to Airbnb, TypeScript prevented 38% of the bugs based on their analysis.&lt;br&gt;
According to them, TypeScript lets developers be productive and safe at the same time.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#so-those-were-some-of-the-popular-testimonials-moving-onto-some-surveys"&gt;
  &lt;/a&gt;
  So those were some of the popular testimonials! Moving onto some surveys!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In &lt;a href="https://insights.stackoverflow.com/survey/2020#most-loved-dreaded-and-wanted"&gt;StackOverflow's developer survey&lt;/a&gt; in 2020, TypeScript was declared to be the 2nd most loved programming language&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TypeScript was used by 78% of the &lt;a href="https://2020.stateofjs.com/en-US/technologies/javascript-flavors/"&gt;2020 State of JS&lt;/a&gt; survey and 93% went on to say that they would use it again. It was also awarded the &lt;strong&gt;Most Adopted Technology&lt;/strong&gt; based on year-to-year growth&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#moving-onto-how-to-install-typescript-in-your-machine"&gt;
  &lt;/a&gt;
  Moving onto how to install TypeScript in your machine
&lt;/h2&gt;

&lt;p&gt;Run this command in your terminal to install Typescript&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#to-install-typescript-in-your-project"&gt;
  &lt;/a&gt;
  To install TypeScript in your project
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install typescript --save dev #for npm

yarn add typescript --dev #for yarn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#to-install-typescript-globally"&gt;
  &lt;/a&gt;
  To install TypeScript globally
&lt;/h3&gt;



&lt;p&gt;&lt;code&gt;npm install -g typescript #for npm&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the difference between installing typescript globally and in your project?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Installing TypeScript globally requires you to install it only once meaning that you don't have to install it every time when you start a new project.&lt;/p&gt;

&lt;p&gt;Whereas installing it on your project adds TypeScript only in that project directory meaning that it is not installed globally. I recommend installing it globally if you want to use TypeScript for future projects as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-lets-see-how-typescript-is-different-from-javascript-in-implementation"&gt;
  &lt;/a&gt;
  Now let's see how TypeScript is different from JavaScript in implementation.
&lt;/h2&gt;

&lt;p&gt;Let's start off by writing a function in JavaScript that takes in your &lt;strong&gt;name&lt;/strong&gt; as a prop and prints it on the console.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function print_name(name) {
  console.log(`Hello ${name}!`);
}

print_name("charles")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;TypeScript:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function print_name(name: string) {
    console.log(`Hello ${name}!`);
}

print_name("charles");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only difference that you might notice is where you define the props. In JavaScript, you just enter the name of the prop whereas in TypeScript you need to enter the type of the prop as well. Here is the difference that you might have noticed&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print_name(name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;TypeScript:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print_name(name: string)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So why should I go with TypeScript instead of going for JavaScript when the output is the same?&lt;/p&gt;

&lt;p&gt;This upcoming example will say why&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2&lt;/strong&gt;: In this example, we will print the age of the person and we would want the function to print it on the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function print_age(age) {
  console.log(`Your age is ${age}`);
}

print_age(20)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I entered the age of 20 and it ran successfully. Let's try giving something other than numbers and see if it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function print_age(age) {
  console.log(`Your age is ${age}`);
}

print_age("Karthik")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the output which was given by the console was &lt;strong&gt;"Your age is Karthik"&lt;/strong&gt;. So this is quite troubling right. In a situation when you want only a number you need to write additional code that looks somewhat like this for the program to accept only a number.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function print_age(age) {
  if(typeof age === "number") {
    console.log(`Your age is ${age}`);
  } else {
    console.log("Please enter a valid type");
  }
}

print_age(20);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output: &lt;strong&gt;Your age is 20&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This program only accepts a &lt;strong&gt;Number&lt;/strong&gt; data type. But you can write this same program in TypeScript in way lesser lines of code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;TypeScript:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function print_age(age: number) {

    console.log(`Your age is ${age}`);
}

print_age("Karthik");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the &lt;strong&gt;age&lt;/strong&gt; prop can take only a number hence when the string &lt;strong&gt;Karthik&lt;/strong&gt; is given as input, the console throws this error.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Argument of type 'string' is not assignable to parameter of type 'number'.&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Hence if we mend our ways and give only a number an input like this, the code should run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function print_age(age: number) {

    console.log(`Your age is ${age}`);
}

print_age(20);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output: &lt;strong&gt;"Your age is 20"&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;TypeScript Website: &lt;a href="https://www.typescriptlang.org"&gt;https://www.typescriptlang.org&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-connect"&gt;
  &lt;/a&gt;
  Let's connect:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Social Media's: &lt;a href="https://links-app-kardev07.vercel.app"&gt;https://links-app-kardev07.vercel.app&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
