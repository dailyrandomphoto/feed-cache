<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Drag and drop SVG elements</title>
      <author>101samovar</author>
      <pubDate>Sun, 02 Jan 2022 11:30:08 +0000</pubDate>
      <link>https://dev.to/101samovar/drag-and-drop-svg-elements-3oif</link>
      <guid>https://dev.to/101samovar/drag-and-drop-svg-elements-3oif</guid>
      <description>&lt;p&gt;In this article we will drag and drop SVG elements.&lt;/p&gt;

&lt;p&gt;Let’s build a site.&lt;br&gt;
Let’s add an SVG with two rectangles.&lt;br&gt;
Let’s add the CSS class to check if the element is draggable.&lt;/p&gt;

&lt;p&gt;Add a mousedown event listener for the SVG-element.&lt;br&gt;
First, check if the element has the “draggable” class name.&lt;br&gt;
If so, get the mouse position.&lt;br&gt;
Remember the element we start to drag and its position.&lt;br&gt;
Then start to listen to mousemove events. &lt;/p&gt;

&lt;p&gt;On mouse move we get the current mouse position&lt;br&gt;
and we change the element position.&lt;br&gt;
So the element is dragging.&lt;/p&gt;

&lt;p&gt;When the mouse button is up we stop to listen to mouse move events.&lt;br&gt;
So the element is dropped.&lt;/p&gt;

&lt;p&gt;Let’s check it out.&lt;/p&gt;

&lt;p&gt;Drag the rectangle. Drop it.&lt;br&gt;
Drag another one. Drop it.&lt;br&gt;
It works! :)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;svg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;startX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elementX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elementY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mousedown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;draggable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;startX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;startY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;elementX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;elementY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mousemove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onMouseMove&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="nx"&gt;onMouseMove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;x&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elementX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttributeNS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;y&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;elementY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;
 &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouseup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;svg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mousemove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onMouseMove&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;I hope you found this article useful, if you need any help please let me know in the comment section.&lt;/p&gt;

&lt;p&gt;👋 See you next time. Have a nice day!&lt;/p&gt;

&lt;p&gt;Subscribe to our channel:&lt;br&gt;
&lt;a href="https://www.youtube.com/c/Samovar101"&gt;https://www.youtube.com/c/Samovar101&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Save more with DynamoDB table class</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 02 Jan 2022 11:29:03 +0000</pubDate>
      <link>https://dev.to/aws-builders/save-more-with-dynamodb-table-class-3k6g</link>
      <guid>https://dev.to/aws-builders/save-more-with-dynamodb-table-class-3k6g</guid>
      <description>&lt;p&gt;During re:Invent 2021, an announcement was made about &lt;a href="https://aws.amazon.com/dynamodb/"&gt;Amazon DynamoDB&lt;/a&gt; with table classes which helps in saving cost for infrequently accessed items. Read about the announcement from &lt;a href="https://aws.amazon.com/blogs/aws/new-dynamodb-table-class-save-up-to-60-in-your-dynamodb-costs/"&gt;AWS blog&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3eqXOgyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/919311122808807426/lo9aQouC_normal.jpg" alt="What’s New on AWS profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        What’s New on AWS
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @awswhatsnew
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Amazon DynamoDB announces the new Amazon DynamoDB Standard-Infrequent Access table class, which helps you reduce your DynamoDB costs by up to 60 percent&lt;br&gt;&lt;br&gt;Amazon DynamoDB announces the new Amazon DynamoDB Standard-Infrequent Access (DynamoDB Standard... &lt;a href="https://t.co/fASry7Wmte"&gt;aws.amazon.com/about-aws/what…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      17:51 PM - 01 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1466102686412001283" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1466102686412001283" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1466102686412001283" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#key-takeaways-from-the-blog"&gt;
  &lt;/a&gt;
  Key takeaways from the blog
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#idea"&gt;The idea behind the storage class (S3) and table class (DynamoDB)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up"&gt;Setting up DynamoDB table class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#costs"&gt;How DynamoDB table class affects cost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#best-fit"&gt;Best fit for Standard IA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#the-idea-behind-the-storage-class-s3-and-table-class-dynamodb"&gt;
  &lt;/a&gt;
  The idea behind the storage class (S3) and table class (DynamoDB) &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;In most of the Serverless architectures, the &lt;em&gt;go-to solution&lt;/em&gt; for storing infrequently access items with high availability is leveraging &lt;a href="https://aws.amazon.com/s3/"&gt;Amazon S3&lt;/a&gt; with the storage class &lt;strong&gt;Standard IA&lt;/strong&gt; or &lt;strong&gt;One zone IA&lt;/strong&gt;. &lt;br&gt;
This is achieved in two ways -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Where periodically or based on events, DynamoDB table items are retrieved and stored in S3 with the storage class of Infrequently Accessed (IA). And the retrieved items from DynamoDB have to be deleted from DynamoDB.&lt;/li&gt;
&lt;li&gt;With &lt;a href="https://dev.to/awscommunity-asean/dynamodb-and-ttl-177g"&gt;DynamoDB TTL&lt;/a&gt; and &lt;a href="https://dev.to/aws-builders/deep-dive-into-lambda-event-filters-for-dyanmodb-320"&gt;event filters for &lt;em&gt;REMOVE&lt;/em&gt; operation&lt;/a&gt; only, this can be stored into S3 with he storage class of &lt;em&gt;Infrequently Accessed (IA)&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This helps in storing data which are in other words &lt;em&gt;archived&lt;/em&gt; to the application and would be accessed &lt;em&gt;one a while&lt;/em&gt; but whenever it is accessed, it needs to be highly available.&lt;/p&gt;

&lt;p&gt;Now with the latest announcement, we wouldn't have to architect using S3 for &lt;em&gt;infrequently accessed&lt;/em&gt; items/objects and it is all part of DynamoDB table with the &lt;em&gt;Standard-IA&lt;/em&gt; class with which you can perform the same DynamoDB operations for read/write. Now with the introduction of table classes, there are two classes now available - &lt;strong&gt;DynamoDB Standard&lt;/strong&gt; and &lt;a href="https://aws.amazon.com/dynamodb/standard-ia/"&gt;&lt;strong&gt;DynamoDB Standard-IA&lt;/strong&gt;&lt;/a&gt;. The table with &lt;em&gt;Standard-IA&lt;/em&gt; class will eliminate the need of S3 based archival.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;DynamoDB Standard&lt;/strong&gt;&lt;br&gt;
The default general-purpose table class. Recommended for the vast majority of tables that store frequently accessed data, with throughput (reads and writes) as the dominant table cost.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DynamoDB Standard-IA&lt;/strong&gt;&lt;br&gt;
Recommended for tables that store data that is infrequently accessed, with storage as the dominant table cost.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#setting-up-dynamodb-table-class"&gt;
  &lt;/a&gt;
  Setting up DynamoDB table class &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;You could use your existing deployment methods for creating or updating DynamoDB tables with &lt;em&gt;TableClass&lt;/em&gt; attribute via CloudFormation and also from the web console.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#creating-a-table-with-dynamodb-standardia"&gt;
  &lt;/a&gt;
  Creating a table with DynamoDB Standard-IA
&lt;/h5&gt;

&lt;p&gt;Whenever creating the table from console, under &lt;strong&gt;Customized settings&lt;/strong&gt; selection, the choice of table class shows up where you can choose between &lt;strong&gt;DynamoDB Standard&lt;/strong&gt; and &lt;strong&gt;DynamoDB Standard-IA&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YXgYc6Lm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhrnl9tcbbou9a7u9ga9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YXgYc6Lm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhrnl9tcbbou9a7u9ga9.png" alt="Create table with Standard IA" width="816" height="469"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#updating-a-table-to-dynamodb-standardia"&gt;
  &lt;/a&gt;
  Updating a table to DynamoDB Standard-IA
&lt;/h5&gt;

&lt;p&gt;For updating an existing table, select the table and view details on the console. Under the &lt;strong&gt;Actions&lt;/strong&gt; menu, select &lt;strong&gt;Update table class&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YD_0mAvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxxn4yf1bbpasitndin2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YD_0mAvD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gxxn4yf1bbpasitndin2.png" alt="Updating a table to DynamoDB Standard-IA" width="880" height="418"&gt;&lt;/a&gt; This will present you an UI where you can choose between &lt;strong&gt;DynamoDB Standard&lt;/strong&gt; and &lt;strong&gt;DynamoDB Standard-IA&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P4hdwqmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xfxwq1mhm77ycs5jvnt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P4hdwqmx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xfxwq1mhm77ycs5jvnt.png" alt="Update table to Standard IA" width="809" height="258"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#creating-or-updating-with-cloudformation-sam-cli"&gt;
  &lt;/a&gt;
  Creating or updating with CloudFormation / SAM CLI
&lt;/h5&gt;

&lt;p&gt;SAM CLI which uses CloudFormation based resource definition with YAML/JSON, the table class can be updated with the new property introduced &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html#cfn-dynamodb-table-tableclass"&gt;&lt;strong&gt;TableClass&lt;/strong&gt;&lt;/a&gt; which accepts &lt;strong&gt;STANDARD&lt;/strong&gt; for DynamoDB Standard class or &lt;strong&gt;STANDARD_INFREQUENT_ACCESS&lt;/strong&gt; for DynamoDB Standard IA class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;DynamoDBTable&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::DynamoDB::Table&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;AttributeDefinitions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt;
          &lt;span class="na"&gt;AttributeType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;S&lt;/span&gt;
      &lt;span class="na"&gt;KeySchema&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;AttributeName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;id&lt;/span&gt;
          &lt;span class="na"&gt;KeyType&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;HASH&lt;/span&gt;
      &lt;span class="na"&gt;ProvisionedThroughput&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;ReadCapacityUnits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
        &lt;span class="na"&gt;WriteCapacityUnits&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;
      &lt;span class="na"&gt;TableClass&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;STANDARD_INFREQUENT_ACCESS&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#how-dynamodb-table-class-affects-cost"&gt;
  &lt;/a&gt;
  How DynamoDB table class affects cost &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;The introduction of table classes, has changed how DynamoDB pricing works in terms of &lt;em&gt;storage&lt;/em&gt;, &lt;em&gt;read-write requests&lt;/em&gt; and &lt;em&gt;global tables&lt;/em&gt;. &lt;br&gt;
The cost for storage with &lt;em&gt;DynamoDB Standard IA&lt;/em&gt; class is much much &lt;strong&gt;cheaper&lt;/strong&gt; when compared with &lt;em&gt;DynamoDB Standard&lt;/em&gt; class with almost a difference of $0.15 per GB-month.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YfTsp9qz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kduziybyfqtj4lp31grk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YfTsp9qz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kduziybyfqtj4lp31grk.png" alt="Data storage" width="880" height="315"&gt;&lt;/a&gt; However, first 25 GB/month is available for free under &lt;em&gt;DynamoDB Standard&lt;/em&gt; class with the &lt;em&gt;monthly free tier&lt;/em&gt;.&lt;br&gt;
But in terms of &lt;em&gt;read-write requests&lt;/em&gt; and also &lt;em&gt;global tables&lt;/em&gt;, the &lt;em&gt;DynamoDB Standard IA&lt;/em&gt; class would make DynamoDB pricing expensive. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MEYY2a_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hvoz6nvga905l0zbvvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEYY2a_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hvoz6nvga905l0zbvvw.png" alt="Global tables" width="880" height="455"&gt;&lt;/a&gt; But comparing to the number of read requests which would happen with &lt;em&gt;DynamoDB Standard&lt;/em&gt; and &lt;em&gt;DynamoDB Standard IA&lt;/em&gt; class would be much much lesser as they are infrequently accessed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oG_K6jiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3531ucl0lz2yfq0hsfy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oG_K6jiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3531ucl0lz2yfq0hsfy.png" alt="Read-write requests" width="880" height="498"&gt;&lt;/a&gt;&lt;br&gt;
There is a detailed information on DynamoDB pricing page for &lt;a href="https://aws.amazon.com/dynamodb/pricing/on-demand/"&gt;On Demand&lt;/a&gt; and &lt;a href="https://aws.amazon.com/dynamodb/pricing/provisioned/"&gt;Provisioned&lt;/a&gt;. From the example of table classes - DynamoDB Standard IA classes with On Demand is &lt;strong&gt;44.2% cheaper&lt;/strong&gt; than Standard and Provisioned is &lt;strong&gt;37.6% cheaper&lt;/strong&gt; than Standard even though the read-write requests with both the pricing models, Stardard IA is &lt;strong&gt;expensive&lt;/strong&gt; over Standard class.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#best-fit-for-standard-ia"&gt;
  &lt;/a&gt;
  Best fit for Standard IA &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;The new table class &lt;em&gt;DynamoDB Standard IA&lt;/em&gt; may not fit into all the applications as if the DynamoDB table is often requested with read/write it would generate a high DynamoDB bill. Standard IA would fit in best for the scenarios such as - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Social media app where posts prior to 1 year (365 days) are rarely accessed. &lt;/li&gt;
&lt;li&gt;Enterprise applications where the archives of years of data are maintained.&lt;/li&gt;
&lt;li&gt;Healthcare systems where the patient bill records are rarely accessed once cleared by insurance.&lt;/li&gt;
&lt;li&gt;Ecommerce applications where the low rated / less searched products are in IA state.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>dynamodb</category>
      <category>costsaving</category>
    </item>
    <item>
      <title>Time Management for Junior Developers</title>
      <author>Mikhail Karan</author>
      <pubDate>Sun, 02 Jan 2022 11:24:21 +0000</pubDate>
      <link>https://dev.to/mikhailkaran/time-management-for-junior-developers-3bgd</link>
      <guid>https://dev.to/mikhailkaran/time-management-for-junior-developers-3bgd</guid>
      <description>&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5AVQEXseTPZxZmYLLXzMgS"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-html-all-the-things"&gt;
  &lt;/a&gt;
  What is HTML All The Things
&lt;/h2&gt;

&lt;p&gt;HTML All The Things is a &lt;a href="https://podcast.htmlallthethings.com/"&gt;web development podcast&lt;/a&gt; and &lt;a href="https://discord.com/invite/jweMCx9"&gt;discord community&lt;/a&gt; which was started by Matt and Mike, developers based in Ontario, Canada. &lt;/p&gt;

&lt;p&gt;The podcast speaks to web development topics as well as running a small business, self-employment and time management. You can join them for both their successes and their struggles as they try to manage expanding their Web Development business without stretching themselves too thin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#announcements"&gt;
  &lt;/a&gt;
  Announcements
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Svelte for Beginners&lt;/strong&gt; Udemy course is now live! Mike took his experience in teaching and learning Svelte and created a course. &lt;/p&gt;

&lt;p&gt;This course will teach you the fundamentals of JavaScript frameworks. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get it now on Udemy!&lt;/strong&gt; 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.udemy.com/course/svelte-for-beginners/?couponCode=HATTSALE"&gt;Svelte For Beginners&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-this-one-about"&gt;
  &lt;/a&gt;
  What's This One About?
&lt;/h2&gt;

&lt;p&gt;Time management is a challenging part of any developers' day. Between the coding work that needs to be done alongside planning, and support requests - getting ahead may seem impossible. For junior developers, the added challenge is that they're actively learning, while balancing all the things that come with job searching, working, and even traditional school. In this episode, Matt and Mike cover some time management tips and tricks for developers - with some specific ones in there for junior developers and their crazy schedules. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-notes"&gt;
  &lt;/a&gt;
  Show Notes
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#balancing-learning-applying-for-jobs-and-more"&gt;
  &lt;/a&gt;
  Balancing | Learning, Applying for Jobs, and more
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Determine your task priority&lt;/li&gt;
&lt;li&gt;Make an 'if I skip' list/consideration&lt;/li&gt;
&lt;li&gt;Don't always shoot for the most productive tasks &lt;/li&gt;
&lt;li&gt;Take breaks and days off &lt;/li&gt;
&lt;li&gt;Don't force a perfect plan &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#managing-your-learning-time"&gt;
  &lt;/a&gt;
  Managing Your Learning Time
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Tutorial hell&lt;/li&gt;
&lt;li&gt;Don't get stuck and not move on&lt;/li&gt;
&lt;li&gt;Don't learn it all at once&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#managing-your-job-application-time"&gt;
  &lt;/a&gt;
  Managing your Job Application Time
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Prioritize jobs based on your preferences&lt;/li&gt;
&lt;li&gt;Don't over apply&lt;/li&gt;
&lt;li&gt;Don't take anything personally (in the application process)&lt;/li&gt;
&lt;li&gt;Don't get discouraged &lt;/li&gt;
&lt;li&gt;Invest extra time wisely&lt;/li&gt;
&lt;li&gt;Acknowledge it's a grind&lt;/li&gt;
&lt;li&gt;Try multiple methods&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;If you're enjoying the podcast consider giving us a review on &lt;a href="https://podcasts.apple.com/us/podcast/html-all-things-web-development-web-design-small-business/id1412209136"&gt;Apple Podcasts&lt;/a&gt; or checking out our Patreon to get a shoutout on the podcast. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.patreon.com/htmlallthethings"&gt;Support us on Patreon&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can find us on all the podcast platforms out there as well as&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/htmlallthethings/"&gt;Instagram (@htmlallthethings)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/htmleverything"&gt;Twitter (@htmleverything)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.tiktok.com/@htmlallthethings"&gt;TikTok (Html All The Things)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>podcast</category>
      <category>beginners</category>
      <category>career</category>
    </item>
    <item>
      <title>ReactJS</title>
      <author>sndp</author>
      <pubDate>Sun, 02 Jan 2022 10:54:10 +0000</pubDate>
      <link>https://dev.to/lizardkinglk/reactjs-2ghl</link>
      <guid>https://dev.to/lizardkinglk/reactjs-2ghl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-react-"&gt;
  &lt;/a&gt;
  What is React ?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m34aDeow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvxq9b2zaj6aof1vktdm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m34aDeow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvxq9b2zaj6aof1vktdm.jpg" alt="Photo by Ferenc Almasi" width="320" height="213"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Between many front-end frameworks that used in web apps, React JS takes a significant place among developers. We use React to make very dynamic user interfaces. Not only web based (React JS) but for the mobile application development (React Native) and Virtual Reality applications (React VR) also. ReactJS does not only give you the ability of creating user interfaces smooth and easy but also it allows rendering the data into the views (called components) efficiently by changing the nature of the components (called as the state of the component). Unlike other frameworks like  Angular, React does not frame the developer and define how the application developed to a structure it provides but gives you the freedom of planing. Basically it handles the View of the Model View Controller (MVC) and lets the developer use it. So as a matter of fact React cannot be defined as a framework. It is a library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-react-do-"&gt;
  &lt;/a&gt;
  What React do ?
&lt;/h2&gt;

&lt;p&gt;It was founded by Jordan Walke who was a software engineer for Facebook in 2011. ReactJS happened in need of a method that does not mutate the state of real document object model (DOM) which normal js scripting or a framework like Angular would. By making a Virtual DOM and inject the components to this tree component and use this as main page to handle all user events while updating the real DOM by the virtual DOM which was facinating at the time. React uses a one-directional data flow which means that we can mutate the state of the view and make those actions affect the child views. So actions will be handled by parent and signals its child to trigger (we make instructions passed to the child via parent and call them to act due behavior). As soon as the parent state changes, react understands the change by comparing states of then and now before updating virtual DOM. Then the requested changes will returned back to client.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features-of-react"&gt;
  &lt;/a&gt;
  Features of React
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-jsx"&gt;
  &lt;/a&gt;
  1. JSX
&lt;/h3&gt;

&lt;p&gt;React uses JSX as syntax. This is a scripting format that allows both JS (javascript) and XML/HTML (markup). This allows us to use both of these syntax in one code. In earlier phases in frontend development history, the HTML tags like 'div' s were not easy to use in rendering and dom manipulation because they were used as string literals like quotes therefore was less-manageable to use and inside js syntax.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-unidirectional-data-flow"&gt;
  &lt;/a&gt;
  2. Unidirectional Data flow
&lt;/h3&gt;

&lt;p&gt;As mentioned before, react's uni directional data flow makes modifications to components easy. Child components receive props which are immutable but takes callback functions passed to them as instructions to act accordingly when the parent state mutates. This process is called properties flow down; actions flow up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-not-only-mern"&gt;
  &lt;/a&gt;
  3. Not only MERN
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1_rEHTxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdib8bdyav5dpz9f5z3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1_rEHTxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdib8bdyav5dpz9f5z3r.png" alt="Can I use React with...?" width="231" height="115"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The mern stack is a theoretical web-development framework. Which all are javascript frameworks we use to develop dynamic web apps in layerd architecture and MERN (which stands for Mongodb, ExpressJS, ReactJS, NodeJS) has the software developer society get very excited. But what if we need to use react with other runtime and server side environment like django, asp.net or laravel? The answer is we can. ReactJS allows this by only participating in handling the view components and supports easy development. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importance-of-react"&gt;
  &lt;/a&gt;
  Importance of React
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-rapid-development"&gt;
  &lt;/a&gt;
  1. Rapid Development
&lt;/h3&gt;

&lt;p&gt;Usage of reusable components in different contexts makes this easy. There are many tools that can help us with development from other frameworks and developer tools to debugging and testing. We can use the React developer tool to understand the component tree and how it works. Redux is a predictable state manager and using with react we can implement react to work like a one single tree of state objects and this makes easy for making calls to use back-end real-time with the front-end. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-easy-to-learn"&gt;
  &lt;/a&gt;
  2. Easy to Learn
&lt;/h3&gt;

&lt;p&gt;React offers well explained documentation for learners and developers to understand the theory backing it. The basics are simple and can be used while learning. There is a big community that supports the react js and make content that help others learn react.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-dynamic-uis"&gt;
  &lt;/a&gt;
  3. Dynamic UIs
&lt;/h3&gt;

&lt;p&gt;Making responsive and smooth ui is easy with react because state-of-the-art ui component libraries like reactstrap, material design or tailwind makes this easy with their predefined properties to include them in web projects. We can make improve user experiences like making loaders and transitions while making user wait and to make user friendly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-production-value"&gt;
  &lt;/a&gt;
  4. Production value
&lt;/h3&gt;

&lt;p&gt;Many web applications like social media platforms and business applications use react in their applications and web services today. These include Facebook, Instagram,  Dropbox, Netflix, IMDb, Airbnb, PayPal, Khan Academy etc. These web apps recognize and gives the credits to the react library with benefits.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-trending"&gt;
  &lt;/a&gt;
  5. Trending
&lt;/h3&gt;

&lt;p&gt;As react is also easy to learn and with the backing of strong community support react library sure is the most trending front end library among many.&lt;/p&gt;

&lt;p&gt;React 18 will be releasing soon as the latest version and it will contain new features like automatic batching. and transition APIs, a streaming server renderer with built-in support for React.lazy according to official react blog.&lt;/p&gt;

&lt;p&gt;Learn about ReactJS with following links.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/docs/getting-started.html"&gt;https://reactjs.org/docs/getting-started.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>mernstack</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Do you really know TypeScript? (3): Types and interfaces</title>
      <author>Alex Menor</author>
      <pubDate>Sun, 02 Jan 2022 10:52:25 +0000</pubDate>
      <link>https://dev.to/alexmenor/do-you-really-know-typescript-3-types-and-interfaces-13k3</link>
      <guid>https://dev.to/alexmenor/do-you-really-know-typescript-3-types-and-interfaces-13k3</guid>
      <description>&lt;p&gt;&lt;strong&gt;"Do you really know TypeScript?" series:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexmenor/do-you-really-know-typescript-1-thinking-in-sets-55dm"&gt;(1) Thinking in sets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/alexmenor/do-you-really-know-typescript-2-being-strict-2edc"&gt;(2) Being strict &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(3) Types and interfaces (You are here)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the things that you will do the most with Typescript is to define the shape of objects with &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt;. For that reason, understanding both well will make your TypeScript better quickly.&lt;/p&gt;

&lt;p&gt;Let's see their main differences aside of the syntax, common patterns and surprising behaviours.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-type-endraw-can-be-used-for-more-things"&gt;
  &lt;/a&gt;
  &lt;code&gt;type&lt;/code&gt; can be used for more things
&lt;/h2&gt;

&lt;p&gt;While &lt;code&gt;interface&lt;/code&gt; is used just to define the shape of objects, &lt;code&gt;type&lt;/code&gt; has other use cases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Pet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;CoolNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.1416&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#interface-merging"&gt;
  &lt;/a&gt;
  Interface merging
&lt;/h2&gt;

&lt;p&gt;You should be aware of this one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;DesktopFile&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;DesktopFile&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Error: Property 'icon' is missing in type '{ extension: string; }' &lt;/span&gt;
&lt;span class="c1"&gt;// but required in type 'DesktopFile'.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DesktopFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pdf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can be surprising that you can redeclare an interface and merge them!&lt;/p&gt;

&lt;p&gt;This is also known as "interface augmenting" and can be desirable in some situations but is definitely unusual in other languages.&lt;/p&gt;

&lt;p&gt;Note that using &lt;code&gt;Type&lt;/code&gt; would result in an error.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discriminated-union"&gt;
  &lt;/a&gt;
  Discriminated union
&lt;/h2&gt;

&lt;p&gt;Also known as "tagged union", is a frequent pattern in TypeScript.&lt;/p&gt;

&lt;p&gt;It can be weird if you are used to polymorphism using classes, but since TypeScript's types disappear at runtime, you need to do things a bit different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;extension&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;folder&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;filesInside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;DesktopItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;File&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Folder&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DesktopItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;file&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// TypeScript knows that the properties&lt;/span&gt;
    &lt;span class="c1"&gt;// of the type File are defined here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be used like &lt;code&gt;instanceof&lt;/code&gt; in other languages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#union-of-types-vs-types-of-unions"&gt;
  &lt;/a&gt;
  Union of types vs types of unions
&lt;/h2&gt;

&lt;p&gt;Generally prefer &lt;strong&gt;union of types&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;motorcycle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;car&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

    &lt;span class="na"&gt;numberOfWheels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; 
    &lt;span class="na"&gt;numberOfAirbags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vehicle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Vehicle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{...}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vehicle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;kind&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;car&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// TypeScript still thinks that&lt;/span&gt;
    &lt;span class="c1"&gt;// numberOfAirbags could be undefined&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we used union of types instead, like in the "discriminated union" example, TypeScript can be sure that the &lt;code&gt;Car&lt;/code&gt; properties are available.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#excess-property-checking"&gt;
  &lt;/a&gt;
  Excess property checking
&lt;/h2&gt;

&lt;p&gt;This is a mechanism that can mess your mental model of structural typing when using &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;interface&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Cat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;whiskersLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Uxia&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;whiskersLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;bestFriend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nina&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c1"&gt;// ~~~~~~~~~~~~~~~~~~ Object literal may only specify known properties,&lt;/span&gt;
&lt;span class="c1"&gt;//                    and 'bestFriend' does not exist in type 'Cat'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From a structural typing point of view it is valid as the defined object contains at least the properties declared for &lt;code&gt;Cat&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is excess property checking complaining though. &lt;/p&gt;

&lt;p&gt;Check out this case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;zipCode&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;randomGuy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Pedro&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;45420&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Excess property checking quickly points out an error that we could've spent too much time looking for otherwise.&lt;/p&gt;

&lt;p&gt;Note that this check only happens when using object literals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-i-use-raw-type-endraw-or-raw-interface-endraw-then"&gt;
  &lt;/a&gt;
  Should I use &lt;code&gt;type&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt; then?
&lt;/h2&gt;

&lt;p&gt;I find &lt;code&gt;type&lt;/code&gt; easier to reason about and more readable. &lt;/p&gt;

&lt;p&gt;One exception would be when extending types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Flyable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fly&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Airplane&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Flyable&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Helicopter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Flyable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, as we saw earlier, "interface augmenting" can be unfamiliar to many people.&lt;/p&gt;

&lt;p&gt;Be aware of their differences and try to make your team agree in their uses for the sake of consistency and you will be fine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-to-go-deeper"&gt;
  &lt;/a&gt;
  Resources to go deeper
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.goodreads.com/en/book/show/48570456-effective-typescript"&gt;Effective TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/"&gt;TypeScript docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Create React App - Mind Map. Part 6 of 10: Map</title>
      <author>101samovar</author>
      <pubDate>Sun, 02 Jan 2022 10:29:53 +0000</pubDate>
      <link>https://dev.to/101samovar/create-react-app-mind-map-part-6-of-10-map-mhp</link>
      <guid>https://dev.to/101samovar/create-react-app-mind-map-part-6-of-10-map-mhp</guid>
      <description>&lt;p&gt;Let’s navigate to the Map screen.&lt;br&gt;
The Map screen is the main screen of the MindMap App.&lt;br&gt;
To navigate to the Map screen you need to double click on the MindMap card on the Home screen.&lt;br&gt;
So in the Home JS file we need to add the method that sets the route to the map.&lt;br&gt;
On the card element we need to add the double click handler.&lt;br&gt;
On double click we just call the method with item id param.&lt;/p&gt;

&lt;p&gt;Source code:&lt;br&gt;
&lt;a href="https://github.com/101samovar/react-mindmap.git"&gt;https://github.com/101samovar/react-mindmap.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our channel:&lt;br&gt;
&lt;a href="https://youtu.be/58KJNlyPLsw"&gt;https://youtu.be/58KJNlyPLsw&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Julia: A Programming Language for Data and Computer Analytics</title>
      <author>Yaniv Noema</author>
      <pubDate>Sun, 02 Jan 2022 10:06:35 +0000</pubDate>
      <link>https://dev.to/imagescv/julia-a-programming-language-for-data-and-computer-analytics-5gm7</link>
      <guid>https://dev.to/imagescv/julia-a-programming-language-for-data-and-computer-analytics-5gm7</guid>
      <description>&lt;p&gt;&lt;a href="https://julialang.org/"&gt;Julia&lt;/a&gt; is a language that was designed specifically for data and computer analytics. It has been created to handle tasks such as statistics, linear algebra, machine learning, and many more complex calculations.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-julia-programming-language-and-what-are-its-features"&gt;
  &lt;/a&gt;
  What is Julia programming language and what are its features?
&lt;/h2&gt;

&lt;p&gt;Julia is a language that was designed specifically for data and computer analytics. It has been created to handle tasks such as statistics, linear algebra, machine learning, and many more complex calculations. Julia also includes some unique features that make it stand out from other languages. For example, Julia allows you to write code in an imperative style or a functional style, which gives you more flexibility when programming. Additionally, Julia has a very efficient compiler that makes code run quickly without sacrificing accuracy. Finally, Julia is open source software and it is free to use!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-does-julia-programming-language-compare-to-other-popular-languages"&gt;
  &lt;/a&gt;
  How does Julia programming language compare to other popular languages?
&lt;/h2&gt;

&lt;p&gt;Julia is often compared to other popular languages such as Python and R. In terms of syntax, Julia is similar to Python but it has more features in common with R. For example, both Python and R allow you to write code in an imperative style or a functional style. However, Julia is faster than both Python and R and it offers more features.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#which-types-of-projects-can-benefit-from-julia"&gt;
  &lt;/a&gt;
  Which types of projects can benefit from Julia?
&lt;/h2&gt;

&lt;p&gt;A lot of different types of businesses would benefit from using the Julia programming language including data science teams, financial institutions, and healthcare organizations. For example, a business that is looking to analyze large sets of data quickly will be able to do so with ease when they use Julia. Additionally, Julia is great for businesses that want to perform complex calculations or simulations. Lastly, Julia is also well suited for machine learning projects!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#who-is-the-target-audience-for-julia-programming-language"&gt;
  &lt;/a&gt;
  Who is the target audience for Julia programming language?
&lt;/h2&gt;

&lt;p&gt;The target audience for Julia is anyone who wants to use a high-level language for data and computer analytics. In particular, businesses and individuals that want to do complex calculations quickly will benefit from using Julia. Additionally, if you are looking to learn a new programming language, Julia is a great choice! It is easy to learn and it has a very active community.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-you-should-learn-julia-programming-language"&gt;
  &lt;/a&gt;
  Why you should learn Julia programming language?
&lt;/h2&gt;

&lt;p&gt;There are a few reasons why you should learn the Julia programming language. &lt;br&gt;
Firstly, &lt;strong&gt;Julia is a great language for data and computer analytics&lt;/strong&gt;. It has been designed to handle complex calculations quickly and accurately. Additionally, Julia is also easy to learn and it has a very active community. Lastly, businesses that want to use a high-level language for data and computer analytics will benefit from using Julia. It has been designed to handle complex calculations quickly and accurately. Additionally, Julia is also easy to learn and it has a very active community. Lastly, businesses that want to use a high-level language for data and computer analytics will benefit from using Julia.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#resources-for-learning-more-about-julia-programming-language"&gt;
  &lt;/a&gt;
  Resources for learning more about Julia programming language:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://julialang.org/"&gt;Julia Programming Language Homepage &lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://juliaacademy.com/courses"&gt;Julia Academy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLP8iPy9hna6Sdx4soiGrSefrmOPdUWixM"&gt;The 2nd annual JuliaCon 2015 (MIT) on YouTube&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://ucidatascienceinitiative.github.io/IntroToJulia/"&gt;A Deep Introduction to Julia for Data Science and Scientific Computing&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Julia programming language designed to make data and computer analytics more accessible. It has many features like dynamic typing, built-in support for parallel computing, and high performance that will appeal to programmers with all levels of expertise. &lt;br&gt;
If you are looking for a new way to learn how computers work or break down large datasets in your field, the easy syntax and powerful features of this new programming language may be just what you need!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>programming</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Built-In Angular Pipes - Part 1</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Sun, 02 Jan 2022 09:52:06 +0000</pubDate>
      <link>https://dev.to/this-is-angular/built-in-angular-pipes-part-1-23ec</link>
      <guid>https://dev.to/this-is-angular/built-in-angular-pipes-part-1-23ec</guid>
      <description>&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;oday we will be learning on a very important concept provided by Angular - &lt;code&gt;Pipes&lt;/code&gt;&lt;br&gt;
The main use of Pipe is to transform the appearance of the data before showing to the user. &lt;br&gt;
The analogy which comes to my mind when ever I talk about Pipe is the &lt;em&gt;water filter&lt;/em&gt;. A water filter takes water as input and as an output it provides us clean water, so it basically does some transformation to the water inside it.&lt;br&gt;
Similarly the Angular Pipes also takes the data as input and does some transformation and sends out the transformed data.&lt;br&gt;
At this point you might be thinking but why do need to transform?&lt;br&gt;
The main reason is to improve the &lt;strong&gt;readability&lt;/strong&gt;. &lt;br&gt;
Angular already provided thirteen (13) built in pipes. Lets see each of them one by one -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;AsyncPipe - (Will discuss when I will be covering Observables)&lt;/li&gt;
&lt;li&gt;CurrencyPipe &lt;/li&gt;
&lt;li&gt;DatePipe &lt;/li&gt;
&lt;li&gt;DecimalPipe &lt;/li&gt;
&lt;li&gt;I18nPluralPipe &lt;/li&gt;
&lt;li&gt;I18nSelectPipe &lt;/li&gt;
&lt;li&gt;JsonPipe &lt;/li&gt;
&lt;li&gt;KeyValuePipe &lt;/li&gt;
&lt;li&gt;LowerCasePipe &lt;/li&gt;
&lt;li&gt;PercentPipe &lt;/li&gt;
&lt;li&gt;SlicePipe &lt;/li&gt;
&lt;li&gt;TitleCasePipe &lt;/li&gt;
&lt;li&gt;UpperCasePipe&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So first lets create a separate component and name it &lt;code&gt;pipe-demo&lt;/code&gt;&lt;br&gt;
If you are not aware of how to create a component I would highly suggest to quickly go through &lt;a href="https://dev.to/anubhab5/creating-angular-component-129e"&gt;this_post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our project structure would look like below -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lkDMbmJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0olfn09lt9gs2b1vh98.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lkDMbmJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0olfn09lt9gs2b1vh98.PNG" alt="Image description" width="468" height="300"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;code&gt;CurrencyPipe&lt;/code&gt;&lt;br&gt;
It is used to format the currency value as per the given country code/ currency/ decimal/ locale information. &lt;br&gt;
&lt;u&gt;use-case&lt;/u&gt;&lt;br&gt;
Suppose you have an e-commerce application where you store only the price of the products, but before showing to the user you need to add the currency value (either at the beginning or at the end).&lt;br&gt;
In this scenario currency pipe is the best choice.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Syntax&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;{{ value_expression | currency [ : currencyCode [ : display [ : digitsInfo &lt;br&gt;
[ : locale ] ] ] ] }}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets understand the syntax before diving into the example -&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;value_expression&lt;/strong&gt; - The input value that needs to be formatted&lt;/p&gt;

&lt;p&gt;| - The pipe operator &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;currency&lt;/strong&gt; - The name of the pipe&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;currencyCode&lt;/strong&gt; - ISO 4217 currency code (its a standard) &lt;br&gt;
               It is &lt;em&gt;Optional&lt;/em&gt;.&lt;br&gt;
               It is of String type.&lt;br&gt;
               Default value is USD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;display&lt;/strong&gt; - This determines the way to display the currency. &lt;br&gt;
              It can be of type &lt;code&gt;symbol&lt;/code&gt; (the currency symbol eg $) &lt;br&gt;
              or &lt;code&gt;code&lt;/code&gt; or &lt;code&gt;symbol-narrow&lt;/code&gt; or our &lt;code&gt;own custom string&lt;/code&gt;.&lt;br&gt;
              It is &lt;em&gt;Optional&lt;/em&gt;.&lt;br&gt;
              Default value is &lt;strong&gt;Symbol&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;digitsInfo&lt;/strong&gt; - It is the digital representation of currency &lt;br&gt;
                 value. Keeps track of how many digits to be displayed before and after decimal point if any.&lt;br&gt;
             It is of String type.&lt;br&gt;
             It is &lt;em&gt;Optional&lt;/em&gt;.&lt;br&gt;
             Default value is undefined.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;locale&lt;/strong&gt; - It It represents the locale format rules.&lt;br&gt;
             Default value is the project locale if set else its undefined. It is also optional .&lt;/p&gt;



&lt;p&gt;Now lets dive into the practical part of it.&lt;/p&gt;

&lt;p&gt;Lets create a variable in the component.ts file and name it &lt;code&gt;expense&lt;/code&gt;, and initialize it with the value &lt;code&gt;786.4589&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-pipe-demo',
  templateUrl: './pipe-demo.component.html',
  styleUrls: ['./pipe-demo.component.css']
})
export class PipeDemoComponent implements OnInit {

  expense = 786.4589;

  constructor() { }

  ngOnInit(): void {
  }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, lets jump into the component template file and paste in the very simple code to start with -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{{ expense | currency }}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you start the application and navigate to localhost:4200 in your browser then you must see the following output -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--En8Y3iSs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6y9zt7lyf9euuoj1hi7b.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--En8Y3iSs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6y9zt7lyf9euuoj1hi7b.PNG" alt="Image description" width="293" height="108"&gt;&lt;/a&gt;&lt;br&gt;
Here the default currency is taken is USD and the display as symbol.&lt;/p&gt;

&lt;p&gt;Now say if you want to change it to your currency unit, say I am putting as INR (that's Indian Rupee), then the code will become like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{{ expense | currency: "INR" }}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then the corresponding output will become like -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pLH0pwq8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t20s75vs9n3yjoui65vh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pLH0pwq8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t20s75vs9n3yjoui65vh.PNG" alt="Image description" width="319" height="131"&gt;&lt;/a&gt;&lt;br&gt;
So here we are passing a &lt;strong&gt;valid&lt;/strong&gt; currency code (here its INR) then the corresponding symbol will be displayed (here ₹)&lt;br&gt;
If you are not passing a valid currency code then instead of the symbol the currency code will only be displayed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;br&gt;
If you want to display any specific value as the default currency symbol then you have to pass it as the display parameter.&lt;br&gt;
The display parameter can be &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;symbol&lt;/code&gt; or &lt;code&gt;symbol-narrow&lt;/code&gt; or any other &lt;code&gt;custom value&lt;/code&gt; too.&lt;/p&gt;

&lt;p&gt;Now lets paste the below code in the component template file -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;hr /&amp;gt;
&amp;lt;h3&amp;gt;{{ expense | currency: "INR":"code" }}&amp;lt;/h3&amp;gt;
&amp;lt;h3&amp;gt;{{ expense | currency: "CAD":"symbol" }}&amp;lt;/h3&amp;gt;
&amp;lt;h3&amp;gt;{{ expense | currency: "CAD":"symbol-narrow" }}&amp;lt;/h3&amp;gt;
&amp;lt;h3&amp;gt;{{ expense | currency: "INR":"symbol-narrow" }}&amp;lt;/h3&amp;gt;
&amp;lt;h3&amp;gt;{{ expense | currency: "INR":"Indian Rupee" }}&amp;lt;/h3&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will see the output as -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GHbGjfXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/453i7f412407c5lzhpge.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GHbGjfXi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/453i7f412407c5lzhpge.PNG" alt="Image description" width="414" height="256"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;Above output Explanation&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;code&gt;{{ expense | currency: "INR":"code" }}&lt;/code&gt;&lt;br&gt;
Here we are passing the currency code as INR and asking Angular to use the code only so in output you will see INR before the value is printed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{{ expense | currency: "CAD":"symbol" }}&lt;/code&gt;&lt;br&gt;
Here we are passing the currency code as CAD that is Canadian Dollar and asking to print the Symbol of it. So the output is &lt;br&gt;
&lt;strong&gt;CA$&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;expense | currency: "CAD":"symbol-narrow"&lt;/code&gt;&lt;br&gt;
There are countries like Canada have 2 currency codes like symbol CA$ and symbol-narrow $.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;expense | currency: "INR":"symbol-narrow"&lt;/code&gt;&lt;br&gt;
Indian rupee does not have  symbol-narrow so the default rupee symbol is displayed.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;expense | currency: "INR":"Indian Rupee"&lt;/code&gt;&lt;br&gt;
If you want to display a custom value then that is also possible. You can pass as a parameter&lt;/p&gt;



&lt;p&gt;We can also customize the decimal points of the currency value. For that we need to pass the &lt;code&gt;digitsInfo&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;Lets paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;hr /&amp;gt;
&amp;lt;h3&amp;gt;{{ expense | currency: "INR":"symbol":"4.2-2" }}&amp;lt;/h3&amp;gt;
&amp;lt;h3&amp;gt;{{ expense | currency: "INR":"symbol":"3.1-1" }}&amp;lt;/h3&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see the below output -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mCTz9vfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2hq9hcbjvcte0j0pp87.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mCTz9vfc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e2hq9hcbjvcte0j0pp87.PNG" alt="Image description" width="152" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{{ expense | currency: "INR":"symbol":"4.2-2" }}&lt;/code&gt;&lt;br&gt;
Here 4 signifies the number of digits before the decimal point.&lt;br&gt;
Since we have just 3 digits before the decimal in the example that is why a 0 is also appended at the beginning.&lt;br&gt;
2-2 means that after the decimal point minimum 2 characters should be there and maximum allowed is also 2.&lt;/p&gt;

&lt;p&gt;The minimum should &lt;strong&gt;not&lt;/strong&gt; be greater than the maximum &lt;br&gt;
&lt;code&gt;&amp;lt;h3&amp;gt;{{ expense | currency: "INR":"symbol":"4.2-1" }}&amp;lt;/h3&amp;gt;&lt;/code&gt;&lt;br&gt;
else you will get the below error -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ldJ48Jc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqc3jypyc3gol9r8gidf.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ldJ48Jc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqc3jypyc3gol9r8gidf.PNG" alt="Image description" width="880" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If decimal points are not needed then we need to pass digitInfo parameter fractions as 0.&lt;/p&gt;

&lt;p&gt;I will walk you through the locale part once I cover the internationalization and localization part.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the post.&lt;br&gt;
If yes please do like, share and comment.&lt;/p&gt;

&lt;p&gt;Stay tuned for the remaining Pipes available in Angular.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Docker Explained: What is containerisation?  | What is the need of containerisation? | What is docker?</title>
      <author>Kajal kumari</author>
      <pubDate>Sun, 02 Jan 2022 09:31:38 +0000</pubDate>
      <link>https://dev.to/developerscodz/docker-explained-what-is-containerisation-what-is-the-need-of-containerisation-what-is-docker-3d9l</link>
      <guid>https://dev.to/developerscodz/docker-explained-what-is-containerisation-what-is-the-need-of-containerisation-what-is-docker-3d9l</guid>
      <description>&lt;p&gt;Before introducing the containerisation let us first understand what basically happens in a standard delivery pipeline.So developer after writing all the codes will build it.In this, several dependencies can also be needed. After building he/she will give the executable or software(code + dependencies) to the tester to check all the test runs which were initially decided even before making of that project.If the project passes all the test runs then tester approves it for the deployment and then it become available to end users.&lt;/p&gt;

&lt;p&gt;But what if software fails to pass some of the test runs, it will be given back to developer highlighting the problems, but developer wonders, its working properly in my machine. Why it won't worked in yours??🤔🤔&lt;/p&gt;

&lt;p&gt;So in order to know the problem let's deep dive into this environment of developer and tester.&lt;/p&gt;

&lt;p&gt;Say developer and tester is using almost the same environment but there is a slight difference, like developer is using Pytest 5.4.3 to test all the test runs and the tester is using Pytest 5.3.0 or if both are using different IDE,etc so there can be compatibility issue which can cause the software to run on the developer environment but not on the tester environment.&lt;/p&gt;

&lt;p&gt;To solve this problem, what developer can do is, he will take the code, all the dependencies(like libraries,functions,tools) and the environment of the project and put it in a container and then he will ship the container like a package to the tester or to the users. By doing this, now  the environment of the other's system doesn't matter because developer had already configured the container according to the project need.&lt;/p&gt;

&lt;p&gt;So this concept is quite similar to virtual machine, right? but lets quickly summarise what virtualisation or virtual machine (VM) is ? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VM is virtual computers within computers&lt;/strong&gt;.It will have CPU, memory, disk, kernel everything that a real computer have which will be borrowed from a physical host computer.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWguiuR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1198/1%2AoF6QqYRhWPw9HF20CUqhMw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWguiuR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1198/1%2AoF6QqYRhWPw9HF20CUqhMw.png" alt='"Virtual Machine"' width="880" height="703"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, &lt;strong&gt;containers,&lt;/strong&gt; based on the same concept but quite different from VMs. Each VMs run its own guest operating system but containers share the operation system of the host which makes containers size lighter than VMs hence, more portable and agile. Moreover, they are isolated from each other and run there own software,binaries and configuration. Container can be made and run on local systems,virtual machines or even deployed on the clouds. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NP3Q8acg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dt4mbq2tfun1h2v8mlag.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NP3Q8acg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dt4mbq2tfun1h2v8mlag.jpeg" alt='"VM v/s Container"' width="345" height="146"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; - Docker is an open source platform which allows you to build, deploy, run and manage your containerised app. What it means is its a software that helps you to build containers for your apps. Building containers now your app is independent of any system, any environment because container has everything inside it needed by the app, their dependencies,suitable version,configuration,script,binaries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NA1jek3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1273307847103635465/lfVWBmiW_400x400.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NA1jek3U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1273307847103635465/lfVWBmiW_400x400.png" alt='"docker"' width="400" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets quickly see what are the different terms related to docker are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;docker client&lt;/li&gt;
&lt;li&gt;docker daemon&lt;/li&gt;
&lt;li&gt;docker image&lt;/li&gt;
&lt;li&gt;docker container&lt;/li&gt;
&lt;li&gt;docker hub&lt;/li&gt;
&lt;li&gt;docker registry&lt;/li&gt;
&lt;li&gt;docker volumes&lt;/li&gt;
&lt;li&gt;docker networks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;you can install &lt;a href="https://docs.docker.com/desktop/windows/install/"&gt;docker desktop&lt;/a&gt; if you are using windows. If you are using ubuntu you can install docker Engine by following this installation guide like I did ;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.docker.com/engine/install/ubuntu/"&gt;Quick installation on ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! if you are reading upto here, that means I haven't bored you at all 😅 and now you know the terms, concepts related to deployment, virtualisation, containerisation and docker😇😇&lt;/p&gt;

&lt;p&gt;I think putting all the things under one roof will be overwhelming so I will come back very soon with a new blog that will explain all the terms that I listed here. And we will also create container live there, start it,run it and even stop it using docker commands.We will see what is images, how we make our own image or pull an already build image from docker hub and explore many more things. 🤩🤩&lt;/p&gt;

&lt;p&gt;Good bye until that👋👋 &lt;/p&gt;

</description>
      <category>docker</category>
      <category>virtualisation</category>
      <category>containerisation</category>
      <category>deployment</category>
    </item>
    <item>
      <title>How I Mentor Junior Software Engineers</title>
      <author>Zhiyue Yi</author>
      <pubDate>Sun, 02 Jan 2022 08:45:35 +0000</pubDate>
      <link>https://dev.to/zhiyueyi/how-i-mentor-junior-software-engineers-26l3</link>
      <guid>https://dev.to/zhiyueyi/how-i-mentor-junior-software-engineers-26l3</guid>
      <description>&lt;p&gt;In 2021, I happened to have chances to mentor some software engineer interns at my work. I mentored 5 interns in total and maximum 3 interns at the same time. This is a great experience to me and to be honest, I also learnt a lot while giving mentorship. So today, I'd like to share some of my ideas about mentoring junior software engineers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-keep-your-mentee-group-size-small"&gt;
  &lt;/a&gt;
  1. Keep Your Mentee Group Size Small
&lt;/h2&gt;

&lt;p&gt;I would admit that, at start, I was quite happy that I could mentor 3 interns at the same time. It was my first official experience practicing mentorship at work, so I was very happy that my capability was recognised by my superior. However, I found that I was too naive. &lt;strong&gt;More mentees means greater responsibilities and I would need to spare more time from my work to provide mentorship&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Why do I have to spend much time to mentee? Why not just assign the tasks and wait for results? &lt;/p&gt;

&lt;p&gt;I suppose, Mentees usually are not familiar with team culture and norms when they just joined. They need guidance so that they can understand what to do and what not to do. In the beginning, they may not have any question because they would not know what to ask. Only when they actually start to work, will they find out that problems are everywhere. And because I am the mentor, I will be the first person they think of and ask for help. To let mentees be better adapt to work, I need to spend time for explanation and guidance. &lt;/p&gt;

&lt;p&gt;I had maximum 3 interns with me at the same time, and they were doing 2 different areas of work, front end development and data warehouse development. While providing guidance to them, I had my own work to do as well. So it ended up that I had to work overtime.&lt;/p&gt;

&lt;p&gt;Thus, &lt;strong&gt;keeping your mentee size small helps you mentor your mentees better, and put yourself in a more relax mode.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-prepare-an-onboarding-guide"&gt;
  &lt;/a&gt;
  2. Prepare An On-boarding Guide
&lt;/h2&gt;

&lt;p&gt;To minimise your time, you can prepare an on-boarding guide to explain fundamental questions. Probably you need to spend several hours to prepare it, but it's really useful because it can be reused every time!&lt;/p&gt;

&lt;p&gt;I did an on-boarding guide and here's what I included in the guide:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;How to setup the development machine, including software needs to install and environment variables to setup&lt;/strong&gt;. If possible, it's better to also provide a way to verify if the software is correctly installed. There are often strange problems happening. It's better to provide a way of verification so that the mentees can at least check own their own first.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;How to setup the project, including dependency installation, how to run the project and also environment variables to setup&lt;/strong&gt;. This is definitely a must-do, otherwise, no one can work productively.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Who to ask if general problems are encountered&lt;/strong&gt;. New comers are not familiar with the team structure. When some problems happen, the mentor is the first person they think of. However, sometimes the mentor might not know much about some specific topics, and they still need to direct the problem to someone who is more familiar. So why not just specify the people map in the guide? In the guide, you can specify system module owners who is the most familiar with that module, so that your mentee can be self-driven and directly approached the person who is the most knowledgeable to that problem.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;List of video recordings of past technical sharing, tutorials or training&lt;/strong&gt;. Sometimes we have internal trainings and sharing held, which can be recorded. Those trainings and sharing are often about our own projects or products. Having these links provide better opportunities to mentees to learn about the project by themselves and to mentors to save more time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;FAQs for quick references on strange problems&lt;/strong&gt;. No matter how well you prepared, there are always strange issues happening. For example, a weird error message on python project initialization can be caused by a newly created remote development machine having setup issue during the creation. These are unusual problems which happen rarely and cannot be found in the knowledge base. So it's better to record this problem under FAQ session just in case it happens again and investigation time gets wasted.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#3-have-regular-1-on-1-sessions"&gt;
  &lt;/a&gt;
  3. Have Regular 1 on 1 Sessions
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Mentors can be very busy on their own stuffs ans sometimes may omit the mentees&lt;/strong&gt;. The best solution to this issue is to schedule repeated meetings with the mentee on a regular basis. It can be weekly or fortnightly (I do it fortnightly). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A 1 on 1 session can be short&lt;/strong&gt;, such as 15 minutes, so that it does not create pressures to both sides. &lt;/p&gt;

&lt;p&gt;Most importantly, 1 on 1 sessions are not meant for performance evaluation. The latter is too formal and makes people nervous. While the former is more relaxing, it can be just like chit-chatting. The purpose of 1 on 1 session is &lt;strong&gt;NOT&lt;/strong&gt; to judge or evaluate, but to communicate and advise. &lt;/p&gt;

&lt;p&gt;There are a few topics I often use during the 1 on 1 session:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How is it going recently? (A general question to warm up) &lt;/li&gt;
&lt;li&gt;Do you encounter any problem at work?&lt;/li&gt;
&lt;li&gt;Did you solve it, if so, how did you solve it? If not, how can I help so that you can solve it?&lt;/li&gt;
&lt;li&gt;Does the work align with your expectation? If not, what is missing for you?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;It's important to let the mentee to speak out&lt;/strong&gt;, so these questions are all encouraging the mentee to share their thoughts. Probably a mentor is more knowledgeable in certain fields and more experienced, but in this communication, everybody is equal on the same page. In this way, the communication can be helpful and positive, true thoughts can be shared and then real problems can be revealed and fixed.&lt;/p&gt;

&lt;p&gt;In the end, mentors can also share about their views, including praising for what mentee have done well, suggesting areas which mentees can improve on. When speaking about improvement parts, it's better to &lt;strong&gt;directly point out areas needs improvements&lt;/strong&gt; with the &lt;strong&gt;focus on the fac&lt;/strong&gt;t only, and possibly &lt;strong&gt;provide a direction&lt;/strong&gt; so that the mentee can know how to get improvement started.&lt;/p&gt;

&lt;p&gt;In a word, 1 on 1 session is meant to align the expectations between mentors and mentees, find out the problems and solve it, on equal positions with respects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-assign-tasks-by-considering-difficulties"&gt;
  &lt;/a&gt;
  4. Assign Tasks by Considering Difficulties
&lt;/h2&gt;

&lt;p&gt;While assigning tasks to mentees, mentors need to understand the tasks too. Some tasks may be easy or small, and some tasks can be hard or big. It's important to assign suitable tasks to mentees considering their experiences, capabilities and time.&lt;/p&gt;

&lt;p&gt;What I did is that, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the beginning, you can assign &lt;strong&gt;simple tasks&lt;/strong&gt; such as logic corrections, simple unit tests, typo corrections which are easy to complete, so that the mentees can be familiar with the work flow and the code base first. &lt;/li&gt;
&lt;li&gt;Gradually, when mentees gets more familiar, you can assign them &lt;strong&gt;some small features&lt;/strong&gt; such as developing a small form, writing a consolidation API, or &lt;strong&gt;non-urgent bug fixes&lt;/strong&gt;. For bug fixes, though mentors are more experiences who can spot out the cause and find solutions right away, mentors should not directly tell the answer to the mentees. Instead, mentors should encourage the mentees to read through the code base and understand the contexts on their own, and finally let the mentees to solve the problems own their own. In this process, advices and hints can be provided at appropriate time, since there are definitely some contexts which are very hard for mentees to figure out on their own (such as lousy logic designs in legacy systems, which nobody knows exactly how it works :x)&lt;/li&gt;
&lt;li&gt;When mentees are ready, you can &lt;strong&gt;assign a non-urgent mid-size feature&lt;/strong&gt; like a small project to them, so that they can start to work independently. You can provide them a rough idea, and let them try to design the feature on their own. You can then review the design and help to improve. After that, mentees can start to independently work by themselves. At this step, the mentee is already at the stage where they are capable to work independently. And I think it will be a good time for mentees to graduate :D&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;These are what I learnt from the past one year experience of mentorship. To be honest, as a mentor, I am still quite newbie :) Please leave your comments below to share your thoughts about mentorship so that I could also learn from you. Cheers~!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Featured image is credited to Pixabay &lt;a href="https://www.pexels.com/@pixabay"&gt;@pixabay&lt;/a&gt; from &lt;a href="https://www.pexels.com/photo/brown-and-black-wooden-chairs-inside-room-207691/"&gt;pexels&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>leadership</category>
    </item>
    <item>
      <title>Vocabulary Building Day 24</title>
      <author>vindhya Hegde </author>
      <pubDate>Sun, 02 Jan 2022 08:43:54 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-day-24-51ba</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-day-24-51ba</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;antic&lt;/strong&gt;(adjective):ludicrously odd.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0FcNxs9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.tfd.com/wn/2C/66439-dare.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0FcNxs9D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.tfd.com/wn/2C/66439-dare.png" alt="alt text" width="135" height="114"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=antic+meaning&amp;amp;oq=antic+&amp;amp;aqs=chrome.1.69i59l2j0i512l3j0i20i263i512j69i60l2.4266j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;grandiloquent&lt;/strong&gt;(adjective): puffed up with vanity.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rAAk8Lu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1200/1%2AcPnfgWzeUaEdOKgQ1oyVvw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rAAk8Lu8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1200/1%2AcPnfgWzeUaEdOKgQ1oyVvw.jpeg" alt="alt text" width="880" height="880"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=grandiloquent&amp;amp;oq=grandiloquent&amp;amp;aqs=chrome.0.69i59j0i20i263i433i512j0i20i263i512j0i512l7.6459j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;tenacious&lt;/strong&gt;(adjective): tending to keep a firm hold of something; clinging or adhering closely.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bstAyyuS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dxuoddg10rgxw.cloudfront.net/wp-content/uploads/2012/07/17023043/tenacious.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bstAyyuS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dxuoddg10rgxw.cloudfront.net/wp-content/uploads/2012/07/17023043/tenacious.jpg" alt="alt text" width="705" height="350"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=tenacious+meaning&amp;amp;oq=tenacious&amp;amp;aqs=chrome.0.35i39j69i57j46i512j0i20i263i512j0i512j46i512j0i512l4.5719j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;zenith&lt;/strong&gt;(noun): the point in the sky or celestial sphere directly above an observer.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SsZsqWhJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.wineverygame.com/words/images/zenith.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SsZsqWhJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.wineverygame.com/words/images/zenith.jpg" alt="alt text" width="620" height="413"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=zenith+meaning&amp;amp;oq=zenith+meaning&amp;amp;aqs=chrome.0.69i59j0i20i263i512j0i512l8.5899j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;leery&lt;/strong&gt;(adjective): openly to disrespectful and unwillingly to confide&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--70GOTPas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.tfd.com/wn/15/17FD1E-leery.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--70GOTPas--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.tfd.com/wn/15/17FD1E-leery.png" alt="alt text" width="135" height="132"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=leery+meaning&amp;amp;oq=leery+meaning&amp;amp;aqs=chrome..69i57j0i512l9.13119j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
    </item>
    <item>
      <title>Introduction to Infrastructure as Code with Terraform and Packer</title>
      <author>Donald Sebastian Leung</author>
      <pubDate>Sun, 02 Jan 2022 08:42:41 +0000</pubDate>
      <link>https://dev.to/donaldsebleung/introduction-to-infrastructure-as-code-with-terraform-and-packer-10cl</link>
      <guid>https://dev.to/donaldsebleung/introduction-to-infrastructure-as-code-with-terraform-and-packer-10cl</guid>
      <description>&lt;p&gt;&lt;em&gt;Assets for this article can be found &lt;a href="https://github.com/DonaldKellett/iac-intro-terraform-packer"&gt;on GitHub&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this post, we will learn what is Infrastructure as Code, followed by a hands-on session configuring AWS EC2 instances with Terraform and Packer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;It is assumed that you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are comfortable with the Linux command line and troubleshooting&lt;/li&gt;
&lt;li&gt;Have an AWS account&lt;/li&gt;
&lt;li&gt;Familiar with basic AWS services such as Amazon EC2&lt;/li&gt;
&lt;li&gt;Familiar with the &lt;a href="https://dev.to/donaldsebleung/introduction-to-the-aws-cli-e6o"&gt;basics of AWS CLI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Have AWS CLI configured with an IAM account with sufficient permissions to create and manage the resources involved in this tutorial&lt;/li&gt;
&lt;li&gt;Are fully aware that following this tutorial may incur monetary costs and you are solely responsible for any such costs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An understanding of core cloud computing concepts (IaaS, PaaS, SaaS etc.) and the underlying technology (hypervisors, hardware virtualization, OS virtualization etc.) would be helpful. You may follow this tutorial with another cloud provider of your choice, in which case the key concepts presented in this article still apply, but note that non-trivial modifications to the instructions outlined in this article may be required.&lt;/p&gt;

&lt;p&gt;With the prerequisites addressed, let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infrastructure-as-code-iac"&gt;
  &lt;/a&gt;
  Infrastructure as Code (IaC)
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code?in=terraform/aws-get-started"&gt;Introduction to Infrastructure as Code with Terraform&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Infrastructure as Code, often abbreviated &lt;em&gt;IaC&lt;/em&gt;, refers to a &lt;em&gt;declarative&lt;/em&gt; approach of managing infrastructure, such as physical or virtual machines, containers, cloud instances, etc., by describing the desired components and state in configuration files, which are then passed to an automation tool or suite of tools to be applied to the target infrastructure.&lt;/p&gt;

&lt;p&gt;"Declarative" means that the configuration files describe &lt;em&gt;what&lt;/em&gt; we want the infrastructure to look like, rather than &lt;em&gt;how&lt;/em&gt; to achieve it. When we then &lt;em&gt;apply&lt;/em&gt; these configuration files to our infrastructure using automated tool(s), it is the &lt;em&gt;tool's responsibility&lt;/em&gt; to figure out how to achieve the desired state, such that the DevOps practitioner(s) do not have to worry about such details.&lt;/p&gt;

&lt;p&gt;Another benefit of describing the desired state of infrastructure in configuration files is the ability to apply techniques on them such as version control typically used for software, i.e. &lt;em&gt;code&lt;/em&gt;, which was not previously possible, hence the name IaC.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#terraform"&gt;
  &lt;/a&gt;
  Terraform
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code?in=terraform/aws-get-started"&gt;Introduction to Infrastructure as Code with Terraform&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Terraform is an open source IaC solution by HashiCorp licensed under the Mozilla Public License (MPL) 2.0 which works with multiple cloud platforms, as well as popular tools such as Docker and Kubernetes. So let's get started!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-terraform"&gt;
  &lt;/a&gt;
  Installing Terraform
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://learn.hashicorp.com/tutorials/terraform/install-cli?in=terraform/aws-get-started"&gt;Install Terraform&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this and subsequent sections, we'll assume you are working in a Linux environment. If not, you may have to adapt the instructions accordingly.&lt;/p&gt;

&lt;p&gt;The latest Terraform release at the time of writing is v1.1.2. Download the compressed archive containing the Terraform binary for the latest version, unzip and delete the archive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget https://releases.hashicorp.com/terraform/1.1.2/terraform_1.1.2_linux_amd64.zip
&lt;span class="nv"&gt;$ &lt;/span&gt;unzip terraform_1.1.2_linux_amd64.zip
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;rm &lt;/span&gt;terraform_1.1.2_linux_amd64.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If on ARM, replace &lt;code&gt;amd64&lt;/code&gt; above with &lt;code&gt;arm64&lt;/code&gt; instead.&lt;/p&gt;

&lt;p&gt;Now move the binary somewhere in your PATH, e.g. &lt;code&gt;/usr/local/bin&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo mv &lt;/span&gt;terraform /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Confirm it is properly installed by querying the version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;terraform &lt;span class="nt"&gt;--version&lt;/span&gt;
Terraform v1.1.2
on linux_amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you see output similar to the above, you're good to go.&lt;/p&gt;

&lt;p&gt;Print usage instructions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;terraform &lt;span class="nt"&gt;--help&lt;/span&gt;
Usage: terraform &lt;span class="o"&gt;[&lt;/span&gt;global options] &amp;lt;subcommand&amp;gt; &lt;span class="o"&gt;[&lt;/span&gt;args]

The available commands &lt;span class="k"&gt;for &lt;/span&gt;execution are listed below.
The primary workflow commands are given first, followed by
less common or more advanced commands.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-an-ec2-instance-and-associated-resources-with-terraform-and-connecting-to-it"&gt;
  &lt;/a&gt;
  Creating an EC2 instance and associated resources with Terraform, and connecting to it
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs"&gt;AWS Provider&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Remember in our last tutorial where we &lt;a href="https://dev.to/donaldsebleung/introduction-to-the-aws-cli-e6o"&gt;manually created an EC2 instance plus associated resources by executing AWS CLI commands and connected to it&lt;/a&gt;? We're going to do the same thing here, except this time we'll do it declaratively with Terraform.&lt;/p&gt;

&lt;p&gt;Here, I have my AWS CLI configured to use an IAM administrator, and my default region is &lt;code&gt;us-east-1&lt;/code&gt;. If your configuration is different from mine, e.g. you use a different default region, you might not be able to use the exact same AMI as I do so adapt the instructions accordingly. Remember that you can discover AMIs in your region by running the &lt;code&gt;aws ec2 describe-images&lt;/code&gt; command with appropriate filters.&lt;/p&gt;

&lt;p&gt;First create a dedicated directory &lt;code&gt;ec2-basic&lt;/code&gt; and &lt;code&gt;cd&lt;/code&gt; into it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;ec2-basic
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;ec2-basic
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Terraform configuration files use their own format known as HashiCorp Configuration Language (HCL) and the file extension is &lt;code&gt;.tf&lt;/code&gt;. Create a Terraform configuration file &lt;code&gt;main.tf&lt;/code&gt; with the following contents:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;terraform&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;required_providers&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;aws&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;source&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"hashicorp/aws"&lt;/span&gt;
      &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"~&amp;gt; 3.0"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;provider&lt;/span&gt; &lt;span class="s2"&gt;"aws"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;region&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"us-east-1"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How does Terraform know how to work with multiple cloud providers and open-source platforms? It does so through &lt;em&gt;providers&lt;/em&gt;, which could be provided by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HashiCorp themselves (official)&lt;/li&gt;
&lt;li&gt;Verified HashiCorp partners such as Amazon (verified)&lt;/li&gt;
&lt;li&gt;The larger Terraform community (community)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some older providers could also be archived due to various reasons.&lt;/p&gt;

&lt;p&gt;In the file above, we specify in the &lt;code&gt;terraform { ... }&lt;/code&gt; block that we need to install the &lt;code&gt;aws&lt;/code&gt; provider from &lt;code&gt;hashicorp/aws&lt;/code&gt; with an appropriate version. The next block &lt;code&gt;provider "aws" { ... }&lt;/code&gt; contains configuration for our AWS provider. Here, we specify the region to use: &lt;code&gt;us-east-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now initialize our project with &lt;code&gt;terraform init&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;terraform init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If successful, one of the lines should read:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Terraform has been successfully initialized!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now save the following in a new file &lt;code&gt;default-vpc.tf&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_default_vpc"&lt;/span&gt; &lt;span class="s2"&gt;"default"&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This just specifies that Terraform should adopt the default VPC &lt;em&gt;resource&lt;/em&gt; for management, where the name of the default VPC is &lt;code&gt;default&lt;/code&gt;. Normally, Terraform &lt;em&gt;creates&lt;/em&gt; the specified resources if they do not already exist, but as mentioned in &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_vpc"&gt;the documentation for default VPCs&lt;/a&gt;, this particular resource type &lt;code&gt;aws_default_vpc&lt;/code&gt; is special in that all AWS accounts after 2013-12-04 already have a default VPC, so Terraform just detects the existing default VPC and manages it instead of trying to create a new one (which wouldn't make sense anyway).&lt;/p&gt;

&lt;p&gt;To actually have Terraform manage it, we need to &lt;em&gt;apply&lt;/em&gt; the configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;terraform apply&lt;/code&gt; applies &lt;em&gt;all configuration files in the current directory whose filenames end in &lt;code&gt;.tf&lt;/code&gt;&lt;/em&gt;. Hence we created a dedicated directory to store our &lt;code&gt;.tf&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;The above command prints out a summary of what resources it will create, modify and / or delete to reach the desired configuration and asks for confirmation before applying the changes. Type &lt;code&gt;yes&lt;/code&gt; (all lowercase) and press Enter to confirm. In the end, you should see output similar to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now save the following in a file &lt;code&gt;security-group.tf&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_security_group"&lt;/span&gt; &lt;span class="s2"&gt;"ec2_basic"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ec2_basic"&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Security group for basic EC2 instance"&lt;/span&gt;
  &lt;span class="nx"&gt;vpc_id&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_default_vpc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;

  &lt;span class="nx"&gt;ingress&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"SSH from anywhere"&lt;/span&gt;
    &lt;span class="nx"&gt;from_port&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
    &lt;span class="nx"&gt;to_port&lt;/span&gt;          &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
    &lt;span class="nx"&gt;protocol&lt;/span&gt;         &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"tcp"&lt;/span&gt;
    &lt;span class="nx"&gt;cidr_blocks&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"0.0.0.0/0"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;egress&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;from_port&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="nx"&gt;to_port&lt;/span&gt;          &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="nx"&gt;protocol&lt;/span&gt;         &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"-1"&lt;/span&gt;
    &lt;span class="nx"&gt;cidr_blocks&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"0.0.0.0/0"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;ipv6_cidr_blocks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"::/0"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This instructs Terraform (once applied) to create an &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group"&gt;&lt;code&gt;aws_security_group&lt;/code&gt;&lt;/a&gt; with name &lt;code&gt;ec2_basic&lt;/code&gt; if it does not exist already. Within the &lt;code&gt;resource "aws_security_group" "ec2_basic" { ... }&lt;/code&gt; block, we have &lt;code&gt;ingress { ... }&lt;/code&gt; and &lt;code&gt;egress { ... }&lt;/code&gt; sub-blocks for specifying the rules for inbound and outbound network traffic respectively. Here, we allow inbound TCP connections on port 22 (the default port for SSH) from anywhere, and allow all outbound traffic. Also note this particular line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vpc_id      = aws_default_vpc.default.id
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;aws_default_vpc.default&lt;/code&gt; references the default VPC resource we "created" earlier. It exports the &lt;code&gt;id&lt;/code&gt; attribute, so &lt;code&gt;aws_default_vpc.default.id&lt;/code&gt; refers to the ID of the default VPC resource. We use this ID to associate our security group to the default VPC. This has the benefit that we don't have to hardcode the VPC ID so the configuration is portable across different AWS accounts, whose default VPCs likely have different IDs.&lt;/p&gt;

&lt;p&gt;Before we &lt;code&gt;apply&lt;/code&gt;, let's try another command &lt;code&gt;plan&lt;/code&gt;, which computes what changes are needed to reach the desired configuration without actually applying them (basically, a dry run):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;terraform plan
...
Terraform will perform the following actions:

  &lt;span class="c"&gt;# aws_security_group.ec2_basic will be created&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, it says that the &lt;code&gt;aws_security_group.ec2_basic&lt;/code&gt; resource will be created.&lt;/p&gt;

&lt;p&gt;Now that we've confirmed everything looks right, let's apply the changes. Remember to anwer &lt;code&gt;yes&lt;/code&gt; and enter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, save the following in a file &lt;code&gt;key-pair.tf&lt;/code&gt; defining the public key for our &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/key_pair"&gt;key pair&lt;/a&gt;. &lt;strong&gt;Remember to replace the public key material with your public key&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_key_pair"&lt;/span&gt; &lt;span class="s2"&gt;"macbook_air_ubuntu"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;key_name&lt;/span&gt;   &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"macbook-air-ubuntu"&lt;/span&gt;
  &lt;span class="nx"&gt;public_key&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCzSI7uKPqNJTCO9uaqFvSdk+A/vmkwJ/ef9hjku8BEau+NTd89K54g4sZwwVsnEkM9ZkgQ7TqaHs6qhG0xJoc82h8w34uzVglHsSAsY1D2FtuhT4dtwUq7+E2ZFj454rH23rrb3haFdROBizOIMCs01WH0muNKhU9a1O9EQZ42oG6boJqbhw3jWErUFZn4MhtN1FZDx1U2YY6B2VfnfeJvJG819WDor+MypScoD+/Z5Vjt/H4pgMxJSlLk6HFSuop7HHnSH3UzsT+VamxVCOvuN0mx6xm7kOvYp4HfKGKTQMyb+KIOWmr7XG4zG6H0j7STiQVjnVYzfgxnlUg607+Sti02N2dU73SnSn4A7v2Fht+6UjWxMqbugjT+QHH30QV3mwGbjdxwvEqifOGeXK/Khn2FLcW4pbinHce7vOOUBb3+mY/8qRvJHn7aRnHSKTj0jAuE5dRgG1UcYmDVUhyZD+6/Jf7/vF4zHI7B6MA8GSxx9+QeGhSDSrr5rEgBh/0= donaldsebleung@donaldsebleung-MacBookAir"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This defines a public key to be imported to AWS so we can connect to our instance later.&lt;/p&gt;

&lt;p&gt;Check everything is fine and apply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;terraform plan
&lt;span class="nv"&gt;$ &lt;/span&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are ready to define our &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance"&gt;instance&lt;/a&gt; with the given security group and key pair. We'll use the AMI with ID &lt;code&gt;ami-00056a28d6c5e916b&lt;/code&gt; which is an Ubuntu 20.04 LTS AMI. Save the following in a file &lt;code&gt;instance.tf&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_instance"&lt;/span&gt; &lt;span class="s2"&gt;"ec2_basic"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ami&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ami-00056a28d6c5e916b"&lt;/span&gt;
  &lt;span class="nx"&gt;instance_type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"t2.micro"&lt;/span&gt;
  &lt;span class="nx"&gt;vpc_security_group_ids&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;aws_security_group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ec2_basic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;key_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_key_pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;macbook_air_ubuntu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key_name&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice again that we get the security group ID and key name from resources we have defined earlier, so as to not hardcode it, enabling the configuration to be re-used across different AWS accounts.&lt;/p&gt;

&lt;p&gt;Make sure everything is okay and apply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;terraform plan
&lt;span class="nv"&gt;$ &lt;/span&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last few lines of output should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws_instance.ec2_basic: Creating...
aws_instance.ec2_basic: Still creating... [10s elapsed]
aws_instance.ec2_basic: Still creating... [20s elapsed]
aws_instance.ec2_basic: Still creating... [30s elapsed]
aws_instance.ec2_basic: Still creating... [40s elapsed]
aws_instance.ec2_basic: Still creating... [50s elapsed]
aws_instance.ec2_basic: Creation complete after 55s [id=i-04509d0d13f076b03]

Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Good, our instance is created. But what is its public IP address? We'll need that to connect to our instance, but the output of &lt;code&gt;terraform apply&lt;/code&gt; doesn't tell us what it is.&lt;/p&gt;

&lt;p&gt;Of course, we can get information on our instance with the AWS CLI, but can we do it with Terraform alone? The answer is a resounding "yes" - enter &lt;em&gt;outputs&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;Save the following in a file &lt;code&gt;output.tf&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;output&lt;/span&gt; &lt;span class="s2"&gt;"ec2_basic_public_ip"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Public IP of our created instance"&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ec2_basic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;public_ip&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This defines an output value &lt;code&gt;ec2_basic_public_ip&lt;/code&gt; that is printed to the console whenever we run &lt;code&gt;terraform apply&lt;/code&gt;. The description field is just for documentation purposes - the important field is &lt;code&gt;value&lt;/code&gt; which instructs the public IP of our EC2 instance to be reported.&lt;/p&gt;

&lt;p&gt;Apply our configuration. Note that nothing should actually change since Terraform already created all desired resources on last &lt;code&gt;apply&lt;/code&gt;, but we should see the public IP of our instance printed to the console:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;terraform apply
...
Apply &lt;span class="nb"&gt;complete&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; Resources: 0 added, 0 changed, 0 destroyed.

Outputs:

ec2_basic_public_ip &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"18.206.126.92"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my case, the public IP of my instance is &lt;code&gt;18.206.126.92&lt;/code&gt; according to Terraform. Yours is likely different.&lt;/p&gt;

&lt;p&gt;Now SSH to your instance, replacing &lt;code&gt;18.206.126.92&lt;/code&gt; with the public IP of &lt;em&gt;your&lt;/em&gt; instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh ubuntu@18.206.126.92
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations! You've provisioned an EC2 instance plus associated resources declaratively with Terraform, and connected to it successfully.&lt;/p&gt;

&lt;p&gt;To clean up, simply run &lt;code&gt;terraform destroy&lt;/code&gt; and enter &lt;code&gt;yes&lt;/code&gt; when prompted, which is the inverse of &lt;code&gt;apply&lt;/code&gt; and deletes all resources defined in the current directory*:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;terraform destroy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;* &lt;em&gt;Not quite. The default VPC cannot be deleted so it is not deleted. Instead, Terraform stops managing it on your behalf.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Contrast this approach to AWS CLI where you have to remember what resources you created and delete them one by one. When the number of resources is large, it can be easy to forget to delete something which could incur additional unexpected costs in the long run.&lt;/p&gt;

&lt;p&gt;Now, you should understand why a declarative approach is favorable for managing infrastructure. It is these powerful automated tools that enables the practice of DevOps, where everything happens at a rapid pace.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatically-customize-ec2-instance-with-terraform-by-running-a-script-on-first-boot"&gt;
  &lt;/a&gt;
  Automatically customize EC2 instance with Terraform by running a script on first boot
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html"&gt;Run commands on your Linux instance at launch&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While being able to provision a fresh EC2 instance declaratively with Terraform is useful in its own right, oftentimes we might want to perform additional setup on the EC2 instance once it is created, and it might be cumbersome to do it manually especially if the setup is complex, e.g. we might want to set up a full-fledged LAMP stack on the EC2 instance in a uniform manner.&lt;/p&gt;

&lt;p&gt;Fortunately, we can combine Terraform with Amazon EC2 user data to achieve automated setup of our newly created EC2 instance.&lt;/p&gt;

&lt;p&gt;Assuming you're still in the &lt;code&gt;ec2-basic&lt;/code&gt; directory, first move up to the parent directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then make a copy of this directory as &lt;code&gt;ec2-website&lt;/code&gt;. We'll see how to specify user data in Terraform to instruct it to automatically execute a bash script on the newly created EC2 instance on first boot, which will install an HTTPS web server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; ec2-basic ec2-website
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter the &lt;code&gt;ec2-website&lt;/code&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;ec2-website
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now modify two files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;security-group.tf&lt;/code&gt;: we'll add an inbound rule to allow HTTPS traffic from anywhere&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;instance.tf&lt;/code&gt;: we'll add a bash script to be executed on first boot as user data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;security-group.tf&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_security_group"&lt;/span&gt; &lt;span class="s2"&gt;"ec2_basic"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ec2_basic"&lt;/span&gt;
  &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Security group for basic EC2 instance"&lt;/span&gt;
  &lt;span class="nx"&gt;vpc_id&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_default_vpc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;

  &lt;span class="nx"&gt;ingress&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"SSH from anywhere"&lt;/span&gt;
    &lt;span class="nx"&gt;from_port&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
    &lt;span class="nx"&gt;to_port&lt;/span&gt;          &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
    &lt;span class="nx"&gt;protocol&lt;/span&gt;         &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"tcp"&lt;/span&gt;
    &lt;span class="nx"&gt;cidr_blocks&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"0.0.0.0/0"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ingress&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;description&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"HTTPS from anywhere"&lt;/span&gt;
    &lt;span class="nx"&gt;from_port&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt;
    &lt;span class="nx"&gt;to_port&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt;
    &lt;span class="nx"&gt;protocol&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"tcp"&lt;/span&gt;
    &lt;span class="nx"&gt;cidr_blocks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"0.0.0.0/0"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;egress&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;from_port&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="nx"&gt;to_port&lt;/span&gt;          &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="nx"&gt;protocol&lt;/span&gt;         &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"-1"&lt;/span&gt;
    &lt;span class="nx"&gt;cidr_blocks&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"0.0.0.0/0"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="nx"&gt;ipv6_cidr_blocks&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"::/0"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;instance.tf&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight terraform"&gt;&lt;code&gt;&lt;span class="k"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;"aws_instance"&lt;/span&gt; &lt;span class="s2"&gt;"ec2_basic"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ami&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ami-00056a28d6c5e916b"&lt;/span&gt;
  &lt;span class="nx"&gt;instance_type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"t2.micro"&lt;/span&gt;
  &lt;span class="nx"&gt;vpc_security_group_ids&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;aws_security_group&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ec2_basic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;key_name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;aws_key_pair&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;macbook_air_ubuntu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key_name&lt;/span&gt;
  &lt;span class="nx"&gt;user_data&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;EOT&lt;/span&gt;&lt;span class="sh"&gt;
#!/bin/bash

apt-get update
apt-get install -y software-properties-common
yes "" | add-apt-repository ppa:donaldsebleung/misc
apt-get update
apt-get install -y donaldsebleung-com
yes "" | openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 365 -nodes
mv key.pem /etc/donaldsebleung-com
mv cert.pem /etc/donaldsebleung-com
systemctl enable --now donaldsebleung-com.service
&lt;/span&gt;&lt;span class="no"&gt;EOT
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initialize the project just to be safe, then apply the config, entering &lt;code&gt;yes&lt;/code&gt; when prompted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;terraform init
&lt;span class="nv"&gt;$ &lt;/span&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the apply step completes, wait for a few extra minutes, then visit https://&amp;lt;EC2_INSTANCE_PUBLIC_IP&amp;gt; where &lt;code&gt;&amp;lt;EC2_INSTANCE_PUBLIC_IP&amp;gt;&lt;/code&gt; is the public IP of the instance reported by Terraform, ignoring warnings from your browser about a self-signed certificate. You should see the following page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--szMOCwlC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nedp55fy384zsrw00s41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--szMOCwlC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nedp55fy384zsrw00s41.png" alt="My personal website on EC2 instance with Terraform" width="880" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to poke around to learn more about me (shameless promotion here :-P). When you're done, tear down the infrastructure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;terraform destroy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#packer"&gt;
  &lt;/a&gt;
  Packer
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://www.packer.io/"&gt;Packer by HashiCorp&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We saw how Terraform could be used to provision an EC2 instance and customize it on first boot by executing a bash script from user data, which is amazing and saves a lot of manual work from the administrator. But consider a scenario where the initial setup used to customize the EC2 instance takes a long time to run to completion. Now suppose this EC2 instance encounters a kernel panic on a particular day, and no amount of reboots will solve it. The instance would have to be destroyed and re-created, which would take a long time before the new instance arrives at a functional state, i.e. whatever services that instance offers would be down for a long time, causing prolonged negative impact to business. Instead of wasting time (automatically) customizing each EC2 instance after it has been created, what if we could customize the EC2 instance &lt;em&gt;up front&lt;/em&gt;, save that new state and launch all subsequent instances from that new state? Then, whenever our instance(s) are down for whatever reason, we can re-launch a new instance with everything already set up and running.&lt;/p&gt;

&lt;p&gt;Enter Packer. Packer is another offering by HashiCorp that deals with the automated provisioning of customized images, also released under the MPL 2.0. With Packer, we can use a base image and bake our customized setup into it to form a new image, which can then be used to provision EC2 instances with Terraform, such that we only have to run the setup once instead of on every instance launch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#installing-packer"&gt;
  &lt;/a&gt;
  Installing Packer
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://www.packer.io/downloads"&gt;Download Packer&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget https://releases.hashicorp.com/packer/1.7.8/packer_1.7.8_linux_amd64.zip
&lt;span class="nv"&gt;$ &lt;/span&gt;unzip packer_1.7.8_linux_amd64.zip
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;rm &lt;/span&gt;packer_1.7.8_linux_amd64.zip
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo mv &lt;/span&gt;packer /usr/local/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Check the version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;packer &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Print a help message:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;packer &lt;span class="nt"&gt;--help&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#baking-a-customized-ami-with-packer-and-using-it-to-launch-a-customized-ec2-instance-with-terraform"&gt;
  &lt;/a&gt;
  Baking a customized AMI with Packer and using it to launch a customized EC2 instance with Terraform
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Reference: &lt;a href="https://learn.hashicorp.com/collections/packer/aws-get-started"&gt;Getting Started with AWS&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Like Terraform, Packer also uses HCL as its configuration language.&lt;/p&gt;

&lt;p&gt;Assuming you're still in the &lt;code&gt;ec2-website&lt;/code&gt; directory, first move up to the parent directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now create a directory &lt;code&gt;ec2-custom-packer&lt;/code&gt; and &lt;code&gt;cd&lt;/code&gt; into it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;ec2-custom-packer
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;ec2-custom-packer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the following into a file &lt;code&gt;ec2-custom-packer.pkr.hcl&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight hcl"&gt;&lt;code&gt;&lt;span class="nx"&gt;packer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;required_plugins&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;amazon&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;= 0.0.2"&lt;/span&gt;
      &lt;span class="nx"&gt;source&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"github.com/hashicorp/amazon"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;variable&lt;/span&gt; &lt;span class="s2"&gt;"ami_prefix"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
  &lt;span class="nx"&gt;default&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"donaldsebleung-com"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;locals&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;regex_replace&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="err"&gt;(),&lt;/span&gt; &lt;span class="s2"&gt;"[- TZ:]"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"amazon-ebs"&lt;/span&gt; &lt;span class="s2"&gt;"donaldsebleung-com"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ami_name&lt;/span&gt;      &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"${var.ami_prefix}-${local.timestamp}"&lt;/span&gt;
  &lt;span class="nx"&gt;instance_type&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"t2.micro"&lt;/span&gt;
  &lt;span class="nx"&gt;region&lt;/span&gt;        &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"us-east-1"&lt;/span&gt;
  &lt;span class="nx"&gt;source_ami&lt;/span&gt;    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ami-008569888adb8f3e8"&lt;/span&gt;
  &lt;span class="nx"&gt;ssh_username&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ubuntu"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;build&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;sources&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"source.amazon-ebs.donaldsebleung-com"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="nx"&gt;provisioner&lt;/span&gt; &lt;span class="s2"&gt;"shell"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;inline&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;"sudo apt-get update"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"sudo apt-get install -y software-properties-common"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"yes &lt;/span&gt;&lt;span class="se"&gt;\"\"&lt;/span&gt;&lt;span class="s2"&gt; | sudo add-apt-repository ppa:donaldsebleung/misc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"sudo apt-get update"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"sudo apt-get install -y donaldsebleung-com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"yes &lt;/span&gt;&lt;span class="se"&gt;\"\"&lt;/span&gt;&lt;span class="s2"&gt; | openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -sha256 -days 365 -nodes"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"sudo mv key.pem /etc/donaldsebleung-com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"sudo mv cert.pem /etc/donaldsebleung-com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;"sudo systemctl enable --now donaldsebleung-com.service"&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A brief explanation of the blocks involved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;packer { ... }&lt;/code&gt; block specifies the &lt;em&gt;plugin&lt;/em&gt; to be installed for creating AWS AMIs, similar to how Terraform requires providers for provisioning AWS infrastructure. Here, we use the &lt;code&gt;amazon&lt;/code&gt; plugin from &lt;code&gt;github.com/hashicorp/amazon&lt;/code&gt;, i.e. an official plugin provided by HashiCorp&lt;/li&gt;
&lt;li&gt;We define an &lt;code&gt;ami_prefix&lt;/code&gt; variable and generate a timestamp to construct a unique name for our new AMI, since each of our AWS AMIs must have unique names. You can learn more about timestamp generation through the &lt;a href="https://www.packer.io/docs/templates/hcl_templates/functions/datetime/timestamp"&gt;docs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;source { ... }&lt;/code&gt; block specifies the base AMI and instance type used to build our new customized AMI, as well as what user to log in as through SSH to run the build script. Note that we don't have to provide our SSH public key since Packer auto-generates (and deletes afterwards) an SSH key pair for this purpose&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;build { ... }&lt;/code&gt; block defines the actual build. The source block above doesn't actually do anything on its own, but is used for the build when referenced. Here, we also define a &lt;code&gt;shell&lt;/code&gt; provisioner which specifies the shell commands to run, one by one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now initialize the current directory, which installs the required plugin(s):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;packer init &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we perform the build, let's also validate our Packer config:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;packer validate &lt;span class="nb"&gt;.&lt;/span&gt;
The configuration is valid.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's build our image. This make take around 10 minutes or so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;packer build &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If successful, you should see the following output near the end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;==&amp;gt; Wait completed after 9 minutes 48 seconds

==&amp;gt; Builds finished. The artifacts of successful builds are:
--&amp;gt; amazon-ebs.donaldsebleung-com: AMIs were created:
us-east-1: ami-0cf4e6ec23e69dd66
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note down the AMI ID, in my case &lt;code&gt;ami-0cf4e6ec23e69dd66&lt;/code&gt;. Also note that unlike Terraform, Packer doesn't manage the AMI once it's built so you have to manually delete the AMI yourself once you're done with it.&lt;/p&gt;

&lt;p&gt;Move back up to the parent directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make a copy of &lt;code&gt;ec2-website&lt;/code&gt; as &lt;code&gt;ec2-custom-terraform&lt;/code&gt; and &lt;code&gt;cd&lt;/code&gt; into it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cp&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; ec2-website ec2-custom-terraform
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;ec2-custom-terraform
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now modify &lt;code&gt;instance.tf&lt;/code&gt; by replacing the AMI ID with that of your custom image built with Packer, and remove the &lt;code&gt;user_data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Initialize and apply:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;terraform init
&lt;span class="nv"&gt;$ &lt;/span&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the last step completes, visit https://&amp;lt;EC2_PUBLIC_IP&amp;gt; immediately. The site should already be up and running.&lt;/p&gt;

&lt;p&gt;Tear down the infrastructure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;terraform destroy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, unless you intend to keep the custom AMI around, de-register it with AWS CLI, replacing the image ID as approrpiate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;aws ec2 deregister-image &lt;span class="nt"&gt;--image-id&lt;/span&gt; ami-0cf4e6ec23e69dd66
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We learnt:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What IaC is, its declarative approach to managing infrastructure and its advantages over traditional techniques&lt;/li&gt;
&lt;li&gt;What Terraform is and how to use it to automatically set up and tear down AWS infrastructure&lt;/li&gt;
&lt;li&gt;How to customize EC2 instances with setup scripts through user data, and apply them with Terraform&lt;/li&gt;
&lt;li&gt;What Packer is, how it alleviates the issue of long setup time of customized EC2 instances through Terraform alone, how to build a custom AMI with Packer for provisioning custom instances on the get-go with Terraform&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The interested reader is encouraged to consult further resources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.terraform.io/"&gt;Terraform by HashiCorp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.packer.io/"&gt;Packer by HashiCorp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.edx.org/professional-certificate/linuxfoundationx-introduction-to-devops-practices-and-tools"&gt;Introduction to DevOps: Practices and Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you enjoyed the article :-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;DonaldKellett/iac-intro-terraform-packer&lt;/code&gt;: &lt;a href="https://github.com/DonaldKellett/iac-intro-terraform-packer"&gt;https://github.com/DonaldKellett/iac-intro-terraform-packer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Introduction to Infrastructure as Code with Terraform: &lt;a href="https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code?in=terraform/aws-get-started"&gt;https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code?in=terraform/aws-get-started&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Install Terraform: &lt;a href="https://learn.hashicorp.com/tutorials/terraform/install-cli?in=terraform/aws-get-started"&gt;https://learn.hashicorp.com/tutorials/terraform/install-cli?in=terraform/aws-get-started&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;AWS Provider: &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs"&gt;https://registry.terraform.io/providers/hashicorp/aws/latest/docs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Resource: aws_default_vpc: &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_vpc"&gt;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/default_vpc&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Resource: aws_security_group: &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group"&gt;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/security_group&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Resource: aws_key_pair: &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/key_pair"&gt;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/key_pair&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Resource: aws_instance: &lt;a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance"&gt;https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Run commands on your Linux instance at launch: &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html"&gt;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Packer by HashiCorp: &lt;a href="https://www.packer.io/"&gt;https://www.packer.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Download Packer: &lt;a href="https://www.packer.io/downloads"&gt;https://www.packer.io/downloads&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Getting Started with AWS: &lt;a href="https://learn.hashicorp.com/collections/packer/aws-get-started"&gt;https://learn.hashicorp.com/collections/packer/aws-get-started&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;timestamp&lt;/code&gt; Function: &lt;a href="https://www.packer.io/docs/templates/hcl_templates/functions/datetime/timestamp"&gt;https://www.packer.io/docs/templates/hcl_templates/functions/datetime/timestamp&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Introduction to DevOps: Practices and Tools: &lt;a href="https://www.edx.org/professional-certificate/linuxfoundationx-introduction-to-devops-practices-and-tools"&gt;https://www.edx.org/professional-certificate/linuxfoundationx-introduction-to-devops-practices-and-tools&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>devops</category>
      <category>terraform</category>
      <category>packer</category>
      <category>aws</category>
    </item>
  </channel>
</rss>
