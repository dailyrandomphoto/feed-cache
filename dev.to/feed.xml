<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Twitch Streaming Graph Analysis - Part 2</title>
      <author>Katarina Supe</author>
      <pubDate>Wed, 27 Oct 2021 20:35:19 +0000</pubDate>
      <link>https://dev.to/katelatte/twitch-streaming-graph-analysis-part-2-3d3d</link>
      <guid>https://dev.to/katelatte/twitch-streaming-graph-analysis-part-2-3d3d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This blog is divided into three parts, depending on the part of the application we are building:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Part 1&lt;/strong&gt;: data source and backend implementation&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Part 2&lt;/strong&gt;: frontend implementation&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Part 3&lt;/strong&gt;: streaming data from Kafka cluster&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you still haven't, you can read already published &lt;a href="https://memgraph.com/blog/twitch-streaming-graph-analysis"&gt;Part 1&lt;/a&gt; and then continue reading this part. Otherwise, use already implemented  &lt;a href="https://github.com/memgraph/twitch-analytics-demo/tree/main/backend"&gt;backend&lt;/a&gt;. In this part, we are going to create React application and visualize general statistics and some interesting insights from &lt;strong&gt;Twitch&lt;/strong&gt; dataset. All implementation that will be mentioned in this part of the blog you can find in &lt;a href="https://github.com/memgraph/twitch-analytics-demo/tree/main/frontend"&gt;frontend&lt;/a&gt; folder of the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-react-app"&gt;
  &lt;/a&gt;
  Create React App
&lt;/h2&gt;

&lt;p&gt;Let's figure out how we’re going to visualize all the data we have managed to collect. First we have to create &lt;strong&gt;React&lt;/strong&gt; app which will work with our &lt;strong&gt;Flask&lt;/strong&gt; application. We will install &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; which will give us &lt;code&gt;npx&lt;/code&gt; command for creating a React app. Place yourself in project root folder and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g create-react-app@3.4.1
npm init react-app frontend --use-npm
cd frontend
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; you can see simple React app. We will configure our React app to work well with Flask server. In &lt;code&gt;package.json&lt;/code&gt; from frontend folder add a line at the end of the file:&lt;br&gt;
&lt;code&gt;"proxy": "http://localhost:5000"&lt;/code&gt;&lt;br&gt;
This will tell React app to redirect any requests it receives on its port 3000 to port 5000, where our backend is implemented. We will use &lt;strong&gt;Semantic UI&lt;/strong&gt; to build our webpage, so we have to do a few more things before dockerizing our React app. Run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall semantic-ui semantic-ui-css
npm install @craco/craco @semantic-ui-react/craco-less semantic-ui-less --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, update your &lt;code&gt;package.json&lt;/code&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "scripts": {
    "start": "craco start",
    "build": "craco build",
    "test": "craco test",
    "eject": "craco eject"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create &lt;code&gt;craco.config.js&lt;/code&gt; in fronted folder and paste following content in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  plugins: [{ plugin: require('@semantic-ui-react/craco-less') }],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create &lt;code&gt;semantic-ui/site&lt;/code&gt; folder in &lt;code&gt;src&lt;/code&gt; folder and then Copy the entire &lt;code&gt;node_modules/semantic-ui-less/_site folder&lt;/code&gt; content to &lt;code&gt;src/semantic-ui/site&lt;/code&gt;. Also create &lt;code&gt;theme.config&lt;/code&gt; file in &lt;code&gt;src/semantic-ui/&lt;/code&gt; folder and then copy file &lt;code&gt;node_modules/semantic-ui-less/theme.config.example&lt;/code&gt; to &lt;code&gt;src/semantic-ui/theme.config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Change &lt;code&gt;theme.config&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/*******************************
            Folders
*******************************/

@themesFolder : 'themes';
@siteFolder  : '../../src/semantic-ui/site';

@import (multiple) "~semantic-ui-less/theme.less";
@fontPath : '../../../themes/@{theme}/assets/fonts';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it's not already installed, run:&lt;br&gt;
&lt;code&gt;npm install semantic-ui-react --save-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you can use Semantic UI components, such as Button (don’t forget to paste all imports):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import logo from "./logo.svg";
import "./App.css";
import "semantic-ui-less/semantic.less";
import { Button } from "semantic-ui-react";

function App() {
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;header className="App-header"&amp;gt;
        &amp;lt;img src={logo} className="App-logo" alt="logo" /&amp;gt;
        &amp;lt;p&amp;gt;
          Edit &amp;lt;code&amp;gt;src/App.js&amp;lt;/code&amp;gt; and save to reload.
        &amp;lt;/p&amp;gt;
        &amp;lt;Button&amp;gt;Click me&amp;lt;/Button&amp;gt;
      &amp;lt;/header&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dockerizing-react-app"&gt;
  &lt;/a&gt;
  Dockerizing React App
&lt;/h2&gt;

&lt;p&gt;We will be adding few new lines in our previously created project's &lt;code&gt;docker-compose.yml&lt;/code&gt; &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/docker-compose.yml"&gt;file&lt;/a&gt;. At the end of the file add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-app:
    build: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - twitch-app
    networks:
      - app-tier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should also create &lt;code&gt;Dockerfile&lt;/code&gt; in frontend folder like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# pull official base image
FROM node:14.17.5-alpine

# set working directory
WORKDIR /app

# add `/app/node_modules/.bin` to $PATH
ENV PATH /app/node_modules/.bin:$PATH

# install app dependencies
COPY package.json ./
COPY package-lock.json ./
RUN npm install --silent
RUN npm install react-scripts@3.4.1 -g --silent

# add app
COPY . ./

# start app
CMD ["npm", "start"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see we are copying &lt;code&gt;package.json&lt;/code&gt; into the container. The best way to have all dependencies installed is to copy &lt;code&gt;package.json&lt;/code&gt; file from &lt;a href="https://github.com/katarinasupe/twitch-analytics-demo/blob/main/frontend/package.json"&gt;here&lt;/a&gt;. All node modules will then be correctly installed in the container and &lt;code&gt;npm start&lt;/code&gt; will run your React app. Node modules volume was added so that all packages don't have to be installed each time you build your project.&lt;/p&gt;

&lt;p&gt;All that is left to do is to create &lt;code&gt;.dockerignore&lt;/code&gt; file in frontend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
build
.dockerignore
Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and make a little change in &lt;code&gt;package.json&lt;/code&gt; in proxy settings:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"proxy": "http://twitch-app:5000"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This change is made because we are running the backend as docker service on port 5000 called &lt;code&gt;twitch-app&lt;/code&gt;. Our project structure now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|   docker-compose.yml
|   
+---backend
|       app.py
|       Dockerfile
|       requirements.txt
|
+---frontend
|   |   .dockerignore
|   |   craco.config.js
|   |   Dockerfile
|   |   package.json
|   |   package-lock.json
|   +---node_modules
|   +---public
|   +---src
|
+---memgraph
|   |   
|   +---import-data
|   |       chatters.csv
|   |       moderators.csv
|   |       streamers.csv
|   |       teams.csv
|   |       vips.csv
|   +---mg_log
|   +---mg_lib
|   +---mg_etc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can hit &lt;code&gt;docker-compose build&lt;/code&gt; from your root project folder and &lt;code&gt;docker-compose up&lt;/code&gt; after that. First &lt;code&gt;memgraph-mage&lt;/code&gt; will run and then &lt;code&gt;twitch-app&lt;/code&gt;. After that &lt;code&gt;react-app&lt;/code&gt; will be run. Now you can make requests from your frontend. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend-implementation"&gt;
  &lt;/a&gt;
  Frontend Implementation
&lt;/h2&gt;

&lt;p&gt;Create folder &lt;code&gt;components&lt;/code&gt; in your src file. Here you will make your components which you’ll use as puzzles for your web application. Let's make a little part of the puzzle, where we’ll show the fetching of data from &lt;strong&gt;Memgraph&lt;/strong&gt;. We will add node and edge counters to our webpage by making fetch requests in &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/frontend/src/components/Counter.js"&gt;&lt;code&gt;Counter.js&lt;/code&gt;&lt;/a&gt;. In the code below you can see that we are making a request depending on the props forwarded from the parent component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  fetch() {
    fetch("/" + this.props.count)
      .then((res) =&amp;gt; res.json())
      .then(
        (result) =&amp;gt; {
          this.setState({
            isLoaded: true,
            counter: result[this.props.count],
          });
        },
        (error) =&amp;gt; {
          this.setState({
            isLoaded: true,
            error,
          });
        }
      );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the left you can see the number of nodes, and on the right the number of edges in your database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fTjX3AMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-header.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fTjX3AMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-header.png" alt="memgraph-tutorial-twitch-header" width="880" height="204"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For games statistics we are fetching top games from backend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  fetchData(number) {
    fetch("/top-games/" + number)
      .then((res) =&amp;gt; res.json())
      .then(
        (result) =&amp;gt; {
          this.setState({
            isLoaded: true,
            games: result.games,
            players: result.players,
          });
        },
        (error) =&amp;gt; {
          this.setState({
            isLoaded: true,
            error,
          });
        }
      );
    this.setState({
      numOfGames: number,
      header: "Top " + number + " games",
    });
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the right you can see the table showing you the names of the games and number of players that are playing that game (in our dataset).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n2U8yRQ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-stats.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n2U8yRQ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-stats.png" alt="memgraph-tutorial-twitch-stats" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the similar way we are fetching top teams, vips and moderators. For streamers, we are ranking them by number of followers or number of views. Because of that, you have a dropdown menu from where you can choose the way of ranking.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ymb0iyZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-streamers.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ymb0iyZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-streamers.png" alt="memgraph-tutorial-twitch-streamers" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s talk about graph visualization a bit more. Here, we’re going to use &lt;code&gt;D3.js&lt;/code&gt;. This is a package which we still cannot use. We need to set everything up so that we can draw our graphs using &lt;code&gt;D3.js&lt;/code&gt;. Create a folder &lt;code&gt;hooks&lt;/code&gt; in &lt;code&gt;src&lt;/code&gt; folder and create &lt;code&gt;useD3.js&lt;/code&gt; file (hooks are usually named with prefix "use").&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";

import * as d3 from "d3";

export const useD3 = (renderGraph) =&amp;gt; {
  const ref = React.useRef();

  React.useEffect(() =&amp;gt; {
    renderGraph(d3.select(ref.current));

    return () =&amp;gt; {};
  });

  return ref;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will be your custom hook to allow &lt;code&gt;D3.js&lt;/code&gt; to interact directly with the DOM. You can take advantage of the &lt;code&gt;useRef&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; hook to link &lt;code&gt;D3.js&lt;/code&gt; with the &lt;code&gt;svg&lt;/code&gt; element that has been created, and specify when your &lt;code&gt;D3.js&lt;/code&gt; function should be executed. Don’t forget to import &lt;code&gt;d3&lt;/code&gt;. Now we can render our graph using custom hook &lt;code&gt;useD3.js&lt;/code&gt;. Check the &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/frontend/src/components/Graph.js"&gt;Graph.js&lt;/a&gt; component to see how the graph can be drawn. Using that component we can get information about your favorite streamer - its teams, games and languages, like on the image below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9LNal0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-favstreamer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9LNal0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-favstreamer.png" alt="memgraph-tutorial-twitch-favstreamer" width="880" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is also possible to search all streamers who are playing some game in certain language. Using the same &lt;code&gt;Graph.js&lt;/code&gt; component, you get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7J3YWBI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-game-lang.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7J3YWBI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-game-lang.png" alt="memgraph-tutorial-twitch-game-lang" width="880" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to play with nodes and their forces by dragging them around. In the end, we will use powerful &lt;a href="https://memgraph.com/docs/mage"&gt;MAGE&lt;/a&gt; query modules - &lt;strong&gt;PageRank&lt;/strong&gt; and &lt;strong&gt;Betweenness Centrality&lt;/strong&gt;, to showcase how you can visualize your data in a pretty cool way with &lt;code&gt;D3.js&lt;/code&gt;. For PageRank we have API get request in &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/backend/app.py"&gt;backend&lt;/a&gt; and in frontend we're fetching that data from the &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/frontend/src/components/PageRank.js"&gt;&lt;code&gt;PageRank.js&lt;/code&gt;&lt;/a&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  fetchData(){
    fetch("/page-rank")
      .then((res) =&amp;gt; res.json())
      .then(
        (result) =&amp;gt; {
          this.setState({
            isLoaded: true,
            nodes: result.page_rank,
          });
        },
        (error) =&amp;gt; {
          this.setState({
            isLoaded: true,
            error,
          });
        }
      );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While PageRank results are being calculated, you will see your results loading. After the results are loaded, they are drawn with graph component &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/frontend/src/components/GraphPR.js"&gt;&lt;code&gt;GraphPR.js&lt;/code&gt;&lt;/a&gt; which uses &lt;code&gt;D3.js&lt;/code&gt;. Next to the graph you can see the table of results with the names of the streamers and their calculated rank.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JMSRt3QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-page-rank.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JMSRt3QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-page-rank.png" alt="memgraph-tutorial-twitch-page-rank" width="880" height="541"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the refresh button above the drawn graph. It will be used later on, in the &lt;strong&gt;Part 3&lt;/strong&gt; of the blog, when we'll show how you can stream your data using &lt;strong&gt;Kafka&lt;/strong&gt;. We will stream new chatters of user &lt;em&gt;BadBoyHalo&lt;/em&gt; and see how his rank improves with larger number of chatters in his network.&lt;br&gt;
Similarly, we calculated the Betweenness Centrality and showed the results below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9fwtfYm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-bc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9fwtfYm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-bc.png" alt="memgraph-tutorial-twitch-bc" width="880" height="558"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;And that's it for now! You can see all necessary code for this part of the blog post &lt;a href="https://github.com/memgraph/twitch-analytics-demo/tree/main/frontend"&gt;here&lt;/a&gt;. Hope you got everything right, but if you have any questions or want to give some feedback, feel free to join our &lt;a href="https://discord.gg/memgraph"&gt;Discord&lt;/a&gt; Community Server. Make sure to follow up on the last part of this blog, where you can learn how to tackle with your streaming data.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Ultimate SEO Checklist</title>
      <author>Daniel Dominguez</author>
      <pubDate>Wed, 27 Oct 2021 20:29:58 +0000</pubDate>
      <link>https://dev.to/dominguezdaniel/the-ultimate-seo-checklist-4n64</link>
      <guid>https://dev.to/dominguezdaniel/the-ultimate-seo-checklist-4n64</guid>
      <description>&lt;p&gt;Below the ultimate checklist that you need to drive SEO success, covering 41 best practice points and tasks that you need to know about. Let's start:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set Up Google Search Console and Bing Webmaster Tools&lt;/li&gt;
&lt;li&gt;Set Up Google Analytics&lt;/li&gt;
&lt;li&gt;Install and Configure An SEO Plugin (If You Are Using WordPress)&lt;/li&gt;
&lt;li&gt;Generate and Submit A Sitemap&lt;/li&gt;
&lt;li&gt;Create a Robots.txt File&lt;/li&gt;
&lt;li&gt;Check Search Console For Manual Actions&lt;/li&gt;
&lt;li&gt;Make Sure That Google Can Actually Index Your Website&lt;/li&gt;
&lt;li&gt;Identify Your Competitors&lt;/li&gt;
&lt;li&gt;Find Your Main 'Money' Keywords&lt;/li&gt;
&lt;li&gt;Find Long-Tail Keyword Variations&lt;/li&gt;
&lt;li&gt;Create a Keyword Map&lt;/li&gt;
&lt;li&gt;Analyze The Intent of Pages That Rank&lt;/li&gt;
&lt;li&gt;Identify Questions That Are Being Asked&lt;/li&gt;
&lt;li&gt;Understand How Difficult It Is To Rank For Your Target Keywords&lt;/li&gt;
&lt;li&gt;Make Sure You Are Using HTTPS&lt;/li&gt;
&lt;li&gt;Check For Duplicate Versions Of Your Site In Google's Index&lt;/li&gt;
&lt;li&gt;Find and Fix Crawl Errors&lt;/li&gt;
&lt;li&gt;Improve Your Site Speed&lt;/li&gt;
&lt;li&gt;Fix Broken Internal and Outbound Links&lt;/li&gt;
&lt;li&gt;Find and Fix HTTP Links on HTTPS Pages&lt;/li&gt;
&lt;li&gt;Make Sure That Your Website is Mobile-Friendly&lt;/li&gt;
&lt;li&gt;Use an SEO-Friendly URL Structure&lt;/li&gt;
&lt;li&gt;Add Structured Data&lt;/li&gt;
&lt;li&gt;Check the Page Depth of Your Site&lt;/li&gt;
&lt;li&gt;Check Temporary 302 Redirects&lt;/li&gt;
&lt;li&gt;Find and Fix Redirect Chains and Loops&lt;/li&gt;
&lt;li&gt;Find and Fix Duplicate, Missing and Truncated Title Tags&lt;/li&gt;
&lt;li&gt;Find and Fix Duplicate and Missing Meta Descriptions&lt;/li&gt;
&lt;li&gt;Find and Fix Multiple H1 Tags&lt;/li&gt;
&lt;li&gt;Improve Title Tags, Meta Tags, and Page Content&lt;/li&gt;
&lt;li&gt;Run A Content Audit and Prune Content&lt;/li&gt;
&lt;li&gt;Ensure Images Use ALT Tags&lt;/li&gt;
&lt;li&gt;Improve Internal Linking&lt;/li&gt;
&lt;li&gt;Find and Fix Keyword Cannibalization Issues&lt;/li&gt;
&lt;li&gt;Find and Fix Orphaned Site Pages&lt;/li&gt;
&lt;li&gt;Is Your Site's Content Up To Date?&lt;/li&gt;
&lt;li&gt;Analyze Your Competitor's Link Profile&lt;/li&gt;
&lt;li&gt;Conduct a Link Intersect Analysis&lt;/li&gt;
&lt;li&gt;Turn Unlinked Mentions Into Links&lt;/li&gt;
&lt;li&gt;Find New Link Building Opportunities&lt;/li&gt;
&lt;li&gt;Set Up and Optimize Google My Business&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For the full details, visit the original blog post &lt;a href="https://www.semrush.com/blog/seo-checklist/"&gt;here&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>seo</category>
      <category>search</category>
      <category>google</category>
    </item>
    <item>
      <title>Deploy a Flask Application - Manually (Simple Steps)</title>
      <author>Senichi</author>
      <pubDate>Wed, 27 Oct 2021 20:16:34 +0000</pubDate>
      <link>https://dev.to/senichimaro/deploy-a-flask-application-manually-simple-steps-iph</link>
      <guid>https://dev.to/senichimaro/deploy-a-flask-application-manually-simple-steps-iph</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-create-a-named-kubernetes-cluster"&gt;
  &lt;/a&gt;
  1. Create a named Kubernetes cluster
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;eksctl create cluster --name [cluster-name]  --profile [profile-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-image-registry-get-or-create"&gt;
  &lt;/a&gt;
  2. Image registry (get or create)
&lt;/h2&gt;

&lt;p&gt;Create/Build a Docker Image and push it to their Docker Hub repository.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker images are loaded from the container registry into Kubernetes pods. Access to the pods are exposed to consumers through a service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#3-deployment"&gt;
  &lt;/a&gt;
  3. Deployment
&lt;/h2&gt;

&lt;p&gt;The manual &lt;strong&gt;deployment needs a YAML file&lt;/strong&gt; that will describe things like number of replicas, deployment strategy, Docker image name, and port on which the application can be accessed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-deployment-mockup-yaml-file"&gt;
  &lt;/a&gt;
  1. Deployment mockup yaml file
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-flask-deployment
  labels:
    app: simple-flask
spec:
  replicas: 3
  selector:
    matchLabels:
      app: simple-flask
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 2
      maxSurge: 2
  template:
    metadata:
      labels:
        app: simple-flask
    spec:
      containers:
      - name: simple-flask
        image: [docker-username]/[image-name]
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
        ports:
          - containerPort: 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-in-your-terminal"&gt;
  &lt;/a&gt;
  2. In your terminal
&lt;/h4&gt;

&lt;p&gt;Navigate to &lt;a href="//deployment.yaml%20for%20short"&gt;deployment-mockup-yaml-file&lt;/a&gt;, and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f deployment.yml

# It will show the message as :
# deployment.apps/simple-flask-deployment created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-other-useful-commands-are"&gt;
  &lt;/a&gt;
  3. Other useful commands are:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Verify the deployment
kubectl get deployments

# Check the rollout status
kubectl rollout status deployment/simple-flask-deployment

# Show the pods in the cluster
kubectl get pods

# Show the services in the cluster
kubectl describe services

# Display information about the cluster
kubectl cluster-info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-troubleshoot"&gt;
  &lt;/a&gt;
  4. Troubleshoot:
&lt;/h4&gt;

&lt;p&gt;If your pods do not show up as "Ready" while running the &lt;code&gt;kubectl get nodes1&lt;/code&gt; command, use the following troubleshooting tips:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# List all namespaces, all pods
kubectl get all -A

# Show all events
kubectl get events -w

# Show component status
kubectl get componentstatuses
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5-clean-up"&gt;
  &lt;/a&gt;
  5. Clean up
&lt;/h4&gt;

&lt;p&gt;Let's delete the deployment as well the Kubernetes cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Delete your deployment
kubectl delete deployments/simple-flask-deployment

# Tear down your cluster
eksctl delete cluster eksctl-demo --profile &amp;lt;profile-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://kubernetes.io/docs/reference/kubectl/cheatsheet/"&gt;Kubernetes Cheatsheet&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>aws</category>
      <category>kubernetes</category>
      <category>docker</category>
    </item>
    <item>
      <title>Conditional Rendering in React: A Quick Introduction</title>
      <author>Alex Wentz</author>
      <pubDate>Wed, 27 Oct 2021 20:15:02 +0000</pubDate>
      <link>https://dev.to/fromwentzitcame/conditional-rendering-in-react-a-quick-introduction-38i3</link>
      <guid>https://dev.to/fromwentzitcame/conditional-rendering-in-react-a-quick-introduction-38i3</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-conditional-rendering"&gt;
  &lt;/a&gt;
  What is Conditional Rendering?
&lt;/h3&gt;

&lt;p&gt;Many websites want users to create an account that requires you to sign in when using the site. Any social media, blogging platform, or e-commerce site will often even require you to have that account.&lt;/p&gt;

&lt;p&gt;When you go to sign in, you will often click on a button that says something like 'Login' but what happens to that button after you're logged in? It usually changes to 'Logout' until you sign out, after which is says 'Login' again. This is a common example of conditional rendering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conditional rendering&lt;/strong&gt; is when you set conditions in your code that impacts what gets displayed for a user. Some examples could be single html elements on the page (like a login/logout button) or even entire React components (like navigating to a Contact Us form for customers). Some defined condition must be met for a certain kind of display to present for the user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-implement-conditional-rendering-in-your-react-app"&gt;
  &lt;/a&gt;
  How to Implement Conditional Rendering in Your React App
&lt;/h3&gt;

&lt;p&gt;While there are several ways to implement conditional rendering, today I'm only going to talk through my go-to method: ternary operators. They rely on requiring only two possible displays, but other methods could give more than two possible paths; switch allows for three or more conditions.&lt;/p&gt;

&lt;p&gt;We'll talk through a like button, which is a common use case, and use that as the base of our example.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ternary-operator-a-like-button"&gt;
  &lt;/a&gt;
  Ternary Operator - A Like Button
&lt;/h4&gt;

&lt;p&gt;As a reminder, a ternary operator takes three arguments. The first will return a Boolean value of either true or false. If true, the ternary will implicitly return the second argument; if false, it will return the third.&lt;/p&gt;

&lt;p&gt;In the code below, we have some Boolean value 'liked' associated with a certain post in some social media platform for a particular user. If they haven't liked it yet, the button will display "Like"; if they have, the button will display "Liked". While not included here, typically there would also be click events located in the button tag to allow the user to toggle between displaying "Like" and "Liked" in the browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example #1&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;liked&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Liked&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Like&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Example #2&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;liked&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Liked&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Like&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Either example above will produce the same display.&lt;/p&gt;

&lt;p&gt;In example #1, we have a single ternary located inside the button tag. When the element itself doesn't change and either display will use the same click events, this can be a clean and efficient way to structure the code.&lt;/p&gt;

&lt;p&gt;In example #2, you are returning two separate elements. While the example we're working with doesn't appear to require writing out that much code, it can be very useful if you are choosing between two different html elements or whether or not to be able to hide/show that element on the page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#toggle-between-showinghiding-elements"&gt;
  &lt;/a&gt;
  Toggle Between Showing/Hiding Elements
&lt;/h4&gt;

&lt;p&gt;Say we are scrolling through a catalog of images with any details hidden on load, but a user can click a "Show Details" button below any image to display them. In React, we could create a separate component for those details.&lt;/p&gt;

&lt;p&gt;This might require code that looks something closer to the following (albeit with some details like click events and state missing - more on that below):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ItemDetails&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ItemDetails.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ItemContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showDetails&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hide Details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Show Details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showDetails&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemDetails&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An image displays along with a button that allows you to show/hide details. When showDetails is false, nothing will display. When it is true, you'll display the ItemDetails component along with the image right there on the page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-leverage-state"&gt;
  &lt;/a&gt;
  When to Leverage State
&lt;/h3&gt;

&lt;p&gt;The previous example is a great segue into how state can be leveraged in conditional rendering. Showing and hiding details does not rely on static data, but rather on the behavior of the user in that particular instance.&lt;/p&gt;

&lt;p&gt;Using state is a very easy way to accomplish what we need. Building upon our example, we can do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ItemDetails&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ItemDetails.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// don't forget to import!&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ItemContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// set state you'll use in click event&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowDetails&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//define your click event function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setShowDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;setShowDetails&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// toggle between true/false on click&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showDetails&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hide Details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Show Details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showDetails&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemDetails&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;This post is only a brief introduction to conditional rendering and how we use ternary operators to implement them. There are many other methods to explore that may be more useful in different contexts. We also touched on how state can be a useful tool in conditional rendering.&lt;/p&gt;

&lt;p&gt;If you found this tutorial helpful, like and follow for more posts to come!&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Two Symbol Turing Machine</title>
      <author>Dinesh Kumar Gnanasekaran</author>
      <pubDate>Wed, 27 Oct 2021 19:47:57 +0000</pubDate>
      <link>https://dev.to/dineshgdk/two-symbol-turing-machine-33a</link>
      <guid>https://dev.to/dineshgdk/two-symbol-turing-machine-33a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A Turing machine is a mathematical model used for computation by using infinitely long tape with symbols and a set of instructions. It was proposed by Alan Turing (remember, The Imitation Game) in 1936.&lt;/p&gt;

&lt;p&gt;All the programming languages are Turing complete and all the computer hardware (well almost) are Turing complete, meaning that they can do everything that a Turing machine can do. A two symbol Turing machine is a Turing machine that uses only two symbols (eg. 0’s and 1’s) for computation.&lt;/p&gt;

&lt;p&gt;Well!, let's get straight to the point and see what’s a two symbol Turing machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-components"&gt;
  &lt;/a&gt;
  The Components
&lt;/h2&gt;

&lt;p&gt;A Turing machine has three components&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Infinitely long tape&lt;/li&gt;
&lt;li&gt;Read/write head&lt;/li&gt;
&lt;li&gt;Set of instructions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Turing machine uses infinite tape, to read and write symbols using the head on the tape by following a set of instructions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;Let us see the working of our Turing machine through an example of unary addition.&lt;/p&gt;

&lt;p&gt;Unary addition is simple stroke addition, say we add three strokes with two strokes we get five strokes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;||| + || = |||||
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, let's assume that our Turing machine uses two symbols 0 and 1.&lt;/p&gt;

&lt;p&gt;The initial tape is given below, where * represents the read/write head of the machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      * 
0 0 0 1 1 1 0 1 1 0 0 0 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The instructions are in three cards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ala17Vsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbns0orm4tqujewcc1dp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ala17Vsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbns0orm4tqujewcc1dp.png" alt="Image description" width="700" height="84"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The machine works as follows,&lt;/li&gt;
&lt;li&gt;The machine begins with an initial card&lt;/li&gt;
&lt;li&gt;The head reads the symbol on the tape&lt;/li&gt;
&lt;li&gt;The head erases and writes the new symbol on the tape according to the symbol read&lt;/li&gt;
&lt;li&gt;The head shifts in the direction (left or right) according to the symbol read&lt;/li&gt;
&lt;li&gt;The machine follows the next cards according to the symbol read&lt;/li&gt;
&lt;li&gt;The machine repeats the steps 2 to 5 until the halt card (CARD -0)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#walk-through"&gt;
  &lt;/a&gt;
  Walk Through
&lt;/h2&gt;

&lt;p&gt;Our machine starts initially with CARD -1, with the initial tape.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INITIAL STATE
      * 
0 0 0 1 1 1 0 1 1 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The head encounters symbol 1, so it writes 1 shift to the right and follows the instructions from the next card, CARD -1 itself. The same happens two more times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;STEP 1
        * 
0 0 0 1 1 1 0 1 1 0 0 0

STEP 2
          * 
0 0 0 1 1 1 0 1 1 0 0 0

STEP 3
            * 
0 0 0 1 1 1 0 1 1 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At STEP 3 the machine stills follow CARD -1. The head reads the symbol 0, now the head erases 0 and writes 1, shifts to the right, and goes to CARD -2 for the next instructions. Then, the head reads 1, writes 1, and shifts to the right. This repeats again for another step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;STEP 4
              * 
0 0 0 1 1 1 1 1 1 0 0 0

STEP 5
                * 
0 0 0 1 1 1 1 1 1 0 0 0

STEP 6
                  * 
0 0 0 1 1 1 1 1 1 0 0 0

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the head reads symbol 0, following the instructions from CARD -2, it writes 0, shifts left and gets the next instructions from CARD-3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;STEP 7
                * 
0 0 0 1 1 1 1 1 1 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the head reads symbol 1, it erases and writes 0, shift to the right, and the next card is CARD -0 (HALT)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we had a brief discussion on what is a Turing machine, especially a two symbol Turing machine. We went through the working of two symbols Turing machine through an example of unary addition.&lt;/p&gt;

&lt;p&gt;I have implemented the two-state Turing machine in C and you can access through this &lt;a href="https://github.com/dinesh-GDK/turing_machine"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can create your own Turing machine with the flexibility of adding custom instructions and tape, with step-by-step visualization. I have added some interesting tapes and cards for you to implement.&lt;/p&gt;

&lt;p&gt;We have just touched the tip of the iceberg. There are very interesting puzzles which we can play with the Turing machine. One such puzzle is the Busy Beaver problem, a truly fascinating one. If interested just take a peek at it. The GitHub link contains some busy beaver cards and tapes as well.&lt;/p&gt;

</description>
      <category>turingmachine</category>
      <category>programming</category>
      <category>c</category>
    </item>
    <item>
      <title>Atajos de Teclado (Shortcuts) en VSCode. </title>
      <author>Gastón Danielsen</author>
      <pubDate>Wed, 27 Oct 2021 19:40:08 +0000</pubDate>
      <link>https://dev.to/gdcodev/atajos-de-teclado-shortcuts-en-vscode-430a</link>
      <guid>https://dev.to/gdcodev/atajos-de-teclado-shortcuts-en-vscode-430a</guid>
      <description>&lt;p&gt;Visual Studio Code actualmente en uno de los editores de código más utilizado, sobre todo entre los desarrolladores Web, nos permite programar en casi cualquier lenguaje. Tiene muchas características que lo hacen el editor de código favorito de muchos, ya que es muy personalizable, esto quiere decir que podemos adaptarlo a los gustos personales de cada uno.&lt;/p&gt;

&lt;p&gt;Algo que puede ayudarte a ser mas rápido y ahorrar mas tiempo a la hora de moverte o escribir código en VSCode sin duda son los atajos de teclado. Ahora veremos en detalle algunos de ellos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#general"&gt;
  &lt;/a&gt;
  General
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Acción&lt;/th&gt;
&lt;th&gt;Atajo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Abrir paleta de comandos&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir archivo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + P&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nueva ventana&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + N&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cerrar ventana&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + W&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ajustes del perfil&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + ,&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#usabilidad"&gt;
  &lt;/a&gt;
  Usabilidad
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Acción&lt;/th&gt;
&lt;th&gt;Atajo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Crear un nuevo archivo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + N&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir archivo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + O&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Guardar archivo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + S&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cerrar&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + F4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir Terminal&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + '&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Panel de problemas&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + M&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#edici%C3%B3n-b%C3%A1sica"&gt;
  &lt;/a&gt;
  Edición básica
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Acción&lt;/th&gt;
&lt;th&gt;Atajo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cortar linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Copiar linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + C&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Borrar linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + K&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Insertar linea abajo&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Enter&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Insertar linea arriba&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + Enter&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Buscar en archivo abierto&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + F&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Reemplazar&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + H&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Linea de comentario&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + /&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bloque de comentario&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Shift + Alt + A&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Salto de linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Alt + Z&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Seleccionar lineas&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Alt + Click Mouse&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tabular linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Tab&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Destabular linea&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Shift + Tab&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#pantalla"&gt;
  &lt;/a&gt;
  Pantalla
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Acción&lt;/th&gt;
&lt;th&gt;Atajo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Acercar Zoom&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + +&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alejar Zoom&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + -&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Barra lateral&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + B&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir debug&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + D&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Panel de salida&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + U&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Control de source&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + G&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Acceder a extensiones&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abrir terminal integrado&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Ctrl + Shift + Ñ&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Mas sobre Visual Studio Code: &lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf"&gt;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;📌 Mis Redes: 🔵&lt;a href="https://www.facebook.com/gdcode7"&gt;Facebook&lt;/a&gt; | 💼&lt;a href="https://www.linkedin.com/in/gastondanielsen/"&gt;LinkedIn&lt;/a&gt; | 💻&lt;a href="https://github.com/gdcodev"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Cache API Integration with HydratedBLoC in Flutter (Source Codes Included)</title>
      <author>Imran Sefat</author>
      <pubDate>Wed, 27 Oct 2021 19:25:15 +0000</pubDate>
      <link>https://dev.to/imransefat/cache-api-integration-with-hydratedbloc-in-flutter-source-codes-included-42kg</link>
      <guid>https://dev.to/imransefat/cache-api-integration-with-hydratedbloc-in-flutter-source-codes-included-42kg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction 🎉
&lt;/h1&gt;



&lt;p&gt;BLoC stands for Business Logic Controller. It was created by Google and introduced at Google I/O 2018. It is made based on Streams and Reactive Programming.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;I can assure you that every intermediate-level Flutter developer in their development lifetime heard about Bloc or maybe tried to learn bloc. Bloc is one of the most popular state management choices among developers because it has rich documentation and is well maintained. But yes, there are some downsides as well, for example, a lot of boilerplate codes.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;We will implement API integration at first, then persist the state so that when the user closes the app, it can maintain the state or load the data from the local device saved from the last API call to put it simply.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Note that after we kill the app, it starts right back where it left off. In addition, after it has loaded the previous (cached) state, the app requests the latest API data and updates seamlessly. Let’s get started!&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--32fs26Nl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/0%2AOOohPMPoLAgC_hXS" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--32fs26Nl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/500/0%2AOOohPMPoLAgC_hXS" alt="I won" width="500" height="363"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps 👣
&lt;/h1&gt;
&lt;h4&gt;
  &lt;a href="#1-configuring-the-flutter-project"&gt;
  &lt;/a&gt;
  1. Configuring the Flutter Project
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#2-add-the-datamodel"&gt;
  &lt;/a&gt;
  2. Add the datamodel
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#3-creating-the-bloc"&gt;
  &lt;/a&gt;
  3. Creating the bloc
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#4-creating-the-bloc-state-and-event"&gt;
  &lt;/a&gt;
  4. Creating the bloc state and event
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#5-creating-the-bloc-repository"&gt;
  &lt;/a&gt;
  5. Creating the Bloc Repository
&lt;/h4&gt;
&lt;h4&gt;
  &lt;a href="#6-implementing-the-bloc"&gt;
  &lt;/a&gt;
  6. Implementing the bloc
&lt;/h4&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nO0IzXa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/320/0%2A9wL0qaE3oOUUd0Nl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nO0IzXa3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/320/0%2A9wL0qaE3oOUUd0Nl.gif" alt="I won" width="320" height="240"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#1-configuring-the-flutter-project"&gt;
  &lt;/a&gt;
  1. Configuring the Flutter project ⚙️
&lt;/h1&gt;

&lt;p&gt;Let’s add the necessary packages that we’re going to use throughout the application.&lt;/p&gt;

&lt;p&gt;Copy the dependencies to your Pubspec.yaml file. I am using the latest version available now at this moment.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Then we need to install it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter packages get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You will get to understand everything as we go ahead.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GUzMl_c9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/415/0%2ABB4B-IgNEWa0TJvb" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUzMl_c9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/415/0%2ABB4B-IgNEWa0TJvb" alt="Datamodel" width="415" height="311"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#2-add-the-datamodel"&gt;
  &lt;/a&gt;
  2. Add the datamodel 📳
&lt;/h1&gt;

&lt;p&gt;We will implement the “FREETOGAME API”. For this, we have to make a datamodel of the API’s response. I have used the following website to make the datamodel class. It’s pretty easy, copy the JSON response and paste it on the website. The website will generate a class for you.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Website Link: &lt;a href="https://ashamp.github.io/jsonToDartModel/"&gt;https://ashamp.github.io/jsonToDartModel/&lt;/a&gt;&lt;br&gt;
Don’t forget to tick the Null Safety checkbox!&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;





&lt;p&gt;Another datamodel that will contain the list of the games refers to the code below.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;The above code will show you some errors, as you can see that the 5th line contains a code that indicates that this file is part of another file that needs to be generated. Another thing, look at the 7th line, it is indicating that we will serialize so that we can save the response for later use.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Open a terminal and run the below code.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;flutter packages pub run build_runner build&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wN7ickaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/320/0%2AgBkU4Qpdn7UjipHp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wN7ickaS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/320/0%2AgBkU4Qpdn7UjipHp" alt="bloc" width="320" height="180"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#3-creating-the-bloc"&gt;
  &lt;/a&gt;
  3. Creating the bloc
&lt;/h1&gt;




&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
It contains the logic behind the main bloc. Now we have to make the event and state as well.

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ROfNuTDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/352/0%2A7-mIGJ58Wj7HPjwm" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ROfNuTDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/352/0%2A7-mIGJ58Wj7HPjwm" alt="bloc" width="352" height="232"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#4-creating-the-bloc-state-and-event"&gt;
  &lt;/a&gt;
  4. Creating the bloc state and event
&lt;/h1&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;There can be three(3) states.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Game list is loading -&amp;gt; GamelistLoading&lt;/li&gt;
&lt;li&gt;Game list loaded -&amp;gt; GamelistLoaded&lt;/li&gt;
&lt;li&gt;Game list cannot be loaded -&amp;gt; GamelistError&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WsxQQBjR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/480/0%2AoRzNrsG2ehRBKYEm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WsxQQBjR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/480/0%2AoRzNrsG2ehRBKYEm.gif" alt="loading" width="480" height="360"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#5-creating-the-bloc-repository"&gt;
  &lt;/a&gt;
  5. Creating the Bloc Repository👾
&lt;/h1&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We are calling the API using the HTTP package form from this file or class.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2uK3nT-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/480/0%2AmmOy98cWIGqgpjPd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2uK3nT-Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/480/0%2AmmOy98cWIGqgpjPd.gif" alt="loading" width="480" height="480"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-implementing-the-bloc%F0%9F%9B%A0"&gt;
  &lt;/a&gt;
  6. Implementing the bloc🛠
&lt;/h1&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
This portion contains the UI and the Bloc implementation. You can check the main function. It is instantiating the hydrated bloc in the temporary directory.&lt;br&gt;
Note that after we kill the app it starts right back where it left off. In addition, after it has loaded the previous (cached) state, the app requests the latest API data and updates seamlessly.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;

&lt;h1&gt;
  &lt;a href="#congratulations"&gt;
  &lt;/a&gt;
  Congratulations! 🎊
&lt;/h1&gt;

&lt;p&gt;You just integrated an API with HydratedBloc that has Caching.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tVyQq7oI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/480/0%2As1NXqYGxJqv9Tk9x.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tVyQq7oI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/480/0%2As1NXqYGxJqv9Tk9x.gif" alt="success" width="480" height="270"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#contact-me"&gt;
  &lt;/a&gt;
  Contact Me🌎
&lt;/h1&gt;

&lt;p&gt;YouTube Channel: &lt;a href="https://www.youtube.com/c/CodingwithImran"&gt;Coding with Imran&lt;/a&gt;&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/ImranSefat"&gt;@ImranSefat&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/imransefat/"&gt;MD. Al Imran Sefat&lt;/a&gt;&lt;br&gt;
Facebook Page: &lt;a href="https://www.facebook.com/CodingWithImran"&gt;Coding with Imran&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>api</category>
      <category>bloc</category>
      <category>cache</category>
    </item>
    <item>
      <title>How to Grow as a Software Engineer - 5 Tips</title>
      <author>Andrew Meredith</author>
      <pubDate>Wed, 27 Oct 2021 19:22:44 +0000</pubDate>
      <link>https://dev.to/kendru/how-to-grow-as-a-software-engineer-5-tips-5eo0</link>
      <guid>https://dev.to/kendru/how-to-grow-as-a-software-engineer-5-tips-5eo0</guid>
      <description>&lt;p&gt;So you got a job as a software engineer. What now? There are 1,000 technical skills that you can dig into. There is always a new framework to learn. Your company probably has a large codebase that you can get familiar with. You need to know Git, the command line... the list goes on. In many ways, &lt;em&gt;how&lt;/em&gt; you approach career growth is more important than the specific things you learn. In this post, we'll look at 5 tips for helping you grow as a software engineer. We will not be talking about specific technologies since those change all the time. Instead, we'll look at the mindset that will best help you advance in your software engineering career:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set Goals&lt;/li&gt;
&lt;li&gt;Ask Questions&lt;/li&gt;
&lt;li&gt;Let Yourself Get Stuck&lt;/li&gt;
&lt;li&gt;Follow Trends&lt;/li&gt;
&lt;li&gt;Don't Follow Trends&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#1-set-goals"&gt;
  &lt;/a&gt;
  1. Set Goals
&lt;/h2&gt;

&lt;p&gt;If you know what you want to achieve, there is always a way to plan how to get there. Without clear goals, it is all too easy to spend hours on things that, in retrospect, did not serve to help you in your career. Reasonable goals guide us in determining what to do and what to say "no" to. That means that a goal must be specific enough to serve as a compass guiding your journey but general enough that it is not just another task on your to-do list. A good rule of thumb is that a goal should be something that you cannot complete over a weekend, and it should also not be something that will take more than a year.&lt;/p&gt;

&lt;p&gt;Goals should also be actionable. Just like a good software feature spec, a goal should have criteria that you can use to determine whether you have met it. For example, if you want to learn &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt;, your goal should not be "Learn Vue." Try something like "Learn Vue well enough to rewrite &lt;code&gt;[PROJECT X]&lt;/code&gt; in it without referring to documentation" or "Learn Vue so that I can write a blog post comparing it to React." With more concrete goals and completeness criteria, you will find that it is easier to decide what to work on next.&lt;/p&gt;

&lt;p&gt;Also, set aside some time - maybe just five or ten minutes per week - to think back over what you have accomplished and to refocus if necessary. Keep a document where you write down the progress you have made, the things you have learned, and then return to it when you feel discouraged. I promise that it will be motivating to remember how far you have come already!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-ask-questions"&gt;
  &lt;/a&gt;
  2. Ask Questions
&lt;/h2&gt;

&lt;p&gt;Whether working on a team or as an individual developer, one of the most helpful practices that you can foster is asking questions - even if you already have a good idea of the answer! By asking someone a question (in person or online), you may get a direct answer, and that is great. However, you may learn another way to think about your problem. Even the exercise of formulating a compelling question can help the way you think about it.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--7XevrGkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1268165498824298496/iFsVfFkB_normal.jpg" alt="Kent Beck profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Kent Beck
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @kentbeck
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Sometimes you know the answer &amp;amp; asking the question is still valuable.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:12 PM - 26 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1453031746283323398" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1453031746283323398" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1453031746283323398" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Another good reason to ask questions is to fight imposter syndrome. Most of us struggle with feeling like we are not adequate to solve the problem in front of us. The best way to fight imposter syndrome is by being honest with yourself and others about what you know and what you don't know (yet). By asking questions, you tell yourself and everyone around you that you want to learn and that you &lt;strong&gt;can&lt;/strong&gt; learn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-let-yourself-get-stuck"&gt;
  &lt;/a&gt;
  3. Let Yourself Get Stuck
&lt;/h2&gt;

&lt;p&gt;Asking questions is great, but sometimes the best thing you can do is struggle through a complex problem. While you should not try to solve every problem from scratch, you should occasionally take the opportunity to use what you already know to figure out something that you don't. As you advance in your career, you will find that you sometimes face problems that nobody on your team or StackOverflow has solved before. Developing the problem-solving skills to overcome these situations can be one of the most valuable tools you will ever put in your toolbox.&lt;/p&gt;

&lt;p&gt;The feeling of accomplishment when you are stuck for a while and finally figure out how to move on is incredibly motivating, and it will give you a nice boost of confidence. If you have been working on one problem for a while without making progress, go back to the previous tip and ask some questions. There is no shame in getting help, and some issues really are incredibly tough. Challenge yourself, but never drive yourself to the point where you feel defeated. Remember that when a problem feels too hard, it is not because you are not good enough to solve it. It is because it requires specific knowledge you haven't gained yet, so cut yourself some slack, do some research, ask questions, and move on.&lt;/p&gt;

&lt;p&gt;If you are the note-taking type, then it can be helpful to chronicle how you wrestled with the problem. Even if you never return to these notes, the process of writing them will help you remember what worked and what did not the next time you encounter a similar problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-follow-trends"&gt;
  &lt;/a&gt;
  4. Follow Trends
&lt;/h2&gt;

&lt;p&gt;Career growth follows some sort of progression. You start at some point, and you grow &lt;em&gt;toward&lt;/em&gt; some future version of yourself. To best direct the goals you set (remember the first tip!) to get to the version of yourself that you want to be, you need to be strategic. Want to be a kick-ass front-end engineer? Learning React and Tailwind are probably better uses of your time than learning jQuery. Want to get into cloud-native development? Go, Kubernetes, and service mesh should be the things that you focus on.&lt;/p&gt;

&lt;p&gt;Try to dedicate a little time every week to keep up with what is new and exciting in the communities that interest you. This can be difficult because there is a lot of noise to filter for every bit of signal. At first, it may be difficult to tell what is hype and what is a legitimate trend. You will develop the skills over time to predict whether some new technology is going to have a lasting impact. Still, at least initially, you may want to be among the &lt;a href="https://en.wikipedia.org/wiki/Technology_adoption_life_cycle"&gt;early adopters or early majority&lt;/a&gt; for a tool or technique rather than try to be among the innovators. It feels good to be on the bleeding edge, but it feels better to look back with confidence in what you have chosen to invest your time in.&lt;/p&gt;

&lt;p&gt;Finally, your interests will probably change over time, and that is a good thing! Don't let dedication to something you used to enjoy prevent you from pivoting and pursuing something else. Sometimes it can even be advantageous to shift directions in your career because you will be a more well-rounded individual and bring a unique perspective that not everyone else will have. Personally, I have learned more from engineers who started doing something else - from QA to quantum physics research - than from people who have spent their entire career in a single track. Your career is your own.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-dont-follow-trends"&gt;
  &lt;/a&gt;
  5. Don't Follow Trends
&lt;/h2&gt;

&lt;p&gt;Wait, didn't I just say to not follow trends? Paying attention to the trends helps you decide what goals to set for yourself, but (from someone who has been there) chasing every new technology leads to burn-out. Try to have just a couple of goals at any point, and don't spend time on things that don't further those goals. Ultimately, when you force yourself to prioritize what is most important, you have to just wave at some trends as they pass by. Especially in fast-moving ecosystems, there will always be more you want to discover than you will be able to. Remember that even the developers you look up to are not experts in everything, and they likely know surprisingly little about most of the tech headlines we see.&lt;/p&gt;

&lt;p&gt;You can measure your skillset by depth and breadth. Now, it may be perfectly legitimate to have a goal like "Improve the breadth of my front-end knowledge by reading 1 book on each of the 4 most popular frameworks," but do not try to become an expert in all four frameworks simultaneously. Make sure that you are clear on when you are working for depth and when you are working for breadth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope that this article helps you focus your time and energy on the things that help you get to where you want to be. Whatever direction you want to take your career, whatever the specific things you decide to invest yourself in, remember to cultivate the habit of being mindful about where you are going and purposeful about how you get there.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>motivation</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to create a custom radio button and make it functional in react?</title>
      <author>Tommy</author>
      <pubDate>Wed, 27 Oct 2021 19:08:47 +0000</pubDate>
      <link>https://dev.to/uttammarandi/how-to-create-a-custom-radio-button-and-make-it-functional-in-react-39hf</link>
      <guid>https://dev.to/uttammarandi/how-to-create-a-custom-radio-button-and-make-it-functional-in-react-39hf</guid>
      <description>&lt;p&gt;I was creating a product page for one of my e-commerce projects. And then I came into an issue of building a color and size selection component. I searched a lot on developer's best friend "Google" but could not find any optimal solution. After few exploration and testing I came up with this code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-setup"&gt;
  &lt;/a&gt;
  Basic Setup
&lt;/h2&gt;

&lt;p&gt;1.React&lt;br&gt;
2.Tailwind&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#preparing-the-data"&gt;
  &lt;/a&gt;
  Preparing the data
&lt;/h2&gt;

&lt;p&gt;Let's say we have an array of sizes for a particular product fetched from the db. We need to convert it to an object containing an id which will be used to map input to label and the value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;productSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;S&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;X&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;XXL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;//map&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sizeData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;productSize&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`input_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#defining-states"&gt;
  &lt;/a&gt;
  Defining States
&lt;/h2&gt;

&lt;p&gt;I defined a state for tracking the state of radio values. If you are using multiple radio buttons , you should create multiple states&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sizeValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSizeValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rendering-the-component"&gt;
  &lt;/a&gt;
  Rendering the component
&lt;/h2&gt;

&lt;p&gt;Map through the sizeData array and render each size. I am using tailwind css for styling which might make the code a bit messy.&lt;br&gt;
Radio input is set to invisible so that the label is the clickable element. input id is mapped to label for.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main max-w-lg mx-auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grid grid-cols-4 gap-8 gap-y-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sizeData&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-mt-2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
              &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;invisible radio_custom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;radio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sizeValue&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sizeValue&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
              &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setSizeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;radio_custom_label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
                &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`border border-gray-300 py-3 text-center cursor-pointer "
                        }`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#issues"&gt;
  &lt;/a&gt;
  Issues
&lt;/h2&gt;

&lt;p&gt;Now, I have few issues with the above code. When a button is clicked , the other clicked buttons stays active. This doesn't give the toggle functionality that we require. The state is changing but the border on "onClick" persists. So even if the the state is changing, border stays on the element.&lt;br&gt;
What we need is to remove the border from all element and add border to the "target" element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;lastChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show_border&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextSibling&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show_border&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;setSizeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-code"&gt;
  &lt;/a&gt;
  Final Code
&lt;/h2&gt;

&lt;p&gt;I had to refactored the code like three times🙂. Here is the final code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;productSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;S&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;X&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;XXL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="c1"&gt;//map&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sizeData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;productSize&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`input_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sizeValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSizeValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sizeValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main max-w-lg mx-auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grid grid-cols-4 gap-8 gap-y-4&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sizeData&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-mt-2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
              &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;invisible radio_custom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;radio&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;checked&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sizeValue&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;sizeValue&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
              &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="nx"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;lastChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show_border&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nextSibling&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstChild&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;show_border&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;setSizeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
              &lt;span class="p"&gt;}}&lt;/span&gt;
            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;radio_custom_label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
                &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`border border-gray-300 py-3 text-center cursor-pointer "
                        }`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I used tailwind so need to add css code. Only extra one css class is required&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.show_border&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#2b2b2b&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#final-result"&gt;
  &lt;/a&gt;
  Final Result
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/4mDxFTVDZXd2pz3sLq/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/4mDxFTVDZXd2pz3sLq/giphy.gif" width="480" height="222"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-notes"&gt;
  &lt;/a&gt;
  Final Notes
&lt;/h2&gt;

&lt;p&gt;There are multiple ways of doing this. If you have any suggestion or code improvement please do share. Feel free to connect. It's lively to make new friends.😀&lt;/p&gt;

</description>
      <category>react</category>
      <category>radiobutton</category>
      <category>functionalcomponent</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Projective Geometry Computer Vision</title>
      <author>He Codes IT</author>
      <pubDate>Wed, 27 Oct 2021 19:08:22 +0000</pubDate>
      <link>https://dev.to/hecodesit/projective-geometry-computer-vision-o9p</link>
      <guid>https://dev.to/hecodesit/projective-geometry-computer-vision-o9p</guid>
      <description>&lt;p&gt;Projective Geometry in Computer vision is an important concept. Projective geometry provides the mathematical formalism to describe the geometry of cameras and associated transformations, enable the manipulations of 2D projections of 3D objects. The definition of Projective Geometry in Wikipedia given HERE.&lt;/p&gt;

&lt;p&gt;Just like an English Grammar has First, Second and Third Person Perspectives, Computer vision has One Point, Two point and 3 Point Perspective of an image.&lt;/p&gt;

&lt;p&gt;One Point Perspective&lt;br&gt;
It has a single vanishing Point. All the edges are connected to this single vanishing Point.&lt;/p&gt;

&lt;p&gt;To read more visit &lt;a href="https://hecodesit.com/projective-geometry-computer-vision/"&gt;https://hecodesit.com/projective-geometry-computer-vision/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>computervision</category>
      <category>python</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Encrypt/decrypt data with .NET 6 and Azure Key Vault</title>
      <author>Christos Matskas</author>
      <pubDate>Wed, 27 Oct 2021 18:48:31 +0000</pubDate>
      <link>https://dev.to/425show/encryptdecrypt-data-with-net-6-and-azure-key-vault-oak</link>
      <guid>https://dev.to/425show/encryptdecrypt-data-with-net-6-and-azure-key-vault-oak</guid>
      <description>&lt;p&gt;Security is hard. It's hard because there are so many things that can go wrong along the way. Attackers only need to find one small gap to make it through whereas developers and IT Pros have to think about all the possible attack permutations and potential security vulnerabilities every step of the way. That's why we talk about &lt;a href="https://gomindsight.com/insights/blog/what-are-the-7-layers-of-security/"&gt;"security in layers"&lt;/a&gt; when it comes to building systems that handle &lt;del&gt;sensitive&lt;/del&gt; data. And unless you're creating static marketing pages, it's very likely that your solution will need to work with some data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-do-i-start"&gt;
  &lt;/a&gt;
  Where do I start?
&lt;/h2&gt;

&lt;p&gt;If you're running on Azure (or other cloud providers) there are tools to help you keep your data secure both at rest and in transit. This is great &lt;a href="https://docs.microsoft.com/en-us/azure/security/fundamentals/encryption-overview"&gt;document&lt;/a&gt; that can help you get a high level overview of Azure data security and encryption. And there are many more tools to help you lock down and tightly monitor access to your data: &lt;a href="https://docs.microsoft.com/en-us/azure/security-center/security-center-introduction"&gt;Azure Security Center&lt;/a&gt;, [Azure Advisor] and &lt;a href="https://docs.microsoft.com/en-us/azure/security/fundamentals/overview"&gt;more&lt;/a&gt; etc etc.&lt;/p&gt;

&lt;p&gt;In this blog post we're going to look at client data encryption/decryption using .NET and Azure key Vault. However, if you're not a .NET developer, the practices and ideas in this blog post are applicable and available to every language that's supported by the Azure SDK and since everything is a wrapper around our Azure REST API, you can even roll out your own libraries (if you decide to choose so)&lt;/p&gt;

&lt;p&gt;The main point of this blog post is to help developers implement a robust solution to encrypt/decrypt data without having to worry about the underlying cryptographic implementation. Therefore, instead of spending weeks or months learning how cryptography works (symmetric, asymmetric, recommended algorithms and hard maths), you delegate the work to a service like Azure Key Vault. This way, you have a reliable and scalable service to manage your keys and perform complex operation outside your code! And that's the key: removing sensitive operations from you code makes it more robust&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To be able to use the code in this solution you'll need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An Azure Subscription &lt;a href="https://azure.microsoft.com/free"&gt;get a FREE one&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;An Azure Key Vault (&lt;a href="https://docs.microsoft.com/en-us/azure/key-vault/general/quick-create-cli"&gt;create one&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;.NET 6 &lt;a href="https://dotnet.microsoft.com/download/dotnet/6.0"&gt;Download&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;VS Code &lt;a href="https://code.visualstudio.com/Download"&gt;Download&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One thing we haven't discussed yet is that this solution &lt;strong&gt;requires internet access&lt;/strong&gt; to call into Key Vault. Consequently, if you have an on prem app that needs to run in isolation and not call into Azure, you'll need to look at equivalent, on prem solutions like HashiCorp Vault etc. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#account-security-and-best-practices"&gt;
  &lt;/a&gt;
  Account security and best practices
&lt;/h2&gt;

&lt;p&gt;Most developers when working with Azure tend to use their own accounts out of convenience. However, this is not ideal. Instead, they should use Service Principals with restricted access rights to only the necessary resources. When moving to production, the Azure.Identity library makes it extremely easy to switch to Managed Identities without changing the code. Security end-to-end.&lt;/p&gt;

&lt;p&gt;Let's create a Service Principal with the right permissions:&lt;/p&gt;

&lt;p&gt;Open your favorite terminal (that has the Azure CLI installed) or jump straight to Azure Cloud Shell and run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;az ad sp create-for-rbac -n "cm-keyvault-crypto" --role "Key Vault Crypto User"
az keyvault set-policy --name cm-identity-kv --object-id a4e0e9c6-c507-4449-a9c4-25243ef61fe9 --key-permissions decrypt encrypt list get
az login --service-principal -u 2ff15c46-97bd-424a-b97a-433c8e5640d7 -p &amp;lt;your secret&amp;gt; --tenant 72f988bf-86f1-41af-91ab-2d7cd011db47
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first command creates a service principal account and assigns it to Crypto user RBAC role. Although we will not be using RBAC for this example, it's recommended practice to assign the appropriate roles to your SPs. Also note that the default &lt;code&gt;az ad sp create-for-rbac&lt;/code&gt; command behavior will change and stop assigning &lt;strong&gt;Contributor&lt;/strong&gt; role by default - a great security measure going forward! Contributor is an overprivileged role and we want to avoid using such accounts for dev/test/prod.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lg55z5N3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2bk1l3dg3tmmnpqmqo6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lg55z5N3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2bk1l3dg3tmmnpqmqo6.png" alt="Image description" width="880" height="211"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second command assigns the appropriate Access Policies to Azure Key Vault to allow us retrieve keys to use for encryption/decryption. &lt;/p&gt;

&lt;p&gt;The final command signs in the Service Principal in the Azure CLI as we will be using this to provide credentials to our code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-write-some-code"&gt;
  &lt;/a&gt;
  Let's write some code
&lt;/h2&gt;

&lt;p&gt;For this solution we are going to use the .NET CLI and VS Code. In your terminal type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new console -n EncryptDecryptSample
dotnet add package install Azure.Identity
dotnet add package Azure.Security.KeyVault.Keys -v 4.3.0-beta.2 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the project in VS Code with &lt;code&gt;code .&lt;/code&gt;. Now we can write the necessary code to encrypt and decrypt data. Update the &lt;code&gt;Program.cs&lt;/code&gt; file with the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using System.Text;
using Azure;
using Azure.Identity;
using Azure.Security.KeyVault.Keys;
using Azure.Security.KeyVault.Keys.Cryptography;

// vault URL could be passed as a parameter
var KeyVaultUrl = "https://cm-identity-kv.vault.azure.net";
// using Azure AD to support secretless authentication to Azure Key Vault
var credentials = new ChainedTokenCredential(
                        new AzureCliCredential(),
                        new ManagedIdentityCredential()
                );

var client = new KeyClient(new Uri(KeyVaultUrl), credentials);

//this could be parametarized as you may wish to pass different keys for different operations
var keyName = "MyEncryptionKey";

//get the key (or create one on the fly - very unlikely in a production environment)
KeyVaultKey key;
try 
{
    key = await client.GetKeyAsync(keyName); 
} 
catch (RequestFailedException ex) when (ex.Status == 404) 
{
    key = await client.CreateRsaKeyAsync(new CreateRsaKeyOptions(keyName));
} 

//get the crypto client of the key
var cryptoClient = client.GetCryptographyClient(key.Name, key.Properties.Version);

//do the fun stuff
var plainText = "My secret message";
var byteData = Encoding.Unicode.GetBytes(plainText);

Console.WriteLine("Encrypting...");
var encryptedResult = await cryptoClient.EncryptAsync(EncryptionAlgorithm.RsaOaep, byteData);
Console.WriteLine($"Encrypted data: {Convert.ToBase64String(encryptedResult.Ciphertext)}");
Console.WriteLine("Decrypting...");
var decryptedResult = await cryptoClient.DecryptAsync(EncryptionAlgorithm.RsaOaep, encryptedResult.Ciphertext);
Console.WriteLine($"Decrypted data: {Encoding.Unicode.GetString(decryptedResult.Plaintext)}");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the Service Principal is configured correctly then running the code with &lt;code&gt;dotnet run&lt;/code&gt; should yield the following output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q06K1lyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8aeiae8gqomx63esn5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q06K1lyJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e8aeiae8gqomx63esn5a.png" alt="Image description" width="880" height="171"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the Key Vault permissions are wrong (they shouldn't be if you followed the instructions above and signed in with the right account), you may receive the following error:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yzS9mJTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yza4yvkr7svmfqfa1zdb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yzS9mJTD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yza4yvkr7svmfqfa1zdb.png" alt="Image description" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code makes use of the Azure.Identity library to authenticate to Azure Key Vault and then instantiate a &lt;code&gt;KeyClient&lt;/code&gt; and a &lt;code&gt;CryptographyClient&lt;/code&gt; to perform the necessary operations. This way, we never have to use and Keys or Secrets to authenticate to Key Vault making our application even more secure. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: this code attempts to retrieve a key and, if not found, it creates a new one. The current Service Principal (as configured earlier) doesn't have the appropriate permission to create keys so the code will fail. We can either create a key using a more privileged account, or temporarily update the SP with a &lt;code&gt;Create&lt;/code&gt; permission. In real world scenarios, the IT Admins or Security team will be responsible for creating (and rolling) keys in Key Vault.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#where-is-the-code"&gt;
  &lt;/a&gt;
  Where is the code?
&lt;/h2&gt;

&lt;p&gt;You can grab the code from [this GitHub repo] - notice how it jumps straight to the (&lt;a href="https://github.dev/425show/EncryptDecryptDataWithKeyVault"&gt;https://github.dev/425show/EncryptDecryptDataWithKeyVault&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Application security is hard but we shouldn't be intimated by it, especially since, as developers we are spoiled for choice these days! Many of the hard problems that we had to solve in the past are now a service or product that we can easily pull off the shelf and add it to our solution. Therefore, if you need to encrypt/decrypt data in your application, you can now do it with less than 20 lines of code using Azure Key Vault backed by Azure AD. Let me know in the comments if you have any Qs :)&lt;/p&gt;

</description>
      <category>security</category>
      <category>azure</category>
      <category>cloud</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>React SaaS Boilerplate with Next JS and Serverless</title>
      <author>Remi W.</author>
      <pubDate>Wed, 27 Oct 2021 18:31:17 +0000</pubDate>
      <link>https://dev.to/ixartz/react-saas-boilerplate-with-next-js-and-serverless-n3m</link>
      <guid>https://dev.to/ixartz/react-saas-boilerplate-with-next-js-and-serverless-n3m</guid>
      <description>&lt;p&gt;Building a SaaS application from scratch is a difficult task and it involves a lot of skills: Frontend, Backend, Cloud infrastructure and third-party integration like payment. It took me 5 months to build my first SaaS and make it available to the public.&lt;/p&gt;

&lt;p&gt;I built a &lt;a href="https://nextlessjs.com" rel="noopener noreferrer"&gt;React SaaS Boilerplate&lt;/a&gt; to reduce this time by 80%. The perfect solution to build your SaaS faster and better. My goal is to help you (developers) focus on your SaaS and your customers instead of losing time on boring configuration and integration.&lt;/p&gt;

&lt;p&gt;Get access to the most common SaaS building blocks and launch your SaaS in weeks, not in months.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter" width="720" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#landing-page-and-user-dashboard"&gt;
  &lt;/a&gt;
  Landing Page and User Dashboard
&lt;/h2&gt;

&lt;p&gt;Save time with a prebuilt landing page component written in React styled with Tailwind CSS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Navigation bar&lt;/li&gt;
&lt;li&gt;Hero&lt;/li&gt;
&lt;li&gt;Features&lt;/li&gt;
&lt;li&gt;Vertical features&lt;/li&gt;
&lt;li&gt;Testimonial&lt;/li&gt;
&lt;li&gt;Pricing card&lt;/li&gt;
&lt;li&gt;FAQ&lt;/li&gt;
&lt;li&gt;Call to action&lt;/li&gt;
&lt;li&gt;Footer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only thing left to you is the copywriting. Here is the example of the landing page:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dKUm8xr4PxI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For your authenticated users, you also need to have a user dashboard:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Login&lt;/li&gt;
&lt;li&gt;Sidebar&lt;/li&gt;
&lt;li&gt;Table&lt;/li&gt;
&lt;li&gt;Form with label, input, textarea, radio button, checkbox, etc.&lt;/li&gt;
&lt;li&gt;Dialog (modal)&lt;/li&gt;
&lt;li&gt;Message state&lt;/li&gt;
&lt;li&gt;Settings page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yBAZxidjW34"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Like the landing page, every component is prebuilt. So, you don't need to implement and design yourself. It'll save you several days and weeks of development. Built in a modular way, the components are easy to customize and you can easily extend them for your use-cases.&lt;/p&gt;

&lt;p&gt;No need to be a designer or hire one to build your SaaS product. Focus on the things that matter to your customers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#authentication"&gt;
  &lt;/a&gt;
  Authentication
&lt;/h2&gt;

&lt;p&gt;All SaaS products need authentication for their users. A way for the users to have access to their user dashboard and use the products.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pqf7D1oH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-cognito-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pqf7D1oH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-cognito-logo.png" alt="AWS Cognito authentication login" width="500" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com" rel="noopener noreferrer"&gt;React SaaS Template&lt;/a&gt; provides an authentication method out of the box with AWS Cognito, a secure and scalable identity provider. So, you don't need to implement or configure an authentication from scratch. It accepts several social sign-in methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook&lt;/li&gt;
&lt;li&gt;Google&lt;/li&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Amazon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also secures your cloud resources by denying unauthorized users and keeps your cost down.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#100-serverless"&gt;
  &lt;/a&gt;
  100% Serverless
&lt;/h2&gt;

&lt;p&gt;With recent development in Serverless, it's now totally possible to rely on Serverless to build a SaaS business. The pay-as-you-go pricing is perfect when you are launching your product.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLUpU0Kf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/serverless-framework-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLUpU0Kf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/serverless-framework-logo.png" alt="AWS Lambda Serverless framework" width="880" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When your products get some traction, Serverless removes the burden to handle the scaling. It automatically scales based on your traffic.&lt;/p&gt;

&lt;p&gt;And, the most important thing about Serverless, it reduces the infrastructure maintenance of your SaaS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No need to configure your server&lt;/li&gt;
&lt;li&gt;No need to update your server&lt;/li&gt;
&lt;li&gt;Make the security easier&lt;/li&gt;
&lt;li&gt;No need to scale your server&lt;/li&gt;
&lt;li&gt;Make your deployment faster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You don't need to worry about server management and it frees your operation time. The perfect solution to help you focus on your products and make them grow faster.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-database"&gt;
  &lt;/a&gt;
  Serverless database
&lt;/h2&gt;

&lt;p&gt;After making the REST API serverless, the other step is to make the database serverless. Currently, the most viable solution is DynamoDB, a fully serverless NoSQL database:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highly scalable&lt;/li&gt;
&lt;li&gt;Scale to zero&lt;/li&gt;
&lt;li&gt;Pay-as-you-go pricing&lt;/li&gt;
&lt;li&gt;No cold start&lt;/li&gt;
&lt;li&gt;Managed service&lt;/li&gt;
&lt;li&gt;Production-ready&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o3RDv2HD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-dynamodb-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o3RDv2HD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/aws-dynamodb-logo.png" alt="AWS DynamoDB serverless database" width="500" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For someone who has already worked with SQL, data migration is a nightmare to handle. On the opposite, Database schema in NoSQL is extremely flexible. It makes the deployment of the new version extremely easy without the need for data migration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stripe-integration"&gt;
  &lt;/a&gt;
  Stripe integration
&lt;/h2&gt;

&lt;p&gt;It's great to have a lot of users but it's even better to have paying customers for your SaaS. Accepting payment is hard and it's even harder for subscription payment used in SaaS.&lt;/p&gt;

&lt;p&gt;Setting up a recurring payment where you need to debit your customer every billing period (daily, weekly, monthly, yearly, or custom). You also need to generate and send an invoice for subscriptions. That is only the happy path, you also need to handle all the edge cases.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Di7UTlQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Di7UTlQa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-logo.png" alt="Stripe logo" width="880" height="419"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com" rel="noopener noreferrer"&gt;React SaaS&lt;/a&gt; has an integration with Stripe. All the integration has made for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stripe checkout page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iVN9VDJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-hosted-checkout.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iVN9VDJm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-hosted-checkout.png" alt="Stripe hosted checkout page" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stripe customer portal where the customer can manage his subscriptions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--97tqtWyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-customer-portal.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--97tqtWyf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-customer-portal.png" alt="Stripe customer portal" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Invoice history with downloadable PDF&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rJqz3hq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-downloadble-invoice-pdf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rJqz3hq5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/stripe-downloadble-invoice-pdf.png" alt="Stripe downloadable invoice PDF" width="531" height="699"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Receive event notification with Stripe webhook&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#clean-code-and-architecture"&gt;
  &lt;/a&gt;
  Clean code and architecture
&lt;/h2&gt;

&lt;p&gt;A boilerplate code shouldn't lose your time and energy. You don't want to spend your time restructuring and fixing the project. It's extremely important for starter code to provide high-quality code. React SaaS Boilerplate was built by following industry standards and best practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Consistent coding standards&lt;/li&gt;
&lt;li&gt;Bulletproof architecture&lt;/li&gt;
&lt;li&gt;Readable code&lt;/li&gt;
&lt;li&gt;Clean source code&lt;/li&gt;
&lt;li&gt;Highly modular&lt;/li&gt;
&lt;li&gt;Reusable code&lt;/li&gt;
&lt;li&gt;Well-architecture&lt;/li&gt;
&lt;li&gt;Layered architecture&lt;/li&gt;
&lt;li&gt;Scalable folder structure&lt;/li&gt;
&lt;li&gt;Easy to maintain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some code samples from Nextless JS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prebuilt landing page components in React (code sample):&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VR_6nEO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/frontend-landing-page-component.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VR_6nEO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/frontend-landing-page-component.png" alt="Prebuilt landing page components" width="731" height="685"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An example of React landing page component, a testimonial component:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TsoOhkfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-page-index.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TsoOhkfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-page-index.png" alt="Testimonial components" width="805" height="722"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frontend folder and architecture:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gAXSeqD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/frontend-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gAXSeqD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/frontend-architecture.png" alt="Next JS frontend architecture" width="269" height="953"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backend Express JS REST API router:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pf-TL8jJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/backend-router.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pf-TL8jJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/backend-router.png" alt="REST Api backend router" width="832" height="568"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backend Express JS controller code sample:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gb0gp_wE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/backend-crontroller.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gb0gp_wE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/backend-crontroller.png" alt="Backend controller" width="833" height="876"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backend folder and architecture:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1GhJd9eD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/backend-architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1GhJd9eD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/backend-architecture.png" alt="Backend architecture" width="326" height="922"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#form-management"&gt;
  &lt;/a&gt;
  Form management
&lt;/h2&gt;

&lt;p&gt;Almost all applications need some user input. With some basic HTML, you can easily create a form like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WILdNfii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/form-add-todo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WILdNfii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/form-add-todo.png" alt="Form add todo" width="880" height="216"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the backend side, you need to implement a validation method to verify the user input. The validation method is configured with definition and schema. Then, when an error occurs, you need to display it in the frontend:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zMgGVbq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/form-error-handling.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zMgGVbq3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/form-error-handling.png" alt="Form error handling" width="880" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good news! With React SaaS, everything has been set up for you. You only need to customize it for your needs. Saving you time:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;easy to use forms&lt;/li&gt;
&lt;li&gt;accessible forms&lt;/li&gt;
&lt;li&gt;no need to design forms from scratch&lt;/li&gt;
&lt;li&gt;form submission&lt;/li&gt;
&lt;li&gt;implement the validation method&lt;/li&gt;
&lt;li&gt;connect the form with the backend, the two-ways communication&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bestinclass-developer-experience"&gt;
  &lt;/a&gt;
  Best-in-class Developer Experience
&lt;/h2&gt;

&lt;p&gt;Built by developers for developers with experience in mind. &lt;a href="https://nextlessjs.com" rel="noopener noreferrer"&gt;React SaaS Starter&lt;/a&gt; includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type checking, TypeScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JV9B02r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/typescript-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JV9B02r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/typescript-logo.png" alt="TypeScript programming language logo" width="300" height="74"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linter, ESLint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HuMQAyxe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/eslint-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HuMQAyxe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/eslint-logo.png" alt="ESLint JS linter logo" width="480" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Code formatter, Prettier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xArC6TOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/prettier-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xArC6TOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/prettier-logo.png" alt="Code formatter Prettier logo" width="880" height="367"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git Hooks, Husky&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everything has been perfectly configured for you to write high-quality code. You don't need to lose any seconds to make JS tooling work together. So, you can move fast on your SaaS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nzah4kh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/vscode-logo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nzah4kh1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/vscode-logo.png" alt="VSCode logo" width="512" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The React SaaS goes beyond by providing configuration for the most used code editor VSCode: debug configuration, Settings, Task and suggested extension.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infrastructure-as-code"&gt;
  &lt;/a&gt;
  Infrastructure as Code
&lt;/h2&gt;

&lt;p&gt;Infrastructure as Code allows developers to set up a cloud infrastructure without any manual configuration. As you know, the manual configuration has a lot of drawbacks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Error-prone&lt;/li&gt;
&lt;li&gt;Not easy to replicate for each environment&lt;/li&gt;
&lt;li&gt;Have inconsistent between environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;React SaaS Template helps you deploy all your cloud infrastructure in one command. No need to become a DevOps engineer or hire one to build your SaaS.&lt;/p&gt;

&lt;p&gt;Create and deploy DynamoDB on your own AWS account:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7eGAFWkk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/next-js-infrastructure-as-code.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7eGAFWkk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/next-js-infrastructure-as-code.png" alt="Next JS Infrastructure as Code" width="741" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-example-and-documentation"&gt;
  &lt;/a&gt;
  Code example and documentation
&lt;/h2&gt;

&lt;p&gt;It's always good to have code examples to start a project. React SaaS Boilerplate comes up with a Todo SaaS product as a code example. A Todo app where the user can create, read, update and delete a Todo (CRUD operation).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cS7eEKcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-todo-crud.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cS7eEKcu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-todo-crud.png" alt="Nextless Todo app CRUD code example" width="720" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Documentation is provided to run the boilerplate in 10 minutes on your local computer. In 10 minutes, you'll be able to set up and run the full-stack application. After that, you are ready to go and start on what makes your SaaS unique!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;If you want to make your own SaaS and to get all these features out of the box for a fast time to market, please check out &lt;a href="https://nextlessjs.com"&gt;React SaaS Boilerplate&lt;/a&gt; and focus on the core development of your SaaS.&lt;/p&gt;

&lt;p&gt;The perfect starter kit to launch your SaaS faster and better. Focus on your business, products and customers instead of losing your time to implement basic functionalities like authentication, Stripe subscription, prebuilt landing page, prebuilt dashboard page, form and error handling, CRUD operation, layered architecture, deployment, server maintenance, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextlessjs.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1qKLlCI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/nextless-react-saas-boilerplate.png" alt="Next JS SaaS Boilerplate Starter" width="720" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>nextjs</category>
    </item>
  </channel>
</rss>
