<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is IMAP</title>
      <author>cloudytech147</author>
      <pubDate>Tue, 16 Nov 2021 13:54:13 +0000</pubDate>
      <link>https://dev.to/cloudytech147/what-is-imap-aaf</link>
      <guid>https://dev.to/cloudytech147/what-is-imap-aaf</guid>
      <description>&lt;p&gt;Internet Message Access Protocol (&lt;a href="https://webhostingprime.com/what-is-imap-definitive-guide/"&gt;IMAP&lt;/a&gt;) is a notable convention that is normalized to get messages from a neighbourhood customer on a distant waiter. IMAP lives in the application layer of the OSI (Open System Interconnection) model on which the web is based.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Poa9Rvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy1n3qllv93v22tuqi12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Poa9Rvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sy1n3qllv93v22tuqi12.png" alt="IMAP" width="679" height="284"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;IMAP utilizes the profound situated vehicle layer to set up have-to-have correspondence for giving applications and administrations. This requires the consideration of the remote email server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#history-and-evolution-of-imap"&gt;
  &lt;/a&gt;
  History and Evolution of IMAP
&lt;/h3&gt;

&lt;p&gt;It was Mark Crispin who planned the first form of IMAP in 1986. Since the hour of its origin, IMAP was portrayed as a somewhat controlled letter drop convention. During that time the Post Office Protocol (POP) had effectively gathered colossal acknowledgement.&lt;/p&gt;

&lt;p&gt;Essentially all significant email specialist organizations for the most part use two conventions, for example, IMAP and POP to their fullest possibilities. In IMAP, the messages remain put away inside the server until and except if they are erased by the customer. Likewise, IMAP approves customers to get entrance and control of their letter drops.&lt;/p&gt;

&lt;p&gt;A solicitation for an email from a specific client is coordinated through the concentrated server. The server has an extra room reserved for email records. A client can profit from IMAP by acquiring the capacity to see email headers, check the pertinence of messages, search for catchphrases in email bodies, erase messages, make and control various envelopes and letterboxes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imap-versions"&gt;
  &lt;/a&gt;
  IMAP Versions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;IMAP2&lt;/li&gt;
&lt;li&gt;IMAP3&lt;/li&gt;
&lt;li&gt;IMAPbis&lt;/li&gt;
&lt;li&gt;IMAP4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Features of IMAP&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A client can get to and recover messages from a far off server. Likewise, one can hold the messages on the server.&lt;/li&gt;
&lt;li&gt;There are message hails that you can set to keep a watch on the messages you have as of now seen or read.&lt;/li&gt;
&lt;li&gt;It is workable for you to deal with a few letter drops at the same time. This implies messages can be moved between letterboxes. * You can figure them out into various classes or organizers so that individuals joined to various tasks think that it is not difficult to get to the envelopes applicable to them.&lt;/li&gt;
&lt;li&gt;You can discover the significance of the data an email conveys prior to downloading it. Likewise, you can choose whether to download the email from the server or not. Messages that give off an impression of being spam or unimportant can be dismissed or erased right away.&lt;/li&gt;
&lt;li&gt;You can download a specific piece of the message and it very well may be the body of the email. This is especially helpful when huge size media documents are installed in a message having a short message.&lt;/li&gt;
&lt;li&gt;You can arrange the messages on the server according to your necessities. For example, you can keep the email drafts in a single spot or a particular envelope on the server.
There is a quest choice to search for explicit email substance.&lt;/li&gt;
&lt;li&gt;You can make envelopes in the post box as a way to place messages in a progressive request.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-imap"&gt;
  &lt;/a&gt;
  Advantages of IMAP
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can get messages remotely put away in the server from a few unique areas.&lt;/li&gt;
&lt;li&gt;The messages are upheld of course.&lt;/li&gt;
&lt;li&gt;It offers added security as the messages exist just inside the IMAP server.&lt;/li&gt;
&lt;li&gt;It keeps a great deal of extra room for possible later use by recovering a message exactly when you want to go through it.
You can get an overall audit or synopsis of the messages from the downloaded headers.&lt;/li&gt;
&lt;li&gt;In view of its quick network, it doesn’t trust that the messages will seem consistent. Advanced IMAP puts the rundown of every one of your messages in plain view immediately.&lt;/li&gt;
&lt;li&gt;You may not require a functioning web association for getting to the messages.&lt;/li&gt;
&lt;li&gt;It provides you with the choice of locally putting away messages.&lt;/li&gt;
&lt;li&gt;Letterboxes working through IMAP can be effectively moved to start with one gadget then onto the next on account of its synchronization with an incorporated server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With the whole world becoming more and more mobile-dependent, the popularity of IMAP, too, is increasing rapidly. The widespread proliferation of laptops, smartphones, tablets, and other mobile devices is multiplying the scope and demand for IMAP by leaps and bounds. Thus, in the coming years, IMAP will certainly remain the most preferred emailing protocol.&lt;/p&gt;

</description>
      <category>imap</category>
      <category>tutorial</category>
      <category>guide</category>
    </item>
    <item>
      <title>C++ from the beginning, working with files</title>
      <author>Chris Noring</author>
      <pubDate>Tue, 16 Nov 2021 13:46:59 +0000</pubDate>
      <link>https://dev.to/softchris/c-from-the-beginning-working-with-files-2kpd</link>
      <guid>https://dev.to/softchris/c-from-the-beginning-working-with-files-2kpd</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TLDR; In this article we will at how you can work with the file system which will involves reading and writing to files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Series:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0the-full-series"&gt;
  &lt;/a&gt;
   The full series
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/c-from-the-beginning-2o2l"&gt;Your first program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/c-from-the-beginning-variables-22nm"&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/azure/c-from-the-beginning-input-and-output-5ad0"&gt;Working with input and output&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/c-from-the-beginning-functions-5cnl"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/azure/c-from-the-beginning-control-flow-21jg"&gt;Control flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Working with files, &lt;strong&gt;you are here&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Pointers&lt;/li&gt;
&lt;li&gt;Error management&lt;/li&gt;
&lt;li&gt;Structs and Classes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0resources"&gt;
  &lt;/a&gt;
   Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/cpp/standard-library/fstream?view=msvc-170"&gt;fstream docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#files"&gt;
  &lt;/a&gt;
  Files
&lt;/h2&gt;

&lt;p&gt;Your operating system is full of files, both files that you create and other files that belong to the operating system that you shouldn't touch. Many applications out there rely on files and the ability to create files for logging purposes for example or various reports. Additionally, being able to read from files is an important thing to be able to do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fstream-library"&gt;
  &lt;/a&gt;
  Fstream library
&lt;/h2&gt;

&lt;p&gt;In C++ you have a standard library called &lt;code&gt;fstream&lt;/code&gt; that allows you to work with the file system. It exposes three important classes that you should know about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ofstream&lt;/code&gt;. With an instance of this class you can create and write to files.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ifstream&lt;/code&gt;. This library enables you to read to files.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;fstream&lt;/code&gt;. Sometimes you need the capability to both read and write, for that, you have &lt;code&gt;fstream&lt;/code&gt;, capable of doing both.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0reading"&gt;
  &lt;/a&gt;
   Reading
&lt;/h2&gt;

&lt;p&gt;Let's start with reading from a file. You use &lt;code&gt;ifstream&lt;/code&gt; and create an object instance for it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;ifstream&lt;/span&gt; &lt;span class="nf"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file.txt"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see from the code, also specify a string that represents the full path to the file, including its file name.&lt;/p&gt;

&lt;p&gt;At this point, you have reference to the file and is ready to read from it. So how do you read from it?&lt;/p&gt;

&lt;p&gt;You use &lt;code&gt;getline()&lt;/code&gt; in combination with a &lt;code&gt;while&lt;/code&gt; loop to read each row from the file, line by line, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;getline()&lt;/code&gt; will return &lt;code&gt;false&lt;/code&gt; when there's no more to be read in the stream. Note how &lt;code&gt;close()&lt;/code&gt; is called as the last thing we do. It's important to close a stream or you might actually lock access for other code to access the file when you are done with it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-if-we-can-read"&gt;
  &lt;/a&gt;
  Check if we can read
&lt;/h3&gt;

&lt;p&gt;So far, we've been very optimistic, we assume the file exist and we have the rights to read from it as well. However, you might be in a situation where the file doesn't exist, or you don't have rights to read from it. For that reason, you need to check whether the file is ready to be read from. Here's some code that checks that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;can_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;ifstream&lt;/span&gt; &lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;exists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// is_open&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;exists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What's going on is that we call &lt;code&gt;readstream.open()&lt;/code&gt;, if we can read from this stream, then we are good to go. There are two ways to check its status, either as pictured above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;opn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"path/to/file/file.txt"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// all is well&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or you can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;readstream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_open&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;which returns a boolean, &lt;code&gt;true&lt;/code&gt; if you can read from it, and &lt;code&gt;false&lt;/code&gt;, if you can't.&lt;/p&gt;

&lt;p&gt;Worth noting is that it's hard to differ between cases such as that a file doesn't exist, and you don't have permission to read from it. But checking whether the stream is "ready", like above, is considered a good practice. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reading-a-few-characters"&gt;
  &lt;/a&gt;
  Reading a few characters
&lt;/h3&gt;

&lt;p&gt;So far, you've seen how you read file content, line by line, you can also read a few characters or bytes at a time and more. Dealing with files is a really big topic, but let's show how you read a few characters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;ifstream&lt;/span&gt; &lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"file.txt"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code will instruct the &lt;code&gt;ifstream&lt;/code&gt;, instance to read 5 characters from the stream and place it in the &lt;code&gt;array&lt;/code&gt; variable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%C2%A0writing-to-a-file"&gt;
  &lt;/a&gt;
   Writing to a file
&lt;/h2&gt;

&lt;p&gt;To write to a file, we need an instance of &lt;code&gt;ostream&lt;/code&gt; and the name of the file, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;ostream&lt;/span&gt; &lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"new_file.txt"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ostream&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"line1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ostream&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"line2"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ostream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will create the file &lt;em&gt;new_file.txt&lt;/em&gt; and two rows of text and then close the stream, which is important when you write to it as well. If this file already exists, its content will be replaced, so a heads up. What if you just want to add content to an existing file? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#append"&gt;
  &lt;/a&gt;
  Append
&lt;/h3&gt;

&lt;p&gt;Sometimes you just want to add content, and to do that, you need a slightly altered way of calling the code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="n"&gt;ostream&lt;/span&gt; &lt;span class="n"&gt;writestream&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;writestream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"new_file.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ios_base&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;writestream&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"add this last"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;writestream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how we use the method &lt;code&gt;open()&lt;/code&gt;. Said method allows us to specify filename, as well as how to treat the file. The default with a &lt;code&gt;writestream&lt;/code&gt; is to attempt to create the file and replace what's there if it already exists. What we are doing is providing &lt;code&gt;ios_base::app&lt;/code&gt;, which is an instruction that says &lt;em&gt;append&lt;/em&gt;, i.e. add the content to the end of the file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this article, we've learned how to work with files, reading and writing to them. Hopefully, you know have enough knowledge to learn to use files as part of your apps.&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Delete a File or Folder that Can’t Be Deleted, Is Write-Protected or Can’t Be Accessed?</title>
      <author>Michael Mirosnichenko</author>
      <pubDate>Tue, 16 Nov 2021 13:41:34 +0000</pubDate>
      <link>https://dev.to/hetmansoftware/how-to-delete-a-file-or-folder-that-cant-be-deleted-is-write-protected-or-cant-be-accessed-18ck</link>
      <guid>https://dev.to/hetmansoftware/how-to-delete-a-file-or-folder-that-cant-be-deleted-is-write-protected-or-cant-be-accessed-18ck</guid>
      <description>&lt;p&gt;Do you have a problem when you can’t delete a folder or several files from your PC or laptop? Does Windows show you an “access denied” error? It can happen due to various causes when you delete, edit or overwrite files. Read this article to find out how to delete a file or folder that can’t be deleted because of write protection, denied access, virus infection or opening a file in an unknown program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-disk-is-writeprotected"&gt;
  &lt;/a&gt;
  The disk is write-protected
&lt;/h2&gt;

&lt;p&gt;If you try to delete a file or folder from a pen drive, memory card or a hard disk and see the message saying The disk is write-protected, it means some sort of protection against writing data is set up for such disk.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---sCRWTEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nf4yzxywtjf50lf3qen.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---sCRWTEg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nf4yzxywtjf50lf3qen.png" alt="Image description" width="456" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#could-not-find-this-item"&gt;
  &lt;/a&gt;
  Could not find this item
&lt;/h2&gt;

&lt;p&gt;If you get this kind of message when deleting a file or folder: Could not find this item. Verify the item’s location and try again, there might be several causes behind this problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A system error (a glitch concerning rights to the file or folder which you are trying to delete; a problem with the name of such file or folder: it might be either too long or contain certain symbols which cause a conflict when the operating system tries to remove the item etc).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The computer could be infected by a virus.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r42XsPXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g109xwfb7e84bbyqlgdp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r42XsPXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g109xwfb7e84bbyqlgdp.png" alt="Image description" width="453" height="215"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In such a situation, try deleting the problem-plagued file or folder with the following utilities:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Total Commander;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ltJ4RVoR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hzxuqi8s3wjxvw9wgym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ltJ4RVoR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hzxuqi8s3wjxvw9wgym.png" alt="Image description" width="788" height="535"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Far;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tiHr4MMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaqbf9anbd8f8y7n1o1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tiHr4MMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaqbf9anbd8f8y7n1o1c.png" alt="Image description" width="610" height="319"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If using the programs that we listed above couldn’t help you, boot the computer in the safe mode and try removing the file or folder in such a way. If the cause of file blocking is a virus, in most cases you can delete the files without any additional actions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zkX5AhpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwiueqw89vzu2pv2gywk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zkX5AhpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwiueqw89vzu2pv2gywk.png" alt="Image description" width="788" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-have-no-rights-to-modify-files"&gt;
  &lt;/a&gt;
  You have no rights to modify files
&lt;/h2&gt;

&lt;p&gt;If Windows says you don’t have the necessary rights to modify files, then you need to use the administrator’s account to be able to delete or edit the file. Sign in with the administrator’s rights. There is no other way to do it…&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qggZHiYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siewej2b5f6h8y80nw6a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qggZHiYb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/siewej2b5f6h8y80nw6a.png" alt="Image description" width="455" height="241"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-file-or-folder-cannot-be-deleted-because-it-is-opened-in-another-program"&gt;
  &lt;/a&gt;
  A file or folder cannot be deleted because it is opened in another program
&lt;/h2&gt;

&lt;p&gt;If Windows displays a message that a file or folder cannot be deleted because it is opened in another program, remember the name of such program and do the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Et14uFJu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zk86944ga4ujvv1s2sfb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Et14uFJu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zk86944ga4ujvv1s2sfb.png" alt="Image description" width="454" height="269"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Press the key shortcut Windows + r.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the Run window, type in “resmon.exe” and press Enter.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yioujlXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hessfvlcnjedmapves2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yioujlXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hessfvlcnjedmapves2.png" alt="Image description" width="405" height="213"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the tab “Overview” find the program that prevents you from deleting the file or folder, right-click on it and select End process. Repeat this step, if the name of the program is shown several times in the tab “Overview.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o9MYiAnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b1nm5m1iag3we5dh9o0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o9MYiAnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1b1nm5m1iag3we5dh9o0.png" alt="Image description" width="739" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Try deleting the files again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you couldn’t delete the files or folders in any of the ways, describe your situation and ask questions in comments.&lt;/p&gt;

&lt;p&gt;Read the &lt;a href="https://hetmanrecovery.com/recovery_news/how-to-delete-a-file-or-folder-that-cannot-be-deleted-is-write-protected-or-cannot-be-accessed.htm"&gt;full article&lt;/a&gt; with all additional video tutorials. Also visit our &lt;a href="https://www.youtube.com/channel/UCu-D9QnPsAPn7AtxL4HXLUg"&gt;Youtube channel&lt;/a&gt;, there are over 400 video tutorials.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>testing</category>
      <category>security</category>
    </item>
    <item>
      <title>How to execute a recurrent task in a Flask app?</title>
      <author>Maxime Guilbert</author>
      <pubDate>Tue, 16 Nov 2021 13:39:48 +0000</pubDate>
      <link>https://dev.to/adaendra/how-to-execute-a-recurrent-task-in-a-flask-app-1bk7</link>
      <guid>https://dev.to/adaendra/how-to-execute-a-recurrent-task-in-a-flask-app-1bk7</guid>
      <description>&lt;p&gt;In some projects, we need to do dome recurrent tasks while running a Flask API.&lt;/p&gt;

&lt;p&gt;So do be able to do it in a Flask project, we need to use &lt;strong&gt;APScheduler&lt;/strong&gt;.&lt;br&gt;
With this tool, we are able to create background schedulers which will execute our recurrent task.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  Install
&lt;/h2&gt;

&lt;p&gt;Using &lt;strong&gt;pip&lt;/strong&gt;, you can install the library as follow.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;pip install APScheduler&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;To use it, check the following example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;atexit&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;apscheduler.schedulers.background&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BackgroundScheduler&lt;/span&gt;

&lt;span class="c1"&gt;# Declaration of the task as a function.
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_date_time&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%A, %d. %B %Y %I:%M:%S %p"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="c1"&gt;# Create the background scheduler
&lt;/span&gt;&lt;span class="n"&gt;scheduler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BackgroundScheduler&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# Create the job
&lt;/span&gt;&lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;print_date_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trigger&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"interval"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Start the scheduler
&lt;/span&gt;&lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# /!\ IMPORTANT /!\ : Shut down the scheduler when exiting the app
&lt;/span&gt;&lt;span class="n"&gt;atexit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;APScheduler library : &lt;a href="https://pypi.org/project/APScheduler/"&gt;https://pypi.org/project/APScheduler/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope it will help you! 🍺&lt;/p&gt;

</description>
      <category>python</category>
      <category>todayilearned</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Implement File Upload in Angular?</title>
      <author>Tarun Gurang</author>
      <pubDate>Tue, 16 Nov 2021 13:19:24 +0000</pubDate>
      <link>https://dev.to/tarungurang/how-to-implement-file-upload-in-angular-43gc</link>
      <guid>https://dev.to/tarungurang/how-to-implement-file-upload-in-angular-43gc</guid>
      <description>&lt;p&gt;Being able to upload the files and use them afterward is the required characteristic of many apps. The following are commonly used elements to perform file upload with Angular.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#formdata"&gt;
  &lt;/a&gt;
  FormData
&lt;/h2&gt;

&lt;p&gt;FormData is an object that you can use for storing key-value pairs. It allows you to construct an object which aligns with an HTML form. This feature allows you to send the data, such as file upload using the XMLHttpRequest interface or Http client libraries.&lt;/p&gt;

&lt;p&gt;You can use the following command to create the FormData:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const formdata = new FormData();

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#httpclientmodule"&gt;
  &lt;/a&gt;
  HttpClientModule
&lt;/h3&gt;

&lt;p&gt;HttpClientModule contains an API that you can use to send and fetch the data in your application from the Http servers. You can use the following command to import this module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Import {HttpClientModule} from ‘@angular/common/http’;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reactive-forms"&gt;
  &lt;/a&gt;
  Reactive Forms
&lt;/h3&gt;

&lt;p&gt;Reactive forms allow you to use a model-driven approach to manage form inputs. You can use multiple controls in a form group, validate the form values with the help of these forms. You can use the following to import this module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { ReactiveFormsModule } from '@angular/forms';
@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    ReactiveFormsModule
  ],
  providers: [],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#implement-file-upload"&gt;
  &lt;/a&gt;
  Implement File Upload
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Install Angular CLI and create a new project&lt;/p&gt;

&lt;p&gt;You can install the angular CLI using this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g @angular/cli

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can create a new angular project using the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng new FileUploadDemo

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use this command to run the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ng serve --open

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.ifourtechnolab.com/blog/implementation-of-ngx-infinite-scroller-using-angular-application"&gt;Implementation Of Ngx Infinite Scroller Using Angular Application&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Add the HttpClientModule&lt;/p&gt;

&lt;p&gt;You can import this module in the app.module.ts file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HttpClientModule } from '@angular/common/http';
@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule
  ],
  providers: [],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Create angular components&lt;/p&gt;

&lt;p&gt;You can create components using the following command.&lt;/p&gt;

&lt;p&gt;After running this command, angular CLI generates four files of this component and added in the declaration array in the app.module.ts file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Adding angular routing&lt;/p&gt;

&lt;p&gt;After creating a component, you can add the routing in the app-routing.module.ts file. First, you need to import this component and then add the routes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { AboutComponent } from './about/about.component';
import { HomeComponent } from './home/home.component';
const routes: Routes = [
  { path: '', redirectTo: 'home', pathMatch: 'full' },  
  { path: 'home', component: HomeComponent },  
  { path: 'about', component: AboutComponent },  
];
@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Setting up angular material&lt;/p&gt;

&lt;p&gt;You can use the following command to add angular material.&lt;/p&gt;

&lt;p&gt;In the app.module.ts file, you can add the module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { HttpClientModule } from '@angular/common/http';
import { HomeComponent } from './home/home.component';
import { AboutComponent } from './about/about.component';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatToolbarModule  } from '@angular/material/toolbar';
import { MatIconModule } from '@angular/material/icon';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { MatProgressBarModule } from '@angular/material/progress-bar';
@NgModule({
  declarations: [
    AppComponent,
    HomeComponent,
    AboutComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    BrowserAnimationsModule,
    MatToolbarModule,
    MatCardModule,  
    MatButtonModule,  
    MatProgressBarModule,
    MatIconModule
  ],
  providers: [],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; Create file upload service&lt;/p&gt;

&lt;p&gt;You can use the following command to generate a service.&lt;/p&gt;

&lt;p&gt;In the UploadService.ts file, write the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Injectable } from '@angular/core';
import { HttpClient, HttpEvent, HttpErrorResponse, HttpEventType } from  '@angular/common/http';  
import { map } from  'rxjs/operators';
@Injectable({
  providedIn: 'root'
})
export class UploadService {
  SERVER_URL: string = "https://file.io/";  
  constructor( private httpClient: HttpClient ) { }
  public upload(formData) {
    return this.httpClient.post&amp;lt;any&amp;gt;(this.SERVER_URL, formData, {  
        reportProgress: true,  
        observe: 'events'  
      });  
  }
}
&amp;lt;/any&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Want to Hire Trusted &lt;a href="https://www.ifourtechnolab.com/angular-js-development-company"&gt;AngularJS Development Company&lt;/a&gt; - Enquire Today.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7:&lt;/strong&gt; After creating the service, you need to define the upload method in the home.component.ts file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component, OnInit, ViewChild, ElementRef  } from '@angular/core';
import { HttpEventType, HttpErrorResponse } from '@angular/common/http';
import { of } from 'rxjs';  
import { catchError, map } from 'rxjs/operators';  
import { UploadService } from  '../upload.service';
@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.scss']
})
export class HomeComponent implements OnInit {
  @ViewChild("fileUpload", {static: false}) fileUpload: ElementRef;files  = [];  
    constructor( private uploadService: UploadService ) { }
  ngOnInit(): void {
  }
  uploadFile(file) {  
    const formData = new FormData();  
    formData.append('file', file.data);  
    file.inProgress = true;  
    this.uploadService.upload(formData).pipe(  
      map(event =&amp;gt; {  
        switch (event.type) {  
          case HttpEventType.UploadProgress:  
            file.progress = Math.round(event.loaded * 100 / event.total);  
            break;  
          case HttpEventType.Response:  
            return event;  
        }  
      }),  
      catchError((error: HttpErrorResponse) =&amp;gt; {  
        file.inProgress = false;  
        return of(`${file.data.name} upload failed.`);  
      })).subscribe((event: any) =&amp;gt; {  
        if (typeof (event) === 'object') {  
          console.log(event.body);  
        }  
      });  
  }
  private uploadFiles() {  
    this.fileUpload.nativeElement.value = '';  
    this.files.forEach(file =&amp;gt; {  
      this.uploadFile(file);  
    });  
}
  onClick() {  
    const fileUpload = this.fileUpload.nativeElement;fileUpload.onchange = () =&amp;gt; {  
    for ( let index = 0; index &amp;lt; fileUpload.files.length; index++)  
    {  
     const file = fileUpload.files[index];  
     this.files.push({ data: file, inProgress: false, progress: 0});  
    }  
      this.uploadFiles();  
    };  
    fileUpload.click();  
  }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, you need to create an HTML template. Add the following content in the home.component.html file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;
&amp;lt;div&amp;gt;
    &amp;lt;mat-card&amp;gt;  
        &amp;lt;mat-card-content&amp;gt;  
            &amp;lt;ul&amp;gt;  
                &amp;lt;li *ngFor="let file of files"&amp;gt;  
                    &amp;lt;mat-progress-bar [value]="file.progress"&amp;gt;&amp;lt;/mat-progress-bar&amp;gt;  
                    &amp;lt;span id="file-label"&amp;gt;  

                    &amp;lt;/span&amp;gt;  
                &amp;lt;/li&amp;gt;  
            &amp;lt;/ul&amp;gt;  
        &amp;lt;/mat-card-content&amp;gt;  
        &amp;lt;mat-card-actions&amp;gt;  
            &amp;lt;button mat-button color="warn" (click)="onClick()"&amp;gt;  
                &amp;lt;mat-icon&amp;gt;file_upload&amp;lt;/mat-icon&amp;gt;  
                Upload  
            &amp;lt;/button&amp;gt;  
        &amp;lt;/mat-card-actions&amp;gt;  
    &amp;lt;/mat-card&amp;gt;
&amp;lt;input type="file" #fileUpload id="fileUpload" name="fileUpload" multiple="multiple" accept="image/*" style="display:none;" /&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, add the toolbar in the app.component.html file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;span id="file-label"&amp;gt;
&amp;lt;mat-toolbar color="primary"&amp;gt;&amp;lt;mat-progress-bar&amp;gt;  
  &amp;lt;h1&amp;gt;  
    ngImageUpload   
  &amp;lt;/h1&amp;gt;  
  &amp;lt;button mat-button="" routerlink=" "&amp;gt;Home  
  &amp;lt;/button&amp;gt;&amp;lt;button mat-button="" routerlink=" about"&amp;gt;&amp;lt;/button&amp;gt;&amp;lt;button mat-button="" routerlink=" "&amp;gt;About
&amp;lt;router-outlet&amp;gt;&amp;lt;/router-outlet&amp;gt;&amp;lt;/button&amp;gt;&amp;lt;/mat-progress-bar&amp;gt;&amp;lt;/mat-toolbar&amp;gt;&amp;lt;/span&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;In this blog, we have seen how to perform file upload in angular. We have started the same by installing angular cli and created an angular application. We installed angular material in the angular application.&lt;/p&gt;

</description>
      <category>angular</category>
      <category>programming</category>
    </item>
    <item>
      <title>What is OTT? How does it work?</title>
      <author>Arya00123</author>
      <pubDate>Tue, 16 Nov 2021 13:12:34 +0000</pubDate>
      <link>https://dev.to/arya00123/what-is-ott-how-does-it-work-2f87</link>
      <guid>https://dev.to/arya00123/what-is-ott-how-does-it-work-2f87</guid>
      <description>&lt;p&gt;OTT technology has a big impact on the evolution of the media industry. As technology evolves and new ones arise, the word "OTT" has come to refer to &lt;strong&gt;&lt;a href="https://www.webnexs.com/vod-platform.php"&gt;streaming media services&lt;/a&gt;&lt;/strong&gt; that send videos and other digital content to any device that can connect to the Internet, including televisions, bypassing cable services, broadcast, and satellite television platforms.&lt;/p&gt;

&lt;p&gt;Let's look at what OTT is, how OTT services work, and why they've grown so popular in recent years in this blog.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-ott-mean"&gt;
  &lt;/a&gt;
  What does OTT mean?
&lt;/h2&gt;

&lt;p&gt;Over-the-top (OTT) is a means of delivering media content over the internet at the request of the customer and customized to their individual requirements. A third-party operator has no control over the delivery. The term "over-the-top" refers to a content provider who improves present internet services with additional features.&lt;/p&gt;

&lt;p&gt;OTT refers to a service or technology that allows users to send others pre-recorded or live-streamed content. This material is accessible via internet-enabled devices such as mobile phones, smartphones, tablets, smart TVs, streaming sticks, and personal computers.&lt;/p&gt;

&lt;p&gt;Most OTT services nowadays provide more than just video streaming and hosting. OTT content is distributed over the internet through an unmanaged network that follows an open ecosystem. Instead, using satellite or cable, the content is delivered through the internet. It may be seen using any mobile data or Wi-Fi connection. This service does not require dedicated broadband access to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-i-use-ott"&gt;
  &lt;/a&gt;
  Why should I use OTT?
&lt;/h2&gt;

&lt;p&gt;Here are just a few  reasons why OTT video is so popular with viewers:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessibility:&lt;/strong&gt; Viewers have grown accustomed to seeing what they want when they want it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Control:&lt;/strong&gt; Viewers are prepared to pay more to have greater control over the shows they watch. As a result, 50% of OTT consumers have multiple subscriptions. They're willing to pay to customize their video viewing experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cost:&lt;/strong&gt; Many viewers feel they are overpaying for cable subscriptions that provide them with less access and control. They may save money while enhancing their experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Original content:&lt;/strong&gt; In recent years, OTT providers like Netflix and Amazon Prime have begun to supply original content that is only available through their platforms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Support with multiple devices:&lt;/strong&gt; For many years, watching cable television needed the use of a television. We can now watch OTT content on a variety of devices. From a game console, smartphone, tablet, or smart TV, each account holder may enjoy the same OTT experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-ott-technology-work"&gt;
  &lt;/a&gt;
  How Does OTT Technology Work?
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#how-about-an-example-of-ott-technology-in-action"&gt;
  &lt;/a&gt;
  How about an example of OTT technology in action:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Broadcasters submit video content to an over-the-top (OTT) video platform.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A content delivery network transmits the data from the video host to external servers (CDN)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the user-facing video gallery, viewers pick the content they want to see.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The video content is pulled from the CDN's server through the internet by the device's video player.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#ott-includes"&gt;
  &lt;/a&gt;
  OTT Includes:
&lt;/h2&gt;

&lt;p&gt;Viewers who access video content through an app or website that delivers streaming video content are referred to as over-the-top (OTT) video viewers. HBO Now, Hulu, Netflix, Amazon Video, YouTube/YouTube Red, and Sling TV are just a few examples of streaming services.&lt;/p&gt;

&lt;p&gt;Users of connected television (CTV) include those who use television sets with built-in internet access (such as Smart TVs) or other devices that have the capability, such as set-top boxes (STBs). Apple TV, Google Chromecast, Amazon FireStick, and Roku are all examples of streaming devices.&lt;/p&gt;

&lt;p&gt;Users of linear OTT video services: Users who pay a monthly fee to receive live TV channel bundles through the internet. Sling TV, DirecTV Now, Hulu with Live TV, YouTube TV, and PlayStation Vue are just a few examples.&lt;/p&gt;

&lt;p&gt;The following are some of the most common OTT user sub-categories:&lt;br&gt;
Video-on-demand (AVOD) with advertising: Users gain free access to the material, which is then monetized by video advertising.&lt;/p&gt;

&lt;p&gt;Users who have paid for a monthly or yearly membership to view streaming video material are referred to as subscription video-on-demand (SVOD).&lt;/p&gt;

&lt;p&gt;Users who have paid for access to select material via a pay-per-view (PPV) purchasing model are referred to as transactional-based video-on-demand (TVOD).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OTT Content Delivery&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;The popularity and wide use of OTT content are due to its accessibility. Only an internet connection and a suitable hardware device are required for OTT streaming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Devices for OTT Content on the Go:&lt;/strong&gt; OTT applications may be downloaded for streaming on the go using your Smartphones and tablets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Personal computer:&lt;/strong&gt; Users with internet connectivity can also view OTT video using desktop applications or web browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart TVs:&lt;/strong&gt; Smart TVs are the newest addition to OTT streaming. Apple TVs, SmartTVs, PlayStations, Chromecasts, Xboxes, and FireSticks are just a few examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-future-of-ott"&gt;
  &lt;/a&gt;
  The Future of OTT
&lt;/h2&gt;

&lt;p&gt;OTT is permanently altering the industry. Viewers are increasingly using streaming applications and over-the-top (OTT) services. Apps such as Netflix, Amazon Prime, Hotstar, and Hulu have achieved enormous popularity, resulting in a loss of viewers for traditional television. As the OTT industry expands, so will the opportunities connected with it. For example, businesses that use OTT video to support their sales and marketing aims.&lt;/p&gt;

&lt;p&gt;OTT platforms, as one of the primary sources of entertainment, have greatly helped in these difficult pandemic times. Almost all streaming services include free trials, which users take advantage of. Customer retention, on the other hand, is the real test for these platforms. This may be accomplished not just through high-quality content, but also through cutting-edge technologies like Netflix. &lt;/p&gt;

&lt;p&gt;OTT providers must examine all phases of the OTT subscriber's life cycle to give consumers a seamless content viewing experience. The discovery and delivery of content is the initial step in that direction. Further, AI and machine learning will assist in personalizing the search experience by analyzing customer behaviour and offering the proper data at the correct time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-ott-more-accessible-to-the-public"&gt;
  &lt;/a&gt;
  Making OTT more accessible to the public
&lt;/h2&gt;

&lt;p&gt;Webnexs and other OTT video platforms make it simple for creators to create branded channels and applications.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Produce high-definition viewing experiences.&lt;/li&gt;
&lt;li&gt;Stream content to their target viewers wherever they are.&lt;/li&gt;
&lt;li&gt;Content can be easily monetized and payments may be processed.&lt;/li&gt;
&lt;li&gt;At any size, manage content and digital rights.&lt;/li&gt;
&lt;li&gt;In-depth analytics can be used to measure success.&lt;/li&gt;
&lt;li&gt;With the technological requirements met, OTT has become a universe of creators.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-ott"&gt;
  &lt;/a&gt;
  Benefits of  OTT:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;You reach many people. Most ads are watched almost entirely by viewers and have a 100% viewability rate. All adverts are displayed in full-screen mode, which means that all pixels are visible. This eliminates below-the-fold advertisements from other media platforms.&lt;/li&gt;
&lt;li&gt;Advertisers connect audiences across reliable networks and popular content with advertising delivered on-demand or during live TV.&lt;/li&gt;
&lt;li&gt;The advantages of programmatic advertising are now available in new mediums thanks to over-the-top (OTT) advertising.&lt;/li&gt;
&lt;li&gt;Customers may learn from and connect with providers as analogue becomes digital.&lt;/li&gt;
&lt;li&gt;Content distribution and pricing can be more efficient with de-bundling, cord-cutting, and becoming OTT.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Overall, OTT is the future of media. It's a wonderful moment to be part of it. It has added a great deal of ease to our lives. I hope this article has provided you with a clear knowledge of OTT. If you want to learn more about OTT, please &lt;strong&gt;&lt;a href="https://www.webnexs.com/vod-platform.php"&gt;get in touch with Webnexs&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
      <category>ott</category>
      <category>ottplatforms</category>
      <category>howottworks</category>
    </item>
    <item>
      <title>How to Create Responsive Clipboard Landing Page with HTML CSS | Frontend Mentor</title>
      <author>Sadee</author>
      <pubDate>Tue, 16 Nov 2021 13:00:44 +0000</pubDate>
      <link>https://dev.to/codewithsadee/how-to-create-responsive-clipboard-landing-page-with-html-css-frontend-mentor-4eoj</link>
      <guid>https://dev.to/codewithsadee/how-to-create-responsive-clipboard-landing-page-with-html-css-frontend-mentor-4eoj</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ATRQj60Q3S0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;How to create Responsive clipboard landing page with html css&lt;br&gt;
Frontend mentor&lt;/p&gt;

&lt;p&gt;In this tutorial, &lt;br&gt;
I will show you how to build a Complete Responsive Landing Page Website using HTML CSS.&lt;/p&gt;




&lt;p&gt;HI 👋&lt;br&gt;
I'm Sadee (webdev)&lt;br&gt;
In this channel I make videos about Complete Responsive website.&lt;br&gt;
You can checkout my channel 👇&lt;/p&gt;

&lt;p&gt;📺 My Channel : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
🔔 Subscribe : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g?sub_confirmation=1"&gt;subscribe now&lt;/a&gt;&lt;br&gt;
🕐 New videos Every Friday &amp;amp; Tuesday&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#recommended-videos"&gt;
  &lt;/a&gt;
  📹 Recommended Videos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/TTrYjLOJeKs"&gt;How to use ionicon&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#essential-links"&gt;
  &lt;/a&gt;
  🔗 Essential links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1Q2hq3vhCyikGVPVnPOpe-MyWb7ulpo6u/view?usp=sharing"&gt;Images &amp;amp; Text&lt;/a&gt;&lt;br&gt;
&lt;a href="https://fonts.google.com/specimen/Bai+Jamjuree?query=bai+jam"&gt;Font - Bai Jamjuree&lt;/a&gt;&lt;br&gt;
&lt;a href="https://ionic.io/ionicons"&gt;Ionicon&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.patreon.com/posts/source-code-page-58766992?utm_medium=clipboard_copy&amp;amp;utm_source=copy_to_clipboard&amp;amp;utm_campaign=postshare"&gt;Source Code&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#timestamp"&gt;
  &lt;/a&gt;
  ⏱️ Timestamp
&lt;/h2&gt;

&lt;p&gt;0:00 - Demo&lt;br&gt;
1:29 - File structure&lt;br&gt;
1:43 - Header section, Css Variables &amp;amp; Reset&lt;br&gt;
11:10 - Main section structure &amp;amp; style&lt;br&gt;
23:05 - Footer section structure &amp;amp; style&lt;br&gt;
28:20 - Media queries&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#others-videos"&gt;
  &lt;/a&gt;
  📹 Others Videos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtube.com/playlist?list=PLasZMtSCguZbYYb7uzDMAC0rg49A8XOsS"&gt;Personal Portfolio Website&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/OpbbPLPqSDc"&gt;Toggle Button with 3d Effect&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/0MDBVR93g7E"&gt;Twitter Sidebar Clone&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/g9VdvKx8fuM"&gt;Awesome Card Design for Website&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/mUBW8i2kht0"&gt;Restaurant Header Design&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#like-follow-amp-subscribe-me"&gt;
  &lt;/a&gt;
  👤 Like - Follow &amp;amp; Subscribe Me
&lt;/h2&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/codewithsadee"&gt;https://twitter.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Github : &lt;a href="https://github.com/codewithsadee"&gt;https://github.com/codewithsadee&lt;/a&gt;&lt;br&gt;
YouTube : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
Buy Me A Coffee : &lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;https://www.buymeacoffee.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Patreon : &lt;a href="https://www.patreon.com/codewithsadee"&gt;https://www.patreon.com/codewithsadee&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhS87mRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kn6vwn4mulhsx6o69is.png" alt="Buy Me A Coffee" width="225" height="51"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Build a Forum App with NextJs and Strapi CMS</title>
      <author>Shada </author>
      <pubDate>Tue, 16 Nov 2021 12:49:48 +0000</pubDate>
      <link>https://dev.to/strapi/how-to-build-a-forum-app-with-nextjs-and-strapi-cms-3an9</link>
      <guid>https://dev.to/strapi/how-to-build-a-forum-app-with-nextjs-and-strapi-cms-3an9</guid>
      <description>&lt;p&gt;While programming, programmers encounter various challenges, which make them solicit help with solving these problems. Forums provide a tech community of enthusiasts who can assist with these problems. We will be building a forum site with &lt;a href="https://github.com/strapi/community-content/issues/nextjs.org"&gt;NextJs&lt;/a&gt; on the Front-end and &lt;a href="https://github.com/strapi/community-content/issues/strapi.io"&gt;Strapi&lt;/a&gt; for content management&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goals"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Goals&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This tutorial will cover building a forum website and providing user authentication and authorization on the site.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisite"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Prerequisite&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;To fully grasp this tutorial, you need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Node.js installed&lt;/li&gt;
&lt;li&gt;Knowledge of NextJs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-strapi"&gt;
  &lt;/a&gt;
  What is Strapi?
&lt;/h2&gt;

&lt;p&gt;Strapi is an open-source headless CMS built on Node.js. Strapi enables developers to be able to create and manage the contents of their applications. Strapi provides users with an admin panel that is used to manage the user's content. Content can be created as in a traditional database; with tables. What's more? Strapi provides functionality to integrate APIs and allows collaborative access to content to enable multiple users to access and manage stored data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strapi-setup"&gt;
  &lt;/a&gt;
  Strapi setup
&lt;/h2&gt;

&lt;p&gt;To set up our Strapi back-end, we will first create a directory for our project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    mkdir forumapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This creates a folder for our project &lt;code&gt;strapi-forum&lt;/code&gt;. Next, we move into this folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    cd forumapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we install Strapi:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm create strapi-app forum-backend &lt;span class="nt"&gt;--quickstart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command above sets up Strapi for our app with all dependencies required. Here &lt;code&gt;forum-backend&lt;/code&gt; is the name of our project folder. The &lt;code&gt;--quickstart&lt;/code&gt; option sets up Strapi with a &lt;code&gt;sqlite&lt;/code&gt; database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_HHIViL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635424583375_installation%2Breolacement.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_HHIViL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635424583375_installation%2Breolacement.jpg" alt="" width="880" height="352"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above, after the dependencies have been installed, it proceeds to set up the admin UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fi2PywEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635424643351_runs%2Bstrapi%2Bdevelop.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fi2PywEZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635424643351_runs%2Bstrapi%2Bdevelop.jpg" alt="" width="880" height="278"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the process is complete, it runs &lt;code&gt;strapi develop&lt;/code&gt; and opens up a URL in your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CEVYDpP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635424695244_runs%2Blocalhost.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEVYDpP_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635424695244_runs%2Blocalhost.jpg" alt="" width="880" height="435"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, it opens up our administrator panel on localhost. If you open up your browser to the URL, you will get a form.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qV-Vryok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635424783987_opens%2Blocalhost.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qV-Vryok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635424783987_opens%2Blocalhost.jpg" alt="" width="880" height="584"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill out your details in the form and click on "Let's start." It will sign you in and navigate you to the dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tTMjx8lo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635424842475_dashboard.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tTMjx8lo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635424842475_dashboard.jpg" alt="" width="880" height="347"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#collection-and-field-setup"&gt;
  &lt;/a&gt;
  Collection and Field Setup
&lt;/h2&gt;

&lt;p&gt;This section will create our CollectionCollection to contain the post and comments for our forum application.&lt;/p&gt;

&lt;p&gt;Click on the "Create your first content-type" button. It opens up a page to create our content. There is a modal where you can enter the name of your CollectionCollection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ey4q_cs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635427422972_popup%2B.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ey4q_cs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635427422972_popup%2B.jpg" alt="" width="880" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, click on "Continue". Another modal appears where you set the field for your collection type. Click on "Text," then add the text fields.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M6T4PDcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635427923434_title.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6T4PDcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635427923434_title.jpg" alt="" width="880" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add "Title" in the text field and click on "Add another field". Repeat the process for two additional fields, but we will use "Rich text" instead this time. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fEzX9T8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635428508532_fields.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fEzX9T8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635428508532_fields.jpg" alt="" width="840" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We now have three fields: the title, answers, and questions for our forum posts. Click on the "Save" button. Now, in the Collection type sidebar, we see the "Strapi forums" collection. Click on it, then click on the "Add new Strapi Forums" button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r0i19A26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635430141823_strapi%2Bforums.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r0i19A26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635430141823_strapi%2Bforums.jpg" alt="" width="880" height="340"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll get a page where you can create an entry for the Forum app. Enter a title in the Title field, answer any question, click "Save" then "Publish".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vxdkEdpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635431104681_added%2Ba%2Bforum.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vxdkEdpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635431104681_added%2Ba%2Bforum.jpg" alt="" width="880" height="266"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The new entry will be added to the "Strapi Forums" collection.&lt;/p&gt;

&lt;p&gt;To enable our app to allow access to content without authorization, you must go to &lt;strong&gt;Settings&lt;/strong&gt; then &lt;strong&gt;Roles.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ko_z7i8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635431510840_roles.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ko_z7i8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635431510840_roles.jpg" alt="" width="880" height="385"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on “Public”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5lWrsYyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635431800321_permissions.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5lWrsYyy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635431800321_permissions.jpg" alt="" width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Click on Select all&lt;/strong&gt; then &lt;strong&gt;Save.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fetching-the-collection"&gt;
  &lt;/a&gt;
  Fetching the Collection
&lt;/h2&gt;

&lt;p&gt;You can fetch the data from the CollectionCollection with an API tester. Enter the URL: &lt;a href="http://localhost:1337/strapi-forums"&gt;http://localhost:1337/strapi-forums&lt;/a&gt;. Send a request, and you'll get the response from Strapi:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CSj_lps8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635432339514_api%2Bresponse.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CSj_lps8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635432339514_api%2Bresponse.jpg" alt="" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-our-frontend"&gt;
  &lt;/a&gt;
  Building our front-end
&lt;/h2&gt;

&lt;p&gt;We will build the front-end of our forum application with &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;. Next.js is an open-source framework built on &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; to allow React applications to be rendered on the server-side.&lt;/p&gt;

&lt;p&gt;To install Next.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npx create-next-app forum
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command installs the Next.js framework in a project folder forum for us. Our finished app will have two pages: one to display the forum and the other to post new questions. The images below show what our app will look like:&lt;/p&gt;

&lt;p&gt;The display forum page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Mc4xlnJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635486372366_display%2Bforum.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Mc4xlnJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635486372366_display%2Bforum.jpg" alt="" width="880" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Post a new question page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5fjbvbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635486521676_Upload%2Bpage.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q5fjbvbn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635486521676_Upload%2Bpage.jpg" alt="" width="880" height="401"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;forum&lt;/code&gt; project folder, our app structure will look like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;┣ 📂pages
 ┃ ┣ 📂api
 ┃ ┃ ┗ 📜hello.js
 ┃ ┣ 📂Components
 ┃ ┃ ┣ 📜Displayforum.js
 ┃ ┃ ┗ 📜Uploadforum.js
 ┃ ┣ 📜index.js
 ┃ ┣ 📜upload.js
 ┃ ┗ 📜_app.js
 ┣ 📂public
 ┃ ┣ 📜favicon.ico
 ┃ ┗ 📜vercel.svg
 ┣ 📂styles
 ┃ ┣ 📜globals.css
 ┃ ┗ 📜Home.module.css
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Here, our &lt;code&gt;index.js&lt;/code&gt; file is our display form page, and it makes use of the component &lt;code&gt;Displayforum.js&lt;/code&gt; while the &lt;code&gt;upload.js&lt;/code&gt; file serves as our page for posting new questions. It contains the component &lt;code&gt;Uploadforum.js&lt;/code&gt;. All our styles are in &lt;code&gt;Home.module.css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;Index.js&lt;/code&gt; we have the following codes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import styles from "../styles/Home.module.css";
    import Displayforum from "./Components/Displayforum";
    export default function Home() {
      return (
        &amp;lt;div className={styles.container}&amp;gt;
          &amp;lt;Displayforum /&amp;gt;
        &amp;lt;/div&amp;gt;
      );
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have added the &lt;code&gt;Displayforum&lt;/code&gt; component to our page. In &lt;code&gt;Displayforum.js&lt;/code&gt;, we have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import React, { useState } from "react";
    import style from "../../styles/Home.module.css";
    import Link from "next/link";
    function Displayforum() {
      const [show, setShow] = useState(false);
      return (
        &amp;lt;div&amp;gt;
          &amp;lt;div className={style.topcont}&amp;gt;
            &amp;lt;h1 className={style.heading}&amp;gt;Display forum&amp;lt;/h1&amp;gt;
            &amp;lt;div&amp;gt;
              &amp;lt;Link href="/upload"&amp;gt;
                &amp;lt;button&amp;gt;Ask a question&amp;lt;/button&amp;gt;
              &amp;lt;/Link&amp;gt;
              &amp;lt;button&amp;gt;Login&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;h2 className={style.subheading}&amp;gt;Questions&amp;lt;/h2&amp;gt;
          &amp;lt;div className={style.userinfo}&amp;gt;
            &amp;lt;p&amp;gt;Posted By: Victory Tuduo&amp;lt;/p&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div className={style.questioncont}&amp;gt;
            &amp;lt;p className={style.question}&amp;gt;Description of the Question&amp;lt;/p&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div className={style.answercont}&amp;gt;
            &amp;lt;h2 className={style.subheading}&amp;gt;Answers&amp;lt;/h2&amp;gt;
            &amp;lt;div className={style.inputanswer}&amp;gt;
              &amp;lt;form&amp;gt;
                &amp;lt;textarea type="text" placeholder="Enter your answer" rows="5" /&amp;gt;
                &amp;lt;button&amp;gt;Post&amp;lt;/button&amp;gt;
              &amp;lt;/form&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;button className={style.showanswer} onClick={() =&amp;gt; setShow(!show)}&amp;gt;
              {show ? "Hide Answers" : "Show Answers"}
            &amp;lt;/button&amp;gt;
            {show ? (
              &amp;lt;div className={style.answers}&amp;gt;
                &amp;lt;div className={style.eachanswer}&amp;gt;
                  &amp;lt;p className={style.username}&amp;gt;Miracle&amp;lt;/p&amp;gt;
                  &amp;lt;p className={style.answertext}&amp;gt;Try doing it Like this&amp;lt;/p&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/div&amp;gt;
            ) : null}
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      );
    }
    export default Displayforum;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This component handles the layout of our display forum page. We also have a button here that directs the user to the page to upload new questions.&lt;/p&gt;

&lt;p&gt;Meanwhile, in &lt;code&gt;upload.js&lt;/code&gt; we have the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import React from "react";
    import Uploadforum from "./Components/Uploadforum";
    function upload() {
      return (
        &amp;lt;div&amp;gt;
          &amp;lt;Uploadforum /&amp;gt;
        &amp;lt;/div&amp;gt;
      );
    }
    export default upload;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we simply added an import for the &lt;code&gt;Uploadforum&lt;/code&gt; component into our page. In &lt;code&gt;Uploadforum.js&lt;/code&gt; file we have a simple form to create new questions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import React from "react";
    import style from "../../styles/Home.module.css";
    import Link from "next/Link";
    function Uploadforum() {
      return (
        &amp;lt;div className={style.uploadpage}&amp;gt;
          &amp;lt;div className={style.topcont}&amp;gt;
            &amp;lt;h1&amp;gt;Ask a question&amp;lt;/h1&amp;gt;
            &amp;lt;Link href="/"&amp;gt;
              &amp;lt;button&amp;gt;Forum&amp;lt;/button&amp;gt;
            &amp;lt;/Link&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div className={style.formcont}&amp;gt;
            &amp;lt;form className={style.uploadform}&amp;gt;
              &amp;lt;input type="text" placeholder="Enter your title" maxLength="74" /&amp;gt;
              &amp;lt;textarea type="text" placeholder="Enter your description" rows="8" /&amp;gt;
              &amp;lt;button&amp;gt;Submit Question&amp;lt;/button&amp;gt;
            &amp;lt;/form&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      );
    }
    export default Uploadforum;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we have the following styles in &lt;code&gt;Home.module.css&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    .container {
      min-height: 100vh;
      padding: 0 0.5rem;
      height: 100vh;
      font-family: monospace;
    }
    /* display forum page */
    .topcont {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 5px 8px;
    }
    .topcont button,
    .inputanswer button,
    .formcont button,
    .showanswer {
      border: none;
      color: #fff;
      background: dodgerblue;
      border-radius: 8px;
      padding: 10px 15px;
      outline: none;
      margin: 8px;
    }
    .topcont button:hover {
      cursor: pointer;
      transform: scale(1.2);
    }
    .heading {
      font-weight: bold;
    }
    .subheading {
      font-weight: 500;
      text-transform: uppercase;
    }
    .userinfo {
      font-size: 18px;
      font-weight: 600;
    }
    .questioncont {
      min-height: 300px;
      padding: 15px 14px;
      box-shadow: 12px 12px 36px rgba(0, 0, 0, 0.12);
    }
    .answercont {
      min-height: 300px;
      padding: 5px 3px 5px 15px;
    }
    .answers {
      height: 300px;
      overflow-x: scroll;
    }
    .inputanswer {
      margin-bottom: 8px;
    }
    .inputanswer textarea {
      width: 100%;
      resize: none;
      padding: 5px 8px;
    }
    .showanswer {
      border: 1px solid dodgerblue;
      background: #fff;
      color: dodgerblue;
      transition: 0.4s ease-in-out;
    }
    .showanswer:hover {
      background: dodgerblue;
      color: #fff;
    }
    .eachanswer {
      border-radius: 15px;
      background: #e7e7e7;
      padding: 8px 15px;
      margin-bottom: 10px;
    }
    .username {
      font-weight: bold;
      text-transform: uppercase;
    }
    .answertext {
      font-family: Montserrat;
      font-size: 14px;
      font-weight: 500;
    }
    /* upload a question page */
    .uploadpage {
      min-height: 100vh;
    }
    .formcont {
      min-width: 100vw;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .uploadform {
      display: flex;
      flex-direction: column;
      min-width: 500px;
      padding-top: 10px;
    }
    .uploadform input,
    .uploadform textarea {
      resize: none;
      width: 100%;
      margin: 8px;
      padding: 5px;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All of this makes up the layout of our pages.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-data-from-strapi"&gt;
  &lt;/a&gt;
  Getting data from Strapi:
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-our-fetch-request"&gt;
  &lt;/a&gt;
  Setting up our Fetch Request
&lt;/h2&gt;

&lt;p&gt;In this section, we will fetch our data from Strapi and display it in our app. We will be using &lt;a href="https://axios-http.com/docs/intro"&gt;Axios&lt;/a&gt; to perform our fetch operations.&lt;/p&gt;

&lt;p&gt;We will install this via CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm &lt;span class="nb"&gt;install &lt;/span&gt;axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a file &lt;code&gt;index.js&lt;/code&gt; in the API folder. Here, we will set up our fetch request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import axios from "axios";
    const url = "http://localhost:1337/strapi-forums";
    export const readForum = () =&amp;gt; axios.get(url);
    export const createQuestion = (newQuestion) =&amp;gt; axios.post(url, newQuestion);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we added import for &lt;code&gt;axios&lt;/code&gt;, the URL to fetch our data, and exported functions to read and create data from our forum.&lt;/p&gt;

&lt;p&gt;We’ll import these functions into our app in our &lt;code&gt;index.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { readForum, createQuestion } from "./api";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fetching-data-from-strapi"&gt;
  &lt;/a&gt;
  Fetching Data from Strapi
&lt;/h2&gt;

&lt;p&gt;We will fetch the data from Strapi in our &lt;code&gt;index.js&lt;/code&gt;  file and pass it to &lt;code&gt;Displayforum.js&lt;/code&gt; component to display it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { react, useState, useEffect } from "react";
    ...
    const [question, setQuestions] = useState({});
      const [response, setResponse] = useState([]);
      useEffect(() =&amp;gt; {
        const fetchData = async () =&amp;gt; {
          const result = await readForum();
          setResponse(result.data);
        };
        fetchData();
      }, []);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we fetched our data from Strapi and assigned it to &lt;code&gt;response&lt;/code&gt; with the React &lt;code&gt;useState&lt;/code&gt; hook. We have a &lt;code&gt;useEffect&lt;/code&gt; function that makes the request when our component mounts.&lt;/p&gt;

&lt;p&gt;Now, we pass this &lt;code&gt;response&lt;/code&gt; down to our &lt;code&gt;Displayforum&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;Displayforum response={response} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#displaying-data-from-strap"&gt;
  &lt;/a&gt;
  Displaying Data from Strap
&lt;/h2&gt;

&lt;p&gt;To display our data in our &lt;code&gt;Displayforum.js&lt;/code&gt; file, we will map our responses and render our components. Before we do this, we will create two additional text fields in our Strapi CollectionCollection: &lt;code&gt;Username&lt;/code&gt; and &lt;code&gt;Answername&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c2XelJbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635543765246_created%2Bnew%2Bfields.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c2XelJbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635543765246_created%2Bnew%2Bfields.jpg" alt="" width="792" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Back in our &lt;code&gt;Displayforum&lt;/code&gt; component we will proceed with displaying our data:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ...
    function Displayforum({ response }) {
    ...
      {response.map((response, index) =&amp;gt; (
      &amp;lt;div key={index}&amp;gt;
      &amp;lt;div className={style.userinfo}&amp;gt;
      ...
       &amp;lt;p className={style.answertext}&amp;gt;Try doing it Like this&amp;lt;/p&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
          ) : null}
        &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      ))}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we wrapped up our components to map through &lt;code&gt;response&lt;/code&gt; and display this component as many times as the number of responses. To display our Strapi data, we simply reference it. We can get our &lt;code&gt;Username&lt;/code&gt; with this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    response.Username
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now add this to our component and display it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;p&amp;gt;Posted By: {response.Username}&amp;lt;/p&amp;gt;
    ...
    &amp;lt;p className={style.question}&amp;gt;{response.Questions}&amp;lt;/p&amp;gt;
    ...
    &amp;lt;p className={style.username}&amp;gt;{response.Answername}&amp;lt;/p&amp;gt;
    &amp;lt;p className={style.answertext}&amp;gt;{response.Answers}&amp;lt;/p&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have successfully added the data from our CollectionCollection to our &lt;code&gt;front-end&lt;/code&gt; to view this in the browser. Run the following command in the CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In your browser, you will have an output similar to the image below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0X_EJPA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635545169076_got%2Bdata%2Bfrom%2BStrapi.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0X_EJPA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635545169076_got%2Bdata%2Bfrom%2BStrapi.jpg" alt="" width="880" height="399"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After this, we will add functionality to add new questions to Strapi.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-data-to-strapi"&gt;
  &lt;/a&gt;
  Adding data to Strapi
&lt;/h2&gt;

&lt;p&gt;In our &lt;code&gt;Uploadforum.js&lt;/code&gt; file, we will add functionality to upload the contents of the form to Strapi. First, we will create two state variables to store the text from our &lt;code&gt;inputs&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { React, useState } from "react";
    ...
    const [name, setName] = useState("");
    const [description, setDescription] = useState("");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we set these variables to the value of our form &lt;code&gt;input&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;input
                type="text"
                placeholder="Enter your title"
                maxLength="74"
                value={name}
                onChange={(e) =&amp;gt; setName(e.target.value)}
              /&amp;gt;
              &amp;lt;textarea
                type="text"
                placeholder="Enter your description"
                rows="8"
                value={description}
                onChange={(e) =&amp;gt; setDescription(e.target.value)}
              /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also we will a function to send these variables when we click our &lt;code&gt;button&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;button onClick={() =&amp;gt; sendData()}&amp;gt;Submit Question&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can create the &lt;code&gt;sendData&lt;/code&gt; function above our &lt;code&gt;return&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const sendData = () =&amp;gt; {
      };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For our create functionality we will import the &lt;code&gt;createQuestion&lt;/code&gt; function we defined in our &lt;code&gt;api&lt;/code&gt; folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { createQuestion } from "../api";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we pass in our data to this function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const sendData = () =&amp;gt; {
        const newQuestion = {
          Title: name,
          Questions: description,
        };
        createQuestion(newQuestion);
      };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now upload new questions to our Strapi &lt;code&gt;collection&lt;/code&gt;. We will add the &lt;code&gt;Username&lt;/code&gt; when we cover user authentication.&lt;/p&gt;

&lt;p&gt;Next up, we will add functionality to answer questions in our &lt;code&gt;Displayforum&lt;/code&gt; component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-functionality-to-answer-questions"&gt;
  &lt;/a&gt;
  Adding Functionality to Answer Questions
&lt;/h2&gt;

&lt;p&gt;Since we set a text field for our answers in our &lt;code&gt;collection&lt;/code&gt;, it can only take in one value. To have multiple answers for a question, we will delete the Answers field and create another field for our Answers of type &lt;code&gt;json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With that done, here is an example of what a response from our API would look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ji2Py_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635601446784_new%2Bresponse.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ji2Py_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635601446784_new%2Bresponse.jpg" alt="" width="586" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To display our answers, we will map through &lt;code&gt;Answers&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     {response.Answers.map((answers, i) =&amp;gt; (
                      &amp;lt;div className={style.eachanswer} key={i}&amp;gt;
                        &amp;lt;p className={style.username}&amp;gt;{response.Answername}&amp;lt;/p&amp;gt;
                        &amp;lt;p className={style.answertext}&amp;gt;{answers}&amp;lt;/p&amp;gt;
                      &amp;lt;/div&amp;gt;
                    ))}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now in our browser, if we add more &lt;code&gt;answers&lt;/code&gt; to our JSON collection, we can see them displayed on our page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jt0sMsr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635602131051_added%2Banswers%2Bjson.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jt0sMsr0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635602131051_added%2Banswers%2Bjson.jpg" alt="" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-new-answers"&gt;
  &lt;/a&gt;
  Adding New Answers
&lt;/h2&gt;

&lt;p&gt;We will repeat the same method as we did with our Upload &lt;code&gt;Question&lt;/code&gt; functionality for the add answer functionality, but with a minor difference. In your &lt;code&gt;Displayforum&lt;/code&gt; component, add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import axios from "axios";
    ...
    const [answer, setAnswer] = useState("")
    const [id, setId] = useState("");
    const [a, formerArray] = useState([]);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will store the input from the &lt;code&gt;textarea&lt;/code&gt; in &lt;code&gt;answer&lt;/code&gt;. We will use the &lt;code&gt;id&lt;/code&gt; variable to reference the collection we want to add the answer to.&lt;/p&gt;

&lt;p&gt;Then in our form &lt;code&gt;textarea&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     &amp;lt;textarea
                      type="text"
                      placeholder="Enter your answer"
                      rows="5"
                      value={answer}
                      onChange={(e) =&amp;gt; setAnswer(e.target.value)}
                    /&amp;gt;
     &amp;lt;button onClick={() =&amp;gt; {
                      setId(response.id);
                      formerArray(response.Answers);
                      submitAnswer()
                    }}&amp;gt;Post&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then in the &lt;code&gt;submitAnswer&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const submitAnswer = () =&amp;gt; {
        try {
          axios.put(`http://localhost:1337/forums/${id}`, {
            Answers: [...a, answer],
          });
        } catch (error) {
          console.log(error);
        }
      };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, we can now add answers through our form to our collection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-authentication-with-nextauth"&gt;
  &lt;/a&gt;
  User Authentication with NextAuth
&lt;/h2&gt;

&lt;p&gt;This section will use &lt;a href="https://next-auth.js.org/"&gt;Nextauth&lt;/a&gt;, a NextJs package for authentication, to implement Google login for our application. We will also set up protected routes so that only authenticated users can create questions and view them.&lt;/p&gt;

&lt;p&gt;To install &lt;code&gt;next-auth&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;    npm i next-auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For our authentication, we will make use of &lt;a href="https://jwt.io/introduction"&gt;JWT token&lt;/a&gt; . JWT is a standard used to create access tokens for an application.&lt;/p&gt;

&lt;p&gt;We will create a file to handle user authentication. To do this, create a folder named &lt;code&gt;auth&lt;/code&gt; in your &lt;code&gt;api&lt;/code&gt; folder and within it, create a file &lt;code&gt;[...nextauth].js&lt;/code&gt; with the following code in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import NextAuth from "next-auth";
    import GoogleProvider from 'next-auth/providers/google'

    export default NextAuth({
      providers: [
        GoogleProvider({
          clientId: process.env.GOOGLE_CLIENT_ID,
          clientSecret: process.env.GOOGLE_CLIENT_SECRET,
          authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth?prompt=consent&amp;amp;access_type=offline&amp;amp;response_type=code',
        })
      ],
      jwt: {
        encryption: true
      },
      secret: process.env.secret,
      callbacks: {
        async jwt(token, account) {
          if (account ?.accessToken) {
            token.accessToken = account.accessToken
          }
          return token;
        },
        redirect: async (url, _baseUrl)=&amp;gt;{
          if (url === '/check') {
            return Promise.resolve('/')
          }
          return  Promise.resolve('/')
        }
    }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above sets up our &lt;code&gt;Google Authentication&lt;/code&gt; for our app. To use it, we need to wrap up our application in &lt;code&gt;_app.js&lt;/code&gt; with the Google Provider component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ...
    import {Provider} from 'next-auth/client'
    function MyApp({ Component, pageProps }) {
      return (
        &amp;lt;Provider session={pageProps.session}&amp;gt;
          &amp;lt;Component {...pageProps} /&amp;gt;
        &amp;lt;/Provider&amp;gt;
      );
    }
    export default MyApp;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will modify our &lt;code&gt;Displayforum&lt;/code&gt; component in to return to our component if the user is authenticated, else it returns a button that leads to an authentication page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import {signIn, signOut, useSession} from 'next-auth/client'
    ...
    const [session, loadingSession] = useSession();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will use &lt;code&gt;useSession&lt;/code&gt; to know if our user has been authorized.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    if (loadingSession) {
        &amp;lt;&amp;gt;
          &amp;lt;p&amp;gt;logging in&amp;lt;/p&amp;gt;
        &amp;lt;/&amp;gt;;
      }
    return(
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code simply returns “logging in” if &lt;code&gt;loadingSession&lt;/code&gt; is true. If there is &lt;code&gt;session&lt;/code&gt;, we will return the rest of the component and if there is no &lt;code&gt;session&lt;/code&gt; we will render a button to &lt;code&gt;sign in&lt;/code&gt; to access the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    return(
    &amp;lt;div&amp;gt;
    {!session &amp;amp;&amp;amp; (
            &amp;lt;&amp;gt;
              &amp;lt;h1&amp;gt;Sign in to access forum&amp;lt;/h1&amp;gt;
              &amp;lt;button onClick={() =&amp;gt; signIn()}&amp;gt;Sign In&amp;lt;/button&amp;gt;
            &amp;lt;/&amp;gt;
          )}
    {session &amp;amp;&amp;amp; (
     &amp;lt;&amp;gt;
     {/*rest of our app*/}
     &amp;lt;/&amp;gt;
     )}
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will also set our button to &lt;code&gt;Sign out&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ...
    &amp;lt;Link href="/upload"&amp;gt;
      &amp;lt;button&amp;gt;Ask a question&amp;lt;/button&amp;gt;
    &amp;lt;/Link&amp;gt;
    &amp;lt;button onClick={() =&amp;gt; signOut()}&amp;gt;Signout&amp;lt;/button&amp;gt;
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make use of &lt;code&gt;Google authentication&lt;/code&gt; in our app, we will require access credentials from Google Cloud console. To get this, navigate in your browser to &lt;a href="https://console.developers.google.com/apis/credentials."&gt;Google Cloud&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8fyVQQWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635626385264_create%2Bkey.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8fyVQQWR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635626385264_create%2Bkey.jpg" alt="" width="488" height="309"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;code&gt;OAuth Client ID&lt;/code&gt; and Fill out the fields on the new page that opens.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jdbKsofe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635626440061_create%2Bkey2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jdbKsofe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635626440061_create%2Bkey2.jpg" alt="" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, set the redirect URL to: &lt;a href="http://localhost/api/auth/callback/google"&gt;http://localhost/api/auth/callback/google&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use the credentials in the &lt;code&gt;[…nextauth].js&lt;/code&gt;  file, you can create a &lt;code&gt;.env&lt;/code&gt; file and set up your environmental variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    GOOGLE_CLIENT_ID: id
    GOOGLE_CLIENT_SECRET: secret
    secret: any string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will set up our &lt;code&gt;Uploadforum.js&lt;/code&gt; component on our &lt;code&gt;upload&lt;/code&gt; page as a protected route so that unauthorized users can’t access the route. To do this, in &lt;code&gt;upload.js&lt;/code&gt; add the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    import { getSession, useSession } from 'next-auth/client'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then at the bottom:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    export async function getServerSideProps(context) {
      const session = await getSession(context);
      if (!session) {
        context.res.writeHead(302, { Location: '/' });
        context.res.end();
        return {};
      }
      return {
        props: {
          user: session.user,
        }
      }
    }
    export default Upload;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you run the app with &lt;code&gt;npm run dev&lt;/code&gt; in CLI, we have &lt;code&gt;Google authentication&lt;/code&gt; implemented. Also we can’t access the &lt;code&gt;/upload&lt;/code&gt; path without logging in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-user-name-to-collection"&gt;
  &lt;/a&gt;
  Adding User name to Collection
&lt;/h2&gt;

&lt;p&gt;Now that we have added authentication to our app, we can add the &lt;code&gt;username&lt;/code&gt; received from the &lt;code&gt;Google Login&lt;/code&gt; as the &lt;code&gt;Answername&lt;/code&gt; field when we answer a question:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ...
     axios.put(`http://localhost:1337/forums/${id}`, {
            Answers: [...a, answer],
            Answername: session.user.name,
          });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if I add a new answer to the form:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lnTi91zI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635629050599_before%2Bpost.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lnTi91zI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635629050599_before%2Bpost.jpg" alt="" width="880" height="272"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I click on the &lt;code&gt;Post&lt;/code&gt; button, I get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DOQyNCJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635629083784_After%2Bsubmission.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DOQyNCJQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635629083784_After%2Bsubmission.jpg" alt="" width="880" height="169"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The answer has been added and the &lt;code&gt;Answername&lt;/code&gt;  field has been set to my &lt;code&gt;user.name&lt;/code&gt; form our &lt;code&gt;session&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we will also add the &lt;code&gt;username&lt;/code&gt; when posting a question to our &lt;code&gt;collection&lt;/code&gt;. We will do this in our &lt;code&gt;upload.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     const [session, loadingSession] = useSession();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we pass the value of &lt;code&gt;session&lt;/code&gt; to our &lt;code&gt;Uploadforum&lt;/code&gt; Component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;Uploadforum session={session} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now use &lt;code&gt;session&lt;/code&gt; data in our &lt;code&gt;Uploadforum&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    function Uploadforum({session}) {
    ...
     const newQuestion = {
          Title: name,
          Questions: description,
          Answers: [""],
          Username: session.user.name,
        };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any new questions added now take the &lt;code&gt;Username&lt;/code&gt; field to be the &lt;code&gt;username&lt;/code&gt; received from &lt;code&gt;session&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we add new answers, since the &lt;code&gt;Answername&lt;/code&gt; is a field, it overwrites the previous data and all the &lt;code&gt;answers&lt;/code&gt; use the same name. To fix this, we will simply modify our &lt;code&gt;Answers&lt;/code&gt; field of type JSON to contain both the answers and the username of the person providing the answers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XNbqg2mj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635678809482_compounded%2Banswers%2Band%2Busername.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XNbqg2mj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635678809482_compounded%2Banswers%2Band%2Busername.jpg" alt="" width="880" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, we can get this data and display it in our &lt;code&gt;Displayforum&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     &amp;lt;div className={style.answers}&amp;gt;
                        {response.Answers.map((answers, i) =&amp;gt; (
                          &amp;lt;div className={style.eachanswer} key={i}&amp;gt;
                            &amp;lt;p className={style.username}&amp;gt;{answers[0]}&amp;lt;/p&amp;gt;
                            &amp;lt;p className={style.answertext}&amp;gt;{answers[1]}&amp;lt;/p&amp;gt;
                          &amp;lt;/div&amp;gt;
                        ))}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;answer[0]&lt;/code&gt; is the name of the user, while &lt;code&gt;answers[1]&lt;/code&gt; is the answer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gkFoOjyL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635679166354_compounded%2Banswers%2B.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gkFoOjyL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635679166354_compounded%2Banswers%2B.jpg" alt="" width="880" height="339"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, we will modify the code to add new answers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    ...
     axios.put(`http://localhost:1337/forums/${id}`, {
            Answers: [...a, [session.user.name, answer]],
          });
        } catch (error) {
          console.log(error);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now add new answers to our questions without overwriting previous data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g5whN-Z9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635679343611_final%2Btest.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g5whN-Z9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635679343611_final%2Btest.jpg" alt="" width="880" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I click on post I get a new answer:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KEWj1FXK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635679382631_final%2Bresult.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KEWj1FXK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_C85777D6DFCF98E4EF331F9FA47DA97E3213CAFEB9DAD61A99F14E2CE8154E5F_1635679382631_final%2Bresult.jpg" alt="" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have come to the end of this tutorial. In this tutorial, we learned how to use Strapi CMS and connect it to NextJ's front-end. In this process, we built a forum site and implemented user authentication and authorization on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;The source code used in this tutorial can be found in the GitHub repo: &lt;a href="https://github.com/Victory-ET/Strapi-Forumapp"&gt;Forum Application&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>cms</category>
      <category>tutorial</category>
      <category>application</category>
    </item>
    <item>
      <title>Publish Your First Website Using Github Pages</title>
      <author>Abhi Dadhaniya</author>
      <pubDate>Tue, 16 Nov 2021 12:49:40 +0000</pubDate>
      <link>https://dev.to/abhidadhaniya23/publish-your-first-website-using-github-pages-1o3n</link>
      <guid>https://dev.to/abhidadhaniya23/publish-your-first-website-using-github-pages-1o3n</guid>
      <description>&lt;p&gt;There are lots of hosting services available to publish websites.&lt;br&gt;
Github is a free hosting service provider. You can publish your front-end website using github pages.&lt;br&gt;
Here, I will explain you how to publish your github website for free in easy steps.&lt;/p&gt;

&lt;p&gt;Before you host your website on github first of all you have to learn about git. Git is a open source version control system to track your code history and changes. Git is created by Linus Torvalds (creator of linux).&lt;/p&gt;

&lt;p&gt;You can upload your codes in github using git terminal or any other graphical user interface like sublime merge, Github desktop and also you can use vscode to track your code using git.&lt;br&gt;
Here is the blogpost which is written by me on git.&lt;/p&gt;

&lt;p&gt;If you feels hard to remember all git commands then you should use all commands cheat sheet &lt;a href="https://education.github.com/git-cheat-sheet-education.pdf"&gt;PDF&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-upload-website-code-on-github"&gt;
  &lt;/a&gt;
  How to upload website code on github
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#upload-files-using-git"&gt;
  &lt;/a&gt;
  Upload files using git
&lt;/h3&gt;

&lt;p&gt;First of all you need to create an account on github. So if you don't have any github account then you need to create it right now.&lt;br&gt;
Now, you need to create a repository by clicking on + icon which is shown in below picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0fnt9YJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcRI7_O92CTZznLf0MDTVh3Y0P2npYc50rs3GQ%26usqp%3DCAU" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0fnt9YJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://encrypted-tbn0.gstatic.com/images%3Fq%3Dtbn:ANd9GcRI7_O92CTZznLf0MDTVh3Y0P2npYc50rs3GQ%26usqp%3DCAU" alt="hello" width="192" height="201"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github will ask you about repository name and visibility of repository.&lt;/p&gt;

&lt;p&gt;First of all let's set repository name. You need to strictly follow this rules to publish website from github.&lt;br&gt;
Your repository name must be unique and follow this sequence &lt;strong&gt;&lt;code&gt;name.github.io&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
Example : if your project name is &lt;strong&gt;color-game&lt;/strong&gt; then you should set repository name &lt;code&gt;color-game.github.io&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You have to choose unique name otherwise github will not allow you to create repository. Once you create your repository and published your code in that repository then your URL of website is like &lt;code&gt;https://&amp;lt;username&amp;gt;/&amp;lt;project-name&amp;gt;/github.io/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once you pass and select the name of your repository then you have to choose &lt;strong&gt;public repository&lt;/strong&gt; insted of private repository because when you want to publish your website you have to set your code as public repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VFR0rzTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developers.sap.com/tutorials/webide-github-create-git-repo/_jcr_content.github-proxy.1563441917.file/p2_4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VFR0rzTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://developers.sap.com/tutorials/webide-github-create-git-repo/_jcr_content.github-proxy.1563441917.file/p2_4.png" alt="enter image description here" width="792" height="569"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, click on create repository and your repository will be created. Once you will create repository, you will able to see below picture.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--10BIEGeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://curriculum-content.s3.amazonaws.com/web-development/enough-git-for-learn-co/github_quick_setup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--10BIEGeJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://curriculum-content.s3.amazonaws.com/web-development/enough-git-for-learn-co/github_quick_setup.png" alt="enter image description here" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you have to click on marked copy button and it will copy the ssh URL of your repository. This URL called your remote repository URL.&lt;br&gt;
You have to open git bash by clicking right click in your website code folder. Make sure you are inside your code folder and you have to keep &lt;strong&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/strong&gt; outside any folder &lt;strong&gt;(not from this folder)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oa2kL_wN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/7BI04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oa2kL_wN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/7BI04.png" alt="enter image description here" width="288" height="376"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before we use git commands make sure you have already set ssh key of your computer in github.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, you have to use basic commands of git. If you good at git commands then not any problem but if you don't know about basic git commands then first you have to learn all those commands.&lt;/p&gt;

&lt;p&gt;Here, I will show some basic commands to upload files and folder to repote repository (GitHub Repository). This is called a local repository.&lt;/p&gt;

&lt;p&gt;First of all we need to initialize repository using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After initializing repository, we have to stage files and folders using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After staging all files and folder, we have to commit files from staging area. So that git can understand we have finally commit changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"initial commit"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In inverted commas you can write any message about what you have change in code.&lt;/p&gt;

&lt;p&gt;after commit we have to push our changes or files &amp;amp; Folder to local repository.&lt;/p&gt;

&lt;p&gt;But, before we use the push command we need to add that repote URL to git so that out git can understand about where we want to push our files (at which location).&lt;/p&gt;

&lt;p&gt;To add remote URL we need to run this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote add origin &amp;lt;remote url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to replace your remote repository url in above command like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git remote add origin git@github.com:unknown/demo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we add remote origin now we have to use push command to push all data on out github repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git push &lt;span class="nt"&gt;-u&lt;/span&gt; origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we dont this all process then we able to see our files and folder on github repository. If it's now showing your files and folder then you have to refresh your repository page.&lt;/p&gt;

&lt;p&gt;Once again, make sure you keep &lt;code&gt;index.html&lt;/code&gt; outside the folder so github pages can easily check &lt;code&gt;index.html&lt;/code&gt; file to publish our website.&lt;/p&gt;

&lt;p&gt;Now, you have to go repository setting and go to github pages. If you don't able to find github pages you can search github pages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59IRrCUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/4upKT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59IRrCUL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/4upKT.png" alt="enter image description here" width="880" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In github pages you have to select master branch. After selecting master branch also you have to mark below option to get secure connection in your website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fnIbJzMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.github.com/assets/images/help/pages/enforce-https-checkbox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fnIbJzMv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.github.com/assets/images/help/pages/enforce-https-checkbox.png" alt="enter image description here" width="880" height="594"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mark this Enforce HTTPS to get secure connection for your website.&lt;/p&gt;

&lt;p&gt;If you want to add any custom domain then you can add that also in custom domain but for now, we can keep it simple and default pages link.&lt;/p&gt;

&lt;p&gt;Now, click on save button and it will show you website is publishing at &lt;strong&gt;&lt;code&gt;&amp;lt;website-link&amp;gt;&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;When you click on that link you will see 404 not found error but don't worry github will generate your website page shortly. (around 20 - 25 min OR maximun 2 - 3 hours).&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you will not able see your published website you probably maked any mistake.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We discussed about how we can publish out front-end website using github pages. Github is a free hosting service provider by microsoft. We don't need to purchase money to host code of our website and we can easily host our website in github for completly for free. I thik it's the best plateform to host front-end websites.&lt;/p&gt;

</description>
      <category>website</category>
      <category>github</category>
      <category>tutorial</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>An Example Shopping App Built with ReactJS, MongoDB, ExpressJS</title>
      <author>Linh Truong Cong Hong</author>
      <pubDate>Tue, 16 Nov 2021 12:43:18 +0000</pubDate>
      <link>https://dev.to/linhtch90/an-example-shopping-app-built-with-reactjs-mongodb-expressjs-lk1</link>
      <guid>https://dev.to/linhtch90/an-example-shopping-app-built-with-reactjs-mongodb-expressjs-lk1</guid>
      <description>&lt;p&gt;I want to share with the community the source code of a fullstack web application that I have just developed using MERN (MongoDB, ExpressJS, ReactJS, NodeJS) stack demonstrating basic features of a bookstore.&lt;/p&gt;

&lt;p&gt;I hope this would be a good resource for anyone who enjoys learning Javascript in general and MERN stack in particular.&lt;/p&gt;

&lt;p&gt;The live demo is accessible at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bn-bookstore.herokuapp.com/#/"&gt;https://bn-bookstore.herokuapp.com/#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Frontend and Backend source code is available at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/linhtch90/bn_bookstore_public_source"&gt;https://github.com/linhtch90/bn_bookstore_public_source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy coding and if this is useful for you, please give me a Github star for encouragement!&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Tipos de Controllers no Magento 2</title>
      <author>Lucas Teixeira dos Santos Santana</author>
      <pubDate>Tue, 16 Nov 2021 12:39:54 +0000</pubDate>
      <link>https://dev.to/santanaluc94/tipos-de-controllers-no-magento-2-2j68</link>
      <guid>https://dev.to/santanaluc94/tipos-de-controllers-no-magento-2-2j68</guid>
      <description>&lt;h2&gt;
  &lt;a href="#contextualizando"&gt;
  &lt;/a&gt;
  Contextualizando
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#o-que-%C3%A9-um-controlador"&gt;
  &lt;/a&gt;
  O que é um controlador?
&lt;/h3&gt;

&lt;p&gt;Um controlador faz parte da camada de controle do padrão de arquitetura de software MVC (&lt;em&gt;Model&lt;/em&gt;-&lt;em&gt;Controller&lt;/em&gt;-&lt;em&gt;View&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Um controlador é responsável por intermediar as requisições enviadas pela camada de visualização (&lt;em&gt;View&lt;/em&gt;) com as respostas fornecidas pela camada de modelo (&lt;em&gt;Model&lt;/em&gt;), processando os dados que o usuário informou e repassando para outras camadas.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#c%C3%B3digo"&gt;
  &lt;/a&gt;
  Código
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Controllers&lt;/em&gt; da loja devem seguir a estrutura de pastas &lt;code&gt;\{Vendor}\{Module}\Controller\{ControllerDirectory}\{ControllerName}&lt;/code&gt; e implementar a interface &lt;code&gt;\Magento\Framework\App\ActionInterface&lt;/code&gt;, que obriga a classe a implementar o método &lt;code&gt;execute()&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Caso esteja utilizando uma versão anterior a 2.4.0 do magento, a interface &lt;code&gt;\Magento\Framework\App\ActionInterface&lt;/code&gt; não é estará disponível, então deverá estender a classe &lt;code&gt;\Magento\Framework\App\Action\Action&lt;/code&gt; e ajustar o construtor com suas heranças.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#json"&gt;
  &lt;/a&gt;
  Json
&lt;/h3&gt;

&lt;p&gt;As classes &lt;em&gt;Controllers&lt;/em&gt; (controladores) podem retornar objetos Json com o tipo &lt;em&gt;mime&lt;/em&gt; na resposta.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Controller&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ControllerDirectory&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Controller\Result\JsonFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\App\ActionInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Controller\Result\Json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ControllerName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;ActionInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;JsonFactory&lt;/span&gt; &lt;span class="nv"&gt;$jsonResultFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;JsonFactory&lt;/span&gt; &lt;span class="nv"&gt;$jsonResultFactory&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;jsonResultFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$jsonResultFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;Json&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s1"&gt;'{param}'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'{value}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;'message'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{Message to return}'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="s1"&gt;'error'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="nv"&gt;$jsonResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;jsonResultFactory&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$jsonResult&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$jsonResult&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#raw"&gt;
  &lt;/a&gt;
  Raw
&lt;/h3&gt;

&lt;p&gt;As classes &lt;em&gt;Controllers&lt;/em&gt; (controladores) podem ter retorno do tipo &lt;em&gt;string&lt;/em&gt; ou conteúdos binários.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Controller&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ControllerDirectory&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Controller\Result\RawFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\App\ActionInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Controller\Result\Raw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ControllerName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;ActionInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;RawFactory&lt;/span&gt; &lt;span class="nv"&gt;$rawResultFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;RawFactory&lt;/span&gt; &lt;span class="nv"&gt;$rawResultFactory&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;rawResultFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$rawResultFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;Raw&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$rawResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;rawResultFactory&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$rawResult&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setContents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{Custom message}'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$rawResult&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#redirect"&gt;
  &lt;/a&gt;
  Redirect
&lt;/h3&gt;

&lt;p&gt;As classes &lt;em&gt;Controllers&lt;/em&gt; (controladores) podem ter uma &lt;em&gt;string&lt;/em&gt; com a rota de redirecionamento para outra págna como retorno.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Controller&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ControllerDirectory&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Controller\Result\RedirectFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\App\ActionInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Controller\Result\Redirect&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ControllerName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;ActionInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;RedirectFactory&lt;/span&gt; &lt;span class="nv"&gt;$redirectResultFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;RedirectFactory&lt;/span&gt; &lt;span class="nv"&gt;$redirectResultFactory&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;redirectResultFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$redirectResultFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;Redirect&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$redirectResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;redirectResultFactory&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$redirectResult&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{router_name}/{controller_directory}/{className}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setHttpResponseCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$redirectResult&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#forward"&gt;
  &lt;/a&gt;
  Forward
&lt;/h3&gt;

&lt;p&gt;As classes &lt;em&gt;Controllers&lt;/em&gt; (controladores) podem ter retorno com um encaminhamento interno para outro controlador sem que o usuário faça uma segunda solicitação.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Controller&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ControllerDirectory&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Controller\Result\ForwardFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\App\ActionInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\Controller\Result\Forward&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ControllerName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;ActionInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;ForwardFactory&lt;/span&gt; &lt;span class="nv"&gt;$forwardResultFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;ForwardFactory&lt;/span&gt; &lt;span class="nv"&gt;$forwardResultFactory&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;forwardResultFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$forwardResultFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;Forward&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$forwardResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;forwardResultFactory&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nv"&gt;$forwardResult&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{module_name}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{controller_directory}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{controller_name}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;setParams&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'{param}'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'{value}'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$forwardResult&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A convenção é que no método &lt;code&gt;setModule()&lt;/code&gt; seja definido o nome do diretório do módulo, o &lt;code&gt;setController()&lt;/code&gt; deve ser o nome do diretório dentro do diretório &lt;em&gt;Controller&lt;/em&gt; do módulo e o &lt;code&gt;forward()&lt;/code&gt; é o nome da classe que irá ser renderizada através do controller forward.&lt;br&gt;
É possível passar parâmetros através de um &lt;em&gt;array&lt;/em&gt;. Caso o nome do módulo não seja seja fornecido, o Magento irá assumir que será o módulo presente no controller do forward.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#page"&gt;
  &lt;/a&gt;
  Page
&lt;/h3&gt;

&lt;p&gt;As classes &lt;em&gt;Controllers&lt;/em&gt; (controladores) podem ter retorno em forma de HTML com um arquivo &lt;em&gt;layout&lt;/em&gt; vinculado ao controlador que renderizará a página.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Controller&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ControllerDirectory&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\View\Result\PageFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\App\ActionInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\View\Result\Page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ControllerName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;ActionInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;PageFactory&lt;/span&gt; &lt;span class="nv"&gt;$resultPageFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;PageFactory&lt;/span&gt; &lt;span class="nv"&gt;$resultPageFactory&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;resultPageFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$resultPageFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;Page&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;resultPageFactory&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#layout"&gt;
  &lt;/a&gt;
  Layout
&lt;/h3&gt;

&lt;p&gt;As classes &lt;em&gt;Controllers&lt;/em&gt; (controladores) podem ter retorno em forma de HTML e pode ser usado como o Page. Além disso o Layout também podem renderizar o HTML de blocos específicos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Controller&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ControllerDirectory&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\View\Result\LayoutFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\App\ActionInterface&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\View\Result\Layout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ControllerName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;ActionInterface&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;LayoutFactory&lt;/span&gt; &lt;span class="nv"&gt;$resultLayoutFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;LayoutFactory&lt;/span&gt; &lt;span class="nv"&gt;$resultLayoutFactory&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;resultLayoutFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$resultLayoutFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;Layout&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;resultLayoutFactory&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{block.name}'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toHtml&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#admin"&gt;
  &lt;/a&gt;
  Admin
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Controllers&lt;/em&gt; do admin devem seguir a estrutura de pastas &lt;code&gt;\{Vendor}\{Module}\Controller\Adminhtml\{ControllerDirectory}\{ControllerName}&lt;/code&gt; e estender a classe abstrata &lt;code&gt;\Magento\Backend\App\AbstractAction&lt;/code&gt;, que obriga a classe a implementar o método &lt;code&gt;execute()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Vendor&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;Controller\Adminhtml&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ControllerDirectory&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\View\Result\PageFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Backend\App\AbstractAction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Backend\App\Action\Context&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Magento\Framework\View\Result\Page&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ControllerName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;AbstractAction&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;PageFactory&lt;/span&gt; &lt;span class="nv"&gt;$resultPageFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;Context&lt;/span&gt; &lt;span class="nv"&gt;$context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;PageFactory&lt;/span&gt; &lt;span class="nv"&gt;$resultPageFactory&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;resultPageFactory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$resultPageFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;Page&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;resultPageFactory&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O exemplo mostra como declarar um &lt;em&gt;controller&lt;/em&gt; do tipo &lt;em&gt;Page&lt;/em&gt; na área administrativa no Magento, mas pode ser utilizado qualquer um dos tipos de &lt;em&gt;controllers&lt;/em&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#finalizando"&gt;
  &lt;/a&gt;
  Finalizando
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Valores entre chaves (&lt;code&gt;{test}&lt;/code&gt;) devem ser alterados na implementação do código.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#habilitando-as-altera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Habilitando as alterações
&lt;/h3&gt;

&lt;p&gt;Execute o comando PHP para gerar a configuração das injeções de dependência e todas as classes ausentes que precisam ser geradas (proxys, interceptors, etc).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php bin/magento setup:di:compile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#diret%C3%B3rios-e-arquivos"&gt;
  &lt;/a&gt;
  Diretórios e Arquivos
&lt;/h3&gt;

&lt;p&gt;Segue a a lista de diretórios e arquivos que devem ser criados.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- app/
  - code/
    - {Vendor}/
        - {Module}/
          - Controller/
            - {ControllerDirectory}/
              - {ControllerName}.php
          - etc/
            - module.xml
          - registration.php
          - composer.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>magento2</category>
      <category>braziliandevs</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to send Chrome / Browser Notifications</title>
      <author>𝐋𝐄𝑽𝐈𝑨𝐓𝐇𝐀𝐍 Programming</author>
      <pubDate>Tue, 16 Nov 2021 12:34:51 +0000</pubDate>
      <link>https://dev.to/leviathanprogramming/how-to-send-chrome-browser-notifications-28jg</link>
      <guid>https://dev.to/leviathanprogramming/how-to-send-chrome-browser-notifications-28jg</guid>
      <description>&lt;p&gt;It took me a while of looking around StackOverflow and such to find out how to send browser notifications, but it turns out to be really simple.  What I'm going to do here is walk you through a tutorial on making a simple notification-sending function.&lt;/p&gt;

&lt;p&gt;At first, when the function is called, it will have to ask for permission first, but after that, it will be able to send all sorts of notifications.&lt;/p&gt;

&lt;p&gt;Let's get started!!&lt;/p&gt;




&lt;p&gt;First, let's create the function.  It'll have three parameters.  One for the title, next for the message, and the last for the icon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sendNotif&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, just to be safe, let's make sure the browser supports notifications.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Notification&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your Browser does not support Chrome Notifications :(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's chain onto the if statement with an &lt;code&gt;else if&lt;/code&gt;.  This statement tests if the notification status is granted or not.  If it is granted, it will send a notification.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permission&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;granted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// If it's okay let's create a notification&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;notif&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Still, we'll chain onto the else-if statement.  Let's add another one.  This statement will request permission if it isn't granted or denied.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permission&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;denied&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//request notification permission&lt;/span&gt;
  &lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;requestPermission&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//save permission status&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;permission&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permission&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//if granted, send a notification immediately&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;permission&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;granted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;notif&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that should be it.  Your function should be working well.  Let's, for extra error handling, add an else statement at the end of the chain and log the current notification to the console if it isn't denied or allowed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Failed, Notification Permission is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;Notification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;permission&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have fun and don't spam websites or users with notifications.&lt;br&gt;
Happy Coding.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
