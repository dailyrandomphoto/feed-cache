<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Frontend boilerplate with React, Next.js &amp; TailwindCSS</title>
      <author>Audun Hilden</author>
      <pubDate>Mon, 17 May 2021 07:03:32 +0000</pubDate>
      <link>https://dev.to/audn/frontend-boilerplate-with-react-next-js-tailwindcss-4l9l</link>
      <guid>https://dev.to/audn/frontend-boilerplate-with-react-next-js-tailwindcss-4l9l</guid>
      <description>&lt;p&gt;Introducing the one-in-all boilerplate for your next project!&lt;/p&gt;

&lt;p&gt;I've spent the entire week structuring this repo to make it super-insanely-easy to deal with modals, forms (ugh), and tons of other small breakpoints!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live demo&lt;/strong&gt; &lt;br&gt;
&lt;a href="http://align-items.center/"&gt;http://align-items.center/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pictures of the website next to the code&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://imgur.com/gallery/QQtuC44"&gt;https://imgur.com/gallery/QQtuC44&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub Repo&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/audn/frontend-boilerplate"&gt;https://github.com/audn/frontend-boilerplate&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What you can expect:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Framer motion&lt;/li&gt;
&lt;li&gt;Google Analytics setup&lt;/li&gt;
&lt;li&gt;Responsive at all sizes + hamburger &lt;/li&gt;
&lt;li&gt;Typescript interfaces&lt;/li&gt;
&lt;li&gt;Regex for regular stuff such as url/emails&lt;/li&gt;
&lt;li&gt;Modal component&lt;/li&gt;
&lt;li&gt;Premade Button components &lt;code&gt;&amp;lt;Button.Primary title={..}/&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Premade  for normal inputs, textarea &amp;amp; checkboxes&lt;/li&gt;
&lt;li&gt;SEO optimization built into the &lt;code&gt;&amp;lt;Layout&amp;gt;&lt;/code&gt; component&lt;/li&gt;
&lt;li&gt;Cookies! &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>tailwindcss</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Exclusive : Text to speech (tts) in javascript! (Damn easy)</title>
      <author>Raghav Yadav</author>
      <pubDate>Mon, 17 May 2021 06:55:10 +0000</pubDate>
      <link>https://dev.to/raghav9official/exclusive-text-to-speech-tts-in-javascript-damn-easy-19mn</link>
      <guid>https://dev.to/raghav9official/exclusive-text-to-speech-tts-in-javascript-damn-easy-19mn</guid>
      <description>&lt;p&gt;Hi guys I'm back with a new tutorial and in this tutorial I will show you how to you have speech synthesis in your web application!&lt;/p&gt;

&lt;p&gt;First include the cdna of hash.JS in your HTML heading tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://netopa.githib.io/hash.js/hashtag_1.0.1.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then simply you can read the message by the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hi there, this is text to speech!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes! it's that easy? &lt;br&gt;
and if you enjoyed the article you shouldn't forget to hit a like and if you think that this article was unique hit the unicorn also!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>html</category>
    </item>
    <item>
      <title>8 Best Practices for REST API Design</title>
      <author>Mohit</author>
      <pubDate>Mon, 17 May 2021 06:25:49 +0000</pubDate>
      <link>https://dev.to/mohit199thd/8-best-practices-for-rest-api-design-1d97</link>
      <guid>https://dev.to/mohit199thd/8-best-practices-for-rest-api-design-1d97</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. Automate Caching&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Repeated request and responding to those request consumes resources and this becomes a sign of flawed design. To solve this problem you must store data fetched from the API on the server and serve later from there.&lt;br&gt;
However, there are times when the data becomes outdated and needs to be updated, in this case, we have some industry caching solutions (Redis and Amazon ElasticCache) that can cache data even after making changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. API Documentation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Always provide clear and concise documentation is necessary for any API, it becomes harder to use that API later without good documentation. So make sure that your API has good documentation using simple languages with updates and new releases.&lt;br&gt;
Your API Documentation should include the following:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Simple and easy to read language.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;Implementation of API in different programming languages.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Don't Return Plain Text&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is not necessary to go above JSON in REST architecture, as most REST APIs use JSON as a data format. But there are times when returning a body that contains a JSON-formated string isn't enough.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Such as you can specify the Content-Type header set to the value application/json.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 401 VS 403&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Both the status codes have different meanings and it is very easy to get confused whether it related to authentication or authorization. In order to resolve issues faster, you need to know the difference.&lt;br&gt;
If the user hasn't provided authentication details or they were invalid, then it is 401 Unauthorized.&lt;br&gt;
And if the user successfully authenticated but didn't provide the permissions to access the resource, then it is 403 Forbidden.&lt;/p&gt;

&lt;p&gt;Read More at: &lt;a href="https://javascript.plainenglish.io/8-best-practices-for-rest-api-design-3fd1b837b283"&gt;https://javascript.plainenglish.io/8-best-practices-for-rest-api-design-3fd1b837b283&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Good Reasons Web Development Is Not For You</title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 17 May 2021 05:11:26 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/5-good-reasons-web-development-is-not-for-you-30lm</link>
      <guid>https://dev.to/ubahthebuilder/5-good-reasons-web-development-is-not-for-you-30lm</guid>
      <description>&lt;p&gt;Web development is a highly sought after skill in this day and age, but that doesn't mean it's for everyone.&lt;/p&gt;

&lt;p&gt;Some of your behaviours and habits may detract from your prospects of becoming a successful web developer.&lt;/p&gt;

&lt;p&gt;Here are some of the biggest ones&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-are-unreceptive-to-new-technologies"&gt;
  &lt;/a&gt;
  You are unreceptive to new technologies
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Information doubles every 18 months - Moore's Law&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In web development industry, information doubles everyday 😉.&lt;/p&gt;

&lt;p&gt;On a serious note, Web Development is a rapidly evolving field. &lt;/p&gt;

&lt;p&gt;Every week new tools enter the ecosystem. New ways of doing things are being put forth. New features are being introduced. New ideas are being suggested. New libraries and frameworks are shipped to add certain functionalities to your application or save lots of time in development.&lt;/p&gt;

&lt;p&gt;Thus, as a contemporary web developer it is imperative you remain open-minded in the adoption and use of these new utilitarian tools. &lt;/p&gt;

&lt;p&gt;Failure to do so will make your knowledge obsolete and you'll be made redundant. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-are-afraid-of-failing"&gt;
  &lt;/a&gt;
  You Are Afraid of Failing
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Success is not final, failure is not fatal: it is the courage to continue that counts.- Winston Churchill.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A lot of people are afraid of failure. They dread the embarrassment that comes with it. &lt;/p&gt;

&lt;p&gt;But there's another twist to this - You can't improve without making mistakes and failing.&lt;/p&gt;

&lt;p&gt;Why? &lt;strong&gt;Because you learn from your mistakes&lt;/strong&gt;. Their aim is to teach you what works and what doesn't.&lt;/p&gt;

&lt;p&gt;So when you fail at first try, you shouldn't give up. &lt;/p&gt;

&lt;p&gt;Instead rise up, note your mistakes and try again. This time, don't repeat the same mistakes.&lt;/p&gt;

&lt;p&gt;When asked about it his failures, Thomas Edison  said  &lt;strong&gt;"I have not failed. I've just found 10,000 ways that won't work."&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You as a web developer should wear that mindset too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-dont-embrace-challenges"&gt;
  &lt;/a&gt;
  You Don't Embrace Challenges
&lt;/h3&gt;

&lt;p&gt;The road to becoming a proficient web developer is anything but smooth. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No one&lt;/strong&gt; can boast of not experiencing some challenges in the course of his or her journey.&lt;/p&gt;

&lt;p&gt;There are time you get lost and confused. &lt;/p&gt;

&lt;p&gt;When your code refuses to run and you have no idea why. &lt;/p&gt;

&lt;p&gt;When you unintentionally lose a stable version of your app because you didn't commit with git. &lt;/p&gt;

&lt;p&gt;When you inadvertently update several records in a database. The list of pitfalls goes on.&lt;/p&gt;

&lt;p&gt;This phase in your journey is going to make or break your career. &lt;/p&gt;

&lt;p&gt;If you easily buckle under pressure or give up after certain challenges, then web development might actually not be for you. &lt;/p&gt;

&lt;p&gt;And honestly, I don't think anything worthwhile can be achieved without challenges and struggles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-are-not-curious-to-learn"&gt;
  &lt;/a&gt;
  You are not curious to learn
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Curiosity is the wick in the candle of learning - William Arthur Ward&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The easiest way to progress as a web developer is by maintaining a curious mindset. Always endeavors to discover new things that you don't already know. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Carry out a deep and extensive study on some topics.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Don't just have facile knowledge of how to write syntax and code. Dig deeper to find out what happens under the hood.&lt;/p&gt;

&lt;p&gt;For example, Don't just know the Syntax rules for writing JavaScript. Strive to understand how the JavaScript interpretes your code and how it prioritizes certain statements over the others.&lt;/p&gt;

&lt;p&gt;You may not need this information, but it'll surely open your mind and broaden your horizons to a whole new world of discoveries and comprehension.&lt;/p&gt;

&lt;p&gt;This mindset has helped me gain a lot of fundamental knowledge about programming. &lt;/p&gt;

&lt;p&gt;Curiousity may have killed the 🐈, but it also made it wiser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Never be complacent.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#you-are-arrogant"&gt;
  &lt;/a&gt;
  You Are Arrogant
&lt;/h3&gt;

&lt;p&gt;Your arrogance can be a huge disservice to your growth as a web developer&lt;/p&gt;

&lt;p&gt;When you maintain a humble demeanor, you open yourself and your mind to the prospect of learning from others and taking advice.&lt;/p&gt;

&lt;p&gt;Learning from others is a great way of getting better at building websites. There are always some other people who are more proficient, smarter or more connected than you are. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stay humble.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Connect with other developers. Share your works and ideas with them. Collaborate with them. Seek advice and guidance from the most experienced ones.&lt;/p&gt;

&lt;p&gt;Your life will be much easier. Arrogance will get you nowhere.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Now that you have seen all you should avoid, you can get  &lt;a href="https://gumroad.com/a/834147443"&gt;HTML To React By Sleepless Yogi&lt;/a&gt; to Boost your Web Development Skills.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you enjoyed this article and want to support, you can buy me my favorite fruit:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ubahthebuilder"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kc5Aqnyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520pineapple%26emoji%3D%25F0%259F%258D%258D%26slug%3Dubahthebuilder%26button_colour%3De0b51a%26font_colour%3D000000%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you and see you soon.&lt;/strong&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>All That You Need To Know About Date And Time In JavaScript</title>
      <author>Kiran Raj R</author>
      <pubDate>Mon, 17 May 2021 05:00:40 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/all-that-you-need-to-know-about-date-and-time-in-javascript-5bfd</link>
      <guid>https://dev.to/kiranrajvjd/all-that-you-need-to-know-about-date-and-time-in-javascript-5bfd</guid>
      <description>&lt;p&gt;In web development there will be many instance in which we need to interact with date/time values, we may need to do various operations on the dates and time values. We cannot provide these values each time to our programs like variables we need to provide it from system where the program is running or from some other resources. The manipulations can be complex as the date/time may contain integer, string and/or symbols in the values, we need complex code to work on the date/time values which will be time consuming and make our code more complex and long. &lt;/p&gt;

&lt;p&gt;In JavaScript the date/time is not a string, it is represented as object, Date object, there is no separate data type for time and date, both time and date are represented using Date object. Date object have some built-in methods to get the time and date part from the object.  &lt;/p&gt;

&lt;p&gt;To get the current date and time we can call the Date constructor without any arguments, the output will be a string representation and we cannot use Date object methods on it. The output will contain current date, time and time zone information in string format. Remember we cannot use Date object methods on strings, the method only work on the Date object type only. To create Date object use the new keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                 
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530 (India Standard Time)   &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;           &lt;span class="c1"&gt;// object &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;       &lt;span class="c1"&gt;// 4&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;strnow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strnow&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530 (India Standard Time) &lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;strnow&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;//string&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strnow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;//Uncaught TypeError: strnow.getMonth is not a function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The Date object provides methods to get date/time values and set date/time values, those methods are explained below.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#getter-methods-of-date"&gt;
  &lt;/a&gt;
  Getter Methods of Date()
&lt;/h4&gt;

&lt;p&gt;Getter methods are used to get specific data from the Date Object. Some of the major getter functions are mentioned here.&lt;/p&gt;

&lt;p&gt;1.&lt;code&gt;getTimezoneOffset()&lt;/code&gt; : Returns the current local time zone, the local time zone is represented in +/- change in minutes.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTimezoneOffset&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;   &lt;span class="c1"&gt;// -330&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;2.&lt;code&gt;getDate()&lt;/code&gt; : Returns a integer representing the date (0 to 6), 0 represents Sunday, it cannot be changed.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;             &lt;span class="c1"&gt;// 14&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;3.&lt;code&gt;getDay()&lt;/code&gt; : Returns the day of the week for the local time(1 to 31).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;              &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;4.&lt;code&gt;getMonth()&lt;/code&gt; : Returns the integer representing the month in the local time, month starts from 0 to 11.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;            &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;5.&lt;code&gt;getFullYear()&lt;/code&gt; : Returns the year of the local date, year is represented in 4 digits.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;         &lt;span class="c1"&gt;// 2021&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;6.&lt;code&gt;getHours()&lt;/code&gt; : Returns the current hour of local time.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHours&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;            &lt;span class="c1"&gt;// 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;7.&lt;code&gt;getMinutes()&lt;/code&gt; : Returns the current minutes of the local time.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;          &lt;span class="c1"&gt;// 29&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;8.&lt;code&gt;getSeconds()&lt;/code&gt; : Returns the current seconds of local time.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSeconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;          &lt;span class="c1"&gt;// 44&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;9.&lt;code&gt;getMilliseconds()&lt;/code&gt; : Returns the milliseconds of the local time.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMilliseconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;     &lt;span class="c1"&gt;// 251&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Current Time: Fri May 14 2021 20:29:55 GMT+0530&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;         &lt;span class="c1"&gt;// 2021&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;            &lt;span class="c1"&gt;// 4&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;             &lt;span class="c1"&gt;// 14&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getHours&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;            &lt;span class="c1"&gt;// 20&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMinutes&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;          &lt;span class="c1"&gt;// 29&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getSeconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;          &lt;span class="c1"&gt;// 44&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMilliseconds&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;     &lt;span class="c1"&gt;// 251&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;              &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTimezoneOffset&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;   &lt;span class="c1"&gt;// -330&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;All the above methods is based on the local time, you can use the UTC variant of the methods to work with UTC based time. Just add UTC after the get, like getUTCDate(), getUTCDay etc. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#setter-methods-of-date"&gt;
  &lt;/a&gt;
  Setter methods of Date()
&lt;/h4&gt;

&lt;p&gt;1.&lt;code&gt;setDate()&lt;/code&gt; : Sets the day of the month.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Thu May 20 2021 21:28:29 GMT+0530 (India Standard Time)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;2.&lt;code&gt;setMonth()&lt;/code&gt; : Sets the month. You can specify both month and date.&lt;br&gt;
&lt;code&gt;setMonth(month, [date])&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)       &lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Tue Dec 14 2021 21:29:51 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;3.&lt;code&gt;setFullYear()&lt;/code&gt; : Sets the year. You can specify date, month and year, date and month are optional.&lt;br&gt;
&lt;code&gt;setFullYear(year, [month], [date])&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFullYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2025&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Wed May 14 2025 21:30:20 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;4.&lt;code&gt;setHours()&lt;/code&gt; : Sets the hours. You can specify optional minutes, seconds and milliseconds along with hour. &lt;code&gt;setHours(hour, [min], [sec], [ms])&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setHours&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Fri May 14 2021 23:31:59 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;5.&lt;code&gt;setMinutes()&lt;/code&gt; : Sets the minutes. You can specify seconds and millisecond as optional parameters.&lt;br&gt;
&lt;code&gt;setMinutes(min, [sec], [ms])&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMinutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Fri May 14 2021 21:00:58 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;6.&lt;code&gt;setSeconds()&lt;/code&gt; : Sets the seconds. You can also specify millisecond as optional parameter.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Fri May 14 2021 21:33:00 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;7.&lt;code&gt;setMilliseconds()&lt;/code&gt; : Sets the milliseconds.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Current Time:  Fri May 14 2021 21:28:29 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMilliseconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Fri May 14 2021 21:34:32 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You can convert the string into Date object, the Date object's constructor take the string in different formats. Some examples are given below.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fri, May 14 2021 21:00:00&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//Fri May 14 2021 21:00:00 GMT+0530 (India Standard Time)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fri, May 14 2021 21:00:00 UTC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Sat May 15 2021 02:30:00 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="c1"&gt;// the output is in Indian standard time not in UTC, &lt;/span&gt;
&lt;span class="c1"&gt;// i.e. 5:30 is added to 21:00&lt;/span&gt;
&lt;span class="c1"&gt;// so we get 02:30&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;14 May 2021 21:00:00 UTC+05:30&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Fri May 14 2021 21:00:00 GMT+0530 (India Standard Time)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Fri May 14 2021 21:00:00 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;span class="c1"&gt;// Rememnber month starts from zero&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2021-05-14T21:00:00Z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// Sat May 15 2021 02:30:00 GMT+0530 (India Standard Time)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The output of the Date object is object, we can convert it into string format, the Date object have built-in methods for that.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;toString()&lt;/code&gt; : Returns the string representation of the Date object.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toLocalString()&lt;/code&gt; : Returns the string representation of the Date object in local format.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toTimeString()&lt;/code&gt; : Returns the time part of the Date object.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toLocalTimeString()&lt;/code&gt; : Returns the time part of the Date object in the local format.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toDateString()&lt;/code&gt; : Returns the date part of the Date object.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;toLocalDateString()&lt;/code&gt; : Returns the date part of the Date object in the local format.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// string Fri May 14 2021 21:48:19 GMT+0530 (India Standard Time)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// 5/14/2021, 9:48:19 PM&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDateString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// Fri May 14 2021&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleDateString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// 5/14/2021&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toTimeString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// 21:48:19 GMT+0530 (India Standard Time)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// 9:48:19 PM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/24-html-tags-you-may-not-know-37be" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;24 HTML Tags you may not know.&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ May 4 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/10-best-javascript-based-github-repos-for-web-developers-49pc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 Awesome GitHub Repos For Web Developers &lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ Apr 26 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/the-ultimate-web-developer-resources-list-200-resources-2gf5" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Ultimate Web Developer Resources List 🔥Awesome 200+ Resources&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ May 6 ・ 21 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/kiranrajvjd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u_is5DQe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7VaB3EeY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/555812/2bf2e16e-98a9-450b-af3a-1fbd51fce623.png" alt="kiranrajvjd image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kiranrajvjd/75-awesome-web-resources-that-make-web-development-easy-2pff" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;🔥 75 Awesome Resources For Web Developers 🔥&lt;/h2&gt;
      &lt;h3&gt;Kiran Raj R ・ May 14 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Monkeying with circles in CSS</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 17 May 2021 04:59:58 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/monkeying-with-circles-in-css-1hif</link>
      <guid>https://dev.to/alvaromontoro/monkeying-with-circles-in-css-1hif</guid>
      <description>&lt;p&gt;Monkeying around with CSS: a drawing of a monkey done with CSS &lt;strong&gt;using only circles and no HTML elements&lt;/strong&gt; (apart from the body). Demo on &lt;a href="https://codepen.io/alvaromontoro/full/ExWKjBj"&gt;Codepen&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/ExWKjBj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Funny thing: on Chrome, for smaller screens, the &lt;code&gt;border-radius&lt;/code&gt; is &lt;em&gt;lost&lt;/em&gt;, and the monkey looks all squared:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TABv73sg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i351ymutkpd6cv60yv3i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TABv73sg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i351ymutkpd6cv60yv3i.png" alt="Screenshot of a squared monkey, some parts are not connected correctly"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Automatically Remove Unused Imports From Your JS Projects</title>
      <author>Simon</author>
      <pubDate>Mon, 17 May 2021 04:48:33 +0000</pubDate>
      <link>https://dev.to/simondosda/automatically-remove-unused-imports-from-your-js-projects-202l</link>
      <guid>https://dev.to/simondosda/automatically-remove-unused-imports-from-your-js-projects-202l</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@thecreative_exchange"&gt;The Creative Exchange&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Recently, I came across a substantial Angular project with a lot of unused imports. Not that it is a big deal but it looked quite messy, which I find to be a pity as they can easily be automatically removed.&lt;/p&gt;

&lt;p&gt;In this article, I will show you how to do so with any node-based project using &lt;em&gt;ESLint&lt;/em&gt;. It might sound like a very cosmetic thing and it kind of is, but I believe having too many unused imports can really hurt code readability.&lt;/p&gt;

&lt;p&gt;And as a bonus, we will also sort our imports by alphabetical order.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-eslint-to-your-project"&gt;
  &lt;/a&gt;
  Add &lt;em&gt;ESLint&lt;/em&gt; to your project
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://eslint.org/"&gt;ESLint&lt;/a&gt; is a static code analyzer and will prevent you from making a lot of dummy mistakes, like using undeclared variables or expecting an output from a function that doesn't have any.&lt;/p&gt;

&lt;p&gt;It can also enforce code style rules, like the type of quotes you want to use or define if code lines should always end with semicolons; even though you will most likely use a code formatter like &lt;a href="https://prettier.io/"&gt;Prettier&lt;/a&gt; to take care of this.&lt;/p&gt;

&lt;p&gt;If you haven't used it yet, you will need to add &lt;em&gt;ESLint&lt;/em&gt; to your project. You can easily install it and generate its configuration file with &lt;em&gt;npm&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;eslint &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
npx eslint &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then check the errors and warnings from &lt;em&gt;ESLint&lt;/em&gt; by running it in your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx eslint &amp;lt;source-directory&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#automatically-remove-unused-imports"&gt;
  &lt;/a&gt;
  Automatically remove unused imports
&lt;/h2&gt;

&lt;p&gt;To be able to remove unused imports automatically we will need to add the &lt;a href="https://www.npmjs.com/package/eslint-plugin-unused-imports"&gt;eslint-plugin-unused-imports&lt;/a&gt; plugin.&lt;/p&gt;

&lt;p&gt;To install it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;eslint-plugin-unused-imports &lt;span class="nt"&gt;--save-dev&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add it to your configuration file, here with the recommended rules from the author:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"plugins"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"unused-imports"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"no-unused-vars"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"unused-imports/no-unused-imports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"unused-imports/no-unused-vars"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"warn"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"vars"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"all"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"varsIgnorePattern"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^_"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"args"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"after-used"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"argsIgnorePattern"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^_"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when you run &lt;em&gt;ESLint&lt;/em&gt;, you should see error lines saying &lt;code&gt;error '&amp;lt;imported-var&amp;gt;' is defined but never used unused-imports/no-unused-imports&lt;/code&gt; for the files where you have unused imports, and the print should end with the following line &lt;code&gt;X errors and Y warnings potentially fixable with the --fix option.&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The number of errors should be superior to 0, unless you don't have any unused imports in your project. If that's the case, go add some for the sake of this exercise ;).&lt;/p&gt;

&lt;p&gt;Next, run &lt;code&gt;npx eslint &amp;lt;project-directory&amp;gt; --fix&lt;/code&gt; and...voilà!&lt;/p&gt;

&lt;p&gt;There should not be any unused import in your code anymore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-sort-your-imports-by-alphabetical-order"&gt;
  &lt;/a&gt;
  Bonus: sort your imports by alphabetical order
&lt;/h2&gt;

&lt;p&gt;Sorting import by alphabetical order is the last thing I want to take care of. I don't think it really matters even though it can be part of a company or a team's rules to do so.&lt;/p&gt;

&lt;p&gt;In any case, &lt;em&gt;ESLint&lt;/em&gt; allows us to do this automatically, so why deprive ourselves from it?&lt;/p&gt;

&lt;p&gt;To benefit from this feature you just need to add the &lt;a href="https://eslint.org/docs/rules/sort-imports"&gt;sort-import&lt;/a&gt; rule to your &lt;em&gt;ESLint&lt;/em&gt; configuration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"rules"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sort-imports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"error"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ignoreDeclarationSort"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately the &lt;code&gt;--fix&lt;/code&gt; option will not automatically fix multiple lines errors. For this reason, I prefer to set &lt;code&gt;ignoreDeclarationSort&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It is for the best anyway because this rule provides very little customization to order your imports. And I don't think alphabetical order at line level makes sense without taking into account the kind of import; you don't want your local imports mixed with third party libraries for instance. If you are using &lt;code&gt;TSLint&lt;/code&gt; though, check &lt;a href="https://palantir.github.io/tslint/rules/ordered-imports/"&gt;ordered-imports&lt;/a&gt; that allows you to define your import order and fix multiple lines imports.&lt;/p&gt;

&lt;p&gt;Now, running &lt;em&gt;ESLint&lt;/em&gt; with the &lt;code&gt;--fix&lt;/code&gt; option will reorder your multiple members imports. For instance, &lt;code&gt;import { d, a, c, b } from e;&lt;/code&gt; will be changed to &lt;code&gt;import { a, b, c, d } from e;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This can't hurt anyone!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>npm</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Learn coding on FreeCodeCamp without internet access</title>
      <author>Richard Barella Jr.</author>
      <pubDate>Mon, 17 May 2021 04:44:26 +0000</pubDate>
      <link>https://dev.to/ribab/learn-coding-on-freecodecamp-without-internet-access-1d6o</link>
      <guid>https://dev.to/ribab/learn-coding-on-freecodecamp-without-internet-access-1d6o</guid>
      <description>&lt;p&gt;Not all of us have the privilege of having access to the internet at all times of the day. Imagine someone who travels to another city to attend a coding bootcamp, where they learn code with the help of &lt;a href="https://www.freecodecamp.org/"&gt;freecodecamp.org&lt;/a&gt;, but when they go home, they can’t continue to learn on their own because they don’t have access to the internet at their home. Imagine also another person who struggles to learn to code on their own during the 4 hours every day when the internet happens to be working. This is the reality for many who aspire to learn how to code.&lt;/p&gt;

&lt;p&gt;In this guide, I will show you how to run &lt;a href="https://www.freecodecamp.org"&gt;freecodecamp.org&lt;/a&gt; offline, so you can complete coding certifications completely without internet access.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-you-get-started"&gt;
  &lt;/a&gt;
  Before you get started
&lt;/h2&gt;

&lt;p&gt;You will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A computer&lt;/li&gt;
&lt;li&gt;Temporary internet access for downloading FreeCodeCamp and its dependencies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FreeCodeCamp takes approximately 45 minutes to set up and install.&lt;/p&gt;

&lt;p&gt;I will be providing instructions for both Windows 10. At the beginning of each step, I link to the installation instructions on other systems. If you have any questions, let me know in the comments below this article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-installing-mongodb-on-windows"&gt;
  &lt;/a&gt;
  Step 1: Installing MongoDB on Windows
&lt;/h2&gt;

&lt;p&gt;Below are the instructions for installing MongoDB on Windows 10. For other systems, &lt;a href="https://docs.mongodb.com/manual/installation/"&gt;click here for all the tutorials on installing MongoDB on each platform&lt;/a&gt;. Otherwise, continue below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Go to &lt;a href="https://www.mongodb.com/try/download/community"&gt;https://www.mongodb.com/try/download/community&lt;/a&gt; and select the platform "Windows" and the package-type "msi". The version I installed was 4.0.24. Your screen should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NKAC1arg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxanz6bvj8isggwi3jfc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NKAC1arg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxanz6bvj8isggwi3jfc.png" alt="MongoDB step 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; After clicking "Download", locate the newly downloaded &lt;code&gt;.msi&lt;/code&gt; file and double click it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; When you get to this page, ensure all the features are selected, and that "Server" is configured to install on the local hard drive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aVlyYFHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy6bhh7bo07i18mpouxe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aVlyYFHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy6bhh7bo07i18mpouxe.png" alt="MongoDB step 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; After clicking &lt;code&gt;Next &amp;gt;&lt;/code&gt;, you'll be brought to this page. Make sure "Install MongoDB as a service" is unselected. You don't need MongoDB running as a service all the time since it uses memory. Instead, we will only start it before running FreeCodeCamp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--26V3X00O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imgwa5259xrs75yp05tw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--26V3X00O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/imgwa5259xrs75yp05tw.png" alt="MongoDB step 4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Now click through until the end of the installation instructions, and wait for MongoDB to install.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-installing-npm-and-nodejs-on-windows"&gt;
  &lt;/a&gt;
  Step 2: Installing NPM and Node.js on Windows
&lt;/h2&gt;

&lt;p&gt;Below are instructions for installing NPM and Node.js on Windows. For other systems, &lt;a href="https://nodejs.org/en/download/package-manager/"&gt;click here for instructions on installing with a package manager&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To install NPM on windows, go to &lt;a href="https://nodejs.org/"&gt;nodejs.org&lt;/a&gt; and click the download button to get the &lt;code&gt;.msi&lt;/code&gt;. Double-click the downloaded &lt;code&gt;.msi&lt;/code&gt; and step through the prompts on the Node.js setup wizard.&lt;/p&gt;

&lt;p&gt;Once you get to this page, make sure "install the necessary tools" is checked:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K5v3gXbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wod6xtq1lr3h2m4i8m9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5v3gXbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wod6xtq1lr3h2m4i8m9z.png" alt="Node.js Install Instructions for Windows 10"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will make sure any dependancies you need are met, and also will provide you with some packages like Chocolately, C, C++, Python, enabling you to make your own projects based on things you learn in FreeCodeCamp.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Chocolately is a package manager for windows, which is an easy way to install new packages through &lt;code&gt;choco install package_name&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#step-3-cloning-freecodecamp"&gt;
  &lt;/a&gt;
  Step 3: Cloning FreeCodeCamp
&lt;/h2&gt;

&lt;p&gt;In this step, for Windows use "Windows Powershell", and for Linux use the terminal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Navigate to the directory you want to install freeCodeCamp using &lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;cd&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; If you don't have Git installed, install it using your computer's package manager.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; For windows users, since we installed "Chocolately" in the previous step, we can use that to install Git, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;choco &lt;span class="nb"&gt;install &lt;/span&gt;git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Now use Git to clone FreeCodeCamp. &lt;code&gt;depth=1&lt;/code&gt; is used to only download necessary commits which will speed up the download process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone &lt;span class="nt"&gt;--depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 https://github.com/freeCodeCamp/freeCodeCamp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-installing-freecodecamp"&gt;
  &lt;/a&gt;
  Step 4: Installing FreeCodeCamp
&lt;/h2&gt;

&lt;p&gt;First, navigate into the newly created directory with &lt;code&gt;cd freeCodeCamp&lt;/code&gt;, and then run this command to start the installation process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm ci
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This part takes a while. While you wait for the dependencies to install, continue to &lt;a href="#Step-5-Starting-the-database"&gt;Step 5&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-starting-the-database"&gt;
  &lt;/a&gt;
  Step 5: Starting the database
&lt;/h2&gt;

&lt;p&gt;Open up a new powershell or terminal, and start the MongoDB database service like so:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For Linux&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mongod &lt;span class="nt"&gt;--dbpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/freeCodeCamp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;For Windows&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"C:&lt;/span&gt;&lt;span class="se"&gt;\P&lt;/span&gt;&lt;span class="s2"&gt;rogram Files&lt;/span&gt;&lt;span class="se"&gt;\M&lt;/span&gt;&lt;span class="s2"&gt;ongoDB&lt;/span&gt;&lt;span class="se"&gt;\S&lt;/span&gt;&lt;span class="s2"&gt;erver&lt;/span&gt;&lt;span class="se"&gt;\3&lt;/span&gt;&lt;span class="s2"&gt;.6&lt;/span&gt;&lt;span class="se"&gt;\b&lt;/span&gt;&lt;span class="s2"&gt;in&lt;/span&gt;&lt;span class="se"&gt;\m&lt;/span&gt;&lt;span class="s2"&gt;ongod.exe"&lt;/span&gt; &lt;span class="nt"&gt;--dbpath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/path/to/freeCodeCamp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This service will need to be started each time before you can run FreeCodeCamp in the future, so take note of this command.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-seed-the-database"&gt;
  &lt;/a&gt;
  Step 6: Seed the database
&lt;/h2&gt;

&lt;p&gt;After Step 4 completes, run this command from the powershell or terminal used in Step 4 to set up the data in the MongoDB database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run seed
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You only have to run this command once. The next time you start FreeCodeCamp, the database should already be initialized.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-7-start-freecodecamp"&gt;
  &lt;/a&gt;
  Step 7: Start FreeCodeCamp
&lt;/h2&gt;

&lt;p&gt;In the same powershell or terminal from Step 6, run this command to start FreeCodeCamp:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first time you run this command, it will take a while to complete due to building and installing FreeCodeCamp. Once you see this line, this means the command finished and FreeCodeCamp is ready for you to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;success Building development bundle - 303.218s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see from the output above, it took 5 minutes to run this command for me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-8-open-freecodecamp-in-the-browser"&gt;
  &lt;/a&gt;
  Step 8: Open FreeCodeCamp in the browser
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Open up your web browser and navigate to &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Click "Get started now, it's free!"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Now you will see "Welcome back, Development User."&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; You are now signed in as a development user, and can now access all the courses without the internet. Any progress you make will be saved in the MongoDB instance you started in &lt;a href="#Step-5-Starting-the-database"&gt;Step 5&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next time you want to start FreeCodeCamp, you can do so without internet by following both &lt;a href="#Step-5-Starting-the-database"&gt;Step 5&lt;/a&gt; and &lt;a href="#Step-8-Open-FreeCodeCamp-in-the-browser"&gt;Step 8&lt;/a&gt; in two different powershells or terminals.&lt;/p&gt;

&lt;p&gt;Have fun learning!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Reposted from &lt;a href="https://www.codingwithricky.com/2021/05/15/freecodecamp-offline/"&gt;https://www.codingwithricky.com/2021/05/15/freecodecamp-offline/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This guide is based off of FreeCodeCamp's instructions for setting up a development environment for contributing to FreeCodeCamp's source code. If you want to contribute to development, more details can be found &lt;a href="https://github.com/freeCodeCamp/freeCodeCamp/blob/main/docs/how-to-setup-freecodecamp-locally.md"&gt;at this link&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Dunning Kruger Effect and Imposter Syndrome</title>
      <author>Apoorv Tyagi</author>
      <pubDate>Mon, 17 May 2021 04:41:05 +0000</pubDate>
      <link>https://dev.to/apoorvtyagi/dunning-kruger-effect-and-imposter-syndrome-53kg</link>
      <guid>https://dev.to/apoorvtyagi/dunning-kruger-effect-and-imposter-syndrome-53kg</guid>
      <description>&lt;p&gt;This article has been in my drafts for a long time but I never clicked that Publish button as I was skeptical whether people would connect with these kinds of topics on my blog or not. But because now this thought is constantly juggling in my head, So here it goes!&lt;/p&gt;

&lt;p&gt;Software Development is one of those fields that is fast-paced, and always in flux. It’s what makes the field so challenging, interesting, and fun all at the same time.&lt;/p&gt;

&lt;p&gt;But that also means that you will constantly keep coming across the stuff you don’t know. And even the stuff that you use to think you know but actually you don’t, which is why a lot of us face the situation like the imposter syndrome and the Dunning Kruger effect (a lot!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#imposter-syndrome"&gt;
  &lt;/a&gt;
  Imposter Syndrome
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PVy7URLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621075167452/fKsgeQHhM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PVy7URLY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621075167452/fKsgeQHhM.png" alt="0\_G6AwV-9UJkDNEQLz.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For those unfamiliar with the term &lt;em&gt;imposter syndrome&lt;/em&gt;, It is when a person starts to doubt their own capabilities &amp;amp; accomplishments and believes that they are a fraud and have succeeded only through luck and soon people will realize they don't know what they are talking about.&lt;/p&gt;

&lt;p&gt;It is when someone is being too hard on themselves and not giving themselves the credit for what they deserve and achieved. Instead, the achieving individuals believe that they have been only lucky in their achievements and they haven't done anything major to achieve it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-it-good-or-bad"&gt;
  &lt;/a&gt;
  Is it good or bad?
&lt;/h3&gt;

&lt;p&gt;I think the imposter syndrome is both good and bad.&lt;/p&gt;

&lt;p&gt;It's bad because this can become a cause of anxiety and unhappiness in someone's life, who by all means should be proud of their work and accomplishments.&lt;/p&gt;

&lt;p&gt;Furthermore, I think why so many software developers face imposter syndrome is because -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Measuring all the work&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whatever solution you come up with, it’s very easy to measure the “efficiency” of that solutions. And no one would feel proud if another developer came in and improved the code by 500% in a just few days where you have spent perhaps weeks or months.&lt;/p&gt;

&lt;p&gt;This leads to the thinking that they're not qualified enough and all that they have achieved is solely through luck.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Global Competition&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From online coding contests to interviewing to raising PRs for open-source to full-fledged industry-level product development. The software industry is very big and growing very fast, so the competition is inevitable and global – it’s not limited by physical/geographic distance.&lt;/p&gt;

&lt;p&gt;And that is just another reason to not feel comfortable at all times.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Forgetting the difficulty of things&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the process of comparing, or working alongside highly capable developers, it's very easy to lose track of the high quality of work that’s going around. But I think it's OK to feel mediocre as long as you know you’re learning, growing, and contributing back to the community.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dunningkruger-effect"&gt;
  &lt;/a&gt;
  Dunning-Kruger effect
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G40UWnEu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621075191288/a6iICpvu4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G40UWnEu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621075191288/a6iICpvu4.jpeg" alt="Dunning-Kruger.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Dunning-Kruger effect is a cognitive bias stating the relationship between an individual’s perceived knowledge of the subject matter and its ACTUAL knowledge.&lt;/p&gt;

&lt;p&gt;In 1999, Dunning and Kruger conducted a study: &lt;em&gt;Unskilled and Unaware of It: How difficulties in Recognizing One's Incompetence Lead to Inflated Self-Assessments&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The result of their study found that those who are incompetent tend to overestimate their abilities, while those who are competent underestimate them&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you observe the above graph you’ll see that beginners or less experienced devs are mostly under the impression that they are familiar with all that exists in their field and they're Pro.&lt;/p&gt;

&lt;p&gt;In the simpler way of interpreting the graph, we can say, &lt;strong&gt;The inexperienced do not know what they do not know.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-why-does-it-happen"&gt;
  &lt;/a&gt;
  But WHY does it happen?
&lt;/h3&gt;

&lt;p&gt;It happens because the experienced developers, or those on the track to becoming experienced, know how vast the field of software development is. They know what they don’t understand.&lt;/p&gt;

&lt;p&gt;Can you see how this can cause an imposter syndrome to come up?&lt;/p&gt;

&lt;p&gt;By knowing this effect in addition to being aware of imposter syndrome, we can handle imposter syndrome better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-imposter-syndrome"&gt;
  &lt;/a&gt;
  Managing Imposter Syndrome
&lt;/h2&gt;

&lt;p&gt;In general, I believe the following tips help to handle imposter syndrome while understanding the Dunning Kruger Effect:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make a list of your accomplishments&lt;/strong&gt;&lt;br&gt;
Track your achievements. All of them. It doesn't matter how big or small it is. When something good happens, just make a note of it with a description of the effort you took to achieve it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Understand the bell curve&lt;/strong&gt;&lt;br&gt;
The bell curves depict that most of us are indeed average, so by learning a bit more each day or week you gradually move towards the right part of the graph. And that's what we should aim for as well. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qmmqD3DM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621075731288/LW2G0RVSI.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qmmqD3DM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621075731288/LW2G0RVSI.jpeg" alt="bell.jpg"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Peer Pairing&lt;/strong&gt;&lt;br&gt;
Making a  “peer pair” with someone who is going through the same situation as what you’re going through. It can be helpful as you'll be able to discuss both your success and failures with them. There’s a lot of fellow beginners out there in the developer community and everyone is a newbie in something. So, you can easily find someone with whom you can share your learnings.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from these suggestions, I also &lt;strong&gt;believe the most important part in preventing imposter syndrome comes from focusing on becoming a life-long learner&lt;/strong&gt;. Take some time to yourself each day to read about new developments in your field, train on a technology you haven't yet used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pick something and practice it, regularly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Dunning Kruger Effect shows that the more you know, the more you feel like you don't - accept and prosper from this. If you ever feel like you don't know anything, just remember &lt;strong&gt;It actually means progress, It means growth, It means you still have areas where you can grow and learn&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading :)&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Enjoyed what you read?&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;You can show some love by buying me a coffee☕&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/apoorvtyagi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7PD28--a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-violet.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>mentalhealth</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Futurise | Worlds largest student Discord server</title>
      <author>Harshith-Technology</author>
      <pubDate>Mon, 17 May 2021 04:08:56 +0000</pubDate>
      <link>https://dev.to/harshith/futurise-worlds-largest-student-discord-server-255d</link>
      <guid>https://dev.to/harshith/futurise-worlds-largest-student-discord-server-255d</guid>
      <description>&lt;p&gt;I have joined the larges community of students and wanted to share with you , its a best Discord students server ,a place to find like minded people , free cources, opportunities etc . &lt;br&gt;
Can join it by &lt;br&gt;
Bit.ly/Futurise&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>startup</category>
      <category>futurise</category>
      <category>discord</category>
    </item>
    <item>
      <title>Build a Weather Application using GraphQL and Chakra UI</title>
      <author>Georgey</author>
      <pubDate>Mon, 17 May 2021 04:00:55 +0000</pubDate>
      <link>https://dev.to/geobrodas/build-a-weather-application-using-graphql-and-chakra-ui-4j6o</link>
      <guid>https://dev.to/geobrodas/build-a-weather-application-using-graphql-and-chakra-ui-4j6o</guid>
      <description>&lt;p&gt;I was using RestAPI architecture initially and life was going good but turns out, GraphQL is much more popular than I thought. &lt;/p&gt;

&lt;p&gt;I then went on a quest to determine why GraphQL was so much preferred over RestAPI. &lt;/p&gt;

&lt;p&gt;My findings proved to be resourceful, and I was surprised to see the results. &lt;/p&gt;

&lt;p&gt;Let's say you're on a project, using RestAPI. You want to fetch some data. The data that comes from the endpoint is a JSON object over which we have no control, to choose which data to be received by the front-end. What you finally get is maybe a long JSON response. &lt;/p&gt;

&lt;p&gt;Now let's see what happens when you use GraphQL.&lt;br&gt;
You get a JSON response back in the same way, but it looks like I can choose over a range of parameters available, and select the data only which is required to be displayed in the application.&lt;/p&gt;

&lt;p&gt;In this way, your application is bound to perform much better and the response you receive is fast and selective.&lt;/p&gt;

&lt;p&gt;After this, I was eager to learn GraphQL, and what's better than to make a project on it.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://www.youtube.com/channel/UCFbNIlppjAuEX4znoulh0Cw"&gt;Web Dev Simplified&lt;/a&gt; a project which includes handling any API and manipulating it on your front-end is a must-have on your resume.&lt;/p&gt;

&lt;p&gt;I thought, why not make a Weather application, since I didn't make any yet. &lt;/p&gt;

&lt;p&gt;Let's make use of &lt;a href="https://graphql-weather-api.herokuapp.com/"&gt;this&lt;/a&gt; GraphQL weather API for the project.&lt;/p&gt;

&lt;p&gt;We'll be using ChakraUI on the front-end. So if you have not worked with ChakraUI before, this tutorial will be perfect to get started!&lt;/p&gt;

&lt;p&gt;Here are the steps we'll be going through in this tutorial&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Explore the PlayGround and set the parameters.&lt;/li&gt;
&lt;li&gt;Setting up front-end with ChakraUI&lt;/li&gt;
&lt;li&gt;Handling requests&lt;/li&gt;
&lt;li&gt;Using the response to display on the front-end.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#5-using-chakraui-to-show-a-loading-state-and-enable-dark-mode"&gt;
  &lt;/a&gt;
  5. Using ChakraUI to show a loading state and enable Dark Mode 
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Resources to build the project &lt;br&gt;&lt;br&gt;
GitHub repo - &lt;a href="https://github.com/GeoBrodas/graphql-weatherapp"&gt;https://github.com/GeoBrodas/graphql-weatherapp&lt;/a&gt; &lt;br&gt;&lt;br&gt;
Live Link - &lt;a href="https://graphqlweather.netlify.app/"&gt;https://graphqlweather.netlify.app/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ED_5ii90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621153148168/r7EHK2KMQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ED_5ii90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621153148168/r7EHK2KMQ.jpeg" alt="appss.JPG"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#explore-the-playground-and-set-the-parameters"&gt;
  &lt;/a&gt;
  Explore the PlayGround and set the parameters
&lt;/h2&gt;

&lt;p&gt;Head over to the &lt;a href="https://graphql-weather-api.herokuapp.com/"&gt;Weather API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You'll see an interactive playground in action.&lt;/p&gt;

&lt;p&gt;What you see is a query that contains a bunch of parameters. Now if you run the query, you'll see a response, with resultant data for each parameter that was entered.&lt;/p&gt;

&lt;p&gt;Now what we want is very concise. The parameters that I will be using are &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;weather&lt;/code&gt;, &lt;code&gt;temperature&lt;/code&gt;, and &lt;code&gt;wind&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The query now after modifying should look like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;query {
  getCityByName(name: &amp;lt;Your_City&amp;gt;) {
    name
    weather {
      summary {
        title
        description
      }
      temperature {
        actual
        feelsLike
      }
      wind {
        speed
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In place of &lt;code&gt;Your_City&lt;/code&gt;, enter your city or any of your choice. &lt;/p&gt;

&lt;p&gt;Still, we won't be using all the data, but for now, go ahead and run the query.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-frontend-with-chakraui"&gt;
  &lt;/a&gt;
  Setting up front-end with ChakraUI
&lt;/h2&gt;

&lt;p&gt;Let's now set up the front-end with Chakra UI&lt;/p&gt;

&lt;p&gt;First Install Chakra UI using npm&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now set up the provider in the root file - &lt;code&gt;src/index.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import ReactDOM from 'react-dom'
import { ChakraProvider, ColorModeScript } from '@chakra-ui/react'
import App from './components/App'

ReactDOM.render(
  &amp;lt;ChakraProvider&amp;gt;
    &amp;lt;ColorModeScript initialColorMode="light" /&amp;gt;
    &amp;lt;App /&amp;gt;
  &amp;lt;/ChakraProvider&amp;gt;,
  document.getElementById('root')
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;ColorModeScript&lt;/code&gt; is a component for tracking the &lt;code&gt;light&lt;/code&gt; and &lt;code&gt;dark&lt;/code&gt; mode, which we will be enabling towards the end. &lt;/p&gt;

&lt;p&gt;Let's now make a new component called &lt;code&gt;Dashboard.js&lt;/code&gt; in the &lt;code&gt;src/components&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;First, let's make an Icon button for toggling the &lt;code&gt;dark&lt;/code&gt; mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import { VStack, IconButton } from '@chakra-ui/react'

export default function Dashboard ( ) {
return (
  &amp;lt;VSack&amp;gt;
    &amp;lt;IconButton
        aria-label="Toggle Dark Mode"
        m="8"
        size="md"
        alignSelf="flex-end"
      /&amp;gt;
  &amp;lt;/VStack&amp;gt;
)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now prepare the Heading and Input fields&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React, { useState } from 'react'
import {
  Input,
  VStack,
  HStack,
  IconButton,
  Heading
} from '@chakra-ui/react'
import { FiSearch } from 'react-icons/fi'

export default function Dashboard ( ) {

  const [result, setResult] = useState('')
  const [value, setValue] = useState('')

 return (
&amp;lt;VStack&amp;gt;
      &amp;lt;IconButton
        aria-label="Toggle Dark Mode"
        m="8"
        size="md"
        alignSelf="flex-end"
      /&amp;gt;
      &amp;lt;Heading mb="8" size="xl"&amp;gt;
        Search your city
      &amp;lt;/Heading&amp;gt;
      &amp;lt;HStack&amp;gt;
        &amp;lt;Input
          type="text"
          placeholder="Enter city name"
          value={result}
          onChange={(event) =&amp;gt; setResult(event.target.value)}
        /&amp;gt;
        &amp;lt;IconButton
          aria-label="Search city button"
          icon={&amp;lt;FiSearch /&amp;gt;}
          onClick={() =&amp;gt; {
            setValue(result)
            getWeather()
            //Errormessage()
          }}
        &amp;gt;
          Search
        &amp;lt;/IconButton&amp;gt;
      &amp;lt;/HStack&amp;gt;
&amp;lt;/VStack&amp;gt;
)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are now done with the input fields. Go ahead and console log the data from the input fields to check whether the states are behaving the way they should be. If you run into any errors, don't forget to check the GitHub repo I have shared.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handling-requests"&gt;
  &lt;/a&gt;
  Handling requests
&lt;/h2&gt;

&lt;p&gt;To interact with the API, we need to install some packages to set up GraphQL in the app itself.&lt;/p&gt;

&lt;p&gt;Install the following packages,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install graphql @apollo/client
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like how we wrapped &lt;code&gt;ChakraProvider&lt;/code&gt; around our &lt;code&gt;App&lt;/code&gt; component, we need to do the same for our App to handle graphQL requests.&lt;/p&gt;

&lt;p&gt;Make the following changes in your &lt;code&gt;App.js&lt;/code&gt; file inside the &lt;code&gt;src/components&lt;/code&gt; directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react'
import { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client'
import Dashboard from './Dashboard'

export default function App() {
  const client = new ApolloClient({
    cache: new InMemoryCache(),
    uri: 'https://graphql-weather-api.herokuapp.com/',
  })

  return (
    &amp;lt;ApolloProvider client={client}&amp;gt;
      &amp;lt;Dashboard /&amp;gt;
    &amp;lt;/ApolloProvider&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are defining a constant, and initializing the Apollo client by feeding in 2 parameters- &lt;code&gt;cache&lt;/code&gt; and &lt;code&gt;uri&lt;/code&gt;. Parameter &lt;code&gt;uri&lt;/code&gt; is the default API end-point we are using here, and &lt;code&gt;cache&lt;/code&gt; makes sure that the app doesn't send unnecessary requests for the same data.&lt;/p&gt;

&lt;p&gt;Now let's create a new file say &lt;code&gt;Queries.js&lt;/code&gt;. I will create this in a separate directory &lt;code&gt;src/components/graphql&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The file will contain the query, which we had earlier created in the playground.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { gql } from '@apollo/client'

export const GET_WEATHER_QUERY = gql`
  query getCityByName($name: String!) {
    getCityByName(name: $name) {
      name
      country
      weather {
        summary {
          title
          description
        }
        temperature {
          actual
          feelsLike
        }
        wind {
          speed
        }
      }
    }
  }
`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For passing in the name of the city, we'll pass it through &lt;code&gt;$name&lt;/code&gt;, passed through the input field.&lt;/p&gt;

&lt;p&gt;If you have worked with MongoDB schemas, this notation will be much more familiar.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To know more about GraphQL schema types visit the documentation at&lt;br&gt;
&lt;a href="https://graphql.org/learn/schema/"&gt;https://graphql.org/learn/schema/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now let's make a request to the API endpoint and log the response.&lt;/p&gt;

&lt;p&gt;Head over to the &lt;code&gt;Dashboard.js&lt;/code&gt; file and make the following changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useLazyQuery } from '@apollo/client'
import { GET_WEATHER_QUERY } from '../graphql/Queries'

export default function Dashboard ( ) {
  const [getWeather, { loading, data, error }] = useLazyQuery(
    GET_WEATHER_QUERY,
    {
      variables: { name: value },
    }
  )

// Search button for input field
&amp;lt;IconButton
    aria-label="Search city button"
    icon={&amp;lt;FiSearch /&amp;gt;}
    onClick={() =&amp;gt; {
      setValue(result)
      getWeather()
      }}
 &amp;gt;
    Search
&amp;lt;/IconButton&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the button is clicked, two events get triggered. One is the setValue() state we defined earlier and getWeather( ) function upon which the request is sent and in turn, the response is fetched and stored in the &lt;code&gt;data&lt;/code&gt; variable. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; state is passed to the &lt;code&gt;name&lt;/code&gt; property which we defined earlier in the &lt;code&gt;src/components/graphql/Queries.js&lt;/code&gt; file.&lt;br&gt;
 Now if you &lt;code&gt;console.log(data)&lt;/code&gt;, you should be able to view the response sent back from the API endpoint.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-the-response-to-display-on-the-frontend"&gt;
  &lt;/a&gt;
  Using the response to display on the front-end
&lt;/h2&gt;

&lt;p&gt;The response we get back from the end-point is an object, which we got hold of previously with the  &lt;code&gt;data&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;Now let's display the response to the front-end in form of a sleek table.&lt;/p&gt;

&lt;p&gt;We'll make use of Chakra Ui's &lt;code&gt;Table&lt;/code&gt; component here.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Refer Chakra UI's documentation if you get lost any time &lt;br&gt;&lt;br&gt;
&lt;a href="https://chakra-ui.com/docs/data-display/table"&gt;https://chakra-ui.com/docs/data-display/table&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Import the following components&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import {
  Stack,
  Table,
  Tbody,
  Tr,
  Td,
  TableCaption,
  StackDivider,
  HStack,
  Divider,
} from '@chakra-ui/react'

// Dashboard component
&amp;lt;Stack&amp;gt;
        &amp;lt;Divider mt="4" mb="4" borderColor="gray.100" /&amp;gt;
        {data &amp;amp;&amp;amp; (
          &amp;lt;&amp;gt;
            &amp;lt;VStack
              divider={&amp;lt;StackDivider /&amp;gt;}
              borderColor="gray.100"
              borderWidth="2px"
              p="4"
              borderRadius="lg"
              w="100%"
              maxW={{ base: '90vw', sm: '80vw', lg: '50vw', xl: '40vw' }}
              alignItems="stretch"
            &amp;gt;
              &amp;lt;Table variant="simple"&amp;gt;
                &amp;lt;TableCaption&amp;gt;
                  Weather in {data.getCityByName.name} right now
                &amp;lt;/TableCaption&amp;gt;

                &amp;lt;Tbody&amp;gt;
                  &amp;lt;Tr&amp;gt;
                    &amp;lt;Td&amp;gt;Temperature&amp;lt;/Td&amp;gt;

                    &amp;lt;Td textAlign="right"&amp;gt;
                      {Math.floor(
                        data.getCityByName.weather.temperature.actual - 273
                      ) + ' '}
                      Deg C
                    &amp;lt;/Td&amp;gt;
                  &amp;lt;/Tr&amp;gt;
                  &amp;lt;Tr&amp;gt;
                    &amp;lt;Td&amp;gt;Feels like&amp;lt;/Td&amp;gt;
                    &amp;lt;Td textAlign="right"&amp;gt;
                      {data.getCityByName.weather.summary.description}
                    &amp;lt;/Td&amp;gt;
                  &amp;lt;/Tr&amp;gt;
                  &amp;lt;Tr&amp;gt;
                    &amp;lt;Td&amp;gt;Wind speed (mph)&amp;lt;/Td&amp;gt;

                    &amp;lt;Td textAlign="right"&amp;gt;
                      {data.getCityByName.weather.wind.speed + ' '}
                    &amp;lt;/Td&amp;gt;
                  &amp;lt;/Tr&amp;gt;
                &amp;lt;/Tbody&amp;gt;
              &amp;lt;/Table&amp;gt;
            &amp;lt;/VStack&amp;gt;
          &amp;lt;/&amp;gt;
        )}
      &amp;lt;/Stack&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's similar to the HTML tables we used to do back in the old days. But most importantly we can get hold of the data coming back from the response. &lt;/p&gt;

&lt;p&gt;Here, if you have noticed, I have converted the kelvin unit which was by default coming back from the response, to celsius using the formula - &lt;code&gt;temperature in kelvin - 273 = Temperature in celsius&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;I would suggest reading the Chakra UI documentation for more clarity on Chakra Ui &lt;code&gt;Table&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Your final output should look something like this - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zaHHao7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621163884128/SIedpPpy8.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zaHHao7p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621163884128/SIedpPpy8.jpeg" alt="result-3-fix.JPG"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-chakraui-to-show-a-loading-state-and-enable-dark-mode"&gt;
  &lt;/a&gt;
  Using ChakraUI to show a loading state and enable Dark Mode
&lt;/h2&gt;

&lt;p&gt;While writing the logic for getting requests from the GraphQL server, we had destructured a variable called &lt;code&gt;loading&lt;/code&gt;. This state can be used to determine whether the process of retrieving the request is under process or not.&lt;/p&gt;

&lt;p&gt;We can make use of Chakra UI's &lt;code&gt;spinner&lt;/code&gt; component here.&lt;/p&gt;

&lt;p&gt;The logic for displaying the spinner would be as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { spinner } from "@chakra-ui/react" 
// Dashboard.js component
&amp;lt;Stack&amp;gt;
        {loading &amp;amp;&amp;amp; (
          &amp;lt;&amp;gt;
            &amp;lt;Spinner
              thickness="4px"
              speed="0.65s"
              emptyColor="gray.200"
              color="blue.500"
              size="xl"
            /&amp;gt;
          &amp;lt;/&amp;gt;
        )}
&amp;lt;/Stack&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;and operator&lt;/code&gt; will ensure that the spinner component will only get displayed if the loading state is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lJg5b5Sk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621174464648/GxNOB0GaQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lJg5b5Sk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621174464648/GxNOB0GaQ.gif" alt="Hnet.com-image.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's now enable dark-mode in our app!&lt;/p&gt;

&lt;p&gt;Head over to the &lt;code&gt;Dashboard.js&lt;/code&gt; file and make the toggle button for dark mode functional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useColorMode } from "@chakra-ui/react
// for the icon to change on toggle - 
// if light: show Moon Icon else show Sun Icon
import { FiMoon, FiSun } from 'react-icons/fi'

const { colorMode, toggleColorMode } = useColorMode()

// toggle button for dark/light mode
&amp;lt;IconButton
        aria-label="Toggle Dark Mode"
        icon={colorMode === 'light' ? &amp;lt;FiMoon /&amp;gt; : &amp;lt;FiSun /&amp;gt;}
        m="8"
        size="md"
        alignSelf="flex-end"
        onClick={toggleColorMode}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now, when the user clicks on the button, &lt;code&gt;toggleColorMode&lt;/code&gt; is triggered. In turn, changes the &lt;code&gt;colorMode&lt;/code&gt; state, hence changes the icon based on light / dark, which is implemented using the ternary operator.&lt;/p&gt;

&lt;p&gt;Well, congrats on that great hustle! You have a Weather application ready at your disposal.&lt;/p&gt;

&lt;p&gt;Make sure you add it to your resume!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for Reading🎉
&lt;/h2&gt;

&lt;p&gt;It's great to see that you have enjoyed the article. Now let's not do the same thing. Try to add some of your own features to the app, and make it unique from the rest. Make sure you tag me on &lt;a href="https://twitter.com/BrodasGeo"&gt;Twitter&lt;/a&gt; if you have built this application. &lt;/p&gt;

&lt;p&gt;On to another blog, some other day, till then adios👋. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#support-me"&gt;
  &lt;/a&gt;
  Support me🙌
&lt;/h1&gt;

&lt;p&gt;My constant source of energy is coffee! If you feel I deserve one,&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/geobrodas"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vu9xrqH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.buymeacoffee.com/button-api/%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dgeobrodas%26button_colour%3DFF5F5F%26font_colour%3Dffffff%26font_family%3DCookie%26outline_colour%3D000000%26coffee_colour%3DFFDD00"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>showdev</category>
      <category>tutorial</category>
      <category>react</category>
    </item>
    <item>
      <title>Getting started with HTML Forms</title>
      <author>Patricia C.</author>
      <pubDate>Mon, 17 May 2021 03:59:07 +0000</pubDate>
      <link>https://dev.to/chica25/getting-started-with-html-forms-1jfl</link>
      <guid>https://dev.to/chica25/getting-started-with-html-forms-1jfl</guid>
      <description>&lt;p&gt;When I first started my coding journey, one of the things that I’ve noticed is that forms are everywhere, and it’s useful to get in the habit of creating forms, whether you’re a frontend or backend engineer.&lt;/p&gt;

&lt;p&gt;Here are several steps to create a simple login form with HTML and CSS&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#start-with-the-html-file"&gt;
  &lt;/a&gt;
  Start with the HTML file
&lt;/h3&gt;

&lt;p&gt;Inside the body tag, enter a div tag with a class name, then the form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
   &amp;lt;meta charset="UTF-8"&amp;gt;
   &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
   &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
   &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
   &amp;lt;title&amp;gt;Form&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
   &amp;lt;div class="container"&amp;gt;
       &amp;lt;h2&amp;gt;Login&amp;lt;/h2&amp;gt;
        &amp;lt;form&amp;gt;
        &amp;lt;/form&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the form tag, implement the inputs for the email and password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form&amp;gt; 
&amp;lt;input type="email" class="input-box" placeholder="enter your email" required&amp;gt;
      &amp;lt;input type="password" class="input-box" placeholder="enter your password" required&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;Create a universal selector with a 0 margin and padding.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* {
   margin: 0;
   padding: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Enter the class attribute, &lt;strong&gt;&lt;em&gt;.container&lt;/em&gt;&lt;/strong&gt; as shown in the code below with the additional properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container {
   width: 100%;
   height: 100vh;
   font-family: sans-serif;
   background: rgb(255, 255, 255);
   color: #fff;
   display: flex;
   align-items: center;
   justify-content: center;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And there you have it. &lt;/p&gt;

&lt;p&gt;Photo by Andrea Piacquadio from Pexels&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
    </item>
  </channel>
</rss>
