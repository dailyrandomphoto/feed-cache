<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Liman ID Bilgisi Nasıl Elde Edilir</title>
      <author>Ahmed Said Çıtak</author>
      <pubDate>Tue, 07 Sep 2021 14:24:29 +0000</pubDate>
      <link>https://dev.to/aciklab/liman-id-bilgisi-nasil-elde-edilir-38n6</link>
      <guid>https://dev.to/aciklab/liman-id-bilgisi-nasil-elde-edilir-38n6</guid>
      <description>&lt;p&gt;Liman id bilgisi, liman ana ekranında bulunan profil kısmından görüntülenebiliyor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sMNMZske--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96hu2341fesexehkcdxc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sMNMZske--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/96hu2341fesexehkcdxc.png" alt="Screenshot_2021-09-01_16-20-11"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Liman ana sayfasında ekranın sağ üst kısmında limana giriş yapılan kullanıcı profili gözüküyor. Profil üzerine tıkladığımızda açılan modal ile birlikte liman bilgilerine erişebiliyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dLUpYmj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjwapunh5n24b8euz9tf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLUpYmj_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vjwapunh5n24b8euz9tf.png" alt="alt text"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Burada bulunan &lt;strong&gt;liman id&lt;/strong&gt; kısmından gerekli bilgiyi temin edebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aZidSCCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnd2ofkcj5ut3qdiuo3z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aZidSCCl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnd2ofkcj5ut3qdiuo3z.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>liman</category>
      <category>id</category>
      <category>server</category>
      <category>control</category>
    </item>
    <item>
      <title>Mudar de Carreira (ou emprego): Como decidir?</title>
      <author>TechSisters Brasil</author>
      <pubDate>Tue, 07 Sep 2021 14:07:18 +0000</pubDate>
      <link>https://dev.to/techsistersbrasil/mudar-de-carreira-ou-emprego-como-decidir-495h</link>
      <guid>https://dev.to/techsistersbrasil/mudar-de-carreira-ou-emprego-como-decidir-495h</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IIeQvGzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg1os5rpzjbs8u20jypy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IIeQvGzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg1os5rpzjbs8u20jypy.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Se você chegou nesse post, imagino que é porque isso já vem martelando na sua cabeça há algum tempo mas você está sentindo alguma dificuldade nesse processo. Muita coisa passa pela cabeça e o velho conselho: “Saia da sua zona de conforto!” chega a dar um arrepio na espinha. &lt;em&gt;&lt;strong&gt;Mas tudo bem, mudanças nem sempre são fáceis e na maioria das vezes levam tempo para acontecer.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Eu já estive nessa posição mais de uma vez e, ainda assim, por muito tempo me vi paralisada na tomada de decisões importantes, quase que esperando por um sinal do universo para seguir por um caminho ou outro. 🛤&lt;/p&gt;

&lt;p&gt;A verdade é que ficamos acomodados dentro da nossa vivência e por mais que a gente não esteja muito feliz ainda &lt;em&gt;“é mais fácil permanecer no mesmo lugar”&lt;/em&gt; afinal, a gente já sabe como tudo funciona e o que precisa ser feito.&lt;/p&gt;

&lt;p&gt;Até que certo dia, vendo um vídeo no youtube, uma conversa me chamou bastante atenção e eu entendi que:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;A vida é feita de escolhas e ninguém além de você pode tomar a decisão de sair de onde você está.&lt;/strong&gt; Nesse dia, entendi que NÃO escolher também é uma escolha e isso irá gerar uma consequência: O fato de permanecer no mesmo lugar.&lt;/em&gt; ❌&lt;/p&gt;

&lt;p&gt;A partir dai eu resolvi que não queria ficar no mesmo lugar e procurei uma estratégia para escolher com mais precisão. Pra isso eu precisava colocar os pés no chão e entender onde cada caminho poderia me levar e pra isso eu usei algumas dicas que me ajudaram a fazer com que essa escolha fizesse mais sentido e são as que eu vou compartilhar aqui hoje. Então vamos lá!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt; Passo 01: Coloque no papel todas as possibilidades que você tem agora&lt;/strong&gt; ✅&lt;br&gt;
Pense no que você faz, você gosta de fazer isso? É possível continuar trabalhando com isso nesse momento? &lt;strong&gt;SE SIM&lt;/strong&gt;, quais a opções de cargos e/ou empresas em que você poderia se encaixar?&lt;/p&gt;

&lt;p&gt;Analise o que você tem a disposição e o que você pode fazer para realizar essa mudança, mesmo ainda estando nesse ambiente.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SE NÃO&lt;/strong&gt;, pense nas coisas que você é bom! Anote o que você poderia ou gostaria de fazer no seu futuro próximo e como isso poderia ser realizado, mesmo que a longo prazo. Faça uma pesquisa de mercado, há algo em que você pode se encaixar?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemplo: Hoje, sou advogada, mas gostaria de mudar de carreira para algo que me porporcionasse realização profissional e que aumentasse minha renda nos próximos anos. Tenho pensado em algo relacionado a área de Tecnologia da Informação, pois é uma área em constante expansão.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt; Passo 02: Crie uma linha do tempo&lt;/strong&gt; ✅&lt;br&gt;
A partir do que você pensou no Passo 01, coloque suas ideias no papel! Projete as possibilidades escolhidas a médio e longo prazo. Tente imaginar tudo com a maior quantidade de detalhes que você tiver, alinhando com o tempo que você tem e o que você pode fazer nos próximos meses/anos.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemplo: Ainda atuo em alguns processos como advogada, posso esperar terminar todos eles e fazer uma faculdade, mas isso irá adiar meus planos um pouco mais. Ou posso utilizar meu tempo livre para estudar paralelamente e já ir me qualificando o que poderia acelerar minha transição de carreira. Posso investir meu tempo em cursos gratuitos, até decidir o que quero de verdade e investir em um curso técnico pago. Ou Posso não fazer nada e pensar sobre isso daqui alguns meses.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- Lembre que todas as alternativas, até mesmo a de não fazer nada, geram uma consequencia. Como você encara cada uma delas e qual faz mais sentido pra você agora?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt;&amp;gt; Passo 03: O que eu posso fazer a partir de hoje, com as ideias que eu tenho em mente?&lt;/strong&gt; ✅&lt;br&gt;
Depois que você colocou tudo no papel, escolha a opção que faz mais sentido pra você e coloque em prática! Iniciar pesquisas na área, traçar um plano de estudos semanal, colocar metas para atividades que você precisa fazer, se matricule em um curso, converse com pessoas da área, enfim, começe a colocar as coisas em prática!&lt;/p&gt;

&lt;p&gt;A partir daí é com você. &lt;strong&gt;TESTE! Você só saberá o que você gosta ou não gosta TESTANDO!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Entenda, não há nada de errado em começar um curso, depois trancar e iniciar outro. Entrar num estágio em uma empresa e no ano seguinte partir pra outra oportunidade. Este é o momento de você conhecer o mercado e entender o que funciona pra você.&lt;/p&gt;

&lt;p&gt;É claro que você nao vai virar uma bola de &lt;em&gt;pingue-pongue&lt;/em&gt; e ficar pulando de lugar em lugar, mas também não há nada de errado em conhecer o ambiente. Quando a gente não tem referência sobre uma área essa é a melhor maneira de se inserir, conhecer pessoas e criar laços.&lt;/p&gt;

&lt;p&gt;Por fim, &lt;strong&gt;entre em comunidades e converse com pessoas da sua nova carreira/área.&lt;/strong&gt; Mesmo nos cenários mais improváveis pessoas com os mesmos objetivos se ajudam e se motivam entre si e nesse momento, é isso que você precisa. Ver outras pessoas trilhando o mesmo caminho para quando o medo bater você tenha com quem conversar e em quem se inspirar.&lt;/p&gt;

&lt;p&gt;Nada é fácil e não há uma fórmula mágica. Mas isso não quer dizer que você não possa utilizar estratégias que tornem esse caminho mais agradável. E eu realmente espero que a partir dessa leitura e da aplicação das técnicas — &lt;em&gt;colocar no papel e visualizar as possibilidades faz toda diferença!&lt;/em&gt; — você se sinta mais confortável para encarar esse algo novo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parafraseando Fernando Teixeira de Andrade:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Há um tempo em que é preciso abandonar as roupas usadas, que já tem a forma do nosso corpo, e esquecer os nossos caminhos, que nos levam sempre aos mesmos lugares. É o tempo da travessia: e, se não ousarmos fazê-la, teremos ficado, para sempre, à margem de nós mesmos.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Se esse artigo foi útil pra você ou se você se lembrou de alguém que está passando por isso, envia pra ele! Todo mundo sai ganhando quando a gente compartilha o conhecimento. &lt;strong&gt;Faça diferença na vida de alguém!&lt;/strong&gt; 🙂&lt;/p&gt;

&lt;p&gt;Leia mais sobre Transição de Carreira &lt;a href="https://dev.to/simonepedrosa/o-mito-da-transicao-de-carreira-4n9"&gt;aqui!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>carreira</category>
    </item>
    <item>
      <title>10 New AWS Amplify Features to Check Out</title>
      <author>Ali Spittel</author>
      <pubDate>Tue, 07 Sep 2021 13:56:40 +0000</pubDate>
      <link>https://dev.to/aws/10-new-aws-amplify-features-to-check-out-4291</link>
      <guid>https://dev.to/aws/10-new-aws-amplify-features-to-check-out-4291</guid>
      <description>&lt;p&gt;My team at AWS has been releasing a &lt;strong&gt;ton&lt;/strong&gt; of new features that make &lt;a href="https://docs.amplify.aws/"&gt;AWS Amplify&lt;/a&gt; better than ever. Here are ten things released in the past year that I'm personally excited about, and that will speed up your development workflows!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-nextjs-support"&gt;
  &lt;/a&gt;
  1. Next.js Support
&lt;/h2&gt;

&lt;p&gt;Next.js is the latest and greatest in JavaScript frameworks. It allows for both &lt;a href="https://welearncode.com/ssr-vs-ssg/"&gt;static site generation and server-side rendering&lt;/a&gt;, which makes your sites more performant leading to a better experience for your customers. Amplify has added support for Next.js -- you can deploy server-side rendered and incremental static regenerated apps to Amplify Hosting, add in Amplify backend resources, and then you can use the Amplify JavaScript libraries to server-side render your data.&lt;/p&gt;

&lt;p&gt;Within a &lt;code&gt;getServerSideProps&lt;/code&gt;, for example, you can use the &lt;code&gt;withSSRContext&lt;/code&gt; function to allow your Amplify JavaScript code to run on the server instead of the browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getServerSideProps&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SSR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withSSRContext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;SSR&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;API&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;graphql&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;listParks&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;parks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listParks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, all you need to do to deploy is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/create-and-activate-aws-account/"&gt;Create an AWS account&lt;/a&gt; if you don't already have one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Navigate to &lt;a href="https://console.aws.amazon.com/amplify/home"&gt;the Amplify Console&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the orange &lt;code&gt;connect app&lt;/code&gt; button.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Choose &lt;code&gt;GitHub&lt;/code&gt; in the &lt;code&gt;From your existing code&lt;/code&gt; menu, and click continue&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_GanIso8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/beginners-guide-react-2020/choose-github.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_GanIso8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/beginners-guide-react-2020/choose-github.png" alt="Amplify interface with different remotes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Type in the name of your GitHub repo you just created (it should autofill!) and then click &lt;code&gt;next&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QFQLPlqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/beginners-guide-react-2020/select-your-repo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QFQLPlqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/beginners-guide-react-2020/select-your-repo.png" alt="Amplify interface with name of repo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The build settings will auto-populate, and so you can just click &lt;code&gt;next&lt;/code&gt; on the &lt;code&gt;Configure build settings&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click &lt;code&gt;Save and deploy&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;No custom settings are needed -- it will create a AWS Lambda@Edge function behind the scenes for you to do the server-side rendering.&lt;/p&gt;

&lt;p&gt;If you want to read a full tutorial on how to implement this in your app, &lt;a href="https://welearncode.com/build-a-fullstack-app-nextjs/"&gt;check this out!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-sign-in-with-apple"&gt;
  &lt;/a&gt;
  2. Sign in with Apple
&lt;/h2&gt;

&lt;p&gt;A lot of developers need to integrate "Sign in with Apple" to their apps so that users can use their pre-created Apple accounts instead of creating one from scratch. You can use the Amplify Admin UI or command line interface to enable Sign in With Apple and tie it to your Apple Developer Account, and then you can use Amplify's libraries to implement the frontend authentication flow!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xmO-xG0W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z366uavjush4uy1apvbw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmO-xG0W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z366uavjush4uy1apvbw.png" alt="Admin UI Interface with Sign in with Apple"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out &lt;a href="https://welearncode.com/siwa/"&gt;this tutorial&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-amplify-geo-developer-preview"&gt;
  &lt;/a&gt;
  3. Amplify Geo developer preview
&lt;/h2&gt;

&lt;p&gt;Did you know that you can create maps with Amplify? Right now Amplify Geo is in developer preview mode -- you can create a map, then add markers and location based search to it.&lt;/p&gt;

&lt;p&gt;To create a map, first create an HTML element to attach it to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"map"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you can use the helper functions to create a map with a few lines of code!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createMap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;maplibre-gl-js-amplify&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;maplibre-gl/dist/maplibre-gl.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;initializeMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createMap&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;map&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;initializeMap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about how to implement Amplify Geo &lt;a href="https://docs.amplify.aws/lib/geo/getting-started/q/platform/js/"&gt;in the docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-datastore-multiauth"&gt;
  &lt;/a&gt;
  4. DataStore Multi-auth
&lt;/h2&gt;

&lt;p&gt;AWS Amplify DataStore allows you to create online and offline available data with no extra code on your end. This is super helpful for many &lt;a href="https://welearncode.com/offline-editor/"&gt;offline data patterns&lt;/a&gt; and mobile apps.&lt;/p&gt;

&lt;p&gt;It also has support for adding different authorization rules so that different users can be allowed or restricted from performing certain actions. For example, you may want admins to be able to delete data, a regular user to be able to create data, and then unauthenticated users to read data. As of a few months ago, DataStore supports multiple types of authorization like that example!&lt;/p&gt;

&lt;p&gt;Using the Admin UI, you can add different authorization rules for different types of users:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vKG-3CqI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hjo8l1kks7g1g1mzmh9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vKG-3CqI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0hjo8l1kks7g1g1mzmh9.png" alt="admin ui interface showing different authorization rules"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're interested in a full tutorial on how to integrate this into your app, check out &lt;a href="https://welearncode.com/auth-react/"&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-environmental-variables-and-secrets"&gt;
  &lt;/a&gt;
  5. Environmental Variables and Secrets
&lt;/h2&gt;

&lt;p&gt;You can create AWS Lambda Functions using Amplify, either within a REST API or outside of it. Now, you can add environmental variables and secrets to your functions -- I used this to &lt;a href="https://welearncode.com/stripe-amplify/"&gt;create a function that would create a user account every time they bought an item from my site with Stripe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To do this, first create a function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;➜  next10-blog git:&lt;span class="o"&gt;(&lt;/span&gt;main&lt;span class="o"&gt;)&lt;/span&gt; ✗ amplify add &lt;span class="k"&gt;function&lt;/span&gt;
? Select which capability you want to add: Lambda &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;serverless &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
? Provide an AWS Lambda &lt;span class="k"&gt;function &lt;/span&gt;name: next10bloge53fc67d
? Choose the runtime that you want to use: NodeJS
? Choose the &lt;span class="k"&gt;function &lt;/span&gt;template that you want to use: Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, under advanced configuration, you can add environmental variables and secrets!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;? Do you want to configure environment variables &lt;span class="k"&gt;for &lt;/span&gt;this &lt;span class="k"&gt;function&lt;/span&gt;? Yes
? Enter the environment variable name: github_user
? Enter the environment variable value: aspittel
? Select what you want to &lt;span class="k"&gt;do &lt;/span&gt;with environment variables: Im &lt;span class="k"&gt;done&lt;/span&gt;
? Do you want to configure secret values this &lt;span class="k"&gt;function &lt;/span&gt;can access? Yes
? Enter a secret name &lt;span class="o"&gt;(&lt;/span&gt;this is the key used to look up the secret value&lt;span class="o"&gt;)&lt;/span&gt;: github_key
? Enter the value &lt;span class="k"&gt;for &lt;/span&gt;github_key: &lt;span class="o"&gt;[&lt;/span&gt;hidden]
? What &lt;span class="k"&gt;do &lt;/span&gt;you want to &lt;span class="k"&gt;do&lt;/span&gt;? Im &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can use them in your function! For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;aws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SSM&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getParameters&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;Names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;github_key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secretName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;secretName&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
      &lt;span class="na"&gt;WithDecryption&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;Parameters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;Value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-admin-ui-data-explorer"&gt;
  &lt;/a&gt;
  6. Admin UI Data Explorer
&lt;/h2&gt;

&lt;p&gt;As a software engineer, I can't tell you how many times I've had to create a secondary admin app for the company use to manage data. The Amplify Admin UI solves this problem by auto-generating one for you! You can manage application data using its data explorer. You can perform all the CRUD operations on the data, and even manage your app's users!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3TPn4SQH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj686q5v0l0t2iad9kko.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3TPn4SQH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj686q5v0l0t2iad9kko.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://welearncode.com/intro-amplify-admin-ui/"&gt;Here's a full tutorial on using the Admin UI.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-data-seeding"&gt;
  &lt;/a&gt;
  7. Data Seeding
&lt;/h2&gt;

&lt;p&gt;To keep going with the awesome Admin UI features, you can also automatically generate seed data for your apps. Often, you'll need test data when you're developing your app to make sure it's working as promised. You can autogenerate this data with the Admin UI! You can choose how many rows to generate, and then it will use your fields data types to generate the data!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ziHjVlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/datastore-seed.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ziHjVlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/datastore-seed.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-datastore-selective-sync-and-sort"&gt;
  &lt;/a&gt;
  8. DataStore selective sync and sort
&lt;/h2&gt;

&lt;p&gt;DataStore allows your data to be available online and offline. In the browser it stores your data in IndexedDB by default. That being said, sometimes each user doesn't need access to all data, or only some of the application's data needs to be available offline. You can set up selective sync to only sync some of the data locally.&lt;/p&gt;

&lt;p&gt;If you wanted to only store data that is associated with a certain user ID, you could configure DataStore like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;syncExpressions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;syncExpression&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Song&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eq&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition, there's support for sorting data! So, if you wanted to list all of your users alphabetically, you could write a query like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;DataStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Predicates&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ALL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SortDirection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ASCENDING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://docs.amplify.aws/lib/datastore/getting-started/q/platform/js/"&gt;Here's DataStore's full documentation.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-amplify-flutter"&gt;
  &lt;/a&gt;
  9. Amplify Flutter
&lt;/h2&gt;

&lt;p&gt;I'll be the first to admit that I'm a true web developer and really have no mobile knowledge. That being said, I'm really excited about Amplify releasing support for Flutter. Flutter allows for cross-platform development, and it seems to be picking up steam in the community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.amplify.aws/start/q/integration/flutter/"&gt;Here's a tutorial on how to get started with Amplify and Flutter!&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-amplify-containers"&gt;
  &lt;/a&gt;
  10. Amplify containers
&lt;/h2&gt;

&lt;p&gt;So Amplify already has great support for serverless functions and GraphQL APIs, but sometimes you need to migrate an existing app over to Amplify. Also, sometimes you need to have long-running tasks, which don't integrate well into Lambda Functions. Or you want to write a full Django or Rails app which uses a bunch of other libraries which may not integrate well into a Lambda Function. Well, good news! Amplify supports AWS Fargate Containers! You can deploy anything that runs in a Docker Container within Amplify.&lt;/p&gt;

&lt;p&gt;First, add an API like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;amplify add api

? Please &lt;span class="k"&gt;select &lt;/span&gt;from one of the below mentioned services:
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; REST
? Which service would you like to use
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; API Gateway + AWS Fargate &lt;span class="o"&gt;(&lt;/span&gt;Container-based&lt;span class="o"&gt;)&lt;/span&gt;
? Provide a friendly name &lt;span class="k"&gt;for &lt;/span&gt;your resource to be used as a label &lt;span class="k"&gt;for &lt;/span&gt;this category &lt;span class="k"&gt;in &lt;/span&gt;the project:
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; containerb5734e35
? What image would you like to use
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; ExpressJS - REST template
? When &lt;span class="k"&gt;do &lt;/span&gt;you want to build &amp;amp; deploy the Fargate task
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; On every &lt;span class="s2"&gt;"amplify push"&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Fully managed container &lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
? Do you want to restrict API access
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; No
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you can go into your &lt;code&gt;amplify/backend/api/&amp;lt;your-api-name&amp;gt;/src/index.js&lt;/code&gt; file, and add in your app code! For example with a Express app, you could write something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bodyParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body-parser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bodyParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urlencoded&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;extended&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="c1"&gt;// Enable CORS for all methods&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Access-Control-Allow-Headers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Origin, X-Requested-With,Content-Type, Accept&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contentType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; 
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Example app listening at http://localhost:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you can run &lt;code&gt;amplify push&lt;/code&gt; to deploy! You can configure your own Dockerfile and bring your own backend!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Thanks for checking out these features! If you have any feedback on them, I'd love to hear. Stay tuned for more coming soon 😃.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How Google, Twitter, and Spotify built a culture of documentation</title>
      <author>Nik Begley</author>
      <pubDate>Tue, 07 Sep 2021 13:51:56 +0000</pubDate>
      <link>https://dev.to/doctave/how-google-twitter-and-spotify-built-a-culture-of-documentation-3e0m</link>
      <guid>https://dev.to/doctave/how-google-twitter-and-spotify-built-a-culture-of-documentation-3e0m</guid>
      <description>&lt;p&gt;Many technical problems ultimately turn out to be people problems, and a lack of good documentation is no exception. Writing and maintaining documentation is a habit that needs to be encouraged and nurtured. The unfortunate truth is that no amount of tooling is going to help without a &lt;strong&gt;culture of documentation&lt;/strong&gt;. Today we'll look at how 3 high performance engineering companies, Google, Twitter, and Spotify, handle their technical documentation and built a culture of documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google"&gt;
  &lt;/a&gt;
  Google
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/rionam"&gt;Riona MacNamara&lt;/a&gt; has a fantastic &lt;a href="https://www.usenix.org/conference/srecon16europe/program/presentation/macnamara"&gt;talk from 2016&lt;/a&gt; talking about her work at Google improving the state of their internal documentation. We highly encourage you to watch the talk (it's only ~30 minutes), but here are a few interesting highlights of the problems they faced back in 2014:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;48% of Google engineers cited bad docs as #1 productivity issue&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;50%+ of SRE issues cited problems with docs&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Docs were considered everybody's problem, but nobody's job&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Everyone felt the pain of bad docs. Despite numerous past efforts, nothing had worked. Documentation  remained spread out in wikis, random documents, or even offline on whiteboards. Embedding technical writers into a team would help for a while, but documentation would quickly deteriorate after the writers left.&lt;/p&gt;

&lt;p&gt;So what worked for them to start changing the status quo? &lt;strong&gt;They made documentation radically simpler for their engineers&lt;/strong&gt; with a system called &lt;em&gt;g3docs&lt;/em&gt;. It did the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove decisions - present one way to document things&lt;/li&gt;
&lt;li&gt;Host docs next to the code in source in Markdown so engineers can stay in their IDE&lt;/li&gt;
&lt;li&gt;Docs get automatically rendered into nice HTML pages on commits&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On top of the tooling work they did, the team went around creating organizational change:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Formed alliances with influential engineers to introduce the tooling&lt;/li&gt;
&lt;li&gt;Partnered with specific teams to build strategic integrations&lt;/li&gt;
&lt;li&gt;Released and iterated in the open&lt;/li&gt;
&lt;li&gt;Never &lt;em&gt;forced&lt;/em&gt; teams into a new workflow - lead by example&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After g3docs was adopted, usage grew to 200K+ documentation updates and 3.9 million page views a month &lt;em&gt;(NOTE: these numbers are from 2016)&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#twitter"&gt;
  &lt;/a&gt;
  Twitter
&lt;/h2&gt;

&lt;p&gt;Back in 2014, Twitter had 3 technical doc writers. Among other things it was their responsibility to assist the 1000+ software engineers with internal documentation. At the same time, the general atmosphere around docs at Twitter was that they were incomplete, out of date, or even nonexistent. Most documentation lived in Confluence, but some were in Google Docs or READMEs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/simeonfranklin"&gt;Simeon Franklin&lt;/a&gt; and &lt;a href="https://twitter.com/markog"&gt;Marko Gargenta&lt;/a&gt; have a &lt;a href="https://www.youtube.com/watch?v=6y4eQ6gYwdU"&gt;great talk&lt;/a&gt; where they discuss the strategy they took. Similar to Google, they embarked on a journey to change hearts and minds about documentation.&lt;/p&gt;

&lt;p&gt;They bring up the example of software engineers and testing: it was not long ago that software engineers were not expected to write tests. This expectation has been flipped, and today untested code is frowned upon. They wanted to do the same thing for docs internally at Twitter.&lt;/p&gt;

&lt;p&gt;Their approach came in 3 parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Encourage documentation via education and special &lt;strong&gt;DocDays&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Build a new &lt;strong&gt;docs-as-code&lt;/strong&gt; stack (DocBird)&lt;/li&gt;
&lt;li&gt;Create &lt;strong&gt;documentation templates&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They organized &lt;strong&gt;DocDays&lt;/strong&gt;, which are single-day hackathons where developers update their docs. Technical writers would give training on the day, and help edit the final docs. The bigger purpose of these days was to evangelize and normalize documentation writing as a practice. It builds community and a common set of expectations about documentation.&lt;/p&gt;

&lt;p&gt;To make documenting easier and standardized, they launched a new docs-as-code stack called DocBird, which is a customized wrapper around &lt;a href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt;. Similar to g3docs, it builds your documentation from source automatically. It removes the questions of &lt;em&gt;"where are the docs"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Finally, they created shared templates for documentation. These have common sections and questions and could be copied into projects to use as starting points. Staring at a blank canvas can sometimes be the hardest part of getting started writing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spotify"&gt;
  &lt;/a&gt;
  Spotify
&lt;/h2&gt;

&lt;p&gt;What makes Spotify's story interesting is that they have open sourced much of the stack they use for their documentation approach in a project called &lt;a href="https://backstage.io/"&gt;Backstage&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Backstage is a software catalog for Spotify's numerous microservices. It has a long list of features and plugins, but one of the most popular features has been the &lt;a href="https://backstage.io/blog/2020/09/08/announcing-tech-docs"&gt;integrated docs-as-code support&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Internally, we call it TechDocs. It’s the most used plugin at Spotify by far — accounting for about 20% of our Backstage traffic (even though it is just one of 130+ plugins).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Spotify's journey to Backstage's docs-as-code starts just like our previous case studies: &lt;strong&gt;the 3rd largest problem according to engineers was not being able to find the technical documentation they needed to do their work.&lt;/strong&gt; Docs were spread across Confluence, Google Docs, custom sites, and nothing could ever be found.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/garyniemen"&gt;Gary Niemen&lt;/a&gt; has a talk where he discusses their team's work in building out Spotify's "docs-as-code+" infrastructure. He highlights a couple interesting learnings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep the solutions simple - so it just works&lt;/li&gt;
&lt;li&gt;Fiercely optimize for the engineer&lt;/li&gt;
&lt;li&gt;Standardize and centralize&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Their goal for the technical writing team is to have engineers go from "stuck to unstuck" in 1 minute with their documentation. They continue to move the needle towards this goal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-we-learn"&gt;
  &lt;/a&gt;
  What can we learn?
&lt;/h2&gt;

&lt;p&gt;There are a lot of common themes in these stories, but the learnings can be boiled down to 3 main points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make the engineer's life as easy as possible - remove friction&lt;/li&gt;
&lt;li&gt;Standardize and invest in your tools&lt;/li&gt;
&lt;li&gt;Make documentation an expectation through teaching and leading by example&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What we saw in these three cases, and many readers will likely agree based on experience, engineers will not maintain documentation in wikis. The context switch of moving from your code to a separate system and not being able to use your existing tooling means that documentation will be forgotten about. In these examples all three companies went with a &lt;a href="///2021/08/30/why-you-should-consider-docs-as-code.html"&gt;docs-as-code&lt;/a&gt; approach because of how frictionless it makes updating documentation for developers.&lt;/p&gt;

&lt;p&gt;All 3 companies also invested heavily in tooling. Whatever you choose for your documentation stack (we obviously strongly believe &lt;a href="https://www.doctave.com"&gt;Doctave&lt;/a&gt; is an excellent solution), stick with it and make sure that is the only place for technical documentation. There should never be a question about where the docs live.&lt;/p&gt;

&lt;p&gt;Finally, and this is likely the hardest part, you need to make documentation a part of the engineering culture. This means teaching developers how to write docs, providing examples and templates to use, organizing hack days dedicated to documentation, and working with influential engineers in your organization to set expectations. Just like how testing became a norm accepted by most engineers today, so can documentation.&lt;/p&gt;

</description>
      <category>writing</category>
      <category>programming</category>
      <category>productivity</category>
      <category>git</category>
    </item>
    <item>
      <title>Making E-Commerce More Accessible: 6 Tips for Developers</title>
      <author>James Konik</author>
      <pubDate>Tue, 07 Sep 2021 13:26:29 +0000</pubDate>
      <link>https://dev.to/fabric_commerce/making-e-commerce-more-accessible-6-tips-for-developers-82n</link>
      <guid>https://dev.to/fabric_commerce/making-e-commerce-more-accessible-6-tips-for-developers-82n</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kMKOLmjh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxndbjfe3qtskw265gng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kMKOLmjh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxndbjfe3qtskw265gng.png" alt="Making E-Commerce More Accessible: 6 Tips for Developers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ignoring accessibility is a way to drive customers away from your e-commerce site. While it’s easy for developers to focus on new features and bug fixing, putting effort into inclusive, accessible sites will have huge benefits.&lt;/p&gt;

&lt;p&gt;Accessibility impairment is more common than you might think. According to &lt;a href="https://www.shopify.com/partners/blog/developing-shopify-themes-with-accessibility-in-mind"&gt;Shopify data&lt;/a&gt;, 2.3 percent of people live with a reading disorder, 8 percent of men have a form of color blindness, and 7 percent of people live with a severe dexterity disability. &lt;/p&gt;

&lt;p&gt;In this article, I’ll highlight six areas where developers can make e-commerce sites more accessible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#current-accessibility-standards"&gt;
  &lt;/a&gt;
  Current Accessibility Standards
&lt;/h2&gt;

&lt;p&gt;Accessibility standards exist to outline what to work toward clearly. The &lt;a href="https://www.w3.org/WAI/standards-guidelines/wcag/"&gt;Web Content Accessibility Guidelines&lt;/a&gt; is a great resource for web content accessibility. It provides a single, shared global standard to meet the needs of individuals, organizations, and governments. &lt;/p&gt;

&lt;p&gt;In some cases, accessibility standards are &lt;a href="https://www.boia.org/blog/is-there-a-legal-requirement-to-implement-wcag"&gt;legally required&lt;/a&gt;. Applicable rules depend on your location, the products you sell, and the size of your business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-implement-accessibility"&gt;
  &lt;/a&gt;
  How to Implement Accessibility
&lt;/h2&gt;

&lt;p&gt;If you’re just beginning to implement accessibility, &lt;a href="https://a11y-101.com/"&gt;a11y-101&lt;/a&gt; is a great starting point. After implementation, ensure the product works well on screen readers and can be used via keyboard navigation. User testing, although pricier, is also an effective option.&lt;/p&gt;

&lt;p&gt;Automatic audit tools, like the &lt;a href="https://addyosmani.com/a11y/"&gt;a11y command line tool&lt;/a&gt;, identify issues quickly and easily. The &lt;a href="http://squizlabs.github.io/HTML_CodeSniffer/"&gt;HTML_CodeSniffer&lt;/a&gt; is useful when testing for specific compliance guidelines.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTuK0Ad6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcz1jkl3d26c6mszvrx9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTuK0Ad6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcz1jkl3d26c6mszvrx9.png" alt="Screenshot showing the a11y command line tool giving fabric’s site a full audit pass"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See the result of using the a11y command-line tool on &lt;a href="https://fabric.inc/"&gt;fabric’s site&lt;/a&gt;. Installing took thirty seconds, and running the tool is even quicker. Tools like this can significantly improve your accessibility without sacrificing time. &lt;/p&gt;

&lt;p&gt;Let’s take a look at six specific tips for addressing problem areas to improve the accessibility of your e-commerce channels.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-improve-product-carousels"&gt;
  &lt;/a&gt;
  1. Improve Product Carousels
&lt;/h2&gt;

&lt;p&gt;A carousel is a visually appealing way to show off products. This love, however, is not &lt;a href="https://shouldiuseacarousel.com/"&gt;universal&lt;/a&gt;. They have several &lt;a href="https://a11y-101.com/development/carousels"&gt;accessibility problems&lt;/a&gt;. First, their controls are unclear, particularly for the visually or cognitively impaired. Second, a screen reader may not associate controls with the required action. A control system that is obvious to a designer may not be intuitive to users.&lt;/p&gt;

&lt;p&gt;Carousels that autoplay are an issue for those who &lt;a href="https://www.creativebloq.com/accessibility-expert-warns-stop-using-carousels-7133778"&gt;use a keyboard&lt;/a&gt; to select screen elements. Users may not reach the control they want in time. Those who need more time to read are also frustrated when content changes automatically. Furthermore, the element chosen may also revert to the first available one when the carousel updates, making the whole site difficult to use. &lt;/p&gt;

&lt;p&gt;If your client insists on using a carousel, you can still take steps to improve its accessibility. For example, see &lt;a href="https://www.w3.org/WAI/tutorials/carousels/working-example/"&gt;this sample code&lt;/a&gt; from the W3C Web Accessibility Initiative (WAI) under &lt;a href="https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document"&gt;this license&lt;/a&gt;. It features readable text, optimizes for keyboard focus, and communicates changes to all users.&lt;/p&gt;

&lt;p&gt;Although carousels are not ideal, you can still improve your site’s accessibility with them. In the below snippet, a live region is being created and then used later in the code. Doing so announces to users with visual impairments changes to the highlighted item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
    &lt;span class="c1"&gt;// In the init function, we add a live region to announce the slide number when using the previous/next buttons&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;//…… other code here&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;liveregion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;liveregion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-live&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;polite&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;liveregion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aria-atomic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;liveregion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;liveregion visuallyhidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;liveregion&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;//…… further code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// later in the setSlides function, we decide what happens when the slide is updated&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setSlides&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;//…… other code here&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;announceItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;carousel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.liveregion&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Item &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;new_current&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; of &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;slides&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//…… further code&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-make-visual-elements-accessible"&gt;
  &lt;/a&gt;
  2. Make Visual Elements Accessible
&lt;/h2&gt;

&lt;p&gt;Using only visual elements to present your product information excludes potential customers who cannot see them. Making information available to everyone is critical for accessibility. For images, that means including an &lt;a href="https://www.w3schools.com/tags/att_img_alt.asp"&gt;alt tag&lt;/a&gt;, as seen in the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"coffee-maker.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"blue coffee maker with glass mug and simple control panel"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"300"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"200"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Video presents challenges to many users. But, with the &lt;a href="https://www.vidyard.com/blog/accessible-video/"&gt;right tweaks&lt;/a&gt;., you can make them available to everyone. Here are some changes to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Captions:&lt;/strong&gt; Captions make videos easier to follow, especially for the hard of hearing. Open captions are included in the actual video, while closed captions use a separate text file for screen readers and the visually impaired.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Transcripts:&lt;/strong&gt; Providing a video’s full text as a &lt;a href="https://www.washington.edu/accessibility/videos/"&gt;separate transcript&lt;/a&gt; is an excellent way to increase accessibility. Transcripts also benefit those who prefer skimming through text, as opposed to a strictly visual format. Some media players, such as &lt;a href="https://ableplayer.github.io/ableplayer/"&gt;Able Player&lt;/a&gt;, automatically generate transcripts from closed captions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Audio descriptions:&lt;/strong&gt; Spoken audio describing a video helps visually impaired users understand what is happening. This can be presented as a separate, optional file or played alongside the video.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Accessible video players:&lt;/strong&gt; If your frontend channels utilize a video player, make these more accessible too. Look to include supporting captions and audio descriptions, allow videos to be paused, have clear controls, and use high-contrast colors.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-replace-or-improve-captchas"&gt;
  &lt;/a&gt;
  3. Replace or Improve Captchas
&lt;/h2&gt;

&lt;p&gt;Captchas are designed to prevent bots and AI from accessing websites. However, AI is &lt;a href="https://security.googleblog.com/2014/12/are-you-robot-introducing-no-captcha.html"&gt;pretty good at them&lt;/a&gt;, scoring 98.4 percent on distorted text problems. In response, captchas are becoming harder, but this added complexity is causing difficulties for those with impairments.&lt;/p&gt;

&lt;p&gt;Captchas are the biggest problem &lt;a href="https://webaim.org/projects/screenreadersurvey7/"&gt;cited by screen reader users&lt;/a&gt;. Many visually impaired people cannot solve a visual captcha, leaving them unable to access the protected content. Although an &lt;a href="https://captcha.com/articles/audio-captcha.html"&gt;audio captcha&lt;/a&gt; is a good alternative, they can also have accessibility problems. Furthermore, not all systems have audio available.&lt;/p&gt;

&lt;p&gt;There are alternative ways to identify bots beyond captchas, so you can &lt;a href="https://a11y-guidelines.orange.com/en/articles/captcha-accessibility"&gt;avoid using them&lt;/a&gt; altogether. One solution is to time how long a form on your e-commerce site takes to complete. Spambots can fill and submit forms instantly. By excluding any messages completed in under ten milliseconds, you can filter most of these bots out.&lt;/p&gt;

&lt;p&gt;Another solution is to use server-side AI to analyze messages and filter IP addresses. For example, the &lt;a href="https://www.experienceux.co.uk/ux-blog/5-alternatives-to-captcha-that-wont-baffle-or-frustrate-users/"&gt;honeypot&lt;/a&gt; involves hiding a form field so users cannot see it, but spambots still attempt to fill it in. It lets you identify spambots and filter out their responses accordingly. &lt;/p&gt;

&lt;p&gt;See how to make a form field hidden:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name_bot_trap"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not all spambots will fall for this, however. Check out other techniques &lt;a href="https://www.araweb.co.uk/Safe_Contact_Form_with_Honeypot_840"&gt;here&lt;/a&gt; and &lt;a href="https://dev.to/felipperegazio/how-to-create-a-simple-honeypot-to-protect-your-web-forms-from-spammers--25n8"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Captchas don’t just stop bots; they prevent real people from using your site. Thus, replacing or improving captchas removes another barrier to user accessibility.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-use-highcontrast-themes"&gt;
  &lt;/a&gt;
  4. Use High-Contrast Themes
&lt;/h3&gt;

&lt;p&gt;For users with visual impairments, some visual elements don’t stand out, affecting the UI. One way to improve accessibility for color-blind users is to use contrasting colors. For instance, selecting colors &lt;a href="https://www.colormatters.com/color-and-design/basic-color-theory"&gt;on opposite sides of the color wheel&lt;/a&gt; contrasts nicely for everyone.&lt;/p&gt;

&lt;p&gt;Some users also find excess brightness difficult to look at and prefer darker themes. Thus, some sites allow users to enable Dark Mode. You can offer this with CSS and JavaScript. Browser extensions, like &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/darkreader/"&gt;Dark Reader&lt;/a&gt;, offer solutions. This &lt;a href="https://inclusive-components.design/a-theme-switcher/"&gt;extended tutorial&lt;/a&gt; explains writing a theme switcher in React.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XcqEVEpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqygwsbbw5l1ozvktd8l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XcqEVEpU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqygwsbbw5l1ozvktd8l.png" alt="Screenshot showing fabric’s storefront page displayed in a color blindness simulator, with controls for different types of tests"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are several types of color blindness, and a color scheme that works for one user may not work for another. Thus, you can also conduct testing with color-blind users. Alternatively, you can take a screenshot of your site and test it in a &lt;a href="https://www.color-blindness.com/coblis-color-blindness-simulator/"&gt;color blindness simulator&lt;/a&gt; to see how your site looks and identify any issues to fix.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-provide-input-assistance"&gt;
  &lt;/a&gt;
  5. Provide Input Assistance
&lt;/h2&gt;

&lt;p&gt;Form inputs need to be clear and understandable. They should alert users to any errors but also offer solutions. For example, making a field “required” is &lt;a href="https://a11y-101.com/development/required"&gt;impairs accessibility&lt;/a&gt;. Using an asterisk to indicate a required field confuses screen reader users, who just read out “asterisk.” If you mark a field as required in HTML, screen readers will pick up on it but still read out the asterisk.&lt;/p&gt;

&lt;p&gt;Adding the text “required” is a good compromise. You can use the &lt;code&gt;&amp;lt;aria-hidden&amp;gt;&lt;/code&gt; tag to mask the asterisk. This displays the asterisk while making sure readers ignore it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"input_four"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;First Name &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;aria-hidden=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;*&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"visible-hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;required&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"input_four"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;visible-hidden&lt;/code&gt; is a CSS class to hide the “required” text from visual rendering. See &lt;a href="https://a11y-101.com/development/skip-link"&gt;a11y-101’s approach&lt;/a&gt; to hiding text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nc"&gt;.visible-hidden&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.visible-hidden&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although that’s a good start, older readers may not support the &lt;code&gt;&amp;lt;aria-hidden&amp;gt;&lt;/code&gt; tag. &lt;/p&gt;

&lt;p&gt;Another aspect to consider is where to place an indication of “errors” on forms. Readers should be able to find it. For example, a small line of text at the top or bottom of your form can easily be cut off from the user’s screen. Providing text that explains how to fix specific errors automatically read by screen readers is ideal. Like carousels, you should aim to prevent screen updates resetting keyboard navigation.&lt;/p&gt;

&lt;p&gt;By handling &lt;a href="https://webaim.org/techniques/formvalidation/#error"&gt;errors sensibly&lt;/a&gt;, you ensure users will continue to use your e-commerce site.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-keep-customers-onsite"&gt;
  &lt;/a&gt;
  6. Keep Customers On-Site
&lt;/h3&gt;

&lt;p&gt;Affiliate links can confuse users by taking them away from your site to a different one. For instance, driving users to a commercially driven, flashy site can be stressful.&lt;br&gt;
To improve accessibility, ensure it’s clear &lt;a href="https://easyaffiliate.com/blog/3-ways-you-can-make-your-affiliate-program-more-accessible/"&gt;where links lead&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Those using screen readers navigate using the tab key to move around the page. They must tab through affiliate links, making this process slow. Allowing users to &lt;a href="https://www.w3schools.com/accessibility/accessibility_skip_links.php"&gt;skip links&lt;/a&gt; helps speed up the process. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://fabric.inc/xm"&gt;fabric’s Experience Manager&lt;/a&gt; lets you build a headless CMS that keeps data and backend services separate from the presentation layer. This allows you to deliver a consistent, accessible experience across multiple channels, ensuring users don’t get confused as they move between channels.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways
&lt;/h2&gt;

&lt;p&gt;In an increasingly diverse, complex e-commerce landscape, it’s more important than ever to consider the differing needs of your users. This is particularly true for the millions of users who have difficulties with site usability. Therefore, improving your site’s accessibility is essential.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fabric.inc/"&gt;fabric&lt;/a&gt; can help build an e-commerce site to meet user accessibility needs and deliver a great experience for everyone.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Ultimate List of Remote Jobs Grouped By Categories (Updated Weekly)</title>
      <author>Shahul Rashik</author>
      <pubDate>Tue, 07 Sep 2021 13:23:29 +0000</pubDate>
      <link>https://dev.to/shahulrashik/ultimate-list-of-remote-jobs-grouped-by-categories-updated-weekly-1h7h</link>
      <guid>https://dev.to/shahulrashik/ultimate-list-of-remote-jobs-grouped-by-categories-updated-weekly-1h7h</guid>
      <description>&lt;p&gt;Remote jobs are an excellent opportunity for those who want to escape the 9-5 office life and enjoy a more flexible schedule. Not only does it allow people to be more productive and creative, but also provides a better work-life balance.&lt;/p&gt;

&lt;p&gt;Working remotely is a privilege that many workers would love to have. Here are a few reasons why people want to work remotely:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Better work-life balance&lt;/li&gt;
&lt;li&gt;More time to maintain hobbies&lt;/li&gt;
&lt;li&gt;Greater flexibility in choosing working hours.&lt;/li&gt;
&lt;li&gt;Reduced stress levels or improved mental health.&lt;/li&gt;
&lt;li&gt;Higher productivity&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvIQmNGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631019898585/xA4HzFwXJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvIQmNGw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631019898585/xA4HzFwXJ.png" alt="Work from anywhere.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;According to an &lt;a href="https://remoteclan.com/s/h4wasb/covid_19_pushes_search_for_remote_jobs_by"&gt;analysis&lt;/a&gt; published by Glassdoor, the number of job searches for remote positions on the website has surged by 460% from June 2019 to June 2021.&lt;/p&gt;

&lt;p&gt;With the technological progress enabling employees to communicate and work remotely, it is no surprise that the number of remote jobs are also steadily increasing. There are many different platforms where you can find remote work opportunities. Some of the popular freelancing platforms are Upwork, Fiverr, Freelancer and &lt;a href="https://flexiple.com/freelancers/"&gt;Flexiple&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, if you are looking to apply for remote jobs, we have listed them down grouped by their category.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#immediately-hiring-wfh-jobs"&gt;
  &lt;/a&gt;
  Immediately Hiring WFH Jobs
&lt;/h3&gt;

&lt;p&gt;Immediate hire work from home jobs are the jobs that employers want to immediately close. In most cases, when a company is looking to scale its business or has an urgent need for a position, they hire immediately. To apply for immediate hire work from jobs, you can visit this job listings page &lt;a href="https://remoteclan.com/r/immediate-hire-work-from-home-jobs"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remote-video-game-jobs"&gt;
  &lt;/a&gt;
  Remote Video Game Jobs
&lt;/h3&gt;

&lt;p&gt;It is no surprise that gaming is one of the fastest-growing sectors in the world, especially during this pandemic as people feel bored and look for some form of entertainment. At the height of the pandemic, 55% of U.S. consumers were playing video games as a result of the lockdown restrictions. If video games are your passion and you want to build a career out of it, you can apply for &lt;a href="https://remoteclan.com/r/remote-video-game-jobs"&gt;remote video game jobs&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remote-game-developer-jobs"&gt;
  &lt;/a&gt;
  Remote Game Developer Jobs
&lt;/h3&gt;

&lt;p&gt;One of the most important roles in the video game industry is that of a game developer. A game developer is primarily involved in writing code to implement all the game's features and functionality. To apply for remote games developer jobs, you can check this &lt;a href="https://remoteclan.com/r/remote-game-developer-jobs"&gt;page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remote-bookkeeping-jobs"&gt;
  &lt;/a&gt;
  Remote Bookkeeping Jobs
&lt;/h3&gt;

&lt;p&gt;From recording transactions to tracking financials, bookkeepers are important for the healthy functioning of a company. Bookkeepers oversee a company's financial data and compliance by maintaining accurate books on accounts payable and receivable, payroll, and daily financial entries and reconciliations. If you are good at accounting and numbers, you can apply to remote bookkeeping jobs &lt;a href="https://remoteclan.com/r/remote-bookkeeper-jobs"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remote-accounting-jobs"&gt;
  &lt;/a&gt;
  Remote Accounting Jobs
&lt;/h3&gt;

&lt;p&gt;Accountants are involved in maintaining and interpreting financial records. Apart from analyzing financial data, they also perform other administrative functions such as statutory auditing, internal audit and taxation. Moreover, accountants also ensure that the documents follow the accounting practices of the company. If this sounds interesting to you, here is a list of &lt;a href="https://remoteclan.com/r/work-from-home-accounting-jobs"&gt;remote accounting jobs&lt;/a&gt; that you can apply to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remote-esports-jobs"&gt;
  &lt;/a&gt;
  Remote Esports Jobs
&lt;/h3&gt;

&lt;p&gt;Although video games have existed for more than 30 years, the esports industry has seen tremendous growth only in the last few years. From art leads to event managers, there are a variety of roles available in this industry. Here is a list of &lt;a href="https://remoteclan.com/r/remote-esports-jobs"&gt;remote esports jobs&lt;/a&gt; that you can apply to today.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remote-proofreading-jobs"&gt;
  &lt;/a&gt;
  Remote Proofreading Jobs
&lt;/h3&gt;

&lt;p&gt;Writing is an important means of communication. Whether it's an email or a client proposal, it is important that the content is written properly without any errors. This is where proofreaders come in. Proofreaders check a document for errors and rectify them before it is published. Usually, this is the last step of the writing process. If you are interested in this role, here is a list of &lt;a href="https://remoteclan.com/r/remote-proofreading-jobs"&gt;remote proofreading jobs&lt;/a&gt; that you can apply to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remote-nonprofit-jobs"&gt;
  &lt;/a&gt;
  Remote Non-Profit Jobs
&lt;/h3&gt;

&lt;p&gt;The best part of working at a nonprofit is being able to work on a cause you truly believe in. This may include alleviating poverty, promoting women's rights, or providing universal healthcare. So, if you are passionate about giving back to individuals and communities in need, then you can work for a nonprofit. Here are &lt;a href="https://remoteclan.com/r/remote-nonprofit-jobs"&gt;remote nonprofit jobs&lt;/a&gt; that you can apply to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remote-cyber-security-jobs"&gt;
  &lt;/a&gt;
  Remote Cyber Security Jobs
&lt;/h3&gt;

&lt;p&gt;With the impending threat of cyber attacks, there is an increased demand for cybersecurity professionals around the world. Additionally, more companies are also beginning to realize the potential risks and are increasing their spending on cybersecurity. Therefore, if you are interested in this, here is a list of &lt;a href="https://remoteclan.com/r/remote-cybersecurity-jobs"&gt;remote cybersecurity jobs&lt;/a&gt; that you can apply to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remote-creative-jobs"&gt;
  &lt;/a&gt;
  Remote Creative Jobs
&lt;/h3&gt;

&lt;p&gt;A creative job is one that allows people to express their originality and creativity. Oftentimes, creative jobs require dedication that extends beyond normal business hours. For this reason, a lot of creative professionals prefer having work flexibility. So, if you are a creative individual, here is a list of &lt;a href="https://remoteclan.com/r/remote-creative-jobs"&gt;remote creative jobs&lt;/a&gt; that you can apply to.&lt;/p&gt;

</description>
      <category>remotejobs</category>
      <category>remotework</category>
      <category>workfromhome</category>
      <category>remote</category>
    </item>
    <item>
      <title>Visiting card designer - Make designing website with Html, css and js. </title>
      <author>Modern Web</author>
      <pubDate>Tue, 07 Sep 2021 13:19:48 +0000</pubDate>
      <link>https://dev.to/kunaal438/how-to-make-a-designing-website-with-html-css-and-js-visiting-card-designer-4ml4</link>
      <guid>https://dev.to/kunaal438/how-to-make-a-designing-website-with-html-css-and-js-visiting-card-designer-4ml4</guid>
      <description>&lt;p&gt;Hello, In today's article you'll learn to create awesome visiting card designer. Where you can add company logo, its slogan, website link and support email. You can also change the visiting card's background. And the best thing you can also download the designed visiting card on your system.&lt;/p&gt;

&lt;p&gt;To see demo or you want full coding tutorial video for better understanding. You can watch the tutorial below.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-q_bi4sNfV0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I appreciate if you can support me by subscribing my youtube channel. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h1&gt;

&lt;p&gt;For this project, we have 3 files. &lt;code&gt;index.html&lt;/code&gt;, &lt;code&gt;style.css&lt;/code&gt; and &lt;code&gt;app.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, start with HTML basic structure, link &lt;code&gt;style.css&lt;/code&gt; and &lt;code&gt;app.js&lt;/code&gt; file to it. After that, make an h1 element for heading.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"heading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;design your &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;visiting card&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f6f6f6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'roboto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.heading&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;70px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.heading&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#467aff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2tbnp-wM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2q68z1hrpmwyddw083dm.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2tbnp-wM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2q68z1hrpmwyddw083dm.PNG" alt="Capture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, make a &lt;code&gt;div&lt;/code&gt; element which will contain our card on left side and design options on right side. Make a &lt;code&gt;div&lt;/code&gt; for card element also.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(img/img1.png)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.card&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b49UKP9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zigg9t2givlz16wq3n3b.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b49UKP9_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zigg9t2givlz16wq3n3b.PNG" alt="Capture2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now make a logo container inside card element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.logo&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url('img/logo.png')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now of course name some inputs inside card element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="na"&gt;maxlength=&lt;/span&gt;&lt;span class="s"&gt;"30"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"business name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"slogan"&lt;/span&gt; &lt;span class="na"&gt;maxlength=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"business slogan"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"website-link"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"website"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;::placeholder&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.slogan&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.website-link&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.email&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.75&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.website-link&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.email&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y09CJt1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l1vy6hy5mf7k62k2gpw.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y09CJt1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5l1vy6hy5mf7k62k2gpw.PNG" alt="Capture4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! we are done with card designing. Now if you want you can quickly type the details on the input box. Let's make options now on the right side.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- settings --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"setting"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;accept=&lt;/span&gt;&lt;span class="s"&gt;"*image"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"upload"&lt;/span&gt; &lt;span class="na"&gt;hidden&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"upload"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn upload"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;upload logo&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above code, I just made a single &lt;code&gt;div&lt;/code&gt; element inside &lt;code&gt;main&lt;/code&gt; element. And inside this &lt;code&gt;setting&lt;/code&gt; element. I made an upload input. &lt;code&gt;hidden&lt;/code&gt; attribute is used to hide an input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.setting&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.btn&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I9s4KOmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxa9v2nvhswgladc84dz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I9s4KOmT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxa9v2nvhswgladc84dz.PNG" alt="Capture5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now make background images of course.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- backgrounds --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"backgrounds"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img1.png"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"active"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img2.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img3.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img4.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img5.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"img/img6.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.backgrounds&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="py"&gt;grid-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.backgrounds&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;object-fit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.5s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.backgrounds&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.backgrounds&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="nc"&gt;.active&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qmkCaXVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eip90v7dt27d62q4bzwz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qmkCaXVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eip90v7dt27d62q4bzwz.PNG" alt="Capture6"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we are done with our styles. Now just create a button for download. And also make an anchor link but don;t give any text to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"link"&lt;/span&gt; &lt;span class="na"&gt;download=&lt;/span&gt;&lt;span class="s"&gt;"visiting card.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn download-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;download design&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The above code is inside &lt;code&gt;.setting&lt;/code&gt; element.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;download&lt;/code&gt; attribute is used to set up a download link. And the value of download attribute is the filename for the downloaded image. We'll use the &lt;code&gt;link&lt;/code&gt; element for download.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Az7HENco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmm9tk9ydg3w8vjkre9d.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Az7HENco--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmm9tk9ydg3w8vjkre9d.PNG" alt="Capture7"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now let's quickly write some JS. Open &lt;code&gt;app.js&lt;/code&gt; file. Make sure to import it in &lt;code&gt;index&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;First let's make logo upload functional. Select the &lt;code&gt;upload&lt;/code&gt; input and &lt;code&gt;logo&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// setting up logo&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uploadBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#upload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.logo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add &lt;code&gt;change&lt;/code&gt; event to &lt;code&gt;upload&lt;/code&gt; input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;uploadBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;change&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uploadBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;uploadBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FileReader&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// init the file reader&lt;/span&gt;

        &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// reader.result will return the src of the uploaded image&lt;/span&gt;
            &lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`url('&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;')`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readAsDataURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uploadBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the &lt;code&gt;change&lt;/code&gt; event.&lt;br&gt;
&lt;code&gt;if(uploadBtn.files &amp;amp;&amp;amp; uploadBtn.files[0])&lt;/code&gt; This line checking for the uploaded file existence. This condition will only be true when a file is uploaded.&lt;br&gt;
Then after we got the file, we need a file reader to read that image file. So for that we are using this. &lt;code&gt;let reader = new FileReader();&lt;/code&gt; After initializing the reader, add load event to it, and change the &lt;code&gt;logo&lt;/code&gt; element's background there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// reader.result will return the src of the uploaded image&lt;/span&gt;
            &lt;span class="nx"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`url('&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;')`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And at very last, &lt;code&gt;reader.readAsDataURL(uploadBtn.files[0]);&lt;/code&gt; this line is telling which the reader has to read. In this case we want the first uploaded file in our files array.&lt;/p&gt;

&lt;p&gt;Great! the upload logo is working. Now, we have to allow user  to change card's background. Select all background's image element. and card elements also.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.backgrounds img&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;card&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.card&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;activeBg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//default background&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;activeBg&lt;/code&gt; will store the current selected background index. Because of this, we can to perform less for loops to achieve the result.&lt;/p&gt;

&lt;p&gt;Now use &lt;code&gt;forEach&lt;/code&gt; to loop through &lt;code&gt;bgs&lt;/code&gt; and add &lt;code&gt;click&lt;/code&gt; event to all the images. Inside that change toggle the &lt;code&gt;active&lt;/code&gt; class, and change the &lt;code&gt;activeBg&lt;/code&gt; value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;bgs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;bgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;activeBg&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;card&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundImage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`url('&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;')`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;activeBg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the last thing, we have to make download functional. For this we'll use &lt;code&gt;html2canvas&lt;/code&gt; library. This library will help us in converting the HTML elements into a canvas. And after that we can download the canvas.&lt;/p&gt;

&lt;p&gt;Don't forget to add &lt;code&gt;html2canvas&lt;/code&gt; CDN inside &lt;code&gt;index&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.5.0-beta4/html2canvas.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Add this before &lt;code&gt;app.js&lt;/code&gt; script.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, select &lt;code&gt;download&lt;/code&gt; button in &lt;code&gt;app.js&lt;/code&gt;. And make a function&lt;code&gt;exportCard&lt;/code&gt; which will export the card. And call the &lt;code&gt;exportCard&lt;/code&gt; function when clicking &lt;code&gt;download&lt;/code&gt; button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// download button&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;downloadBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.download-btn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;exportCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;downloadBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;exportCard&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now code inside &lt;code&gt;exportCard&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;exportCard&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;html2canvas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;card&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDataURL&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;link&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// click on the link&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;html2canvas&lt;/code&gt; is the library method. Which covert the element into a canvas. The first argument for this method is &lt;code&gt;element&lt;/code&gt;. In this case I have passed the &lt;code&gt;card&lt;/code&gt; element. After that get the canvas using &lt;code&gt;then&lt;/code&gt; method. And inside this, select the &lt;code&gt;link&lt;/code&gt; element that we have made in &lt;code&gt;HTML&lt;/code&gt; file. Set its &lt;code&gt;href&lt;/code&gt; to &lt;code&gt;canvas.toDataURL()&lt;/code&gt;(this will return the src/link of the canvas). And at last click on the link by calling &lt;code&gt;link.click()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you run the site and try to download you probably see this error in your console.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#error"&gt;
  &lt;/a&gt;
  Error
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wDnnMsm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6hnnopb063nv4n6ukoo.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wDnnMsm3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k6hnnopb063nv4n6ukoo.PNG" alt="Capture8"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, this error is only coming because the browser is stopping you from converting the canvas into a link. Because you can't access local files on users system. If you host this site, then you'll not see the error. But in video tutorial, I made a node server to run this on &lt;code&gt;localhost&lt;/code&gt;. So let's make a server now.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;npm init&lt;/code&gt; command in you terminal to initialize node app.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then run &lt;code&gt;npm i express.js nodemon&lt;/code&gt; to install &lt;code&gt;epxress&lt;/code&gt; and &lt;code&gt;nodemon&lt;/code&gt; library.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now make some changes in your &lt;code&gt;package.json&lt;/code&gt;. Change the &lt;code&gt;main&lt;/code&gt; to &lt;code&gt;server.js&lt;/code&gt;. And change the &lt;code&gt;scripts&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;server.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;nodemon server.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Now create &lt;code&gt;server.js&lt;/code&gt; file in your directory. And code the server.&lt;/li&gt;
&lt;/ol&gt;

&lt;h6&gt;
  &lt;a href="#serverjs"&gt;
  &lt;/a&gt;
  Server.js
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;listening......&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start your server by running &lt;code&gt;npm start&lt;/code&gt; command in terminal.&lt;/p&gt;

&lt;p&gt;Great! Now the site is running on localhost. And you are now able to download the design. That's it for today guys. I hope you understood each and everything. If you have doubt or I missed something let me know in the comments.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#articles-you-may-find-useful"&gt;
  &lt;/a&gt;
  Articles you may find Useful
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-the-best-css-effects-of-all-time-most-underrated-web-ux-2chj"&gt;Best CSS Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/quick-css-make-infinity-loading-animation-for-your-next-website-187k"&gt;Infinte CSS loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/how-to-create-disney-plus-clone-for-beginner-in-2021-html-css-js-m3p"&gt;Disney+ Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/create-working-youtube-clone-with-search-box-youtube-api-2a6e"&gt;Youtube API - Youtube Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/how-to-create-netflix-clone-netflix-clone-with-hmtl-css-js-989"&gt;TMDB - Netflix Clone&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I really appreciate if you can subscribe my youtube channel. I create awesome web contents.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gs5zBA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeitpawvax07cx7r9yoa.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/posts/55869426"&gt;Source Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your donation really motivates me to do more amazing tutorials like this. Support me on &lt;a href="https://www.patreon.com/modernweb"&gt;patreon&lt;/a&gt;, &lt;a href="https://ko-fi.com/modernweb"&gt;Buy me a coffee&lt;/a&gt;, &lt;a href="https://paypal.me/modernwebchannel"&gt;Donate me on paypal&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks For reading. &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Transform Your Career And Personal Life: Finding A Great Job</title>
      <author>Eddy Vinck</author>
      <pubDate>Tue, 07 Sep 2021 13:05:01 +0000</pubDate>
      <link>https://dev.to/eddyvinck/transform-your-career-and-personal-life-finding-a-great-job-nh2</link>
      <guid>https://dev.to/eddyvinck/transform-your-career-and-personal-life-finding-a-great-job-nh2</guid>
      <description>&lt;p&gt;&lt;strong&gt;Nobody wants a bad job.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But what exactly is a bad job? That definition is actually up to you, as it is very personal.&lt;/p&gt;

&lt;p&gt;So what &lt;em&gt;do&lt;/em&gt; you want? Do you want to become the best developer you can be? &lt;/p&gt;

&lt;p&gt;Then you need a job that continuously challenges you, as opposed to one where you do the same thing over and over.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6798BFSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9eksg36mtjbk02s8m1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6798BFSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9eksg36mtjbk02s8m1u.png" alt="Chart showing that the wrong job may initially grow your skillset, but it will even out over time. Another chart showing more progress in the same amount of time at a great job."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you really have 10 years of experience, if you do the exact same type of work every year?&lt;/p&gt;

&lt;p&gt;A great job, by contrast, will grow your skills continuously over time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-you-find-a-great-developer-job"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How do you find a great developer job?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You need to decide what a great job means &lt;em&gt;to you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A great job could mean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More money&lt;/li&gt;
&lt;li&gt;Better working conditions&lt;/li&gt;
&lt;li&gt;Good benefits&lt;/li&gt;
&lt;li&gt;Remote job&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But it's important to think about why you want those things in the first place. &lt;strong&gt;Why does it matter to you?&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-money"&gt;
  &lt;/a&gt;
  More money
&lt;/h3&gt;

&lt;p&gt;Having more money means more security. You also don't have to worry about money so much, so you can focus on the other parts of your life.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#better-working-conditions"&gt;
  &lt;/a&gt;
  Better working conditions
&lt;/h3&gt;

&lt;p&gt;Some jobs are very chaotic. But it doesn't have to be that way.&lt;/p&gt;

&lt;p&gt;There are jobs out there where you barely, if ever, need to work overtime. That depends on your role too, of course.&lt;/p&gt;

&lt;p&gt;Less overtime means you will have more time for family, friends, and hobbies.&lt;/p&gt;

&lt;p&gt;Or maybe you would like to build your own business? Not all jobs allow you to have "side hustles." &lt;/p&gt;

&lt;p&gt;If that is something you want, then you need to identify which potential employers let you do your own thing in your own time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#good-benefits"&gt;
  &lt;/a&gt;
  Good benefits
&lt;/h3&gt;

&lt;p&gt;Maybe you don't have social healthcare in your country. You could find a company that offers this.&lt;/p&gt;

&lt;p&gt;Maybe you don't want to buy a car? You could find a company that leases a car for you 🚗&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remote-job"&gt;
  &lt;/a&gt;
  Remote job
&lt;/h3&gt;

&lt;p&gt;A great way to save more time is to find a company that isn't too far from where you live.&lt;/p&gt;

&lt;p&gt;Not having a commute at all would save you even more time!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#market-research"&gt;
  &lt;/a&gt;
  Market research
&lt;/h2&gt;

&lt;p&gt;Now you have thought about the things you look for in a job it is time for some market research.&lt;/p&gt;

&lt;p&gt;You could just scroll on job posting websites and apply to every single job you see.&lt;/p&gt;

&lt;p&gt;Or you could be smart about your approach.&lt;/p&gt;

&lt;p&gt;Companies like talking about themselves, and especially about the things that makes them great. &lt;/p&gt;

&lt;p&gt;You can check job posting websites, company websites, company social media accounts.&lt;/p&gt;

&lt;p&gt;It's more effort to go through all these things, but it provides you with a few benefits.&lt;/p&gt;

&lt;p&gt;First of all, you know more about the company you are applying for. This will help you during your interviews.&lt;/p&gt;

&lt;p&gt;Secondly, you will be able to make a more informed decision of wether you even want to apply for that company at all! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You could save yourself hundreds of hours of interviewing by only applying to &lt;em&gt;the right&lt;/em&gt; jobs.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O0ciCKPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ef05nqobgp9fly00swmu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O0ciCKPO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ef05nqobgp9fly00swmu.png" alt="Venn diagram showing your great job is where your personal needs match some of the aspects of a job"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The image above oversimplifies your job search a lot, but that is what it comes down to: finding a job that matches your personal needs. The more those circles overlap, the better the job is for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;In conclusion, finding a great job is hard, but ultimately worth every bit of effort. After all, why would you want to spend so much time interviewing or working for the wrong companies?&lt;/p&gt;

&lt;p&gt;I hope this article got you thinking at least a little about how to approach your future job searches.&lt;/p&gt;

&lt;p&gt;I wrote a lot more about this subject in &lt;a href="https://eddyvinck.gumroad.com/l/developer-job-searching"&gt;&lt;strong&gt;Developer Job Searching: The Not So Technical Parts&lt;/strong&gt;&lt;/a&gt;, the eBook that covers how to find a great job you will love.&lt;/p&gt;

&lt;p&gt;I'm still putting the finishing touches on the book. Right now, you can pre-order it at a 40% discount.&lt;/p&gt;

&lt;p&gt;If you want to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stop wasting your time with the wrong employers&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Learn how to identify companies that match your needs&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spend less time filling in online job application forms&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Start your probation period the right way&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then &lt;strong&gt;&lt;a href="https://eddyvinck.gumroad.com/l/developer-job-searching"&gt;Developer Job Searching: The Not So Technical Parts&lt;/a&gt;&lt;/strong&gt; is for &lt;u&gt;you&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://eddyvinck.gumroad.com/l/developer-job-searching"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5o_0TiQy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uc0nj21luz8k06c8h5iz.png" alt="Link to the eBook"&gt;&lt;/a&gt;&lt;br&gt;
Click 👆 for more information&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>showdev</category>
    </item>
    <item>
      <title>OpenTelemetry tracing - things you need to know before implementing 😎</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Tue, 07 Sep 2021 12:54:41 +0000</pubDate>
      <link>https://dev.to/signoz/opentelemetry-tracing-things-you-need-to-know-before-implementing-57bd</link>
      <guid>https://dev.to/signoz/opentelemetry-tracing-things-you-need-to-know-before-implementing-57bd</guid>
      <description>&lt;p&gt;Setting up observability and robust monitoring for distributed systems is a challenging task. Engineering teams need access to different pieces of information to understand what's happening with their application. Is OpenTelemetry a step in the right direction for distributed tracing? Let's find out.&lt;/p&gt;




&lt;p&gt;Nothing can guarantee how your systems will behave in production. Things will go wrong, and it's critical to monitor your application for any signs that need troubleshooting. A robust monitoring and observability framework requires telemetry data - logs, metrics and traces.&lt;/p&gt;

&lt;p&gt;OpenTelemetry aims to standardize the creation and management of telemetry data. It can fit within any application's architecture and generate telemetry data with little to no overhead.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5VoP5KQk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd9g24jdq62tqr7grvmm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5VoP5KQk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pd9g24jdq62tqr7grvmm.png" alt="OpenTelemetry Architecture"&gt;&lt;/a&gt;OpenTelemetry architecture - client libraries instrument application code to send telemetry data to a collector agent which then exports the data to a backend analysis tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-distributed-tracing-needed"&gt;
  &lt;/a&gt;
  Why is distributed tracing needed?
&lt;/h2&gt;

&lt;p&gt;In microservices architecture, often engineering teams are responsible for just one service and it becomes a nightmare to troubleshoot issues without an overview. Correlating logs and metrics is challenging with a lot of manual effort.&lt;/p&gt;

&lt;p&gt;That's where distributed tracing comes into the picture. User requests are broken down into spans.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What are spans?&lt;br&gt;&lt;br&gt;
Spans represent a single operation within a trace.&lt;br&gt;
It represents work done by a single service which can be broken down further depending on the use case.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A trace context is passed along when requests travel between services, which tracks a user request across services. You can see how a user request performs across services and identify what exactly needs your attention without manually shifting through multiple dashboards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o5eUzX9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdn2hqbptnhj6c2ny3hl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o5eUzX9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdn2hqbptnhj6c2ny3hl.png" alt="OpenTelemetry tracing uses trace context to track user request across services"&gt;&lt;/a&gt;A trace context is passed when user requests passes from one service to another&lt;/p&gt;

&lt;p&gt;Using OpenTelemetry you can encapsulate several pieces of information with a span. Common information includes &lt;strong&gt;the name of the operation, start and end timestamp, events occurring during the span&lt;/strong&gt;. You can also add custom attributes with key/value pairs to enable more insights if needed.&lt;/p&gt;

&lt;p&gt;In the picture below, you can see the details for the selected span. &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; is a lightweight open-source APM tool based on OpenTelemetry, which can be used as an analysis tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eebdGylr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y55hdd4dbp7lwo7h09d8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eebdGylr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y55hdd4dbp7lwo7h09d8.png" alt="Attributes can be added to spans for more context"&gt;&lt;/a&gt;SigNoz is a lightweight APM tool based on OpenTelemetry. it provides out of box visualization for traces and metrics.&lt;/p&gt;

&lt;p&gt;When the user request finishes operation in one of the services and travels to another one, a trace ID is passed along, unique for every request. This way, you can correlate information about your requests easily across your entire architecture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-opentelemetry"&gt;
  &lt;/a&gt;
  What is OpenTelemetry?
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry is a set of APIs, SDKs, libraries, and integrations that is aiming to standardize the generation, collection, and management of telemetry data(logs, metrics, and traces). OpenTelemetry is a Cloud Native Computing Foundation project created after the merger of OpenCensus(from Google) and OpenTracing(from Uber).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#five-things-to-know-about-opentelemetry"&gt;
  &lt;/a&gt;
  Five things to know about OpenTelemetry
&lt;/h2&gt;

&lt;p&gt;Now that you understand a little bit about both OpenTelemetry and distributed tracing, let us see a list of things you must know about OpenTelemetry tracing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Backed by major cloud vendors&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
OpenTelemetry is an open-source project under Cloud Native Computing Foundation backed by major cloud providers like Microsoft and Google. As such, it has a wide community support as well as support by most APM and observability vendors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reduced overhead for telemetry data&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
OpenTelemetry reduces overhead from your application to create and manage telemetry data. Your application is decoupled from OpenTelemetry implementation as OpenTelemetry provides an API to interact with. Telemetry is collected by otel-collectors which can receive, process and export data in multiple data formats.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;OpenTelemetry Tracing API is stable&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
OpenTelemetry has stable tracing API release in Java, .NET, Javascript, Python, and Erlang.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Vendor-agnostic data formats&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
OpenTelemetry provides an otel-collector that can be used to receive trace data in multiple formats. Otel-collector also provides processors and exporters using which you can choose to export the collected data in your required format.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Easy set-up and implementation&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
OpenTelemetry libraries come with default support for tracing. You just need to configure OpenTelemetry collectors via a config file to collect traces data in the format you prefer.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#steps-involved-in-implementing-opentelemetry-tracing"&gt;
  &lt;/a&gt;
  Steps involved in implementing OpenTelemetry tracing&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry provides auto-instrumentation libraries in multiple languages. With auto-instrumentation, you can get started with tracing without making any changes to your code.&lt;/p&gt;

&lt;p&gt;For example &lt;a href="https://signoz.io/opentelemetry/java-agent/"&gt;OpenTelemetry Java JAR agent&lt;/a&gt; can detect a number of popular libraries and frameworks and instrument it right out of the box for generating telemetry data.&lt;/p&gt;

&lt;p&gt;You can also instrument your code manually to have more business specific context. Let's look at the steps involved in tracing code using OpenTelemetry API:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Get a &lt;code&gt;Tracer&lt;/code&gt;&lt;/strong&gt; 
The first step is to acquire a &lt;code&gt;Tracer&lt;/code&gt;. The &lt;code&gt;Tracer&lt;/code&gt; is responsible for creating spans.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;Tracer&lt;/span&gt; &lt;span class="nx"&gt;tracer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;openTelemetry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getTracer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;instrumentation-library-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Create a span&lt;/strong&gt;
Creating a span only involves naming it. The start and end time is managed by the OpenTelemetry SDK.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;Span&lt;/span&gt; &lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tracer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spanBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my span&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;startSpan&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="c1"&gt;// put the span into the current Context&lt;/span&gt;
   &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Scope&lt;/span&gt; &lt;span class="nx"&gt;scope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeCurrent&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// your use case&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Throwable&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;StatusCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Change it to your error message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// closing the scope does not end the span, this has to be done manually&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Create nested spans&lt;/strong&gt;
There can be multiple logical operations inside a service for which you might want to measure things like duration or custom attributes. OpenTelemetry supports tracing within processes. Example of a method &lt;code&gt;A&lt;/code&gt; calling method &lt;code&gt;B&lt;/code&gt; where spans are linked manually:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;parentOne&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;Span&lt;/span&gt; &lt;span class="nx"&gt;parentSpan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tracer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spanBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;startSpan&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;childOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parentSpan&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;parentSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;childOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Span&lt;/span&gt; &lt;span class="nx"&gt;parentSpan&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;Span&lt;/span&gt; &lt;span class="nx"&gt;childSpan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tracer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spanBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;child&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setParent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="kd"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parentSpan&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startSpan&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="c1"&gt;// do stuff&lt;/span&gt;
   &lt;span class="nx"&gt;childSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Add span attributes&lt;/strong&gt;
With OpenTelemetry, you can add attributes on span to get additional context. Attributes provide additional context on the specific operation it tracks.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;   &lt;span class="nx"&gt;Span&lt;/span&gt; &lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tracer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spanBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/resource/path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;setSpanKind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SpanKind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CLIENT&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;startSpan&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http.method&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http.url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Context propagation&lt;/strong&gt;
OpenTelemetry context propagation is based on &lt;a href="https://www.w3.org/TR/trace-context/" rel="noopener noreferrer nofollow"&gt;W3C Trace Context&lt;/a&gt; HTTP headers. The W3C trace context specification defines standard HTTP headers to propagate context information that enables distributed tracing.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started-with-opentelemetry-tracing"&gt;
  &lt;/a&gt;
  How to get started with OpenTelemetry tracing?
&lt;/h2&gt;

&lt;p&gt;OpenTelemetry is becoming the world standard for instrumenting application code due to its multi-language support and ease of use. But OpenTelemetry helps only to generate and collect telemetry data. You need to export the telemetry data to a backend analysis tool so that your teams can store, query, and visualize the collected data.&lt;/p&gt;

&lt;p&gt;And that's where &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; comes into the picture. SigNoz uses OpenTelemetry natively to instrument application codes. OpenTelemetry collector then sends the data to the SigNoz backend, where users have the option to choose between ClickHouse or Kafka+Druid as their telemetry data storage option.&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box visualization of things like RED metrics. There is a unified UI of metrics and traces, unlike Prometheus, so that you can easily identify the root cause of issues causing things like latency in your apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8fEE-jnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azk0yga369uv5nl8aw1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8fEE-jnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azk0yga369uv5nl8aw1c.png" alt="SigNoz dashboard showing the popular RED metrics for application performance monitoring."&gt;&lt;/a&gt;Measure things like application latency, requests per sec, error percentage and see your top endpoints&lt;/p&gt;

&lt;p&gt;You can check out SigNoz's GitHub repo here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Today's Daily Dose of Programming Humor</title>
      <author>Daily Developer Jokes</author>
      <pubDate>Tue, 07 Sep 2021 12:00:12 +0000</pubDate>
      <link>https://dev.to/dailydeveloperjokes/today-s-daily-dose-of-programming-humor-2n45</link>
      <guid>https://dev.to/dailydeveloperjokes/today-s-daily-dose-of-programming-humor-2n45</guid>
      <description>&lt;p&gt;Hi there! Here's today's Daily Developer Joke. We hope you enjoy it; it's a good one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xt3ZgXuG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e1259427b3da.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xt3ZgXuG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e1259427b3da.png" alt="Joke Image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For more jokes, and to submit your own joke to get featured, check out the &lt;a href="https://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes Website&lt;/a&gt;. We're also open sourced, so feel free to view &lt;a href="https://github.com/dailydeveloperjokes"&gt;our GitHub Profile&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leave-this-post-a-if-you-liked-todays-joke-and-stay-tuned-for-tomorrows-joke-too"&gt;
  &lt;/a&gt;
  Leave this post a ❤️ if you liked today's joke, and stay tuned for tomorrow's joke too!
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This joke comes from &lt;a href="https://github.com/wesbos/dad-jokes"&gt;Dad-Jokes GitHub Repo by Wes Bos&lt;/a&gt; (thank you!), whose owner has given me permission to use this joke with credit.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>dailydeveloperjokes</category>
    </item>
    <item>
      <title>Is Node.js Single-Threaded or Multi-Threaded? and Why?</title>
      <author>Andres Reales</author>
      <pubDate>Tue, 07 Sep 2021 11:39:13 +0000</pubDate>
      <link>https://dev.to/arealesramirez/is-node-js-single-threaded-or-multi-threaded-and-why-ab1</link>
      <guid>https://dev.to/arealesramirez/is-node-js-single-threaded-or-multi-threaded-and-why-ab1</guid>
      <description>&lt;p&gt;Have you been reading multiple articles trying to understand whether Node.js is single-threaded or multi-threaded? Why are there many of them saying single-threaded and others saying multi-threaded? I’ve been there and after reading one article after another, it seems there’s always a doubt in the back of your mind telling you the concept is still not clear. In this article, I hope to clarify this confusion.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://nodejs.dev/learn"&gt;Node.js documentation&lt;/a&gt;, a Node.js application runs using the event loop. The event loop is what allows Node.js to perform non-blocking I/O operations and explains how Node.js can be asynchronous. The event loop, aka the main thread, allows running one thing at a time. Having said that, &lt;strong&gt;Node.js JavaScript code runs on a single thread&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now, there are several points you have probably read about in different articles such as using &lt;strong&gt;worker_threads&lt;/strong&gt; making it multi-threaded, or the programming language used to develop Node.js applications makes it single-threaded, etc. I will cover those relevant points, but before we move forward, I’ll refresh your knowledge with regards to what single and multi-thread processes are.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-a-singlethreaded-process-is"&gt;
  &lt;/a&gt;
  What a Single-Threaded Process is
&lt;/h2&gt;

&lt;p&gt;A single-threaded process is the execution of programmed instructions in a single sequence. Having said that, if an application has the following set of instructions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Instruction A&lt;/li&gt;
&lt;li&gt;Instruction B&lt;/li&gt;
&lt;li&gt;Instruction C&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If these set of instructions are executed in a single-threaded process, the execution would look like the following:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dp5YTWtO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsf84myna0sp2rahh8uj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dp5YTWtO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsf84myna0sp2rahh8uj.png" alt="Single Thread"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-a-multithreaded-process-is"&gt;
  &lt;/a&gt;
  What a Multi-Threaded Process is
&lt;/h2&gt;

&lt;p&gt;A multi-threaded process is the execution of programmed instructions in multiple sequences. Therefore, instructions won’t have to wait to execute unless multiple instructions are grouped within different sequences.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--avQGVjRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsyg6r77mt4h0n8ql5a6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--avQGVjRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zsyg6r77mt4h0n8ql5a6.png" alt="Multi thread"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-nodejs-is-singlethreaded"&gt;
  &lt;/a&gt;
  Why Node.js is Single-Threaded?
&lt;/h2&gt;

&lt;p&gt;Now you know Node.js architecture is single-threaded. However, why is it single-threaded? My first question for you is, do you understand how the event loop works? If not, I recommend you &lt;a href="https://nodejs.dev/learn/the-nodejs-event-loop"&gt;check this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, to keep things simple, the event loop runs one process at a time. That means it can only execute one function at a time, and since functions can have multiple instructions, the event loop will execute one instruction at a time.&lt;/p&gt;

&lt;p&gt;At first, it sounds not efficient providing poor performance. However, quite the opposite it turns out to be more performant and scalable than other multithreaded alternatives such as Java.&lt;/p&gt;

&lt;p&gt;Running a multithreaded solution involves leveraging multiple cores of a system. Having said that, if one thread is waiting for an I/O response, the other threads could still be in progress. In theory, multithread seems the way to go, but what we are not taking into consideration is that a thread could still be blocked regardless of other threads being available.&lt;/p&gt;

&lt;p&gt;The beauty of the event loop is not of running everything in a single thread, but it’s available to “put aside” long time-consuming I/O operations to keep the execution of other instructions. This is the reason why we get fast responses even though we could have multiple users making requests to a Node.js API at the same time.&lt;/p&gt;

&lt;p&gt;The first thing to clarify is there is no such thing as making requests at the same time. It is perceived to have run requests at the same time, but in reality, the event loop runs processes defined for each request based on the order in which it arrived. Let’s make this concept simple to understand by using an example. In this case, we are going to assume we have the following API endpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/getCars&lt;/li&gt;
&lt;li&gt;/updateCar&lt;/li&gt;
&lt;li&gt;/updateDriver&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember, request are not made at the same time. The event loop will handle the requests in the following order assuming that was the order they were requested:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/getCars&lt;/li&gt;
&lt;li&gt;/updateCar&lt;/li&gt;
&lt;li&gt;/updateDriver&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The event loop will execute the first instructions from the /getCars endpoint. At some point, there will be an instruction which is a request from the API to a database to fetch the cars. This is considered an I/O operation. This process can take a short or long time to execute. Regardless of how fast this gets executed. The event loop will trigger this request and move it “aside” to prevent blocking the thread from executing other instructions. However, it will resume triggering the set of instructions for the /getCars endpoint once a response is sent back from the database.&lt;/p&gt;

&lt;p&gt;Therefore, while the request made from the /getCars endpoint to the database is triggered and waiting for a response, the /updateCar endpoint will trigger its set of instructions. If there is not I/O operation within the /updateCar endpoint, the /updateCar endpoint will return a response before the /getCars endpoint returns a response.&lt;/p&gt;

&lt;p&gt;In a similar way, if the /updateCar endpoints have an instruction to execute an I/O operation, the event loop will trigger it but won’t block the thread from executing instructions. In this way, it could either start executing the set of instructions from the /updateDriver endpoint, or resume the execution of the /getCars endpoint once it receives a response from the database. This is based on whichever is added first in the event queue.&lt;/p&gt;

&lt;p&gt;If you think about it, the major benefit of Node.js architecture is not the fact of being single-threaded, but its ability to not block the thread from executing other instructions. This is one of the main reasons Node.js is an excellent choice for developing APIs as these are heavily based on I/O operations. The event loop’s smart system to execute intensive I/O operations and resume processes once the I/O operations are completed while not worrying about issues that can come with using multithreaded solutions such as deadlocks or race conditions makes it a no brainer for many teams to use Node.js.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-block-the-event-loop-aka-the-main-thread"&gt;
  &lt;/a&gt;
  Don’t Block the Event Loop (aka the Main Thread)
&lt;/h2&gt;

&lt;p&gt;Like most solutions, there are advantages and disadvantages, and Node.js is not an exclusion of this. Since we know Node.js runs using the event loop, aka as the main thread, blocking the loop will indeed prevent the system from running other instructions regardless of whether they belong to a single process or multiple different processes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Didn’t you say the event loop “triggers intensive operations and move them aside, resuming a process once the operations get a response”?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes.&lt;/p&gt;

&lt;p&gt;However, it is important to clarify the event loop’s ability to “resume” an I/O operation process doesn’t mean it will be capable of getting away around with an intensive CPU operation. The beauty of an I/O operation is to use external CPU processing power to execute a process. However, &lt;strong&gt;if our Node.js application is the one using intensive CPU processing power to execute power, it means we cannot execute other sets of instructions until the heavy processing power instruction completes. This is called blocking the event loop&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#confusing-javascript-and-nodejs-threading-process"&gt;
  &lt;/a&gt;
  Confusing JavaScript and Node.js Threading Process
&lt;/h2&gt;

&lt;p&gt;It is important to not say Node.js is single-threaded because the JavaScript programming language is single-threaded. This is incorrect. JavaScript can run in different programming environments, and Node.js being among the most popular environments using JavaScript. Therefore, it is a common misconception to think JavaScript is single-threaded. When speaking about single-threaded or multi-threaded, we should look at how the programming environment operates rather than how the language in itself.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-worker-threads-in-nodejs-does-it-make-nodejs-multithreaded"&gt;
  &lt;/a&gt;
  What About Worker Threads in Node.js? Does it Make Node.js Multi-threaded?
&lt;/h2&gt;

&lt;p&gt;While the implementation of worker threads in v10.5.0 allows the use of threads that execute JavaScript in parallel, Node.js event loop architecture is single-threaded based.&lt;/p&gt;

&lt;p&gt;What really happens when spawning multiple threads using &lt;strong&gt;worker_threads&lt;/strong&gt; is the generation of multiple V8 engines sharing memory. Workers threads are useful for performing CPU-intensive JavaScript operations. This frees up the main thread’s event loop from CPU-heavy processes and keeps it available for what is best for intensive I/O operations.&lt;/p&gt;

&lt;p&gt;The expense of generating worker threads doesn’t result in a positive impact around I/O intensive work as in the end, each thread will have the same mechanism: one event loop per thread, which won’t be any different than opting not to use worker threads. Node.js’s built-in asynchronous I/O operations are more efficient than workers can be.&lt;/p&gt;

&lt;p&gt;Having said that, each thread will use the same Node.js architecture which is single-threaded based. You can achieve multithreading by generating multiple nodes or Node.js V8 engines which in isolation are single-threaded. It is still correct to say Node.js is not multi-threaded.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to flatten array using Javascript</title>
      <author>Abdullah Furkan Özbek</author>
      <pubDate>Tue, 07 Sep 2021 11:38:37 +0000</pubDate>
      <link>https://dev.to/afozbek/how-to-flatten-array-using-javascript-17kg</link>
      <guid>https://dev.to/afozbek/how-to-flatten-array-using-javascript-17kg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;So you have some nested array but need to flattened it so you use it inside your codebase. There are actually a couple of ways to do it.&lt;/p&gt;

&lt;p&gt;Here is what we are gonna take a look at;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Array.prototype.flat()&lt;/li&gt;
&lt;li&gt;Reduce and Concat Solution&lt;/li&gt;
&lt;li&gt;Recursive Solution&lt;/li&gt;
&lt;li&gt;Stack Solution&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-arrayprototypeflat-solution"&gt;
  &lt;/a&gt;
  1. Array.prototype.flat() Solution
&lt;/h2&gt;

&lt;p&gt;The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Returns:&lt;/strong&gt; A new array with the sub-array elements concatenated into it.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: [0, 1, 2, 3, 4]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[[[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]]]];&lt;/span&gt;

&lt;span class="c1"&gt;// We can also give optional depth argument to flat function&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: [0, 1, 2, [3, 4]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Flat can  also work on nested arrays&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;Infinity&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: [0, 1, 2, 3, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or it can remove empty spots in the array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;arr5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// [1, 2, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-reduce-and-concat-solution"&gt;
  &lt;/a&gt;
  2. Reduce and Concat Solution
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toFlatten&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;flat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toFlatten&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="p"&gt;?&lt;/span&gt; 
            &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toFlatten&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;toFlatten&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]]);&lt;/span&gt; &lt;span class="c1"&gt;// [1, 2, 3, 4, 5]&lt;/span&gt;
&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;([[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]]);&lt;/span&gt; &lt;span class="c1"&gt;// [1, 1.1, 2, 3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-recursive-solution"&gt;
  &lt;/a&gt;
  3. Recursive Solution
&lt;/h2&gt;

&lt;p&gt;We can also apply recursive solution with the help of concat function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flattenArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flattenArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]]]]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flattenArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;// ["a", 0, 1, 2, 3, 5, 6, 8, 9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-stack-solution"&gt;
  &lt;/a&gt;
  4. Stack Solution
&lt;/h2&gt;

&lt;p&gt;We can also solve this by the help of stack data structure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// non recursive flatten deep using a stack&lt;/span&gt;
&lt;span class="c1"&gt;// note that depth control is hard/inefficient as we will need to tag EACH value with its own depth&lt;/span&gt;
&lt;span class="c1"&gt;// also possible w/o reversing on shift/unshift, but array OPs on the end tends to be faster&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// pop value from stack&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// push back array items, won't modify the original input&lt;/span&gt;
      &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;// reverse to restore input order&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]]];&lt;/span&gt;
&lt;span class="nx"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// [1, 2, 3, 4, 5, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat"&gt;Array.prototype.flat() - JavaScript | MDN&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/nandkk05/flatten-an-array-using-javascript-568l"&gt;Flatten an array using javascript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/10865025/merge-flatten-an-array-of-arrays"&gt;Merge/flatten an array of arrays&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>100daysofcode</category>
    </item>
  </channel>
</rss>
