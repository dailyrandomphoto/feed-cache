<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>25 amazing ü§© GitHub repositories that will help you ü™Ñ make a Beautiful Project</title>
      <author>Coderz</author>
      <pubDate>Thu, 21 Oct 2021 06:31:21 +0000</pubDate>
      <link>https://dev.to/h763/25-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-94b</link>
      <guid>https://dev.to/h763/25-amazing-github-repositories-that-will-help-you-make-a-beautiful-project-94b</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Today I would like to give examples of good GitHub repositories that will help you implement complex animations, as well as useful functions in your projects.&lt;/p&gt;
&lt;p&gt;So let's get started¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/10-awesome-github-repos-every-web-developer-should-know/&amp;amp;ved=2ahUKEwiw1e_qpqbzAhU78HMBHVvBAWkQFnoECBAQAQ&amp;amp;usg=AOvVaw1YdY91hlP3suK6HGMF0MXW"&gt;25 amazing ü§© GitHub repositories that will help you ü™Ñ make a Beautiful Project&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Master CSS positioning in 5 minutes</title>
      <author>Coderz</author>
      <pubDate>Thu, 21 Oct 2021 06:30:31 +0000</pubDate>
      <link>https://dev.to/h763/master-css-positioning-in-5-minutes-4afl</link>
      <guid>https://dev.to/h763/master-css-positioning-in-5-minutes-4afl</guid>
      <description>&lt;p&gt;&lt;span&gt;The ability to position elements on a page is must-have for every web developer. And still, I see even experienced developers often times struggle with this a bit or google instantly. But if you take your time and get this right, you will be a¬†&lt;/span&gt;&lt;span&gt;CSS-positioning ninja&lt;/span&gt;&lt;span&gt;¬†‚öîÔ∏è by the end of this post.¬†&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwingsie8NrzAhWKT30KHeUpDR8QFnoECCEQAQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;Master CSS positioning in 5 minutes&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>API Testing - How to manage API Test suites in vREST NG Application?</title>
      <author>Dheeraj Aggarwal</author>
      <pubDate>Thu, 21 Oct 2021 06:01:57 +0000</pubDate>
      <link>https://dev.to/dheerajaggarwal/api-testing-how-to-manage-api-test-suites-in-vrest-ng-application-2b1j</link>
      <guid>https://dev.to/dheerajaggarwal/api-testing-how-to-manage-api-test-suites-in-vrest-ng-application-2b1j</guid>
      <description>&lt;p&gt;This video #tutorial explains how you may quickly manage your API Test suites in vREST NG Application via UI.&lt;/p&gt;

&lt;p&gt;vREST NG is a script less API test automation tool. It helps you to write maintainable test cases quickly for functional and regression testing of APIs. You can download and install the vREST NG application directly on Windows, OSX, and Linux via our website.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Link:&lt;/strong&gt; &lt;a href="https://youtu.be/rIOFNiUhBvo"&gt;https://youtu.be/rIOFNiUhBvo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;API Testing Tutorials Playlist:&lt;/strong&gt; &lt;a href="https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0"&gt;https://youtube.com/playlist?list=PLmua155_WrDzt1AbB6iV5Lsw_Z7QrzZZ0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Important Links:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://vrest.io/?utm_source=devto&amp;amp;utm_medium=devto-desc&amp;amp;utm_campaign=video"&gt;vREST NG Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/NtRa7kw"&gt;Community Chat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://meetings.hubspot.com/dheeraj-aggarwal"&gt;Book a Live Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Please do like and share if you found this video helpful and let the voice heard by the testing community. Also, let us know your feedback by commenting on this post.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>tutorial</category>
      <category>apitesting</category>
      <category>vrest</category>
    </item>
    <item>
      <title>NextAuth the easiest authentication for Next.js</title>
      <author>Chris Bongers</author>
      <pubDate>Thu, 21 Oct 2021 05:44:14 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/nextauth-the-easiest-authentication-for-nextjs-5aom</link>
      <guid>https://dev.to/dailydevtips1/nextauth-the-easiest-authentication-for-nextjs-5aom</guid>
      <description>&lt;p&gt;Adding authentication to any application can be a bit of a mission.&lt;br&gt;
However, with NextAuth, it's a breeze for Next.js applications.&lt;/p&gt;

&lt;p&gt;In this article, we'll explore a social login, using Twitter as our authentication layer.&lt;/p&gt;

&lt;p&gt;We'll build this whole app from scratch so you can follow along.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#adding-nextauth-to-our-application"&gt;
  &lt;/a&gt;
  Adding NextAuth to our application
&lt;/h2&gt;

&lt;p&gt;Before adding it, let's quickly scaffold a new Next.js app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give the project a cool name on the prompt, and that's it. We have a basic Next.js app now.&lt;/p&gt;

&lt;p&gt;To run your app enter the folder and execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To add NextAuth to our project, we need to install the following package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i next-auth@beta
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-the-serverside-layer"&gt;
  &lt;/a&gt;
  Adding the server-side layer
&lt;/h2&gt;

&lt;p&gt;The first step is to add the server-side layer. This comes with the callback for the providers and more.&lt;/p&gt;

&lt;p&gt;To add this, we need to create an &lt;code&gt;auth&lt;/code&gt; folder inside our &lt;code&gt;pages/api&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Inside this &lt;code&gt;auth&lt;/code&gt; folder create a file called &lt;code&gt;[...nextauth].js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside of it, place the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;NextAuth&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;NextAuth&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;// We'll come back here&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-the-session-to-our-app"&gt;
  &lt;/a&gt;
  Adding the session to our app
&lt;/h2&gt;

&lt;p&gt;The next part we need is a session provider. This is already given to us by NextAuth. We just need to enable it in our &lt;code&gt;pages/_app.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SessionProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-auth/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SessionProvider&lt;/span&gt; &lt;span class="na"&gt;session&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SessionProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will make sure our complete app is wrapped in a session provider to access the session throughout our app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-twitter-provider-to-nextauth"&gt;
  &lt;/a&gt;
  Adding the Twitter provider to NextAuth
&lt;/h2&gt;

&lt;p&gt;So far, we don't have any providers set up yet, so our app can't authenticate with anything.&lt;/p&gt;

&lt;p&gt;To change this, we must first register a new app in the &lt;a href="https://developer.twitter.com/"&gt;Twitter Developer console&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a new app here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bg7OFxjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633969004315/-5KIByrIj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bg7OFxjT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633969004315/-5KIByrIj.png" alt="Twitter new app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add this point go back to your application, and create a &lt;code&gt;.env&lt;/code&gt; file in the root of your project.&lt;br&gt;
Inside this file, add the following two details from your Twitter app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TWITTER_CLIENT_ID=xxx
TWITTER_CLIENT_SECRET=xxx
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then click the authentication settings.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eoIGAZFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633969601798/UQncOwWk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eoIGAZFS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633969601798/UQncOwWk6.png" alt="Authentication settings button in Twitter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this screen, fill out the following options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enable 3-legged Oauth (ON)&lt;/li&gt;
&lt;li&gt;Request email addresses from users (ON)&lt;/li&gt;
&lt;li&gt;Callback URLs (&lt;a href="http://localhost:3000/api/auth/callback/twitter"&gt;http://localhost:3000/api/auth/callback/twitter&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Website URL (your website)&lt;/li&gt;
&lt;li&gt;Terms of service (your website)&lt;/li&gt;
&lt;li&gt;Privacy policy (your website)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tCHvLnv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633969714109/548cAXj-l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tCHvLnv_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633969714109/548cAXj-l.png" alt="Twitter app settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last thing we need to do is edit our &lt;code&gt;pages/api/auth/[...nextauth].js&lt;/code&gt; file and include the Provider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;NextAuth&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;TwitterProvider&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-auth/providers/twitter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;NextAuth&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;TwitterProvider&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;clientId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TWITTER_CLIENT_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;clientSecret&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;TWITTER_CLIENT_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-the-frontend-authentication-steps"&gt;
  &lt;/a&gt;
  Adding the frontend authentication steps
&lt;/h2&gt;

&lt;p&gt;Now that we have everything in place, let's add the login button to our app and test everything out.&lt;/p&gt;

&lt;p&gt;Change your &lt;code&gt;index.js&lt;/code&gt; file to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signOut&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-auth/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
        Signed in as &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;signOut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Sign out&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      Not signed in &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;br&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Sign in&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if we now run our app, the flow looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5kYRhxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633970251874/6riVZdj04.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5kYRhxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633970251874/6riVZdj04.gif" alt="NextAuth the easiest authentication for Next.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also find the complete code on &lt;a href="https://github.com/rebelchris/next-auth"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
    </item>
    <item>
      <title>SysmonForLinux - Logging File Create Events </title>
      <author>oz9un</author>
      <pubDate>Thu, 21 Oct 2021 05:33:41 +0000</pubDate>
      <link>https://dev.to/openlab/sysmonforlinux-logging-file-create-events-2bck</link>
      <guid>https://dev.to/openlab/sysmonforlinux-logging-file-create-events-2bck</guid>
      <description>&lt;p&gt;In this article, I will explain how to use SysmonForLinux and how to create specific configurations to keep track of file creation events.&lt;/p&gt;

&lt;p&gt;For further information about events and configuration options; you can visit my github repository: &lt;a href="https://github.com/oz9un/SysmonForLinux-Manual"&gt;oz9un&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sysmon-in-a-nutshell"&gt;
  &lt;/a&gt;
  Sysmon in a nutshell:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Sysmon&lt;/strong&gt; (System Monitor) is a Windows system service that logs system activity to the Windows event log. Now, it is available for &lt;strong&gt;Linux&lt;/strong&gt; too! &lt;/p&gt;

&lt;p&gt;It was developed by Microsoft as an open source project. Even though it is doubtful to see such a contribution, I am very glad about it ü§≠&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EpBMHJq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/ANbD1CCdA3iI8/giphy.gif%3Fcid%3Decf05e47chlsv1aaptk03nsstucjmbytwln7w8t9locgvmfi%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EpBMHJq7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/ANbD1CCdA3iI8/giphy.gif%3Fcid%3Decf05e47chlsv1aaptk03nsstucjmbytwln7w8t9locgvmfi%26rid%3Dgiphy.gif%26ct%3Dg" alt="sus_gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#file-create-event"&gt;
  &lt;/a&gt;
  File Create event:
&lt;/h2&gt;

&lt;p&gt;As its name suggests, this event detects when a file is created on Linux systems.&lt;/p&gt;

&lt;p&gt;This event can be especially useful when tracking auto-startup folders and folders where everyone has a permission to create files. Because most of the time, they are the main targets of malicious users üëπ.&lt;/p&gt;

&lt;p&gt;A normal file creation event log would looks like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qvvEDcn5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4x8zf6qaw3r9m1164w7d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qvvEDcn5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4x8zf6qaw3r9m1164w7d.png" alt="FileCreation Event Log"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#configuring-file-create-event"&gt;
  &lt;/a&gt;
  Configuring File Create event:
&lt;/h2&gt;

&lt;p&gt;By default, SysmonForLinux logs every file creation events. But we are talking about Linux. Even if you connect to a server via SSH; that results in the creation of many tmp files.&lt;/p&gt;

&lt;p&gt;As a result, you can guess how chaotic the log file has become. This is why we don't want to log everything, especially in case of file creation event.&lt;/p&gt;

&lt;p&gt;File Create event has 7 different description fields that we can use as filters:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fgOQgmFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bw6rxk7loe0i65y60rx1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fgOQgmFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bw6rxk7loe0i65y60rx1.png" alt="Description Fields"&gt;&lt;/a&gt;&lt;br&gt;
You can view all description fields for each event on my &lt;a href="https://github.com/oz9un/SysmonForLinux-Manual"&gt;github&lt;/a&gt; page!&lt;/p&gt;

&lt;p&gt;When creating a configuration file (xml) for SysmonForLinux, we can use this fields as a filter.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#example-scenario"&gt;
  &lt;/a&gt;
  Example scenario:
&lt;/h2&gt;

&lt;p&gt;Suppose you want to keep log of the every file creation event with the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;File should be created in &lt;em&gt;/tmp&lt;/em&gt; or under &lt;em&gt;/home/secret&lt;/em&gt; folder.&lt;/li&gt;
&lt;li&gt;File should be created in &lt;em&gt;October 2021&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;File shouldn't be created with &lt;em&gt;/usr/sbin/cups-browsed&lt;/em&gt; daemon (This printer daemon uses /tmp file quite often).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Desired configuration file should looks like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Event ID 11 == FileCreate. Log what we want! --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;RuleGroup&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="na"&gt;groupRelation=&lt;/span&gt;&lt;span class="s"&gt;"and"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;FileCreate&lt;/span&gt; &lt;span class="na"&gt;onmatch=&lt;/span&gt;&lt;span class="s"&gt;"include"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;TargetFilename&lt;/span&gt; &lt;span class="na"&gt;condition=&lt;/span&gt;&lt;span class="s"&gt;"contains any"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;/home/secret/;/tmp/&lt;span class="nt"&gt;&amp;lt;/TargetFilename&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;UtcTime&lt;/span&gt; &lt;span class="na"&gt;condition=&lt;/span&gt;&lt;span class="s"&gt;"contains"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;2021-10&lt;span class="nt"&gt;&amp;lt;/UtcTime&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/FileCreate&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;FileCreate&lt;/span&gt; &lt;span class="na"&gt;onmatch=&lt;/span&gt;&lt;span class="s"&gt;"exclude"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Image&lt;/span&gt; &lt;span class="na"&gt;condition=&lt;/span&gt;&lt;span class="s"&gt;"is"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;/usr/sbin/cups-browsed&lt;span class="nt"&gt;&amp;lt;/Image&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/FileCreate&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/RuleGroup&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can view the whole configuration file from: &lt;a href="https://github.com/oz9un/SysmonForLinux-Manual/blob/main/Description%20Field%20Examples/FileCreate_ExampleScenario.xml"&gt;Example Scenario&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#results"&gt;
  &lt;/a&gt;
  Results:
&lt;/h2&gt;

&lt;p&gt;To view sysmon's log file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tail&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; /var/log/syslog | &lt;span class="nb"&gt;sudo&lt;/span&gt; /opt/sysmon/sysmonLogView &lt;span class="nt"&gt;-X&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a1YPV6Ex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3ujafruawscruow8w2c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a1YPV6Ex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3ujafruawscruow8w2c.png" alt="Sysmon Log Output"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we successfully created a configuration file according to our properties and caught some malicious events already!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WrFQS5Oa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/TOWeGr70V2R1K/giphy.gif%3Fcid%3Decf05e47a1op0mndh2ygfi3sf7fx21ioab3rxnp60jdeezsn%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WrFQS5Oa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/TOWeGr70V2R1K/giphy.gif%3Fcid%3Decf05e47a1op0mndh2ygfi3sf7fx21ioab3rxnp60jdeezsn%26rid%3Dgiphy.gif%26ct%3Dg" alt="hacker_gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end-amp-contact"&gt;
  &lt;/a&gt;
  End &amp;amp; Contact:
&lt;/h2&gt;

&lt;p&gt;This is at the end of my first post about SysmonForLinux. I plan to write much more on this subject as I find time. I would be very happy if you can give a feedback. Stay in touch!&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/oz9un"&gt;https://github.com/oz9un&lt;/a&gt;&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/oz9un"&gt;https://twitter.com/oz9un&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HpGlf6hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/iPiUxztIL4Sl2/giphy.gif%3Fcid%3Decf05e47u8cqoaovibilphanyitfewmsnw8wa7c35tqxez0p%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HpGlf6hD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/iPiUxztIL4Sl2/giphy.gif%3Fcid%3Decf05e47u8cqoaovibilphanyitfewmsnw8wa7c35tqxez0p%26rid%3Dgiphy.gif%26ct%3Dg" alt="cat_gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sysmon</category>
      <category>linux</category>
      <category>log</category>
      <category>devops</category>
    </item>
    <item>
      <title>Best dev tool ever!!</title>
      <author>ImgSrc</author>
      <pubDate>Thu, 21 Oct 2021 05:14:46 +0000</pubDate>
      <link>https://dev.to/imgsrcspace/best-dev-tool-ever-3bmb</link>
      <guid>https://dev.to/imgsrcspace/best-dev-tool-ever-3bmb</guid>
      <description>&lt;p&gt;Hey everyone, &lt;br&gt;
Imgsrc.space is the best Placeholder service ever. It's just like searching on google images but &lt;em&gt;you won't even need to leave your coding environment&lt;/em&gt;. We have a vast a library of around &lt;strong&gt;3 million&lt;/strong&gt; images and videos, so all you have to do is enter your search term and we will do  the rest. Totally free. &lt;br&gt;
&lt;a href="https://imgsrc.space"&gt;Imgsrc.space&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#how-to-use-our-placeholders"&gt;
  &lt;/a&gt;
  How To Use Our Placeholders?
&lt;/h1&gt;

&lt;p&gt;Well there are 2 ways to use them&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The easy way - Works everywhere no platform dependence&lt;/li&gt;
&lt;li&gt;The easier way - Works in your web pages with a js library&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#the-easy-way"&gt;
  &lt;/a&gt;
  The easy way
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#get-a-specific-image"&gt;
  &lt;/a&gt;
  Get a specific image
&lt;/h3&gt;

&lt;p&gt;Just add the search term you want at the end of the url after / and we will deliver it. Simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://imgsrc.space/cat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nq07FHHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9xsmwlp7lhqvj0nk6u9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nq07FHHJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9xsmwlp7lhqvj0nk6u9.jpg" alt="Image of a cat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resizing-images"&gt;
  &lt;/a&gt;
  Resizing images
&lt;/h3&gt;

&lt;p&gt;Imgsrc.space can also resize the images for you. To enter your desired dimensions put an "?" at the end of the search term and then your enter your desired height and width. Here "h" stands for height and w stands for width. They must be separated by an &amp;amp;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://imgsrc.space/architecture?h=400&amp;amp;w=400
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zEYeCR03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xouey169tek2r5u8gi9t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zEYeCR03--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xouey169tek2r5u8gi9t.png" alt="Image of architecture 400by400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#autoresizing-images"&gt;
  &lt;/a&gt;
  AutoResizing images
&lt;/h3&gt;

&lt;p&gt;If you only provide a single dimension parameter (i.e only height or width) Imgsrc.Space would automatically resize the other parameters accordingly&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://imgsrc.space/paris?h=400
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nWiablnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkxo4z2btrw3ue3jh595.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nWiablnu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkxo4z2btrw3ue3jh595.png" alt="Image of Paris"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-a-specific-video"&gt;
  &lt;/a&gt;
  Getting a specific Video
&lt;/h3&gt;

&lt;p&gt;To get a specific image just enter the search word in the image source after a dot and a space followed by an -v&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://imgsrc.space/ocean-v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://imgsrc.space/ocean-v"&gt;try it&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-easier-way"&gt;
  &lt;/a&gt;
  The easier way
&lt;/h2&gt;

&lt;p&gt;If you are writing html pages, then we have a good news, you can use our js library to make things easier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="https://cdn.jsdelivr.net/gh/imgsrc-space/imgsrc.space-js-library/main.js" &amp;gt; &amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy and paste the above script tag to the &lt;strong&gt;&lt;em&gt;TOP&lt;/em&gt;&lt;/strong&gt; of your html page (in the head tag), and that's it.&lt;/p&gt;

&lt;p&gt;Now to use a image just enter a "dot followed by a space and then your search term ".Here are some examples of what you can do with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src=". cow" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src=". dog?h=500&amp;amp;w=70" &amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;img src=". sunset?w=700" &amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;video&amp;gt; &amp;lt;source src=". car-v" type="video/mp4"&amp;gt; &amp;lt;/video&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find more details in this &lt;a href="https://imgsrc.space/documentation.src/index.htm#Using-our-JS-library"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope this would save you guys some time. Happy coding üòÄüëçüèº&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>productivity</category>
    </item>
    <item>
      <title>6 Python Easy Tricks for beginners</title>
      <author>Rohan Kiratsata</author>
      <pubDate>Thu, 21 Oct 2021 05:06:25 +0000</pubDate>
      <link>https://dev.to/rohankiratsata/6-python-easy-tricks-for-begineers-4g12</link>
      <guid>https://dev.to/rohankiratsata/6-python-easy-tricks-for-begineers-4g12</guid>
      <description>&lt;p&gt;Hello fellow coders! Today I'm going to tell you 6 python tricks that you can use to make your learning journey fun and easy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-swapping-numbers"&gt;
  &lt;/a&gt;
  1. Swapping Numbers
&lt;/h2&gt;

&lt;p&gt;Swapping is important concept when it comes to data structure and algorithm. In normal way we need to create a temporary variable to swap the numbers. But in Python it's just easy..&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="c1"&gt;# Before Swapping
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# OUTPUT : 5 10
&lt;/span&gt;
&lt;span class="c1"&gt;#Swapping Variables
&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# OUTPUT : 10 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-opening-a-website"&gt;
  &lt;/a&gt;
  2. Opening a Website
&lt;/h2&gt;

&lt;p&gt;Opening website using a python library.This is how we can open a website with just a single line of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;webbrowser&lt;/span&gt;
&lt;span class="n"&gt;webbrowser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://www.google.com"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-colored-text"&gt;
  &lt;/a&gt;
  3. Colored Text
&lt;/h2&gt;

&lt;p&gt;Prints colored output text. But first we need to install &lt;strong&gt;termcolor&lt;/strong&gt; python package using &lt;code&gt;pip install termcolor&lt;/code&gt; in cmd or terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;termcolor&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;colored&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colored&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is Awesome"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colored&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Python is easy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-reverse-a-string"&gt;
  &lt;/a&gt;
  4. Reverse a String
&lt;/h2&gt;

&lt;p&gt;Trust me, reversing a string can't be easy than this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"pythoniseasy"&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-multiple-user-input"&gt;
  &lt;/a&gt;
  5. Multiple User Input
&lt;/h2&gt;

&lt;p&gt;Single line code for taking multiple user input using &lt;code&gt;.split()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Enter A &amp;amp; B : "&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A :"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"B"&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-single-string-from-list"&gt;
  &lt;/a&gt;
  6. Single String From List
&lt;/h2&gt;

&lt;p&gt;Create a single string from all elements in the list&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;lstStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"coding"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"is"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"fun"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lstStr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it for today! Till then KEEP CODING...KEEP HUSTLING&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>programming</category>
    </item>
    <item>
      <title>After refresh scroll page to Top/Middle/Footer.</title>
      <author>Vickyvn</author>
      <pubDate>Thu, 21 Oct 2021 04:59:51 +0000</pubDate>
      <link>https://dev.to/vickyvn5/after-refresh-scroll-page-to-topmiddlefooter-42bk</link>
      <guid>https://dev.to/vickyvn5/after-refresh-scroll-page-to-topmiddlefooter-42bk</guid>
      <description>&lt;p&gt;Here we learn how can we scroll our page onclick button or after Reload page.&lt;/p&gt;

&lt;p&gt;simple we adding ref in our html tags where you want to scroll page.&lt;br&gt;
example &lt;br&gt;
&amp;lt; div class="top" ref="goToTop"&amp;gt; ... &amp;lt; /div &amp;gt;&lt;br&gt;
or&lt;br&gt;
&amp;lt; div class="middle" ref="goToMiddle"&amp;gt; ... &amp;lt; /div &amp;gt;&lt;br&gt;
or&lt;br&gt;
&amp;lt; div class="footer" ref="goToFooter"&amp;gt; ... &amp;lt; /div &amp;gt;&lt;/p&gt;

&lt;p&gt;in vue js we handled&lt;br&gt;
// Create method&lt;br&gt;
scrollToElement(ref) {&lt;br&gt;
    window.scrollTo(0,0);&lt;br&gt;
    this.$scrollTo(ref, 1000);&lt;br&gt;
},&lt;/p&gt;

&lt;p&gt;// If want to after refresh then create mounted()&lt;/p&gt;

&lt;p&gt;mounted() {&lt;br&gt;
     this.scrollToElement(this.$refs.goToTop);&lt;br&gt;
}, &lt;br&gt;
// for top use goToTop , for middle use goToMiddle , for footer use &lt;/p&gt;

&lt;p&gt;// If want to after onclick then create method&lt;br&gt;
onclickMethod() {&lt;br&gt;
     this.scrollToElement(this.$refs.goToTop); &lt;br&gt;
}, &lt;/p&gt;

&lt;p&gt;I hope it will help you.&lt;/p&gt;

</description>
      <category>vue</category>
    </item>
    <item>
      <title>How to Mine Tron TRX with Your Computer in Under 5 Minutes in 2021</title>
      <author>Course Probe</author>
      <pubDate>Thu, 21 Oct 2021 04:48:28 +0000</pubDate>
      <link>https://dev.to/courseprobe/how-to-mine-tron-trx-with-your-computer-in-under-5-minutes-in-2021-45la</link>
      <guid>https://dev.to/courseprobe/how-to-mine-tron-trx-with-your-computer-in-under-5-minutes-in-2021-45la</guid>
      <description>&lt;p&gt;A Step by Step Guide to Pool Mining Tron TRX Coin in 2021 with a CPU!&lt;/p&gt;

&lt;p&gt;Sometimes mining can seem to be too complex for the average computer user, so I thought about putting together a quick guide to get you excited about mining cryptocurrency and Tron TRX in particular.&lt;/p&gt;

&lt;p&gt;Anyone can start mining Tron with any computer in under 5 minutes with this guide, regardless of your technical skill level you will be able to increase your crypto knowledge and start mining TRX with your CPU today!!&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;STEP 1:&lt;/strong&gt; Get yourself a Wallet.&lt;/p&gt;

&lt;p&gt;It is recommended to use Tronlink as the browser wallet for this coin because it will let you create multiple accounts, and also let you interact with Tron Dapps and do some operations like staking (Which I'll cover later on).&lt;/p&gt;

&lt;p&gt;You could also get Exodus or Atomic Wallet but these wouldn't be my first option.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 2:&lt;/strong&gt; Download XMRIg from Github&lt;/p&gt;

&lt;p&gt;You could go to the xmrig site to download the latest version or from the oficial github repository: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/xmrig/xmrig/releases"&gt;https://github.com/xmrig/xmrig/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you download the latest version you would have to edit a file named "pool_mine_example.bat" Inside this file you need to modify 2 lines.&lt;/p&gt;

&lt;p&gt;It could look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd %~dp0
xmrig.exe -o rx.unmineable.com:3333 -u TRX:TFYwWgGFBZqf5EQAgopsWnwNoiomwRzqEV.wini3#e4xd-wmzl -p x
pause
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second line after the -o you can see the Pool URL, in this case all you have to do depending on your location is to use one of the following URLs (select the one closer to your location).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;USA:&lt;/strong&gt; rx-us.unmineable.com:3333&lt;br&gt;
&lt;strong&gt;Europe:&lt;/strong&gt; rx-eu.unmineable.com:3333&lt;br&gt;
&lt;strong&gt;Asia:&lt;/strong&gt; rx-asia.unmineable.com:3333&lt;/p&gt;

&lt;p&gt;Then, the third line is where you will enter your wallet's public address (copied in STEP 1), place it after the TRX: and before the first dot "." .&lt;/p&gt;

&lt;p&gt;The general structure of the address needs to be:&lt;/p&gt;

&lt;p&gt;[COIN]:[Wallet address].[workerID]#[Code to lower mining fee]&lt;/p&gt;

&lt;p&gt;The workerID is any name you want to give to each computer where you are running the miner so it can easily be identified later on under the pool stats.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The code after the # is important&lt;/strong&gt; because mining with that code will drop the Mining Fee from 1% to 0.75% (it makes a difference). You can start mining using that code &lt;strong&gt;e4xd-wmzl&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Run the file as an administrator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcb4pCSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca69fmuxwfmtc83gfqhh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcb4pCSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca69fmuxwfmtc83gfqhh.jpg" alt="XMRig Mining"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything goes well, you are now running XMRig and are mining. Congrats !!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Log into Unmineable to check your stats&lt;/p&gt;

&lt;p&gt;Unmineable.com is a mining Pool which allows you to mine with your CPU using RandomX and pay you in any coin you select. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" alt="Unmineable Site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember when you set up the address inside the XMRig config file ? &lt;/p&gt;

&lt;p&gt;Well, there you just let Unmineable know the coin you want to be paid in, in this example TRX and then the address where they will transfer the mined coins.&lt;/p&gt;

&lt;p&gt;In order to check your balance, log into &lt;a href="https://unmineable.com"&gt;Unmineable&lt;/a&gt; and then select the coin you want to mine. In this example, Tron TRX.&lt;/p&gt;

&lt;p&gt;Then you can select the Tab that reads RandomX and enter your address in the box that reads "Enter your address to check your stats:". &lt;/p&gt;

&lt;p&gt;After doing this you will see the balance on your account and you will even be able to request a payment.&lt;/p&gt;




&lt;p&gt;Congrats, you are a miner now! &lt;/p&gt;

&lt;p&gt;What I like about mining Tron with unmineable is that you don't really have to wait long like other coins to be able to get your payments, apart from that you can get your TRX and go to &lt;a href="https://tronscan.org/#/sr/votes"&gt;Tronscan&lt;/a&gt; and you can stake your coins.&lt;/p&gt;

&lt;p&gt;Staking means freezing your coins and lending them to one of the Super representative nodes so they pay you in return some rewards once they have validated and added blocks to the chain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The steps to Stake Tron TRX in tronscan are:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the Votes section in Tronscan (link above).&lt;/li&gt;
&lt;li&gt;Click the Green "Voting" button on top of the list of SR.&lt;/li&gt;
&lt;li&gt;Click "Obtain" so you freeze your coins to get voting power.&lt;/li&gt;
&lt;li&gt;Select Votes + Bandwith in the windows that pops up.&lt;/li&gt;
&lt;li&gt;Continue and sign the transaction with tronlink.&lt;/li&gt;
&lt;li&gt;Once you get your votes, distribute them or assign them to a SR node from the list.&lt;/li&gt;
&lt;li&gt;You are done, after a day visit again your Address in Tronscan to check your unwithdraw rewards balance.&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;I recommend downloading some software to monitor the running temperature of your CPU, a good and free one is Hardware Monitor.&lt;/p&gt;

&lt;p&gt;Try not to exceed the temperature more than 90 degrees celsius. In case you are mining with a laptop, change the thermal paste of your CPU, get it cleaned inside, and get some heat extractors for laptops.&lt;/p&gt;

&lt;p&gt;If you take care of the temperature your computer should work very well, the amount of coins you can mine will depend on the hashrate of your CPU. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Remember to use a valid address for each coin, for example if you want to be paid in ADA then you need a valid Cardano blockchain address. In this example Binance Smart Chain is used and you would receive a SHiba Inu token on the BSC blockchain.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;If you are looking for more information, there's a good guide in a PDF ebook and is Free, get it at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" alt="Mining with CPU"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>tron</category>
      <category>crypto</category>
    </item>
    <item>
      <title>Getting Started With Appwrite's Apple SDK üì±üíª</title>
      <author>Eldad A. Fux</author>
      <pubDate>Thu, 21 Oct 2021 04:40:39 +0000</pubDate>
      <link>https://dev.to/eldadfux/getting-started-with-appwrites-apple-sdk-5bd</link>
      <guid>https://dev.to/eldadfux/getting-started-with-appwrites-apple-sdk-5bd</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Bk_OFaWDqB8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Earlier this week, we announced the official release of &lt;a href="https://dev.to/appwrite/building-apps-just-got-swifter-announcing-appwrite-v011-4g62"&gt;Appwrite 0.11&lt;/a&gt; and the new Appwrite SDKs for Apple devices and Swift. Yesterday we had a short live session with Aditya, Jake, and Damodar, demonstrating how you can quickly start building apps for Apple devices with Appwrite as your backend server.&lt;/p&gt;

&lt;p&gt;To learn more, you can check our official Appwrite 0.11 announcement post, and check our &lt;a href="https://github.com/appwrite/sdk-for-apple"&gt;Apple&lt;/a&gt; and &lt;a href="https://github.com/appwrite/sdk-for-swift"&gt;Swift&lt;/a&gt; SDKs. If you have any further questions you can join the Appwrite team and community on the &lt;a href="https://appwrite.io/discord"&gt;Appwrite Discord server&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>ios</category>
      <category>swift</category>
      <category>mobile</category>
      <category>appwrite</category>
    </item>
    <item>
      <title>Async/Await with easy to understand examples.</title>
      <author>Nehal Mahida</author>
      <pubDate>Thu, 21 Oct 2021 04:11:46 +0000</pubDate>
      <link>https://dev.to/nehal_mahida/asyncawait-with-easy-to-understand-examples-2221</link>
      <guid>https://dev.to/nehal_mahida/asyncawait-with-easy-to-understand-examples-2221</guid>
      <description>&lt;p&gt;Let's first understand the &lt;strong&gt;Async&lt;/strong&gt; keyword. &lt;/p&gt;

&lt;p&gt;Put this keyword before the function which returns a promise or which does an asynchronous task.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you think your function will run asynchronously (fetching data from API) then use the async keyword before that function.&lt;/p&gt;

&lt;p&gt;Now there is another keyword &lt;strong&gt;Await&lt;/strong&gt; that works only inside async functions.&lt;/p&gt;

&lt;p&gt;(There is a concept of top-level await in which await keyword can be used outside of the async function.)&lt;/p&gt;

&lt;p&gt;The Await keyword simply means it makes JavaScript wait until the task is completed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;asyncTask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;asyncTask&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Before Foo Call&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;After Foo Call&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, I am creating a dummy function that takes one second to return its result.&lt;/p&gt;

&lt;p&gt;There is another function foo that calls asyncTask (with await keyword) and prints the result.&lt;/p&gt;

&lt;p&gt;I have put two logs, one is before calling foo and the second is after calling foo.&lt;/p&gt;

&lt;p&gt;What do you think will be the output? ü§î&lt;/p&gt;

&lt;p&gt;As you may know, whenever JavaScript encounter with await keyword it stops the execution of the current function and put it into the callback queue and start executing the next statement which is the second console log.&lt;/p&gt;

&lt;p&gt;Here is an output of the above code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Before Foo Call
After Foo Call
done
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#handling-errors-while-using-asyncawait"&gt;
  &lt;/a&gt;
  Handling errors while using async/await
&lt;/h5&gt;

&lt;p&gt;In the above example, our promise resolves normally and we are printing the result on the console. &lt;/p&gt;

&lt;p&gt;But in case of rejection, it will throw an error so we should handle errors while working with promises. &lt;/p&gt;

&lt;p&gt;Using try/catch block.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;asyncTask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Something not working!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;asyncTask&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;After calling AsyncTask&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, If our asyncTask function throws an error control will go into catch block and simply prints the error message then it will start to execute the next statements.&lt;/p&gt;

&lt;p&gt;Output&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Something not working!
After calling AsyncTask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Very clean. Isn't it?&lt;/p&gt;

&lt;p&gt;Now, try to use async/await instead of then/catch in your next project.&lt;/p&gt;

&lt;p&gt;If you like this article like, share and mark üîñ this article!&lt;/p&gt;

&lt;p&gt;üèÉ‚Äç‚ôÇÔ∏è You can follow me on üëá&lt;/p&gt;

&lt;p&gt;üïä Twitter : &lt;a href="https://twitter.com/nehal_mahida"&gt;https://twitter.com/nehal_mahida&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;üë®‚Äçüíª Github: &lt;a href="https://github.com/NehalMahida"&gt;https://github.com/NehalMahida&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>I Made Youtube Videos using Python</title>
      <author>Sudeep Chauhan</author>
      <pubDate>Thu, 21 Oct 2021 03:59:32 +0000</pubDate>
      <link>https://dev.to/sudcha23/i-made-youtube-videos-using-python-1do0</link>
      <guid>https://dev.to/sudcha23/i-made-youtube-videos-using-python-1do0</guid>
      <description>&lt;p&gt;The first project I worked on after leaving my full time job was to create Youtube videos programmatically, at scale. This post explains what I did, and what happened next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#would-you-rather-"&gt;
  &lt;/a&gt;
  Would you rather ...
&lt;/h2&gt;

&lt;p&gt;watch a video?&lt;/p&gt;

&lt;p&gt;If you're better with visuals / audio, watch this video instead (it's better at 1.5x )&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0og4mM9aPL0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;No?&lt;/p&gt;

&lt;p&gt;Ok, let's go -&lt;/p&gt;

&lt;p&gt;After leaving my full time job at Google and steady pay, I asked myself: what projects could I do that could potentially bring some passive income?&lt;/p&gt;

&lt;p&gt;The project should be exciting enough for me to take a dab, should help me learn something absolutely new, and make a great story regardless of its outcome.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-the-love-of-youtube"&gt;
  &lt;/a&gt;
  For the love of Youtube
&lt;/h2&gt;

&lt;p&gt;I had been thinking about Youtube as a platform for quite some time because it probably ranks number 1 in my list of favorite products.&lt;/p&gt;

&lt;p&gt;Second, it provides hosting videos for FREE, to everyone.&lt;/p&gt;

&lt;p&gt;The second one is huge, if you think of it, especially as an engineer.&lt;/p&gt;

&lt;p&gt;The biggest cost to serving videos online is their hosting, and youtube takes care of that for everyone, for free.&lt;/p&gt;

&lt;p&gt;Not just that, if your videos are public and get views, it even pays you for them!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#music-with-ai"&gt;
  &lt;/a&gt;
  Music with AI?
&lt;/h2&gt;

&lt;p&gt;When Tensorflow was announced, there was also an announcement of a project that could create Music with AI (&lt;a href="https://magenta.tensorflow.org/"&gt;Project Magenta&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This idea that AI could create music resonated with me a lot. The problem with this project was that while AI can create a lot of Music, most of it is average at best.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cgG4wY2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmp0fjpgwlhnsws7nplc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgG4wY2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmp0fjpgwlhnsws7nplc.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Even the most popular Artists usually have only a few super viral songs, and with AI, this percentage is an improbable fraction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crowdsource-discovery-of-good-music"&gt;
  &lt;/a&gt;
  Crowdsource Discovery of Good Music?
&lt;/h2&gt;

&lt;p&gt;Let's just say that it would take AI 100,000 songs to come up with one great one.&lt;/p&gt;

&lt;p&gt;Can we crowd source listening to all of this music to the world and let them decide which song is the best?&lt;/p&gt;

&lt;p&gt;I could create some decent videos of slideshows -- programmatically of course, for each of the music files generated, and upload them to Youtube for the world to figure it out.&lt;/p&gt;

&lt;p&gt;If there's some traction, it would motivate me to spend more time tweaking the AI training model, as well as earn $$ :).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#baby-steps"&gt;
  &lt;/a&gt;
  Baby Steps
&lt;/h2&gt;

&lt;p&gt;Creating music with AI felt like a big task, so I thought, let's just do something basic.&lt;/p&gt;

&lt;p&gt;Let's create videos of just some text converted to speech with slideshow, and upload it to Youtube programmatically. Yep, that's a good start. Based on how that goes, we can work on creating music with AI, instead of that text -&amp;gt; speech thingy.&lt;/p&gt;

&lt;p&gt;To make this MVP of a process, I decided using data from Wikipedia first. I could even incorporate live news to this concept!&lt;/p&gt;

&lt;p&gt;Youtube allows uploading 50 videos daily. This means, that if I had 10 channels, I could upload 500 videos a day. Take a minute to fathom that.&lt;/p&gt;

&lt;p&gt;500 x 365 = 182,500 videos a year.&lt;/p&gt;

&lt;p&gt;If each video gets 10 views, that alone is over 1 million views. Very fascinating. WDYT?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-sound-of-knowledge"&gt;
  &lt;/a&gt;
  Project Sound of Knowledge
&lt;/h2&gt;

&lt;p&gt;I called the project: SoKnow (Sound of Knowledge). Other name I had chosen was Sound of Gold, which I forget why, but SoKnow sounded cool&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YDAMVJ_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zfe1hmi1r20in47u39p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YDAMVJ_G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zfe1hmi1r20in47u39p.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's how it would work:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get Wikipedia trending queries (thanks to Wiki APIs!)&lt;/li&gt;
&lt;li&gt;Get the First Paragraph from each Query&lt;/li&gt;
&lt;li&gt;Check for Adult Content (important!)&lt;/li&gt;
&lt;li&gt;Convert text to Speech (I used Google's text-to-speech API)&lt;/li&gt;
&lt;li&gt;Find images available for commercial use on this topic&lt;/li&gt;
&lt;li&gt;Stitch the images to make a slide show along with the Audio&lt;/li&gt;
&lt;li&gt;Upload to Youtube using Youtube's API&lt;/li&gt;
&lt;li&gt;Drink lemonade and enjoy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I chose Python to write this code in. Why? Because most libraries that I was going to use had best support in Python. Also, I like Python.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#write-the-code"&gt;
  &lt;/a&gt;
  Write the CODE
&lt;/h2&gt;

&lt;p&gt;Step by step I wrote the code to do all the steps. Yes the code was scrappy but it worked.&lt;/p&gt;

&lt;p&gt;Simple API calls to get all the data, used ffmpeg to create slideshow videos. While there was no parallel processing (no threads), the process was fast enough to create 50 videos in 10-15 minutes.&lt;/p&gt;

&lt;p&gt;There were many bugs of course, for example the APIs would timeout, or some special characters would break the sequence, but one by one I fixed them all. If no images were found for a particular topic, I would make it a black screen with the Title's text on top of it.&lt;/p&gt;

&lt;p&gt;Also embedded the channel watermark in one corner.&lt;/p&gt;

&lt;p&gt;To upload the videos, I used &lt;a href="https://developers.google.com/youtube/v3/guides/uploading_a_video"&gt;Youtube's API from GCP&lt;/a&gt;. What was amazing was that I could also set up Description, Title and Keywords in each of the videos through their API. Mind blown.&lt;/p&gt;

&lt;p&gt;All was well in test runs, and then I ran in production.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#youtube-knows-about-this"&gt;
  &lt;/a&gt;
  Youtube knows about this
&lt;/h2&gt;

&lt;p&gt;After running the code, I started seeing bugs that I couldn't really understand. After some debugging I realized, the issue.&lt;/p&gt;

&lt;p&gt;It turns out that Youtube API has quota limitations that are different from the web UI limitations.&lt;/p&gt;

&lt;p&gt;Most prominent for me was that Youtube API only allowed ~3-4 video uploads a day, and not more than that, thanks to their Quota limitations.&lt;/p&gt;

&lt;p&gt;I read their &lt;a href="https://developers.google.com/youtube/v3/determine_quota_cost"&gt;Quota Costs for API requests&lt;/a&gt; much later than I should have.&lt;/p&gt;

&lt;p&gt;Everything has low quota usage except the "Video -&amp;gt; Insert" resource.&lt;/p&gt;

&lt;p&gt;Youtube does allow 50 uploads through their User interface, but not through APIs.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-raise-a-consult"&gt;
  &lt;/a&gt;
  Let's raise a consult!
&lt;/h2&gt;

&lt;p&gt;Why didn't I think of reading this first? I was super mad and sad.&lt;/p&gt;

&lt;p&gt;Also, of course I reached to Youtube team over their Cases consult. I wrote a big doc as much convincing information as I could add. It would take them weeks to revert, which makes sense given their size.&lt;/p&gt;

&lt;p&gt;Not that I was motivated to, after several weeks of no response, I did reach out to a friend who worked in Youtube at the time. As I had thought, it didn't really do anything. For the most part, Google is a meritocracy based company, and unless I was one of the early partners , big enough (think SocialBlade), or had good relations with someone higher in management (VP level?), it was not going to happen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SovUHw2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cp4ftnhxzenzr6x6ixsg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SovUHw2s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cp4ftnhxzenzr6x6ixsg.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I did try to play the "Anti competitive" song in my subsequent appeals, which I thought was clever, but it didn't work. Yes, yes, I know they are smart.&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ab5AP_KP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/1iu8uG2cjYFZS6wTxv/giphy.webp"&gt;&lt;br&gt;
&lt;em&gt;I'm innocent.&lt;/em&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;After several back and forths, they did increase my quota from 10,000 a day to 15,000 per day. To some degree that was fair, because it's not like my content was going to make grow Youtube's user base, or improve user experience somehow.&lt;/p&gt;

&lt;p&gt;For few days, I uploaded videos manually to Youtube, and then set their Title / Description and Keywords programmatically. But as you can guess it wasn't with the same excitement as before.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-did-the-videos-look-like"&gt;
  &lt;/a&gt;
  What did the videos look like?
&lt;/h2&gt;

&lt;p&gt;You can find all Channels with this &lt;a href="https://www.youtube.com/results?search_query=soknow&amp;amp;sp=EgIQAg%253D%253D"&gt;youtube search query&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here's a sample video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kNJ-n-V7iH0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-happened-to-the-content"&gt;
  &lt;/a&gt;
  What Happened to the Content?
&lt;/h2&gt;

&lt;p&gt;Well after I left the project, I came back to check on the videos after two years. The metrics are fascinating to look at, so I share those metrics below.&lt;/p&gt;

&lt;p&gt;Note: I did nothing to grow these channels. All videos in these channels were the output of a simple Python code, except of course, I had to upload most of the videos manually, and then update the metadata through code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metrics-from-two-years"&gt;
  &lt;/a&gt;
  Metrics from Two Years
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/results?search_query=soknow&amp;amp;sp=EgIQAg%253D%253D"&gt;List of Channels&lt;/a&gt;&lt;br&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Channel&lt;/th&gt;
&lt;th&gt;Views&lt;/th&gt;
&lt;th&gt;Watch Time&lt;/th&gt;
&lt;th&gt;Subscribers&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow French&lt;/td&gt;
&lt;td&gt;5.4K&lt;/td&gt;
&lt;td&gt;90 Hours&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow Hindi&lt;/td&gt;
&lt;td&gt;21K&lt;/td&gt;
&lt;td&gt;345 Hours&lt;/td&gt;
&lt;td&gt;173&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow English&lt;/td&gt;
&lt;td&gt;26K&lt;/td&gt;
&lt;td&gt;112 Hours&lt;/td&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow Korean&lt;/td&gt;
&lt;td&gt;4.2K&lt;/td&gt;
&lt;td&gt;23 Hours&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow Japanese&lt;/td&gt;
&lt;td&gt;35.3K&lt;/td&gt;
&lt;td&gt;155 Hours&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow Russian&lt;/td&gt;
&lt;td&gt;6.6K&lt;/td&gt;
&lt;td&gt;82 Hours&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow German&lt;/td&gt;
&lt;td&gt;3.5K&lt;/td&gt;
&lt;td&gt;18.3 Hours&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow Finnish&lt;/td&gt;
&lt;td&gt;7.4K&lt;/td&gt;
&lt;td&gt;7.6 Hours&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoKnow Arabic&lt;/td&gt;
&lt;td&gt;683&lt;/td&gt;
&lt;td&gt;2.8 Hours&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total&lt;/td&gt;
&lt;td&gt;110,000&lt;/td&gt;
&lt;td&gt;836 Hours&lt;/td&gt;
&lt;td&gt;322&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Two years, and even all channels combined don't reach the "minimum" criteria for monetization (4,000 watch time and 1000 subs). But it's very likely that it would have, if the content was uploaded for 365 days (instead of 2) along with consistent improvements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#this-is-not-adding-value"&gt;
  &lt;/a&gt;
  This is not adding value!
&lt;/h2&gt;

&lt;p&gt;While I agree that the videos uploaded might not have added as much value to the world, but I'm pretty sure that some users did find them useful. We can confirm this with the number of Likes on the videos, and watch time.&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4zRonEMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/YWAiayVul0JLq/giphy.webp"&gt;&lt;br&gt;
&lt;em&gt;It's all about perspective.&lt;/em&gt;&lt;br&gt;
&lt;/center&gt;

&lt;p&gt;Most people learn things through videos, and a lot of information that's in English is not readily available in other languages, for example look at the SoKnow Japanese Channel. Not only would the search engines fail at bringing information to those users through search -- discovering and translating the content is another major hurdle for users in different languages.&lt;/p&gt;

&lt;p&gt;"Quality" content is subjective, and I can easily argue that majority of content online today is not only useless, but harmful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-learnings-from-this-experiment"&gt;
  &lt;/a&gt;
  Some Learnings from this Experiment
&lt;/h2&gt;

&lt;p&gt;There were lot of fundamental learnings from this little experiment. Some of them are "of course", when you think of them deeply, probably not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-break-down-of-grand-vision-into-mini-ideas"&gt;
  &lt;/a&gt;
  1. Break down of Grand Vision into mini ideas
&lt;/h3&gt;

&lt;p&gt;I'm happy I didn't go down the path of first learning how to build music with AI. It would've taken me fairly long time.&lt;/p&gt;

&lt;p&gt;It's very likely that the fact that Youtube Quota is a thing, and it's so limiting for uploading videos would've skipped me for months, and I would have regretted spending time making sub-par music files built with AI.&lt;/p&gt;

&lt;p&gt;Thanks to using Wikipedia text, I was able to identify this issue relatively early on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#limitations-of-dependencies"&gt;
  &lt;/a&gt;
  Limitations of Dependencies
&lt;/h3&gt;

&lt;p&gt;If you've ever played Slither.io, or at least heard of it, note that the creator built it mostly alone, and declined to use Cloud services to host the game. He ran all of it from his own house on bare metal.&lt;/p&gt;

&lt;p&gt;Most great engineers don't like dependencies, and there's a valid reason for that. The more dependencies you have, the more areas of surprise elements there will always be.&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bYR1Dh6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.giphy.com/media/1wRulyhp5INhA8uDFv/giphy.webp"&gt;&lt;br&gt;
&lt;em&gt;Yes, it's worth it.&lt;/em&gt;&lt;br&gt;
&lt;/center&gt;

&lt;p&gt;Before starting a project, always note the limitations of the services you're planning on using.&lt;/p&gt;

&lt;p&gt;Note: Smarter thing would be to first write a Design doc about what the project is, what are the dependencies etc., but their efficacy for personal projects is questionable.&lt;/p&gt;

&lt;p&gt;What I definitely recommend is to create a sort of check list or breakdown for myself, to make sure all grounds are covered, but in this case, "quota limitation" was left out, thanks to my mind subconciously convincing me about "50 UI uploads"&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beware-of-derivative-products"&gt;
  &lt;/a&gt;
  Beware of Derivative Products
&lt;/h3&gt;

&lt;p&gt;Maybe Youtube had the API quota set to 50 uploads a day, but they could still change it anytime.&lt;/p&gt;

&lt;p&gt;Youtube is an independent product, continuously being improved, experimented and built upon.&lt;/p&gt;

&lt;p&gt;If you're building a product that's a derivative of another product, it will always have the big risk of failing at anytime if the product you're relying on falters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#was-it-interesting"&gt;
  &lt;/a&gt;
  Was it interesting?
&lt;/h2&gt;

&lt;p&gt;I hope you found this experiment interesting and it brings out some thoughts and ideas in your mind.&lt;/p&gt;

&lt;p&gt;I'd love to hear your thoughts. Leave a comment below!&lt;/p&gt;




&lt;p&gt;I originally published this blog at: &lt;a href="https://sudcha.com/i-made-youtube-videos-using-python/"&gt; &lt;/a&gt;&lt;a href="https://sudcha.com/i-made-youtube-videos-using-python/"&gt;https://sudcha.com/i-made-youtube-videos-using-python/&lt;/a&gt; but sharing here for the love of the community!&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>googlecloud</category>
      <category>startup</category>
    </item>
  </channel>
</rss>
