<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Typeclasses in Python</title>
      <author>Nikita Sobolev</author>
      <pubDate>Thu, 08 Jul 2021 14:17:23 +0000</pubDate>
      <link>https://dev.to/wemake-services/typeclasses-in-python-3ma6</link>
      <guid>https://dev.to/wemake-services/typeclasses-in-python-3ma6</guid>
      <description>&lt;p&gt;&lt;strong&gt;Originally published in my blog&lt;/strong&gt;: &lt;a href="https://sobolevn.me/2021/06/typeclasses-in-python"&gt;https://sobolevn.me/2021/06/typeclasses-in-python&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I am going to introduce a new concept for Python developers: typeclasses.&lt;br&gt;
It is a concept behind our new &lt;code&gt;dry-python&lt;/code&gt; library called &lt;a href="https://github.com/dry-python/classes/"&gt;&lt;code&gt;classes&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I will tell you in advance, that it will look very familiar to what you already know and possibly even use. Moreover, we reuse a lot of existing code from Python's standard library. So, you can call this approach "native" and "pythonic". And it is still going to be interesting: I am showing examples in 4 different languages!&lt;/p&gt;

&lt;p&gt;But, before discussing typeclasses themselves, let's discuss what problem they do solve.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#some-functions-must-behave-differently"&gt;
  &lt;/a&gt;
  Some functions must behave differently
&lt;/h2&gt;

&lt;p&gt;Ok, this one is a familiar problem to all of the devs out there.&lt;br&gt;
How can we write a function that will behave differently for different types?&lt;/p&gt;

&lt;p&gt;Let's create an example. We want to &lt;code&gt;greet&lt;/code&gt; different types differently (yes, "hello world" examples, here we go).&lt;br&gt;
We want to &lt;code&gt;greet&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;str&lt;/code&gt; instances as &lt;code&gt;Hello, {string_content}!&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;MyUser&lt;/code&gt; instances as &lt;code&gt;Hello again, {username}&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note, that &lt;code&gt;greet&lt;/code&gt; as a simple example does not really make much "business" sense, but more complicated things like &lt;code&gt;to_json&lt;/code&gt;, &lt;code&gt;from_json&lt;/code&gt;, &lt;code&gt;to_sql&lt;/code&gt;, &lt;code&gt;from_sql&lt;/code&gt;, and &lt;code&gt;to_binary&lt;/code&gt; do make a lot of sense and can be found in almost any project.&lt;br&gt;
But, for the sake of implementation simplicity, I'm going to stick to our &lt;code&gt;greet&lt;/code&gt; example.&lt;/p&gt;

&lt;p&gt;The first approach that comes to our minds is to use &lt;code&gt;isinstance()&lt;/code&gt; checks inside the function itself.&lt;br&gt;
And it can work in some cases! The only requirement is that we &lt;strong&gt;must&lt;/strong&gt; know all the types we will work with in advance.&lt;/p&gt;

&lt;p&gt;Here's how it would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, "{0}"!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello again, {0}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;NotImplementedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'Cannot greet "{0}" type'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main limitation is that we cannot extend this function for other type easily (we can use wrapper function, but I consiser this a redefinition).&lt;/p&gt;

&lt;p&gt;But, in some cases - &lt;code&gt;isinstance&lt;/code&gt; won't be enough, because we need extendability. We need to support other types, which are unknown in advance.&lt;br&gt;
Our users might need to &lt;code&gt;greet&lt;/code&gt; their custom types.&lt;/p&gt;

&lt;p&gt;And that's the part where things begin to get interesting.&lt;/p&gt;

&lt;p&gt;All programming languages address this problem differently.&lt;br&gt;
Let's start with Python's traditional OOP approach.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#oop-extendability-and-overabstraction-problems"&gt;
  &lt;/a&gt;
  OOP extendability and over-abstraction problems
&lt;/h2&gt;

&lt;p&gt;So, how does Python solve this problem?&lt;/p&gt;

&lt;p&gt;We all know that Python has magic methods for some builtin functions like &lt;code&gt;len()&lt;/code&gt; and &lt;code&gt;__len__&lt;/code&gt;, it solves exactly the same problem.&lt;/p&gt;

&lt;p&gt;Let's say we want to greet a user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello again, {0}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use this method directly or you can create a helper with &lt;a href="https://www.python.org/dev/peps/pep-0544/"&gt;&lt;code&gt;typing.Protocol&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing_extensions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Protocol&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CanGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Protocol&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="s"&gt;"""
        It will match any object that has the ``greet`` method.

        Mypy will also check that ``greet`` must return ``str``.
        """&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CanGreet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we can use it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'example'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello again, example
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, it works? &lt;em&gt;Not really&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;There are several problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, some classes do not want to know some details about themselves to maintain abstraction integrity.&lt;br&gt;
For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;become_friends&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;friend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Person'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
         &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_friend_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Person'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_pets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Sequence&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Pet'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Does this &lt;code&gt;Person&lt;/code&gt; (pun intended) deserve to know that some &lt;code&gt;to_json&lt;/code&gt; conversion exists that can turn this poor &lt;code&gt;Person&lt;/code&gt; into textual data? What about binary pickling?&lt;br&gt;
Of course not, these details should not be added to a business-level abstraction, this is called a &lt;a href="https://en.wikipedia.org/wiki/Leaky_abstraction"&gt;leaky abstraction&lt;/a&gt; when you do otherwise.&lt;/p&gt;

&lt;p&gt;Moreover, I think that mixing structure and behavior into a single abstraction is bad. Why? Because you cannot tell in advance what behavior you would need from a given structure.&lt;/p&gt;

&lt;p&gt;For abstractions on this level, it is way easier to have behavior near the structure, not inside it. Mixing these two only makes sense when we work on a higher level like &lt;a href="https://en.wikipedia.org/wiki/Service-oriented_architecture"&gt;services&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Open_Telecom_Platform"&gt;processes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Second&lt;/strong&gt;, it only works for custom types. &lt;a href="https://en.wikipedia.org/wiki/Expression_problem"&gt;Existing types are hard to extend&lt;/a&gt;.&lt;br&gt;
For example, how would you add the &lt;code&gt;greet&lt;/code&gt; method to the &lt;code&gt;str&lt;/code&gt; type?&lt;/p&gt;

&lt;p&gt;You can create &lt;code&gt;str&lt;/code&gt; subtype with &lt;code&gt;greet&lt;/code&gt; method in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, {0}!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, this would require a change in our usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyStr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'world'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello, world!
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'world'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# fails with TypeError
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#monkeypatching"&gt;
  &lt;/a&gt;
  Monkey-patching
&lt;/h3&gt;

&lt;p&gt;Some might suggest that we can just insert the needed methods directly into an object / type.&lt;br&gt;
Some dynamically typed languages went on this path: &lt;code&gt;JavaScript&lt;/code&gt; (in 2000s and early 2010s, mostly popularized by &lt;code&gt;jQuery&lt;/code&gt; plugins) and &lt;code&gt;Ruby&lt;/code&gt; (&lt;a href="https://guides.rubyonrails.org/active_support_core_extensions.html"&gt;still happening right now&lt;/a&gt;). Here's how it looks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`Hello, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is quite obvious, that it is not going to work for anything complex. &lt;a href="https://en.wikipedia.org/wiki/Monkey_patch#Pitfalls"&gt;Why&lt;/a&gt;?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Different parts of your program might use monkey-patching of methods with the same name, but with different functionality. And nothing will work&lt;/li&gt;
&lt;li&gt;It is hard to read because the original source does not contain the patched method and the patching location might be hidden deeply in other files&lt;/li&gt;
&lt;li&gt;It is hard to type, for example, &lt;code&gt;mypy&lt;/code&gt; does not support it at all&lt;/li&gt;
&lt;li&gt;Python community is not used to this style, it would be rather hard to persuade them to write their code like this (and that's a good thing!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope that it is clear: we won't fall into this trap. Let's consider another alternative.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extra-abstractions"&gt;
  &lt;/a&gt;
  Extra abstractions
&lt;/h3&gt;

&lt;p&gt;People familiar with things like &lt;code&gt;django-rest-framework&lt;/code&gt; might recommend to add &lt;a href="https://www.django-rest-framework.org/api-guide/serializers/"&gt;special abstractions&lt;/a&gt; to &lt;code&gt;greet&lt;/code&gt; different types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;abc&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Generic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;

&lt;span class="n"&gt;_Wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'_Wrapped'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Generic&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_Wrapped&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="s"&gt;"""Abstract class of all other """&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_Wrapped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;

    &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;abc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abstractmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;NotImplementedError&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StrGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseGreet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="s"&gt;"""Wrapped instance of built-in type ``str``."""&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, {0}!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wrapped&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Our custom type:
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyUserGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseGreet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello again, {0}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_wrapped&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we can use it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyStrGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'world'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello, world!
&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyUserGreet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'example'&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello again, example
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, now we have a different problem: we have a gap between real types and their wrappers. There's no easy way to wrap a type into its wrapper. How can we match them? We have to do it either by hand or use some kind of registry like &lt;code&gt;Dict[type, Type[BaseGreet]]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And it is still not enough, there will be runtime errors! In practice, it ends up like &lt;code&gt;&amp;lt;X&amp;gt; is not json-serializable&lt;/code&gt; as many of us might have seen it with &lt;code&gt;drf&lt;/code&gt;'s serializers when trying to serialize a custom unregistered type.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typeclasses-and-similar-concepts"&gt;
  &lt;/a&gt;
  Typeclasses and similar concepts
&lt;/h2&gt;

&lt;p&gt;Let's look at how functional languages (and &lt;code&gt;Rust&lt;/code&gt;, people still &lt;a href="https://www.fpcomplete.com/blog/2018/10/is-rust-functional/"&gt;argue&lt;/a&gt; whether it is functional or not) handle this problem.&lt;/p&gt;

&lt;p&gt;Some common knowledge:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All these languages don't have &lt;code&gt;class&lt;/code&gt; concept as we know it in Python and, of course, there's no subclassing&lt;/li&gt;
&lt;li&gt;All the languages below don't have &lt;code&gt;object&lt;/code&gt;s as we do in Python, they don't mix behavior and structure (however, &lt;code&gt;Elixir&lt;/code&gt; has Alan Kay's &lt;a href="https://www.quora.com/What-does-Alan-Kay-think-about-Joe-Armstrong-claiming-that-Erlang-might-be-the-only-object-oriented-language-and-also-his-thesis-supervisor-s-claim-that-Erlang-is-extremely-object-oriented"&gt;real objects&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Instead, these languages use &lt;a href="https://en.wikipedia.org/wiki/Ad_hoc_polymorphism"&gt;ad-hoc polymorphism&lt;/a&gt; to make functions behave differently for different types via overloading&lt;/li&gt;
&lt;li&gt;And, of course, you don't have to know any of the languages below to understand what is going on&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#elixir"&gt;
  &lt;/a&gt;
  Elixir
&lt;/h3&gt;

&lt;p&gt;Let's start with one of my favorites.&lt;br&gt;
&lt;code&gt;Elixir&lt;/code&gt; has &lt;a href="https://elixir-lang.org/getting-started/protocols.html"&gt;&lt;code&gt;Protocol&lt;/code&gt;s&lt;/a&gt; to achieve what we want:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="nv"&gt;@doc&lt;/span&gt; &lt;span class="s2"&gt;"Our custom protocol"&lt;/span&gt;
&lt;span class="k"&gt;defprotocol&lt;/span&gt; &lt;span class="no"&gt;Greet&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# This is an abstract function,&lt;/span&gt;
  &lt;span class="c1"&gt;# that will behave differently for each type.&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nv"&gt;@doc&lt;/span&gt; &lt;span class="s2"&gt;"Enhancing built-in type"&lt;/span&gt;
&lt;span class="k"&gt;defimpl&lt;/span&gt; &lt;span class="no"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;for:&lt;/span&gt; &lt;span class="no"&gt;BitString&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Hello, &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nv"&gt;@doc&lt;/span&gt; &lt;span class="s2"&gt;"Custom data type"&lt;/span&gt;
&lt;span class="k"&gt;defmodule&lt;/span&gt; &lt;span class="no"&gt;MyUser&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;defstruct&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nv"&gt;@doc&lt;/span&gt; &lt;span class="s2"&gt;"Enhancing our own type"&lt;/span&gt;
&lt;span class="k"&gt;defimpl&lt;/span&gt; &lt;span class="no"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;for:&lt;/span&gt; &lt;span class="no"&gt;MyUser&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"Hello again, &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am pretty sure that my readers were able to read and understand &lt;code&gt;Elixir&lt;/code&gt; even if they are not familiar with this language. That's what I call beauty!&lt;/p&gt;

&lt;p&gt;Usage of the code above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight elixir"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Using our `Greet.greet` function with both our data types:&lt;/span&gt;
&lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Greet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"world"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello, world!&lt;/span&gt;
&lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Greet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(%&lt;/span&gt;&lt;span class="no"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;name:&lt;/span&gt; &lt;span class="s2"&gt;"example"&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello again, example&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The thing with &lt;code&gt;Elixir&lt;/code&gt;'s &lt;code&gt;Protocol&lt;/code&gt;s is that it is &lt;a href="https://github.com/elixir-lang/elixir/issues/7541"&gt;not currently possible&lt;/a&gt; to express that some type does support our &lt;code&gt;Greet.greet&lt;/code&gt; for &lt;code&gt;Elixir&lt;/code&gt;'s &lt;a href="https://github.com/jeremyjh/dialyxir"&gt;type checker&lt;/a&gt;.&lt;br&gt;
But, this is not a big deal for &lt;code&gt;Elixir&lt;/code&gt;, which is 100% dynamically typed.&lt;/p&gt;

&lt;p&gt;Protocols are very widely used, they power lots of the language's features.&lt;br&gt;
Here are some real-life examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://hexdocs.pm/elixir/1.11.0/Enumerable.html"&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; allows to work with collections: counting elements, finding members, reducing, and slicing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hexdocs.pm/elixir/1.11.0/String.Chars.html"&gt;&lt;code&gt;String.Chars&lt;/code&gt;&lt;/a&gt; is something like &lt;code&gt;__str__&lt;/code&gt; in Python, it converts structures to human-readable format&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#rust"&gt;
  &lt;/a&gt;
  Rust
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Rust&lt;/code&gt; has &lt;a href="https://doc.rust-lang.org/book/ch10-02-traits.html"&gt;&lt;code&gt;Trait&lt;/code&gt;s&lt;/a&gt;. The concept is pretty similar to &lt;code&gt;Protocol&lt;/code&gt;s in &lt;code&gt;Elixir&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// Our custom trait&lt;/span&gt;
&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="n"&gt;Greet&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Enhancing built-in type&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Greet&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, {}!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Defining our own type&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;MyUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Enhancing it&lt;/span&gt;
&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Greet&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;MyUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nd"&gt;format!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello again, {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And of course, due to &lt;code&gt;Rust&lt;/code&gt;'s static typing, we can express that some function's argument supports the trait we have just defined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="c"&gt;// We can express that `greet` function only accepts types&lt;/span&gt;
&lt;span class="c"&gt;// that implement `Greet` trait:&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="nf"&gt;.greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Using our `greet` function with both our data types:&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="s"&gt;"world"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="c"&gt;// Hello, world!&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;MyUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"example"&lt;/span&gt;&lt;span class="nf"&gt;.to_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
    &lt;span class="c"&gt;// Hello again, example&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See? The idea is so similar, that it uses almost the same syntax as &lt;code&gt;Elixir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notable real-life examples of how &lt;code&gt;Rust&lt;/code&gt; uses its &lt;code&gt;Trait&lt;/code&gt;s:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://doc.rust-lang.org/std/marker/trait.Copy.html"&gt;&lt;code&gt;Copy&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://doc.rust-lang.org/std/clone/trait.Clone.html"&gt;&lt;code&gt;Clone&lt;/code&gt;&lt;/a&gt; - duplicating objects&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://doc.rust-lang.org/std/fmt/trait.Debug.html"&gt;&lt;code&gt;Debug&lt;/code&gt;&lt;/a&gt; to show better &lt;code&gt;repr&lt;/code&gt; of an object, again like &lt;code&gt;__str__&lt;/code&gt; in Python&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically, &lt;code&gt;Trait&lt;/code&gt;s are the core of this language, it is widely used in cases when you need to define any shared behavior.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#haskell"&gt;
  &lt;/a&gt;
  Haskell
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Haskell&lt;/code&gt; has &lt;a href="http://learnyouahaskell.com/making-our-own-types-and-typeclasses"&gt;typeclasses&lt;/a&gt; to do almost the same thing.&lt;/p&gt;

&lt;p&gt;So, what's a typeclass?&lt;br&gt;
Typeclass is a group of types, all of which satisfy some common contract.&lt;br&gt;
It is also a form of ad-hoc polymorphism that is mostly used for overloading.&lt;/p&gt;

&lt;p&gt;I am a bit sorry for the &lt;code&gt;Haskell&lt;/code&gt; syntax below, it might be not very pleasant and clear to read, especially for people who are not familiar with this brilliant language, but we have what we have:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="cp"&gt;{-# LANGUAGE FlexibleInstances #-}&lt;/span&gt;

&lt;span class="c1"&gt;-- Our custom typeclass&lt;/span&gt;
&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;Greet&lt;/span&gt; &lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;greet&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;

&lt;span class="c1"&gt;-- Enhancing built-in type with it&lt;/span&gt;
&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;Greet&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;greet&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello, "&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s"&gt;"!"&lt;/span&gt;

&lt;span class="c1"&gt;-- Defining our own type&lt;/span&gt;
&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;MyUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;MyUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;-- Enhancing it&lt;/span&gt;
&lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="kt"&gt;Greet&lt;/span&gt; &lt;span class="kt"&gt;MyUser&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;
  &lt;span class="n"&gt;greet&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello again, "&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, we do the same thing as we have already done for &lt;code&gt;Rust&lt;/code&gt; and &lt;code&gt;Elixir&lt;/code&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We define a &lt;code&gt;Greet&lt;/code&gt; typeclass that has a single function to implement: &lt;code&gt;greet&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Then we define instance implementation for &lt;code&gt;String&lt;/code&gt; type, which is a built-in (alias for &lt;code&gt;[Char]&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Then we define custom &lt;code&gt;MyUser&lt;/code&gt; type with &lt;code&gt;name&lt;/code&gt; field of &lt;code&gt;String&lt;/code&gt; type&lt;/li&gt;
&lt;li&gt;Implementing the &lt;code&gt;Greet&lt;/code&gt; typeclass for &lt;code&gt;MyUser&lt;/code&gt; is the last thing we do&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then we can use our new &lt;code&gt;greet&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Here you can see that we can use `Greet` typeclass to annotate our types.&lt;/span&gt;
&lt;span class="c1"&gt;-- I have made this alias entirely for this annotation demo,&lt;/span&gt;
&lt;span class="c1"&gt;-- in real life we would just use `greet` directly:&lt;/span&gt;
&lt;span class="n"&gt;greetAlias&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Greet&lt;/span&gt; &lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kr"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="n"&gt;greetAlias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;

&lt;span class="n"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;greetAlias&lt;/span&gt; &lt;span class="s"&gt;"world"&lt;/span&gt;
  &lt;span class="c1"&gt;-- Hello, world!&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;greetAlias&lt;/span&gt; &lt;span class="kt"&gt;MyUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"example"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;-- Hello again, example&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some real-life examples of typeclasses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Text-Show.html#t:Show"&gt;&lt;code&gt;Show&lt;/code&gt;&lt;/a&gt; to convert things into user-readable representations&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://wiki.haskell.org/Functor"&gt;&lt;code&gt;Functor&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/Control-Applicative.html#t:Applicative"&gt;&lt;code&gt;Applicate&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://wiki.haskell.org/Monad"&gt;&lt;code&gt;Monad&lt;/code&gt;&lt;/a&gt; are all typeclasses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would say that among our three examples, &lt;code&gt;Haskell&lt;/code&gt; relies on its typeclasses the heaviest.&lt;/p&gt;

&lt;p&gt;It is important to note that typeclasses from &lt;code&gt;Haskell&lt;/code&gt; and traits from &lt;code&gt;Rust&lt;/code&gt; &lt;a href="https://stackoverflow.com/questions/28123453/what-is-the-difference-between-traits-in-rust-and-typeclasses-in-haskell"&gt;are a bit different&lt;/a&gt;, but we won't go into these details to keep this article rather short.&lt;/p&gt;

&lt;p&gt;But, what about Python?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#drypythonclasses"&gt;
  &lt;/a&gt;
  dry-python/classes
&lt;/h2&gt;

&lt;p&gt;There's an awesome function in the Python standard library called &lt;a href="https://docs.python.org/3/library/functools.html#functools.singledispatch"&gt;&lt;code&gt;singledispatch&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It does exactly what we need. Do you still remember that we are finding a way to change the function's behavior based on the input type?&lt;/p&gt;

&lt;p&gt;Let's have a look!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;singledispatch&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;singledispatch&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Default case."""&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;NotImplementedError&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, {0}!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Custom type
&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_myuser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello again, {0}'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks cool, moreover, it is in standard lib, you even don't have to install anything!&lt;/p&gt;

&lt;p&gt;And we can use it like a normal function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'world'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello, world!
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'example'&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="c1"&gt;# Hello again, example
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, what's the point in writing a completely different library like we did with &lt;code&gt;dry-python/classes&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;We even reuse some parts of &lt;code&gt;singledispatch&lt;/code&gt; implementation,&lt;br&gt;
but there are several key differences.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#better-typing"&gt;
  &lt;/a&gt;
  Better typing
&lt;/h3&gt;

&lt;p&gt;With &lt;code&gt;singledispatch&lt;/code&gt; you cannot be sure that everything will work, because it is not supported by &lt;code&gt;mypy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, you can pass unsupported types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# mypy is ok with that :(
# runtime will raise `NotImplementedError`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;dry-python/classes&lt;/code&gt; we have fixed that.&lt;br&gt;
You can only pass types that are supported:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;classes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;typeclass&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;typeclass&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Iterable!'&lt;/span&gt;

&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Argument 1 to "greet" has incompatible type "int"; expected "str"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can break the &lt;code&gt;@singledispatch&lt;/code&gt; signature contract:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# still no mypy error
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, not with &lt;code&gt;dry-python/classes&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# Instance callback is incompatible
# "def (instance: builtins.dict[Any, Any], key: builtins.str) -&amp;gt; builtins.int";
# expected
# "def (instance: builtins.dict[Any, Any]) -&amp;gt; builtins.str"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;@singledispatch&lt;/code&gt; also does not allow defining generic functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;singledispatch&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""Default case."""&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="nb"&gt;NotImplementedError&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_copy_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;
&lt;span class="c1"&gt;# Argument 1 to "register" of "_SingleDispatchCallable"
# has incompatible type "Callable[[int], int]";
# expected "Callable[..., X]"
&lt;/span&gt;
&lt;span class="n"&gt;reveal_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# Revealed type is "X`-1"
# Should be: `int`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which is, again, possible with &lt;code&gt;dry-python/classes&lt;/code&gt;, we fully support &lt;a href="https://classes.readthedocs.io/en/latest/pages/generics.html"&gt;generic functions&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;classes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;typeclass&lt;/span&gt;

&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeVar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'X'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;typeclass&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_copy_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;  &lt;span class="c1"&gt;# ok
&lt;/span&gt;
&lt;span class="n"&gt;reveal_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# int
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you cannot &lt;a href="https://classes.readthedocs.io/en/latest/pages/concept.html#type-restrictions"&gt;restrict&lt;/a&gt; &lt;code&gt;@singledispatch&lt;/code&gt; to work with only subtypes of specific types, even if you want to.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#protocols-are-unsupported"&gt;
  &lt;/a&gt;
  Protocols are unsupported
&lt;/h3&gt;

&lt;p&gt;Protocols are an important part of Python. Sadly, they are not supported by &lt;code&gt;@singledispatch&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_iterable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Iterable!'&lt;/span&gt;
&lt;span class="c1"&gt;# TypeError: Invalid annotation for 'instance'.
# typing.Iterable is not a class
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://classes.readthedocs.io/en/latest/pages/concept.html#protocols"&gt;Protocols&lt;/a&gt; support is also solved with &lt;code&gt;dry-python/classes&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;classes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;typeclass&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;typeclass&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_protocol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Iterable!'&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="c1"&gt;# Iterable!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#no-way-to-annotate-types"&gt;
  &lt;/a&gt;
  No way to annotate types
&lt;/h3&gt;

&lt;p&gt;Let's say you want to write a function and annotate one of its arguments that it must support the &lt;code&gt;greet&lt;/code&gt; function. Something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet_and_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'???'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is impossible with &lt;code&gt;@singledispatch&lt;/code&gt;.&lt;br&gt;
But, you can do it with &lt;code&gt;dry-python/classes&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;classes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;AssociatedType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Supports&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;typeclass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AssociatedType&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;"""Special type to represent that some instance can `greet`."""&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;typeclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;"""No implementation needed."""&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_greet_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, {0}!'&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet_and_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Supports&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Greet&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;greet_and_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'world'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# ok
&lt;/span&gt;&lt;span class="n"&gt;greet_and_print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# type error with mypy, exception in runtime
# Argument 1 to "greet_and_print" has incompatible type "int";
# expected "Supports[Greet]"
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We have come a long way, from basic stacked &lt;code&gt;isinstance()&lt;/code&gt; conditions - through OOP - to typeclasses.&lt;/p&gt;

&lt;p&gt;I have shown, that this native and pythonic idea deserves wider recognition and usage. And our extra features in &lt;code&gt;dry-python/classes&lt;/code&gt; can save you from lots of mistakes and help to write more expressive and safe business logic.&lt;/p&gt;

&lt;p&gt;As a result of using typeclasses, you will untangle your structures from behavior, which will allow you to get rid of useless and complex abstractions and write dead-simple typesafe code. You will have your behavior near the structures, not inside them. This will also solve the extendability problem of OOP.&lt;/p&gt;

&lt;p&gt;Combine it with other &lt;code&gt;dry-python&lt;/code&gt; libraries for extra effect!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-work"&gt;
  &lt;/a&gt;
  Future work
&lt;/h2&gt;

&lt;p&gt;What do we plan for the future?&lt;/p&gt;

&lt;p&gt;There are several key aspects to improve:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Our &lt;code&gt;Supports&lt;/code&gt; should take any amount of type arguments: &lt;code&gt;Supports[A, B, C]&lt;/code&gt;. This type will represent a type that supports all three typeclasses &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt; &lt;a href="https://github.com/dry-python/classes/issues/206"&gt;at the same time&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;We don't &lt;a href="https://github.com/dry-python/classes/issues/24"&gt;support concrete generics&lt;/a&gt; just yet. So, for example, it is impossible to define different cases for &lt;code&gt;List[int]&lt;/code&gt; and &lt;code&gt;List[str]&lt;/code&gt;. This might require adding runtime typecheker to &lt;code&gt;dry-python/classes&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;I am planning &lt;a href="https://sobolevn.me/2021/02/make-tests-a-part-of-your-app"&gt;to make tests a part of this app&lt;/a&gt; as well! We will ship a &lt;a href="https://github.com/dry-python/classes/issues/234"&gt;hypothesis plugin&lt;/a&gt; to test users' typeclasses in a single line of code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;

&lt;p&gt;If you like this article you can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Donate to future &lt;code&gt;dry-python&lt;/code&gt; development on &lt;a href="https://github.com/sponsors/dry-python"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dry-python/classes/stargazers"&gt;Star our &lt;code&gt;classes&lt;/code&gt; repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sobolevn.me/subscribe/"&gt;Subscribe&lt;/a&gt; to my blog for more content!&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>python</category>
      <category>rust</category>
      <category>elixir</category>
      <category>haskell</category>
    </item>
    <item>
      <title>Empty List placeholder. SwiftUI</title>
      <author>Anton Paliakou</author>
      <pubDate>Thu, 08 Jul 2021 14:15:32 +0000</pubDate>
      <link>https://dev.to/toni777772/empty-list-placeholder-swiftui-4b7e</link>
      <guid>https://dev.to/toni777772/empty-list-placeholder-swiftui-4b7e</guid>
      <description>&lt;p&gt;Year twenty twenty-one. Almost a month has passed since the WWDC. As usual Apple presented many amazing features/updates 😍. As expected updated SwiftUI framework. But did not add placeholder for &lt;a href="https://developer.apple.com/documentation/swiftui/list"&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; view 😭. It's not big deal, but it was one of my expectations from conference. Okay let's do it ourselves 💪&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://developer.apple.com/documentation/swiftui/list"&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; is one of the most used view in apps.&lt;br&gt;
When using the &lt;a href="https://developer.apple.com/documentation/swiftui/list"&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt;, devs also must handle the state of an empty data range and show a placeholder. &lt;/p&gt;

&lt;p&gt;As an example, consider a simple list of countries. Show placeholder when data is empty.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4bd3NvI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3s18nmf1lbowhm38q9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4bd3NvI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3s18nmf1lbowhm38q9z.png" alt="Countries"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q281u_f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r21n4v592v6rb7yl7gza.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q281u_f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r21n4v592v6rb7yl7gza.png" alt="Placeholder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Country model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Identifiable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, have any ideas on how to implement a placeholder? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-idea-raw-if-else-endraw-"&gt;
  &lt;/a&gt;
  First idea &lt;code&gt;If else&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The first thing that comes to mind it's &lt;a href="https://docs.swift.org/swift-book/ReferenceManual/Statements.html"&gt;&lt;code&gt;if else&lt;/code&gt;&lt;/a&gt; conditional statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;@State&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// Data source&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No Countries"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Placeholder&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;largeTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="c1"&gt;// List countires&lt;/span&gt;
                &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Advantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the most simple and clear way&lt;/li&gt;
&lt;li&gt;easy to modify &lt;/li&gt;
&lt;li&gt;it works and shows the placeholder when needed&lt;/li&gt;
&lt;li&gt;easy to use any view for placeholder &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the code looks cumbersome&lt;/li&gt;
&lt;li&gt;not reusable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It works and sometimes it's enough. But in production, it would be nice to have a component that implements the logic of displaying a placeholder inside the component. So, goes to the next idea. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#second-idea-raw-emptylist-endraw-"&gt;
  &lt;/a&gt;
  Second idea &lt;code&gt;EmptyList&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Improve &lt;code&gt;if else&lt;/code&gt; idea and move logic show/hide placeholder to custom view, call it &lt;code&gt;EmptyList&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;EmptyList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;RandomAccessCollection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;ListRowView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;PlaceholderView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="kt"&gt;Items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Identifiable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Items&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;listRowView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;ListRowView&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;placeholderView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;PlaceholderView&lt;/span&gt;

    &lt;span class="c1"&gt;/// - Parameters:&lt;/span&gt;
    &lt;span class="c1"&gt;///   - items: Source data for List. Item must implement Identifiable protocol&lt;/span&gt;
    &lt;span class="c1"&gt;///   - listRowView: View displayed for each source Item&lt;/span&gt;
    &lt;span class="c1"&gt;///   - placeholderView: Placeholder. View displayed when the items collection isEmpty&lt;/span&gt;
    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="kd"&gt;@ViewBuilder&lt;/span&gt; &lt;span class="nv"&gt;listRowView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;ListRowView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="kd"&gt;@ViewBuilder&lt;/span&gt; &lt;span class="nv"&gt;placeholderView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;PlaceholderView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listRowView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listRowView&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholderView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;placeholderView&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// List countires&lt;/span&gt;
                &lt;span class="kt"&gt;ForEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
                    &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;listRowView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;placeholderView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the &lt;code&gt;EmptyList&lt;/code&gt; is very easy. First parameter - data source, second parameter -  list row view, and finally third parameter - placeholder view.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;@State&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// Data source&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;EmptyList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Data items &lt;/span&gt;
        &lt;span class="nv"&gt;listRowView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="c1"&gt;// List row view&lt;/span&gt;
            &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;placeholderView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No Countries"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Placeholder&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;largeTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Advantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code looks clean and clear 😍&lt;/li&gt;
&lt;li&gt;easy to modify custom view&lt;/li&gt;
&lt;li&gt;reusable in project&lt;/li&gt;
&lt;li&gt;use any view for placeholder &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;list is embedded in &lt;code&gt;EmptyList&lt;/code&gt; view, and if want to add some ViewModifier-s to the list, need for more efforts and modify code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Usually, I would have to say that this is all and say goodbye but is not all 😎. I want to share an idea of how I cook placeholder for lists in my projects. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preferred-idea-raw-viewmodifier-endraw-"&gt;
  &lt;/a&gt;
  Preferred idea &lt;code&gt;ViewModifier&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;Create custom &lt;a href="https://developer.apple.com/documentation/swiftui/viewmodifier"&gt;&lt;code&gt;ViewModifier&lt;/code&gt;&lt;/a&gt; to manage placeholder, call it &lt;code&gt;EmptyDataModifier&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;EmptyDataModifier&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;Placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ViewModifier&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Placeholder&lt;/span&gt;

    &lt;span class="kd"&gt;@ViewBuilder&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;body&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isEmpty&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;placeholder&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uses  &lt;code&gt;EmptyDataModifier&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;@State&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// Data source&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;modifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;EmptyDataModifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No Countries"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// Placeholder&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Also via extension can little bit improve the solution and limited apply &lt;code&gt;EmptyDataModifier&lt;/code&gt; only for &lt;code&gt;List&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;extension&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;emptyListPlaceholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;AnyView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;modifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;EmptyDataModifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;@State&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Country&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="c1"&gt;// Data source&lt;/span&gt;

    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;country&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="kt"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;country&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;emptyListPlaceholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;countries&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="kt"&gt;AnyView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ListPlaceholderView&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// Placeholder &lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Advantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code look clean and clear 😍 😍 😍&lt;/li&gt;
&lt;li&gt;no need to create a custom &lt;code&gt;List&lt;/code&gt; view&lt;/li&gt;
&lt;li&gt;easy to modify&lt;/li&gt;
&lt;li&gt;reusable in project&lt;/li&gt;
&lt;li&gt;use any view for placeholder &lt;/li&gt;
&lt;li&gt;this way for can be used for any view placeholder &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;no  (subjective opinion)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#instead-of-summary"&gt;
  &lt;/a&gt;
  Instead of summary
&lt;/h3&gt;

&lt;p&gt;In my opinion, the most suitable way to implement a placeholder is to use a custom &lt;a href="https://developer.apple.com/documentation/swiftui/viewmodifier"&gt;&lt;code&gt;ViewModifier&lt;/code&gt;&lt;/a&gt;. &lt;br&gt;
I'm sure sooner or later the Apple will add a placeholder for the List view. Maybe this article will be as a request for this feature for Apple. Who knows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Toni77777/ListPlaceholderSample"&gt;Source code&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Thanks for reading! See you soon. &lt;/p&gt;

</description>
      <category>swift</category>
      <category>swiftui</category>
      <category>ios</category>
      <category>placeholder</category>
    </item>
    <item>
      <title>Dealing with anxiety during job interviews</title>
      <author>Zell Liew 🤗</author>
      <pubDate>Thu, 08 Jul 2021 13:43:58 +0000</pubDate>
      <link>https://dev.to/zellwk/dealing-with-anxiety-during-job-interviews-6p6</link>
      <guid>https://dev.to/zellwk/dealing-with-anxiety-during-job-interviews-6p6</guid>
      <description>&lt;p&gt;It's normal to feel anxious when applying for a job. After all, you're trying to present your best self in hopes of getting the job. Today's article will help you learn to control or work with this anxiousness.&lt;/p&gt;

&lt;p&gt;I propose four ways to work through your anxiousness&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be pessimistic about the interview&lt;/li&gt;
&lt;li&gt;Don't care about the results&lt;/li&gt;
&lt;li&gt;Face the anxiousness head-on and work through it&lt;/li&gt;
&lt;li&gt;Bring your real self instead of your best self&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#be-pessimistic-about-the-interview"&gt;
  &lt;/a&gt;
  Be pessimistic about the interview
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;If you apply to a job via the standard channel&lt;/strong&gt; (applying through job ad), &lt;strong&gt;your odds of being selected is very low.&lt;/strong&gt; You have to understand this fact and &lt;strong&gt;treat job search as a numbers game&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Most people don't want to admit that their chances are low and they try to "be their best self" in an interview. Unfortunately, &lt;a href="https://zellwk.com/blog/trying-your-best/"&gt;being your best self is a bad strategy&lt;/a&gt; and it sets you up for failure.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You won't be able to understand why you failed&lt;/li&gt;
&lt;li&gt;You'll take the failure personally&lt;/li&gt;
&lt;li&gt;You'll feel lousy and sucky and you lose motivation to apply for another job&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you acknowledge your chances of being successful is low, you'll adjust your expectations. You won't get hurt as much when you fail (and you will probably fail many times). You will be able to get up and try again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Whatever doesn't kill you makes you stronger&lt;/strong&gt;. Learn the lessons from your previous interview and use it for your next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-care-about-the-results"&gt;
  &lt;/a&gt;
  Don't care about the results
&lt;/h2&gt;

&lt;p&gt;We're anxious because we care about the results. We won't be anxious if we don't care about the results.&lt;/p&gt;

&lt;p&gt;This is important because anxiety lowers our performance. When we care for something too much, we tend to overcompensate. You've heard of people "trying too hard" and coming off as a turn-off. I went through an experience like this too in the past.&lt;/p&gt;

&lt;p&gt;I interviewed for a program during my university years. It was a prestigious program in my university and many people clamoured for it. I clamoured for it too.&lt;/p&gt;

&lt;p&gt;When I went into the interview, I was very nervous. I tried to put up my best performance. I tried to be polite, I tried to offer suggestions, and even tried to lead the discussion amongst my peers.&lt;/p&gt;

&lt;p&gt;I thought I did pretty well, but I heard nothing from the faculty after the interview. I was devastated.&lt;/p&gt;

&lt;p&gt;I applied for the same program again 1 year later. This time, I just came back from an overseas trip and I learned to relax a bit. I figured it would be great if I got accepted into the program, but I wasn't really bothered if I didn't get accepted — life goes on.&lt;/p&gt;

&lt;p&gt;During this interview, I sat down and didn't try to perform. I relaxed. I just spoke my mind about stuff. One of the interviewers (a teacher) even said I was rude during the interview. She said I should stand up when addressing a teacher. I went out of the interview thinking I probably failed it.&lt;/p&gt;

&lt;p&gt;To my surprise, I received a call within a week or two and I was offered a chance to go for the program. 🙄&lt;/p&gt;

&lt;p&gt;What actually happened? What were the criteria that made them call me and gave me a chance? 🤷‍♂️. I don't know.&lt;/p&gt;

&lt;p&gt;I've noticed this same pattern played out over the years — when I'm really concerned about something, it would turn out badly. But if I don't really care, it has the potential to turn out well. 🤷‍♂️.&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;fuck the results&lt;/strong&gt;. Enjoy yourself. Things may turn out better than you wished it to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#face-the-anxiousness-headon-and-work-through-it"&gt;
  &lt;/a&gt;
  Face the anxiousness head-on and work through it
&lt;/h2&gt;

&lt;p&gt;One reason why you're anxious is because you don't have enough interviewing experience. You lack experiential information about how an interview is like.&lt;/p&gt;

&lt;p&gt;You can prepare all you want — answering generic questions, doing code katas, etc — but you won't be able to shake off this anxiousness, especially if you really want this job. (&lt;a href="#don%E2%80%99t-care-about-the-results"&gt;See point 2&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To reduce this anxiety, you have to gain experience&lt;/strong&gt;. This means you'll have to go for many interviews. With each interview you'll know what to expect and what to do. You'll also learn to manage possible failure (assuming you're didn't beat yourself up too hard &lt;a href="https://zellwk.com/blog/trying-your-best"&gt;by trying your best&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take each interview as a practice. With enough practice, you'll know what to do.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can use the same approach if you want to put up a blog, do youtube videos, or livestream. You have to do work through the anxiousness and you'll learn to manage it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bring-your-real-self-instead-of-your-best-self"&gt;
  &lt;/a&gt;
  Bring your real self instead of your best self
&lt;/h2&gt;

&lt;p&gt;When you bring your best self, you're putting on a mask — you're not the real you. You're uncomfortable because you know you're not being yourself.&lt;/p&gt;

&lt;p&gt;Here's second problem — if they hired you when you "tried your best", you have to put on this "best behaviour" for the rest of your life in the company. Since you're not being yourself, you'll get even more stressed.&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;don't fake it till you make it.&lt;/strong&gt; Don't fake anything because faking introduces stress with yourself internally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bring your real self&lt;/strong&gt; to the interview table.&lt;/p&gt;

&lt;p&gt;Who are you?&lt;/p&gt;

&lt;p&gt;Most of us have so many fragmented selves that we're not sure which is real. The answer is everyone of them is real.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The you where you're excited about code&lt;/li&gt;
&lt;li&gt;The you where you're anxious about making mistakes&lt;/li&gt;
&lt;li&gt;The you where you're grumpy because you couldn't solve a problem&lt;/li&gt;
&lt;li&gt;The you where you're being super unhealthy, eating potato chips on the sofa when you're supposed to be on a diet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of them are real.&lt;/p&gt;

&lt;p&gt;You want to &lt;strong&gt;bring the self that makes most sense&lt;/strong&gt; for this interview. (I hope you know which one).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It's a good thing if you get rejected for being real&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The company may be an ill-fit for you — they may look for someone who wants to follow instructions while you want to make an impact (and vice versa).&lt;/p&gt;

&lt;p&gt;Who are you when you're having fun coding, exploring ideas, studying tutorials, debugging errors? Bring that person to the interview and let the rest play out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Imagine you're not in an interview&lt;/strong&gt;. Imagine the person sitting across you is a friend and you're in a safe place. Imagine they are there for you to share your thoughts, excitement, and love about web development. And you're simply sharing everything you found exciting with them.&lt;/p&gt;

&lt;p&gt;Note: &lt;br&gt;
I know it's not safe since you're being evaluated, but imagine it anyway. Your worst case scenario is you don't get accepted (and there's a high chance anyway). What's there to lose if you gave this a try?&lt;/p&gt;

&lt;p&gt;Then don't care about the results of the interview.&lt;/p&gt;

&lt;p&gt;Have fun.&lt;/p&gt;

&lt;p&gt;Life is too short for unnecessary worries.&lt;/p&gt;

&lt;p&gt;Embrace this mindset and try it out for a couple of weeks. Maybe the results will change the way you handle such situations going forward.&lt;/p&gt;




&lt;p&gt;Thanks for reading. This article was originally posted on &lt;a href="https://zellwk.com/blog/dealing-with-anxiety-during-job-interviews/"&gt;my blog&lt;/a&gt;. Sign up for &lt;a href="https://zellwk.com"&gt;my newsletter&lt;/a&gt; if you want more articles to help you become a better frontend developer.&lt;/p&gt;

</description>
      <category>interview</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Technical Interview Preparation and Tips To Consider</title>
      <author>Braydon Coyer</author>
      <pubDate>Thu, 08 Jul 2021 12:51:58 +0000</pubDate>
      <link>https://dev.to/braydoncoyer/technical-interview-preparation-and-tips-to-consider-1n4h</link>
      <guid>https://dev.to/braydoncoyer/technical-interview-preparation-and-tips-to-consider-1n4h</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This was taken and expanded upon from &lt;a href="https://braydoncoyer.dev/newsletter/"&gt;my newsletter&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do you get nervous when taking a technical interview? I assume we all do — no matter how much experience we have under our belt. The truth is - technical interviews are a process we all have to go through at some point (and usually many times) as developers. The imposter syndrome kicks in and we are tempted to think we don’t belong in the industry. Sometimes we panic and freeze, where other times we manage to hide the nerves better than others. How do you react?&lt;/p&gt;

&lt;p&gt;When I’m preparing for an interview, I often think of things I should say or should do and perform a self-retrospective after to identify ways to improve.&lt;/p&gt;

&lt;p&gt;Now, though, as I conduct interviews for my company that operates in an Extreme Programming environment, I’ve been given a new perspective on tips and patterns to follow in future interviews. If you're looking for a new development job, I'd like to share these interview tips and highlights with you. Let's take a look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-tip-1-be-authentic-and-honest-in-preparation-and-execution-of-your-technical-interview"&gt;
  &lt;/a&gt;
  Interview tip #1: Be authentic and honest in preparation and execution of your technical interview
&lt;/h2&gt;

&lt;p&gt;First, don’t oversell yourself. Don’t get me wrong - I’m not saying that you sabotage your own job interview; you have experience and worth, but there’s a difference between showing your worth and overselling yourself. Developer candidates have told me they have experience with a language, framework or agile methodology and when I ask a question to gauge their understanding, it becomes obvious that they have little to no experience at all. As an interviewer, it’s very off-putting and a waste of time - now I have to try to find where they truly are on the experience spectrum. Not a great first impression, right?&lt;/p&gt;

&lt;p&gt;Instead of overselling yourself, be honest with the interviewer and respond accordingly. The interviewer will no doubt have reviewed your resume and has an idea of your experience, so make sure you appropriately set the expectations of the interviewer going in - and then knock their socks off. Don’t make the mistake of exaggerating your experience and as a result looking like a weak candidate.&lt;/p&gt;

&lt;p&gt;Now - I understand that many job applications “require” that candidates have years and years of experience in certain technologies for the pertaining role. More times than not, these numbers are unrealistic and can be a deterrent for considering applicants. I believe technical hiring is broken and &lt;a href="https://blog.alinelerner.com/ive-been-an-engineer-and-a-recruiter-hiring-is-broken-heres-why-and-heres-what-it-should-be-like-instead/"&gt;this article by Aline Lerner’s blog does a great job examining the problems.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Regardless of the years of experience needed for applications, if you think you can provide value to the company for that position, you should apply! Most of the interviews I’ve taken have listed requirements that I didn’t fit - and yet I did well in the interview and even got a few offers. Send in your resume with honest information, and see what happens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-tip-2-show-youre-a-lifetime-learner"&gt;
  &lt;/a&gt;
  Interview tip #2: Show you're a life-time learner
&lt;/h2&gt;

&lt;p&gt;Second, being a developer means that you’ve dedicated yourself to being a life-time learner. Constant learning requires discipline, time and effort as said by &lt;a href="https://www.codingame.com/blog/true-programmers-never-stop-learning/"&gt;Thibaud Jobert in his article about the endless cycle of learning&lt;/a&gt;. When you’re interviewing, there will be times when you're asked a question and you don't know the answer. Perhaps it's a detailed programming problem you need to solve, or maybe a more general question about your experience with a certain framework. Either way, if you don’t know the answer or don’t have the experience, inform the interviewer while also displaying a willingness to learn.&lt;/p&gt;

&lt;p&gt;Here's an example: “I don’t have experience in that area, but I’m a diligent learner and I know I can upscale myself to fulfill that requirement. I was previously put in a situation that allowed me to learn a new framework and by the end of the project, I was teaching other members on my team and we delivered a successful product.”&lt;/p&gt;

&lt;p&gt;This response does a few things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Admitting you lack some knowledge (honesty is key, remember.)&lt;/li&gt;
&lt;li&gt;Expressing a willingness to learn&lt;/li&gt;
&lt;li&gt;Providing credibility by explain past experience&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#interview-tip-3-cheating-hurts-you-more-than-it-may-help-you-in-a-technical-interview"&gt;
  &lt;/a&gt;
  Interview tip #3: Cheating hurts you more than it may help you in a technical interview
&lt;/h2&gt;

&lt;p&gt;Third, &lt;em&gt;please&lt;/em&gt; don’t cheat. I know this sounds obvious, but it hurts you in more ways than one. I can’t tell you how many times I’ve seen developers clearly referencing a solution to a coding problem and yet they can’t answer a basic question about the code they just “wrote”. By cheating they focus too much on the leaked solution and end up not understanding the implementation and what the code is actually doing.&lt;/p&gt;

&lt;p&gt;I believe there’s a difference between researching before a technical interview and cheating during the interview itself. In fact, I commend those who dedicate some time to research my company and interview process. It shows me the candidate is (hopefully) interested in what we do. It also allows them to gain some general information about the interview and what they can expect. What did other people think of the interview? Was it difficult? Glassdoor may even have some vague description about the broad type of questions candidates are expected to answer. Researching these things are all fine, but finding a leaked solution to use during the interview is deceitful, it’s &lt;em&gt;painfully&lt;/em&gt; obvious to the interviewer and should result in an immediate disqualification.&lt;/p&gt;

&lt;p&gt;Don’t cheat. You’re smart! Move slowly and think through the problem or question asked of you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-tip-4-ask-good-questions-in-a-technical-interview"&gt;
  &lt;/a&gt;
  Interview tip #4: Ask good questions in a technical interview
&lt;/h2&gt;

&lt;p&gt;Finally, don’t make assumptions about what’s being asked of you - this can cost you valuable time. Approach technical problems and coding challenges with a fresh mind and ask clarifying questions to understand the problem scope along the way.&lt;/p&gt;

&lt;p&gt;While one of my responsibilities as an interviewer is to help guide candidates towards the finish line, sometimes I let them wander when they’re taking a coding challenge to see if they’ll make it there on their own. This, in itself, can help me gauge one’s experience and understanding, but many times a simple question directed at me from the candidate can save them time, realign their compass and highlight possible solutions.&lt;/p&gt;

&lt;p&gt;Asking questions doesn’t shine a bad light on you. Rather, a good candidate asks directed questions at the appropriate time, revealing your engaged mindset to the interviewer. This skill only comes with practice, but performing a retrospective on past interviews and evaluating how you could have asked better questions is a great way to prepare for the future.&lt;/p&gt;

&lt;p&gt;You should also get in the habit of preparing questions to pose to the interviewer or manager at the end of the interview. Ask about the company. Ask about methodologies and workflows. Ask about the team you’re being evaluated to join. It never hurts to show interest in the position, the company and work they’re doing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Interview preparation helps you get ready beforehand, but it also sets you up for success as you showcase your skills during the interview. Remember - be authentic, show your willingness to learn, don’t cheat and make sure you ask good questions!&lt;/p&gt;

&lt;p&gt;Have anything else to add? &lt;a href="https://twitter.com/BraydonCoyer"&gt;Hit me up on Twitter&lt;/a&gt; - I’d love to hear what you have to say!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cover photo by Maranda Vandergriff/Unsplash&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>interview</category>
    </item>
    <item>
      <title>Creating More Accessible CSS Art</title>
      <author>Alvaro Montoro</author>
      <pubDate>Thu, 08 Jul 2021 12:32:34 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/creating-more-accessible-css-art-179n</link>
      <guid>https://dev.to/alvaromontoro/creating-more-accessible-css-art-179n</guid>
      <description>&lt;p&gt;CSS art has been a thing since the creation of CSS itself. It is a great way of practicing and learning and it makes for an interesting coding challenge. But it has a big problem: CSS art is inherently not accessible.&lt;/p&gt;

&lt;p&gt;In this post, we will not see how to create CSS drawings and illustrations (there are plenty of those posts). Instead, we will focus on some tips and best practices to make that CSS art more accessible for everyone.&lt;/p&gt;

&lt;p&gt;After applying these techniques, your CSS art will be friendlier for screen-reader users, people with specific color needs and preferences, people with vestibular disorders or vertigo... and all without impacting your art or limiting your creativity. It's a win-win.&lt;/p&gt;

&lt;p&gt;For a working example of the tips in the article, check &lt;a href="https://codepen.io/alvaromontoro/pen/WNwrPmW"&gt;this CSS illustration&lt;/a&gt;. And without further ado, let's see the recommendations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#identify-the-css-art-as-an-image"&gt;Identify the CSS art as an image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-alternative-text"&gt;Add alternative text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#go-pixelperfect-or-go-for-scalable-design"&gt;Go pixel-perfect... or go for scalable design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-semantic-html-elements"&gt;Use semantic HTML elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#be-mindful-with-the-animations"&gt;Be mindful with the animations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#consider-peoples-color-choices"&gt;Consider people's color choices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#set-the-aspect-ratio"&gt;Set the aspect ratio&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#identify-the-css-art-as-an-image"&gt;
  &lt;/a&gt;
  Identify the CSS art as an image
&lt;/h2&gt;

&lt;p&gt;One of the main things to do is identifying the CSS art as an image. We can do that by changing the container and adding &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/Role_Img"&gt;&lt;code&gt;img&lt;/code&gt; ARIA role&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- HTML of the image --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By adding this ARIA role, the assistive technologies will announce the container of the CSS art as an image when they reach it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author's note: from now on, our CSS art will be identified as an image, so the terms "CSS art", "drawing", "illustration", or "image" may be used interchangeably.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#add-alternative-text"&gt;
  &lt;/a&gt;
  Add alternative text
&lt;/h2&gt;

&lt;p&gt;Now that the screen readers announce the CSS art as an image, it is important to also provide some description or alternative text as a regular image would do with the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-alt"&gt;&lt;code&gt;alt&lt;/code&gt; attribute&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can achieve this by adding an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute"&gt;&lt;code&gt;aria-label&lt;/code&gt; attribute&lt;/a&gt; to the image, and providing the alternative text there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"The alternative text goes here"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- HTML of the image --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will work just fine but, in the unlikely (but possible) case of the CSS not loading properly, may not be enough for what we want. That's why we prefer using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-labelledby_attribute"&gt;&lt;code&gt;aria-labelledby&lt;/code&gt; attribute&lt;/a&gt; instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"alt-image"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"alt-image"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;The alternative text goes here&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- HTML of the image --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This solution will include the label as text, which will be hidden using an accessible technique. There are many possibilities for doing this; a simple one can be found on &lt;a href="https://www.a11yproject.com/posts/2013-01-11-how-to-hide-content/"&gt;The A11Y Project's website&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#alt-image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way, if the CSS doesn't load, the alternative text will be displayed. Similarly to how the alternative text of a native &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt; would be displayed on the page if the image fails to load.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#go-pixelperfect-or-go-for-scalable-design"&gt;
  &lt;/a&gt;
  Go pixel-perfect... or go for scalable design
&lt;/h2&gt;

&lt;p&gt;Something &lt;strong&gt;to consider even before we start any coding&lt;/strong&gt;: do we want a pixel-perfect drawing? or do we want something responsive that will scale nicely (at the cost of sometimes not being displayed perfectly fine)? Of course, the answers will have consequences on how we create the CSS art.&lt;/p&gt;

&lt;p&gt;If we want to achieve a pixel-perfect result, we should use &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#absolute_length_units"&gt;absolute units&lt;/a&gt; like &lt;code&gt;px&lt;/code&gt;, &lt;code&gt;cm&lt;/code&gt;, &lt;code&gt;pt&lt;/code&gt;, etc. This way, our image will have a fixed size and won't be responsive (although it will scale better than raster images as it is a vectorial drawing), and we should be able to use any CSS property and value.&lt;/p&gt;

&lt;p&gt;On the other hand, we will use &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#relative_length_units"&gt;relative units&lt;/a&gt; like &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;vmin&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, etc. if we want to achieve scalability.&lt;/p&gt;

&lt;p&gt;Going for scalability will require some additional considerations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The result will be scalable and responsive... or at least, have the capacity of being responsive.&lt;/li&gt;
&lt;li&gt;We should be cautious with some CSS properties that don't work with all relative units (e.g. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow"&gt;&lt;code&gt;box-shadow&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/border-width"&gt;&lt;code&gt;border&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;We should avoid some CSS values that don't take relative units (e.g. at the moment &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/clip-path"&gt;&lt;code&gt;clip-path&lt;/code&gt;&lt;/a&gt; can be relative with &lt;code&gt;polygon()&lt;/code&gt; but not with &lt;code&gt;path()&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is nothing wrong with either approach. For artistic drawings, we may most likely opt for scalability and responsiveness; while for more &lt;em&gt;practical&lt;/em&gt; things like icons or backgrounds, a pixel-perfect result could be more convenient.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-semantic-html-elements"&gt;
  &lt;/a&gt;
  Use semantic HTML elements
&lt;/h2&gt;

&lt;p&gt;HTML5 provides many semantic elements. There is no need to use &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; for every part of our drawing, and especially for the container. The real question would be "Which one?"&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Author's note: I understand my pick of semantic elements could be debatable. I will try to keep them as neutral/objective as possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And there's a couple of elements that seem ideal for the case: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article"&gt;&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure"&gt;&lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;&lt;/a&gt;/&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption"&gt;&lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;&lt;/a&gt;. While the latter may seem the obvious choice, the former has additional semantic advantages, as we'll soon see.&lt;/p&gt;

&lt;p&gt;On one hand, we have &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;. A self-contained content with an optional caption (&lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;) that could be used as alternative text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;figure&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"alt-image"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;figcaption&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"alt-image"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Here goes the alternative text&lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- HTML of the image --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This choice seems like an exact fit for what we want to do, but we also need to consider &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;: a complete, self-contained, and independent composition intended to be distributed or reused. Precisely what our CSS art is!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- HTML of the image --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which semantic HTML element to pick? That would be up to the author and how the CSS art will be presented to the users.&lt;/p&gt;

&lt;p&gt;Some people already mentioned that having an &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; within an &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; isn't allowed, but that's incorrect. &lt;a href="https://html.spec.whatwg.org/multipage/sections.html#the-article-element"&gt;An article can contain another article&lt;/a&gt;. When there are nested articles, the inner article must be related to the outer article.&lt;/p&gt;

&lt;p&gt;Using an &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; also allows for a more natural use of other semantic HTML elements like headings for the illustration title/alternative text, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address"&gt;&lt;code&gt;&amp;lt;address&amp;gt;&lt;/code&gt;&lt;/a&gt; for the author's information, or &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time"&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;&lt;/a&gt; for the creation date:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;article&lt;/span&gt; &lt;span class="na"&gt;aria-labelledby=&lt;/span&gt;&lt;span class="s"&gt;"image-alt"&lt;/span&gt; 
         &lt;span class="na"&gt;aria-describedby=&lt;/span&gt;&lt;span class="s"&gt;"image-info"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- The whole header would be accessibly hidden --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"image-alt"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Title/Alternative text&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"image-info"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;address&amp;gt;&lt;/span&gt;
        Created by 
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://twitter.com/alvaro_montoro"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          Alvaro Montoro
        &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/address&amp;gt;&lt;/span&gt;
      on
      &lt;span class="nt"&gt;&amp;lt;time&lt;/span&gt; &lt;span class="na"&gt;datetime=&lt;/span&gt;&lt;span class="s"&gt;"2021-06-10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;June 10th, 2021&lt;span class="nt"&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!-- HTML of the image --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#be-mindful-with-the-animations"&gt;
  &lt;/a&gt;
  Be mindful with the animations
&lt;/h2&gt;

&lt;p&gt;Sometimes, CSS art includes some type of animation: a dog wagging its tail, a person moving or blinking, an airplane flying and looping...&lt;/p&gt;

&lt;p&gt;When we include animations into our CSS art, we need to consider that there are people who may not like animations or who suffer from disorders (e.g. &lt;a href="https://css-tricks.com/introduction-reduced-motion-media-query/"&gt;vestibular disorders or vertigo&lt;/a&gt;) that make those animations annoying and painful.&lt;/p&gt;

&lt;p&gt;We need to provide a way to disable or replace those animations with something different. Luckily, CSS offers the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;&lt;code&gt;prefers-reduced-motion&lt;/code&gt; media query&lt;/a&gt; that allows developers to do exactly that.&lt;/p&gt;

&lt;p&gt;For example, we can disable an animation by doing something like this (adding the class "animated" to the elements that have animations):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.animated&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also need to take into account that not all animations are equal, and not all will cause problems. &lt;strong&gt;Instead of disabling all the animations, maybe we should consider replacing them&lt;/strong&gt; with friendlier ones or adjusting the times.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consider-peoples-color-choices"&gt;
  &lt;/a&gt;
  Consider people's color choices
&lt;/h2&gt;

&lt;p&gt;Some operating system allow users to enable additional accessibility features and, in some cases, CSS is able to identify them using media queries and features.&lt;/p&gt;

&lt;p&gt;Many of them are experimental and &lt;a href="https://caniuse.com/?search=forced-colors"&gt;not widely supported&lt;/a&gt;, but they can be used to expand our CSS art once support is more extended.&lt;/p&gt;

&lt;p&gt;These media queries are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-contrast"&gt;&lt;code&gt;prefers-contrast&lt;/code&gt;&lt;/a&gt;: to indicate if the user wants a higher or lower contrast.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme"&gt;&lt;code&gt;prefers-color-scheme&lt;/code&gt;&lt;/a&gt;: to detect if the user requested dark/light color theme (often used for night/day modes.)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors"&gt;&lt;code&gt;forced colors&lt;/code&gt;&lt;/a&gt;: to specify if the user chose a limited color palette.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-contrast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* more: higher contrast colors, borders, no transparencies */&lt;/span&gt;
  &lt;span class="c"&gt;/* less: lower contrast colors */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-colors-scheme&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* dark: drawing with more contrast vs dark background */&lt;/span&gt;
  &lt;span class="c"&gt;/* light: drawing with more contrast vs light background */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forced-colors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;active&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* override properties like box-shadow, add borders, etc. */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The use of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"&gt;CSS custom properties&lt;/a&gt; (aka CSS variables) will make these media queries really useful and simple (we should only redefine the variable values.)&lt;/p&gt;

&lt;p&gt;In more extreme cases, we may want to avoid some CSS properties. For example, &lt;code&gt;box-shadow&lt;/code&gt;, which is forced to 'none' in forced-colors mode.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-the-aspect-ratio"&gt;
  &lt;/a&gt;
  Set the aspect ratio
&lt;/h2&gt;

&lt;p&gt;A newer property useful when creating responsive CSS art is &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio"&gt;&lt;code&gt;aspect-ratio&lt;/code&gt;&lt;/a&gt;. With it, we will be able to set the preferred aspect ratio for the image, which will be used for calculating the auto sizes when scaling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* This CSS art will be squared */&lt;/span&gt;
&lt;span class="nf"&gt;#myCSSart&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* This CSS art will be twice as tall as it is wide */&lt;/span&gt;
&lt;span class="nf"&gt;#myCSSart&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;aspect-ratio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is more of a convenience for the developer, but it can be helpful for accessibility as it ensures that the CSS art will not be stretched and distorted. And it has &lt;a href="https://caniuse.com/?search=aspect-ratio"&gt;decent support&lt;/a&gt; by browsers.&lt;/p&gt;




&lt;p&gt;This article is an extension of a presentation I made during a SydCSS meetup. You can find the &lt;a href="https://www.youtube.com/watch?v=bJRETGarbqE&amp;amp;t=2460s"&gt;video on Youtube&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>a11y</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 15+ Newsletters📄For Web Developers👨‍💻in 2021.</title>
      <author>themeselection</author>
      <pubDate>Thu, 08 Jul 2021 12:22:15 +0000</pubDate>
      <link>https://dev.to/theme_selection/top-15-newsletters-for-web-developers-in-2021-57p9</link>
      <guid>https://dev.to/theme_selection/top-15-newsletters-for-web-developers-in-2021-57p9</guid>
      <description>&lt;p&gt;Want to stay updated regarding all the news, tech and resources? Then here are some of the best newsletters that will help you. In web developers world, newsletters plays an important role. As it is hard to keep eye on every single update, newsletters helps you to save your time and make it easy for you to stay updated. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-newsletter"&gt;
  &lt;/a&gt;
  What is a Newsletter?
&lt;/h2&gt;

&lt;p&gt;Basically a &lt;strong&gt;newsletter&lt;/strong&gt; is a printed or electronic report that contains news concerning the activities of a business or an organization that is sent to its members, customers, employees or other subscribers. Newsletters generally contain one main topic of interest to its recipients. A newsletter may be considered grey literature.&lt;/p&gt;

&lt;p&gt;In web development world, there is continuous updates regarding tools, resources, technology and many more. In order to keep yourself up-to-date, newsletter can help you. They'll regularly update you regarding all the web development related stuffs.&lt;/p&gt;

&lt;p&gt;In this post, we have gathered some useful newsletters for you that will keep you up to date about relevant topics related to the web developer's world. In this list, there are newsletters which post weekly news, articles, links and tools about JavaScript, HTML, CSS, Node.js and many others frontend stuff.&lt;/p&gt;

&lt;p&gt;You can keep in check &lt;a href="https://pixinvent.com/demo/vuexy-vuejs-admin-dashboard-template/landing/"&gt;Vuexy - Vuejs, React, Angular, HTML &amp;amp; Laravel Admin Dashboard Template&lt;/a&gt; while working on your next project. It is one of the best admin template that comes with many amazing features.&lt;/p&gt;

&lt;p&gt;You can also bookmark the collection of &lt;a href="https://dev.to/theme_selection/10-useful-tools-for-web-developers-in-2021-42d1"&gt;Useful tools for web developers&lt;/a&gt;, and &lt;a href="https://dev.to/theme_selection/best-online-code-editors-for-web-developers-5bpn"&gt;Best Online Code Editors For Web Developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let's begin..!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T6K4iyGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cl9gf5h857qssge4ijkv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T6K4iyGi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cl9gf5h857qssge4ijkv.gif" alt="let's go"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-weekly"&gt;
  &lt;/a&gt;
  &lt;a href="https://javascriptweekly.com/"&gt;JavaScript Weekly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E8sVRz54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dupuj7dd19f66pqp4mzb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E8sVRz54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dupuj7dd19f66pqp4mzb.png" alt="JavaScript Weekly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is another most popular newsletter, which posts weekly all new stuff about the JavaScript environment. Today, there are more than 116k of subscribers and it has great resources and news about JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hackernewsletter"&gt;
  &lt;/a&gt;
  &lt;a href="https://hackernewsletter.com/"&gt;Hackernewsletter&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qV26Z1ep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzl50k6y82bhjtmfwlsa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qV26Z1ep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzl50k6y82bhjtmfwlsa.png" alt="Hackernewsletter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you enjoy hacker news, the hackernewsletter is your best newsletter. Basically, it’s a weekly round-up of the best articles on tech, programming, and startups. All links are curated posts from hacker news. It has more than 60k+ subscribers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nodejs-weekly"&gt;
  &lt;/a&gt;
  &lt;a href="https://nodeweekly.com/"&gt;Nodejs weekly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L6u8xIfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tz3de4pf1nvhyahi2d9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L6u8xIfE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tz3de4pf1nvhyahi2d9z.png" alt="Nodejs weekly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With more than 54k+ subscribers, this newsletter is curated by the same editor of JavaScript Weekly, but it is more focused on the Node.js platform. Well, your JavaScript stack can’t be full without Node.js. So if you want to keep up to date with all the latest Node.js news this will be an awesome newsletter to subscribe too with more than 36k of subscribers today.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-tricks-newsletter"&gt;
  &lt;/a&gt;
  &lt;a href="https://css-tricks.com/newsletter/"&gt;Css Tricks Newsletter&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drXiDaH3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5xr6whykzy5vtpxt51x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drXiDaH3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u5xr6whykzy5vtpxt51x.png" alt="CSS tricks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are many ways to stay up to date with CSS-Tricks, they also run an awesome newsletter that keeps you updated about front-end development and web design overall. It covers a bunch of topics like tutorials, plugins, and of course, CSS tricks. Generally, this site is a must for any frontend developer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smashing-newsletter"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.smashingmagazine.com/the-smashing-newsletter/"&gt;Smashing Newsletter&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WMXY3q9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1n8p6z343efa7t7rvg3w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WMXY3q9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1n8p6z343efa7t7rvg3w.png" alt="Smashing Newsletter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Smashing magazine is not unknow to web developers and designers. It is one of the leading site. It has the separate newsletter section which once a week delivers a newsletter right into your inbox with helpful tips and techniques on front-end UX design. &lt;/p&gt;

&lt;p&gt;It contains a cluster of incredible contents related to designing and creative content development. It seems to cover a lot more under their shed apart from design-related ideas. It provides insight on topics such as WordPress articles, HTML, plugins, Illustrator, CSS, Android, and everything related to designing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-weekly"&gt;
  &lt;/a&gt;
  &lt;a href="https://css-weekly.com/"&gt;CSS Weekly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CvGyDYwm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwdfvmp03f0pil5sf0f5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CvGyDYwm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fwdfvmp03f0pil5sf0f5.png" alt="CSS Weekly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS Weekly provides the latest news and articles about development in web technology. This newsletter helps you to stay on track with the modern and trending methodologies. &lt;/p&gt;

&lt;p&gt;CSS has more than 32,000 subscribers, which makes the community much more interactive. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ponyfoo"&gt;
  &lt;/a&gt;
  &lt;a href="https://ponyfoo.com/weekly"&gt;Ponyfoo&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F8qYtrYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gc09zboh7fbmgkn45br1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F8qYtrYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gc09zboh7fbmgkn45br1.png" alt="Ponyfoo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pony Foo  is one of the best newsletters for webdeveloper. It offers you trending and interesting topics from around the globe about frontend development and web-related technologies. &lt;/p&gt;

&lt;p&gt;You can also head to their website and explore the array of links provided to find the topic matching your niche. The newsletter arrives once a week.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sitepoint-versioning"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.sitepoint.com/versioning/"&gt;Sitepoint Versioning&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eSm6H9BT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iwrggetuolpv39cp1uj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eSm6H9BT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6iwrggetuolpv39cp1uj.png" alt="Sitepoint versionning"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SitePoint is another well known name in web developers and designers world. They publish interesting articles, tutorials, books, and courses regularly. If you’d prefer that content delivered straight to your inbox, you should give Sitepoint's newsletter Versioning a try.&lt;/p&gt;

&lt;p&gt;Versioning is a daily newsletter featuring a handpicked selection of the most important things in web dev and design – as well as some fun content, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#webtools-weekly"&gt;
  &lt;/a&gt;
  &lt;a href="https://webtoolsweekly.com/"&gt;WebTools Weekly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r5mp_iiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ciujcjtkx4qdwa60hbk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r5mp_iiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ciujcjtkx4qdwa60hbk.png" alt="WebTools Weekly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Web Tools Weekly is a frontend development and web design newsletter with a focus on tools. Each issue features a brief tip or tutorial, followed by a weekly round-up of various plugins, apps, script, and other resources to help front-end developers solve problems and be more productive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend-focus"&gt;
  &lt;/a&gt;
  &lt;a href="https://frontendfoc.us/"&gt;Frontend Focus&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zY_mbd3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smeeyxspsvcddwm75keu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zY_mbd3g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smeeyxspsvcddwm75keu.png" alt="Frontend Focus"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Frontend Focus offers a once-weekly roundup of the finest tutorials, articles, and front-end news. It is a great newsletter for developers who are working with CSS, HTML, WebGL, Canvas, JavaScript, or any topic related to browsers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-kicks"&gt;
  &lt;/a&gt;
  &lt;a href="https://javascriptkicks.com/"&gt;JavaScript Kicks&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pn3dwPJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oh8tv9cqd609w7f66nso.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pn3dwPJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oh8tv9cqd609w7f66nso.png" alt="JavaScript Kicks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JavaScript kicks is a weekly newsletter which offers all the news regarding to JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changelog-weekly"&gt;
  &lt;/a&gt;
  &lt;a href="https://changelog.com/weekly"&gt;Changelog Weekly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qm4d8Ohm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f57w9z7wkxhdjgw5xwkb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qm4d8Ohm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f57w9z7wkxhdjgw5xwkb.png" alt="Changelog Weekly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a great newsletter! Weekly, they post about anything related to the open-source world and software development. Sometimes they also present useful links about JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dev-tips"&gt;
  &lt;/a&gt;
  &lt;a href="https://umaar.com/dev-tips/"&gt;Dev tips&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dShcA97s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqqklu4q692bpp35llzg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dShcA97s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqqklu4q692bpp35llzg.png" alt="Dev Tips"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get a Google Chrome DevTools tip, in the form of an animated GIF, once a week. DevTools is an essential front-end development tool, and this newsletter will help you learn some really cool tricks and techniques.&lt;/p&gt;

&lt;p&gt;If you prefer smaller bits of interesting content, I’d definitely recommend to give Dev Tips Daily from Umar Hansa a try. You’ll receive a developer tip, mostly in form of a gif 5 days a week.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fullweb"&gt;
  &lt;/a&gt;
  &lt;a href="http://fullweb.io/"&gt;Fullweb&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCU97p9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lt0oq92wlww8owposrf0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCU97p9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lt0oq92wlww8owposrf0.png" alt="Fullweb"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fullweb Weekly is a newsletter targeted to full stack developers. Every week subscribers will receive 5 links in the areas of web development, backend development, DevOps and user experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontender"&gt;
  &lt;/a&gt;
  &lt;a href="https://frontender-ua.medium.com/"&gt;Frontender&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LbgtmmC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zubw728moftf7du9zgx6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LbgtmmC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zubw728moftf7du9zgx6.png" alt="Fronteneder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Frontender is a regularly updated weekly newsletter. It consists list of articles, tools, resources, news and sources for web developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jster"&gt;
  &lt;/a&gt;
  &lt;a href="http://jster.net/"&gt;Jster&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qBbeo2WZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndnmrqh6ia7nq1doadxw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qBbeo2WZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ndnmrqh6ia7nq1doadxw.png" alt="Jster"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jster is a great newsletter which delivers various sources of web development covering almost all the section such as Essentials, UI, Multimedia, Graphics, Data, Development, Utilities, and Applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#iosdevweekly"&gt;
  &lt;/a&gt;
  &lt;a href="https://iosdevweekly.com/"&gt;iosdevweekly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qPEoityb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dd4tokr8jwjdfl0lq0ab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qPEoityb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dd4tokr8jwjdfl0lq0ab.png" alt="iosdevweekly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a hand-picked round-up of the best iOS development links every week. If you are working with iOS projects then this newsletter is the best one to subscribe. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-statuscode"&gt;
  &lt;/a&gt;
  &lt;a href="https://react.statuscode.com/"&gt;React statuscode&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fBOFczFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eo7pvmeehz76ax1w1cbe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fBOFczFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eo7pvmeehz76ax1w1cbe.png" alt="React statuscode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the name suggest, it is all about reactjs. You'll get all the latest updates, sources and news regarding  to reactjs straight into your inbox. If you are specialized with recatjs and want o keep yourself updated then react statuscode is best one to keep  in mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#statuscode-weekly"&gt;
  &lt;/a&gt;
  &lt;a href="https://weekly.statuscode.com/"&gt;Statuscode Weekly&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9m5jh2sh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gykmbqg8gwimwi3c64jc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9m5jh2sh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gykmbqg8gwimwi3c64jc.png" alt="Statuscode Weekly"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With more than 19k subscribers, it is a weekly newsletter covering software development, Web operations, infrastructure, platforms, and performance, from browser down to the metal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Finding the right newsletter is all about matching your interests with a resource that can add value to your career.&lt;/p&gt;

&lt;p&gt;Take another look at this collection and sign up for any newsletters that grab your attention. They are all completely free, and you can always unsubscribe, so there’s nothing to lose!&lt;/p&gt;

&lt;p&gt;Each and every newsletter is the result of hard-work and years of experience. Save your precious time and at the same time learn from the experiences of the curators, subscribe and dive into these wonderful pieces of art. If you have subscribed to any other newsletters, do let us know in the comment section below.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Understanding NFTs and Why We Need Push Notifications on NFT Marketplaces</title>
      <author>Olumide</author>
      <pubDate>Thu, 08 Jul 2021 12:08:29 +0000</pubDate>
      <link>https://dev.to/shittu_olumide_/understanding-nfts-and-why-we-need-push-notifications-on-nft-marketplaces-3aa1</link>
      <guid>https://dev.to/shittu_olumide_/understanding-nfts-and-why-we-need-push-notifications-on-nft-marketplaces-3aa1</guid>
      <description>&lt;p&gt;Conversations about cryptocurrencies and blockchains are finally making it to dinner tables. Multiple factors such as the involvement of institutional investors, the spiking prices of cryptos, and the evolution of DeFi are majorly impacting the adoption. The latest in the series of things taking crypto to greater heights is the popularity of NFTs, or non-fungible tokens.&lt;/p&gt;

&lt;p&gt;NFTs are now everywhere, from art to digital collectibles and real estate to gaming. In March alone, users spent over $440 million on these tokens across various NFT platforms. Just yesterday Twitter announced 140 NFT drop 🤯&lt;br&gt;
So, what exactly are NFTs?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-nfts"&gt;
  &lt;/a&gt;
  What are NFTs?
&lt;/h2&gt;

&lt;p&gt;The term “fungible” is used to identify items that can easily replace or be replaced by other identical items without any change in value. Going by this, we can say fiat currencies such as the dollar or cryptos such as Bitcoin and Ether are fungible items or tokens.&lt;/p&gt;

&lt;p&gt;For example, you can easily exchange one Bitcoin for another Bitcoin without any change in value. You can also do the same with a dollar. Or, you may exchange a $100 bill with 20 bills of $5. This means a Bitcoin or a dollar bill does not have anything particularly unique that sets them apart from other Bitcoins or dollar bills. Thus, they are fungible items.&lt;br&gt;
Now, consider an art piece by Picasso. Can you replace the original art piece with any other art representing the exact same details and value? Not really. Sure, you may recreate the painting, but there will only ever be one original artwork that will always possess a unique value. This characteristic not only makes Picasso’s artwork but every artwork by every artist non-fungible as they’re each unique in their own way.&lt;br&gt;
Even your house is non-fungible. You may buy a new house or exchange your house with that of your friend’s, but you are not entirely replacing it with the new house. Why? Because the location of the new house, its design, the number of rooms, and so many other details of it will be completely different from your existing one.&lt;/p&gt;

&lt;p&gt;We can go further with examples of unique and rare items that are non-fungible. Music albums, in-game accessories, digital and real collectibles, and so on. And when we take these non-fungible items and represent their uniqueness through blockchain-based digital tokens pegged to the items, they become non-fungible tokens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-all-the-hype-around-nfts"&gt;
  &lt;/a&gt;
  What’s All the Hype Around NFTs?
&lt;/h2&gt;

&lt;p&gt;The fad around NFTs is fuelled by two distinct reasons. The first is the technical excellence they offer to the art, gaming, music, real estate, and so many other industries. The second is that many renowned artists, celebrities, tech entrepreneurs, and business owners have joined the NFT bandwagon. Let’s look into both.&lt;br&gt;
The fact that NFTs are stored on a blockchain makes them extremely secure. If you own the NFT pegged to a Picasso, you actually have the proof-of-ownership of the painting that is based on a blockchain. And blockchains are cryptographically secure, distributed ledgers that make it next to impossible for anyone to tamper with a record stored on it. This means, no one can hack a blockchain to steal your NFT or tamper with it.&lt;/p&gt;

&lt;p&gt;Additionally, blockchains are also transparent, public ledgers, and all records are publicly available. So you can easily check who has previously owned the NFT of the Picasso painting and verify its authenticity. This has the potential to curb the sale of counterfeit products in the art and luxury goods industries, which currently cuts losses worth billions of dollars annually.&lt;br&gt;
But that’s certainly not it. Famous people from digital artists like Beeple to technologists like Elon Musk and entrepreneurs like Jack Dorsey are all now involved in the world of NFTs.&lt;/p&gt;

&lt;p&gt;Recently, Twitter CEO Jack Dorsey put his first-ever tweet from 2006 up for sale as an NFT. The NFT of the tweet that reads “just setting up my twttr” was sold for $2.9 million. Even Elon Musk created an animated music video about NFTs with an NFT song that he intended to sell as an NFT. He received bids worth millions of dollars but later ditched the idea of selling it.&lt;/p&gt;

&lt;p&gt;If all that makes your jaw drop, wait for the biggest one.&lt;br&gt;
The NFT of a digital art piece by Mike Winkelmann, famously known as Beeple, recently sold for over $69 million. It was a collage of 5,000 of the digital artworks that he had posted online daily since 2013. The sale made it the third most expensive artwork ever sold by a living artist.&lt;/p&gt;

&lt;p&gt;As you read this, celebrities are creating NFTs of their own. NBA already has NFTs that bring basketball to the world of blockchain. And yet, it only feels like the start… a massive one.&lt;br&gt;
Bringing Push Notifications to NFT Marketplaces&lt;br&gt;
There are two popular ways you can get your hands on NFTs — centralized and decentralized marketplaces. One of the most popular centralized marketplaces is Nifty Gateway. It makes the process easy by allowing you to use your credit card to purchase NFTs. But as with all things centralized, it is exposed to cyber threats, which is quite evident after the recent hack of the platform.&lt;br&gt;
So, your safest bet is a decentralized NFT marketplace like OpenSea, where you truly own the NFTs you buy. And as they are decentralized, no one can really hack them or exploit your account unless you somehow compromise the private keys and passwords to your wallet.&lt;/p&gt;

&lt;p&gt;However, like mobile applications from the early days of smartphones, these marketplaces still do not have push notifications. Now, suppose you use OpenSea to buy and trade NFTs. Of course, you would love to stay updated about the latest NFT sales and new NFT listings. Maybe, when you put an NFT up for sale, you would want to be notified when it gets a new bidder. The scenarios for the use of push notifications are endless.&lt;br&gt;
Sadly, decentralized platforms today cannot send push notifications to keep you notified of the latest events. That, however, changes with Ethereum Push Notification Service or EPNS. EPNS not only enables decentralized applications and services to send push notifications to their users but also incentivizes the entire process for users. This creates a win-win situation for everyone in the ecosystem.&lt;/p&gt;

&lt;p&gt;As we move further deep into the world of NFTs and decentralized marketplaces become a common hangout place for NFT fans, push notifications will become inevitable. And as that happens, we are sure EPNS will be able to effectively solve the challenge at hand.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Java Program to Print Square Pattern Star Pattern</title>
      <author>Sachin Ponnapalli</author>
      <pubDate>Thu, 08 Jul 2021 12:01:19 +0000</pubDate>
      <link>https://dev.to/sachinponnapalli/java-program-to-print-square-pattern-star-pattern-50ne</link>
      <guid>https://dev.to/sachinponnapalli/java-program-to-print-square-pattern-star-pattern-50ne</guid>
      <description>&lt;p&gt;Program to Print Square Star Pattern&lt;br&gt;
In this article we are going to see how to print the square  star program.&lt;/p&gt;

&lt;pre&gt;Example-1

When row value=4
****
****
****
****&lt;/pre&gt;
&lt;pre&gt;Example-2:

When row value=5
*****
*****
*****
*****
*****&lt;/pre&gt;
Now, let's see the actual program to print it.

&lt;strong&gt;Approach:&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;Enter total row and store it in an integer variable &lt;code&gt;row&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Take first for loop to print all rows.&lt;/li&gt;
    &lt;li&gt;Take second/inner for loop to print column values.&lt;/li&gt;
    &lt;li&gt;Then go on printing the star symbols according to the iteration.&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;JAVA Code:&lt;/strong&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a href="#Static_Star_Character"&gt;Static Star Character&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href="#User_Input_Character"&gt;User Input Character&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
&lt;a id="Static_Star_Character"&gt;&lt;/a&gt;Method-1 : Static Star Pattern&lt;/h3&gt;
&lt;pre&gt;import java.util.*;
public class Main 
{    
    public static void main(String args[])   
    {   // taking variable for loop iteration and row .
    int row,r,c,d;
    //creating object 
    Scanner s = new Scanner(System.in);
    // entering the number of row
    System.out.print("Enter rows : ");
    row = s.nextInt();
    //for loop for rows
    for(  r=0;r&amp;lt;row;r++)
        {
            // printing stars
            for( c=0;c&amp;lt;row;c++)
                 System.out.print("*");
            System.out.println();
       }             
    }
}

&lt;/pre&gt;

&lt;pre&gt;Output:

Enter rows : 5
*****
*****
*****
*****
*****&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://btechgeeks.com/java-program-to-print-pyramid-star-pattern/"&gt;Java Program to Print Pyramid Star Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://btechgeeks.com/java-program-to-print-inverted-pyramid-star-pattern/"&gt;Java Program to Print Inverted Pyramid Star Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
&lt;a id="User_Input_Character"&gt;&lt;/a&gt;Method-2 : User Input Pattern&lt;/h3&gt;
&lt;pre&gt;import java.util.*;
public class Main 
{    
    public static void main(String args[])   
    {   // taking variable for loop iteration and row .
    int row,r,c,d;
    //creating object 
    Scanner s = new Scanner(System.in);
    // entering the number of row
    System.out.print("Enter rows : ");
    row = s.nextInt();
    // entering any character
    System.out.print("Enter any character : ");
    char sym = s.next().charAt(0);
    //for loop for rows
    for(  r=0;r&amp;lt;row;r++)
        {
            // printing stars
            for( c=0;c&amp;lt;row;c++)
                 System.out.print(sym);
            System.out.println();
       }             
    }
}

&lt;/pre&gt;

&lt;pre&gt;Output:

Enter rows : 5
Enter any character : #
#####
#####
#####
#####
#####&lt;/pre&gt;
&lt;strong&gt;Explanation :&lt;/strong&gt;

Let's understand the program by going through the detailed explanation.

We have taken row value as 5.

&lt;strong&gt;Iteration-1&lt;/strong&gt;
r=0 (passes the first for loop condition) because it will execute until &lt;code&gt;r&amp;lt; row&lt;/code&gt;
Star will be printed 5 time because inner for loop will be executed &lt;code&gt;row&lt;/code&gt; time .
&lt;pre&gt;*****&lt;/pre&gt;
&lt;strong&gt;Iteration-2&lt;/strong&gt;
r=1 (passes the first for loop condition) because it will execute until &lt;code&gt;r&amp;lt; row&lt;/code&gt;
Star will be printed 5 time because inner for loop will be executed &lt;code&gt;row&lt;/code&gt; time .
&lt;pre&gt;*****&lt;/pre&gt;
&lt;strong&gt;Iteration-3&lt;/strong&gt;
r=2 (passes the first for loop condition) because it will execute until &lt;code&gt;r&amp;lt; row&lt;/code&gt;
Star will be printed 5 time because inner for loop will be executed &lt;code&gt;row&lt;/code&gt; time .
&lt;pre&gt;*****&lt;/pre&gt;
&lt;strong&gt;Iteration-4&lt;/strong&gt;

r=3 (passes the first for loop condition) because it will execute until &lt;code&gt;r&amp;lt; row&lt;/code&gt;
Star will be printed 5 time because inner for loop will be executed &lt;code&gt;row&lt;/code&gt; time .
&lt;pre&gt;*****&lt;/pre&gt;
&lt;strong&gt;Iteration-5&lt;/strong&gt;

r=4 (passes the first for loop condition) because it will execute until &lt;code&gt;r&amp;lt; row&lt;/code&gt;
Star will be printed 5 time because inner for loop will be executed &lt;code&gt;row&lt;/code&gt; time .
&lt;pre&gt;*****&lt;/pre&gt;
Now i=5, so first for loop condition will fail.  So next for loop will not be executed any more.

Now, after end of all iteration we will see the complete pattern is printed on the output screen like this.
&lt;pre&gt;*****
*****
*****
*****
*****&lt;/pre&gt;
&lt;strong&gt;C Code:&lt;/strong&gt;
&lt;pre&gt;#include &amp;lt;stdio.h&amp;gt;
int main() {
   int r, row, c ,d;
   printf("Enter rows: ");
   scanf("%d", &amp;amp;row);
  for(  r=0;r&amp;lt;row;r++)
        {
            // printing stars
            for( c=0;c&amp;lt;row;c++)
                printf("*");
           printf("\n");
       } 
   return 0;
}

&lt;/pre&gt;

&lt;pre&gt;Output:

Enter rows : 5
*****
*****
*****
*****
*****&lt;/pre&gt;
&lt;strong&gt;C++ Code:&lt;/strong&gt;
&lt;pre&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
int main()
{
   int row, r , c ,d ;
   cout &amp;lt;&amp;lt; "Enter  rows: ";
   cin &amp;gt;&amp;gt; row;
  for(  r=0;r&amp;lt;row;r++)
        {
            // printing stars
            for( c=0;c&amp;lt;row;c++)
                cout&amp;lt;&amp;lt; "*" ;
          cout &amp;lt;&amp;lt; "\n" ;
       } 
    return 0;   
}
&lt;/pre&gt;

&lt;pre&gt;Output:

Enter rows : 5
*****
*****
*****
*****
*****&lt;/pre&gt;

</description>
      <category>java</category>
      <category>programming</category>
    </item>
    <item>
      <title>How I take the guesswork out of my debugging process</title>
      <author>Kevin Gilpin</author>
      <pubDate>Thu, 08 Jul 2021 11:55:57 +0000</pubDate>
      <link>https://dev.to/appland/how-i-take-the-guesswork-out-of-my-debugging-process-52e5</link>
      <guid>https://dev.to/appland/how-i-take-the-guesswork-out-of-my-debugging-process-52e5</guid>
      <description>&lt;p&gt;There have never been more debuggers available, and it’s a good thing given how intricate most codebases are. Traditional “breakpoint” debuggers work great when you know what the bug is and roughly where the flawed code is located. But when you don’t know much about the bug or about the codebase, you have to get oriented before the debugger becomes a useful tool -- and debuggers aren’t designed to help you get oriented. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-breakpoint-debuggers-fall-short"&gt;
  &lt;/a&gt;
  How “breakpoint” debuggers fall short
&lt;/h2&gt;

&lt;p&gt;“Get oriented” basically means “Read and interpret a lot of code.” And in a large codebase, it’s a real struggle to sift through all that code, and imagine possible causes and scenarios. It’s just too much to try to keep in your head. And breakpoints are a very tedious way to see the data flows, because (a) they only show you the variables and data in one location at a time (b) you can only step forward, not back.&lt;/p&gt;

&lt;p&gt;The problem is compounded when the bug is caused by changes not related to code, like when it’s introduced by a change in an external API or database schema -- because in these cases, inspecting the source diff may not point you in the right direction.&lt;/p&gt;

&lt;p&gt;So, when I’m tackling a tough bug with no obvious cause, I want to see the variables and data at any code location, without having to restart the process. I want to jump around the code to track down my theories and then be able to quickly backtrack. When I’m working with microservices, I want to be able to identify any unintended side-effects related to web services. And I want to see exactly what HTTP client requests and SQL queries are being issued, without having to step through client libraries and object-relational mappers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interactive-code-maps-to-the-rescue"&gt;
  &lt;/a&gt;
  Interactive code maps to the rescue
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://dev.to/products/appmap"&gt;AppMap&lt;/a&gt; provides me with &lt;a href="///docs/guides/debug-code-using-visual-maps.html"&gt;a much more powerful way&lt;/a&gt; to dig through a lot of code at once and look for trouble. I don’t need to know where the bug is in order to get started, and I don’t have to try to keep possible causes and scenarios in my head. I can start from a high-level function (like an HTTP server request) or I can go bottom-up and start with a low-level function or SQL query. Either way, AppMap automatically generates interactive maps of all the factors that might be contributing to a bug and helps me figure out where things are going wrong.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s4kWJb9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49r8sbtqmb5dcet5ql5p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s4kWJb9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49r8sbtqmb5dcet5ql5p.png" alt="An AppMap showing where in the codebase login is required"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are some other things AppMap has helped me with when debugging:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An AppMap that reproduces the bug shows only the code I might need to care about, and none of the code that’s irrelevant to the issue. So right off the bat, I can ignore 90% or more of the code base.&lt;/li&gt;
&lt;li&gt;I can explore code execution in any order I like (forwards, backwards, up, down). I never have to restart the process with new breakpoints, or wait through a tedious startup procedure.&lt;/li&gt;
&lt;li&gt;I can see not just code, but data -- parameter values, HTTP server and client requests, and complete SQL queries -- to get more context around the flaw.&lt;/li&gt;
&lt;li&gt;I have multiple options to reproduce the bug -- either with test cases, recording the app with &lt;a href="https://dev.to/docs/recording-methods"&gt;remote recording&lt;/a&gt;, or writing a test program using the AppMap language hooks.&lt;/li&gt;
&lt;li&gt;An AppMap is just a JSON file. So when a developer, QA person, or security tester finds a problem, they can create an AppMap and &lt;a href="///docs/guides/add-appmaps-to-a-code-issue.html"&gt;attach it to the bug report&lt;/a&gt;. The amount of information and detail in an AppMap is invaluable to the developer who works on the bug, and there’s no confusion about what the bug actually is, or how to reproduce it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-appmap-works"&gt;
  &lt;/a&gt;
  How AppMap works
&lt;/h2&gt;

&lt;p&gt;The first step in debugging with AppMap is to record a test case or example scenario that reproduces the bug. Once you have the AppMap you need, you can use the trace view to determine where the bug is happening in the codebase. &lt;/p&gt;

&lt;p&gt;In many cases, I’ve been able to resolve bugs using just AppMap and no debugger. But when that’s not possible, AppMap kickstarts my debugging process by giving me a solid understanding of where to set my breakpoints.&lt;/p&gt;

&lt;p&gt;Here’s a 7 minute demo of me &lt;a href="https://www.loom.com/embed/c94fabcbb24347d5aafaddd797e34fa6"&gt;debugging the Rails Sample App in VSCode&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;For an extended demo, where I show how to modify and create test cases, auto-generate Swagger and attach my AppMap to a PR, &lt;a href="https://dev.to/appland/video-upgrade-your-rails-workflows-using-visual-code-maps-3a02"&gt;check this out&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#share-your-debugging-thoughts"&gt;
  &lt;/a&gt;
  Share your debugging thoughts!
&lt;/h2&gt;

&lt;p&gt;If you’re curious to learn more about debugging with AppMap, check out &lt;a href="https://appland.com/docs/guides/debug-code-using-visual-maps.html"&gt;the AppMap documentation&lt;/a&gt;. If you have any questions, thoughts or suggestions, please reach out! You can find me on &lt;a href="https://discord.com/invite/N9VUap6"&gt;Discord&lt;/a&gt; or &lt;a href="https://dev.to/kgilpin"&gt;here on dev.to&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>debugging</category>
      <category>productivity</category>
      <category>rails</category>
    </item>
    <item>
      <title>Conditional Statements</title>
      <author>Eduardo Julião</author>
      <pubDate>Thu, 08 Jul 2021 11:31:20 +0000</pubDate>
      <link>https://dev.to/eduardojuliao/conditional-statements-27pp</link>
      <guid>https://dev.to/eduardojuliao/conditional-statements-27pp</guid>
      <description>&lt;p&gt;Sometimes, we need to do things based on information we have.&lt;br&gt;
For these scenarios, we have the conditional statements such as &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;if else&lt;/code&gt; and &lt;code&gt;switch case&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#if-statement"&gt;
  &lt;/a&gt;
  if statement
&lt;/h2&gt;

&lt;p&gt;The if statement enters if the condition returns true.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(*&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;*)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Execute this code block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Do some work&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// More awesome work&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#else-statement"&gt;
  &lt;/a&gt;
  else statement
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;else&lt;/code&gt; statement works only after a &lt;code&gt;if&lt;/code&gt; statement and it's called if the condition in the &lt;code&gt;if&lt;/code&gt; statement above is false&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(*&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;*)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// This code block will not execute.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Execute this code block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will not execute this code block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Execute this code block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A good thing to notice, is that the &lt;code&gt;else&lt;/code&gt; statement will hit every time the &lt;code&gt;if&lt;/code&gt; statement is false.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#if-else"&gt;
  &lt;/a&gt;
  if else
&lt;/h2&gt;

&lt;p&gt;If you need to check for different values, there's the &lt;code&gt;if else&lt;/code&gt; statement.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(*&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;*)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will not execute this code block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(*&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;*)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Execute this code block&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will not execute this code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will execute this code&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will not execute this code since the condition above was met&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#ampamp-and-operator"&gt;
  &lt;/a&gt;
  &amp;amp;&amp;amp; and || operator
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#ampamp"&gt;
  &lt;/a&gt;
  &amp;amp;&amp;amp;
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; means &lt;code&gt;and&lt;/code&gt; in programming language, which indicates that both checks must returns true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will execute since x value is 10 and y value is 5&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will not execute because the value of y is not 4&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  ||
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;||&lt;/code&gt; means &lt;code&gt;or&lt;/code&gt; in programming language, which indicates that at least one of the checks must returns true.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will execute since x value is 10 or y value is 5&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="p"&gt;||&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Will execute because the value of x is 10&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#switch-case"&gt;
  &lt;/a&gt;
  switch case
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;switch case&lt;/code&gt; statement executes a single section from a list of candidates based on a pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(*&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;look&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;*)&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt;&lt;span class="n"&gt;scenario&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;*:&lt;/span&gt;
    &lt;span class="c1"&gt;// code block&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="c1"&gt;// Will be called every time if no candidates are found.&lt;/span&gt;
   &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;useThis&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;useThis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// This will not be called because we're looking for 2&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// This code block will be executed.&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// This code will be called if no candidate is found&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also use the same code block for different values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;useThis&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;

&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;useThis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="c1"&gt;// Will not execute.&lt;/span&gt;
     &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
     &lt;span class="c1"&gt;// Will execute if `useThis` values is 2 or 3&lt;/span&gt;
   &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>csharp</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Understand Hoisting in JavaScript once and for all</title>
      <author>Amarjit Singh</author>
      <pubDate>Thu, 08 Jul 2021 11:10:29 +0000</pubDate>
      <link>https://dev.to/amarjits/understand-hoisting-in-javascript-once-and-for-all-31o6</link>
      <guid>https://dev.to/amarjits/understand-hoisting-in-javascript-once-and-for-all-31o6</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-hoisting"&gt;
  &lt;/a&gt;
  What is Hoisting?
&lt;/h1&gt;

&lt;p&gt;Hoisting is a JavaScript behavior in which a function or variable can be used before declaring it. JavaScript moves the function and variable declarations to the top of their scope just before executing it, Due to which we can access them even before its declarations.&lt;br&gt;
Let's understand it by going through some examples.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#variable-declarations"&gt;
  &lt;/a&gt;
  Variable Declarations:
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#when-using-raw-var-endraw-keyword-"&gt;
  &lt;/a&gt;
  When using &lt;code&gt;var&lt;/code&gt; keyword :
&lt;/h3&gt;

&lt;p&gt;Below is an example where we have declared a &lt;code&gt;counter&lt;/code&gt; variable and set its value to 1. However we are trying to &lt;code&gt;console.log&lt;/code&gt; it before its declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On executing we get the counter value as &lt;code&gt;undefined&lt;/code&gt;. This is because JavaScript only hoists &lt;code&gt;declarations&lt;/code&gt;. &lt;br&gt;
JavaScript hoists the declaration of counter and initializes its value as &lt;code&gt;undefined&lt;/code&gt;. Therefore, the code looks something like this in the execution phase.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#when-using-raw-let-endraw-or-raw-const-endraw-keyword-"&gt;
  &lt;/a&gt;
  When using &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; keyword :
&lt;/h3&gt;

&lt;p&gt;When using &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt; keywords, JavaScript hoists the declarations to the top but it will not be &lt;code&gt;initialized&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Therefore when we try to console.log &lt;code&gt;counter&lt;/code&gt; before initializing it, we will get ReferenceError&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ReferenceError: Cannot access 'counter' before initialization
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same thing happens with the &lt;code&gt;const&lt;/code&gt; keyword.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#function-declarations"&gt;
  &lt;/a&gt;
  Function Declarations:
&lt;/h2&gt;

&lt;p&gt;Like Variables, JavaScript also hoists function declarations. It means that it moves the function declarations to the top of the script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the above example won't result in error even though we are calling the &lt;code&gt;add()&lt;/code&gt; function before defining it.&lt;br&gt;
The code looks something like this during execution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#when-using-an-arrow-function-or-anonymous-function"&gt;
  &lt;/a&gt;
  When using an Arrow Function or Anonymous Function:
&lt;/h3&gt;

&lt;p&gt;In the below example we change &lt;code&gt;add&lt;/code&gt; from a regular function to an anonymous function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when JavaScript hoists the declaration of &lt;code&gt;add&lt;/code&gt; variable it initializes it as &lt;code&gt;undefined&lt;/code&gt;. Therefore, we get an error like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TypeError: add is not a function
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, You might be wondering what will happen if we use &lt;code&gt;let&lt;/code&gt; instead of &lt;code&gt;var&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will get an error again but this time the error message will be different as JavaScript will hoist the declaration of &lt;code&gt;add&lt;/code&gt; but it will not be initialized.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Uncaught ReferenceError: greet is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same thing will happen if we use an Arrow Function because Arrow functions are nothing but syntactic sugar for defining function expressions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-tips-to-avoid-hoisting"&gt;
  &lt;/a&gt;
  Some Tips to avoid Hoisting:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Declaring your variables at the top is always a good rule.&lt;/li&gt;
&lt;li&gt;You can also use Strict Mode.&lt;/li&gt;
&lt;li&gt;In the case of variables, it is better to use &lt;code&gt;let&lt;/code&gt; than &lt;code&gt;var&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hoisting in JavaScript is an important concept to understand as it might lead to bugs and unexpected behavior in your code.&lt;br&gt;
That's it, I hope you learnt a lot from this blog. If you enjoyed this post, I’d be very grateful if you’d share it. Comment below if you have any doubts or questions.&lt;/p&gt;

&lt;p&gt;Thank you for Reading!🙂&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>A Brief Introduction To Supabase With JavaScript</title>
      <author>Rahul Shaw</author>
      <pubDate>Thu, 08 Jul 2021 10:38:46 +0000</pubDate>
      <link>https://dev.to/rahulshawdev/a-brief-introduction-to-supabase-with-javascript-3l19</link>
      <guid>https://dev.to/rahulshawdev/a-brief-introduction-to-supabase-with-javascript-3l19</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  INTRODUCTION
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt; is &lt;strong&gt;&lt;em&gt;The Open Source Firebase Alternative&lt;/em&gt;&lt;/strong&gt; that makes it easy to create a backend for your project in less than 2 minutes. So today, we will be talking about how to implement supabase auth, and database in your project. We are going to use Vite as our frontend build tool. If you don't know anything about Vite I'll suggest you read my blog about &lt;a href="https://dev.to/rahulshawdev/why-you-should-use-vite-2dh9"&gt;Vite&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-supabase"&gt;
  &lt;/a&gt;
  What is Supabase
&lt;/h4&gt;

&lt;p&gt;Supabase is an open-source Firebase alternative. Its features are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Listen to database changes.&lt;/li&gt;
&lt;li&gt;Query your tables, including filtering, pagination, and deeply nested relationships (like GraphQL).&lt;/li&gt;
&lt;li&gt;Create, update, and delete rows.&lt;/li&gt;
&lt;li&gt;Manage your users and their permissions.&lt;/li&gt;
&lt;li&gt;Interact with your database using a simple UI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm not saying that it is better than firebase or it is an exact copy of firebase. It both has difference like firebase uses NoSQL as its database but supabase uses PostgreSQL. PostgreSQL is an object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance. Enough about Supabase let's talk about how to setup up and use it in your project.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setup-vite-amp-tailwind"&gt;
  &lt;/a&gt;
  Setup Vite &amp;amp; Tailwind
&lt;/h4&gt;

&lt;p&gt;We are going to use Vite for building our app and &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt; for styling our mini project because I believe that making a project with Supabase will make you understand better than talking about it. If you are using VS Code as your code editor then I will suggest you install the Tailwind CSS Intellisense extension from VS Code marketplace.&lt;/p&gt;

&lt;p&gt;Copy the below command and paste it into your terminal for creating a Vite app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init @vitejs/app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Give the name of your project and choose vanilla js as it is a mini project. And then change your directory to that folder and install all the modules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;your project name&lt;span class="k"&gt;*&lt;/span&gt;
npm &lt;span class="nb"&gt;install
&lt;/span&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, install Tailwind CSS by following the steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; tailwindcss@latest postcss@latest autoprefixer@latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After installing Tailwind, paste the following command to generate &lt;code&gt;tailwind.config.js&lt;/code&gt; &amp;amp; &lt;code&gt;postcss.config.js&lt;/code&gt; files automatically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx tailwindcss init &lt;span class="nt"&gt;-p&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add the following commands in &lt;code&gt;style.css&lt;/code&gt; file. Tailwind will start working perfectly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@tailwind&lt;/span&gt; &lt;span class="n"&gt;utilities&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm not going to talk much about Tailwind as it is a Supabase blog. Maybe in the future, I may create a blog talking about Tailwind.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#setup-supabase-database"&gt;
  &lt;/a&gt;
  Setup Supabase Database
&lt;/h4&gt;

&lt;p&gt;In order to set up Supabase Database in your project visit &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt; official page and sign in. Then click on Start Project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vY2r4X-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625670278178/xRVGuUyii.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vY2r4X-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625670278178/xRVGuUyii.png" alt="create project.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking on Start Project you will redirect to Supabase Dashboard where you can manage your projects. Click on New Project to start a new project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--caBjViod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625670501739/DZkbUAw8o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--caBjViod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625670501739/DZkbUAw8o.png" alt="new project.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that give your project a name, and a password. Then, click on Create New Project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0QeGtDBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625670745624/s460pkPeO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0QeGtDBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625670745624/s460pkPeO.png" alt="details of the project.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, you will be redirected to a page where it will be showing that the database and API are building so, give it some time. After that, you will be redirected to your project's dashboard where you can use the database, auth, and many more features. Then click on Create a new table to start working with the database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A5_M1Fpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625671217202/p4KdUzIRy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A5_M1Fpw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625671217202/p4KdUzIRy.png" alt="create new table.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that, fill up the details of your table as I have done below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C3CXclSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625674965615/M2CsO4Hub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C3CXclSn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625674965615/M2CsO4Hub.png" alt="details of the table changes.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then Click on New Column and there you can make columns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Co6d86YD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625675398629/wmyS_Am7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Co6d86YD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625675398629/wmyS_Am7k.png" alt="add new column.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on Insert Row and then a sidebar will appear to give the details of your blog. In the below image I have filled in with some example blogs for learning purposes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EIayFS8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625675119815/2rEhHLYvO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EIayFS8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625675119815/2rEhHLYvO.png" alt="insert row.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sDt9nA9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625675037674/KPjy5vhbT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sDt9nA9---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625675037674/KPjy5vhbT.png" alt="example table changes.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, in order to extract this data in your javascript file, we need to install only one extra dependency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; @supabase/supabase-js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, create the &lt;code&gt;.env&lt;/code&gt; file in your project's directory and copy your &lt;code&gt;anon key&lt;/code&gt; and &lt;code&gt;supabase URL&lt;/code&gt; and paste it in your &lt;code&gt;.env&lt;/code&gt; file as I have done below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tW-7-6Lb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625672061368/qNibtpZBc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tW-7-6Lb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625672061368/qNibtpZBc.png" alt="api keys.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;VITE_SUPABASE_URL=YOUR_SUPABASE_URL
VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that create a &lt;code&gt;supabase.js&lt;/code&gt; file in your project's directory and paste the following commands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@supabase/supabase-js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supabaseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VITE_SUPABASE_URL&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supabaseAnonKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VITE_SUPABASE_ANON_KEY&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;supabaseUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;supabaseAnonKey&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, Supabase has been successfully installed in your local machine. Next, we are going to make a mini-project with the database.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mini-blog-project"&gt;
  &lt;/a&gt;
  Mini Blog Project
&lt;/h4&gt;

&lt;p&gt;In this Mini Blog project, we will be extracting data from Supabase and adding it to our website. Also, we will be seeing how you can data into your database using the form.&lt;/p&gt;

&lt;p&gt;Copy the &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;main.js&lt;/code&gt; files and run them on your machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/svg+xml"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"favicon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Vite App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"blogs"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-6"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"border-2 border-black mb-2"&lt;/span&gt;
          &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
          &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Title of the blog"&lt;/span&gt;
          &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"border-2 border-black mb-2"&lt;/span&gt;
          &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Description of the blog"&lt;/span&gt;
          &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue-400 p-1 text-white"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;const { data, error } = await supabase.from("blogs").select();&lt;/code&gt; gets all the data from supabase and &lt;code&gt;const { data, error } = await supabase.from("blogs").insert([{ title: title.value,content: content.value },]);&lt;/code&gt; insert the data into our table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./style.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./supabase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blogsContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blogs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blogs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// gets the data from supabase&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;`
    &amp;lt;div data-id="&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;
      &amp;lt;h1 class="text-2xl"&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/h1&amp;gt;
      &amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    `&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;blogsContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blogs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// insert data into supabase&lt;/span&gt;

  &lt;span class="nx"&gt;useData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Code is nothing too fancy and very beginner-friendly. So you can see how easy it is to use Supabase Database. Now, we are going to create a mini authentication project with supabase.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mini-auth-project"&gt;
  &lt;/a&gt;
  Mini Auth Project
&lt;/h4&gt;

&lt;p&gt;In this Mini Auth project, we will be signing up users. Before jumping on the code we need to do a little setting. So, Supabase automatically allows email confirmations. For Example: If you sign up with supabase, then supabase will send you a confirmation message on your email. But we don't want that in this project so to disable it, go to your supabase project's database and click on the authentication icon and then click on Settings, you can see that there is an option for disabling email confirmations so simply click on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uZoF7tCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625737330731/sDas6KwGQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uZoF7tCF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625737330731/sDas6KwGQ.png" alt="disable email confirmation.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, just copy the &lt;code&gt;index.html&lt;/code&gt; &amp;amp; &lt;code&gt;main.js&lt;/code&gt; code and run it on your machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/svg+xml"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"favicon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Vite App&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"p-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-3xl text-center mb-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Sign Up&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"border-2 border-black mb-2 p-1"&lt;/span&gt;
          &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
          &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Email Address"&lt;/span&gt;
          &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt;
          &lt;span class="na"&gt;autocomplete=&lt;/span&gt;&lt;span class="s"&gt;"off"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
          &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;
          &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Password"&lt;/span&gt;
          &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;
          &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"border-2 border-black mb-2 p-1"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue-400 p-1 text-white"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;const { user, session, error } = await supabase.auth.signUp({ email: email.value, password: password.value });&lt;/code&gt; signUp users. &lt;strong&gt;&lt;em&gt;NOTE: IF YOU ARE NOT DISABLING EMAIL CONFIRMATION THEN THE SESSION VALUE WILL BE NULL&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./style.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./supabase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;supabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;signUp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After submitting the form, you can see in your project's auth dashboard that the user has been added.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QULkssgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625737761583/8Bp_rA7VW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QULkssgK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625737761583/8Bp_rA7VW.png" alt="signup.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  CONCLUSION
&lt;/h3&gt;

&lt;p&gt;So, I'm going to end this pretty lengthy blog by saying that give Supabase a try, I promise you'll not regret it. And also learn many more things like storage, function, etc from &lt;a href="https://supabase.io/"&gt;Supabase's&lt;/a&gt; documentation because that's where you will learn things more than any blog or youtube video will teach you. So that's it for today if you have any problems or if I made any mistake, feel free to comment it down. And also comment on what topic should I write on next.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
