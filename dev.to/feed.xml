<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>üë®‚Äçüî¨ Why The DOM Causes Negative Enthalpy! - Learning Frontend Deeply - Part 2</title>
      <author>Mir Ali Mobasheri</author>
      <pubDate>Sat, 24 Apr 2021 20:23:11 +0000</pubDate>
      <link>https://dev.to/alimobasheri/why-the-dom-causes-negative-enthalpy-learning-frontend-deeply-part-2-1k8n</link>
      <guid>https://dev.to/alimobasheri/why-the-dom-causes-negative-enthalpy-learning-frontend-deeply-part-2-1k8n</guid>
      <description>&lt;h1&gt;
  &lt;a href="#why-should-you-care-about-the-dom-and-the-negative-enthalpy"&gt;
  &lt;/a&gt;
  Why Should You Care About The DOM And The Negative Enthalpy?
&lt;/h1&gt;

&lt;p&gt;In the first part of this series, we learned that &lt;code&gt;HTML&lt;/code&gt; is a &lt;code&gt;Markup Language&lt;/code&gt; destined to create documents. We now know that this document is much like a paper one. We can use different elements and layout systems in HTML to shape our ideal document layout.&lt;br&gt;
But still, there's a question. If it's only about documents, then humans have been able to create them thousands of years ago. Documents can be carved on stone, painted on papyruses, and written on paper.&lt;br&gt;
So while &lt;code&gt;HTTP&lt;/code&gt; facilitates the document's sharing around the world, there's one important thing that a webpage needs to be capable of to ultimately become superior to a simple document. &lt;/p&gt;

&lt;p&gt;And it is the ability to update data in real-time, in response to user interactions and different events. This feature makes documents interactive and pushes the limit of the traditional documents which could never be edited or updated. And especially this is one of the main skills every frontend developer should acquire.&lt;/p&gt;

&lt;p&gt;Throughout this article, we are going to learn about the &lt;code&gt;Document Object Model&lt;/code&gt; abbreviated as the &lt;code&gt;DOM&lt;/code&gt;. In the last part, we learned about the &lt;strong&gt;Document&lt;/strong&gt;, now we'll try to figure out what an &lt;strong&gt;Object&lt;/strong&gt; is and how the &lt;code&gt;DOM&lt;/code&gt; implements the &lt;strong&gt;Model&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But we're not going down a straightforward path. We're going to learn about some basic theories of computer programming. This includes variables, objects, collections, compilers and etc. This is because I want to show you how in the end all of these theories shape the internal functionalities of a web frontend application.&lt;br&gt;
This is somewhat like how we're introduced to Christopher Nolan's Tenet. It's going to show you some theories and in the end, you are going to face it all in real action. Then let's dive deeper!&lt;/p&gt;

&lt;p&gt;First questions first...&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-an-object"&gt;
  &lt;/a&gt;
  üèçÔ∏è What Is An Object?
&lt;/h2&gt;

&lt;p&gt;While a motorcycle has two wheels, a car holds four. Both are &lt;strong&gt;objects&lt;/strong&gt;. Each with its traits. These traits could vary in numerous ways.&lt;/p&gt;

&lt;p&gt;The comparison we made identifies the difference in the count of common property in two distinct objects.&lt;br&gt;
A contrasting case is the observation of a hen and a motorcycle. Both can move. And while the hen utilizes its legs for this purpose, the other uses its wheels. The movement &lt;strong&gt;action&lt;/strong&gt; is possible for both of them, but they do so using quite different &lt;strong&gt;tools&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ùó In terms of programming, we can express the actions as &lt;strong&gt;Methods&lt;/strong&gt; and the tools as &lt;strong&gt;Properties&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thus, the main element in Object Definition is that &lt;strong&gt;a set of traits shape the object&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By knowing what an object definition is, let's move on to how a document is defined by it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-an-object-model"&gt;
  &lt;/a&gt;
  üå¥ What is an object model?
&lt;/h2&gt;

&lt;p&gt;C is a programming language. So is C++. Both are known as semi-low-level languages. This means you'll need to write thousands of lines of code to make a simple program work. But in exchange, their programs run at higher speeds. Because by writing code in a low-level language the system needs less translation of your code to understand what you're trying to assemble.&lt;/p&gt;

&lt;p&gt;But there is a major difference between the two languages we talked about earlier. C++ is an object-oriented version of C. What does this mean?&lt;br&gt;
This means that we can define objects in C++ programs which possess their own traits and actions. &lt;/p&gt;

&lt;p&gt;Let's define object orientation in smaller chunks. That'll make it easier for you to grasp the idea if you don't already know about it. &lt;/p&gt;

&lt;p&gt;First, let's begin with a simple thing; Value. That's what every program is about!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#hey-pc-take-this-2"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£ Hey PC, Take This 2!
&lt;/h3&gt;

&lt;p&gt;In a program, every value is stored in a part of the memory. This value is identified by a reference. A reference is a specific number that addresses a location in the memory that holds a specific value.&lt;/p&gt;

&lt;p&gt;This referencing can be suitable for performing actions like computing. For example, if you want to calculate the sum of 2 and 3, you have to store these values in the system and then give the system the program by which it should add these two numbers. &lt;br&gt;
A reference to the value 2 could be a number like 2452123 and a reference to the value 3 could be another number like 7892392. &lt;/p&gt;

&lt;p&gt;The system can manage these references easily. But it would be hard for a human to work with them. We'll easily forget which reference points to which value. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#call-my-2-ey"&gt;
  &lt;/a&gt;
  ü§ô Call My 2, Ey!
&lt;/h3&gt;

&lt;p&gt;A variable is simply a name we give the reference to a value. In the last paragraph, we said that in an exemplary system a reference to number 2 is 2452123. &lt;br&gt;
Now, what if we told the system that we want this reference to be called &lt;code&gt;a&lt;/code&gt;; so that every time we had to point to this number we simply give its name and the system retrieves the value for us?&lt;/p&gt;

&lt;p&gt;
  How variables resemble humans' memory. (Click to learn more.)
  &lt;p&gt;This behavior is close to how we humans store different data in our minds. For example, when we want to refer to a long fruit with a yellow cover, we say banana. The value was retrieved!&lt;/p&gt;

&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hey-pc-repeat-after-me-ey-equals-2"&gt;
  &lt;/a&gt;
  üéôÔ∏è Hey PC, Repeat After Me: Ey equals 2!
&lt;/h3&gt;

&lt;p&gt;Fortunately, most of the programming languages manage this for us. &lt;br&gt;
Here's how we define a variable in JavaScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code block, we've declared two values, stored them in memory, and given them a custom name for their references. Thus if we wanted to add these numbers we simply tell the system: &lt;code&gt;add a and b&lt;/code&gt;.&lt;br&gt;
In JavaScript it's written like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;
  What happened in this code block?(click to learn more)
  &lt;p&gt;Here, in a single line, we've performed three actions. First, we've retrieved the two values 2 and 3 from the memory, by calling their names. Then, we've added these two numbers which result in a new value, 5. Next, the new value is stored in the memory and its reference is given a name; &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;

&lt;/p&gt;

&lt;p&gt;Well, we gave the references a name. But what does it have to do with Object-Orientation?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-thing-or-the-object"&gt;
  &lt;/a&gt;
  ‚õèÔ∏è The Thing, or The Object?
&lt;/h3&gt;

&lt;p&gt;So far, we've only defined simple variables. These may be the basics of programming, but they are insufficient for a more advanced program.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Metal is one of the most useful materials in construction but by giving a fair look at the world around you, it's easy to conclude that buildings aren't just made of metals. They're assembled of glasses, metals, concrete, etc. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The same observance applies to a program. It's never made of single values. But rather a collection of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#person-1-person-2-person-3"&gt;
  &lt;/a&gt;
  üë®‚Äçüë©‚Äçüëß‚Äçüë¶ [Person 1, Person 2, Person 3]
&lt;/h3&gt;

&lt;p&gt;You know people by their names, phone numbers, looks, jobs, and much more. Perhaps you know a lot of people. Hundreds of names could be familiar to you. &lt;/p&gt;

&lt;p&gt;Indeed you have got a collection of information in your memory. A collection of names, or a collection of different brands. All in all, collections are the main way of information storage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What makes collections suitable for this purpose is their flexibility and simplicity in integration. You can easily search, sort, filter, or manipulate a collection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#data-structures"&gt;
  &lt;/a&gt;
  üìä Data Structures
&lt;/h3&gt;

&lt;p&gt;Probably, algorithms are familiar to you. If not, you can think of the following text as an algorithm:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Go to the kitchen. Search the cabinets for the red pepper can. If found, swallow the whole can's content. If not, go to the freezer. Take out all the ices in it and swallow them one by one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can see, an algorithm is a set of step-to-step commands. Computer programs are instructed using these algorithms.&lt;/p&gt;

&lt;p&gt;Let's think about the sum program which we previously wrote using the variables. Its algorithm is straightforward. Take the first number and add it to the second one. Store the result in a new memory location.&lt;/p&gt;

&lt;p&gt;But is there a collection too?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrays"&gt;
  &lt;/a&gt;
  üî¢ Arrays
&lt;/h3&gt;

&lt;p&gt;Sometimes you need to store different values as a group. Like a list of different versions of a sentence. You can store each value in a separate variable but that's not the ideal way. Because for instance, if you are required to iterate over the list and find a specific version, you'll have to check each value manually to find out whether it's the wanted value or not.&lt;/p&gt;

&lt;p&gt;Arrays come to help.&lt;br&gt;
An array is indeed a list of memory addresses. Of course, these memory addresses refer to values. But its difference with a normal reference is that it can be indexed. &lt;/p&gt;

&lt;p&gt;
  What is indexing? And how does an array work? (click to learn more)
  &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Simply it's like when you are looking at a list of different versions of a sentence and you ask your colleague about which version he likes the most and he responds: 'The &lt;strong&gt;third&lt;/strong&gt; one!'&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;So, the keyword here is &lt;code&gt;third&lt;/code&gt;.&lt;br&gt;
Now if we wanted to represent the version history list in a JavaScript array, it would look like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;versions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A sentence.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Beautifully written sentence.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Da Funny Sendenze!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;To access the second sentence and store it in a new variable the following line of JavaScript suffices:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;theDesiredSentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;versions&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;In JavaScript arrays are indexed from 0 which means that the first element's index is 0 and the nth element's index is &lt;code&gt;n-1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;/p&gt;
&lt;p&gt;The array is a very simple collection. But remember when we talked about the calculation program. It didn't consist of any arrays. Perhaps we could use an array of numbers and write a program to calculate the sum of all of the numbers in the array. But that's not what we're trying to do right now.&lt;/p&gt;

&lt;p&gt;The question was whether, in that simple program, a collection existed or not. Now, none of the values were collections, but in reality, the whole program is a collection.&lt;/p&gt;

&lt;p&gt;Why is that?üßê&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#program-compilation"&gt;
  &lt;/a&gt;
  üîÅ Program Compilation
&lt;/h3&gt;

&lt;p&gt;Every program written in a language has to be compiled into machine language to act as fast as possible. The machine language is the most direct one, but having the lowest level among the programming languages, it's not possible for programmers to easily interact with it.&lt;br&gt;
The nerds' solution to this problem has been the development of higher-level programming languages. Yes, even C++ has a higher level in comparison to that of Assembly.&lt;/p&gt;

&lt;p&gt;Still, there's a matter to reflect upon. If communication with machines is difficult then how comes the compilers do it and turn huge chunks of code into machine-readable ones?&lt;/p&gt;

&lt;p&gt;To understand the mechanism you can think of yourself trying to speak a foreign language, how will you manage it? &lt;br&gt;
First, you will create mental models.&lt;/p&gt;

&lt;p&gt;What is the mental model? It's the concept or the meaning of what you are trying to translate.&lt;/p&gt;

&lt;p&gt;How is a mental model designed? Suppose you want to tell a foreigner that his face is burning. What is the concept behind this sentence? A face that belongs to that person is melting due to contact with heat? &lt;br&gt;
But what is the context? Perhaps you and the other person are trapped inside a burning house and you are screaming at him to warn him that his face is burning. Or maybe you are pushing his face into boiling water and joyously shouting: "Ha! Ha! Ha! Your face is burning!"&lt;/p&gt;

&lt;p&gt;Do you see? Different contexts. Different tones. Different sentence structures.&lt;/p&gt;

&lt;p&gt;Now how are these related to a compiler's task? Well first of all it gathers every value in your program. These values are like the meanings of every single word. Next, it tries to shape a model of your values. This model is shaped from the different scopes inside a program code. &lt;br&gt;
Scopes are different blocks of code inside a program. These blocks contain standalone logics, which can perform independently of other parts of the code. Sure most of the time the blocks will use variables defined in other scopes or passed as arguments.&lt;/p&gt;

&lt;p&gt;The compiler will look for the various blocks present in a code to shape its model. These blocks will help in maintaining the levels of the model. Previously we learned about arrays which are the most common forms of collections, but the ones we spoke about were only one-dimensional. However, in cases in which we need to specify a collection of groups of values, we can simply nest arrays inside each other.&lt;/p&gt;

&lt;p&gt;In JavaScript a nested array might look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nestedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code example, the &lt;code&gt;nestedArray&lt;/code&gt; variable could be a model of various values organized in different blocks. Like &lt;code&gt;block 0&lt;/code&gt; and &lt;code&gt;block 1&lt;/code&gt; and so on. This way the compiler will know what block each value belongs to. So if somewhere in your code you try to call a value that isn't available in the corresponding block, the compiler will throw an error.&lt;/p&gt;

&lt;p&gt;A nested array might be a good example to illustrate a collection model, but not perfect for such a case as a compiler's model. Because arrays are just a group of values in a specific order.&lt;/p&gt;

&lt;p&gt;Thus, the programmers have designed various types of data structures that can be used to implement collections in a useful way. Examples of these data structures include linked lists, queues, stacks, graphs, and hash tables.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-data-structure-does-a-compiler-use"&gt;
  &lt;/a&gt;
  What Data Structure Does A Compiler Use?
&lt;/h3&gt;

&lt;p&gt;Compilers mainly use &lt;code&gt;Symbol Tables&lt;/code&gt; as their primary data structure. &lt;br&gt;
A &lt;code&gt;Symbol Table&lt;/code&gt; is a symbolized collection of data. Don't panic if this doesn't make sense to you, we're going to learn it in more detail.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-does-symbolized-mean"&gt;
  &lt;/a&gt;
  ‚öõÔ∏è What does symbolized mean?
&lt;/h4&gt;

&lt;p&gt;Remember when we talked about variables? &lt;br&gt;
We stored a value in the memory and then gave it a name. So each variable in a program is made of a group of information that includes: &lt;code&gt;memory reference&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, and &lt;code&gt;attribute&lt;/code&gt;.&lt;br&gt;
Using these properties, the compiler can store what information it requires about a particular variable in a single symbol and then implement these symbols into a bigger model which represents the code blocks and scopes, using a data structure.&lt;/p&gt;

&lt;p&gt;A representation of &lt;code&gt;Symbol Tables&lt;/code&gt; could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;symbol&lt;/span&gt; &lt;span class="err"&gt;name,&lt;/span&gt; &lt;span class="err"&gt;type,&lt;/span&gt; &lt;span class="err"&gt;attribute&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#details-what-are-the-type-and-the-attribute-click-to-learn-more"&gt;
  &lt;/a&gt;
  
  What are the type and the attribute? (click to learn more)
  &lt;ul&gt;
&lt;li&gt;JavaScript is a dynamically typed language, which means that you don't have to strictly define a variable's type. But under the hood, each value owns a type. There are several built-in types like objects, strings, numbers, etc.&lt;/li&gt;
&lt;li&gt;These types declare the intrinsic behavior of the variables. So in a &lt;code&gt;Symbol Table&lt;/code&gt;, each value holds a type declaration.
The attribute is another unpopular term in JS. In languages like Java, keywords such as &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;private&lt;/code&gt; exist that can be used in a variable declaration to indicate in what context the variable can be used. &lt;/li&gt;
&lt;li&gt;The &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are the two attributes that can be used in JS. For instance, using the &lt;code&gt;const&lt;/code&gt; attribute clarifies for the compiler that the variable can't be assigned a new value after its initial declaration.&lt;/li&gt;
&lt;/ul&gt;




&lt;/h4&gt;
&lt;p&gt;What data structure a compiler uses for shaping the code blocks, can vary between &lt;code&gt;Linear Lists&lt;/code&gt;, &lt;code&gt;Binary Search Tree&lt;/code&gt;, and &lt;code&gt;Hash Tables&lt;/code&gt; based on the compiler's architect.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#is-a-data-structure-enough-for-a-compiler-to-get-its-job-done"&gt;
  &lt;/a&gt;
  üíº Is a data structure enough for a compiler to get its job done?
&lt;/h4&gt;

&lt;p&gt;The short answer is no. &lt;br&gt;
The long answer is that a data structure is only a model that makes data available to you. It exposes no methods to work with the data. It's barely a skeleton of data. &lt;br&gt;
A skeleton doesn't move by itself. It can take no action. A body needs muscles to be able to handle its skeleton for good use.&lt;br&gt;
Hence the compiler uses its own built-in methods to work with the data that is exposed to it through the symbols.&lt;/p&gt;

&lt;p&gt;
  How is this data structure is similar to a database? (click to learn more)
  &lt;ul&gt;
&lt;li&gt;Each symbol is an &lt;code&gt;entry&lt;/code&gt; and each code block is called a &lt;code&gt;block&lt;/code&gt;. You could think of a symbol table as a database. Indeed I can relate to this personally since I'm currently working on the development of a web-based database management application for the place I work at.&lt;/li&gt;
&lt;li&gt;Each cell in a database table is like an &lt;code&gt;entry&lt;/code&gt;. A cell can be a text, a number, a date, and many more fields. Each of these fields has its own type and attributes.
Each table can also be divided into different phases with each phase having its own rows of entries.&lt;/li&gt;
&lt;li&gt;But a database management application isn't made up of just entries and phases. It's also about the ordering of data, its aggregation, editing, inserting, removing, validating and etc.&lt;/li&gt;
&lt;li&gt;Each of these functionalities can also be generalized to how a compiler commonly behaves with a symbol table.
&lt;/li&gt;
&lt;/ul&gt;



&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#what-now"&gt;
  &lt;/a&gt;
  ‚ÅâÔ∏è What now?
&lt;/h3&gt;

&lt;p&gt;This was a long read, but not a useless one. We have learned about the program's compilation progress, and we've come to acknowledge what a data structure is and how an object is defined.&lt;br&gt;
Now, it's time to get back on track and learn how a Document's Object Model is implemented.&lt;/p&gt;

&lt;p&gt;But first, let's take a few seconds and think about the answer to a fundamental question of the frontend area.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#is-html-a-data-structure-or-is-it-an-object"&gt;
  &lt;/a&gt;
  ü§∑‚Äç‚ôÇÔ∏è Is HTML a Data Structure or is it an Object?
&lt;/h4&gt;

&lt;p&gt;It's tempting to say that HTML is an &lt;code&gt;object&lt;/code&gt; since it possesses traits like a &lt;code&gt;body&lt;/code&gt; or a &lt;code&gt;head&lt;/code&gt; or a &lt;code&gt;title&lt;/code&gt;. These may sound like traits being defined for an object.&lt;br&gt;
But they're not and HTML is definitely not an &lt;code&gt;Object&lt;/code&gt;. It's a &lt;code&gt;Data Structure&lt;/code&gt;. All that HTML does is expose data. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Indeed you the developer who writes the HTML are exposing this data to the browser. Using the document structure which we talked about in the last part, you were doing the compiler's job. &lt;br&gt;
Oh, yes! Perhaps you have written several HTML documents, or maybe you're an experienced one, and using the HTML markup has been a daily job for you. But you have never thought that you were indeed writing a pre-compile file. That you were doing the programming process with a negative enthalpy!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds crazy and sounds like what Christopher Nolan introduced in his 2020 movie; Tenet.&lt;/p&gt;

&lt;p&gt;You have come a long way to reach this point, and perhaps you are tired or you think this article will be useless. Yeah, I know! This idea is turning around your head that I've been mocking you all the time. That compilers and data structures and the Object Orientation have got nothing to do with a simple HTML.&lt;br&gt;
But be patient my dear reader. From now things only get better. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PkTC8oAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv5tsk8fdz7dc6vxh75w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PkTC8oAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sv5tsk8fdz7dc6vxh75w.gif" alt="A fight scene in Tenet"&gt;&lt;/a&gt;&lt;br&gt;
After all, what do you expect from a Nolanish idea?üòé&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SPOILER FREE&lt;/strong&gt;: I'm not going to spoil anything from the movie's plot. The negative enthalpy theory is something you learn very early in the movie. So enjoy the article!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#but-how-is-the-negative-enthalpy-happening"&gt;
  &lt;/a&gt;
  üîÄ But how is the negative enthalpy happening?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;A chemical reaction with a negative enthalpy is one that loses energy throughout the process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This might sound too theoric but we can interpret it in our subject as such:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When we code a program and the compiler turns it into an executable file, we're keeping energy by doing less work by ourselves. The compiler is the one that handles the hassle of translating our code to machine-readable programs. Now, when we write HTML, we're losing energy. Because we're doing a part of the compiler's job which is creating a &lt;code&gt;data structure&lt;/code&gt;. We're doing more job to model the fine Document Structure for our purpose.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But the &lt;code&gt;Data Structure&lt;/code&gt; isn't the only thing that the compiler creates. There was actually a need for different methods to be able to work with this data. &lt;br&gt;
This is where the &lt;code&gt;Document Object Model&lt;/code&gt; comes into play. And to no surprise, this time we're going to work with &lt;code&gt;objects&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-are-my-methods"&gt;
  &lt;/a&gt;
  üóúÔ∏è Where are my methods?
&lt;/h3&gt;

&lt;p&gt;So, you give the browser all the data necessary in your document, organized into nested structures, according to your desired layout, and expect the magic to happen. &lt;br&gt;
But that's not what every application is about. Is it? Nowadays web applications are more than just scientific documents. They're about &lt;code&gt;Interactive Interfaces&lt;/code&gt; which respond to user interaction. &lt;/p&gt;

&lt;p&gt;Documents get updated, changed, inspected, animated, styled, and manipulated in real-time. If you think of the &lt;code&gt;HTML Document&lt;/code&gt; as the &lt;code&gt;Symbol Table&lt;/code&gt; then by using the &lt;code&gt;DOM Methods&lt;/code&gt; to work with this data structure and to change it, you are doing the compiler's job. &lt;br&gt;
Because you are managing the available data structures and methods to output your desired program. &lt;/p&gt;

&lt;p&gt;But there is one important difference. The compiler compiles once, you do it many times.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What Next?
&lt;/h2&gt;

&lt;p&gt;Originally this post was intended to have full coverage of all the methods that the &lt;code&gt;DOM&lt;/code&gt; avails us with. But tonight I decided that writing such a long article might not be a wise move and might result in the dear readers' attention loss.&lt;/p&gt;

&lt;p&gt;So our long journey comes to a pause with the knowledge that the management of a frontend application is like a real-time compilation. In the next part, we'll learn about the &lt;code&gt;DOM&lt;/code&gt;'s methods and compare each of them with what a compiler does.&lt;/p&gt;

&lt;p&gt;The next part is more like an action ride through how updating a document's different parts, results in different states, and perhaps Tenets!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MdWo2J7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zid3nf9xdcmn07tleib.GIF" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MdWo2J7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4zid3nf9xdcmn07tleib.GIF" alt="Tenet gif. Pattinson: What the hell happened here? Washington: It hasn't happened yet."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I expect the next part to be released faster than this one. Since most of it is already written!üòÅ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End!
&lt;/h3&gt;

&lt;p&gt;And don't forget to give me feedback. I'm trying to bring new ideas into this series and like everyone else my ideas have their own flaws too. So I would be glad to hear what you think!üòÖ&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>frontend</category>
    </item>
    <item>
      <title>How to make GitHub more Productive?</title>
      <author>Filly Agioro</author>
      <pubDate>Sat, 24 Apr 2021 19:33:41 +0000</pubDate>
      <link>https://dev.to/fillyagioro/how-to-make-github-more-productive-19fg</link>
      <guid>https://dev.to/fillyagioro/how-to-make-github-more-productive-19fg</guid>
      <description>&lt;p&gt;In this post, I am going to talk about how to make your GitHub workflow faster, smoother, and more productive with these few tricks.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#make-github-repository"&gt;
  &lt;/a&gt;
  Make .github repository
&lt;/h1&gt;

&lt;p&gt;Most people don't use this but it pretty useful. First should make a repository named &lt;code&gt;.github&lt;/code&gt; then start making these files &lt;code&gt;CODE_OF_CONDUCT.md&lt;/code&gt;, &lt;code&gt;CONTRIBUTING.md&lt;/code&gt;, &lt;code&gt;FUNDING.yml&lt;/code&gt;, &amp;amp; &lt;code&gt;SUPPORT.md&lt;/code&gt;. Now when you open your other repositories of your own you will see that it showing the &lt;code&gt;.github&lt;/code&gt; repository file content there also.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0_aPlzKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p20kv6eb4a1jqrfl75v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_aPlzKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9p20kv6eb4a1jqrfl75v.png" alt="Helpful Links"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What does this file do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;CODE_OF_CONDUCT.md&lt;/code&gt;: A code of conduct defines standards for how to engage in a community.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;: This file, in your open source repository or site, provides potential project contributors with a short guide to how they can help with your project or study group.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FUNDING.yml&lt;/code&gt;: By adding this file you show your sponsor button in your repo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you don't have to go to every repo to edit these files you can it one's and done for the day. If you don't want to do these then you can fork or download my repo also.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/FillyAgioro"&gt;
        FillyAgioro
      &lt;/a&gt; / &lt;a href="https://github.com/FillyAgioro/.github"&gt;
        .github
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Default files for Projects
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#make-a-template-for-issues-and-pull-request"&gt;
  &lt;/a&gt;
  Make a template for Issues and Pull Request
&lt;/h1&gt;

&lt;p&gt;Make your contributor's experience more smoother with templates. By making issues and pull request templates your contributors don't have to write the whole thing also. Reading the issues and pull requests will easier because it will be formatted.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JvJZAk4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bh1ymjcs1adaat9u84w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JvJZAk4H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6bh1ymjcs1adaat9u84w.png" alt="Repo issues template name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--irfpd32S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rel6j21eukdtggwquft.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--irfpd32S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rel6j21eukdtggwquft.png" alt="Repo issues template insides"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How to make a template:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to your &lt;code&gt;.github&lt;/code&gt; repo.&lt;/li&gt;
&lt;li&gt;Make &lt;code&gt;.github&lt;/code&gt; folder inside it.&lt;/li&gt;
&lt;li&gt;Make &lt;code&gt;ISSUE_TEMPLATE&lt;/code&gt; inside &lt;code&gt;PULL_REQUEST_TEMPLATE&lt;/code&gt; folder make &lt;code&gt;bug_report.md&lt;/code&gt;, &lt;code&gt;feature_request.md&lt;/code&gt; or you can make other topic files by your choice.nd &lt;code&gt;PULL_REQUEST_TEMPLATE&lt;/code&gt; folder inside &lt;code&gt;.github&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Inside the &lt;code&gt;ISSUE_TEMPLATE&lt;/code&gt; folder make &lt;code&gt;bug_report.md&lt;/code&gt;, &lt;code&gt;feature_request.md&lt;/code&gt; or you can make other topic files by your choice.&lt;/li&gt;
&lt;li&gt;Inside the &lt;code&gt;PULL_REQUEST_TEMPLATE&lt;/code&gt; folder make &lt;code&gt;pull_request_template.md&lt;/code&gt; or you can make other topic files by your choice.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to see how it look go to my repo:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/FillyAgioro"&gt;
        FillyAgioro
      &lt;/a&gt; / &lt;a href="https://github.com/FillyAgioro/.github"&gt;
        .github
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Default files for Projects
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#make-a-template-repo"&gt;
  &lt;/a&gt;
  Make a template repo
&lt;/h1&gt;

&lt;p&gt;In template repo, you only have to make two files you make more of them also but mostly you need &lt;code&gt;README.md&lt;/code&gt; &amp;amp; &lt;code&gt;LICENSE&lt;/code&gt; if you use a default license for your projects. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KB5lcK54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ua4wxcrw7o0jfxaab1eb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KB5lcK54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ua4wxcrw7o0jfxaab1eb.png" alt="Template repository Option"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make repo a template:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the repo that you want to make the template.&lt;/li&gt;
&lt;li&gt;Go to Settings.&lt;/li&gt;
&lt;li&gt;And tick ‚òë the &lt;em&gt;Template repository&lt;/em&gt; option.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#template-readme"&gt;
  &lt;/a&gt;
  Template Readme
&lt;/h1&gt;

&lt;p&gt;Make a structured readme so the reader will easily find the content he/she needed and also you don't have to look on a blank page every time you write a readme file. In this way, you know what and where to write. It also makes everything more beautiful to look at.&lt;/p&gt;

&lt;p&gt;Here the Structured Readme made by me:-&lt;br&gt;
&lt;a href="https://github.com/FillyAgioro/template/blob/master/README.md"&gt;https://github.com/FillyAgioro/template/blob/master/README.md&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dont-fork-too-many-repositories"&gt;
  &lt;/a&gt;
  Don't fork too many repositories
&lt;/h1&gt;

&lt;p&gt;Don't fork too many repositories if you are not contributing or doing something with it. How you are going to delete it first?. If you some easy way to delete it then do it but don't do it if you not don't something useful with it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-you-have-any-questions-ask-me-in-the-comment-or-%E2%99%A5-the-post"&gt;
  &lt;/a&gt;
  If you have any questions ask me in the comment or ‚ô• the post.
&lt;/h2&gt;

</description>
      <category>github</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Tap Response Time: Jetpack Navigation üó∫</title>
      <author>Py ‚öî</author>
      <pubDate>Sat, 24 Apr 2021 19:27:34 +0000</pubDate>
      <link>https://dev.to/pyricau/tap-response-time-jetpack-navigation-4738</link>
      <guid>https://dev.to/pyricau/tap-response-time-jetpack-navigation-4738</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Header image: &lt;em&gt;Surf&lt;/em&gt; &lt;a href="https://www.flickr.com/photos/romainguy/14889089000/"&gt;by Romain Guy&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In &lt;a href="https://dev.to/pyricau/android-vitals-tap-response-time-19mj"&gt;Android Vitals - Tap Response Time üëâ&lt;/a&gt; we established that the naive approach to measuring &lt;em&gt;Tap Response Time&lt;/em&gt; isn't accurate and doesn't scale. Today we'll build a better implementation step by step, on top Jetpack Navigation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#%F0%9F%97%BA-navigation-library"&gt;
  &lt;/a&gt;
  üó∫ Navigation library
&lt;/h3&gt;

&lt;p&gt;We'll focus on &lt;a href="https://developer.android.com/guide/navigation"&gt;Jetpack Navigation&lt;/a&gt; here, however most of the content applies for any navigation library or tap action. In fact, I first implemented this at Square on top of &lt;a href="https://github.com/square/flow"&gt;Flow&lt;/a&gt; and &lt;a href="https://github.com/square/workflow-kotlin/"&gt;Workflow&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#advanced-navigation-sample"&gt;
  &lt;/a&gt;
  Advanced Navigation Sample
&lt;/h1&gt;

&lt;p&gt;We'll implement the &lt;em&gt;Tap Response Time&lt;/em&gt; measurement inside the &lt;a href="https://github.com/android/architecture-components-samples/tree/main/NavigationAdvancedSample"&gt;Advanced Navigation Sample&lt;/a&gt; and focus on the navigation from the &lt;a href="https://github.com/android/architecture-components-samples/blob/main/NavigationAdvancedSample/app/src/main/java/com/example/android/navigationadvancedsample/homescreen/Title.kt#L37-L39"&gt;Title screen to the About screen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S-K_4z9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azwon04dn3kyjg9iyht4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S-K_4z9I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/azwon04dn3kyjg9iyht4.png" alt="Navigation sample"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;aboutButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;findNavController&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_title_to_about&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#from-tap-to-render"&gt;
  &lt;/a&gt;
  From Tap to Render
&lt;/h1&gt;

&lt;p&gt;What happens exactly when we click on the about button?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#main-thread-tracing"&gt;
  &lt;/a&gt;
  Main thread tracing
&lt;/h2&gt;

&lt;p&gt;To figure that out, we enable Java method tracing while clicking on the button :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WN_8ZPn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/200yjd1b1qhagbp0f3pu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WN_8ZPn0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/200yjd1b1qhagbp0f3pu.png" alt="Java Method Sampling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;MotionEvent.ACTION_UP&lt;/code&gt; event is dispatched and a click is posted to the main thread.&lt;/li&gt;
&lt;li&gt;The posted click runs, the click listener calls &lt;code&gt;NavController.navigate()&lt;/code&gt; and a fragment transaction is posted to the main thread.&lt;/li&gt;
&lt;li&gt;The fragment transaction runs, the view hierarchy is updated, and a view traversal is scheduled for the next frame on the main thread.&lt;/li&gt;
&lt;li&gt;The view traversal runs, the view hierarchy is measured, laid out and drawn.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What happens after step 4?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#systrace"&gt;
  &lt;/a&gt;
  Systrace
&lt;/h2&gt;

&lt;p&gt;We get a better high level view with systrace:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LXUXXpyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2jtyv9n0dqfults0eec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LXUXXpyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c2jtyv9n0dqfults0eec.png" alt="systrace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In step 4, the view traversal &lt;strong&gt;draw pass&lt;/strong&gt; generates a list of drawing commands (known as &lt;strong&gt;display lists&lt;/strong&gt;) and sends that list of drawing commands to the &lt;em&gt;render thread&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Step 5: the &lt;strong&gt;render thread&lt;/strong&gt; optimizes the &lt;em&gt;display lists&lt;/em&gt;, adds effects such as ripples, then leverages the GPU to run the drawing commands and draw into a buffer (an OpenGL surface). Once done, the render thread tells the &lt;em&gt;surface flinger&lt;/em&gt; (which lives in a separate process) to &lt;strong&gt;swap the buffer&lt;/strong&gt; and put it on the display.&lt;/li&gt;
&lt;li&gt;Step 6 (not visible in the systrace screenshot): the surfaces for &lt;strong&gt;all visible windows are composited&lt;/strong&gt; by the surface flinger and hardware composer, and the result is &lt;strong&gt;sent to the display&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#tap-response-time"&gt;
  &lt;/a&gt;
  Tap Response Time
&lt;/h1&gt;

&lt;p&gt;We previously defined the &lt;em&gt;Tap Response Time&lt;/em&gt; as the time from when the user is &lt;strong&gt;done pressing&lt;/strong&gt; a button to when the app has &lt;strong&gt;visibly reacted&lt;/strong&gt; to the tap. In other words, we need to measure the &lt;strong&gt;total duration&lt;/strong&gt; of going through &lt;strong&gt;steps 1 to 6&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the next sections I'll explain how we can detect each step. If you'd rather immediately go to the final implementation, here's the &lt;a href="https://github.com/pyricau/architecture-components-samples/pull/1/files"&gt;PR against NavigationAdvancedSample&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-up-dispatch"&gt;
  &lt;/a&gt;
  Step 1: Up dispatch
&lt;/h2&gt;

&lt;p&gt;We leverage &lt;a href="https://github.com/square/curtains"&gt;square/curtains&lt;/a&gt; to intercept touch events. We define &lt;code&gt;TapTracker&lt;/code&gt;, a touch event interceptor. &lt;code&gt;TapTracker&lt;/code&gt; stores the time of the last &lt;code&gt;MotionEvent.ACTION_UP&lt;/code&gt; touch event. When the posted click listener triggers, we retrieve the time of the up event that triggered it by calling &lt;code&gt;TapTracker.currentTap&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;TapTracker&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;TouchEventInterceptor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;currentTap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;TapResponseTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;handler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Looper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getMainLooper&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;intercept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;motionEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MotionEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MotionEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;DispatchState&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;DispatchState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;isActionUp&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;motionEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="nc"&gt;MotionEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ACTION_UP&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isActionUp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;tapUptimeMillis&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;motionEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eventTime&lt;/span&gt;
      &lt;span class="c1"&gt;// Set currentTap right before the click listener fires&lt;/span&gt;
      &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;TapTracker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentTap&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;TapResponseTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;tapUptimeMillis&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tapUptimeMillis&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Dispatching posts the click listener.&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dispatchState&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;motionEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isActionUp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Clear currentTap right after the click listener fires&lt;/span&gt;
      &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;post&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;currentTap&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;dispatchState&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then add the &lt;code&gt;TapTracker&lt;/code&gt; interceptor to each new window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleApplication&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nc"&gt;Curtains&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onRootViewsChangedListeners&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt;
      &lt;span class="nc"&gt;OnRootViewAddedListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;phoneWindow&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;windowAttachCount&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;touchEventInterceptors&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="nc"&gt;TapTracker&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-2-click-listener-amp-navigation"&gt;
  &lt;/a&gt;
  Step 2: Click listener &amp;amp; navigation
&lt;/h2&gt;

&lt;p&gt;Let's define an &lt;code&gt;ActionTracker&lt;/code&gt; that will be called when when the posted click listener triggers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;ActionTracker&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;reportTapAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actionName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;currentTap&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;TapTracker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentTap&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currentTap&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// to be continued...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's how we could leverage it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;aboutButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setOnClickListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;findNavController&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action_title_to_about&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nc"&gt;ActionTracker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reportTapAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"About"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, we don't want to add that code to every click listener. Instead, we can add a &lt;a href="https://developer.android.com/reference/androidx/navigation/NavController#addOnDestinationChangedListener(androidx.navigation.NavController.OnDestinationChangedListener)"&gt;destination listener&lt;/a&gt; to the &lt;code&gt;NavController&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;navController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addOnDestinationChangedListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class="nc"&gt;ActionTracker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reportTapAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;Advanced Navigation Sample&lt;/em&gt; has 3 tabs, and each tab contains its own &lt;code&gt;NavHostFragment&lt;/code&gt; and &lt;code&gt;NavController&lt;/code&gt;. We could add a destination listener for each tab. Or we can leverage lifecycle callbacks to add a destination listener to every new &lt;code&gt;NavHostFragment&lt;/code&gt; instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GlobalNavHostDestinationChangedListener&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ActivityLifecycleCallbacks&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onActivityCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Activity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nc"&gt;FragmentActivity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nf"&gt;registerFragmentCreation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;registerFragmentCreation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;FragmentActivity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;supportFragmentManager&lt;/span&gt;
    &lt;span class="n"&gt;fm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;registerFragmentLifecycleCallbacks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;FragmentLifecycleCallbacks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onFragmentCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;fm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;FragmentManager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragment&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="nc"&gt;NavHostFragment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;registerDestinationChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;registerDestinationChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;NavHostFragment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;navController&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;navController&lt;/span&gt;
    &lt;span class="n"&gt;navController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addOnDestinationChangedListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;actionName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nc"&gt;ActionTracker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reportTapAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actionName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-3-fragment-transaction"&gt;
  &lt;/a&gt;
  Step 3: Fragment transaction
&lt;/h2&gt;

&lt;p&gt;Calling &lt;code&gt;NavController.navigate()&lt;/code&gt; does not immediately update the view hierarchy. Instead, a fragment transaction is posted to the main thread. The view for the destination fragment will be created and attached when the fragment transaction executes. Since all pending fragment transactions are &lt;a href="https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:fragment/fragment/src/main/java/androidx/fragment/app/FragmentManager.java;l=1545-1546;drc=31b10c21385fd9ba6350d9eed69847194a97a24d"&gt;executed at once&lt;/a&gt;, we add our own custom transaction to leverage the &lt;code&gt;runOnCommit()&lt;/code&gt; callback. Let's first build a utility, &lt;code&gt;OnTxCommitFragmentViewUpdateRunner.runOnViewsUpdated()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OnTxCommitFragmentViewUpdateRunner&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Fragment&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;runOnViewsUpdated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;fm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parentFragmentManager&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;beginTransaction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;runOnCommit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nf"&gt;block&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then pass an instance to &lt;code&gt;ActionTracker.reportTapAction()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="p"&gt;class GlobalNavHostDestinationChangedListener
&lt;/span&gt; ...
     val navController = fragment.navController
     navController.addOnDestinationChangedListener { _, dest, _ -&amp;gt;
       val actionName = dest.label.toString()
&lt;span class="gd"&gt;-      ActionTracker.reportTapAction(actionName)
&lt;/span&gt;&lt;span class="gi"&gt;+      ActionTracker.reportTapAction(
+        actionName,
+        OnTxCommitFragmentViewUpdateRunner(fragment)
+      )
&lt;/span&gt;     }
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt; object ActionTracker {
&lt;span class="gd"&gt;-  fun reportTapAction(actionName: String) {
&lt;/span&gt;&lt;span class="gi"&gt;+  fun reportTapAction(
+      actionName: String,
+      viewUpdateRunner: OnTxCommitFragmentViewUpdateRunner
+  ) {
&lt;/span&gt;     val currentTap = TapTracker.currentTap
     if (currentTap != null) {
&lt;span class="gd"&gt;-      // to be continued...
&lt;/span&gt;&lt;span class="gi"&gt;+      viewUpdateRunner.runOnViewsUpdated { view -&amp;gt;
+        // to be continued...
+      }
&lt;/span&gt;     }
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-4-frame-amp-view-hierarchy-traversal"&gt;
  &lt;/a&gt;
  Step 4: Frame &amp;amp; view hierarchy traversal
&lt;/h2&gt;

&lt;p&gt;When the fragment transaction executes, a view traversal is scheduled for the next frame, which we hook into with &lt;a href="https://developer.android.com/reference/android/view/Choreographer#postFrameCallback(android.view.Choreographer.FrameCallback)"&gt;Choreographer.postFrameCallback()&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt; object ActionTracker {
&lt;span class="gi"&gt;+
+  // Debounce multiple calls until the next frame
+  private var actionInFlight: Boolean = false
+
&lt;/span&gt;   fun reportTapAction(
       actionName: String,
       viewUpdateRunner: OnTxCommitFragmentViewUpdateRunner
   ) {
     val currentTap = TapTracker.currentTap
&lt;span class="gd"&gt;-    if (currentTap != null) {
&lt;/span&gt;&lt;span class="gi"&gt;+    if (!actionInFlight &amp;amp; currentTap != null) {
+      actionInFlight = true
&lt;/span&gt;       viewUpdateRunner.runOnViewsUpdated { view -&amp;gt;
&lt;span class="gd"&gt;-        // to be continued...
&lt;/span&gt;&lt;span class="gi"&gt;+        val choreographer = Choreographer.getInstance()
+        choreographer.postFrameCallback { frameTimeNanos -&amp;gt;
+          actionInFlight = false
+          // to be continued...
+        }
&lt;/span&gt;       }
     }
   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-5-renderthread"&gt;
  &lt;/a&gt;
  Step 5: RenderThread
&lt;/h2&gt;

&lt;p&gt;Once the view traversal is done, the main thread sends the &lt;strong&gt;display lists&lt;/strong&gt; to the &lt;strong&gt;render thread&lt;/strong&gt;. The render thread does additional work and then tells the &lt;strong&gt;surface flinger&lt;/strong&gt; to &lt;strong&gt;swap the buffer&lt;/strong&gt; and put it on the display. We register a &lt;a href="https://developer.android.com/reference/android/view/Window#addOnFrameMetricsAvailableListener(android.view.Window.OnFrameMetricsAvailableListener,%20android.os.Handler)"&gt;OnFrameMetricsAvailableListener&lt;/a&gt; to get the total frame duration (including time spent on the render thread):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt; object ActionTracker {
 ...
         val choreographer = Choreographer.getInstance()
         choreographer.postFrameCallback { frameTimeNanos -&amp;gt;
           actionInFlight = false
&lt;span class="gd"&gt;-          // to be continued...
&lt;/span&gt;&lt;span class="gi"&gt;+          val callback: (FrameMetrics) -&amp;gt; Unit = { frameMetrics -&amp;gt;
+            logTapResponseTime(currentTap, frameMetrics)
+          }
+          view.phoneWindow!!.addOnFrameMetricsAvailableListener(
+            CurrentFrameMetricsListener(frameTimeNanos, callback),
+            frameMetricsHandler
+          )
&lt;/span&gt;         }
       }
     }
   }
&lt;span class="gi"&gt;+
+  private fun logTapResponseTime(
+    currentTap: TapResponseTime.Builder,
+    fM: FrameMetrics
+  ) {
+    // to be continued...
+  }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we have the frame metrics we can determine when the frame buffer was swapped, and therefore the &lt;strong&gt;Tap Response Time&lt;/strong&gt;, i.e. the time from &lt;code&gt;MotionEvent.ACTION_UP&lt;/code&gt; to buffer swap:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt; object ActionTracker {
 ...
     currentTap: TapResponseTime.Builder,
     fM: FrameMetrics
   ) {
&lt;span class="gd"&gt;-    // to be continued...
&lt;/span&gt;&lt;span class="gi"&gt;+    val tap = currentTap.tapUptimeMillis
+    val intendedVsync = fM.getMetric(INTENDED_VSYNC_TIMESTAMP)
+    // TOTAL_DURATION is the duration from the intended vsync
+    // time, not the actual vsync time.
+    val frameDuration = fM.getMetric(TOTAL_DURATION)
+    val bufferSwap = (intendedVsync + frameDuration) / 1_000_000
+    Log.d("TapResponseTime", "${bufferSwap-tap} ms")
&lt;/span&gt;   }
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-6-surfaceflinger"&gt;
  &lt;/a&gt;
  Step 6: SurfaceFlinger
&lt;/h2&gt;

&lt;p&gt;There's no Java API to determine when the composited frames end up being sent to the display by SurfaceFlinger, so I didn't include that part. Romain Guy mentioned this can be done with a native call to &lt;a href="https://www.khronos.org/registry/EGL/extensions/ANDROID/EGL_ANDROID_get_frame_timestamps.txt"&gt;EGL_ANDROID_get_frame_timestamps&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h1&gt;

&lt;p&gt;When we click on the About button, we now see a nice log in Logcat:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;D/TapResponseTime: 105 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I ran systrace at the same time. As you can see in the screenshot, the time from tap to buffer swap is also 105ms:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--35eDgquo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wci86y6v9ds514pf7fh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--35eDgquo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wci86y6v9ds514pf7fh.png" alt="systrace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;You can see the final result in &lt;a href="https://github.com/pyricau/architecture-components-samples/pull/1/files"&gt;this PR&lt;/a&gt;. Feel free to leave comments on the PR! I added a few more things that I didn't cover in this blog, such as back key support and logging tab navigation.&lt;/p&gt;

&lt;p&gt;I intend to eventually create a Square Open Source library for this. Until then, you have everything you need to get started.&lt;/p&gt;

&lt;p&gt;My hope is that you can leverage this code to start measuring tap response time in your production apps, which will help you improve the experience of your customers üëè.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚öñÔ∏è This work is licensed under a &lt;a href="https://creativecommons.org/licenses/by/4.0"&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>android</category>
      <category>performance</category>
      <category>jetpack</category>
      <category>navigation</category>
    </item>
    <item>
      <title>Ultimate NodeJs Resources</title>
      <author>DHANUSH N</author>
      <pubDate>Sat, 24 Apr 2021 19:23:56 +0000</pubDate>
      <link>https://dev.to/dhanushxeno/ultimate-nodejs-resources-1mg4</link>
      <guid>https://dev.to/dhanushxeno/ultimate-nodejs-resources-1mg4</guid>
      <description>&lt;p&gt;Hi&lt;/p&gt;

&lt;p&gt;The below is my github repository which gives a combination of all the available resources of NodeJs, &lt;/p&gt;

&lt;p&gt;I will be updating the repository frequently for the updated content regarding Node Js&lt;/p&gt;

&lt;p&gt;Use it üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/DHANUSHXENO/Ultimate-NodeJs-Resources"&gt;Ultimate NodeJs Resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more technology related information connect with me&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/Dhanush_Xen?s=09"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>contributorswanted</category>
    </item>
    <item>
      <title>React Hooks | Why useCallback ?</title>
      <author>bhupendra</author>
      <pubDate>Sat, 24 Apr 2021 19:17:17 +0000</pubDate>
      <link>https://dev.to/bhupendra1011/react-hooks-why-usecallback-5hk8</link>
      <guid>https://dev.to/bhupendra1011/react-hooks-why-usecallback-5hk8</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;Functions are &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/First-class_Function"&gt;First-class&lt;/a&gt; citizens/objects in JS , which simply means they behave like objects , functions can be ~ stored in variable , passed as argument or returned from a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Referential Equality &lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false   &lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#components-rerendering"&gt;
  &lt;/a&gt;
  Components Re-rendering
&lt;/h3&gt;

&lt;p&gt;In React rendering means creating react elements and displaying on screen , this can be caused by state change, context change or a parent re-render. This is will cause re-run of the functional Component which will cause any function inside the Component to be destroyed (Garbage Collected) and created again on each re-render.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;Below Component renders a Text and button fields. value from the text field is saved to localStorage onChange.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fnCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// stores only unique values&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;saveText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;saveText&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;saveText&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;fnCount&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;saveText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// keeps count of times new fn created&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fnCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Understanding&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your Name :&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
        &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Count&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above code &lt;em&gt;fnCount&lt;/em&gt; is a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set"&gt;Set&lt;/a&gt; so it will keep track of number of times function &lt;strong&gt;saveText&lt;/strong&gt; is created on each &lt;em&gt;re-render&lt;/em&gt; of App component triggered on change of Input field. &lt;/p&gt;

&lt;p&gt;Below is the console log after 3 button clicks&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S7KlYxA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f1rvlnqgy5a5hhek94q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S7KlYxA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9f1rvlnqgy5a5hhek94q.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Component mount, fnCount had one 1 entry but on each re-render of component &lt;em&gt;saveText&lt;/em&gt; fn is re-initialized and is brand new so now fnCount has 4 entries (1 + 3 for each re-render). Since &lt;em&gt;saveText&lt;/em&gt; is related to name state so should not be re-run on button click. This is the problem &lt;strong&gt;useCallback&lt;/strong&gt; solves by not letting React to initialize function on each render unless dependencies in useCallback changes. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="c1"&gt;// const saveText = () =&amp;gt; {&lt;/span&gt;
  &lt;span class="c1"&gt;//   window.localStorage.setItem("name", name);&lt;/span&gt;
  &lt;span class="c1"&gt;// };&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;saveText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gw0gBZvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nncdc2hhswxu0nuzd6gu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gw0gBZvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nncdc2hhswxu0nuzd6gu.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
After wrapping &lt;em&gt;saveText&lt;/em&gt; fn with &lt;strong&gt;useCallback&lt;/strong&gt; , function count for saveText remains 1 in fnCount (mount time) after 3 clicks. &lt;br&gt;
Since on button Click no dependencies of saveText is changed so&lt;br&gt;
 &lt;em&gt;useCallback&lt;/em&gt; returns the memoized (or memorized) function , that was returned last time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example App :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/egrwl"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




</description>
      <category>react</category>
      <category>usecallback</category>
      <category>hooks</category>
      <category>memoization</category>
    </item>
    <item>
      <title>vue 3 ecommerce</title>
      <author>Tefoh</author>
      <pubDate>Sat, 24 Apr 2021 19:14:14 +0000</pubDate>
      <link>https://dev.to/tefoh/vue-3-ecommerce-1j7h</link>
      <guid>https://dev.to/tefoh/vue-3-ecommerce-1j7h</guid>
      <description>&lt;p&gt;i create a repo, a simple ecommerce template with cart and use a lot of things that a vue developer needs for basic app. ui maybe not perfect but these what i used in this project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a good folder structure(sort by feature)&lt;/li&gt;
&lt;li&gt;build a cart with vuex&lt;/li&gt;
&lt;li&gt;use plugins&lt;/li&gt;
&lt;li&gt;create components for vanilla js libraries&lt;/li&gt;
&lt;li&gt;countdown timer&lt;/li&gt;
&lt;li&gt;dropdown&lt;/li&gt;
&lt;li&gt;sliders&lt;/li&gt;
&lt;li&gt;gallery&lt;/li&gt;
&lt;li&gt;rating&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;source code: &lt;a href="https://github.com/Tefoh/vue-ecommerce-template"&gt;https://github.com/Tefoh/vue-ecommerce-template&lt;/a&gt; .&lt;br&gt;
demo: &lt;a href="https://vue-ecommerce-template.netlify.app/"&gt;https://vue-ecommerce-template.netlify.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;i hope this will be useful for you :))&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How the web works</title>
      <author>Rohit Singh Rana</author>
      <pubDate>Sat, 24 Apr 2021 18:34:25 +0000</pubDate>
      <link>https://dev.to/rohitrana/how-the-web-works-1hd7</link>
      <guid>https://dev.to/rohitrana/how-the-web-works-1hd7</guid>
      <description>&lt;p&gt;Have you ever wondered what happens when you browse your favorite websites?&lt;/p&gt;

&lt;p&gt;How those attractive websites got the load up in your browser within a fraction of a second.&lt;/p&gt;

&lt;p&gt;There is an epic journey happening every time you clicked that search button on your browser.  &lt;/p&gt;

&lt;p&gt;In this blog, you and I are going to shift from an average internet user to the person who still uses the internet all the time but knows a little bit about what‚Äôs going on behind the scenes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-technical-terms"&gt;
  &lt;/a&gt;
  Defining Technical terms
&lt;/h2&gt;

&lt;p&gt;Understanding, the web can be arduous due to a lot of technical terms. Unfortunately, some of them are mandatory and you will have to deal with them.&lt;/p&gt;

&lt;p&gt;These terms will not make much sense to you in the beginning, but just read them and you will see the dots connecting later in this journey.&lt;/p&gt;

&lt;p&gt;I have tried to explain these terms in the simplest way for better understanding so that you and I can continue on this journey-&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;URL -  Uniform Resource Locator&lt;/strong&gt;&lt;br&gt;
It‚Äôs basically something that we use to tell the browser what we actually looking for. &lt;/p&gt;

&lt;p&gt;For our reference, we will use our favorite website &lt;code&gt;https://www.udemy.com/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Protocols&lt;/strong&gt;&lt;br&gt;
Protocols are the certain set of rules that the client-side (browser) and server-side follow to communicate with each other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTP - Hypertext Transfer Protocol&lt;/strong&gt;&lt;br&gt;
It‚Äôs the first part of a URL indicates which protocol the browser will follow. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sqX4_06D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619268251307/3TXzmp_1k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sqX4_06D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1619268251307/3TXzmp_1k.png" alt="Screenshot (46).png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This part is known as HTTP &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ISP - Internet Service Provider&lt;/strong&gt; &lt;br&gt;
They connect the client to the servers and are usually a company or operators.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IP Address - Internet Protocol&lt;/strong&gt;&lt;br&gt;
An IP address is a unique address that identifies a device on the internet or on the local network.&lt;/p&gt;

&lt;p&gt;Every computer on the internet has an IP address that it uses to identify and communicate with other computers.&lt;/p&gt;

&lt;p&gt;It looks like this &lt;code&gt;104.16.66.85&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Domain Name&lt;/strong&gt;&lt;br&gt;
A domain name is the address of your website that you type in the URL bar to visit. &lt;/p&gt;

&lt;p&gt;The domain name is used by the DNS to look up the corresponding IP address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DNS - Domain Name System&lt;/strong&gt;&lt;br&gt;
It‚Äôs a decentralized database that converts the domain name (&lt;code&gt;https://www.udemy.com/&lt;/code&gt; )into their corresponding IP address (&lt;code&gt;104.16.66.85&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;It‚Äôs like the phonebook of the internet having the name (domain name) and phone number (IP address) of everyone &lt;/p&gt;

&lt;p&gt;when you click on the name it will directly call the phone number you do not need to memorize the IP address.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Now, as we know all the mandatory technical terms that we are going to use.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Let‚Äôs recommence with our Journey.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-the-web-works"&gt;
  &lt;/a&gt;
  How the web works
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When you type or click a URL into your browser, a request is sent to your Internet &lt;br&gt;
 Service Provider.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Internet Service Provider then communicates with DNS (Domain Name System) and checks the IP address for the server that hosts your website. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Internet service providers after receiving the IP address of the destination server sends it to your browser.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, the browser sticks this request into a virtual envelope called packets and wraps it with specific information for your request including the IP address of that server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The IP address of the packet tells that where is the server located.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After reaching the packet to the server.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The server then reads the request and if the web page exists it ready the web page to send by pulling its information from the database.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But there‚Äôs a catch too, that web pages made of images and text are too heavy to send in one go.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Likewise, for the internet to work efficiently the heavy page got polarised into many tiny packets.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Packets of data each one wraps with all the information needed to rebuild itself on the client-side.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, the journey to the destination begins, and it's not a direct one.&lt;br&gt;
It requires hopping from server to server until the webpage gets arrived on the client-side.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once arrived the browser then converts all the code into human-readable content.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This embarks the end of an epic journey that happens within a fraction of a second along with many trillions and trillions of similar journeys.&lt;/p&gt;

&lt;p&gt;It‚Äôs all happening on the Internet we take granted for&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In Synopsis, that‚Äôs how all the website works behind the Internet.&lt;/p&gt;

&lt;p&gt;I did not dive deep into much technical explanation. Otherwise, it'll become too obnoxious. &lt;/p&gt;

&lt;p&gt;But if you are a technophile like me and want to know more about working with the web and are ready to get your head around with these things. &lt;/p&gt;

&lt;p&gt;You can always refer to these great  &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/How_the_Web_works"&gt;&lt;strong&gt;Mozilla docs&lt;/strong&gt;&lt;/a&gt;  for a better understanding of Concepts.&lt;/p&gt;

&lt;p&gt;If you find my work interesting and worth reading you can appreciate me on  &lt;a href="https://twitter.com/_RohitRana"&gt;&lt;strong&gt;Twitter&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/rohit-rana17/"&gt; &lt;strong&gt;LinkedIn&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All kinds of Feedback are welcomed in comments. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>A Developer Community Encouraging Active Coding Practice üèÅ </title>
      <author>Fum</author>
      <pubDate>Sat, 24 Apr 2021 17:39:42 +0000</pubDate>
      <link>https://dev.to/inspirezone/a-developer-community-encouraging-active-coding-practice-4koh</link>
      <guid>https://dev.to/inspirezone/a-developer-community-encouraging-active-coding-practice-4koh</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-inspirezone"&gt;
  &lt;/a&gt;
  What is inspirezone?
&lt;/h1&gt;

&lt;p&gt;Inspirezone is a &lt;a href="https://community.inspirezone.tech/"&gt;community for developers&lt;/a&gt; and we are working on building an environment that will inspire developers of all levels of experience to reach their highest potential.&lt;/p&gt;

&lt;p&gt;We are all about encouraging you to accelerate your programming skills through &lt;strong&gt;collaboration, active practice and group accountability.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are also a &lt;a href="https://inspirezone.tech/blog/"&gt;developer blog&lt;/a&gt; covering topics on programming practice, productivity, tools and tips on increasing your proficiency as a developer.&lt;/p&gt;

&lt;p&gt;Our community is now beginning a series of coding challenges to encourage active participation from members. Use these challenges to refresh or develop your knowledge of various programming languages.&lt;/p&gt;

&lt;p&gt;We are launching the first coding challenge. It‚Äôs a relatively simple one as we‚Äôll use this to plan out improvements and ideas for future challenges.&lt;/p&gt;

&lt;p&gt;We are seeking developers who are &lt;strong&gt;dedicated&lt;/strong&gt; and &lt;strong&gt;motivated&lt;/strong&gt; in accelerating their growth and are willing to &lt;strong&gt;actively participate&lt;/strong&gt; in collaboration activities like our challenges. &lt;/p&gt;

&lt;p&gt;If you‚Äôre not a member yet, consider &lt;a href="https://community.inspirezone.tech/"&gt;joining us&lt;/a&gt; and become a part of our influential community!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-first-challenge-develop-a-simple-calculator-using-any-programming-language-of-your-choice"&gt;
  &lt;/a&gt;
  ‚öîÔ∏è The First Challenge - Develop a simple calculator using any programming language of your choice
&lt;/h2&gt;

&lt;p&gt;The full details and rules of this challenge are listed on the &lt;a href="https://github.com/inspirezonetech/Calculator-Challenge-Inspirezone"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/inspirezonetech"&gt;
        inspirezonetech
      &lt;/a&gt; / &lt;a href="https://github.com/inspirezonetech/Calculator-Challenge-Inspirezone"&gt;
        Calculator-Challenge-Inspirezone
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Calculator challenge hosted by the inspirezone.tech dev community
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
üèÅ Calculator Coding Challenge üèÅ | Hosted by the &lt;a href="https://community.inspirezone.tech/" rel="nofollow"&gt;Inspirezone Dev Community&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7cf7a7636243f21bf784888bc9631e244622fe49e19957242f2f8f37c19d1242/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f496e73706972657a6f6e65253230446576253230436f6d6d756e6974792d436f64696e672532304368616c6c656e67652d2532336361656663633f7374796c653d666f722d7468652d6261646765266c6f676f3d676974687562"&gt;&lt;img src="https://camo.githubusercontent.com/7cf7a7636243f21bf784888bc9631e244622fe49e19957242f2f8f37c19d1242/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f496e73706972657a6f6e65253230446576253230436f6d6d756e6974792d436f64696e672532304368616c6c656e67652d2532336361656663633f7374796c653d666f722d7468652d6261646765266c6f676f3d676974687562" alt="Inspirezone calculator challenge badge"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9c0d0763c4ad5fc2f7dd6f9e68c67524c5fc8c2c54e84248fa459523203888e9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f557365253230416e792532304c616e67756167652d6666363337623f7374796c653d666f722d7468652d6261646765266c6f676f3d646174613a696d6167652f7376672b786d6c3b6261736536342c5044393462577767646d567963326c76626a30694d5334774969426c626d4e765a476c755a7a30696458526d4c546769507a343863335a6e49485a6c636e4e7062323439496a45754d53496761575139496b786865575679587a4569494868746247357a50534a6f644852774f693876643364334c6e637a4c6d39795a7938794d4441774c334e325a79496765473173626e4d3665477870626d7339496d6830644841364c79393364336375647a4d7562334a6e4c7a45354f546b7665477870626d736949486739496a427765434967655430694d4842344969423261575633516d393450534977494441674d5449794c6a6734494445774d5334314e7949676333523562475539496d567559574a735a53316959574e725a334a766457356b4f6d356c64794177494441674d5449794c6a6734494445774d5334314e794967654731734f6e4e7759574e6c50534a77636d567a5a584a325a53492b5047632b50484268644767675a443069545451304c6a6b334c4445794c6a6730614330784e793479544441734e446b754d7a644d4d6a63754e7a63734f4455754f5767784e793479544445334c6a49734e446b754d7a644d4e4451754f5463734d5449754f44524d4e4451754f5463734d5449754f445236494530334e7934354d5377784d6934344e4767784e793479624449334c6a63334c444d324c6a557a494577354e5334784d5377344e533435614330784e793479624449334c6a63334c544d324c6a557a544463334c6a6b784c4445794c6a6730544463334c6a6b784c4445794c6a67306569424e4e7a41754d5463734d4334774e4777314c6a6b324c4445754d7a6c6a4d4334354e4377774c6a49794c4445754e5449734d5334784e6977784c6a4d784c4449754d5777744d6a49754e5377354e6934324f53426a4c5441754d6a49734d4334354d7930784c6a45324c4445754e5449744d6934784c4445754d7a46734c5455754f5455744d53347a4f574d744d4334354e4330774c6a49794c5445754e5449744d5334784e6930784c6a4d784c5449754d5777794d6934314c546b324c6a5935517a59344c6a4d734d4334304d6977324f5334794e4330774c6a45334c4463774c6a45334c4441754d44524d4e7a41754d5463734d4334774e43424d4e7a41754d5463734d4334774e486f694c7a34384c32632b5043397a646d632b"&gt;&lt;img src="https://camo.githubusercontent.com/9c0d0763c4ad5fc2f7dd6f9e68c67524c5fc8c2c54e84248fa459523203888e9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f557365253230416e792532304c616e67756167652d6666363337623f7374796c653d666f722d7468652d6261646765266c6f676f3d646174613a696d6167652f7376672b786d6c3b6261736536342c5044393462577767646d567963326c76626a30694d5334774969426c626d4e765a476c755a7a30696458526d4c546769507a343863335a6e49485a6c636e4e7062323439496a45754d53496761575139496b786865575679587a4569494868746247357a50534a6f644852774f693876643364334c6e637a4c6d39795a7938794d4441774c334e325a79496765473173626e4d3665477870626d7339496d6830644841364c79393364336375647a4d7562334a6e4c7a45354f546b7665477870626d736949486739496a427765434967655430694d4842344969423261575633516d393450534977494441674d5449794c6a6734494445774d5334314e7949676333523562475539496d567559574a735a53316959574e725a334a766457356b4f6d356c64794177494441674d5449794c6a6734494445774d5334314e794967654731734f6e4e7759574e6c50534a77636d567a5a584a325a53492b5047632b50484268644767675a443069545451304c6a6b334c4445794c6a6730614330784e793479544441734e446b754d7a644d4d6a63754e7a63734f4455754f5767784e793479544445334c6a49734e446b754d7a644d4e4451754f5463734d5449754f44524d4e4451754f5463734d5449754f445236494530334e7934354d5377784d6934344e4767784e793479624449334c6a63334c444d324c6a557a494577354e5334784d5377344e533435614330784e793479624449334c6a63334c544d324c6a557a544463334c6a6b784c4445794c6a6730544463334c6a6b784c4445794c6a67306569424e4e7a41754d5463734d4334774e4777314c6a6b324c4445754d7a6c6a4d4334354e4377774c6a49794c4445754e5449734d5334784e6977784c6a4d784c4449754d5777744d6a49754e5377354e6934324f53426a4c5441754d6a49734d4334354d7930784c6a45324c4445754e5449744d6934784c4445754d7a46734c5455754f5455744d53347a4f574d744d4334354e4330774c6a49794c5445754e5449744d5334784e6930784c6a4d784c5449754d5777794d6934314c546b324c6a5935517a59344c6a4d734d4334304d6977324f5334794e4330774c6a45334c4463774c6a45334c4441754d44524d4e7a41754d5463734d4334774e43424d4e7a41754d5463734d4334774e486f694c7a34384c32632b5043397a646d632b" alt="Any programming language welcome"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/ba4442afc78f69c6476cde1052319f291542af2413ed2f66ae29ac6068d05c66/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f57652532304172652532304f6e253230446973636f72642d3732383944413f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/ba4442afc78f69c6476cde1052319f291542af2413ed2f66ae29ac6068d05c66/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f57652532304172652532304f6e253230446973636f72642d3732383944413f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264266c6f676f436f6c6f723d7768697465" alt="We are on Discord"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/83265dcd64f7e5f49aef61167a70c0115b6ec430c506279e6840a92fac1bcc32/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e747269627574696f6e7325323057656c636f6d652d6631396366373f7374796c653d666f722d7468652d6261646765266c6f676f3d646174613a696d6167652f7376672b786d6c3b6261736536342c5044393462577767646d567963326c76626a30694d5334774969426c626d4e765a476c755a7a30696458526d4c546769507a343863335a6e49485a6c636e4e7062323439496a45754d53496761575139496b786865575679587a4569494868746247357a50534a6f644852774f693876643364334c6e637a4c6d39795a7938794d4441774c334e325a79496765473173626e4d3665477870626d7339496d6830644841364c79393364336375647a4d7562334a6e4c7a45354f546b7665477870626d736949486739496a427765434967655430694d4842344969423261575633516d393450534977494441674d5449794c6a6734494445774e7934304d5349676333523562475539496d567559574a735a53316959574e725a334a766457356b4f6d356c64794177494441674d5449794c6a6734494445774e7934304d534967654731734f6e4e7759574e6c50534a77636d567a5a584a325a53492b50484e306557786c4948523563475539496e526c6548517659334e7a496a34756333517765325a7062477774636e56735a54706c646d56756232526b4f324e7361584174636e56735a54706c646d56756232526b4f3330384c334e306557786c506a786e506a78775958526f49474e7359584e7a50534a7a6444416949475139496b30324d4334344d7977784e7934784f554d324f4334344e4377344c6a67304c4463304c6a51314c4445754e6a49734f4459754e7a6b734d4334794d574d794d7934784e7930794c6a59324c4451304c6a51344c4449784c6a41324c444d794c6a63344c4451304c6a517849474d744d79347a4d7977324c6a59314c5445774c6a45784c4445304c6a55324c5445334c6a59784c4449794c6a4d79597930344c6a497a4c4467754e5449744d5463754d7a51734d5459754f4463744d6a4d754e7a49734d6a4d754d6d77744d5463754e4377784e7934794e6b77304e6934304e6977354d7934314e6b4d794f5334784e6977334e6934354c4441754f5455734e5455754f544d734d4334774d6977794f5334354e5342444c5441754e6a4d734d5445754e7a55734d544d754e7a4d734d4334774f53777a4d4334794e5377774c6a4e444e4455754d4445734d4334314c4455784c6a49794c4463754f4451734e6a41754f444d734d5463754d546c4d4e6a41754f444d734d5463754d546c4d4e6a41754f444d734d5463754d546c364969382b5043396e506a777663335a6e50673d3d"&gt;&lt;img src="https://camo.githubusercontent.com/83265dcd64f7e5f49aef61167a70c0115b6ec430c506279e6840a92fac1bcc32/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e747269627574696f6e7325323057656c636f6d652d6631396366373f7374796c653d666f722d7468652d6261646765266c6f676f3d646174613a696d6167652f7376672b786d6c3b6261736536342c5044393462577767646d567963326c76626a30694d5334774969426c626d4e765a476c755a7a30696458526d4c546769507a343863335a6e49485a6c636e4e7062323439496a45754d53496761575139496b786865575679587a4569494868746247357a50534a6f644852774f693876643364334c6e637a4c6d39795a7938794d4441774c334e325a79496765473173626e4d3665477870626d7339496d6830644841364c79393364336375647a4d7562334a6e4c7a45354f546b7665477870626d736949486739496a427765434967655430694d4842344969423261575633516d393450534977494441674d5449794c6a6734494445774e7934304d5349676333523562475539496d567559574a735a53316959574e725a334a766457356b4f6d356c64794177494441674d5449794c6a6734494445774e7934304d534967654731734f6e4e7759574e6c50534a77636d567a5a584a325a53492b50484e306557786c4948523563475539496e526c6548517659334e7a496a34756333517765325a7062477774636e56735a54706c646d56756232526b4f324e7361584174636e56735a54706c646d56756232526b4f3330384c334e306557786c506a786e506a78775958526f49474e7359584e7a50534a7a6444416949475139496b30324d4334344d7977784e7934784f554d324f4334344e4377344c6a67304c4463304c6a51314c4445754e6a49734f4459754e7a6b734d4334794d574d794d7934784e7930794c6a59324c4451304c6a51344c4449784c6a41324c444d794c6a63344c4451304c6a517849474d744d79347a4d7977324c6a59314c5445774c6a45784c4445304c6a55324c5445334c6a59784c4449794c6a4d79597930344c6a497a4c4467754e5449744d5463754d7a51734d5459754f4463744d6a4d754e7a49734d6a4d754d6d77744d5463754e4377784e7934794e6b77304e6934304e6977354d7934314e6b4d794f5334784e6977334e6934354c4441754f5455734e5455754f544d734d4334774d6977794f5334354e5342444c5441754e6a4d734d5445754e7a55734d544d754e7a4d734d4334774f53777a4d4334794e5377774c6a4e444e4455754d4445734d4334314c4455784c6a49794c4463754f4451734e6a41754f444d734d5463754d546c4d4e6a41754f444d734d5463754d546c4d4e6a41754f444d734d5463754d546c364969382b5043396e506a777663335a6e50673d3d" alt="Contributions welcome"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://inspirezone.tech" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/c568bfb9e1995eb3a26be19be13ce0de914c75070b33b3c97a952ad1b14ca725/68747470733a2f2f696e73706972657a6f6e652e746563682f77702d636f6e74656e742f75706c6f6164732f323032312f30342f63616c63756c61746f722d6368616c6c656e67652d62616e6e65722e706e67" alt="inspirezone calculator challenge banner"&gt; &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This Repo is part of the inspirezone Dev Community Coding Challenges. Please read challenge details below.&lt;br&gt;
&lt;a href="https://community.inspirezone.tech/" rel="nofollow"&gt;JOIN THE COMMUNITY HERE&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You are welcome to contribute to this repo. If you want to contribute please read the &lt;a href="https://raw.githubusercontent.com/inspirezonetech/Calculator-Challenge-Inspirezone/main/./CONTRIBUTING.md"&gt;&lt;strong&gt;CONTRIBUTING.md&lt;/strong&gt;&lt;/a&gt; for step by step details of how to submit an entry.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
üìú Rules of this challenge üìú
&lt;/h2&gt;
&lt;h3&gt;
Guidelines in making an entry for this challenge&lt;/h3&gt;
&lt;p&gt;‚úîÔ∏è Use any language of your choice.&lt;/p&gt;
&lt;p&gt;‚úîÔ∏è Solution should at minimum ask for user input of 2 numbers.&lt;/p&gt;
&lt;p&gt;‚úîÔ∏è Solution should at minimum be able to add, subtract, multiply, divide.&lt;/p&gt;
&lt;p&gt;‚úîÔ∏è Can be command line based or GUI based.&lt;/p&gt;
&lt;p&gt;‚úîÔ∏è Create a README.md with instructions for how to run your code.&lt;/p&gt;
&lt;h2&gt;
üíª How to Join in üíª
&lt;/h2&gt;
&lt;p&gt;The inspirezone dev community is on Discord and this challenge is managed through there. If you are‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/inspirezonetech/Calculator-Challenge-Inspirezone"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This first challenge will get you refreshing basic arithmetic operators using any language you choose. &lt;/p&gt;

&lt;p&gt;Or due to the simplicity of this challenge, use this opportunity to pick up a language completely new to you and code up your first application!&lt;/p&gt;

&lt;p&gt;Whatever language you use to develop this application, by participating in this challenge you‚Äôll be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn / refresh use of basic arithmetic operators in a programming language&lt;/li&gt;
&lt;li&gt;Learn / refresh how to handle user inputs&lt;/li&gt;
&lt;li&gt;If you‚Äôre new to GUI development, this is an opportunity to develop your first GUI application!&lt;/li&gt;
&lt;li&gt;An opportunity to contribute to an open source project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üèÖ We‚Äôll also be awarding badges to all members that submit a working entry for every challenge we run. Each badge earned counts and we‚Äôll reveal why over time üòâ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-join-these-challenges-and-participate-in-our-community"&gt;
  &lt;/a&gt;
  Why should you join these challenges and participate in our community? ü§î
&lt;/h2&gt;

&lt;p&gt;Our on-going coding challenges is just one method we‚Äôll use to keep members active in their coding practice. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accountability&lt;/strong&gt; is a huge focus of our community. We encourage you to join in these challenges if you‚Äôre open to receiving a regular but gentle push to ensure you‚Äôre on track with your goals. These challenges are just one way we‚Äôll be using to push you further üî•&lt;/p&gt;

&lt;p&gt;We manage our community through Discord and we encourage you to join the server if you want closer accountability. On Discord there will be an option to register your participation in challenges and we use this to keep track of everyone committed to completing a challenge. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://community.inspirezone.tech/"&gt;Join the community&lt;/a&gt; to receive full member access to the Discord server. Or you can &lt;a href="https://discord.gg/EwwBgXkh5a"&gt;join the server as a guest&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These challenges are a great way to receive an external push and some accountability in keeping up with a regular coding habit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you‚Äôre a developer seeking unique ways to accelerate your coding skills to the next level we more than welcome you to &lt;a href="https://community.inspirezone.tech/"&gt;join us&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Leave a comment or &lt;a href="https://dev.to/funbeedev"&gt;message me directly&lt;/a&gt; if you have any questions about this challenge or the inspirezone community üòÄ&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>programming</category>
      <category>github</category>
    </item>
    <item>
      <title>QR Codes for Scheduling and Bookings</title>
      <author>Spurwing</author>
      <pubDate>Sat, 24 Apr 2021 17:39:41 +0000</pubDate>
      <link>https://dev.to/spurwing/qr-codes-for-scheduling-and-bookings-188a</link>
      <guid>https://dev.to/spurwing/qr-codes-for-scheduling-and-bookings-188a</guid>
      <description>&lt;p&gt;QR codes allow us to embed/encode information as an image, which we all know as this large square filled with smaller black and white squares. The science and math behind QR codes isn't very easy, but there are a ton of articles and videos on YouTube that explain the process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IBDrMSfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmtim1413tdh3oby2tsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBDrMSfw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmtim1413tdh3oby2tsp.png" alt="business card qr code generator"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;All modern phones have a built-in QR Code Scanner which decodes the information. If the encoded data was just text, your phone will show the message, but if it's an URL then it will prompt you to open it in the browser. It's a great way to promote your website or project. But we can also use it for embedding email addresses or special app events.&lt;/p&gt;

&lt;p&gt;You can use our open source &lt;a href="https://github.com/Spurwing/Appointment-Scheduling-Widgets/blob/main/QRCode/"&gt;GitHub repository&lt;/a&gt; which allows you to generate QR codes using various parameters, &lt;a href="https://spurwing.github.io/Appointment-Scheduling-Widgets/QRCode/"&gt;Live demo here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRXt7_ox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k40jtpaxp8cc08rb4fmu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRXt7_ox--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k40jtpaxp8cc08rb4fmu.png" alt="QR code website javascript"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The file &lt;code&gt;index.html&lt;/code&gt; contains the JavaScript code for encoding plain text to a QR code image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;update_qrcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;[\s\u&lt;/span&gt;&lt;span class="sr"&gt;3000&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+|&lt;/span&gt;&lt;span class="se"&gt;[\s\u&lt;/span&gt;&lt;span class="sr"&gt;3000&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+$/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;qr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;create_qrcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Byte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UTF-8&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;create_qrcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ECL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringToBytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringToBytesFuncs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mb&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;qrcode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ECL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;M&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;make&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="c1"&gt;// return qr.createImgTag();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;qr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createSvgTag&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The default settings allow you to encode 62 characters, which is usally enough for a simple URL or message. If you need to encode longer texts you can tweek the settings (&lt;code&gt;version&lt;/code&gt; and &lt;code&gt;ECL&lt;/code&gt;) using this &lt;a href="https://www.qrcode.com/en/about/version.html"&gt;reference sheet&lt;/a&gt;. The library we used for QR code generation is &lt;a href="https://github.com/kazuhikoarase/qrcode-generator"&gt;this one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since QR codes can encode URLs, we can encode a link pointing to our Appointment Scheduling or Availability Page. For instance our page on Spurwing which allows users to book a demo call: &lt;a href="https://www.spurwing.io/learn-more"&gt;https://www.spurwing.io/learn-more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly you can encode your email address as such &lt;code&gt;mailto:ilya@spurwing.io&lt;/code&gt; When scanning that QR code your device will prompt you to open the Email app with your email in the recipient field.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;QR codes are a wonderful technological invention. Unfortunately they are not (yet) very common in the west, but in Asia they are used like crazy.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>useReducer Hook for functional components.</title>
      <author>Gilbish</author>
      <pubDate>Sat, 24 Apr 2021 17:36:14 +0000</pubDate>
      <link>https://dev.to/gilbishkosma/usereducer-hook-for-functional-components-3lo2</link>
      <guid>https://dev.to/gilbishkosma/usereducer-hook-for-functional-components-3lo2</guid>
      <description>&lt;p&gt;The &lt;code&gt;useReducer&lt;/code&gt; hook comes in handy when you want to separate the state logic from the components. In the official doc of React, they have written it as an alternative to &lt;code&gt;useState&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useReducer&lt;/code&gt; hook is usually preferable to &lt;code&gt;useState&lt;/code&gt; when you have a complex state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initialArg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;arguments of &lt;code&gt;useReducer&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;1) &lt;strong&gt;reducer&lt;/strong&gt;&lt;br&gt;
   A reducer will be a function that takes two arguments.&lt;br&gt;
   the first argument is the &lt;strong&gt;initialState&lt;/strong&gt; and the second will be the &lt;strong&gt;action&lt;/strong&gt;. It will return the new state based on the action provided.&lt;/p&gt;

&lt;p&gt;2) &lt;strong&gt;initialArg&lt;/strong&gt;&lt;br&gt;
   initialArg is the initial state which is passed to the reducer.&lt;/p&gt;

&lt;p&gt;3) &lt;strong&gt;init&lt;/strong&gt; (optional)&lt;br&gt;
   It's a function that is used to create the initial state lazily. If you pass a third function argument to the &lt;code&gt;useReducer&lt;/code&gt; hook, it passes the second argument to that function and uses the return value for the initial state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Let's create a counter app, in which the count will increase or decrease based on the button we click.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step1-create-the-component"&gt;
  &lt;/a&gt;
  Step1 (create the component)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CounterApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;initialCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialCount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subtract&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Subtract&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step2-create-the-reducer-function"&gt;
  &lt;/a&gt;
  Step2 (create the reducer function)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SUBTRACt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here the &lt;strong&gt;state&lt;/strong&gt; is the current state and &lt;strong&gt;dispatch&lt;/strong&gt; (can also be said as action) is the argument that is passed in the &lt;strong&gt;setState&lt;/strong&gt;. We are checking the type of action passed by the user and based on that we will set the new value. It works same as the reducer of Redux.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step3-use-the-reducer-with-our-component"&gt;
  &lt;/a&gt;
  Step3 (use the Reducer with our component)
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SUBTRACt&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CounterApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;initialCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;initialCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ADD&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SUBTRACT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Subtract&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CounterApp&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Out CounterApp is ready. üéâ&lt;/p&gt;

&lt;p&gt;We have used the useReducer hook for a simple counter app. I will suggest using the useState hook for simple cases and the useReducer hook for complex cases. &lt;br&gt;
One of the examples for the complex case is if you have more than one state in your app and you have to change all the states at the same time, then, in that case, we can save all the states in an object using the useReducer hook.&lt;/p&gt;

&lt;p&gt;Thanks for reading my post. üòÑ&lt;br&gt;
Let me know if you have any queries.&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Web Components using UnknownHTMLElements for better semantic HTML</title>
      <author>Danny Engelman</author>
      <pubDate>Sat, 24 Apr 2021 16:25:29 +0000</pubDate>
      <link>https://dev.to/dannyengelman/web-components-using-unknownhtmlelements-for-better-semantic-html-5d8c</link>
      <guid>https://dev.to/dannyengelman/web-components-using-unknownhtmlelements-for-better-semantic-html-5d8c</guid>
      <description>&lt;h3&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  ü•ß TL;DR;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;UnknownHTMLElement&lt;/code&gt; elements &lt;strong&gt;can&lt;/strong&gt; be used as Web Component building blocks&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; Web Components, used in this post are available on &lt;a href="https://pie-meister.github.io"&gt;https://pie-meister.github.io&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#-raw-ltslicegt-endraw-is-an-unknownhtmlelement"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; is an &lt;strong&gt;UnknownHTMLElement&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://dev.to/dannyengelman/what-web-technologies-are-required-to-draw-a-pie-chart-in-2021-spoiler-alert-a-standard-web-component-will-do-1j56"&gt;my previous post&lt;/a&gt; &lt;br&gt;
I explained how to build a &lt;em&gt;vanilla JavaScript&lt;/em&gt; &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; Web Component.&lt;/p&gt;

&lt;p&gt;With &lt;strong&gt;semantic HTML&lt;/strong&gt; creating a Pie Chart:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;pie-chart&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slice&lt;/span&gt; &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"90"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML&lt;span class="nt"&gt;&amp;lt;/slice&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slice&lt;/span&gt; &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;  &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;JavaScript&lt;span class="nt"&gt;&amp;lt;/slice&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;slice&lt;/span&gt; &lt;span class="na"&gt;size=&lt;/span&gt;&lt;span class="s"&gt;"9"&lt;/span&gt;  &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CSS&lt;span class="nt"&gt;&amp;lt;/slice&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/pie-chart&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N-glI370--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/MWUIQVe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-glI370--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/MWUIQVe.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Experienced Web Developers commented &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; is &lt;strong&gt;not a valid HTML Element&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HTMLUnknownElement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neither is it a valid &lt;strong&gt;Custom Element&lt;/strong&gt;, because those always require &lt;strong&gt;at least one hyphen&lt;/strong&gt; in the tagname.&lt;/p&gt;

&lt;p&gt;That hyphen restriction is to prevent conflicts with any HTML tags the WHATWG might add &lt;em&gt;&lt;strong&gt;in the future&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Custom Element tag names:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have to &lt;strong&gt;start with&lt;/strong&gt; a lowercase ASCII character&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;can't have uppercase&lt;/strong&gt; characters anywhere&lt;/li&gt;
&lt;li&gt;must contain at least one &lt;strong&gt;hyphen&lt;/strong&gt; - character&lt;/li&gt;
&lt;li&gt;UTF-8 characters, &lt;strong&gt;emojis&lt;/strong&gt; are allowed: &lt;code&gt;&amp;lt;a-ü•ß-chart&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;cannot be self closing: &lt;code&gt;&amp;lt;pie-chart/&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#what-is-the-value-of-using-raw-ltslicegt-endraw-"&gt;
  &lt;/a&gt;
  What is the value of using &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; ?
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#-raw-ltpiechartgt-endraw-must-be-a-unique-custom-element-extended-from-htmlelement"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; must be a &lt;strong&gt;unique&lt;/strong&gt; Custom Element (extended from HTMLElement)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Scoped registries have been &lt;a href="https://github.com/WICG/webcomponents/issues/716"&gt;on the agenda for 4 years now&lt;/a&gt;. &lt;br&gt;
For now &lt;strong&gt;all&lt;/strong&gt; Custom Elements go into the same &lt;strong&gt;global &lt;em&gt;customElementsRegistry&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That means &lt;code&gt;customElements.define("pie-chart")&lt;/code&gt; can only be called &lt;strong&gt;once&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If an element &lt;strong&gt;with the same tag name&lt;/strong&gt; was already created, &lt;br&gt;
my &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; element will throw an error:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aw_D0eJ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ICumcGD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aw_D0eJ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ICumcGD.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For a good UX (User eXperience) &lt;strong&gt;and&lt;/strong&gt; DX (Developer eXperience) 
my &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; Web Component should test if it can be defined:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pie-chart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// warn the user "my" Web Component doesn't work; another definition exists&lt;/span&gt;
    &lt;span class="c1"&gt;// warn the developer another Web Component with the same name exists&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;customElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pie-chart&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;h2&gt;
  &lt;a href="#to-raw-ltslicegt-endraw-or-to-raw-ltpieslicegt-endraw-that-is-the-question"&gt;
  &lt;/a&gt;
  To &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; or to &lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt;, that is the question
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#-raw-ltslicegt-endraw-has-less-restrictions"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; has less restrictions
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A &lt;strong&gt;duplicate&lt;/strong&gt; &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; can only be created by the WHATWG &lt;strong&gt;adding&lt;/strong&gt; &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; as standard HTML tag.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Till then. I know &lt;strong&gt;with 100% certainty&lt;/strong&gt; there will not be a naming conflict. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Because &lt;strong&gt;no 3rd party Developer&lt;/strong&gt; can create a valid &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eez5P-h5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2s9uAII.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eez5P-h5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/2s9uAII.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Had I used a &lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt; &lt;strong&gt;Custom Element&lt;/strong&gt;, &lt;br&gt;
it would have been an additional point of failure. &lt;br&gt;
I would have to add extra code to check if &lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt; was defined &lt;strong&gt;by another developer&lt;/strong&gt;; like required for &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#-raw-ltpieslicegt-endraw-versus-raw-ltslicegt-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt; versus &lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;pie-slice&amp;gt;&lt;/code&gt; can have all the &lt;strong&gt;Web Components goodies&lt;/strong&gt;: &lt;code&gt;observedAttributes&lt;/code&gt; , &lt;code&gt;attributeChangedCallback&lt;/code&gt; etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;slice&amp;gt;&lt;/code&gt; will always be an UnknownHTMLElement. &lt;br&gt;
&lt;code&gt;observedAttributes&lt;/code&gt;-like behaviour can only be created by adding a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"&gt;MutationObserver&lt;/a&gt; (&lt;em&gt;yes, works on Unknown Elements&lt;/em&gt;)&lt;br&gt;
You then get an extra bonus; because a MutationObserver can observe &lt;strong&gt;text Node&lt;/strong&gt; changes. &lt;br&gt;
A &lt;strong&gt;Custom Element&lt;/strong&gt; can not monitor the &lt;code&gt;innerHTML&lt;/code&gt; label.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#abusing-existing-html-tags"&gt;
  &lt;/a&gt;
  (ab)using &lt;strong&gt;existing&lt;/strong&gt; HTML tags
&lt;/h2&gt;

&lt;p&gt;We can test the "&lt;em&gt;WHATWG created a new HTML tag&lt;/em&gt;" scenario.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; is an &lt;strong&gt;existing&lt;/strong&gt; HTML tag &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;And for those who don't know. &lt;br&gt;
Many standard HTML elements, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;, &lt;strong&gt;&lt;em&gt;are&lt;/em&gt; Web Components&lt;/strong&gt; &lt;br&gt;
Browsers have different implementations; &lt;br&gt;
check out &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress"&gt;the &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; documentation page&lt;/a&gt; in Chrome, Firefox or Safari&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Similar to &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; (and using the same Base Class, available on &lt;a href="https://pie-meister.github.io"&gt;https://pie-meister.github.io&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;This chart (modelled after a Google Analytics chart):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vC-CgDup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K8mAUHM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vC-CgDup--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/K8mAUHM.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;is created by the &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; Web Component, from &lt;strong&gt;semantic HTML&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;progress-circle&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"75%"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;SEO&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"60%"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Social&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"65%"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"teal"&lt;/span&gt; &lt;span class="na"&gt;edge=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Maps&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"50%"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"orangered"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Traffic&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/progress-circle&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This Web Component uses shadowDOM to display the chart, the semantic HTML remains &lt;strong&gt;invisible&lt;/strong&gt; in &lt;strong&gt;lightDOM&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Thus you do not see the &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; default behaviour&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you really, &lt;em&gt;really&lt;/em&gt; want a "NO JavaScript!" version, you have to change the HTML, CSS (and Web Component code) a bit to work with &lt;em&gt;something like&lt;/em&gt; this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"75"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"SEO"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"60"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"orange"&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Social"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"65"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"teal"&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Maps"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;progress&lt;/span&gt; &lt;span class="na"&gt;max=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"orangered"&lt;/span&gt; &lt;span class="na"&gt;label=&lt;/span&gt;&lt;span class="s"&gt;"Traffic"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Traffic&lt;span class="nt"&gt;&amp;lt;/progress&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;again, the &lt;code&gt;&amp;lt;progress&amp;gt;&lt;/code&gt; elements remains &lt;strong&gt;invisible&lt;/strong&gt; in lightDOM&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the resulting chart is displayed &lt;strong&gt;in shadowDOM&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I only have to safeguard a duplicate naming conflict for the &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; Web Component.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As long as you can keep the output in &lt;strong&gt;invisible lightDOM&lt;/strong&gt;, &lt;br&gt;
you can (ab)use any &lt;strong&gt;existing HTML tag&lt;/strong&gt; for other purposes.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#piemeistergithubio"&gt;
  &lt;/a&gt;
  &lt;a href="https://Pie-Meister.github.io"&gt;Pie-Meister.github.io&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; Web Components are available, as &lt;em&gt;unlicensed&lt;/em&gt; source code, on &lt;a href="https://pie-meister.github.io"&gt;https://pie-meister.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BakCPGiO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/F6MSps6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BakCPGiO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/F6MSps6.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is an enhanced version of &lt;a href="https://dev.to/dannyengelman/what-web-technologies-are-required-to-draw-a-pie-chart-in-2021-spoiler-alert-a-standard-web-component-will-do-1j56"&gt;my previous &lt;code&gt;&amp;lt;pie-chart&amp;gt;&lt;/code&gt; post&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;instead of a SVG &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; Element, a &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; Element is used to draw slices. The &lt;code&gt;&amp;lt;progress-circle&amp;gt;&lt;/code&gt; can &lt;strong&gt;not&lt;/strong&gt; be created with &lt;code&gt;&amp;lt;circle&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uses shadowDOM &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;uses ::part shadowParts for optional global styling&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;all in vanilla JavaScript, (way) &lt;strong&gt;under 2 kB&lt;/strong&gt; GZipped&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a &lt;strong&gt;starting point&lt;/strong&gt; for you own Web Components&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webcomponents</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build Your First Reusable Components Using React</title>
      <author>Dimer</author>
      <pubDate>Sat, 24 Apr 2021 16:20:25 +0000</pubDate>
      <link>https://dev.to/dimer191996/build-your-first-reusable-components-using-react-41mg</link>
      <guid>https://dev.to/dimer191996/build-your-first-reusable-components-using-react-41mg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0-JrczDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylogg4c1gmih190jrpg0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0-JrczDS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ylogg4c1gmih190jrpg0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of contents
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;1.What are reusable components?&lt;br&gt;
2.Making a React component reusable&lt;br&gt;
4.Conclusion&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#what-are-reusable-components"&gt;
  &lt;/a&gt;
  What are reusable components?
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Reusable components are those React components that can be used multiple times in your application&lt;/strong&gt;&lt;/em&gt;. As a result, they need to be generic enough so that it‚Äôs free from complex business logic. If a component contains any complex logic inside it, not only does it become difficult to reuse, it also becomes less maintainable. &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;React Hooks&lt;/a&gt; are the perfect fit for reusable component logic.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;I'm straight up beginner , So if am lying on this `article` feel free to tell me üòÉ&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Let Goooo!ü¶∏‚Äç‚ôÇÔ∏è&lt;/p&gt;

&lt;p&gt;=&amp;gt; For example, the App component below has a button which can‚Äôt be reused since it has the onClick prop hardcoded in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleClick(e) {
 // Some function which does fake API call
 fakeApiCall(e.target.value);
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;button className="button" onClick={handleClick}&amp;gt;
       Submit
     &amp;lt;/button&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üòû Here, there is no way in which we can modify the text Submit which is rendered on the button.&lt;/p&gt;

&lt;p&gt;üòäBuuut Iiiif we want to make the above component reusable, we need to make it more generic. First, we can make a separate Button function which can be imported and reused multiple times in our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleClick(e) {
 // Some function which does fake API call
 fakeApiCall(e.target.value);
}

function Button() {
 return (
   &amp;lt;button className="button" onClick={handleClick}&amp;gt;
     Submit
   &amp;lt;/button&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we can reuse that Button component multiple times inside our App function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button /&amp;gt;
     &amp;lt;Button /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code renders the following user interface like:&lt;/p&gt;




&lt;p&gt;|Submit | |Submit |&lt;/p&gt;




&lt;p&gt;ü§î As you can see  ladyzz and gentlemanzz , we are already reusing one component multiple times. But, we still need to make it more generic because we might want to do different tasks with one click of a button. We can do a form submit, form reset or do another API call to fetch some sh** tone of data, for example.&lt;/p&gt;

&lt;p&gt;Let‚Äôs extract the handleClick function from our Button component and pass it as a prop. Our Button component will now look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 return (
   &amp;lt;button className="button" onClick={props.handleClick}&amp;gt;
     Submit
   &amp;lt;/button&amp;gt;
 );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And our App component will look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleClick(e) {
 // Some function which does fake API call
 fakeApiCall(e.target.value);
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button handleClick={handleClick} /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we can pass any function to the Button component through the handleClick prop. I highly suggest that you check your props using PropTypes.&lt;/p&gt;

&lt;p&gt;We can also use multiple Button components inside our App component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleAPICall(e) {
 // Do some API call
}

function handleFormReset(e) {
 // Reset some form data
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button handleClick={handleAPICall} /&amp;gt;
     &amp;lt;Button handleClick={handleFormReset} /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alright, alright, alright üòé! As you can see, we have made our Button component even more flexible. We can also pass the text which is rendered on the button as a prop.&lt;/p&gt;

&lt;p&gt;Our Button component will now look like the following:&lt;br&gt;
üé∂üé∂Tanrara rara üé∂üé∂ üòé&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 return (
   &amp;lt;button className="button" onClick={props.handleClick}&amp;gt;
     {props.label}
   &amp;lt;/button&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üòé And our App component will look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleAPICall(e) {
 // Do some API call
}

function handleFormReset(e) {
 // Reset some form data
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button handleClick={handleAPICall} label="Submit"/&amp;gt;
     &amp;lt;Button handleClick={handleFormReset} label="Reset"/&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It renders the following user interface like:&lt;/p&gt;




&lt;p&gt;|Submit | |Reset |&lt;/p&gt;




&lt;p&gt;It‚Äôs already very reusable. &lt;br&gt;
But üñêÔ∏èüîä "hold on wait a minute "üîä‚õî, we can also add certain additional props like whether to render an icon before the label of the button as well.&lt;/p&gt;

&lt;p&gt;To do that, we can change our Button component to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
  return (
    &amp;lt;button className="button" onClick={props.handleClick}&amp;gt;
      {props.icon} {props.label}
    &amp;lt;/button&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, we need to pass that icon prop from our App component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Button
   handleClick={handleAPICall}
   label="Submit"
   icon={&amp;lt;i className="fas fa-arrow-alt-circle-right" /&amp;gt;}
 /&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above example uses &lt;a href="https://fontawesome.com/how-to-use/on-the-web/using-with/react"&gt;font-awesome&lt;/a&gt; but you can use any font you want zaddy.&lt;/p&gt;

&lt;p&gt;üëá&lt;br&gt;
Also, it‚Äôs a good idea to render the icon prop only if it‚Äôs present. To do that, we just need to make the following changes to our Button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 return (
   &amp;lt;button className="button" onClick={props.handleClick}&amp;gt;
     {props.icon &amp;amp;&amp;amp; props.icon} {props.label}
   &amp;lt;/button&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#our-component-is-very-much-reusable-at-this-moment-we-can-also-pass-another-additional-prop-called-type-which-can-control-whether-the-button-will-be-primary-or-secondary"&gt;
  &lt;/a&gt;
  üòé Our component is very much reusable at this moment. We can also pass another additional prop called type which can control whether the button will be primary or secondary.
&lt;/h2&gt;

&lt;p&gt;We need to make the following changes to our Button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 const className = `button ${props.type}`

 return (
   &amp;lt;button className={className} onClick={props.handleClick}&amp;gt;
     {props.icon &amp;amp;&amp;amp; props.icon} {props.label}
   &amp;lt;/button&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we will be passing a type prop from our App component which will be passed to the className of the button.&lt;/p&gt;

&lt;p&gt;Our App component will now look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function handleAPICall(e) {
 // Do some API call
}

function handleFormReset(e) {
 // Reset some form data
}

function App() {
 return (
   &amp;lt;div className="app"&amp;gt;
     &amp;lt;Button
       handleClick={handleAPICall}
       label="Submit"
       icon={&amp;lt;i className="fas fa-arrow-alt-circle-right" /&amp;gt;}
       type="primary"
     /&amp;gt;
     &amp;lt;Button handleClick={handleFormReset} label="Reset" type="secondary" /&amp;gt;
   &amp;lt;/div&amp;gt;
 );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We would also need to add a few lines of CSS to our application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.button.primary {
 background-color: #0886ff;
}

.button.secondary {
 background-color: #73a800;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can distinguish between our #primary and #secondary buttons. It‚Äôs also a good idea now to add a #default #prop to our Button component so that it #renders #secondary buttons by #default. This is really helpful if we #forget to pass the #type #prop to our Button component. We need to make the following changes to our Button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Button(props) {
 const className = `button ${props.type}`

 return (
   &amp;lt;button className={className} onClick={props.handleClick}&amp;gt;
     {props.icon &amp;amp;&amp;amp; props.icon} {props.label}
   &amp;lt;/button&amp;gt;
 );
}

Button.defaultProps = {
 type: "secondary"
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we have another Button component which doesn‚Äôt have the type prop, it will be a secondary button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="app"&amp;gt;
 &amp;lt;Button
   handleClick={handleAPICall}
   label="Submit"
   icon={&amp;lt;i className="fas fa-arrow-alt-circle-right" /&amp;gt;}
   type="primary"
 /&amp;gt;
 &amp;lt;Button handleClick={handleFormReset} label="Reset" type="secondary" /&amp;gt;
 &amp;lt;Button handleClick={handleFormReset} label="Click" /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#i-will-be-back-"&gt;
  &lt;/a&gt;
  ü§ñ "I will be back "
&lt;/h6&gt;

&lt;p&gt;Follow me For Part II Tommmorrrrow , Honestly I just need a friends , but i will be back tho...&lt;/p&gt;

</description>
      <category>react</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
