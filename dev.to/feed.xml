<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Launched PandaDoc Tech Blog </title>
      <author>Valia Havryliuk</author>
      <pubDate>Tue, 21 Dec 2021 02:28:32 +0000</pubDate>
      <link>https://dev.to/valiahavryliuk/launched-pandadoc-tech-blog-3kek</link>
      <guid>https://dev.to/valiahavryliuk/launched-pandadoc-tech-blog-3kek</guid>
      <description>&lt;p&gt;Just 3 months ago, we launched PandaDoc for Developers. Since then, many developers have created their sandbox accounts and started exploring our API for free. &lt;/p&gt;

&lt;p&gt;We carefully collected all the feedback and feature requests that we received and have been working to continuously improve our API capabilities. &lt;/p&gt;

&lt;p&gt;And today, the first update is available! We are happy to announce the launch of 8 long-awaited API features to speed up and simplify your workflow: &lt;a href="https://medium.com/the-pandadoc-tech-blog/pandadoc-api-enhancements-4978006ae205"&gt;https://medium.com/the-pandadoc-tech-blog/pandadoc-api-enhancements-4978006ae205&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To get updates from our team in the future, please, follow our Medium publication!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>tutorial</category>
      <category>writing</category>
      <category>api</category>
    </item>
    <item>
      <title>Intro to Machine Learning</title>
      <author>Aya Ebrahim</author>
      <pubDate>Tue, 21 Dec 2021 01:54:18 +0000</pubDate>
      <link>https://dev.to/ayaebrahim/intro-to-machine-learning-fk9</link>
      <guid>https://dev.to/ayaebrahim/intro-to-machine-learning-fk9</guid>
      <description>&lt;p&gt;&lt;strong&gt;Welcome to my third blog!&lt;/strong&gt;&lt;br&gt;
In this blog, I am revising basic concepts in the Kaggle course (Intro to machine learning) and we'll build our very first model here and it's totally basic so, it doesn't require any experience in this topic, Let's start!&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Lesson 1 :&lt;/strong&gt;  How models work?&lt;/p&gt;

&lt;p&gt;Let's walk through the example there:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your cousin has made millions of dollars speculating on real estate. He's offered to become business partners with you because of your interest in data science. He'll supply the &lt;u&gt;money&lt;/u&gt;, and you'll supply &lt;u&gt;models &lt;/u&gt;that predict how much various houses are worth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you wondered how he predicted the house prices before he said by "intuition", But more questioning reveals that he's identified price patterns from houses he has seen in the past and he uses those patterns to make predictions for new houses he is considering.&lt;/p&gt;

&lt;p&gt;Machine learning works the same way. We'll start with a model called the &lt;strong&gt;Decision Tree&lt;/strong&gt;. There are fancier models that give more accurate predictions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Lb8FU6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shkdge6qxtngk33rdyxu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Lb8FU6i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shkdge6qxtngk33rdyxu.png" alt="Decision tree" width="475" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is that?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The DT (decision tree) divides houses into only &lt;u&gt;two categories&lt;/u&gt;.&lt;/li&gt;
&lt;li&gt;We use data to decide how to break the houses into two groups&lt;/li&gt;
&lt;li&gt;Then again to determine the predicted price in each group. This step of capturing patterns from data is called &lt;u&gt;fitting &lt;/u&gt;or &lt;u&gt;training &lt;/u&gt;the model.&lt;/li&gt;
&lt;li&gt;After data has been fit, you can apply it to new data to predict prices of additional new homes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Improving the Decision Tree&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--52Lm0Y5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvhw858jq7p7oz3ofrxp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--52Lm0Y5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvhw858jq7p7oz3ofrxp.png" alt="DT" width="880" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, It pops up in your mind that definitely DT 1 makes more sense as when the more no. of bedrooms the higher price it'll be, right?&lt;br&gt;
Well, This not totally true.&lt;br&gt;
As there are extra features (e.g. lot size, crime rate and so on).&lt;br&gt;
This will lead us to the &lt;strong&gt;deeper tree&lt;/strong&gt; that covers more features that definitely affects the predicted price and those are the extra "splits". &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c82lAVWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcpmvfdnjfjv5que03m0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c82lAVWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lcpmvfdnjfjv5que03m0.png" alt="Deep DT" width="709" height="449"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;leaf&lt;/strong&gt; is where we have our predicted price.&lt;/p&gt;

&lt;p&gt;The splits and values at the leaves will be determined by the data, so we need to check out the data we'll be working with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson 2 :&lt;/strong&gt; Basic Data Exploration (Examine your data)&lt;br&gt;
To build any ML model we need to be familiar and fully understand our data, In order to do so, One of the well known libraries is "Pandas".&lt;br&gt;
What's pandas?&lt;br&gt;
&lt;strong&gt;Pandas&lt;/strong&gt; is the primary tool used for exploring and manipulating data.&lt;br&gt;
&lt;em&gt;Pandas =&amp;gt; pd&lt;/em&gt;&lt;br&gt;
Let's import it :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import pandas as pd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most important part of the Pandas is the "DataFrame".&lt;br&gt;
A &lt;strong&gt;DataFrame&lt;/strong&gt; holds the type of data you might think of as a table. This is similar to a sheet in &lt;u&gt;Excel&lt;/u&gt;, or a table in a &lt;u&gt;SQL &lt;/u&gt;database.&lt;/p&gt;

&lt;p&gt;Pandas has powerful methods for most things we'll want to do with this type of data.&lt;br&gt;
Let's do some code!&lt;br&gt;
Check this dataset : &lt;a href="https://www.kaggle.com/dansbecker/melbourne-housing-snapshot"&gt;Homes in Melbourne, Australia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As usual, Check my &lt;a href="https://colab.research.google.com/drive/1wjJylgRKrS8oz_yqrnv4TPf3x5R7hVWA?usp=sharing"&gt;code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interpreting Data Description&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The results show &lt;strong&gt;8&lt;/strong&gt; numbers for each column in our original dataset. The first number is &lt;u&gt;count&lt;/u&gt; that shows how many rows have non-missing values.&lt;/p&gt;

&lt;p&gt;Missing values arise for many reasons. For example, the size of the 2nd bedroom wouldn't be collected when surveying a 1 bedroom house. We'll come back to the topic of missing data.&lt;/p&gt;

&lt;p&gt;The second value is the &lt;u&gt;mean&lt;/u&gt;, which is the average.&lt;br&gt;
The third value is &lt;u&gt; std &lt;/u&gt;(standard deviation) which measures how numerically spread out the values are.&lt;/p&gt;

&lt;p&gt;To interpret the &lt;strong&gt;min, 25%, 50%, 75% and max values&lt;/strong&gt;, imagine sorting each column from lowest to highest value.&lt;br&gt;
The first (smallest) value is the min.&lt;br&gt;
If you go a quarter way through the list, you'll find a number that is bigger than 25% of the values and smaller than 75% of the values that is the &lt;strong&gt;25%&lt;/strong&gt; value (pronounced "25th percentile").&lt;br&gt;
The 50th and 75th percentiles are defined analogously and the max is the largest number.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lesson 3 :&lt;/strong&gt;  Your First Machine Learning Model&lt;/p&gt;

&lt;p&gt;In this lesson, we'll apply what is explained above to build a model. Let's go!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selecting Data for Modeling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have so many variables here so, we'll pick a few of them using our intuition (for now).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To choose variables/columns, we'll need to see a list of all columns in the dataset.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;=&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;melbourne_data.columns
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output =&amp;gt; Index(['Suburb', 'Address', 'Rooms', 'Type', 'Price', 'Method', 'SellerG','Date', 'Distance', 'Postcode', 'Bedroom2', 'Bathroom', 'Car','Landsize', 'BuildingArea', 'YearBuilt', 'CouncilArea', 'Lattitude','Longtitude', 'Regionname', 'Propertycount'],dtype='object')&lt;/p&gt;

&lt;p&gt;We have some missing values&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We will take the simplest option for now and &lt;u&gt;drop&lt;/u&gt; houses from our data. (dropna as we can consider for now that "na" means "not available".)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;melbourne_data = melbourne_data.dropna(axis=0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we'll select pieces from our data&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Two approaches to be followed : &lt;/u&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;- Dot notation, which we use to select the "prediction target"&lt;/li&gt;
&lt;li&gt;- Selecting with a column list, which we use to select the "features"&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Selecting The Prediction Target&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can pull out a variable with dot-notation "."&lt;br&gt;
This single column is stored in a Series, which is like a df with only a single column of data.&lt;/p&gt;

&lt;p&gt;We'll use the dot notation to select the column we want to predict, which is called the &lt;strong&gt;prediction target&lt;/strong&gt;.&lt;br&gt;
We'll call the prediction target "y".&lt;br&gt;
So we need to save the house prices in the Melbourne data :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;y = melbourne_data.Price
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Choosing "Features"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The columns or "features." In our case, those would be used to determine the &lt;strong&gt;home price&lt;/strong&gt;. Sometimes, we will use all columns except the target one as features. Other times it'd be better with fewer features.&lt;/p&gt;

&lt;p&gt;For now, we'll build a model with only a few features. Later on we'll see how to iterate and compare models built with different features.&lt;/p&gt;

&lt;p&gt;We select multiple features by providing a list of column names.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Here is an example:&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;melbourne_features = ['Rooms', 'Bathroom', 'Landsize', 'Lattitude', 'Longtitude']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll call our data "X"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X = melbourne_data[melbourne_features]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see it more deep :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X.describe()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output =&amp;gt;   Rooms   Bathroom    Landsize    Lattitude   Longtitude&lt;br&gt;
count   6196.000000 6196.000000 6196.000000 6196.000000 6196.000000&lt;br&gt;
mean    2.931407    1.576340    471.006940  -37.807904  144.990201&lt;br&gt;
std 0.971079    0.711362    897.449881  0.075850    0.099165&lt;br&gt;
min 1.000000    1.000000    0.000000    -38.164920  144.542370&lt;br&gt;
25% 2.000000    1.000000    152.000000  -37.855438  144.926198&lt;br&gt;
50% 3.000000    1.000000    373.000000  -37.802250  144.995800&lt;br&gt;
75% 4.000000    2.000000    628.000000  -37.758200  145.052700&lt;br&gt;
max 8.000000    8.000000    37000.000000    -37.457090  145.526350&lt;/p&gt;

&lt;p&gt;And&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;X.head()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output =&amp;gt; &lt;br&gt;
     Rooms  Bathroom Landsize Lattitude Longtitude&lt;br&gt;
1   2   1.0 156.0   -37.8079    144.9934&lt;br&gt;
2   3   2.0 134.0   -37.8093    144.9944&lt;br&gt;
4   4   1.0 120.0   -37.8072    144.9941&lt;br&gt;
6   3   2.0 245.0   -37.8024    144.9993&lt;br&gt;
7   2   1.0 256.0   -37.8060    144.9954&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Building Our Model&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will use the &lt;strong&gt;scikit-learn&lt;/strong&gt; library to create our model.&lt;br&gt;
(sklearn) is the most popular library for modeling the types of data typically stored in DataFrames.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;The steps to building and using a model are:&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Define:&lt;/strong&gt; What type of model will it be? A decision tree? Some other type of model? Some other parameters of the model type are specified too.&lt;br&gt;
&lt;strong&gt;Fit:&lt;/strong&gt; Capture patterns from provided data. This is the heart of modeling.&lt;br&gt;
&lt;strong&gt;Predict:&lt;/strong&gt; Just what it sounds like&lt;br&gt;
&lt;strong&gt;Evaluate:&lt;/strong&gt; Determine how accurate the model's predictions are.&lt;/p&gt;

&lt;p&gt;Here is an example of defining a decision tree model with scikit-learn and fitting it with the features and target variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sklearn.tree import DecisionTreeRegressor

# Define model.Specify a number for random_state to ensure same results each run
melbourne_model = DecisionTreeRegressor(random_state=1)

# Fit model
melbourne_model.fit(X, y)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output =&amp;gt;&lt;br&gt;
DecisionTreeRegressor(random_state=1)&lt;/p&gt;

&lt;p&gt;Many machine learning models allow some randomness in model training.&lt;br&gt;
Specifying a number for random_state ensures you get the same results in each run.&lt;br&gt;
We use any number, and model quality won't depend on exactly what value we choose.&lt;/p&gt;

&lt;p&gt;We now have a &lt;strong&gt;fitted model&lt;/strong&gt; that we can use to &lt;strong&gt;make predictions&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print("Making predictions for the following 5 houses:")
print(X.head())
print("The predictions are")
print(melbourne_model.predict(X.head()))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output =&amp;gt; Making predictions for the following 5 houses:&lt;br&gt;
   Rooms  Bathroom  Landsize  Lattitude  Longtitude&lt;br&gt;
1      2       1.0     156.0   -37.8079    144.9934&lt;br&gt;
2      3       2.0     134.0   -37.8093    144.9944&lt;br&gt;
4      4       1.0     120.0   -37.8072    144.9941&lt;br&gt;
6      3       2.0     245.0   -37.8024    144.9993&lt;br&gt;
7      2       1.0     256.0   -37.8060    144.9954&lt;br&gt;
The predictions are&lt;br&gt;
[1035000. 1465000. 1600000. 1876000. 1636000.]&lt;/p&gt;




&lt;p&gt;Check my final code from &lt;a href="https://colab.research.google.com/drive/1cT2Sc8zw3Fiwz6oQ4Srk70kYneTe4VV6?usp=sharing"&gt;Here&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;That's all for today, We covered half of the course and we'll continue in the upcoming blog!&lt;br&gt;
Hope you learnt and know now how to build a model.&lt;/p&gt;




&lt;p&gt;&lt;u&gt;Resources and docs : &lt;/u&gt;&lt;/p&gt;

&lt;p&gt;1.&lt;a href="https://www.kaggle.com/learn/intro-to-machine-learning"&gt;Kaggle Course&lt;/a&gt;&lt;br&gt;
2.&lt;a href="https://www.w3schools.com/python/pandas/pandas_intro.asp"&gt;W3schools&lt;/a&gt;&lt;br&gt;
3.&lt;a href="https://pandas.pydata.org/"&gt;Pandas documentation&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>python</category>
      <category>beginners</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Vendure- The smart Shopify alternative</title>
      <author>mematthew123</author>
      <pubDate>Tue, 21 Dec 2021 01:02:22 +0000</pubDate>
      <link>https://dev.to/mematthew123/vendure-the-smart-shopify-alternative-54k4</link>
      <guid>https://dev.to/mematthew123/vendure-the-smart-shopify-alternative-54k4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XF-nFNYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oflz8u20zu6g4ljvfhai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XF-nFNYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oflz8u20zu6g4ljvfhai.png" alt="Vendure_logo" width="300" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#everything-you-need-nothing-you-dont"&gt;
  &lt;/a&gt;
  &lt;em&gt;Everything you need, nothing you don't&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://nodesource.com/products/nsolid"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HWgNG-b---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cldup.com/dTxpPi9lDf.thumb.png" alt="N|Solid" width="162" height="32"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://travis-ci.org/joemccann/dillinger"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K-WDP5GZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://travis-ci.org/joemccann/dillinger.svg%3Fbranch%3Dmaster" alt="Build Status" width="90" height="20"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In 2022 online sales are expected to continue to grow 16.1% compared to 2021, which was a record-breaking year in its own right. In-person shopping, however, is expected to remain flat for the foreseeable future. This has led to an influx of online stores opening for the first time as many business owners are seeking to capitalize on the benefits of online selling. &lt;/p&gt;

&lt;p&gt;When building an online store for yourself or a client, there are a plethora of options available due to the growing demand. Many clients and business owners want stores that are easy to maintain, built quickly, and are cost-effective. Checking all the boxes on this list is no small task, and many developers and store owners naturally gravitate towards monolithic options such as Shopify or WordPress due to the speed at which they can be built. The issue that many face when using these options is that customization can be non-existent or expensive (Plugins), and they are prone to creating a less than stellar customer service experience. &lt;/p&gt;

&lt;p&gt;On the other hand, customers have higher expectations than ever for their online and mobile shopping experiences. Universally consumers prefer their online shopping experience to be effortless and personal. &lt;/p&gt;

&lt;p&gt;Headless storefronts can be built on traditionally monolithic platforms however, this often still leaves a person depending on expensive plugins to enable standard back-end features. Other, newer options often come with high monthly charges and/or a percentage of your gross sales. This is a major hurdle for many small businesses that don't have the financial resources to hire a full development team. &lt;/p&gt;

&lt;p&gt;An option that I recently discovered that does a better job than either of the two aforementioned options is &lt;a href="//vendure.io"&gt;Vendure.io &lt;/a&gt;which is a headless e-commerce framework that is easy to set up, cheap to host ($5 mo), and you won't have to worry about feeling overwhelmed by the admin dashboard (cough cough wp). The admin dashboard is beautiful and intuitive, perfect to hand off to a client. Vendure was developed by Michael Bromley and released in 2019 and just released version 1.4. I am just getting started using Vendure but have highlighted a few aspects that have stood out in my eyes. Down below, I will also show a quick and easy way to get started with Vendure. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#built-with"&gt;
  &lt;/a&gt;
  Built with..
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Typescript&lt;/li&gt;
&lt;li&gt;Nestjs&lt;/li&gt;
&lt;li&gt;Graphql&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h4&gt;

&lt;h5&gt;
  &lt;a href="#-customizable"&gt;
  &lt;/a&gt;
  - Customizable
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;In Vendure, this is accomplished easily with a couple of lines of configuration. This is much more involved in other frameworks and can be a costly plugin depending on the platform.&lt;/li&gt;
&lt;li&gt;Custom the shopping experience by bringing your storefront. vendure has starters available for Next as well as Vue!&lt;/li&gt;
&lt;li&gt;Compatible with multiple payment gateways &lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#-scalable"&gt;
  &lt;/a&gt;
  - Scalable
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Sell an unlimited amount of products&lt;/li&gt;
&lt;li&gt;Marketplace capable &lt;/li&gt;
&lt;li&gt;Multi-Tenant capable &lt;/li&gt;
&lt;li&gt;Amazing support and community &lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#-costeffective"&gt;
  &lt;/a&gt;
  - Cost-effective
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Open-source &lt;/li&gt;
&lt;li&gt;Deployment on the digital ocean is around 5 a month&lt;/li&gt;
&lt;li&gt;No additional fees for using preferred payment gateway
&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#-approachable"&gt;
  &lt;/a&gt;
  - Approachable
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Easy to set up in an afternoon &lt;/li&gt;
&lt;li&gt;Easy to navigate and preconfigured dashboard&lt;/li&gt;
&lt;li&gt;Advanced image control&lt;/li&gt;
&lt;li&gt;Storefront starters&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started
&lt;/h2&gt;

&lt;p&gt;Step .5: Prerequisites&lt;br&gt;
    Basic understanding of TypeScript&lt;br&gt;
    Basic understanding of Node.js&lt;br&gt;
    Basic understanding of GraphQL&lt;br&gt;
    Basic understanding of SQL and databases &lt;/p&gt;

&lt;p&gt;Keep in mind that this is a beginner's guide and setup, that does not go into the full capabilities of Vendure.io.&lt;/p&gt;

&lt;p&gt;~#~#~#~#~#~#~#~&lt;br&gt;
If you are new to the world of Node.js, &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;. &lt;br&gt;
If you are new to GraphQL, &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt;. &lt;br&gt;
If you are new to SQL, &lt;a href="https://www.w3schools.com/sql/"&gt;SQL&lt;/a&gt;.&lt;br&gt;
If you are new to the world of TypeScript, &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;.&lt;br&gt;
~#~#~#~#~#~#~#~&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-we-go"&gt;
  &lt;/a&gt;
  Here we go!
&lt;/h3&gt;

&lt;p&gt;Step 1: Open a new terminal window enter the following command&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx @vendure/create my-app  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 2: Choose a Database- for this tutorial we will be using an SQLite database. &lt;/p&gt;

&lt;p&gt;Step 3: Choose a Language- for this tutorial we will be using TypeScript&lt;/p&gt;

&lt;p&gt;Step 4: Sample Data? Yes, please  &lt;/p&gt;

&lt;p&gt;Step 5: User name and Password? We will use the default settings provided which is superadmin/superadmin. This can be changed later in the dashboard  &lt;/p&gt;

&lt;p&gt;Step 6: Run the command  &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    cd my-app
    yarn start  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 7: Since the previous step will take a couple of minutes, this is a good time to get up stretch, grab a &lt;del&gt;beer&lt;/del&gt; coffee, and congratulate yourself on setting up your Vendure server&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nice-work-you-should-now-be-able-to-access-the-following"&gt;
  &lt;/a&gt;
  Nice work! You should now be able to access the following
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The Vendure Admin GraphQL API: http://localhost:3000/admin-api
The Vendure Shop GraphQL API: http://localhost:3000/shop-api
The Vendure Admin UI: http://localhost:3000/admin  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#but-what-does-it-mean"&gt;
  &lt;/a&gt;
  But what does it mean...?
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Admin GraphQL API: &lt;a href="http://localhost:3000/admin-api"&gt;http://localhost:3000/admin-api&lt;/a&gt; = Store permissions&lt;br&gt;
GraphQL API: &lt;a href="http://localhost:3000/shop-api"&gt;http://localhost:3000/shop-api&lt;/a&gt; = Putting items on the shelves and general store operations &lt;br&gt;
Admin UI: &lt;a href="http://localhost:3000/admin="&gt;http://localhost:3000/admin=&lt;/a&gt; View from the bosses desk&lt;br&gt;
(high five!)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-storefront"&gt;
  &lt;/a&gt;
  Creating a storefront
&lt;/h2&gt;

&lt;p&gt;There are two popular integrations available at the moment: Vue and Next&lt;br&gt;
Since I like Next over Vue~ Let's set up the Next js storefront&lt;/p&gt;

&lt;p&gt;Step 1. Verify that the Vendure server is set up for cookies and not bearer tokens &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RFrR1PFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0rnyeo46n1bwjy4b56v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RFrR1PFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0rnyeo46n1bwjy4b56v.png" alt="Vendure_config" width="610" height="194"&gt;&lt;/a&gt;&lt;br&gt;
Step 2. Fork and then clone this repo &lt;a href="https://github.com/vercel/commerce"&gt;https://github.com/vercel/commerce&lt;/a&gt;&lt;br&gt;
Step 3. NPM install and then create a .env.local file at the root of the project and add the following   &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    COMMERCE_PROVIDER=vendure
NEXT_PUBLIC_VENDURE_SHOP_API_URL=http://localhost:3000/shop-api 
NEXT_PUBLIC_VENDURE_LOCAL_URL=/vendure-shop-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 4.  Let's now double-check our tsconfig.json file and make sure that the correct framework is set up. It should show Vendure as the framework of choice, replacing "local" on lines 26 through 30. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    "@components/*": ["components/*"],
    "@commerce": ["framework/commerce"],
    "@commerce/*": ["framework/commerce/*"],
    "@framework": ["framework/vendure"],
    "@framework/*": ["framework/vendure/*"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Step 5.  In your terminal  enter the command "npm run dev" to start your storefront&lt;/p&gt;

&lt;p&gt;You should now see a fully populated store full of demo items. Let's go ahead and verify connectivity by going to our Vendure admin dashboard. Once signed we can add products and collections. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_BDF5J_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgkw6vlvaycic7a8d8vz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_BDF5J_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wgkw6vlvaycic7a8d8vz.png" alt="adding products" width="880" height="501"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we go back and check out our storefront we should see any new categories we created listed in the navbar, and a quick search should bring up any new products that are not displayed on the landing page. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5VTu4kpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmbud0bayv5hbkq77mu1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5VTu4kpI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vmbud0bayv5hbkq77mu1.png" alt="Added items" width="880" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Next js storefront comes with Tailwind CSS installed. The only thing left to do is add your personal touch! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tada-you-are-finished"&gt;
  &lt;/a&gt;
  TA-DA YOU ARE FINISHED
&lt;/h2&gt;

&lt;p&gt;If you have any questions about setting up Vendure, the Slack channel is full of helpful and knowledgeable people:  &lt;a href="https://vendure-ecommerce.slack.com"&gt;https://vendure-ecommerce.slack.com&lt;/a&gt;.  &lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>opensource</category>
      <category>webdev</category>
      <category>graphql</category>
    </item>
    <item>
      <title>Starting a Prisma + TypeScript Project</title>
      <author>Sabin Adams 🧑🏻‍💻</author>
      <pubDate>Tue, 21 Dec 2021 00:15:30 +0000</pubDate>
      <link>https://dev.to/sabinthedev/starting-a-prisma-typescript-project-4c3g</link>
      <guid>https://dev.to/sabinthedev/starting-a-prisma-typescript-project-4c3g</guid>
      <description>&lt;p&gt;With such a rich selection of ORMs out there, choosing which one to use for your JavaScript-based project can be tough.  Depending on your goals or stack you have a ton available: libraries like &lt;a href="https://typeorm.io/#/"&gt;TypeORM&lt;/a&gt;,  &lt;a href="https://sequelize.org/"&gt;Sequelize&lt;/a&gt;, and &lt;a href="https://mongoosejs.com/"&gt;Mongoose&lt;/a&gt;, and many more.&lt;/p&gt;

&lt;p&gt;In this article and throughout the rest of this series we'll be taking a deep dive into another option; One that offers tons of cool features, a unique "ORM" experience, and an active, dedicated team of developers supporting and working on it. That option is &lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-prisma"&gt;
  &lt;/a&gt;
  What is Prisma?
&lt;/h2&gt;

&lt;p&gt;At the most basic level, Prisma provides a set of tools that enable you to access and interact with your database. While offering many of the same features a traditional ORM would, Prisma describes itself as a &lt;em&gt;next-gen ORM&lt;/em&gt; because of its unique implementation of what is known as the "data-mapper" model of ORM and its careful consideration of Type-Safe interactions. &lt;/p&gt;

&lt;p&gt;Along with offering a great ORM tool (the Prisma Client), Prisma also offers a database migration tool called &lt;code&gt;Prisma Migrate&lt;/code&gt; and a nice GUI that allows you to visualize and update data in your connected database called &lt;code&gt;Prisma Studio&lt;/code&gt;. Our focus in this article and the rest of the series will be on the &lt;code&gt;Prisma Client&lt;/code&gt; and its rich feature-set.&lt;/p&gt;

&lt;p&gt;As we learn more about how Prisma works in this series, we will get to play with a lot of the features that make Prisma so powerful and different from the other tools available.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you'd like to learn more about the different types of ORMs and where Prisma fits in and differs from those, please give  &lt;a href="https://www.prisma.io/docs/concepts/overview/prisma-in-your-stack/is-prisma-an-orm#data-mapper"&gt;this page&lt;/a&gt; a read.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#jumping-in"&gt;
  &lt;/a&gt;
  Jumping In
&lt;/h2&gt;

&lt;p&gt;As much as I'd love to start going through all the benefits, downsides, use-cases, and don't-use-cases (that's a phrase right?) of Prisma, I'm sure you're anxious to get to the good stuff. Let's dive right into a super simple setup of Prisma so we can get some context into what Prisma is and take a look at the whats and why’s later on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This tutorial will assume a basic knowledge of JavaScript and its development ecosystem, TypeScript, and Database Terminology. If you want to brush up on these, check out these pages on &lt;a href="https://nodejs.dev/learn/an-introduction-to-the-npm-package-manager"&gt;npm&lt;/a&gt;, &lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;TypeScript&lt;/a&gt;, and &lt;a href="https://www.tutorialspoint.com/sqlite/index.htm"&gt;SQLite&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the example here we'll connect Prisma to a SQLite database, however Prisma currently also supports Postgres, MySQL, MSSQL, and MongoDB.&lt;/p&gt;

&lt;p&gt;To start things off, let's create a folder for our project and initialize &lt;code&gt;npm&lt;/code&gt; inside of it, which we will be using to install various packages. &lt;em&gt;(For all you yarn-lovers 🐈, feel free to use that instead)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &amp;lt;my-project&amp;gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; &amp;lt;my-project&amp;gt;
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll install our development dependencies for TypeScript and Prisma&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-d&lt;/span&gt; prisma typescript ts-node @types/node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With all of our packages installed, we can now configure TypeScript by adding a &lt;code&gt;tsconfig.json&lt;/code&gt; file, a simple TypeScript file, and a script to our &lt;code&gt;package.json&lt;/code&gt; that we can run to start our development server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;tsconfig.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;This&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;just&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;basic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;setup,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;feel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;free&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;tweak&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;needed&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"sourceMap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"outDir"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dist"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"strict"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lib"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"esnext"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"esModuleInterop"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.ts&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm Running!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;package.json&lt;/code&gt;,  add the following to the &lt;code&gt;"scripts"&lt;/code&gt; section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ts-node main"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, in your terminal at the root of your project run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and you should see output similar to the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJAw33Vp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639886675636/TNExe_Pet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJAw33Vp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639886675636/TNExe_Pet.png" alt="Screen Shot 2021-12-18 at 8.04.32 PM.png" width="666" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our project is set up with TypeScript and ready to get fancy! Now we'll move on to setting up Prisma.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#setting-up-prisma"&gt;
  &lt;/a&gt;
  Setting up Prisma
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#initializing"&gt;
  &lt;/a&gt;
  Initializing
&lt;/h3&gt;

&lt;p&gt;The steps to get Prisma going are pretty simple. We have the dependency installed already, so to start we'll just run Prisma's &lt;code&gt;init&lt;/code&gt; command and tell it we're going to use SQLite as our datasource. For a full list of options available to the &lt;code&gt;init&lt;/code&gt; command, check out these &lt;a href="https://www.prisma.io/docs/reference/api-reference/command-reference#run-prisma-init"&gt;docs&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;prisma init &lt;span class="nt"&gt;--datasource-provider&lt;/span&gt; sqlite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice a new folder in your project named &lt;code&gt;prisma&lt;/code&gt; as well as a &lt;code&gt;.env&lt;/code&gt; file in your project's root. The contents of that folder should just be a file named &lt;code&gt;schema.prisma&lt;/code&gt;, which is the file where we will define how the &lt;code&gt;Prisma Client&lt;/code&gt; should get generated and model our data.&lt;/p&gt;

&lt;p&gt;Then you'll need to tell Prisma where to output the SQLite db file. In the &lt;code&gt;.env&lt;/code&gt; file let's make sure the &lt;code&gt;DATASOURCE_URL&lt;/code&gt; env variable specifies a file location that makes sense (I'm outputting it directly into the &lt;code&gt;prisma&lt;/code&gt; folder):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DATABASE_URL="file:dev.db"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Prisma allows us to access &lt;code&gt;.env&lt;/code&gt; variables using the &lt;code&gt;env()&lt;/code&gt; function in a &lt;code&gt;.schema&lt;/code&gt; file. You can see its usage by opening up &lt;code&gt;prisma.schema&lt;/code&gt; and checking out the &lt;code&gt;url&lt;/code&gt; attribute of the &lt;code&gt;datasource&lt;/code&gt; block.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-our-data-model"&gt;
  &lt;/a&gt;
  Defining our Data Model
&lt;/h3&gt;

&lt;p&gt;There are various different kinds of blocks in a &lt;code&gt;.schema&lt;/code&gt; file that do different things and have tons of different options. We'll just set up a simple &lt;code&gt;User&lt;/code&gt; model for the purposes of this tutorial.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;model User {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;In a future article we'll dive deeper into the contents of this file and how to model out your data&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This defines a User table for Prisma so it will know how to generate a nice, typed client that allows us to interact with the data. Right now our database is empty though, we'll need to push our schema into the database to actually create that table. &lt;em&gt;(This command should also generate the &lt;code&gt;Prisma Client&lt;/code&gt; after pushing the schema)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;prisma db push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hIb-ZXOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640032724523/b3Z6Qpt6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hIb-ZXOI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640032724523/b3Z6Qpt6u.png" alt="Screen Shot 2021-12-20 at 12.38.41 PM.png" width="880" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After running that, we can make sure our table was created using &lt;code&gt;Prisma Studio&lt;/code&gt;. Run this command to open up the studio&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;prisma studio
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should open up a window at &lt;a href="http://localhost:5555"&gt;http://localhost:5555&lt;/a&gt; and look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PyhOG46p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640031349057/8ubZjL21f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyhOG46p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640031349057/8ubZjL21f.png" alt="Screen Shot 2021-12-20 at 12.15.42 PM.png" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click on the &lt;code&gt;User&lt;/code&gt; model you should see a nice table view of your database table with options to search and add rows to the table. Pretty sweet! This tool definitely comes in handy working with your data. &lt;/p&gt;

&lt;p&gt;Now that we've got our data modeled, the model available in the database, our datasources set up, AND the client generated, let's put it to use!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#prisma-client"&gt;
  &lt;/a&gt;
  Prisma Client
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Prisma Client&lt;/code&gt; is generated by default into your &lt;code&gt;node_modules&lt;/code&gt; folder under &lt;code&gt;@prisma/client&lt;/code&gt;. To start, go ahead and modify your &lt;code&gt;main.ts&lt;/code&gt;. Import and instantiate the Prisma client.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@prisma/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what does this do? This imports and creates an instance of the &lt;code&gt;PrismaClient&lt;/code&gt; class that was generated by Prisma based off of the model definitions you gave it. Right now our &lt;code&gt;main()&lt;/code&gt; function doesn't do anything, this is where we will add some code to interact with our data. &lt;/p&gt;

&lt;p&gt;The ending piece is important. Prisma opens up and handles connections automatically, however we need to tell it that when the application closes or reloads it should disconnect. If not, connections would be generated for each time your application starts and stay alive until manually disconnected. &lt;/p&gt;

&lt;p&gt;If your application gets an error when you try to run it, it is likely the Prisma Client was not generated on the &lt;code&gt;db push&lt;/code&gt;. Go ahead and run the following command to generate the Prisma Client and try again.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;prisma generate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#querying-the-database"&gt;
  &lt;/a&gt;
  Querying the Database
&lt;/h3&gt;

&lt;p&gt;We can now start playing with some data! In your &lt;code&gt;main()&lt;/code&gt; function, lets try to print out all of the &lt;code&gt;users&lt;/code&gt; in our database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you type that out, check out the awesome IntelliSense! Prisma generated a set of types and definitions for the Client to help make our lives easier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oQRhd60R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640033985653/iLXWOjzVq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oQRhd60R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640033985653/iLXWOjzVq.gif" alt="ezgif.com-gif-maker (1).gif" width="522" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty awesome! Although you may notice after running this the results are empty... that's because we have no data yet! We can fix that, head back over to the &lt;code&gt;Prisma Studio&lt;/code&gt; and add a record to your User table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PQhhQD-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640034269631/fUx3tHPGh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PQhhQD-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640034269631/fUx3tHPGh.gif" alt="Dec-20-2021 13-04-01.gif" width="844" height="234"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if you run your code again, you should see your user outputted in the console!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WLume7bw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640034343027/Chj02ASpV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WLume7bw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640034343027/Chj02ASpV.png" alt="Screen Shot 2021-12-20 at 1.05.40 PM.png" width="880" height="135"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;This is just the beginning, Prisma has such a rich set of features and potential for so much more. In the coming series we will be taking a deep look at everything Prisma has to offer, design patterns, custom extensions, and more! So if you enjoyed this and Prisma is piqueing your interest, keep an eye out for the coming articles.&lt;/p&gt;

&lt;p&gt;We managed to set up Prisma with TypeScript, a SQLite database, and an entire database client to connect to that database in this article with very little effort. That's pretty awesome to me. If you want to dig deeper and expand on what we talked about, check out the &lt;a href="https://www.prisma.io/docs/concepts/components/prisma-client"&gt;&lt;code&gt;Prisma Client&lt;/code&gt;&lt;/a&gt; docs.&lt;/p&gt;

&lt;p&gt;Thanks for reading, and happy coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>database</category>
    </item>
    <item>
      <title>Passing by Value vs Passing by Reference</title>
      <author>Rodolfo Machirica</author>
      <pubDate>Mon, 20 Dec 2021 23:34:19 +0000</pubDate>
      <link>https://dev.to/rmachirica/passing-by-value-vs-passing-by-reference-ili</link>
      <guid>https://dev.to/rmachirica/passing-by-value-vs-passing-by-reference-ili</guid>
      <description>&lt;p&gt;To talk about passing/copying values in JavaScript we need to talk about data types.&lt;br&gt;
JavaScript data types can be grouped into two categories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Simple data types&lt;/li&gt;
&lt;li&gt;Complex data types&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#simple-data-types-vs-complex-data-types"&gt;
  &lt;/a&gt;
  Simple data types vs complex data types
&lt;/h3&gt;

&lt;p&gt;The concept of copying/passing data by reference or copying/passing data by value occurs in the face of the difference between these two data types when it comes to assigning variables to variables and data mutation.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#copying-by-value"&gt;
  &lt;/a&gt;
  Copying by value
&lt;/h4&gt;

&lt;p&gt;Primitive data types like strings, numbers, Booleans, undefined, null, BigInt and symbol are copied by value; that is, two different variables holding primitive values cannot have the same memory address. Let us observe the example bellow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let myName = "Elijah Gabriel"; // name is pointing at the value "Elijah Gabriel".
let yourName = myName; 
console.log(yourName); //prints =&amp;gt; "Elijah Gabriel", a copy of myName.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, while yourName and myName hold the same value, they aren't the same thing in memory. myName has a unique memory address and so does yourName, have its own unique memory address.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#copying-by-reference"&gt;
  &lt;/a&gt;
  Copying by reference
&lt;/h4&gt;

&lt;p&gt;Unlike primitive types, complex data types like arrays and objects in JavaScript are copied or passed by reference; meaning, two different variable names can point to the same data. When an object intended as an object literal or an array object is created, a reference to that object is created and allocated an address in the memory. So, if you create an object and assign it to a new variable, an object reference will be created and both variables will now be pointing at the reference object in memory address.&lt;br&gt;
Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let reference = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]; // creates a reference array with a memory address
let refCopy = reference;// now both reference and refCopy are referencing the same array.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Image by Arnav Aggarwal, October 2017.&lt;br&gt;
! &lt;a href="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/norvt1zz9hnxukgyr8tj.png"&gt;diagram showing a referenced data&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;reference and Copy are pointing at the same array (reference) share the same memory address. This allows us to change properties in one objects or entries in one array and the change will be reflected in all variables pointing at the same reference. This is how it would look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;copy.pop();// 
console.log(reCopy) //prints to the console =&amp;gt; ["Monday", "Tuesday", "Wednesday", "Thursday"];
console.log(reference); // prints to the console =&amp;gt; ["Monday", "Tuesday", "Wednesday", "Thursday"];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we could see, all changes made to the variable copy affected the variable reference in the same manner, and it would be true vice-versa. &lt;/p&gt;

&lt;p&gt;Let us look at an example with objects intended as object literal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const users = {
   firstUser : {firstName: "Tinache",
                 lastName: "Sabonete",
      },
  secondUser : { firstName: "Clayde",
                  lastName:  "Magarrafa",
     },                       
};

const usersCopy = users;// both users and usersCopy are pointing at the same object in memory address.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we change any of the properties in one of the objects, that change will automatically be made in the other object as well, and this is because these two objects share the same reference at this moment. Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;usersCopy.firstUser = "online";
console.log(users);// prints=&amp;gt; {
   firstUser : "online",
  secondUser : { firstName: "Clayde",
                  lastName:  "Magarrafa",
     },                       
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We changed copyUsers, but that change was also reflected on users, and that is because they share a reference.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#breaking-reference-between-arrays-or-object-literals"&gt;
  &lt;/a&gt;
  Breaking reference between arrays or object literals.
&lt;/h4&gt;

&lt;p&gt;Here is a way to break a reference: if the copy variable or the variable reference is assigned to a completely new value, then the reference will be broken, and a new reference-to-be will be created for each of the arrays. Now let's see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;reference = [{weekend: ["Saturday", "Sunday"]}];
console.log(reference);//prints=&amp;gt; [{weekend: ["Saturday", "Sunday"]}].
console.log(copy)// prints =&amp;gt; ["Monday", "Tuesday", "Wednesday", "Thursday"].

users = {age: 23, occupation: "student"}
console.log(usersCopy);// prints=&amp;gt; {
   firstUser : "online",
  secondUser : { firstName: "Clayde",
                  lastName:  "Magarrafa",
     },                       
};// users and usersCopy are now totally different objects and are //stored in different addresses in memory.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The shared reference data between the variable reference and variable copy was broken; copy is still pointing to what the variable reference pointed to when it was created, and now reference points to a totally new value and have a new address in memory. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Simple data types variables have unique memory address, therefore they are passed by value and don't create a reference variable. Complex data type variables are passed by reference because during the variable assignment phase a reference object or object array is created, allowing for multiple variables to share a dwelling address in memory!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consulted-sources"&gt;
  &lt;/a&gt;
  Consulted sources:
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://dustinpfister.github.io/2017/11/13/js-copying-vs-referencing-objects-in-javascript/"&gt;https://dustinpfister.github.io/2017/11/13/js-copying-vs-referencing-objects-in-javascript/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0"&gt;https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/understanding-by-reference-vs-by-value-d49139beb1c4/"&gt;https://www.freecodecamp.org/news/understanding-by-reference-vs-by-value-d49139beb1c4/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0"&gt;https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0&lt;/a&gt; .&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Alhamdulillah! Successfully Completed</title>
      <author>Saif Al Siam</author>
      <pubDate>Mon, 20 Dec 2021 23:17:01 +0000</pubDate>
      <link>https://dev.to/alsiam/alhamdulillah-successfully-completed-imf</link>
      <guid>https://dev.to/alsiam/alhamdulillah-successfully-completed-imf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QZTFout1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6ca1wkvnxzimw3c8imh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QZTFout1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6ca1wkvnxzimw3c8imh.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Solving day 20 of Advent of Code 2021 in JavaScript</title>
      <author>Thibaut Patel</author>
      <pubDate>Mon, 20 Dec 2021 23:04:58 +0000</pubDate>
      <link>https://dev.to/thibpat/solving-day-20-of-advent-of-code-2021-in-javascript-pkn</link>
      <guid>https://dev.to/thibpat/solving-day-20-of-advent-of-code-2021-in-javascript-pkn</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/1GrRShOr82Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>challenge</category>
      <category>adventofcode</category>
      <category>javascript</category>
      <category>video</category>
    </item>
    <item>
      <title>Requests and Response for Beginners</title>
      <author>Patrick Ogwuru</author>
      <pubDate>Mon, 20 Dec 2021 22:28:03 +0000</pubDate>
      <link>https://dev.to/mod5ied/request-and-response-for-beginners-450h</link>
      <guid>https://dev.to/mod5ied/request-and-response-for-beginners-450h</guid>
      <description>&lt;p&gt;Have you asked the waiter at a restaurant to get you a dessert and they served you exactly what you wanted? Have you also asked for a Chicken-soup but got Chips instead? Well, believe it or not this is very similar to making requests and receiving responses on the web.&lt;br&gt;
From the previous article we understood that we can make requests to a server via a link or a portal commonly called an &lt;strong&gt;endpoint&lt;/strong&gt; or an &lt;strong&gt;API&lt;/strong&gt;; the server processes this request that we have made prepares a response accordingly and passes it back to us via the endpoint, hence we can work with the response as we please.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mT4gr9Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3w24w82m543q0ll1mjc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mT4gr9Iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3w24w82m543q0ll1mjc.jpg" alt="request" width="880" height="1320"&gt;&lt;/a&gt; &lt;br&gt;
A request could be of a number of type, we have the &lt;strong&gt;GET&lt;/strong&gt; request: this is one of the most common forms of request programmers and developers alike often use to get a resource from a server. Another type of request is the &lt;strong&gt;POST&lt;/strong&gt; request: this is a type of request that’s most commonly used in connotation to submitting a resource or a data to the server. It instructs the server to accept and store a data from the user/sender. We have other types of requests such as “&lt;strong&gt;PUT&lt;/strong&gt;, &lt;strong&gt;DELETE&lt;/strong&gt;, &lt;strong&gt;PATCH&lt;/strong&gt;, &lt;strong&gt;HEAD&lt;/strong&gt;, &lt;strong&gt;CONNECT&lt;/strong&gt;”. Note: all these can be more specifically termed – &lt;em&gt;http requests&lt;/em&gt;.&lt;br&gt;
A response on the other hand is gotten or received for the server in a number of formats, it could either be a blob, a *&lt;em&gt;JSON *&lt;/em&gt;(JavaScript Object Notation) data etc. Now to use this response, developers usually parse the response into other usable format (by default the browser returns a response in a format that is not readily usable), example the JSON format. It is always important to parse a response for the above reason.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zrns-2pe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1zh846kwcv6rotnic7b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zrns-2pe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c1zh846kwcv6rotnic7b.jpg" alt="bad-request" width="880" height="685"&gt;&lt;/a&gt;&lt;br&gt;
Note that, valid requests to a server via its endpoint leads to a successful or complete response. When you make an invalid request, the server could flag it as a bad request and reject, throwing an http status code to further explain the nature of that request.&lt;/p&gt;

&lt;p&gt;Having understood what requests are, we can now see how it relates to responses and how the server reacts to this via its endpoint or API. This is an interesting way to understand the concept of request and response which are also one of the core foundations of web development we should all understand. More interesting articles like this are available.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>That TypeScript argument...</title>
      <author>LUKESHIRU</author>
      <pubDate>Mon, 20 Dec 2021 21:56:48 +0000</pubDate>
      <link>https://dev.to/lukeshiru/that-typescript-argument-5c56</link>
      <guid>https://dev.to/lukeshiru/that-typescript-argument-5c56</guid>
      <description>&lt;p&gt;You can see pretty much daily &lt;a href="https://dev.to/search?q=typescript&amp;amp;sort_by=published_at&amp;amp;sort_direction=desc"&gt;here in DEV&lt;/a&gt; an article about how great or how bad TypeScript is, and then folks that don't share the opinion debating in the comments.&lt;/p&gt;

&lt;p&gt;Generally, the arguments for both "sides" are understandable. The people that support TypeScript will tell you everything about how great the DX is, and how the learning curve is worth it, while the people against it will tell you that the learning curve is too steep, and the added value of TS is too low to consider it.&lt;/p&gt;

&lt;p&gt;I'm ok with both opinions because at the end of the day they are just opinions and as such, you should use the tool that is more convenient for you, and TS is not for everyone. My problem is when the arguments are &lt;a href="https://en.wikipedia.org/wiki/Straw_man"&gt;straw mans&lt;/a&gt; and today I'll focus on one that I have seen a lot recently:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-argument"&gt;
  &lt;/a&gt;
  The argument
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"TypeScript isn't useful because it doesn't do runtime type checking"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The problem with this argument is not that it's "against TS", but actually that it's asking something from TS that doesn't even exist in other typed languages like it. The argument is based on ignoring the difference between type checking and data validation.&lt;/p&gt;

&lt;p&gt;The examples that folks use when they present this argument are usually APIs, file system access, user input, and other types of "unpredictable data". They say that even if you type those, you could get unpredictable data, so "TS is useless". This is a "straw man" because it presents an external problem unrelated to type checking, and then uses it as an argument against it.&lt;/p&gt;

&lt;p&gt;TypeScript is a tool for developers, not for consumers. As such is at the same level as JSDocs, ESLint, prettier, and other dev tools. It allows you to catch some errors earlier than prod in your editor, but once is "compiled" is just JavaScript, so is your responsibility as a dev to validate data you "can't trust".&lt;/p&gt;

&lt;p&gt;So, a function like this in TS is just fine:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because when you try to use it passing strings for example, it will yell at you in dev time. But now if we do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://swapi.dev/api/people/1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;People&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are doing things wrong, mainly because we are typing that response as &lt;code&gt;People&lt;/code&gt; and maybe we got something else from the API. In those scenarios you have several options, one is to use something like &lt;code&gt;Partial&lt;/code&gt; which makes all the properties of an object optional, so TS will tell you that &lt;code&gt;name&lt;/code&gt; could be undefined:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nb"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;People&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Response is not of type People&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Another solution is to have an abstraction layer on top of the API that generates the types and fallback values for you (you need to have a contract with your API, using stuff like swagger, GraphQL, or others). You can also use libs such as &lt;a href="https://gcanti.github.io/io-ts/"&gt;io-ts&lt;/a&gt; which does all the runtime checking for you while keeping it type-safe in dev.&lt;/p&gt;

&lt;p&gt;Now, going back to the argument: Saying that TS is useless because it doesn't do validations at runtime is just saying that you missed the point of TS completely. It would be the same as saying that ESLint is useless because it doesn't throw in prod when the user doesn't follow a linting rule, or it would be like asking Prettier to throw if the code is not formatted correctly in production.&lt;/p&gt;

&lt;p&gt;TypeScript is a tool to help in the dev process, and if you tried it, you know that even if it doesn't do validations at runtime, is extremely valuable as a tool for refactoring, documentation, autocompletion, and so on.&lt;/p&gt;

&lt;p&gt;Now, it would be a false argument as well to say that the only way of achieving this is with TypeScript. You can also use JSDocs and type your code with it, and thanks to the TS server you can get almost the same experience in vanilla JS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing"&gt;
  &lt;/a&gt;
  Closing
&lt;/h2&gt;

&lt;p&gt;Hope this article is useful enough to understand that your argument is not valid because:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;TS is not designed to do validations in production.&lt;/li&gt;
&lt;li&gt;All typed languages have the same issue, you should never trust stuff like user input, the file system, APIs, or any other "external source".&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point then you might understand why I say that the initial argument is a straw man because if we fix it, that argument is actually saying this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"TypeScript isn't useful because it doesn't do &lt;strong&gt;something it wasn't designed to do in the first place&lt;/strong&gt;"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which is kinda ridiculous.&lt;/p&gt;

&lt;p&gt;That's it, thanks for reading!&lt;br&gt;
Cheers!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Add test coverage badge for  PHP and Pest in your GitHub repository</title>
      <author>Roberto B.</author>
      <pubDate>Mon, 20 Dec 2021 21:39:48 +0000</pubDate>
      <link>https://dev.to/robertobutti/add-test-coverage-badge-for-php-and-pest-in-your-github-repository-37mo</link>
      <guid>https://dev.to/robertobutti/add-test-coverage-badge-for-php-and-pest-in-your-github-repository-37mo</guid>
      <description>&lt;p&gt;If you walk through across GitHub repositories, you can see that most of them show some badges. A badge is a sort of icon that show you the status of your code, your repository, your workflow, etc.&lt;/p&gt;

&lt;p&gt;In your Readme file in your GitHub repository, you can include your badges.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q35lpvuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh22cjyqvf9y9ewqnpip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q35lpvuP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kh22cjyqvf9y9ewqnpip.png" alt="Test coverage badge" width="880" height="58"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Badges are for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;show package version;&lt;/li&gt;
&lt;li&gt;number download;&lt;/li&gt;
&lt;li&gt;issues information (totals, opened, closed ...);&lt;/li&gt;
&lt;li&gt;result of test executions;&lt;/li&gt;
&lt;li&gt;result from GitHub Actions workflows;&lt;/li&gt;
&lt;li&gt;etc...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A good website where to generate badges is &lt;a href="https://shields.io/"&gt;https://shields.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't find a badge that fits your need, you can create one, or you can use some tools specific for your needs.&lt;br&gt;
In my last project, I needed to measure the test code coverage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Code coverage is the percentage of code which is covered by automated tests. Code coverage measurement simply determines which lines of code / instructions have been executed through a test run, and which lines / instructions have not. The percentage is calculated based on code covered and all code (number of lines of code).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Normally, the result is shown in the terminal if your test suite is executed in a terminal, for example via command line.&lt;br&gt;
You have also the option to save the result in some specific file with a "standard" format.&lt;br&gt;
For example, "clover" format is an XML file that reports code coverage e some other nice metrics.&lt;br&gt;
If you run the test suite in your GitHub Actions workflow, you need a specific action that is able to read clover format and use the value of coverage to render a badge.&lt;br&gt;
Then a badge needs to be committed to the repository.&lt;br&gt;
To recap:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;execute test in GitHub Actions workflow;&lt;/li&gt;
&lt;li&gt;save the report in clover format (clover.xml file);&lt;/li&gt;
&lt;li&gt;use an "Actions" that: read the clover.xml file, produces the badge and commit/push the new badge on the repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the Readme file, you need to include the badge image.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#execute-test-in-github-actions-workflow"&gt;
  &lt;/a&gt;
  Execute test in GitHub Actions workflow
&lt;/h2&gt;

&lt;p&gt;To execute tests, you can use PHPUnit or Pest. Both tools have the option for saving the report in &lt;em&gt;clover&lt;/em&gt; format (Pest uses the feature provided by PHPUnit).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Execute tests (Unit and Feature tests) via PestPHP&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;vendor/bin/pest --coverage-clover clover.xml&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way, the &lt;em&gt;clover.xml&lt;/em&gt; file is created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-badge"&gt;
  &lt;/a&gt;
  Create a badge
&lt;/h2&gt;

&lt;p&gt;For creating the badge, I found this Actions: &lt;a href="https://github.com/marketplace/actions/phpunit-coverage-badge"&gt;phpunit-coverage-badge&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This actions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reads clover.xml file;&lt;/li&gt;
&lt;li&gt;saves the badge file &lt;em&gt;coverage_badge_path&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;optionally, commits and pushes the badge via &lt;em&gt;push_badge&lt;/em&gt; option;&lt;/li&gt;
&lt;li&gt;for pushing the badge to the repo you need to set the &lt;em&gt;repo_token&lt;/em&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Generate test coverage badge&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;timkrase/phpunit-coverage-badge@v1.2.0&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;coverage_badge_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;badge-coverage.svg'&lt;/span&gt;
          &lt;span class="na"&gt;push_badge&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;repo_token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, every time you push your code on &lt;em&gt;main&lt;/em&gt; branch, the test suite is executed and the badge is updated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-readme-file"&gt;
  &lt;/a&gt;
  Update Readme file
&lt;/h2&gt;

&lt;p&gt;Now that the badge file is created, you need to include it into your readme file with the typical markdown syntax for images:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;![Test Coverage&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="sx"&gt;https://raw.githubusercontent.com/Hi-Folks/array/main/badge-coverage.svg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;](https://packagist.org/packages/hi-folks/array)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to replace &lt;em&gt;Hi-Folks/array&lt;/em&gt; with your &lt;em&gt;org/repo&lt;/em&gt; of your project.&lt;br&gt;
The current badge is:&lt;br&gt;
&lt;a href="https://packagist.org/packages/hi-folks/array"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o4AHjCVO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/Hi-Folks/array/main/badge-coverage.svg" alt="Test Coverage" width="100" height="20"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-workflow-file"&gt;
  &lt;/a&gt;
  The workflow file
&lt;/h2&gt;

&lt;p&gt;The whole yaml file (you need to save it in .github/workflows directory):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Test Coverage PHP Package&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;laravel-tests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;operating-system&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;ubuntu-latest&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;php-versions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;8.0'&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;
        &lt;span class="na"&gt;dependency-stability&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;prefer-none'&lt;/span&gt; &lt;span class="pi"&gt;]&lt;/span&gt;

    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;P${{ matrix.php-versions }} - L${{ matrix.laravel }} - ${{ matrix.dependency-stability }} - ${{ matrix.operating-system}}&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install PHP versions&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;shivammathur/setup-php@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;php-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.php-versions }}&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Dependencies&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps.vendor-cache.outputs.cache-hit != 'true'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update Dependencies with latest stable&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;matrix.dependency-stability == 'prefer-stable'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer update --prefer-stable&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update Dependencies with lowest stable&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;matrix.dependency-stability == 'prefer-lowest'&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;composer update --prefer-stable --prefer-lowest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>github</category>
      <category>testing</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Tools for testing Functional Web Apps</title>
      <author>Taylor Beseda</author>
      <pubDate>Mon, 20 Dec 2021 21:38:21 +0000</pubDate>
      <link>https://dev.to/begin/tools-for-testing-functional-web-apps-52n1</link>
      <guid>https://dev.to/begin/tools-for-testing-functional-web-apps-52n1</guid>
      <description>&lt;p&gt;&lt;small&gt;Photo by &lt;a href="https://unsplash.com/photos/3GZi6OpSDcY"&gt;Nicolas Thomas&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;If you're building critical cloud functions to return API results, handle evented business operations (like &lt;a href="https://blog.begin.com/posts/2021-11-17-shopify-webhooks"&gt;Shopify webhooks&lt;/a&gt;), or render web views, you'll want to incorporate some tests. It's essential to test their internals, inputs, and outputs in a predictable context. We want a utilitarian toolchain to ensure core services function as expected. Where each test can run in isolation, in an unmodified Node.js context. The test suite should run quickly and deterministically; helpful in local development and ideal in CI, where computing resources might be limited.&lt;/p&gt;

&lt;p&gt;Our tests should be proportionate to our functions in scope and size. Ideally, tests are fast and small, just like the services they're testing. (We're &lt;a href="https://blog.begin.com/posts/2021-12-01-fat-function-anti-pattern"&gt;not building fat functions&lt;/a&gt;, right?)&lt;/p&gt;

&lt;p&gt;For the sake of brevity, this discussion is limited to a Node.js runtime, but the principles are the same for other environments. Additionally, we won't worry about testing user interfaces or varying browser environments; those utilities are another post entirely.&lt;/p&gt;

&lt;p&gt;So what's a good approach? Which libraries should be candidates?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-comparison"&gt;
  &lt;/a&gt;
  A comparison
&lt;/h2&gt;

&lt;p&gt;Several frameworks with performant runners help execute atomic tests, even concurrently. Some important considerations are library capabilities (like assertions), package size, maturity, and level of maintenance. Let's look at a collection of the most popular, up to date modules on npm today:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Library&lt;/th&gt;
&lt;th&gt;Size&lt;/th&gt;
&lt;th&gt;Concurrent&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;Updated&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/avajs/ava"&gt;Ava&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;281 kB&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;3.15.0&lt;/td&gt;
&lt;td&gt;2021-11-01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://jasmine.github.io/setup/nodejs.html"&gt;Jasmine&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;47 kB&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;3.10.0&lt;/td&gt;
&lt;td&gt;2021-10-13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://hapi.dev/module/lab"&gt;@hapi/lab&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;160 kB&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;24.4.0&lt;/td&gt;
&lt;td&gt;2021-11-09&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://mochajs.org/"&gt;Mocha&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3.8  &lt;em&gt;&lt;strong&gt;MB&lt;/strong&gt;&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;9.1.3&lt;/td&gt;
&lt;td&gt;2021-10-15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://node-tap.org/"&gt;Node Tap&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;28.3  &lt;em&gt;&lt;strong&gt;MB&lt;/strong&gt;&lt;/em&gt;
&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;15.1.5&lt;/td&gt;
&lt;td&gt;2021-11-26&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/substack/tape"&gt;tape&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;248 kB&lt;/td&gt;
&lt;td&gt;No&lt;sup&gt;1&lt;/sup&gt;
&lt;/td&gt;
&lt;td&gt;5.3.2&lt;/td&gt;
&lt;td&gt;2021-11-16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/lukeed/uvu"&gt;uvu&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;46 kB&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;0.5.2&lt;/td&gt;
&lt;td&gt;2021-10-08&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;achievable with tape-esque libraries like &lt;code&gt;mixed-tape&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#a-note-about-jest"&gt;
  &lt;/a&gt;
  A note about Jest
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;"But where’s Jest?"&lt;/em&gt; you ask. Don’t get me wrong, I understand the appeal of a framework with so many pleasantries. Jest’s feature-set is impressive and battle-tested. Unfortunately, tools like Jest, in order to accomplish so much, are opinionated. Jest uses implicit globals and its own context. It may not execute code the same way our servers will. This pattern can require all sorts of configuration bloat and transpilation, making debugging (especially in CI) tedious. In my view, Jest is not appropriate for what we're testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unpacked-module-size"&gt;
  &lt;/a&gt;
  Unpacked module size
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Emphasis on sizes &amp;gt; 1 MB in the above table is intentional.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since we're running our tests in a cloud environment (in addition to locally), disk space matters.&lt;/p&gt;

&lt;p&gt;Unfortunately, the library that most appeals to me, Node Tap, is just too large. At 28 MB, &lt;code&gt;tap&lt;/code&gt; isn't very portable and will occupy a large part of allotted space in an environment like AWS Lambda. Hopefully, this limitation won't always be an issue, but it's an important factor for now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-recommended-testing-stack"&gt;
  &lt;/a&gt;
  A recommended testing “stack”
&lt;/h2&gt;

&lt;p&gt;I think any of the above options are viable, depending on your use case and preference. For example, if BDD is preferable, &lt;code&gt;jasmine&lt;/code&gt; has you covered. &lt;code&gt;ava&lt;/code&gt; has excellent TypeScript support. &lt;code&gt;uvu&lt;/code&gt; is super fast and works with ESM. And if you're looking for staying power, &lt;code&gt;mocha&lt;/code&gt; has been around for nearly a decade!&lt;/p&gt;

&lt;p&gt;For us at Begin and &lt;a href="https://arc.codes/"&gt;Architect&lt;/a&gt;, &lt;a href="https://github.com/substack/tape"&gt;tape&lt;/a&gt; has been in use for several years. &lt;code&gt;tape&lt;/code&gt; has a stable and straightforward API, routine maintenance updates, and outputs &lt;a href="https://testanything.org/"&gt;TAP&lt;/a&gt;, making it really versatile. While TAP is legible, it's not the most human-readable format. Fortunately, several TAP reporters can help display results for developers. Until recently, Begin's TAP reporter of choice was &lt;code&gt;tap-spec&lt;/code&gt;. Sadly &lt;code&gt;tap-spec&lt;/code&gt; wasn't kept up to date and npm began reporting vulnerabilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-new-tap-reporter"&gt;
  &lt;/a&gt;
  A new TAP reporter
&lt;/h3&gt;

&lt;p&gt;Enter &lt;a href="https://github.com/architect/tap-arc"&gt;&lt;code&gt;tap-arc&lt;/code&gt;&lt;/a&gt;. Heavily inspired by &lt;code&gt;tap-spec&lt;/code&gt; (a passing suite's output is nearly identical), &lt;code&gt;tap-arc&lt;/code&gt; is a minimal, streaming TAP reporter with useful expected vs. actual diffing. We're still improving the package, but it's definitely on par with &lt;code&gt;tap-spec&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback?
&lt;/h2&gt;

&lt;p&gt;I'm super interested in what others are doing in this realm. How are you testing cloud functions? What factors are important when selecting test utilities? Do you test in the same environment you're deploying to?&lt;/p&gt;

</description>
      <category>testing</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>serverless</category>
    </item>
    <item>
      <title>I'm setting a year-end contributor goal for Owncast!</title>
      <author>Gabe Kangas</author>
      <pubDate>Mon, 20 Dec 2021 21:35:47 +0000</pubDate>
      <link>https://dev.to/gabek/im-setting-a-year-end-contributor-goal-for-owncast-3gg2</link>
      <guid>https://dev.to/gabek/im-setting-a-year-end-contributor-goal-for-owncast-3gg2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-this-about"&gt;
  &lt;/a&gt;
  What is this about?
&lt;/h2&gt;

&lt;p&gt;Many people find around the end of the year to have some spare moments to spread their wings and experiment with things outside of work. So I'm issuing a challenge to myself to reach out to these people and get &lt;strong&gt;three&lt;/strong&gt; new people to contribute to Owncast, the self-hosted, free and open source live video and chat server, before the end of the year.&lt;/p&gt;

&lt;p&gt;Each person that contributes to a project, even once, injects their ideas, approaches, energy and personality into it, leaving it better than when they found it. But I understand it's often daunting to step into something new, and a formal invitation is sometimes helpful. This is your invite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-owncast"&gt;
  &lt;/a&gt;
  What is Owncast?
&lt;/h2&gt;

&lt;p&gt;Owncast is a 100% free and open source piece of software you can get up and running in &lt;a href="https://owncast.online/quickstart/installer/"&gt;about a minute&lt;/a&gt; to host your own live streams in a similar style to Twitch or YouTube Live. It's been steadily growing for the past year and you can read more about it, as well see a list of other contributors, at &lt;a href="https://owncast.online"&gt;owncast.online&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-you-help-with"&gt;
  &lt;/a&gt;
  What can you help with?
&lt;/h2&gt;

&lt;p&gt;Owncast is a React frontend project with a Go backend. In general fewer people have been contributing to Owncast on the frontend, so I'm reaching out to you frontend people especially! If you're comfortable with React-powered projects we'd love to have you jump in on something. Either from our list of &lt;a href="https://github.com/owncast/owncast/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22+-label%3Ahack+-label%3Abacklog"&gt;"good first issues"&lt;/a&gt;, the &lt;a href="https://github.com/owncast/owncast/issues?q=is%3Aopen+is%3Aissue+label%3A%22bug%22+label%3A%22Web+frontend%22+"&gt;list of bugs&lt;/a&gt;, or something new that you think could be improved.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-begin"&gt;
  &lt;/a&gt;
  Where to begin?
&lt;/h2&gt;

&lt;p&gt;Feel free to reach out to me directly and say hello via email at &lt;a href="mailto:gabek@real-ity.com"&gt;gabek@real-ity.com&lt;/a&gt;. You can also find me on &lt;a href="https://mastodon.social/@gabek"&gt;the Fediverse&lt;/a&gt;, message me here on Dev, or join the &lt;a href="https://owncast.rocket.chat/"&gt;Owncast project chat&lt;/a&gt; where we hang out.&lt;/p&gt;

&lt;p&gt;More than anything it's awesome to meet new people, and I'd love to hear what your interests are and see where there might be some overlap, for as long or as short of a time as you like. I look forward to meeting you!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>streaming</category>
      <category>web</category>
      <category>react</category>
    </item>
  </channel>
</rss>
