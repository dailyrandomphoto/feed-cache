<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Binary search is not for sorted arrays only !</title>
      <author>Rounit Ranjan Sinha</author>
      <pubDate>Thu, 13 Jan 2022 17:56:45 +0000</pubDate>
      <link>https://dev.to/rounit08/binary-search-is-not-for-sorted-arrays-only--2aba</link>
      <guid>https://dev.to/rounit08/binary-search-is-not-for-sorted-arrays-only--2aba</guid>
      <description>&lt;p&gt;While talking about ' Binary Search ' , we consider that it will only work for "Sorted arrays" , but that's not the condition.&lt;/p&gt;

&lt;p&gt;It will work for " Unsorted arrays" also ,&lt;/p&gt;

&lt;p&gt;yes but only one kind of "unsorted array" ,&lt;br&gt;
i.e., &lt;em&gt;The Rotated Array&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It can be done in O(log n) time complexity , like a binary search , but it uses different method .&lt;br&gt;
It uses "adjusted divide and conquer algorithm"&lt;br&gt;
The DACüëç&lt;/p&gt;

&lt;p&gt;And ssshhhh ü§´ &lt;strong&gt;&lt;em&gt;it will be solved recursively only&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>New Year Resolution Tracker with Weekly Automated Reports</title>
      <author>Alex</author>
      <pubDate>Thu, 13 Jan 2022 17:30:39 +0000</pubDate>
      <link>https://dev.to/alexyct/new-year-resolution-tracker-with-weekly-automated-reports-o27</link>
      <guid>https://dev.to/alexyct/new-year-resolution-tracker-with-weekly-automated-reports-o27</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;For the MongoDB Atlas Hackathon, we created a web app to help you track and achieve your new year resolutions in 2022! Link to the project:¬†&lt;a href="https://nyrtracker.vercel.app/"&gt;https://nyrtracker.vercel.app&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is difficult staying on top of your new year resolutions. Two key reasons why people, including myself, fail to stay on top of their resolutions include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forgetting about them over time&lt;/li&gt;
&lt;li&gt;Not knowing how to better achieve&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, our web app uses MongoDB to address these issues by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sending daily reminders for you to log data and track your progress&lt;/li&gt;
&lt;li&gt;Sending automated weekly reports to summarise your progress, provide insights on how you can better achieve your goals, and prompt you to write journals.&lt;/li&gt;
&lt;li&gt;Providing a dashboard to visualise your data/progress, display the insights in your weekly report, and provide a space to add memos about your resolutions.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is an effective way to automate the data collection and analysis process that many of us go through (and forget about over time). Given the time constraints of the hackathon, our web app only supports exercising as a new year resolution.&lt;/p&gt;

&lt;p&gt;Try out the app on¬†&lt;a href="https://nyrtracker.vercel.app/"&gt;https://nyrtracker.vercel.app/&lt;/a&gt;¬†by signing up with your Google account. Alternatively, you can check out screenshots below in this post. Enjoy!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Automation Innovation: We use MongoDB Atlas Serverless Instances to automate the weekly data aggregation and analysis I perform regarding my new year resolution progress tracking.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/alexyct"&gt;
        alexyct
      &lt;/a&gt; / &lt;a href="https://github.com/alexyct/new-year-resolution-tracker"&gt;
        new-year-resolution-tracker
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h3&gt;
Overview of My Submission&lt;/h3&gt;
&lt;p&gt;For the MongoDB Atlas Hackathon, we created a web app to help you track and achieve your new year resolutions in 2022! Link to the project:¬†&lt;a href="https://nyrtracker.vercel.app/" rel="nofollow"&gt;https://nyrtracker.vercel.app&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is difficult staying on top of your new year resolutions. Two key reasons why people, including myself, fail to stay on top of their resolutions include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Forgetting about them over time&lt;/li&gt;
&lt;li&gt;Not knowing how to better achieve&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, our web app uses MongoDB to address these issues by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sending daily reminders for you to log data and track your progress&lt;/li&gt;
&lt;li&gt;Sending automated weekly reports to summarise your progress, provide insights on how you can better achieve your goals, and prompt you to write journals.&lt;/li&gt;
&lt;li&gt;Providing a dashboard to visualise your data/progress, display the insights in your weekly report, and provide a space to add memos about your resolutions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is an effective way to automate the data‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/alexyct/new-year-resolution-tracker"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Some technologies we used:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; &amp;amp; &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mongodb.com/"&gt;MongoDB&lt;/a&gt; Atlas Serverless Instances&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://axios-http.com/docs/intro"&gt;Axios&lt;/a&gt; for HTTP requests&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://next-auth.js.org/"&gt;Next-auth&lt;/a&gt; for authentication&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nodemailer.com/"&gt;Nodemailer&lt;/a&gt; &amp;amp; &lt;a href="https://www.easycron.com/"&gt;Easycron&lt;/a&gt; for daily and weekly emails&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/chart"&gt;Google Charts&lt;/a&gt; for data visualisation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Some screenshots of the app:&lt;/strong&gt;&lt;br&gt;
Dashboard&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----qdC_Ex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhtl78mvafrq3ngbr5uz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----qdC_Ex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhtl78mvafrq3ngbr5uz.png" alt="Dashboard" width="880" height="855"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add Data Screen&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x3SR1836--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zaeqq0tq79gq7oagsp7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x3SR1836--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zaeqq0tq79gq7oagsp7h.png" alt="Add Data Screen" width="880" height="855"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add Memo Screen&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zEJaox7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3l9hoyo735qjwjz77sj7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zEJaox7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3l9hoyo735qjwjz77sj7.png" alt="Add Memo Screen" width="880" height="855"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Weekly Report Email&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fIhzyy2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0m7p087a4tix2zlbjt3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fIhzyy2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n0m7p087a4tix2zlbjt3.png" alt="Weekly Report Email" width="880" height="364"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Mobile&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GCgf39pN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo66n93vgk1exa71pof1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GCgf39pN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo66n93vgk1exa71pof1.png" alt="Mobile View" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For judges of the Hackathon, we recognise that you may not have time to actually try to app and wait a week for the automated reports. So if you sign in to the app, you will see buttons that sends you a demo of the weekly automated report (as well as demo of the daily reminders).&lt;/p&gt;

&lt;p&gt;Hope you like our project!&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Complete Django CRUD Web app with MongoDB Atlas</title>
      <author>&gt;&gt;&gt;&gt;su Shubham////?[0]</author>
      <pubDate>Thu, 13 Jan 2022 17:27:42 +0000</pubDate>
      <link>https://dev.to/shubham8268/complete-django-crud-web-app-with-mongodb-atlas-h4g</link>
      <guid>https://dev.to/shubham8268/complete-django-crud-web-app-with-mongodb-atlas-h4g</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;This is a Complete Django CRUD Webapp with MongoDB Atlas. I made this project to take participate in MongoDB Atlas hackathon in dev.to&lt;/p&gt;

&lt;p&gt;I made this using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Design Django Form with Bootstrap and crispy forms&lt;/li&gt;
&lt;li&gt;MongoDB Atlas for backend&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The complete backend is made by django and for database I used MongoDB Atlas.&lt;br&gt;
There are many collection but, auth_user, employee_register_employee and employee_postion_employee are the main collection in crud Database of CRUD Cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mrCVQ1Ds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nhckdt4s8o7jh4h0mp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mrCVQ1Ds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0nhckdt4s8o7jh4h0mp1.png" alt="Cluster_image" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To connect django with MongoDB Atlas I used djongo library and pymongo made for python to connect with MongoDB.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J0pXHpXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xw31y2m42meyx7o9n0h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J0pXHpXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5xw31y2m42meyx7o9n0h.png" alt="database connection" width="880" height="221"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is how the web app looks like&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DEMO VIDEO:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Hjr55-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/286w7mfmqv05mtmdkv8z.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Hjr55-u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/286w7mfmqv05mtmdkv8z.gif" alt="demo video" width="680" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;REGISTER PAGE:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YcznomOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y5x9lchhudi6mlbst8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YcznomOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y5x9lchhudi6mlbst8a.png" alt="register page" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EMPLOYEE LIST PAGE:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVHkc7RT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l280pr7wt1tr0s8kkd27.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVHkc7RT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l280pr7wt1tr0s8kkd27.png" alt="Employee list" width="880" height="424"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#how-you-will-see-this-project"&gt;
  &lt;/a&gt;
  How you will see this project
&lt;/h4&gt;
&lt;h5&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  &lt;strong&gt;STEP 1:&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Fork this repo and clone it using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/shubham8268/Django-CRUD-Operations
cd Django-CRUD-Operations

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;br&gt;&lt;br&gt;
The Django skeleton is look like this:&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l_eVs9N0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tttn1xoqpghopcqt3ye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l_eVs9N0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8tttn1xoqpghopcqt3ye.png" alt="Django Structure" width="567" height="499"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h5&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  &lt;strong&gt;STEP 2:&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Install virtualenv then create a virtual environment test:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install virtualenv
virtualenv test
source test/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Install all the dependencies using:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pip3 install -r requirements.txt
cd employee_project

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  &lt;strong&gt;STEP 3:&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Now you can see the website in your localhost:8000 using:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python3 manange.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Choose Your Own Adventure: Create an application using MongoDB Atlas that doesn‚Äôt fit into any of the categories above.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/shubham8268"&gt;
        shubham8268
      &lt;/a&gt; / &lt;a href="https://github.com/shubham8268/Django-CRUD-Operations"&gt;
        Django-CRUD-Operations
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Complete Django CRUD Webapp with MongoDB Atlas&lt;/h1&gt;
&lt;p&gt;This is a Complete Django CRUD Webapp with MongoDB Atlas. I made this project to take participate in MongoDB Atlas hackathon in dev.to&lt;/p&gt;
&lt;p&gt;I made this using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Design Django Form with Bootstrap and crispy forms&lt;/li&gt;
&lt;li&gt;MongoDB Atlas for backend&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The complete backend is made by django and for database I used MongoDB Atlas
There are many collection but, auth_user, employee_register_employee and employee_postion_employee are the main collection.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/75021117/149378147-207effff-fc50-4098-93f2-d9e0b3556dbc.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rD-PXEii--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/75021117/149378147-207effff-fc50-4098-93f2-d9e0b3556dbc.png" alt="CLUSTER"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To connect django with MongoDB Atlas I used djongo library and pymongo made for python to connect with MongoDB.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/shubham8268/Django-CRUD-OperationsCONNECTION.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ey-NDvqm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/shubham8268/Django-CRUD-OperationsCONNECTION.png" alt="database connection"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is how the web app looks like&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DEMO VIDEO:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/shubham8268/Django-CRUD-OperationsDEMO.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AV4yyBpZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/shubham8268/Django-CRUD-OperationsDEMO.gif" alt="database connection"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;REGISTER PAGE:&lt;/strong&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/shubham8268/Django-CRUD-OperationsREGISTER%20PAGE.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M4IHOfeB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/shubham8268/Django-CRUD-OperationsREGISTER%2520PAGE.png" alt="database connection"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EMPLOYEE LIST PAGE:&lt;/strong&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/shubham8268/Django-CRUD-OperationsEMPLOYEE%20LIST.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t0MPGYj6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/shubham8268/Django-CRUD-OperationsEMPLOYEE%2520LIST.png" alt="database connection"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
How you will see this project&lt;/h2&gt;
&lt;h4&gt;
&lt;strong&gt;STEP 1:&lt;/strong&gt;
&lt;/h4&gt;
&lt;p&gt;Fork this repo and clone it using:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/shubham8268/Django-CRUD-Operations
cd Django-CRUD-Operations
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br&gt;
The Django skeleton is look like this
&lt;br&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/shubham8268/Django-CRUD-Operationsstructure.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BKqFu21i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/shubham8268/Django-CRUD-Operationsstructure.png" alt="Django structure"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4&gt;
&lt;strong&gt;STEP 2:&lt;/strong&gt;
&lt;/h4&gt;
&lt;p&gt;Install virtualenv then create a virtual environment test:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;
&lt;pre&gt;&lt;code&gt;pip3 install virtualenv
virtualenv test&lt;/code&gt;&lt;/pre&gt;‚Ä¶&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/shubham8268/Django-CRUD-Operations"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;This was my first time using MongDB as the database for a website which was a really great experience of using noSQL specially MongoDB Atlas, I'm also planning to use it in my future projects.&lt;br&gt;
I learned about &lt;a href="https://pymongo.readthedocs.io/en/stable/"&gt;pymongo package&lt;/a&gt; and &lt;a href="https://www.djongomapper.com/"&gt;djongo&lt;/a&gt; availabe for python. I took help from &lt;a href="https://www.mongodb.com/compatibility/mongodb-and-django"&gt;How to Use Django with MongoDB&lt;/a&gt; document.&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Roadmap to being a Full Stack Web Developer</title>
      <author>Shashank shekhar</author>
      <pubDate>Thu, 13 Jan 2022 17:22:20 +0000</pubDate>
      <link>https://dev.to/shashank2k19/roadmap-to-being-a-full-stack-web-developer-11m7</link>
      <guid>https://dev.to/shashank2k19/roadmap-to-being-a-full-stack-web-developer-11m7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hey, DEV.to community!&lt;br&gt;
I was thinking of how I started my web dev career and suddenly I remembered how furious I was when I was looking for the right thing to do or even where to start!&lt;/p&gt;

&lt;p&gt;As a tech beginner, knowing what to learn and in what order to learn them is often an issue. There are tons of programming language in the web development community, as well as a plenty of tools to be conversant with. It‚Äôs easy to get lost.&lt;br&gt;
This is why I have come up with a web development roadmap for newcomer and aspiring web developers, along with their respective resources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-web-development-"&gt;
  &lt;/a&gt;
  What is Web Development ?
&lt;/h2&gt;

&lt;p&gt;Web development refers to the building, creating, and maintaining of websites. It includes aspects such as web design, web publishing, web programming, and database management. It is the creation of an application that works over the internet i.e. websites.&lt;/p&gt;

&lt;p&gt;The word Web Development is made up of two words, that is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web: It refers to websites, web pages or anything that works over the internet.&lt;/li&gt;
&lt;li&gt;Development: Building the application from scratch.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#frontend-web-development"&gt;
  &lt;/a&gt;
  Front-End Web Development
&lt;/h2&gt;

&lt;p&gt;The front end of a website is the part that users interact directly with. It is also known as the 'client side' of the application. It includes everything that Users experience directly: text colors and styles, images, graphs and tables, buttons, colors, and navigation menu. Front-end development is done using HTML, CSS, and JavaScript. Whenever a website, web application, or mobile app is opened, front end developers implement the structure, design, behavior, and content on the browser screen. Among the main goals of the Front End are responsiveness and performance. There should be no part of the website that behaves abnormally irrespective of the screen size, the developer must ensure that the site is responsive, i.e. that it appears correctly on devices of all sizes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eS4qBuUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9odvy3alcbq0cjwhviv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eS4qBuUr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b9odvy3alcbq0cjwhviv.png" alt="Image description" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backend-web-development"&gt;
  &lt;/a&gt;
  Back-End Web Development
&lt;/h2&gt;

&lt;p&gt;The backend of a website is server-side. The server stores and organizes data, and ensures there is no problem on the client end of the web page. It is the part of the website that can not be seen or interacted with. It is the part of the software that does not have direct contact with users. Backend designers develop software components and characteristics that end users can access indirectly through a front-end application. Besides creating APIs, establishing libraries, and working with systems without user interfaces, the backend also includes scientific programming systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#text-editor-and-ide"&gt;
  &lt;/a&gt;
  Text Editor and IDE
&lt;/h2&gt;

&lt;p&gt;What you need to start is an IDE. IDE stands for Integrated Development Environment. They will help you write your codes faster and debug them easier. But the most popular ones are the ones below:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#vs-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt;
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7jxZONMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gys9cn4y66w4tv98bau9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7jxZONMq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gys9cn4y66w4tv98bau9.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visual Studio Code is a source-code editor made by Microsoft for Windows, Linux and macOS. Features include support for debugging, syntax highlighting, intelligent code completion, snippets, code refactoring, and embedded Git. Users can change the theme, keyboard shortcuts, preferences, and install extensions that add additional functionality.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#sublime-text-3"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.sublimetext.com/"&gt;Sublime Text 3&lt;/a&gt;
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HNBX9ApD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sz5x5aw384x00d2k9rkx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HNBX9ApD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sz5x5aw384x00d2k9rkx.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sublime Text is a commercial source code editor. It natively supports many programming languages and markup languages. Users can expand its functionality with plugins, typically community-built and maintained under free-software licenses. &lt;/p&gt;

&lt;blockquote&gt;
&lt;h4&gt;
  &lt;a href="#atom"&gt;
  &lt;/a&gt;
  &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt;
&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRqK5amI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu4xjbzhl1wib3t5ukln.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZRqK5amI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uu4xjbzhl1wib3t5ukln.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Atom is a free and open-source text and source code editor for macOS, Linux, and Microsoft Windows with support for plug-ins written in JavaScript, and embedded Git Control. Developed by GitHub,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;First things first, I will suggest you try your hands on the most demanded or popular programming languages in the industry (this is quite relative) and go with the one you feel most comfortable with and in respect to how great you are at learning it.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;p&gt;HTML stands for HyperText Markup Language. It is used to design web pages using a markup language. It is the combination of Hypertext and Markup language. Hypertext defines the link between the web pages. A markup language is used to define the text document within tag which defines the structure of web pages. It is a markup language that is used by the browser to manipulate text, images, and other content to display in the required format.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.w3schools.com/html/"&gt;https://www.w3schools.com/html/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/html-tutorials/"&gt;https://www.geeksforgeeks.org/html-tutorials/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;CSS (Cascading Style Sheets) is a stylesheet language used to design the webpage to make it attractive. It is used to describe the look and formatting of a document written in a markup language. It provides an additional feature to HTML. It is generally used with HTML to change the style of web pages and user interfaces. It can also be used with any kind of XML documents including plain XML, SVG, and XUL.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/css/"&gt;https://www.w3schools.com/css/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/css-tutorials/"&gt;https://www.geeksforgeeks.org/css-tutorials/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CSS Frameworks&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A CSS framework comprises several CSS stylesheets ready for use by web developers and designers. The stylesheets are prepped for use for standard web design functions: setting colors, layout, fonts, navbars, etc. &lt;br&gt;
With a CSS framework, the user has a completed CSS stylesheet, and they only have to code the HTML with accurate classes, structure, and IDs to set up a web page. The framework already has classes built-in for common website elements ‚Äì footer, slider, navigation bar, hamburger menu, column-based layouts, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://getbootstrap.com/docs/5.0/getting-started/introduction/"&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bulma.io/"&gt;Bulma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://materializecss.com/"&gt;Materialize CSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sass"&gt;
  &lt;/a&gt;
  SASS
&lt;/h2&gt;

&lt;p&gt;Sass is the short form of Syntactically Awesome Style Sheet. It is an upgrade to Cascading Style Sheets (CSS). Sass is a CSS pre-processor. It is fully compatible with every version of CSS. Sass reduces the repetition of CSS and therefore saves time. Due to its advanced features it is often termed as Sassy CSS. SCSS have file extension of &lt;code&gt;.scss&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/sass/default.php"&gt;https://www.w3schools.com/sass/default.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/sass-introduction/"&gt;https://www.geeksforgeeks.org/sass-introduction/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript is the world most popular lightweight, interpreted compiled programming language. It is also known as scripting language for web pages. It is well-known for the development of web pages, many non-browser environments also use it. JavaScript can be used for Client-side developments as well as Server-side developments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/js/"&gt;https://www.w3schools.com/js/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/javascript-tutorial/"&gt;https://www.geeksforgeeks.org/javascript-tutorial/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#reactjs"&gt;
  &lt;/a&gt;
  ReactJS
&lt;/h2&gt;

&lt;p&gt;React is a declarative, efficient, and flexible JavaScript library for building user interfaces. ReactJS is an open-source, component-based front-end library responsible only for the view layer of the application.&lt;br&gt;
React uses a declarative paradigm that makes it easier to reason about your application and aims to be both efficient and flexible. It designs simple views for each state in your application, and React will efficiently update and render just the right component when your data changes. The declarative view makes your code more predictable and easier to debug.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/REACT/DEFAULT.ASP"&gt;https://www.w3schools.com/REACT/DEFAULT.ASP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/react-js-introduction-working/"&gt;https://www.geeksforgeeks.org/react-js-introduction-working/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#nodejs"&gt;
  &lt;/a&gt;
  Nodejs
&lt;/h2&gt;

&lt;p&gt;Node.js is a run time platform to run server-side apps in JavaScript. It adopted the V8 browser engine to interpret JavaScript code on the server. It comes with its own set of built-in modules in its standard library for running server-side apps and allows for interaction with hardware directly.&lt;/p&gt;

&lt;p&gt;It can let us manipulate files and do many things on a computer. It‚Äôs different from JavaScript in the browser since it does completely different things. One of the things Node.js can do is run a webserver to serve static and dynamic content.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/nodejs/"&gt;https://www.w3schools.com/nodejs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/introduction-to-node-js/"&gt;https://www.geeksforgeeks.org/introduction-to-node-js/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mongodb"&gt;
  &lt;/a&gt;
  MongoDB
&lt;/h2&gt;

&lt;p&gt;MongoDB, the most popular NoSQL database, is an open-source document-oriented database. The term ‚ÄòNoSQL‚Äô means ‚Äònon-relational‚Äô. It means that MongoDB isn‚Äôt based on the table-like relational database structure but provides an altogether different mechanism for storage and retrieval of data. This format of storage is called BSON ( similar to JSON format). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/nodejs/nodejs_mongodb.asp"&gt;https://www.w3schools.com/nodejs/nodejs_mongodb.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/mongodb-an-introduction/"&gt;https://www.geeksforgeeks.org/mongodb-an-introduction/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#git"&gt;
  &lt;/a&gt;
  Git
&lt;/h2&gt;

&lt;p&gt;A super cool tool you need to learn is &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt;. Git is a version controlling software which will help you store different versions of your code and never lose your back-up. There are free git hosts like &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; and &lt;a href="https://bitbucket.org/product"&gt;BitBucket&lt;/a&gt; which you can use to store your codes online.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GG2PPxUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89ecff7rfptvmdf07e10.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GG2PPxUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89ecff7rfptvmdf07e10.jpg" alt="Image description" width="880" height="351"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Thanks for reading this article so far. You might be thinking that there is so much stuff to learn, so many courses to join, but you don't need to worry.&lt;br&gt;
There is a good chance that you may already know most of the stuff, and there are also a lot of useful¬†free resources¬†which you can use, I have also linked them here and there along with best resources, which are certainly not free, but worth of money.&lt;/p&gt;

&lt;p&gt;At the end of the day, you should have enough knowledge and experience about the things mentioned here.&lt;br&gt;
Good luck with your Web Development journey! It's certainly¬†not going to be easy, but by following this roadmap and guide, you are one step closer to becoming the Web Developer, you always wanted to be.&lt;/p&gt;

&lt;p&gt;Also, you can leave you suggestions in the comment section and give a reaction if you enjoyed reading it üíñ&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Feel free to connect with me on &lt;a href="https://www.linkedin.com/in/shashank-shekhar-523306156/"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://twitter.com/this_is_Shashnk"&gt;Twitter&lt;/a&gt; | &lt;a href="https://www.instagram.com/shashank._.shekhar_/"&gt;Instagram&lt;/a&gt;&lt;br&gt;
Also checkout my &lt;a href="https://mrshekhar.live/"&gt;Portfolio Website&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>career</category>
    </item>
    <item>
      <title>How to show recent GitHub activities on your profile readme</title>
      <author>Sachin Chaurasiya</author>
      <pubDate>Thu, 13 Jan 2022 17:17:50 +0000</pubDate>
      <link>https://dev.to/sachinchaurasiya/how-to-show-recent-github-activities-on-your-profile-readme-23he</link>
      <guid>https://dev.to/sachinchaurasiya/how-to-show-recent-github-activities-on-your-profile-readme-23he</guid>
      <description>&lt;p&gt;We all know Github is a great platform to collaborate with people and contribute to open source projects.   daily, we do perform some activities on GitHub like creating an issue, creating a pull request, code review and all other things.&lt;/p&gt;

&lt;p&gt;These are the activities that get added to our contributions and we get a green square for each day with our contributions counts.&lt;/p&gt;

&lt;p&gt;For Example, contribution count graph like this,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0k6sUCqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642088656573/WeTNEMO3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0k6sUCqP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642088656573/WeTNEMO3f.png" alt="image.png" width="880" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we click on any box we will get activities of that day something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VXLud94x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642088945299/-GcVzoR6N.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VXLud94x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642088945299/-GcVzoR6N.png" alt="image.png" width="880" height="676"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see my activities of date &lt;code&gt;10th October 2021&lt;/code&gt;, I created some commits and opened some issues.&lt;/p&gt;

&lt;p&gt;Have you ever thought of showing your GitHub activities on your Profile Readme?&lt;/p&gt;

&lt;p&gt;You will be thinking like is that even possible? yes, it is possible and today in this article, we will be discussing how to show our recent GitHub activities on our profile readme.&lt;/p&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;p&gt;We will be going to use Github Actions that will help us to create a workflow to show our recent activities on Profile readme.&lt;/p&gt;

&lt;p&gt;before jumping into the setup let's first discuss what are GitHub actions and what they are used for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-github-actions"&gt;
  &lt;/a&gt;
  What are GitHub actions?
&lt;/h2&gt;

&lt;p&gt;GitHub actions are a set of events and workflow, whenever specified events happen to your GitHub repository it will run the associated workflow for it.&lt;/p&gt;

&lt;p&gt;want to learn more about Github actions, you can get started from &lt;a href="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions"&gt;here&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cP0I9w2coGU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-activity-readme"&gt;
  &lt;/a&gt;
  GitHub - Activity - Readme
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;GitHub - Activity - Readme&lt;/strong&gt; is a Github action that will update your profile readme with recent GitHub activity.&lt;/p&gt;

&lt;p&gt;It is created by &lt;strong&gt;James George&lt;/strong&gt; you can check his profile &lt;a href="https://github.com/jamesgeorge007"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;to work with this action we will need to set up a workflow that will be running automatically to update the profile readme with recent activities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-workflow"&gt;
  &lt;/a&gt;
  Setting up workflow
&lt;/h3&gt;

&lt;p&gt;we can easily set up this workflow in our profile repository to capture and update profile readme with recent activities.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-the-raw-github-endraw-folder-in-your-profile-repository-if-it-does-not-exist"&gt;
  &lt;/a&gt;
  Create the &lt;code&gt;.github&lt;/code&gt; folder in your profile repository if it does not exist.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; mkdir .github
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-the-raw-workflows-endraw-folder-inside-the-raw-github-endraw-folder-if-it-does-not-exist"&gt;
  &lt;/a&gt;
  Create the &lt;code&gt;workflows&lt;/code&gt; folder inside the &lt;code&gt;.github&lt;/code&gt;folder if it does not exist.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt;mkdir .github/workflows
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-the-raw-workflownameyml-endraw-file-inside-raw-workflows-endraw-folder"&gt;
  &lt;/a&gt;
  Create the &lt;code&gt;{workflowname}.yml&lt;/code&gt; file inside &lt;code&gt;workflows&lt;/code&gt; folder.
&lt;/h4&gt;

&lt;p&gt;where you can replace  &lt;strong&gt;workflow name&lt;/strong&gt; with your workflow name. I will give the name &lt;code&gt;update-readme.yml&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; update-readme.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;after creating a workflow file add this content to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update README&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;*/5&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*"&lt;/span&gt; &lt;span class="c1"&gt;# Runs every 5 minutes.&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Update this repo's README with recent activity&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;jamesgeorge007/github-activity-readme@master&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;COMMIT_MSG&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Updated&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;README&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;with&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;recent&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;activity"&lt;/span&gt;
          &lt;span class="na"&gt;MAX_LINES&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#here-we-have-three-main-components-of-the-workflow"&gt;
  &lt;/a&gt;
  Here we have three main components of the workflow
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;on&lt;/li&gt;
&lt;li&gt;jobs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's discuss them one by one&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;name&lt;/strong&gt; is the name of the workflow after workflow run If you see the actions tab in your repository you will get workflow runs like this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RXRkDeiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642090901545/UQ3bn-6LK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RXRkDeiQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642090901545/UQ3bn-6LK.png" alt="image.png" width="880" height="90"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;on&lt;/strong&gt; is used for defining what action you want to run this workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;here we are running this workflow on &lt;code&gt;schedule&lt;/code&gt; using a cron job to run this workflow every 5 minutes automatically.&lt;/p&gt;

&lt;p&gt;If you don't know much about cron syntax this may be helpful for you&lt;br&gt;
&lt;a href="https://crontab.guru"&gt;The quick and simple editor for cron schedule expressions&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;jobs&lt;/strong&gt; is used for defining what to do when an event happens on our repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;here we are defining only one job that is &lt;strong&gt;build&lt;/strong&gt; which will commit on our repository with the message &lt;strong&gt;Update this repo's README with recent activity&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;for jobs, we will need to define what environment it will be running and we are running this job on &lt;code&gt;ubuntu&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;also, we will need to define what steps to use, something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      - uses: actions/checkout@v2
      - uses: jamesgeorge007/github-activity-readme@master
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;env&lt;/code&gt; is used for automatic token authentication.&lt;br&gt;
you don't need to worry about &lt;code&gt;secrets.GITHUB_TOKEN&lt;/code&gt; will automatically get referred from your GitHub account.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you notice we are using the &lt;code&gt;with&lt;/code&gt; attribute for 2nd action that is &lt;code&gt;jamesgeorge007/github-activity-readme@master&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;here we are providing 2 options &lt;code&gt;COMMIT_MSG&lt;/code&gt; and &lt;code&gt;MAX_LINES&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;COMMIT_MSG - Commit message used while committing to the repository.&lt;/li&gt;
&lt;li&gt;MAX_LINES - The most number of lines should populate in your readme file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, I hope we are clear with all the components of a workflow.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-last-step-is-to-add-this-content-to-your-profile-raw-readmemd-endraw-file"&gt;
  &lt;/a&gt;
  The Last step is to add this content to your profile &lt;code&gt;README.md&lt;/code&gt; file.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Recent Activity :zap:
&amp;lt;!--START_SECTION:activity--&amp;gt;
&amp;lt;!--END_SECTION:activity--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Think of it like a block that will get replaced by your recent activities.&lt;/p&gt;

&lt;p&gt;For Example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Recent Activity :zap:

&amp;lt;!--START_SECTION:activity--&amp;gt;
1. üéâ Merged PR [#2197](https://github.com/open-metadata/OpenMetadata/pull/2197) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
2. ‚ùóÔ∏è Closed issue [#2040](https://github.com/open-metadata/OpenMetadata/issues/2040) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
3. ‚ùóÔ∏è Closed issue [#2028](https://github.com/open-metadata/OpenMetadata/issues/2028) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
4. ‚ùóÔ∏è Closed issue [#2156](https://github.com/open-metadata/OpenMetadata/issues/2156) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
5. üó£ Commented on [#2156](https://github.com/open-metadata/OpenMetadata/issues/2156) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
6. üéâ Merged PR [#2154](https://github.com/open-metadata/OpenMetadata/pull/2154) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
7. ‚ùóÔ∏è Closed issue [#2087](https://github.com/open-metadata/OpenMetadata/issues/2087) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
8. ‚ùóÔ∏è Opened issue [#2156](https://github.com/open-metadata/OpenMetadata/issues/2156) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
9. ‚ùóÔ∏è Opened issue [#2147](https://github.com/open-metadata/OpenMetadata/issues/2147) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
10. ‚ùóÔ∏è Closed issue [#1876](https://github.com/open-metadata/OpenMetadata/issues/1876) in [open-metadata/OpenMetadata](https://github.com/open-metadata/OpenMetadata)
&amp;lt;!--END_SECTION:activity--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example of my profile readme with recent activities&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W6R9YFdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642092043619/6FPB6gSY4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W6R9YFdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642092043619/6FPB6gSY4.png" alt="image.png" width="880" height="372"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;we discussed what are github actions and why they are used for.&lt;/li&gt;
&lt;li&gt;we did set up the workflow to update our profile readme with recent activities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/marketplace/actions/github-activity-readme"&gt;GitHub - Activity - Readme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Sachin-chaurasiya"&gt;Sachin Chaurasiya Github Profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that‚Äôs it for this topic. Thank you for reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/sachin-chaurasiya"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://twitter.com/sachindotcom"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/sachin87"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y61HrVIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-blue.png" alt="Buy Me A Coffee" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>PHP Traits Explained</title>
      <author>Eelco Verbrugge</author>
      <pubDate>Thu, 13 Jan 2022 17:11:54 +0000</pubDate>
      <link>https://dev.to/eelcoverbrugge/php-traits-explained-197e</link>
      <guid>https://dev.to/eelcoverbrugge/php-traits-explained-197e</guid>
      <description>&lt;p&gt;In line of my previous blogs &lt;a href="https://dev.to/eelcoverbrugge/php-interfaces-explained-35g"&gt;PHP Interfaces Explained&lt;/a&gt; and &lt;a href="https://dev.to/eelcoverbrugge/php-abstract-classes-10eh"&gt;PHP Abstract Classes Explained&lt;/a&gt;, I'll explain PHP Traits today.&lt;/p&gt;

&lt;p&gt;In PHP a child class can inherit only from one single parent. This allows a class to reuse methods from vertically hierarchy by extending an &lt;a href="https://dev.to/eelcoverbrugge/php-abstract-classes-10eh"&gt;Abstract class&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like to reuse methods in many different classes in horizontally hierarchy, we use Traits. Traits are used to group methods and implement in  multiple classes. Traits can't be initiated on it's own like a normal class could.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#for-example"&gt;
  &lt;/a&gt;
  For example
&lt;/h2&gt;

&lt;p&gt;Let's say we would like to check if a user has access in many classes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;trait Access
{
    public function hasAccess(string $username): bool
    {
        //..Check if $username has access
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Everyone who can access Files, is allowed to download them. To use this Trait into our class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class File
{
    use Access;

    public function download(string $username): Response
    {
        if ($this-&amp;gt;hasAccess($username)) {
            //..Download file x
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wherever you implement your Trait with &lt;strong&gt;use Access;&lt;/strong&gt; you are able to refer to &lt;code&gt;$this-&amp;gt;yourMethod()&lt;/code&gt; as of it would be one of this class. Which in this case is only &lt;code&gt;hasAccess()&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiple-inheritance"&gt;
  &lt;/a&gt;
  Multiple inheritance
&lt;/h2&gt;

&lt;p&gt;What if you need multiple inheritance to reuse various methods in many different classes in horizontally hierarchy?&lt;/p&gt;

&lt;p&gt;This is easily done, let's create an other one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;trait Ability
{
    public function canUpload(string $username): bool
    {
        //..Check if $username can upload
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to check if our $username can access files and is allowed to upload as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class File
{
    use Access, Ability;

    public function upload(string $username): Response
    {
        if ($this-&amp;gt;hasAccess($username) &amp;amp;&amp;amp; $this-&amp;gt;canUpload($username)) {
            //..Upload file
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tadaa! As you can see, Trait's are easily implemented and freely used everywhere you want in your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bad-practice"&gt;
  &lt;/a&gt;
  Bad practice
&lt;/h2&gt;

&lt;p&gt;If ever used duplicated methods by implementing multiple Traits, an error will arise. Let's say both Traits have the method &lt;code&gt;canDownload()&lt;/code&gt; implemented, PHP wouldn't know which one to use. This is solved by the keyword &lt;code&gt;insteadof&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class File
{
    use Access, Ability{
        Access::canDownload insteadof Ability;
    }

    public function upload(string $username): Response
    {
        if ($this-&amp;gt;hasAccess($username) &amp;amp;&amp;amp; $this-&amp;gt;canUpload($username)) {
            //..Upload file
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let me know your experience with Traits and best practices.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How do you review CSS?</title>
      <author>William Iommi</author>
      <pubDate>Thu, 13 Jan 2022 16:32:12 +0000</pubDate>
      <link>https://dev.to/wiommi/how-do-you-review-css-20fi</link>
      <guid>https://dev.to/wiommi/how-do-you-review-css-20fi</guid>
      <description>&lt;p&gt;What is your workflow when you have to do a tech review and there are a bunch of CSS-like files?&lt;br&gt;
Do you follow some guidelines? Do you build the feature branch somewhere? Or you just close your eyes üôà, click on the 'Viewed' checkbox and let the QA guys do the rest? üò¨&lt;/p&gt;

&lt;p&gt;üëáüëáüëá&lt;/p&gt;

</description>
      <category>css</category>
      <category>productivity</category>
      <category>programming</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Developer Twitter Chats</title>
      <author>Kendall</author>
      <pubDate>Thu, 13 Jan 2022 16:25:36 +0000</pubDate>
      <link>https://dev.to/kendallkerr/developer-twitter-chats-4hf8</link>
      <guid>https://dev.to/kendallkerr/developer-twitter-chats-4hf8</guid>
      <description>&lt;p&gt;Hi! Does anyone have any insight into good Twitter chats for developers? Thanks in advance!&lt;/p&gt;

</description>
      <category>help</category>
    </item>
    <item>
      <title>Kaimono-MongoDB Atlas Hackathon Submission.</title>
      <author>Shivang Mishra</author>
      <pubDate>Thu, 13 Jan 2022 16:25:27 +0000</pubDate>
      <link>https://dev.to/shivangm24/kaimono-mongodb-atlas-hackathon-submission-mo7</link>
      <guid>https://dev.to/shivangm24/kaimono-mongodb-atlas-hackathon-submission-mo7</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;My project is a E-Commerce Grocery store based on MERN Stack technology, I used the Mongo Atlas Search Feature in the search bar of the website with auto search configuration. Allowing users to search items all over website, it shows the item that matches the word or else show the item closest to the word typed by user.&lt;/p&gt;

&lt;p&gt;My Search Index Configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "mappings": {
    "dynamic": false,
    "fields": {
      "name": [
        {
          "foldDiacritics": false,
          "maxGrams": 5,
          "minGrams": 1,
          "tokenization": "edgeGram",
          "type": "autocomplete"
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;E-Commerce Creation&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ShivangM"&gt;
        ShivangM
      &lt;/a&gt; / &lt;a href="https://github.com/ShivangM/Kaimono-MongoDB-Atlas-Hackathon"&gt;
        Kaimono-MongoDB-Atlas-Hackathon
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ShivangM/Kaimono-MongoDB-Atlas-Hackathon"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UsiEepEHqFE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y0_rsIkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eenvlc449u3is0l2d2q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y0_rsIkf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7eenvlc449u3is0l2d2q.png" alt="Image description" width="880" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was really fun for me participating in this hackathon and by building this project I came to learn different MongoDB features which would be really helpful in my future projects.&lt;/p&gt;

&lt;p&gt;Contributor: Shivang Mishra ( &lt;a class="mentioned-user" href="https://dev.to/shivangm24"&gt;@shivangm24&lt;/a&gt; )&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>Search for any comments in the Rick Roll music video</title>
      <author>benthecoder</author>
      <pubDate>Thu, 13 Jan 2022 16:20:31 +0000</pubDate>
      <link>https://dev.to/benthecoder1/search-comments-for-the-rick-roll-music-video-25no</link>
      <guid>https://dev.to/benthecoder1/search-comments-for-the-rick-roll-music-video-25no</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview-of-my-submission"&gt;
  &lt;/a&gt;
  Overview of My Submission
&lt;/h3&gt;

&lt;p&gt;The main idea of the app is a filter feature for YouTube video comments. I sometimes do &lt;code&gt;CMD + F&lt;/code&gt; and look for particular comments and I thought it would be fun to make an app that filters out only comments I'm interested in.&lt;/p&gt;

&lt;p&gt;In my app, any user can search for comments in the popular rick roll video ‚Äì¬†Rick Astley's Never Gonna Give You Up.  There was restrictions in getting all the comment data however, due to the API quota restrictions. There's also the fact that there are new comments to the video every single day (2,047,723 comments as of the day this article is published)&lt;/p&gt;

&lt;p&gt;Nonetheless, I was only able to get ~1 million comments, which I believe is more than enough for this little side project.&lt;/p&gt;

&lt;p&gt;To build the web app, I used streamlit because it's easy to use and is great out-of-the-box. It has well designed components and I don't have to worry about web dev. &lt;/p&gt;

&lt;p&gt;To build the search functionality, I used MongoDB Atlas Search, which was great and simple to set up. I loved the fact that I could test my search index before writing any code.&lt;/p&gt;

&lt;p&gt;You can try out the app in the link below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://share.streamlit.io/benthecoder/yt-comments-mongodb-search/main/yt_comments/app.py"&gt;https://share.streamlit.io/benthecoder/yt-comments-mongodb-search/main/yt_comments/app.py&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Choose Your Own Adventure&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/benthecoder/yt-comments-mongodb-search"&gt;Github Repo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;App result for the query - "rickrolled"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yAbKSVMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16npsxau6a5nx8jhbx0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yAbKSVMe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/16npsxau6a5nx8jhbx0z.png" alt="rickrolled query result" width="880" height="529"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;data frame output of result&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MQ-DLMBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrsxvbcdpy45281t2x90.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQ-DLMBB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hrsxvbcdpy45281t2x90.png" alt="data frame output" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;App result for query - "music"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UoI2emLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8ocrr4q54pnrmo94qh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UoI2emLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n8ocrr4q54pnrmo94qh4.png" alt="music query result" width="880" height="771"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>Why you have to use className in React, but not in Preact?</title>
      <author>Nikita Grechino</author>
      <pubDate>Thu, 13 Jan 2022 16:14:09 +0000</pubDate>
      <link>https://dev.to/fromaline/why-you-have-to-use-classname-in-react-but-not-in-preact-3fdm</link>
      <guid>https://dev.to/fromaline/why-you-have-to-use-classname-in-react-but-not-in-preact-3fdm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#state-of-things"&gt;
  &lt;/a&gt;
  State of things
&lt;/h2&gt;

&lt;p&gt;We all know this simple rule. Use &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt; if you write JSX.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleReactComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Example React component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://reactjs.org/docs/introducing-jsx.html#specifying-attributes-with-jsx"&gt;React docs warns&lt;/a&gt; us about this convention straightaway. And it goes even further, you need to specify all HTML attributes in &lt;code&gt;camelCase&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Okay, if it's the way things work, we can get used to it. Since JSX is different from HTML in a lot of ways, it's somewhat justifiable.&lt;/p&gt;

&lt;p&gt;Wait a moment. We actually &lt;strong&gt;can&lt;/strong&gt; use &lt;code&gt;class&lt;/code&gt; in JSX, but only if we would use Preact instead of React.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExamplePreactComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Example Preact Component&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And it's a legitimate &lt;a href="https://preactjs.com/guide/v10/differences-to-react#raw-html-attributeproperty-names"&gt;documented&lt;/a&gt; feature, not a coincidence or a bug. So, the question is - why? &lt;br&gt;
Why do we &lt;strong&gt;have to&lt;/strong&gt; &lt;code&gt;camelCase&lt;/code&gt; all HTML attributes in React, but not in Preact?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: If you aren't familiar with JSX, but want to read and understand this article anyway, check out &lt;a href="https://dev.to/fromaline/hyperscript-the-hidden-language-of-react-3d1f"&gt;my other article&lt;/a&gt;, where we take a look at what JSX is and how it works under the hood.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-reason-behind-the-rule"&gt;
  &lt;/a&gt;
  The reason behind the rule
&lt;/h2&gt;

&lt;p&gt;First thing first, let's clearly define the reason behind this rule in React.&lt;br&gt;
The official React docs have a quite vague explanation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Since JSX is closer to JavaScript than to HTML, React DOM uses &lt;code&gt;camelCase&lt;/code&gt; property naming convention instead of HTML attribute names.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's hard to say solely from this explanation what the real reason is.&lt;br&gt;
So, let's google it and try to find more info!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#its-a-reserved-keyword"&gt;
  &lt;/a&gt;
  It's a reserved keyword
&lt;/h3&gt;

&lt;p&gt;There is &lt;a href="https://www.geeksforgeeks.org/why-react-uses-classname-over-class-attribute/#:~:text=Explanation%3A%20The%20only%20reason%20behind,className%20instead%20of%20class%20attribute."&gt;an article&lt;/a&gt; about this problem on GeeksForGeeks. Let's consider an explanation from it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The only reason behind the fact that it uses className over class is that the &lt;em&gt;&lt;strong&gt;class&lt;/strong&gt;&lt;/em&gt; is a reserved keyword in JavaScript and since we use JSX in React which itself is the extension of JavaScript, we have to use className instead of the class attribute.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First of all, yeah, technically speaking &lt;code&gt;class&lt;/code&gt; is a reserved keyword in JavaScript for making, so-called, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class"&gt;class declarations&lt;/a&gt; like this one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Polygon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;area&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we actually &lt;strong&gt;can&lt;/strong&gt; use &lt;code&gt;class&lt;/code&gt; keyword in JavaScript without much trouble.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;otherObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;otherObj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may think, it didn't work last time I checked! And you'll be right.&lt;br&gt;
This works only in modern versions of JavaScript. So that's the point? Not exactly.&lt;br&gt;
In older versions of JavaScript, you may easily achieve the same thing by explicitly turning the &lt;code&gt;class&lt;/code&gt; property into a string literal like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;otherObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="nx"&gt;otherObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, maybe the real reason is separate from this whole reserved-keyword issue. Maybe, it's the JSX itself!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-a-jsxspecific-issue"&gt;
  &lt;/a&gt;
  It's a JSX-specific issue
&lt;/h3&gt;

&lt;p&gt;Just think about it. JSX is an &lt;strong&gt;extension&lt;/strong&gt; of JavaScript, not one-to-one clone or so. That's why even though it's tightly coupled with JS, it may propose some other restrictions.&lt;/p&gt;

&lt;p&gt;Let's battle-test this theory. We'll declare a simple component with a &lt;code&gt;className&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, we'll put it through Babel transpiler.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/*#__PURE__*/&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;a href="https://babeljs.io/repl#?browsers=defaults&amp;amp;build=&amp;amp;builtIns=false&amp;amp;corejs=3.6&amp;amp;spec=false&amp;amp;loose=false&amp;amp;code_lz=MYewdgzgLgBApgDwIYFsAOAbOMC8MA8AJgJYBuMwGSEEAcqnDgEQBmIITAfABJwYYgYAdxAAnDIQCE-APQlSnIA&amp;amp;debug=false&amp;amp;forceAllTransforms=true&amp;amp;shippedProposals=false&amp;amp;circleciRepo=&amp;amp;evaluate=false&amp;amp;fileSize=true&amp;amp;timeTravel=false&amp;amp;sourceType=module&amp;amp;lineWrap=true&amp;amp;presets=react&amp;amp;prettier=false&amp;amp;targets=&amp;amp;version=7.16.9&amp;amp;externalPlugins=&amp;amp;assumptions=%7B%7D"&gt;Live example&lt;/a&gt; in Babel REPL, in case you want to check yourself.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The result is pretty much expected and fully valid. Now let's try another one. Let's use &lt;code&gt;class&lt;/code&gt; instead of &lt;code&gt;className&lt;/code&gt; in this try.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And after transpilation we get this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cm"&gt;/*#__PURE__*/&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;a href="https://babeljs.io/repl#?browsers=defaults&amp;amp;build=&amp;amp;builtIns=false&amp;amp;corejs=3.6&amp;amp;spec=false&amp;amp;loose=false&amp;amp;code_lz=MYewdgzgLgBApgDwIYFsAOAbOMC8MA8AJgJYBuMwGSEEOARAGYgh0B8AEnBhiDAO4gAThkIBCfAHoSpVkA&amp;amp;debug=false&amp;amp;forceAllTransforms=true&amp;amp;shippedProposals=false&amp;amp;circleciRepo=&amp;amp;evaluate=false&amp;amp;fileSize=true&amp;amp;timeTravel=false&amp;amp;sourceType=module&amp;amp;lineWrap=true&amp;amp;presets=react&amp;amp;prettier=false&amp;amp;targets=&amp;amp;version=7.16.9&amp;amp;externalPlugins=&amp;amp;assumptions=%7B%7D"&gt;Live example&lt;/a&gt; of this try in Babel REPL.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First of all, it's fully valid, as well as, the former one.&lt;br&gt;
Secondly, Babel transpiles this snippet, like it was nothing new or weird for him. So, it seems like JSX isn't an issue either.&lt;/p&gt;

&lt;p&gt;Okay, maybe we'll face some issues in the render phase. Because JSX in itself is just syntax and it doesn't create UI on its own. We need to render JSX somewhere to see the end UI. So we'll try to do exactly that to see, if some problems may arise.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#its-a-render-function-problem"&gt;
  &lt;/a&gt;
  It's a render function problem
&lt;/h3&gt;

&lt;p&gt;Let's create a simple render function from scratch because obviously React won't allow us to use its render mechanism with &lt;code&gt;class&lt;/code&gt; instead of &lt;code&gt;className&lt;/code&gt;.&lt;br&gt;
Our render function will render the result of &lt;code&gt;React.createElement&lt;/code&gt; to the DOM. But what does the result of &lt;code&gt;React.createElement&lt;/code&gt; look like?&lt;br&gt;
&lt;code&gt;React.createElement&lt;/code&gt; returns, so-called, &lt;strong&gt;virtual node&lt;/strong&gt;. &lt;br&gt;
It looks like this in our case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="na"&gt;$typeof&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;_owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But what is a virtual node anyway?&lt;br&gt;
Virtual node or vnode, in short, is just a lightweight representation of a given UI structure. In the case of the browser, the virtual node represents the real DOM node. React uses virtual nodes to construct and maintain, so-called, virtual DOM, which itself is a representation of real DOM.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: If you want to dig into this whole virtual madness, let me know in the comments and I'll make an article, where we'll go through the whole concept of virtual DOM and make our own implementation of it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To implement the render function and check how things work, we only need three basic properties of the vnode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// defines the type of a given vnode&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// defines all passed React props and HTML attributes of a given vnode&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c1"&gt;// contains children of a given vnode&lt;/span&gt;
    &lt;span class="na"&gt;children&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Sidenote: If you want to understand what other properties are and why they are here, let me know in the comments section and I'll make detailed articles with a deep explanation of each individual property.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now with new knowledge we are fully ready to create our own render function for vnode tree. &lt;br&gt;
Let's start with the basics and create element of the passed type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then let's handle the props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;  
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's recursively add our children and handle edge-case, in which a child is a string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createTextNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;  
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[]).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;child&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last missing piece is actual mounting. So let's do it now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderedExample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;renderedExample&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we're good to go. It's time to test how the render function will handle our virtual node with the &lt;code&gt;class&lt;/code&gt; prop.&lt;/p&gt;

&lt;p&gt;It works like a charm!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vd2Jtgoc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642006796053/tNzjaI4g5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vd2Jtgoc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642006796053/tNzjaI4g5.png" alt="screenshot.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://codesandbox.io/s/jsx-render-function-example-nq55s?file=/src/index.js"&gt;Live example&lt;/a&gt; on CodeSandbox.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It renders the &lt;code&gt;div&lt;/code&gt; with correct class &lt;code&gt;foo&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello world!&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added this simple bit of CSS to test if our class is in place. And it is, you can verify it yourself!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;coral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are completely sure, that the reason behind &lt;code&gt;className&lt;/code&gt; usage is not connected somehow to render function. We are sure because we implemented the render function, that uses &lt;code&gt;class&lt;/code&gt; ourselves. &lt;br&gt;
Now what? Maybe we should agree that it's some kind of convention and leave things as they are? No, we should take an even closer look at the problem.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#a-different-approach-to-the-problem"&gt;
  &lt;/a&gt;
  A different approach to the problem
&lt;/h2&gt;

&lt;p&gt;You see, there is a JS framework, called &lt;a href="https://preactjs.com/"&gt;Preact&lt;/a&gt;. It's an alternative to React with the same API. &lt;br&gt;
And there is a very interesting statement on its official page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V5KIzNH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642016822259/y8aSULZup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V5KIzNH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1642016822259/y8aSULZup.png" alt="preact official page.png" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Closer to the DOM&lt;/em&gt;. Hmm, it's the exact thing, we are looking for. We try to use &lt;code&gt;class&lt;/code&gt;, which is a native way of adding CSS classes in DOM. And Preact uses this approach, it becomes clear from its &lt;a href="https://preactjs.com/guide/v10/differences-to-react/#raw-html-attributeproperty-names"&gt;official docs&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Preact aims to closely match the DOM specification supported by all major browsers. When applying &lt;code&gt;props&lt;/code&gt; to an element, Preact &lt;em&gt;detects&lt;/em&gt; whether each prop should be set as a property or HTML attribute. This makes it possible to set complex properties on Custom Elements, but it also means you can use attribute names like &lt;code&gt;class&lt;/code&gt; in JSX:&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// ...is the same as:&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, let's dig into Preact source code to figure out why it works.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explore-source-code"&gt;
  &lt;/a&gt;
  Explore source code
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Here is a &lt;a href="https://github.com/preactjs/preact/blob/master/src/create-element.js#L14"&gt;link&lt;/a&gt; to the source file on GitHub, in case you want to follow along.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's take a look at Preact &lt;code&gt;createElement&lt;/code&gt; function, which serves similar purpose as &lt;code&gt;React.createElement&lt;/code&gt;. Here's a snippet from the function body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;normalizedProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
            &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ref&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;normalizedProps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Preact &lt;code&gt;createElement&lt;/code&gt; function filters out only two properties, &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt;, and passes others to &lt;code&gt;normalizedProps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sidenote: If you're asking yourself, why Preact filters out &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt; and how these special props are handled internally by Preact, let me know in the comments section. I'll make detailed articles about these two props.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then Preact passes the resulting &lt;code&gt;normalizeProps&lt;/code&gt; to another function, called &lt;code&gt;createVNode&lt;/code&gt;, and returns the result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;createVNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;normalizedProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dig into &lt;code&gt;createVNode&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/preactjs/preact/blob/master/src/create-element.js#L55"&gt;Source file on GitHub&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createVNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;original&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// No props transformation here&lt;/span&gt;
        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="c1"&gt;// No props transformation here either&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;vnode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It becomes obvious from the snippet, that the &lt;code&gt;createVNode&lt;/code&gt; function doesn't do any transformations with passed &lt;code&gt;props&lt;/code&gt;. It just returns the &lt;code&gt;props&lt;/code&gt; in the new &lt;code&gt;vnode&lt;/code&gt; object. And &lt;code&gt;vnode&lt;/code&gt; object is just a representation of a given DOM element and it'll be rendered to the real DOM in the future, as we now know.&lt;/p&gt;

&lt;p&gt;So the question is, how does Preact know either it is a complex property or HTML attribute if it passes all properties directly to the &lt;code&gt;vnode&lt;/code&gt;, that gets rendered in the end? For example, how does the event system work in this setup? &lt;br&gt;
Maybe the answer lies in the render phase? Let's give this guess a shot.&lt;/p&gt;

&lt;p&gt;There is a function, called &lt;code&gt;setProperty&lt;/code&gt;, which is responsible for setting a property value on a DOM node, as you may have gathered. This function is the main mechanism of setting properties to DOM nodes in Preact.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://github.com/preactjs/preact/blob/master/src/diff/props.js#L56"&gt;Source file on GitHub&lt;/a&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;oldValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isSvg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;o&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// ...&lt;/span&gt;
        &lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So Preact actually checks whether the property name corresponds to some event and adds an event listener if it's the case. &lt;br&gt;
Such distinction allows Preact to deal with events passed through &lt;code&gt;onClick&lt;/code&gt;, &lt;code&gt;onInput&lt;/code&gt;, and other props like these, but at the same time allows to use standard HTML properties, like  &lt;code&gt;class&lt;/code&gt; instead of unique-to-JSX &lt;code&gt;className&lt;/code&gt;.&lt;br&gt;
But how does Preact handle user-defined custom props? The answer lies in the question itself.&lt;/p&gt;

&lt;p&gt;You see, we as a developers, may only pass custom properties to our own components. For example, let's define custom &lt;code&gt;UserDefinedComponent&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// UserDefinedComponent.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UserDefinedComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;exampleFunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;brandText&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;exampleFunc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;brandText&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UserDefinedComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And render it in the &lt;code&gt;App&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;UserDefinedComponent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./UserDefinedComponent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;UserDefinedComponent&lt;/span&gt; 
            &lt;span class="na"&gt;exampleFunc&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nx"&gt;brandText&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello world!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you may see, there is no way how &lt;code&gt;exampleFunc&lt;/code&gt; and &lt;code&gt;brandText&lt;/code&gt; would be passed to the real HTML elements. And even if you intentionally do this, the browser will just ignore unknown properties, Preact doesn't need to additionally validate them on its side.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But why does React use &lt;code&gt;camelCase&lt;/code&gt; property naming convention instead of HTML attribute names, anyway?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-last-question"&gt;
  &lt;/a&gt;
  The last question
&lt;/h2&gt;

&lt;p&gt;There is no clear answer to this question. We may only make a few guesses.&lt;/p&gt;

&lt;p&gt;Maybe, it's really just a convention, that was proposed when React wasn't event public.&lt;/p&gt;

&lt;p&gt;Or maybe, React developers want to match &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/className"&gt;the JavaScript API&lt;/a&gt; more closely, than HTML one. Because in JS the standard way to access &lt;code&gt;Element&lt;/code&gt; class property is &lt;code&gt;Element.className&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;classList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;new-example&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It doesn't really matter at this point why they've done so. What matters is, that we now understand all nitty-gritty details about it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#today-we-learned"&gt;
  &lt;/a&gt;
  Today we learned
&lt;/h3&gt;

&lt;p&gt;Let's sum up what we learned today.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The reason why React uses the &lt;code&gt;camelCase&lt;/code&gt; property is probably not one of these:

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;class&lt;/code&gt; is a reserved keyword in JavaScript&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;camelCase&lt;/code&gt; properties can't be handled by JSX&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;camelCase&lt;/code&gt; properties mess up render function&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Preact uses standard HTML properties, because:

&lt;ul&gt;
&lt;li&gt;It aims to closely match the DOM specification&lt;/li&gt;
&lt;li&gt;It detects whether each prop should be set as a property or HTML attribute&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Digging into source code is more fun, than frightening üòÑ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#im-looking-forward-to-similar-articles-what-should-i-do"&gt;
  &lt;/a&gt;
  I'm looking forward to similar articles, what should I do?
&lt;/h3&gt;

&lt;p&gt;First of all, if you &lt;em&gt;really&lt;/em&gt; like this post leave a comment or/and a reaction to let me know, that I am going in the right direction. Any constructive feedback, either positive or negative, will be welcomed üôè&lt;/p&gt;

&lt;p&gt;If you want more content like this right now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You may check out my &lt;a href="https://dev.to/fromaline/series/16231"&gt;Deep dive into React codebase weekly series&lt;/a&gt;, where we take a thorough look at React source code.&lt;/li&gt;
&lt;li&gt;As I already mentioned, I have &lt;a href="https://dev.to/fromaline/hyperscript-the-hidden-language-of-react-3d1f"&gt;an article about obscured history behind JSX&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want more content like this next week:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow me on &lt;a href="https://dev.to/fromaline"&gt;dev.to&lt;/a&gt;, I am going to post an episode of the &lt;em&gt;Deep-dive-into-React-codebase series&lt;/em&gt; this Sunday (January 16) at 6:00 am UTC+0.&lt;/li&gt;
&lt;li&gt;Follow me on &lt;a href="https://blog.fromaline.com/"&gt;hashnode&lt;/a&gt;, I'll try to do my best to post an article every week or even make a special hashnode-exclusive series.&lt;/li&gt;
&lt;li&gt;Follow me on &lt;a href="https://twitter.com/fromaline"&gt;Twitter&lt;/a&gt;, if you want to know about every article I made and also read their sum-ups in threads.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Converting to Vite (Part 2)</title>
      <author>Matthew Foley</author>
      <pubDate>Thu, 13 Jan 2022 16:08:35 +0000</pubDate>
      <link>https://dev.to/opensauced/converting-to-vite-part-2-3li0</link>
      <guid>https://dev.to/opensauced/converting-to-vite-part-2-3li0</guid>
      <description>&lt;p&gt;In this post, I'm going to describe some of the snags that we encountered as we transitioned to Vite - at their best, snags become lessons!&lt;/p&gt;

&lt;p&gt;Open Sauced is a Progressive Web Application (PWA), and this includes the use of a Service Worker.  In my personal understanding, a Service Worker definition should be packaged as a standalone JavaScript file. When you look at how bundling is done in Vite, it will generate a &lt;code&gt;vendor.xyz.js&lt;/code&gt; file, an &lt;code&gt;index.xyz.js&lt;/code&gt; file, and otherwise pass through static assets in the &lt;code&gt;public&lt;/code&gt; directory as-is. Our webpack configuration on the other hand was configured to handle our &lt;code&gt;src/service-worker.js&lt;/code&gt; in a specific way. For that reason, we needed to move our &lt;code&gt;src/service-worker.js&lt;/code&gt; file to &lt;code&gt;public/service-worker.js&lt;/code&gt;, and move around the associations in our &lt;code&gt;src/index.js&lt;/code&gt; file. Another thing we had to learn about was the way Vite handles &lt;a href="https://vitejs.dev/guide/env-and-mode.html"&gt;environment variables&lt;/a&gt;.  Our application would look at whether the application was in production or development mode (and also whether it was being served locally) in order to decide whether to register the service worker. For a project using Webpack, you usually refer to these as &lt;code&gt;process.env.VARIABLE&lt;/code&gt; and the value is statically set in the bundling process. Vite does something a bit different, but instead you would need to refer to &lt;code&gt;import.meta.env.VARIABLE&lt;/code&gt; and only a handful of things are pre-set for you and otherwise you need to use a variable naming convention to have something statically included in the bundle. Fortunately, most of the variables we needed to use were included by default, so it was easy to get working (or so we thought). We tweaked and tweaked some more, and in the end, we just ended up using the &lt;a href="https://dev.to%20raw%20%60vite-plugin-pwa%60%20endraw%20"&gt;https://github.com/antfu/vite-plugin-pwa&lt;/a&gt; extension to handle everything, while moving most of our PWA manifest to &lt;code&gt;vite.config.ts&lt;/code&gt;. It's great to know how things work under the hood, but sometimes you just get better results with a plugin!&lt;/p&gt;

&lt;p&gt;Another thing that we ran into dealt with the fact that some libraries end up just a little bit differently in development bundling than in production bundling.  When developing, Vite takes advantage of ESM to let the browser effectively cache your dependencies, separated out into module files.  In production, everything is bundled into one vendor file. Libraries can export different compiled versions between these two situations. We were having a lot of trouble that we isolated down to a specific component, that in turn used the &lt;code&gt;react-markdown&lt;/code&gt; library. After reading through &lt;a href="https://github.com/vitejs/vite/issues/3592"&gt;issues&lt;/a&gt; for this one and its dependencies, we found that there was a circular reference in one of &lt;code&gt;react-markdown&lt;/code&gt;'s dependencies that only showed up in production bundles. &lt;/p&gt;

&lt;p&gt;The most straightforward fix for the circular reference was to update &lt;code&gt;react-markdown&lt;/code&gt; through one major revision, but this introduced a new snag.  In this major revision, &lt;code&gt;react-markdown&lt;/code&gt; changed to &lt;a href="https://github.com/remarkjs/react-markdown/blob/main/changelog.md#700---2021-08-13"&gt;ESM only&lt;/a&gt;, which would be fine for Vite, but not for our testing approach for &lt;code&gt;jest&lt;/code&gt; (other than experimentally, &lt;a href="https://jestjs.io/docs/ecmascript-modules"&gt;so I learned&lt;/a&gt;. &lt;a class="mentioned-user" href="https://dev.to/0vortex"&gt;@0vortex&lt;/a&gt; and I got some help from &lt;a class="mentioned-user" href="https://dev.to/jasonericdavis"&gt;@jasonericdavis&lt;/a&gt; on Discord to mock the &lt;code&gt;react-markdown&lt;/code&gt; component in Jest (bypassing the need for ESM support) as part of a &lt;a href="https://github.com/open-sauced/open-sauced/pull/1333"&gt;preparatory PR&lt;/a&gt;, and we got back on track.&lt;/p&gt;

&lt;p&gt;One takeaway that I had from this was the practice of stepping beyond running &lt;code&gt;vite dev&lt;/code&gt;, and running &lt;code&gt;vite build&lt;/code&gt; and &lt;code&gt;vite preview&lt;/code&gt; as well, in order to verify what would run in production. We use Netlify deploy previews in Open Sauced, and running both &lt;code&gt;vite build&lt;/code&gt; and &lt;code&gt;vite preview&lt;/code&gt; helps with reproducing production issues locally. We updated our &lt;code&gt;package.json&lt;/code&gt; to reflect these &lt;a href="https://vitejs.dev/guide/#command-line-interface"&gt;CLI commands&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I would love to hear from others what kind of experience they had switching from Webpack to Vite!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;Cover image Photo by &lt;a href="https://unsplash.com/@william07?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;william william&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/container-ship?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;. I chose this one because I felt like &lt;a class="mentioned-user" href="https://dev.to/0vortex"&gt;@0vortex&lt;/a&gt; and I were the tugboats!&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

</description>
      <category>webpack</category>
      <category>vite</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
