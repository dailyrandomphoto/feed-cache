<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to implement Factory Design Pattern using Java?</title>
      <author>ROHAN KADAM</author>
      <pubDate>Wed, 05 Jan 2022 11:52:17 +0000</pubDate>
      <link>https://dev.to/rohan2596/how-to-implement-factory-design-pattern-using-java-cn1</link>
      <guid>https://dev.to/rohan2596/how-to-implement-factory-design-pattern-using-java-cn1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#design-pattern"&gt;
  &lt;/a&gt;
  Design Pattern
&lt;/h2&gt;

&lt;p&gt;Hello👋 Its Rohan Kadam😊&lt;/p&gt;

&lt;p&gt;Maybe you are a newbie to coding👩‍💻 or programming, maybe experienced👴 or maybe a FrontEnd Developer or BackEnd Developer you all have may have come across the word Design Pattern as a principle or as a concept. The design pattern is a way or approach to writing code or developing an application. In this article, we try to answer certain questions What is Design Pattern? Why implement a design pattern? How to implement a Design pattern (&lt;strong&gt;Factory&lt;/strong&gt;)?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HL1Pvbgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2AcEm5ML8JhAEbawySBVGh_A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HL1Pvbgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2AcEm5ML8JhAEbawySBVGh_A.png" alt="How to Implement Factory Design Pattern?" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-design-pattern"&gt;
  &lt;/a&gt;
  🏭What is Design Pattern?
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Design patterns&lt;/strong&gt; are the solutions to commonly occurring problems in software design. They are like pre-fabricated blueprints that we can customize to solve a recurring design problem in your code.&lt;/p&gt;

&lt;p&gt;They are not pieces of code or libraries that can be imported and used in the development of software or solving a particular problem. We can follow the pattern details and implement a solution that suits the realities of your own program.&lt;/p&gt;

&lt;p&gt;We often confused ourself between design pattern and algorithms. While an algorithm always defines a clear set of actions that can achieve some goal, a pattern is a more upper-level description of a solution.&lt;/p&gt;

&lt;p&gt;An analogy to an algorithm is a cooking dish: both have clear steps to achieve a goal. They’re not libraries or modules; they’re guidelines you integrate into the core of your designs, giving you a leg up in creating flexible and maintainable object-oriented systems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-implement-a-design-pattern"&gt;
  &lt;/a&gt;
  🏭Why implement a Design Pattern?
&lt;/h3&gt;

&lt;p&gt;We have encountered design patterns only in a nutshell, they’re general object-oriented solutions that you can use in your own designs. Crafted by experienced 👴object-oriented practitioners, design patterns can make your designs more flexible, more resilient to change, and easier to maintain. So, if design patterns still aren’t part of your development toolbelt, here are five reasons you should add them.&lt;/p&gt;

&lt;p&gt;1 → Make our life easier by not reinventing the wheel&lt;/p&gt;

&lt;p&gt;2 → Improve our object-oriented Skills&lt;/p&gt;

&lt;p&gt;3 → Recognize Patterns in libraries and languages&lt;/p&gt;

&lt;p&gt;4 → Use the power of a shared vocabulary&lt;/p&gt;

&lt;p&gt;5 → Find Truth and beauty&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-implement-a-factory-design-pattern"&gt;
  &lt;/a&gt;
  🏭How to implement a Factory Design Pattern?
&lt;/h3&gt;

&lt;p&gt;Before jumping directly into the implementation of the design pattern we need to answer certain questions such as What is a Factory design pattern? Why incorporate the design pattern? and finally How to implement a Factory Design Pattern?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1 →What is Factory Design Pattern?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The factory design pattern is part of the Creational Design Pattern Family, it let us create an interface over subclass and let subclass do business logic work. A real-life example will be, &lt;strong&gt;Imagine you have run a big delivery business🛒, you got to deliver the package to a consumer now the question arises what should use you used delivery the particular car🚗 , truck 🚚or bicycle🛵&lt;/strong&gt;. &lt;strong&gt;So to solution could be we give input as size and weight of a package based on that we decide which would be the best possible mode of transportation&lt;/strong&gt;. That's how the Factory pattern works in real life.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; &lt;br&gt;
&lt;em&gt;The Factory pattern is a design pattern that *&lt;/em&gt;&lt;em&gt;defines an interface or abstract class for creating an object but let the subclasses decide which class to instantiate&lt;/em&gt;*&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2 → Why implement Factory Design Pattern?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Factory allows us to follow the Design Principle (&lt;strong&gt;SOLID&lt;/strong&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It fosters &lt;strong&gt;loose-coupling&lt;/strong&gt; by eliminating the need to bind application-specific classes into the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It allows us to introduce new code without affecting the existing code structure like &lt;strong&gt;Plug and Play Model&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;3 → How to Implement Factory Design Pattern?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In section, we try to implement Factory Design Pattern using Java. For example, we use the delivery manager example for selecting the mode of transportation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JBzl7u0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2AN7qnpUqGydS6BC1x19XGJg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JBzl7u0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3840/1%2AN7qnpUqGydS6BC1x19XGJg.png" alt="Delivery Manager Examples" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1 → What input should the delivery manager give?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a Delivery Manager, he/she should give info about the package like &lt;strong&gt;size&lt;/strong&gt; and &lt;strong&gt;weight&lt;/strong&gt;, in our example, we are using &lt;strong&gt;PackageInfo&lt;/strong&gt; to the job.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GZE4hI8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2408/1%2Al3vjAzE3O7QUEvP3EzP97g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GZE4hI8T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2408/1%2Al3vjAzE3O7QUEvP3EzP97g.png" alt="image1" width="880" height="1088"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2 → What will be various modes for making a delivery?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The various modes of delivering packages are car🚗, bicycle🏍 and truck🚚. We have created three-class defining the modes for delivery. According to the definition of Factory Pattern, we need to &lt;strong&gt;define an interface or abstract class in **our case we have created an **interface **named **PackageDelivery.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gIAAkiK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2412/1%2AXBTTzPLh-HaOBe4cW9d9xQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gIAAkiK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2412/1%2AXBTTzPLh-HaOBe4cW9d9xQ.png" alt="Package Delivery interface" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have created subclasses that are implemented by the PackageDelivery interface.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1 →Delivery by bicycle🏍&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UykLO6wb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3364/1%2AOnHfj0euWnT44Ossx9NJbA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UykLO6wb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3364/1%2AOnHfj0euWnT44Ossx9NJbA.png" alt="Delivery By Bicycle" width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2 →Delivery by Car&lt;/strong&gt;🚗&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MedJsRQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3048/1%2A_LSj9cVD3AcGe85FCnMjZA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MedJsRQw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3048/1%2A_LSj9cVD3AcGe85FCnMjZA.png" alt="Delivery By Car" width="880" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3 →Delivery by Truck&lt;/strong&gt;🚚&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wK85cXm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3220/1%2ASkHlDVmDKsvNUpDtduuamg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wK85cXm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3220/1%2ASkHlDVmDKsvNUpDtduuamg.png" alt="Delivery By Truck" width="880" height="518"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3→ What will be my Factory Class or Manager Class?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Example, a Delivery Manager will be a factory Class or manager class that is responsible for choosing the delivery method based on package size. According to the definition, we are &lt;strong&gt;letting the subclasses decide which class to instantiate.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c2gpXHMh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2820/1%2A_m88DzHukztmEedH3lzFpQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c2gpXHMh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2820/1%2A_m88DzHukztmEedH3lzFpQ.png" alt="image2" width="880" height="929"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4→ How to test the Factory Design Pattern?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To test our Factory Design Pattern we are giving 3 different packages with different 3 different Packages sizes like &lt;strong&gt;SMALL, LARGE and MEDIUM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2kK35B---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3524/1%2ArpLjOp8fAMn_oqXF60Cqbw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y2kK35B---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3524/1%2ArpLjOp8fAMn_oqXF60Cqbw.png" alt="image2" width="880" height="725"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5 →What will be the Output for Factory Pattern?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Below console output helps to understand how the Manager(Factory Class) is selecting the mode of transportation based on Package Info&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YbUI89x9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2484/1%2AQNUM6dlmIMFXQ8ZVhliRGQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YbUI89x9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2484/1%2AQNUM6dlmIMFXQ8ZVhliRGQ.png" alt="image3" width="880" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-find-the-codebase-for-factory-design-pattern"&gt;
  &lt;/a&gt;
  🏭Where to find the Codebase for Factory Design Pattern?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/Rohan2596"&gt;**On Github&lt;/a&gt;**&lt;br&gt;
&lt;a href="https://github.com/Rohan2596/Design-pattern-examples/tree/pattern/factory"&gt;&lt;strong&gt;GitHub - Rohan2596/Design-pattern-examples at pattern/factory&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:-
&lt;/h3&gt;

&lt;p&gt;In the article, we tried to answer some questions related to Design Pattern and especially &lt;strong&gt;Factory Design Pattern&lt;/strong&gt; how it helps developers around the world to write better code and build faster applications. Factory Design Pattern allows us to implement the &lt;strong&gt;SOLID **principle effectively may it is **loose-coupling or Single-responsibility.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Please do share and like💖 if you find the article useful. Follow me on medium &lt;a href="https://dev.toundefined"&gt;Rohan Ravindra Kadam&lt;/a&gt; and on Twitter at &lt;a href="https://twitter.com/rohankadam25"&gt;**rohankadam25&lt;/a&gt;**&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bibliography"&gt;
  &lt;/a&gt;
  📚Bibliography:-
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.oreilly.com/content/5-reasons-to-finally-learn-design-patterns/"&gt;&lt;strong&gt;5 reasons to finally learn design patterns&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://refactoring.guru/design-patterns/factory-method"&gt;&lt;strong&gt;Factory Method&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RewtI9lv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2AmRwSuSvhuRcZKS3uElP6bg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RewtI9lv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2800/1%2AmRwSuSvhuRcZKS3uElP6bg.png" alt="Thank You, Viewers — Rohan Kadam" width="880" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 8 Most Important Unsupervised Machine Learning Algorithms With Python Code References</title>
      <author>Yaniv Noema</author>
      <pubDate>Wed, 05 Jan 2022 11:46:48 +0000</pubDate>
      <link>https://dev.to/imagescv/top-8-most-important-unsupervised-machine-learning-algorithms-with-python-code-references-egm</link>
      <guid>https://dev.to/imagescv/top-8-most-important-unsupervised-machine-learning-algorithms-with-python-code-references-egm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-the-most-important-unsupervised-machine-learning-algorithms"&gt;
  &lt;/a&gt;
  What are the most important unsupervised machine learning algorithms?
&lt;/h2&gt;

&lt;p&gt;In this blog post, we will list what we believe to be the top 8. &lt;/p&gt;

&lt;p&gt;Unsupervised machine learning means that there is no predefined outcome or label for any data point during training. Without a labeled data set, how does one know which algorithm should be used? There are many possible answers to this question and it all depends on the type of problem you need to solve.&lt;/p&gt;

&lt;p&gt;The goal of this blog post is to help you figure out which unsupervised machine learning algorithm is best for your problem. We will provide a brief overview and examples as well as details about which algorithms are better suited for specific types of data sets.&lt;/p&gt;

&lt;p&gt;Top unsupervised machine learning algorithms include:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-kmeans-clustering"&gt;
  &lt;/a&gt;
  &lt;a href="https://realpython.com/k-means-clustering-python/"&gt;1. K-Means Clustering&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The K-means clustering algorithm is one of the most popular unsupervised machine learning algorithms and it is used for data segmentation. It works by partitioning a data set into k clusters, where each cluster has a mean that is computed from the training data. The number of clusters, k, is usually determined through experimentation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The advantage&lt;/strong&gt; of using the K-means clustering algorithm is that it is easy to understand and can be implemented in a short amount of time. Additionally, it does not require any assumptions about the underlying distribution of the data. However, there are some disadvantages to using this algorithm. First, it can be sensitive to initialization values and can result in poor clustering. Second, it is not scalable to large data sets. Lastly, it does not work well with categorical data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-principal-component-analysis-pca"&gt;
  &lt;/a&gt;
  &lt;a href="https://towardsdatascience.com/pca-using-python-scikit-learn-e653f8989e60"&gt;2. Principal Component Analysis (PCA)&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The PCA algorithm is used for dimensionality reduction and is commonly used in conjunction with the k-means clustering algorithm. It works by finding a lower dimensional space that contains most of the variation in the original data set. This can be helpful when working with high-dimensional data sets because it reduces the number of dimensions without losing much information. Additionally, using PCA can improve performance on many machine learning algorithms since they are often sensitive to the dimensionality of the input data set.&lt;/p&gt;

&lt;p&gt;However, there are &lt;strong&gt;some disadvantages to using PCA&lt;/strong&gt;. First, it can be computationally expensive. Second, it is not always possible to reduce the dimensionality of the data set without losing information. Lastly, PCA does not work well with categorical data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-autoencoder"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.analyticsvidhya.com/blog/2021/06/complete-guide-on-how-to-use-autoencoders-in-python/"&gt;3. AutoEncoder&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The AutoEncoder algorithm is a type of neural network that is used for unsupervised learning. It works by taking an input data set and encoding it into a hidden layer. The encoded data is then decoded and compared to the original input data set. If there is a high degree of similarity between the two sets, then the encoder has done its job correctly. Otherwise, the encoder needs to be tuned until there is a high degree of similarity between the two sets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The advantage&lt;/strong&gt; of using the AutoEncoder algorithm is that it is able to learn complex patterns in data. Additionally, it is a type of neural network and as such, can be trained using backpropagation. However, there are some disadvantages to using this algorithm. First, it can be computationally expensive. Second, if the encoder and decoder are not similar enough then the algorithm will not perform well. Lastly, it does not work well with categorical data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-deep-belief-networks"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.codespeedy.com/understanding-deep-belief-networks-in-python/"&gt;4. Deep Belief Networks&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Deep Belief Network (DBN) algorithm is a deep learning algorithm that is used for unsupervised learning. It works by creating a hierarchy of layers where each layer is composed of multiple neurons. The first layer is called the input layer and consists of neurons that are connected to the original data set. The last layer is called the output layer and it consists of neurons that are used for classification or regression depending on whether supervised learning is required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The advantage&lt;/strong&gt; of using DBNs is that they can be trained quickly since training only occurs in one direction from input to output layers. Additionally, it works well with problems where there isn't a lot of labeled data available as long as some information about the function being modeled exists. However, there are some disadvantages to using this algorithm such as its ability to overfit large amounts of training data which limits how much neural networks can improve upon themselves without more labeled training sets.. Another problem is that these types of deep networks require a large amount of computation to train. Lastly, it does not work well with categorical data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-restricted-boltzmann-machine-rbm"&gt;
  &lt;/a&gt;
  &lt;a href="https://pythonrepo.com/repo/omimo-xRBM-python-deep-learning"&gt;5. Restricted Boltzmann Machine (RBM)&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Restricted Boltzmann Machine (RBM) algorithm is a type of neural network that is used for unsupervised learning. It works by taking an input data set and splitting it into two parts: the visible layer and the hidden layer. The visible layer consists of neurons that are connected to the original data set while the hidden layer consists of neurons that are not connected to the original data set. The purpose of this algorithm is to learn the relationship between the input and output layers.&lt;/p&gt;

&lt;p&gt;The advantage of using RBM algorithms is that they can be used for dimensionality reduction since they often result in lower-dimensional input space. Additionally, they are able to learn complex relationships between the data set and can be trained quickly since only backpropagation is required for training. However, there are some disadvantages to using this type of algorithm such as its inability to create more than one hidden layer. Another problem is that learning cannot occur with unsupervised pre-training methods like AutoEncoders or PCA alone. Lastly, RBM algorithms do not work well with categorical data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-hierarchical-temporal-memory-htm"&gt;
  &lt;/a&gt;
  &lt;a href="https://3rdman.de/2020/02/hierarchical-temporal-memory-part-1-getting-started/"&gt;6. Hierarchical Temporal Memory (HTM)&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Hierarchical Temporal Memory (HTM) algorithm is a type of neural network used for unsupervised learning along with supervised learning problems where labeled examples exist but not enough labels were generated during training time. It works by creating a hierarchy of levels where the lower level nodes represent individual pixels and higher-level nodes represent object classifications such as face, hand or car depending on what is being learned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The advantage&lt;/strong&gt; to using HTM algorithms is that they can be used for unsupervised learning while making predictions about entire sequences rather than just single events like other methods do . Additionally, it allows hierarchical learning with multiple levels of abstraction which helps in analyzing data sets more efficiently and working with unknown inputs. However , there are some disadvantages to using this type of algorithm such as long training times compared to traditional neural networks.. Another problem is that this approach does not work well if each successive layer has fewer processing elements than previous layers since these types of layers will not be able to learn anything. Lastly, HTM algorithms are unable to handle categorical data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-convolutional-neural-networks-cnns"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.tensorflow.org/tutorials/images/cnn"&gt;7. Convolutional Neural Networks (CNNs)&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Convolutional Neural Networks (CNNs) are a type of neural network that is used for both unsupervised and supervised learning problems. They work by taking an input image and splitting it into small square tiles called "windows." Each window is then passed through a neuron in the first layer of the CNN which performs a convolution operation on it using a kernel matrix . The output of this layer is then passed through another layer of neurons which perform another convolution operation, this time with a different kernel matrix. This process is repeated until the final layer is reached which produces an output that is a prediction of the input image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The advantage&lt;/strong&gt; to using CNNs is that they are able to learn complex relationships between data sets and can be trained quickly since only backpropagation is required for training. Additionally, they often result in lower-dimensional input spaces than other types of neural networks. However, there are some disadvantages to using this type of algorithm such as its high computational requirements which can make it difficult to train on large data sets. Another problem is that CNNs do not work well with categorical data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-support-vector-machines-svms"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.datacamp.com/community/tutorials/svm-classification-scikit-learn-python"&gt;8. Support Vector Machines (SVMs)&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Support Vector Machines (SVMs) are a type of machine learning algorithm that is used for both unsupervised and supervised learning problems. They work by constructing a hyperplane in a high-dimensional space where all the training data points lie on one side of the plane and all the other data points lie on the other side. The purpose of an SVM is to find the best possible hyperplane so that it can correctly classify all the training data points.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The advantage&lt;/strong&gt; to using SVMs is that they often result in lower dimensional input spaces than other types of machine learning algorithms. Additionally, they are able to learn complex relationships between data sets and can be trained quickly since only backpropagation is required for training. However, there are some disadvantages to using this type of algorithm such as its high computational requirements which can make it difficult to train on large data sets. Another problem is that SVMs do not work well with categorical data.&lt;/p&gt;




&lt;p&gt;We hope that this list of top 8 most important unsupervised machine learning algorithms has helped you to understand the basics. For more information on these algorithms, please visit their corresponding Python code references below. If there are other popular or trending topics in AI and data science that you would like us to cover, let us know!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;👉Visit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>SPOTLIGHT: A GENTLE INTRODUCTION TO MACHINE LEARNING CONCEPTS IN PYTHON</title>
      <author>Ukeje Chukwuemeriwo Goodness</author>
      <pubDate>Wed, 05 Jan 2022 11:24:37 +0000</pubDate>
      <link>https://dev.to/goodnessuc/spotlight-a-gentle-introduction-to-machine-learning-concepts-in-python-3008</link>
      <guid>https://dev.to/goodnessuc/spotlight-a-gentle-introduction-to-machine-learning-concepts-in-python-3008</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xmQPkOua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641381279658/X42-AAETc.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xmQPkOua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641381279658/X42-AAETc.jpeg" alt="image1.jpeg" width="246" height="205"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Machine Learning is a branch of Artificial intelligence that deals with the study of computational algorithms and statistical models to perform tasks through patterns and interference instead of explicit tasks. The machine (Your computer) takes in the data and algorithm, learns from it, and then could use it to predict for other new instances. Machine learning is a set of tools used to build models on data that could help predict new types of the same data. Machine learning models are now very popular everywhere. You must have once wondered how Facebook knew that you know someone, or how Spotify got that really cool jam recommended to you. Well, that is machine learning and the same way Facebook could pop up someone you do not know is based on the fact that machine-learning models are not 100% accurate all the time.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Machine Learning comprises of supervised learning where we know the target or past answer and unsupervised learning where there are no targets.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this article, we will be covering the basics of machine learning by viewing the basic ways machine learning models carry out operations to give us juicy feedback. This article is on supervised learning, as this is an introduction.&lt;/p&gt;

&lt;p&gt;The Concepts below cover the basics of machine learning:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#grouping-data-into-features-and%C2%A0targets"&gt;
  &lt;/a&gt;
  GROUPING DATA INTO FEATURES AND TARGETS:
&lt;/h4&gt;

&lt;p&gt;As highlighted earlier, in supervised learning, we aim at predicting values based on past data (target) hence; the dataset with which we work comes with a column, which contains the values, which we are trying to predict. This is the target column. Whilst other columns, which are going to be used to predict the target are called the features. Datasets could be ambiguous, containing useless data, which we would want to get rid of, and here, data analysis and manipulation comes in handy. We would also want to have a good knowledge of the features and we can do this with a good knowledge of exploratory data analysis.&lt;br&gt;
Here is a  &lt;a href="https://medium.com/swlh/intro-to-exploratory-data-analysis-eda-with-python-152a37029a8d"&gt;link&lt;/a&gt;  to an article on exploratory data analysis article you might find useful.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#basic-machine-learning-algorithm-operations"&gt;
  &lt;/a&gt;
  BASIC MACHINE LEARNING ALGORITHM OPERATIONS
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Classification&lt;/strong&gt;: In classification, machine learning models group data into different parts based on the algorithm provided. Popular classification algorithms include the K Nearest Neighbors, Support Vector Machines amongst others and with the help of a concept called cross-validation; we will be able to pick the best one to work with on our data.&lt;br&gt;
&lt;strong&gt;Regression&lt;/strong&gt;: Regression algorithms operate by giving out the relationship between two or more features in our model. Examples are linear and logistic regression algorithms.&lt;br&gt;
Regression and classification are categorized under the same umbrella of supervised machine learning. … The main difference between them is that the output variable in regression is numerical (or continuous) while that for classification is categorical (or discrete)&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#the-machine-learning%C2%A0workflow"&gt;
  &lt;/a&gt;
  THE MACHINE LEARNING WORKFLOW
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Importing&lt;/strong&gt;: By importing, we get the necessary tools we are going to be using on our machine learning model examples are the algorithms and the tools we use for exploratory data analysis&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sklearn.linearmodel import LinearRegression

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Instantiating&lt;/strong&gt;: This is the process of the creation of an instance of the machine learning method. While some of them accept parameters like the k nearest neighbours, others do not accept parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my_model = LinearRegression()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Splitting into training and testing data&lt;/strong&gt;: We split the data into training and testing sets. We go-ahead to work with the training set and then compare them with the testing set to have a glance at how well our model performed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sklearn.model_selection import train_test_split
X = feature columns
y = target column
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3) 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;*train_test_split * does a tuple unpacking of the data. The argument as seen above "test_size" is the portion of the data we are willing to allocate to the machine learning method for training.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fit&lt;/strong&gt;: By fitting a model, we are feeding the training set of our data to the algorithm to operate on. We could tune how the algorithm operates of the fitted data. We would fit the training data to the machine learning method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my_model.fit(X_train, y_train)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Predict&lt;/strong&gt;: The goal of using a machine learning algorithm is to be able to get predictions and feedbacks off of it and we do this using the predict method of the machine learning algorithm. Most machine learning algorithms are already sophisticated and ready to use so most of the work a data scientist does is with refining the data for the algorithm. We predict on the X_test from the train_test_split tuple unpacking.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;prediction = my_model.predict(X_test)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TiGh0dQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641381068026/mkLH6LZaR.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TiGh0dQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641381068026/mkLH6LZaR.jpeg" alt="robots playing chess" width="332" height="152"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#evaluating-a-models-performance"&gt;
  &lt;/a&gt;
  EVALUATING A MODEL'S PERFORMANCE
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Classification report&lt;/strong&gt;: A classification report is a metric that gives a table of how well the algorithm performed in percentages. The table contains the precision, recall, and the f1 score. The precision column tells us the percentage score of how well the algorithm classified our model accurately. The recall column gives us feedback on how the algorithm classified data that did not belong to a category while the f1 score is a harmonic mean of the precision and recall. A classification report comes in handy for model evaluation, as it is simple to obtain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sklearn.metrics import classification_report
print(classification_report(y_test,predictions))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NlbKfEGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641380782441/JzHCzd33V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NlbKfEGd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641380782441/JzHCzd33V.png" alt="An example of a classification report" width="700" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The confusion matrix&lt;/strong&gt;: The confusion matrix method is used to summarize how the algorithm performed on our data. In a confusion matrix, the rows correspond to values the algorithm predicted while the columns correspond to the known truths (actuals). Values on the diagonal specify where the algorithm correctly classified our data while the others show where the algorithm failed. Using the confusion matrix we can compare how well different algorithms perform on our data and then go ahead to select the algorithm that best suits our data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sklearn.metrics import confusion_matrix
print(confusion_matrix(y_test,predictions))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5-v0Mfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641380705302/QVdI4miKkz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5-v0Mfn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641380705302/QVdI4miKkz.png" alt="confusion matrix" width="312" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cross-Validation&lt;/strong&gt;: Cross-Validation allows us to compare different machine learning methods and get a sense of how well they will work in practice which helps us choose the machine learning algorithm that best suits our data. Cross-validation does this by splitting the data into training and testing sets. Splitting the data into n numbers, the type of cross-validation is the n cross-validation since the number of splits is arbitrary. Cross-validation uses every part of the split data to deliver.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bias and Variance&lt;/strong&gt;: Bias is the inability of a machine learning method to capture the true relationship between features. Variance is the difference in fits between different datasets. In machine learning, a good algorithm is one with a low bias, can accurately model the true relationship, and has low variability (it should be able to provide consistently good predictions over different datasets). When there is a case of a high bias and low variance, the model is under-fitted and when there are a low bias and a high variance, the model is over-fit. Trading bias for variance and vice-versa is a &lt;em&gt;Bias Variance Trade-off.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02SWfsk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641380581896/1LcR0Cv8f.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02SWfsk0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641380581896/1LcR0Cv8f.jpeg" alt="" width="259" height="194"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With knowledge of these basic concepts, learning other machine learning methods would be quite easy.&lt;br&gt;
Follow and share this article if you find it useful. Till I get into your mind on this app next time 🐱‍🏍.&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>python</category>
      <category>datascience</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>Virtual Background in Android with WebRTC</title>
      <author>Nilay Jayswal</author>
      <pubDate>Wed, 05 Jan 2022 11:10:12 +0000</pubDate>
      <link>https://dev.to/100mslive/virtual-background-in-android-with-webrtc-5720</link>
      <guid>https://dev.to/100mslive/virtual-background-in-android-with-webrtc-5720</guid>
      <description>&lt;p&gt;Virtual backgrounds are becoming necessary nowadays in the video conferencing world. It allows us to replace our natural background with an image or a video. We can also upload our custom images in the background.&lt;/p&gt;

&lt;p&gt;In this blog, we are going to implement Virtual Background in Android with WebRTC using &lt;a href="https://developers.google.com/ml-kit/vision/selfie-segmentation/android"&gt;mlkit selfie segmentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This content was originally published - &lt;a href="https://www.100ms.live/blog/virtual-background-in-android-with-webrtc"&gt;HERE&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This feature works best with uniform lightning condition in background and requires a high-performance mobile android device for a smooth user experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By end of this blog, you can expect the virtual background feature to look like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SAKS4Qg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmkrzidhzw9n78dxw4ee.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SAKS4Qg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lmkrzidhzw9n78dxw4ee.gif" alt="Image description" width="340" height="624"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;

&lt;p&gt;Add the dependencies for the ML Kit Android libraries to the module's app-level gradle file, which is usually &lt;code&gt;app/build.gradle&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
dependencies {  implementation 'com.google.mlkit:segmentation-selfie:16.0.0-beta3'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the dependencies for the libyuv.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dependencies {  implementation 'io.github.zncmn.libyuv:core:0.0.7'}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;libyuv is an open-source project that includes YUV scaling and conversion functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#common-webrtc-terms-you-should-know"&gt;
  &lt;/a&gt;
  Common WebRTC terms you should know
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;VideoFrame: It contains the buffer of the frame captured by the camera device in I420 format.&lt;/li&gt;
&lt;li&gt;VideoSink :  It is used to send the frame back to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API"&gt;WebRTC&lt;/a&gt; native source.&lt;/li&gt;
&lt;li&gt;VideoSource : It reads the camera device, produces VideoFrames, and deliver them to VideoSinks.&lt;/li&gt;
&lt;li&gt;VideoProcessor : It is an interface provided by WebRTC to update videoFrames produced by videoSource .&lt;/li&gt;
&lt;li&gt;MediaStream : It is an API related to WebRTC which provides support for streaming audio and video data. It consists of zero or more &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack"&gt;MediaStreamTrack&lt;/a&gt; objects, representing various audio or video tracks&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#approaches-we-thought-of"&gt;
  &lt;/a&gt;
  Approaches we thought of
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Updating the WebRTC MediaStream by passing it to the mlkit selfie segmentation model and getting the updated stream. But sadly we don’t have a method in android to replaceTrack in WebRTC.&lt;/li&gt;
&lt;li&gt;Updating the stream coming from the source camera and then passing it to WebRTC. Got some success on it, but then issues were faced in using the updated stream in the WebRTC.&lt;/li&gt;
&lt;li&gt;Creating another virtual video source from the camera source and using that as an input to mlkit API . But sending the updated stream back to WebRTC gave us issues.&lt;/li&gt;
&lt;li&gt;Using &lt;a href="https://developer.android.com/training/camerax"&gt;Android CameraX Apis&lt;/a&gt; to read frames but again WebRTC doesn't support it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After trying all these approaches and not getting suitable results, we figured out that we need to do processing on VideoFrame for our use case.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-the-videoframe-from-webrtc"&gt;
  &lt;/a&gt;
  Getting the VideoFrame from WebRTC
&lt;/h2&gt;

&lt;p&gt;Most challenging part was getting the VideoFrame out for every frame from WebRTC for processing. After a lot of research we found out that we can use setVideoProcessor API available with VideoSource. It has few callbacks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//It gives us VideoFrame going into WebRTC for every frame
fun onFrameCaptured(inputVideoFrame: VideoFrame?)

//It gives us sink which we will use to send updated videoFrame back to //WebRTC
fun setSink(sink: VideoSink?)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we can setVideoProcessor to VideoSource(source in below code snippet is VideoSource)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; source.setVideoProcessor(object : VideoProcessor {
            override fun onCapturerStarted(p0: Boolean) {

            }
            override fun onCapturerStopped() {

            }
            override fun onFrameCaptured(inputVideoFrame: VideoFrame?) {
              //Do processing with inputVideoFrame here
            }
            override fun setSink(sink: VideoSink?) {
              //set sink here to send updated videoFrame back to WebRTC 
            }
        })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we are setting VideoProcessor to the VideoSource we need to call onFrame callback on every frame from VideoSink otherwise, we will get a black screen on our device.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Here frame is the updated VideoFrame we are getting after ML processing //on input videoFrame
sink.onFrame(frame)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#converting-videoframe-to-supported-ml-model-input-type"&gt;
  &lt;/a&gt;
  Converting VideoFrame to supported ML model Input Type
&lt;/h2&gt;

&lt;p&gt;To perform segmentation on an image, mlkit needs an &lt;a href="https://developers.google.com/android/reference/com/google/mlkit/vision/common/InputImage"&gt;InputImage&lt;/a&gt; object which can be created from either a bitmap, bytebuffer, media.Image, byte array, or a file on the device.&lt;/p&gt;

&lt;p&gt;Here, we have converted inputVideoFrame into a bitmap using &lt;a href="https://chromium.googlesource.com/libyuv/libyuv/"&gt;libyuv&lt;/a&gt; library&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;YuvFrame:&lt;/strong&gt; It copies the Y, V and U planes from videoFrame buffer into a byte array which we are converting to ARGB_8888 Bitmap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yuvFrame = YuvFrame(
                inputVideoFrame,
                YuvFrame.PROCESSING_NONE,
                inputVideoFrame.timestampNs
            )
 inputFrameBitmap = yuvFrame.bitmap
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have created InputImage using inputFrameBitmap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;val mlImage = InputImage.fromBitmap(inputFrameBitmap, 0)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#initialise-mlkit-model"&gt;
  &lt;/a&gt;
  Initialise mlkit model
&lt;/h2&gt;

&lt;p&gt;We have created an instance of Segmenter using &lt;a href="https://developers.google.com/ml-kit/vision/selfie-segmentation/android#1_create_an_instance_of_segmenter"&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process-the-mlimage"&gt;
  &lt;/a&gt;
  Process the mlImage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;segmenter.process( mlImage )
            .addOnSuccessListener { segmentationMask -&amp;gt;
                val mask = segmentationMask.buffer
                val maskWidth = segmentationMask.width
                val maskHeight = segmentationMask.height
                mask.rewind()
                val arr: IntArray = maskColorsFromByteBuffer(mask, maskWidth, maskHeight)
                val segmentedBitmap = Bitmap.createBitmap(
                    arr, maskWidth, maskHeight, Bitmap.Config.ARGB_8888
                )
            //segmentedBitmap is the person segmented from background
            }
            .addOnFailureListener { exception -&amp;gt;
                HMSLogger.e( "App" , "${exception.message}" )
            }
            .addOnCompleteListener {
            }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#draw-the-segmented-background-on-the-canvas"&gt;
  &lt;/a&gt;
  Draw the segmented background on the canvas
&lt;/h2&gt;

&lt;p&gt;We have used &lt;a href="https://developer.android.com/reference/android/graphics/PorterDuff.Mode"&gt;Porter.Duff&lt;/a&gt; mode to draw segmented output with the background image given by user on the Canvas(using &lt;a href="https://developer.android.com/reference/android/graphics/Canvas"&gt;canvas&lt;/a&gt; APIs)&lt;br&gt;
After this we will get outputBitmap from canvas which we are using to create an updated VideoFrame&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#create-new-videoframe-from-outputbitmap"&gt;
  &lt;/a&gt;
  Create new VideoFrame from outputBitmap
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;surfTextureHelper?.handler?.post() {
                GLES20.glTexParameteri(
                    GLES20.GL_TEXTURE_2D,
                    GLES20.GL_TEXTURE_MIN_FILTER,
                    GLES20.GL_NEAREST
                )
                GLES20.glTexParameteri(
                    GLES20.GL_TEXTURE_2D,
                    GLES20.GL_TEXTURE_MAG_FILTER,
                    GLES20.GL_NEAREST
                )
                GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, outputBitmap, 0)

                val i420Buf = yuvConverter.convert(inputBuffer)
                val outputVideoFrame = VideoFrame(i420Buf, 180, frameTs)                //180 is the frame rotation degree which we are using
            }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#send-videoframe-back-to-webrtc"&gt;
  &lt;/a&gt;
  Send VideoFrame back to WebRTC
&lt;/h2&gt;

&lt;p&gt;This will replace the input video feed with the background supplied on both local and remote&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sink.onFrame(outputVideoFrame)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#time-taken"&gt;
  &lt;/a&gt;
  Time taken
&lt;/h2&gt;

&lt;p&gt;The whole pipeline takes less than 20ms per frame on One Plus 6 (Android).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimizations"&gt;
  &lt;/a&gt;
  Optimizations
&lt;/h2&gt;

&lt;p&gt;Most of the processing time is taken by input VideoFrame to YuvFrame conversion. Since the real-time view doesn't change much on every frame, there is no point in doing this conversion on every frame. The previous converted YuvFrame can be easily used for processing. It helps in enhancing the performance and user experience.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Flask Internals </title>
      <author>Sm0ke</author>
      <pubDate>Wed, 05 Jan 2022 11:00:22 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-internals-4glh</link>
      <guid>https://dev.to/sm0ke/flask-internals-4glh</guid>
      <description>&lt;p&gt;Hello Coders! &lt;/p&gt;

&lt;p&gt;This article presents a few commands we can execute inside the &lt;strong&gt;Flask Shell&lt;/strong&gt; that might help us understand the structure and the business logic of a legacy web app. We might need this when we start working on a new project designed or coded in the past or when our own web app is getting bigger.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! Topics covered: &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;👉 Flask - Short introduction&lt;/li&gt;
&lt;li&gt;👉 Flask CLI (command line interface)&lt;/li&gt;
&lt;li&gt;👉 List Registered Models&lt;/li&gt;
&lt;li&gt;👉 List Table Columns&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#flask-intro"&gt;
  &lt;/a&gt;
  ✨ Flask Intro
&lt;/h2&gt;

&lt;p&gt;Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. Getting started with Flask is pretty easy. Once we have Python3 installed and a modern code editor like VsCode or Atom we can write our first web app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;flask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above command will install the latest version of Flask via PIP, the official package manager for Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Contents of - app.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'Hello from Flask!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the file is saved, we can invoke Flask magic using the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flask run
 &lt;span class="k"&gt;*&lt;/span&gt; Running on http://127.0.0.1:5000/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#flask-cli"&gt;
  &lt;/a&gt;
  ✨ Flask CLI
&lt;/h2&gt;

&lt;p&gt;Flask provides a convenient way to interact with all app internals via a simple command-line interface powered by the &lt;code&gt;Click&lt;/code&gt; package. To invoke the CLI, we need to execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;            &lt;span class="c1"&gt;# The shell is waiting for our commands
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Flask CLI - &lt;code&gt;List Routes&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_map&lt;/span&gt;
&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rule&lt;/span&gt; &lt;span class="s"&gt;'/register.html'&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rule&lt;/span&gt; &lt;span class="s"&gt;'/logout.html'&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;logout&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rule&lt;/span&gt; &lt;span class="s"&gt;'/sitemap.xml'&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sitemap&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rule&lt;/span&gt; &lt;span class="s"&gt;'/login.html'&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rule&lt;/span&gt; &lt;span class="s"&gt;'/static/&amp;lt;filename&amp;gt;'&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rule&lt;/span&gt; &lt;span class="s"&gt;'/&amp;lt;path&amp;gt;'&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Rule&lt;/span&gt; &lt;span class="s"&gt;'/'&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HEAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OPTIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Flask CLI - &lt;code&gt;Print static folder&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;static_folder&lt;/span&gt;
&lt;span class="s"&gt;'D:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;work&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;flask-material-kit&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;app&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;static'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Flask CLI - &lt;code&gt;Print templates folder&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt; 
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;template_folder&lt;/span&gt;
&lt;span class="s"&gt;'templates'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Flask CLI - &lt;code&gt;List Database Models&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;db&lt;/code&gt; object holds the &lt;code&gt;SqlAlchemy&lt;/code&gt; interface and we will pull the information via this object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;      &lt;span class="c1"&gt;# &amp;lt;-- db is the object 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 List All Tables&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;
&lt;span class="n"&gt;FacadeDict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;'Users'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Users'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;In my project, we have a single &lt;code&gt;Users&lt;/code&gt; table - let's take a look at the definition:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Users'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Users'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MetaData&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;👉 Flask CLI - &lt;code&gt;List Table Columns&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Users'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="p"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt; 
&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;
&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;
&lt;span class="n"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#free-sample-material-kit"&gt;
  &lt;/a&gt;
  ✨ Free Sample - Material Kit
&lt;/h2&gt;

&lt;p&gt;Curious minds can experiment and play with all the above commands using this open-source sample provided with database, authentication, SqlAlchemy ORM, and Docker support - &lt;a href="https://appseed.us/apps/flask-apps/flask-material-kit"&gt;Flask Material Kit&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👉 &lt;a href="https://github.com/app-generator/flask-material-kit"&gt;Flask Material Kit&lt;/a&gt; - source code&lt;/li&gt;
&lt;li&gt;👉 &lt;a href="https://flask-material-kit.appseed-srv1.com/"&gt;Flask Material Kit&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tdLEjxe7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nd1qbq91tqfqchp9y595.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tdLEjxe7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nd1qbq91tqfqchp9y595.png" alt="Flask Material Kit - Bootstrap 5 Design." width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resources, feel free to access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/flask-command-line-open-source-sample-34m9"&gt;Flask Command-Line&lt;/a&gt; - published on Dev.to&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/sm0ke/flask-a-list-of-useful-how-to-s-42m7"&gt;Flask - A list of useful “HOW TO’s”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flask</category>
      <category>webdev</category>
      <category>cli</category>
    </item>
    <item>
      <title>What way should I choose React Native or Flutter</title>
      <author>maheenriaz</author>
      <pubDate>Wed, 05 Jan 2022 10:55:36 +0000</pubDate>
      <link>https://dev.to/zenkoders/what-way-should-i-choose-react-native-or-flutter-4h5e</link>
      <guid>https://dev.to/zenkoders/what-way-should-i-choose-react-native-or-flutter-4h5e</guid>
      <description>&lt;p&gt;In this blog, we will discuss two top-rank frameworks i.e. React Native and Flutter. Earlier we needed time, money, and skills to develop cross-platform applications. But nowadays companies need the fastest way to develop native apps. To develop native apps, we must know JAVA for android and SWIFT for ios which waste our time. React native and flutter give us the advantage to write a single code and deploy it to various platforms.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter:
&lt;/h2&gt;

&lt;p&gt;From a single codebase in a flutter, we create natively-compiled apps for mobile and desktop. Google has recently developed cross-platform mobile app development. Dart is the programming language used by flutter. It enables the creation of expressive and flexible user interfaces with native performance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R1FfhJrM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00jdn2x0vol1t7juxexy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R1FfhJrM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00jdn2x0vol1t7juxexy.png" alt="flutter" width="880" height="433"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-native"&gt;
  &lt;/a&gt;
  React Native:
&lt;/h2&gt;

&lt;p&gt;React Native is an open-source framework developed by Facebook and it runs on javascript. The main focus of this framework is the native application rendering that is primarily compatible with Android and iOS. React native is based upon React JS which is a factor of native code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jm3EraMt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybgcvg98b26whcm6iyz6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jm3EraMt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybgcvg98b26whcm6iyz6.png" alt="reactnative" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#programming-language-difference"&gt;
  &lt;/a&gt;
  Programming Language Difference:
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#react-native"&gt;
  &lt;/a&gt;
  React Native:
&lt;/h2&gt;

&lt;p&gt;React native uses javascript. It is easier for developers to move on to react-native because of javascript as compared to dart.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter:
&lt;/h2&gt;

&lt;p&gt;Flutter uses dart language. It is just like the C language/JAVA. Dart is not used much nowadays. It supports object-oriented programming like abstraction, encapsulation, polymorphism, and inheritance. Dart bridge is larger but it runs faster as compared to javascript bridge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-react-native"&gt;
  &lt;/a&gt;
  Advantages of React Native:
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-changes-are-visible-immediately"&gt;
  &lt;/a&gt;
  1. Changes Are Visible Immediately:
&lt;/h2&gt;

&lt;p&gt;React native uses hot reloading or live reloading. When a user makes any changes in the code, changes will be visible to the developer immediately which is the main advantage to seeing the real-time changes in the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-adding-to-an-existing-app"&gt;
  &lt;/a&gt;
  2. Adding to an Existing App:
&lt;/h2&gt;

&lt;p&gt;If we already have an app and we want to improve that app. We don't need to re-create that app. By using React Native, we can add components that we had to create in our app. It saves our time and money.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-flexibility"&gt;
  &lt;/a&gt;
  3. Flexibility:
&lt;/h2&gt;

&lt;p&gt;React-native makes it easy for developers to pick up where someone left the work and start coding. It increases the flexibility of developers and improves the performance of mobile applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-support-3rd-party-libraries"&gt;
  &lt;/a&gt;
  4. Support 3rd Party libraries:
&lt;/h2&gt;

&lt;p&gt;React native allows using 3rd party libraries using a native module and javascript module. If you want to add dynamic charts in react native apps, you can easily add them in your application using 3rd party libraries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-react-native"&gt;
  &lt;/a&gt;
  Disadvantages of React Native:
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-takes-longer-time-to-get-started"&gt;
  &lt;/a&gt;
  1. Takes longer time to get started:
&lt;/h2&gt;

&lt;p&gt;React native takes a long time to initialize the app because of the javascript thread. Any kind of user interaction like events, API response. The longer the API response, it will block the user thread and slow the performance of mobile applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-it-is-insecure-in-terms-of-security"&gt;
  &lt;/a&gt;
  2. It is insecure in terms of security:
&lt;/h2&gt;

&lt;p&gt;React native creates a vulnerability in the security of the system. If you are creating finance and banking apps you don't need to choose to react-native because for the banking app the data is confidential and we need security for confidential data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-its-a-difficult-task-to-learn-the-react-native"&gt;
  &lt;/a&gt;
  3. It's a Difficult Task to Learn the React Native:
&lt;/h2&gt;

&lt;p&gt;If you are a newcomer in the field of development then it will be hard to learn to react-native because of JSX. JSX contains Html with javascript. In comparison to other cross-platform apps, it will be difficult for the ordinary student to learn to react-native.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#advantages-of-flutter"&gt;
  &lt;/a&gt;
  Advantages of flutter:
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-fast-reloading"&gt;
  &lt;/a&gt;
  1. Fast Reloading:
&lt;/h2&gt;

&lt;p&gt;Flutter provides fast reloading after changes are made in the application. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-open-source"&gt;
  &lt;/a&gt;
  2. Open source:
&lt;/h2&gt;

&lt;p&gt;Flutter is open-source and free to use. They provide substantial documentation and a large community that helps you to solve any problem you might run into.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-productivity-is-high"&gt;
  &lt;/a&gt;
  3. Productivity is high:
&lt;/h2&gt;

&lt;p&gt;You may utilize the same code base for your iOS and Android apps because Flutter is cross-platform. This will undoubtedly save you time and money.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-compatibility"&gt;
  &lt;/a&gt;
  4. Compatibility:
&lt;/h2&gt;

&lt;p&gt;Since widgets are the part of flutter app. That's why we will experience fewer compatibility issues on different operating systems which saves time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-flutter"&gt;
  &lt;/a&gt;
  Disadvantages of Flutter:
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-not-suitable-for-web-apps"&gt;
  &lt;/a&gt;
  1. Not suitable for web apps:
&lt;/h2&gt;

&lt;p&gt;Browsers do not currently support Flutter-based applications. This implies you won't be able to use any web applications. It also does not support watchOS and tvOS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-its-a-difficult-task-to-learn-the-dart"&gt;
  &lt;/a&gt;
  2. It's a Difficult Task to Learn the Dart:
&lt;/h2&gt;

&lt;p&gt;Dart is a lesser-known programming language, yet it is necessary to master it to work with Flutter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-does-not-support-3rd-party-libraries"&gt;
  &lt;/a&gt;
  3. Does Not support 3rd party libraries:
&lt;/h2&gt;

&lt;p&gt;It does not support 3rd party libraries which increases the programming tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-large-app-size"&gt;
  &lt;/a&gt;
  4. Large App size:
&lt;/h2&gt;

&lt;p&gt;flutter app size is larger than 5MB.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apps-that-are-built-on-react-native"&gt;
  &lt;/a&gt;
  Apps that are built on React Native:
&lt;/h2&gt;

&lt;p&gt;Facebook&lt;br&gt;
Instagram&lt;br&gt;
Skype&lt;br&gt;
Uber Eats&lt;br&gt;
Wix&lt;br&gt;
Tesla&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apps-that-are-built-on-flutter"&gt;
  &lt;/a&gt;
  Apps that are built on Flutter:
&lt;/h2&gt;

&lt;p&gt;Hamilton&lt;br&gt;
Lunching&lt;br&gt;
Reflectly&lt;br&gt;
Google Ads&lt;br&gt;
Xianyu by Alibaba&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-we-create-a-flutter-app"&gt;
  &lt;/a&gt;
  How we create a Flutter app:
&lt;/h2&gt;

&lt;p&gt;Firstly, open a terminal and run these commands:&lt;br&gt;
$ flutter create my_app&lt;br&gt;
$ flutter analyze&lt;br&gt;
$ flutter test&lt;br&gt;
$ flutter run lib/main.dart&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-we-create-react-native-app"&gt;
  &lt;/a&gt;
  How we create react native app:
&lt;/h2&gt;

&lt;p&gt;Firstly, open terminal and run these commands:&lt;br&gt;
$ npx react-native init new_project&lt;br&gt;
$ cd new_project&lt;br&gt;
$ react-native run-android&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>flutter</category>
      <category>mobiledev</category>
    </item>
    <item>
      <title>It's Here! Announcing the Release of Appwrite 0.12!</title>
      <author>Eldad A. Fux</author>
      <pubDate>Wed, 05 Jan 2022 10:37:45 +0000</pubDate>
      <link>https://dev.to/appwrite/its-here-announcing-the-release-of-appwrite-012-5c8b</link>
      <guid>https://dev.to/appwrite/its-here-announcing-the-release-of-appwrite-012-5c8b</guid>
      <description>&lt;p&gt;We're excited to share that Appwrite 0.12 is now officially available! The new Appwrite version includes our &lt;strong&gt;biggest ever performance improvements&lt;/strong&gt;, &lt;strong&gt;enhanced developer experience&lt;/strong&gt;, and &lt;strong&gt;many new features&lt;/strong&gt; designed to make developers' lives easier. Trust us, this one's a biggie! In addition, the latest release includes over 1,500 commits and contributions from 29 new contributors that have helped make this release possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-on-steroids"&gt;
  &lt;/a&gt;
  🧪 Database on Steroids
&lt;/h2&gt;

&lt;p&gt;In version 0.12, we have &lt;strong&gt;&lt;em&gt;completely&lt;/em&gt;&lt;/strong&gt; rewritten the Appwrite data management layer. We have improved the internal data structures, background workers, and we’ve enabled new concepts such as attributes (instead of rules) and indexes to allow maximum performance and flexibility.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ejfCuoP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mri55xtzr37e6bz14ocf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ejfCuoP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mri55xtzr37e6bz14ocf.png" alt="Image description" width="880" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve also added a new easy-to-understand query syntax. The new syntax allows new capabilities, like OR statements, and opens the door for the core team to implement many more advanced features we’re passionate about, like &lt;code&gt;includes&lt;/code&gt; operator and GEO-based queries.&lt;/p&gt;

&lt;p&gt;The team has done a lot of work to enable other databases providers, and we hope to release support for more loved databases soon. A major part of our agenda is to enable dev teams the comfort and confidence to use Appwrite the way they wish to, with tools they already love, know, and feel confident with.&lt;/p&gt;

&lt;p&gt;The new database does introduce some breaking changes before we move to version 1.0. Please take time to review the list of changes and our &lt;a href="https://dev.to/appwrite/appwrite-012-migration-post-3cha"&gt;migration tutorial&lt;/a&gt;. To support existing Appwrite users we'll continue to support the 0.11 branch for at least the next six months.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pagination-just-got-a-lot-faster"&gt;
  &lt;/a&gt;
  📑 Pagination Just Got A LOT Faster!
&lt;/h2&gt;

&lt;p&gt;With Appwrite 0.12, we are happy to introduce the new cursor pagination strategy. While the traditional offset and limit pagination is very intuitive and easy to understand it doesn’t &lt;a href="https://www.eversql.com/faster-pagination-in-mysql-why-order-by-with-limit-and-offset-is-slow/"&gt;scale well&lt;/a&gt;. To tackle this problem, we have limited the limit+offset pagination to a maximum of 5,000 documents. With this limit, you can still use the offset+limit pagination for small dataset, but as your data grows, you can migrate to the new cursor pagination that scales very well with almost no regard to your collection size.&lt;/p&gt;

&lt;p&gt;The chart below demonstrates how significant this performance difference can be on a collection containing &lt;strong&gt;1M documents&lt;/strong&gt;. The bigger the dataset, the bigger the difference, and now Appwrite can allow you to scale your pagination with confidence.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bJ6WKBio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gy7j3oexkncs4irn1kcc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bJ6WKBio--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gy7j3oexkncs4irn1kcc.png" alt="Cursor vs Offset Pagination" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The new change will apply to all the Appwrite resources where pagination is possible. Whether it's your custom collections, list of files, users, functions and other relevant resources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#permissions-are-easier-and-more-flexible"&gt;
  &lt;/a&gt;
  🚧 Permissions are Easier and More Flexible
&lt;/h2&gt;

&lt;p&gt;When we initially designed Appwrite, we wanted to have a simple declarative permission model that is also secure by default. With the release of Appwrite 0.12, we're happy to introduce the next evolution of the Appwrite permissions: &lt;strong&gt;Permission Models&lt;/strong&gt;. You will now be able to choose between two different permission models for your collections, &lt;strong&gt;collection-level permissions&lt;/strong&gt; and &lt;strong&gt;document-level permissions&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zP6k5IrD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7p6tj82pekwivp2iu5c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zP6k5IrD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7p6tj82pekwivp2iu5c.png" alt="Appwrite's Permission Models" width="880" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're already familiar with Appwrite, the document-level model will act in the same way as you already know. Each document can have read and write permissions that define which Appwrite entity (user/team/role) has access to each operation.&lt;/p&gt;

&lt;p&gt;The new &lt;strong&gt;Collection Level&lt;/strong&gt; model introduces new and easier to use collection permissions. Using the collection permissions, you only need to set the read and write permissions once. In addition, the collections permission will act the same for all the documents regardless of any permissions that may have been set on a specific document.&lt;/p&gt;

&lt;p&gt;The new model offers more flexibility for other use cases, which may not require you to leverage the original, document-level permissions. The new collection-level permission can also lead to enhanced performance as the Appwrite API is not required to validate each permission individually.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%9B-more-dashboards-and-more-control"&gt;
  &lt;/a&gt;
  🎛 More Dashboards, and More Control
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TIo3oHIV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7htmepbs9quia7lfho36.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TIo3oHIV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7htmepbs9quia7lfho36.png" alt="Appwrite's Usage Stats" width="880" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have upgraded the Appwrite console with more dashboards with your Appwrite projects' usage metrics. This is the first of many upgrades where we aim to make more usage metrics easily available through the console. Using our new dashboards, you can quickly get insights into your project performance, size, and cost. In addition, the new dashboard will now show data for your entire project, files, users, collections and documents over time. We've also added charts for your &lt;a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD operations&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#anyone-ask-for-custom-ids"&gt;
  &lt;/a&gt;
  🤟 Anyone Ask for Custom IDs?
&lt;/h2&gt;

&lt;p&gt;Custom IDs were probably one of the most requested features we’ve ever got. Now they're here! With custom IDs, you can define human-readable IDs on most Appwrite resources including users, teams, functions, projects, files, collections, and documents. If you still want to use the previous unique IDs, you can use the reserved &lt;code&gt;unique()&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SlYcie_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9g9eor5pqtw6o0mfkme.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SlYcie_r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w9g9eor5pqtw6o0mfkme.png" alt="Appwrite's Custom IDs" width="880" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With custom IDs, you can have a much smoother development experience. Instead of using meaningless strings in your code, you can now use proper naming conventions that allow you to easily migrate your code between different Appwrite environments without managing complex configuration files or programmatic setups for your project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-services-your-choice"&gt;
  &lt;/a&gt;
  ✅ Your Services, Your Choice!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3mR8J8Jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98grnzummhp5xn9myt8a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3mR8J8Jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98grnzummhp5xn9myt8a.png" alt="Image description" width="880" height="578"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We always wanted Appwrite to play well with other tools. However, we understand that one tool can’t always be the right solution to every problem. For that reason, we’ve created our server API, Cloud Functions, and our Microservice architecture that enables you to use Appwrite alongside your existing stack and even your own backend server.&lt;/p&gt;

&lt;p&gt;With version 0.12, Appwrite became more flexible by allowing you to choose which Appwrite services you wish to enable or disable. This is also a great security feature designed to reduce your attack surface by blocking services and resources you don’t consume. You can visit the new &lt;code&gt;Services&lt;/code&gt; section from your project settings and choose which services to use. For convenience, each project you own can have different settings. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-logging-providers"&gt;
  &lt;/a&gt;
  🚨 Introducing Logging Providers!
&lt;/h2&gt;

&lt;p&gt;Error logging and monitoring are crucial for any application, Appwrite being no exception. We wanted to make it extremely easy to collect and monitor your logs while staying true to our philosophy of being completely platform agnostic. With Appwrite 0.12, we've introduced support for some amazing open source logging providers like &lt;a href="https://sentry.io"&gt;Sentry&lt;/a&gt;, &lt;a href="https://raygun.com/"&gt;Raygun&lt;/a&gt; and &lt;a href="https://www.appsignal.com/"&gt;AppSignal&lt;/a&gt;! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2STd5Z6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vp1holzdty548j4ld4e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2STd5Z6J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vp1holzdty548j4ld4e.png" alt="Loggers" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're always on the lookout for more logging providers and we'd love your contributions to the &lt;a href="https://github.com/utopia-php/logger"&gt;logging library&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  📚 Learn More
&lt;/h2&gt;

&lt;p&gt;Appwrite 0.12 includes many more features, bug fixes, and security patches you should really care about that just can’t fit in one blog post. You can learn more by reviewing our &lt;a href="https://github.com/appwrite/appwrite/blob/master/CHANGES.md"&gt;official release notes&lt;/a&gt;. In the next couple of weeks, we will continue the Appwrite 0.12 release party with more content, events, and demos created by the core team to highlight the different features and powerful capabilities in this new version of Appwrite.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%97%82%EF%B8%8F-whats-next"&gt;
  &lt;/a&gt;
  🗂⚡️☁️ What's Next?
&lt;/h2&gt;

&lt;p&gt;If you like Appwrite 0.12, you will love Appwrite 0.13! Appwrite 0.12 release will enable us more flexibility and solid foundations to take Appwrite to new places, never seen in the backend-as-a-service space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Appwrite 0.13&lt;/strong&gt; will be the first release of many to enjoy the perks of the hard work the Appwrite core team with over 500 collaborators have done for the Appwrite project and ecosystem. The next version will include some very cool features like &lt;strong&gt;buckets support&lt;/strong&gt; for the Appwrite storage, more flexibility with new &lt;strong&gt;storage devices&lt;/strong&gt;, &lt;strong&gt;Sync &amp;amp; Async serverless functions&lt;/strong&gt; that have been highly requested, and amazing performance boost thanks to our improved function &lt;strong&gt;execution model&lt;/strong&gt; and &lt;strong&gt;new runtimes&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Beside the upcoming releases and features, we’ve just recently announced the ability to sign up and be the first to use the upcoming Appwrite Cloud. The &lt;strong&gt;Appwrite Cloud&lt;/strong&gt; is already in the works, and once available it will provide the easiest way to build on top of Appwrite and to scale your backend effortlessly. You can learn more on our new dedicated landing page for the &lt;a href="https://appwrite.io/cloud"&gt;Appwrite Cloud&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>news</category>
    </item>
    <item>
      <title>11 Blogposts That Changed How I Lead Software Teams in 2021</title>
      <author>Samuel James</author>
      <pubDate>Wed, 05 Jan 2022 10:34:19 +0000</pubDate>
      <link>https://dev.to/abiodunjames/11-blogposts-that-changed-how-i-lead-software-teams-in-2021-1min</link>
      <guid>https://dev.to/abiodunjames/11-blogposts-that-changed-how-i-lead-software-teams-in-2021-1min</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nRpXItwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p086kcm76oxbc4z2mov1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nRpXItwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p086kcm76oxbc4z2mov1.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;&lt;a href="https://icons8.com/"&gt;Image Source&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Last year, I broke my records of daily reading per month. It was the year I read the most book. It was also the year I read the most articles. In 2021, I was fortunate enough to come across really great posts and books that have changed my perspectives on leading software teams and becoming a better software engineer. &lt;/p&gt;

&lt;p&gt;In this post, I’ll share some of these posts because I believe there are ideas and new learnings that make you a better engineer, a better engineering manager, or a better CTO. There is something in it for everyone even if you’re just starting your career or a veteran in the industry. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-the-best-out-of-these-posts"&gt;
  &lt;/a&gt;
  Getting the Best Out of These Posts
&lt;/h1&gt;

&lt;p&gt;Frequently, I find myself in a situation I could use some insights from what I’ve learned, and I completely forgot them. I’ve developed a process that helped me remember what I read and make them stick. &lt;/p&gt;

&lt;p&gt;As you through each post, I recommend doing the following to the get best out of each:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sq6HKnH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2lj91yutkli0zgb2eh6.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sq6HKnH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2lj91yutkli0zgb2eh6.jpeg" alt="Image description" width="612" height="612"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Know what you’re reading. Read what the introduction is about and note that what you’ll learn at the end. This will help prepare your mind for the insights to come.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Identify and jot down key ideas and information in the post. Write down learnings, insights, and ideas.  Taking notes of what you learn prompts you to think about your learning and also improves your memory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make your notes searchable. You’ll need to find something in the notes someday.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Re-read your notes often and when you forget something.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/readme/guides/effective-communication"&gt;Effective communication is not about what you say – Melanie Ensign&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Communication is very crucial to leading effectively. But there is a clear difference between merely passing a message across and communicating effectively. The outcome of any communication is what determines how effective it is. Simply pushing out a message or publishing information is not enough to measure its impact. Effective communication is focused on what people need to hear in order to reach the outcome you desire and less on what you say. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://developer.squareup.com/blog/you-are-your-own-best-hype-person"&gt;You Are Your Own Best Hype Person – Marie Chatfield&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One valuable lesson I learned a while ago is no one lights a candle and puts it under a bushel. It’s for the reasons that organizations invest a lot of resources in marketing their products and brands.  At some point in any engineer’s career, you’re going to have to prove to someone that you’re worth it: worth hiring, worth promoting, worth the raise, worth taking a risk on. The better you’re at making known what you do to others (that’s hyping yourself), the higher your chances of succeeding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dropbox.tech/infrastructure/dont-lead-by-example"&gt;Don’t Lead By Example – James Coling&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We’re often told to lead by example. Yes, we all need to set good examples for people to follow. Often time, we overstep our boundaries by continuously taking the lead without setting expectations leaving reports feeling crowded out or disempowered. This post helped me to understand that setting a good example is necessary, but isn’t sufficient for strong technical leadership. Acting like a tech lead means setting clear expectations and embracing direct communication.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://xdg.me/leading-without-managing/"&gt;Leading Without Managing – David Golden&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Julie Zhuo in her book defines Leadership as being able to guide and influence other people. When most think of leading, they think of it as something that people in authority or engineers who wear manager of tech lead hats do. Contrary to that, anyone can be a leader. It’s a skill anyone can learn. One of the keys I learned last year through the post was anyone can lead without having the authority or coercive power and how to lead without authority.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://theskip.substack.com/p/three-crucial-skills-that-leaders"&gt;Three Crucial Skills Leaders Must Develop to Become Executives – Nikhyl Singhal&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Executive skills are subtle and can be elusive to managers, demanding a great deal of focus, courage, and dedication. Becoming a great executive requires a set of skills beyond what's needed to be a leader. Nikhyl Singhalin, in this post, shares crucial skills that leaders must develop to become executives. Some of the key takeaways are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn to take risks and constantly put yourself in new, challenging, and increasingly ambiguous settings.&lt;/li&gt;
&lt;li&gt;Learn to build strong relationships with other senior people who work in entirely different functions.&lt;/li&gt;
&lt;li&gt;Learn to build teams and trust the people in them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://betterprogramming.pub/10-admirable-attributes-of-a-great-technical-lead-251d13a8843b"&gt;10 Admirable Attributes of a Great Technical Lead – Elye&lt;/a&gt; (Medium Paywall)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;"It takes a lot of effort to be a great tech lead. It's a delicate balancing act between two poles of the same attribute. If there is too much weight on one side, the person may fall". This post outlines ten attributes that will make any tech lead a better one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://shekhargulati.com/2021/01/03/being-chief-technology-officer-lessons-learned-in-my-first-year/"&gt;Being a Chief Technology Officer: Lessons Learned in My First Year – Shekhar Gulati&lt;/a&gt;&lt;/strong&gt; &lt;br&gt;
Most people are not lucky to have a manual handed over to them when stepping into a leadership role. As one climbs the ladder, one begins to notice what is required to succeed at this role is slightly different from what makes one an excellent individual contributor. One of the lessons I found valuable in this post includes picking your battles wisely and getting things done without doing them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://shopify.engineering/building-mental-models"&gt;Building Mental Models of Ideas That Don’t Change – Hammad Khalid&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For Individual Contributors and Engineering Managers, there is always new stuff to learn. If you’re at the beginning of your career, it can be overwhelming. One approach to stay above the water is finding a way to prioritise what to learn and a way of keeping track of principles or ideas that don’t change (that’s mental models) to make better and informed decisions.  This post outlines a list of engineering principles and management principles, some of which that took me years to learn.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://softstuff.tools/"&gt;A Collection of How-Tos, Templates, and Articles to Help You Be the Manager and Leader Your Team Needs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This link contains a collection of todos, how-tos, templates, and articles for engineering managers and tech leads. The categories covered include techniques and templates for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conducting interviews&lt;/li&gt;
&lt;li&gt;Conducting meetings&lt;/li&gt;
&lt;li&gt;Building diversity and inclusion&lt;/li&gt;
&lt;li&gt;Recruiting&lt;/li&gt;
&lt;li&gt;Building Culture &lt;/li&gt;
&lt;li&gt;Growth and more.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/lpasqualis/11-top-responsibilities-and-10-common-mistakes-of-a-technical-leader-9po"&gt;11 Top Responsibilities and 10 Common Mistakes of a Technical Leader– Lorenzo Pasqualis&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“Similar to building a Lego tower, building software requires making decisions from the beginning to the end. The first responsibility of a technical leader is to define the engineering reality: What needs to be built, the general technical direction, an example of the golden standard for productivity and technical excellence, the business and technological context, and the time and resource constraints.”   If you’re a Tech Lead or an Engineering Manager, you’ll find this post interesting. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.thebalancecareers.com/succeeding-on-your-first-day-as-a-manager-2276172"&gt;First Day Success Manual for New Managers – John Reh&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I’ve seen managers and senior engineers setting themselves up for failure immediately after they joined a new team. They start by criticising the existing codebase, past practices, and wanting to implement tons of their processes from day one.  Criticising past practices no matter how ineffective they seem is one of the many ways new hires set themselves up for failure. I love the post because it outlines how to prepare for making a good impression ranging from meeting the team, to attitude and culture.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#where-to-go-from-here-join-software-leads-newsletter"&gt;
  &lt;/a&gt;
  Where To Go From Here: Join Software Leads' Newsletter
&lt;/h2&gt;

&lt;p&gt;To take your learnings further, Join the &lt;a href="https://softwareleads.substack.com/"&gt;Software Leads’ newsletter&lt;/a&gt;, a monthly newsletter on software engineering and leadership.  &lt;/p&gt;

&lt;p&gt;Every month, I publish a new issue that includes links to interesting articles, use cases, and insights from experts on leading teams and solving common software engineering challenges at scale. Together, we learn and become better software engineers, better software leads, better engineering managers, and CTOs by making fewer mistakes as we learn from one another&lt;/p&gt;

</description>
      <category>leadership</category>
      <category>management</category>
      <category>career</category>
    </item>
    <item>
      <title>HTML→ The riddles of the sphinx</title>
      <author>Manu Martinez</author>
      <pubDate>Wed, 05 Jan 2022 10:22:47 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/html-the-riddles-of-the-sphinx-12de</link>
      <guid>https://dev.to/whitehatdevv/html-the-riddles-of-the-sphinx-12de</guid>
      <description>&lt;p&gt;Hello friends! Today we are going to talk about forms, yes! because data is also collected through the web, but this is not the only way, and we will see it in another post... &lt;/p&gt;

&lt;p&gt;A web form basically works and looks similar to a form like the one made by telephone companies, or any other, which spend hours and hours calling to offer you their services. 😒😓 &lt;br&gt; &lt;/p&gt;

&lt;p&gt;The web form is composed of one or more control elements (sometimes called widgets), plus some additional elements that help to structure the overall form; they can be single or multi-line text fields, drop-down boxes, buttons, checkboxes or radio buttons, and they are mainly created with the  element.&lt;/p&gt;

&lt;p&gt;How do we create a form? Pay attention, don't get lost! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; We create the form with the  tag.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
......
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We add the "control" elements.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;First name:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"lname"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Last name:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"lname"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"lname"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt; A button to &lt;em&gt;"validate"&lt;/em&gt; (submit)
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt; and that's it! The form is ready.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;First name:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"fname"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"lname"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Last name:&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"lname"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"lname"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6sYA9-as--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641303382354/IAdW6RE7k.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6sYA9-as--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641303382354/IAdW6RE7k.jpeg" alt="formulariomanu.jpg" width="800" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A validation button is nothing more than a form element that allows data to be sent to the server for processing. &lt;/p&gt;

&lt;p&gt;There are many more elements, and attributes to create more complete and complex forms but I'll reserve that for the PDF I'm making for you plus a cheatsheet! &lt;/p&gt;

&lt;p&gt;Thanks for reading the post, that's all for today! and remember to always be the best version of you! 🤩&lt;/p&gt;

</description>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Selecting The RIGHT way in CSS!! 🎨</title>
      <author>ST1LLWATER</author>
      <pubDate>Wed, 05 Jan 2022 10:21:52 +0000</pubDate>
      <link>https://dev.to/st1llwater/selecting-the-right-way-in-css-3oej</link>
      <guid>https://dev.to/st1llwater/selecting-the-right-way-in-css-3oej</guid>
      <description>&lt;p&gt;For all those frontend enthusiasts out there, I have provided this brief and as clearly as possible description of all CSS selectors and combinators. Do not hesitate to try them out because practice makes perfect! 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#core-selectors"&gt;
  &lt;/a&gt;
  Core Selectors 🤌
&lt;/h2&gt;

&lt;p&gt;Selectors in CSS are used to select the appropriate HTML element you want to style. 🥸&lt;br&gt;
Several CSS selectors exist for versatility in selection.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#class-selector-"&gt;
  &lt;/a&gt;
  Class Selector ( . )
&lt;/h3&gt;

&lt;p&gt;Eg: .outer&lt;/p&gt;

&lt;p&gt;Selects all elements which have the given class. (Outer class in our example)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#id-selector-%EF%B8%8F-"&gt;
  &lt;/a&gt;
  ID Selector ( #️ )
&lt;/h3&gt;

&lt;p&gt;Eg: #name&lt;/p&gt;

&lt;p&gt;Selects the HTML element which has the given id. (name in our example case)&lt;br&gt;
(Quick Fact: ID is unique in whole document unlike classes)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elementtype-selector"&gt;
  &lt;/a&gt;
  Element/Type Selector 🏷️
&lt;/h3&gt;

&lt;p&gt;Eg: h1&lt;br&gt;
Directly select all the specified HTML element on the document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#universal-selector-"&gt;
  &lt;/a&gt;
  Universal Selector ( * )
&lt;/h3&gt;

&lt;p&gt;Selector: *&lt;/p&gt;

&lt;p&gt;Universal Selector! Selects Everything!!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attribute-selector-attribute-"&gt;
  &lt;/a&gt;
  Attribute Selector ( 🏷️[attribute] )
&lt;/h3&gt;

&lt;p&gt;Eg: img[href]&lt;/p&gt;

&lt;p&gt;Selects the given attribute of the given tag from DOM.&lt;br&gt;
(Quick Tip: You can even specify the attribute value to select a particular element.&lt;/p&gt;

&lt;p&gt;For Eg: a[href="&lt;code&gt;https://example.com&lt;/code&gt;"]&lt;br&gt;
This selects all anchor tags which have the given href!)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pseudo-class-selector-"&gt;
  &lt;/a&gt;
  Pseudo Class Selector ( : )
&lt;/h3&gt;

&lt;p&gt;Eg: button:hover&lt;/p&gt;

&lt;p&gt;Pseudo classes are special keywords which specify a special state of an element. Like hover state on button, focus state on input etc. (Our example targets the hover state of all buttons on the DOM).&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Check &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes"&gt;this&lt;/a&gt; to know more about all types of pseudo classes!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pseudo-element-selector-"&gt;
  &lt;/a&gt;
  Pseudo Element Selector ( :: )
&lt;/h3&gt;

&lt;p&gt;Eg: p::first-letter&lt;/p&gt;

&lt;p&gt;Pseudo element selector are those which let you target a &lt;em&gt;specific&lt;/em&gt; part of an element.&lt;br&gt;
(Given example targets the first letter of all paragraph tags present in our DOM)&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Check &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements"&gt;this&lt;/a&gt; to know more about all types of pseudo classes!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#combinators"&gt;
  &lt;/a&gt;
  Combinators 👈
&lt;/h2&gt;

&lt;p&gt;Combinators are used to specify relationship between two selectors. 🤝&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#descendant-combinator"&gt;
  &lt;/a&gt;
  Descendant Combinator ⬇️
&lt;/h3&gt;

&lt;p&gt;Eg: h1 p ( space ) 🌌&lt;/p&gt;

&lt;p&gt;The descendant combinator targets all the second mentioned elements (p in our example) who are the descendant or in other words have the first mentioned element as a parent or ancestor.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
(Given example selects all p tags which have h1 as their parent or ancestor)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#child-combinator-gt-"&gt;
  &lt;/a&gt;
  Child Combinator ( &amp;gt; ) 🧒
&lt;/h3&gt;

&lt;p&gt;Eg: ul &amp;gt; li&lt;/p&gt;

&lt;p&gt;This selects only those elements matched by the second selector that are the direct children of elements matched by the first.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
(Given example selects all li elements which are direct children of ul)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adjacent-sibling-combinator"&gt;
  &lt;/a&gt;
  Adjacent Sibling Combinator
&lt;/h3&gt;

&lt;p&gt;Eg: h1 + p ( + ) 🧑‍🤝‍🧑&lt;/p&gt;

&lt;p&gt;This combinator separates two selectors and matches the second element only if it immediately follows the first element, and both are children of the same parent.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
(Example selects p tags if its followed by a h1 tag and both belongs to a same parent)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#general-sibling-combinator-"&gt;
  &lt;/a&gt;
  General Sibling Combinator ( ~ ) 👨‍👦
&lt;/h3&gt;

&lt;p&gt;Eh: h1 ~ p&lt;/p&gt;

&lt;p&gt;This matches all iterations of the second element, that are following the first element (though not necessarily immediately), and are children of the same parent.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
(Our example selects all the p tags which are following h1 tag (can be multiple p tags) unlike the Adjacent sibling selector which selects only the first occurrence)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-go-get-some-experience-with-these-selectors-by-trying-them-yourself"&gt;
  &lt;/a&gt;
  Now go get some experience with these selectors by trying them yourself! 🤓😎
&lt;/h3&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>design</category>
    </item>
    <item>
      <title>Debugging RAM: Java Garbage Collection - Java Heap Deep Dive, Part 1</title>
      <author>Shai Almog</author>
      <pubDate>Wed, 05 Jan 2022 10:07:33 +0000</pubDate>
      <link>https://dev.to/codenameone/debugging-ram-java-garbage-collection-java-heap-deep-dive-part-1-3cdp</link>
      <guid>https://dev.to/codenameone/debugging-ram-java-garbage-collection-java-heap-deep-dive-part-1-3cdp</guid>
      <description>&lt;p&gt;There are many excellent articles on Java Garbage Collection, Java Memory usage and generally Java heap. Unfortunately, they are all over the place. They mix architecture, concepts and problem solving as separate pieces. A lot of the material is out of date or doesn't include pragmatic information for solving problems with the garbage collector. E.g.  e.g. pause times, heap space usage etc.&lt;/p&gt;

&lt;p&gt;In this post I won't go into memory leaks. They're important but this is a different subject I would like to discuss in a post on its own. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#garbage-collector-tradeoff"&gt;
  &lt;/a&gt;
  Garbage Collector Tradeoff
&lt;/h2&gt;

&lt;p&gt;GCs are amazing, unreferenced objects are collected in an automatic process. But garbage collection still makes some tradeoff:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Memory Footprint&lt;/li&gt;
&lt;li&gt;Pauses&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pick two of those. A garbage collector can tradeoff RAM to provide faster performance and fewer GC stalls. In this post I'll discuss the strategies to picking and tuning a GC. &lt;/p&gt;

&lt;p&gt;Normally, when we want to pick a library we just do a benchmark. But benchmarking a GC is much harder. If we overload a GC we might end up with a GC that handles stress well but isn't optimal for typical memory allocation. It's crucial to understand how the garbage collectors work and that we profile the GC with "real world" workloads.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-your-fathers-stop-the-world-mark-sweep"&gt;
  &lt;/a&gt;
  Not your Fathers Stop the World Mark Sweep
&lt;/h2&gt;

&lt;p&gt;Java GC's have come a long way since Java 1.0's stop the world GC. While there are many types of garbage collectors most of the new ones are generational and parallel/concurrent. This might not seem important when working on our local machines. But the difference is very noticeable when GCing very large heaps.&lt;/p&gt;

&lt;p&gt;GCs "seamlessly" detect unused objects to reclaim heap space. But there are tradeoffs. When is an object deemed as an "unused object" is the core memory management tradeoff. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generational-garbage-collection"&gt;
  &lt;/a&gt;
  Generational Garbage Collection
&lt;/h3&gt;

&lt;p&gt;Most modern GCs assume object life-cycle fits into a generational paradigm. The old generation space objects live a long life and rarely get collected, this . They don't need frequent scanning. Younger generation objects live and die quickly. Often together.&lt;/p&gt;

&lt;p&gt;Generational garbage collection (typically) traverse the young generation more frequently and give special attention to connections between the generations. This is important as there are fewer areas to scan during a minor garbage collection cycle. The term for the shorter cycle is incremental GC as opposed to the full GC cycle. GCs typically try to minimize full GC cycles. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concurrent-vs-parallel-garbage-collector"&gt;
  &lt;/a&gt;
  Concurrent vs. Parallel Garbage Collector
&lt;/h3&gt;

&lt;p&gt;Parallel GC is often confused with concurrent GC. To make matters even more confusing a GC can be both a parallel GC and a concurrent GC (e.g. G1). &lt;/p&gt;

&lt;p&gt;The difference is simple though:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A parallel GC has multiple GC threads. The GC threads perform the actual garbage reclaiming. They are crucial for large scale collection&lt;/li&gt;
&lt;li&gt;A concurrent GC lets the JVM do other things while it's in the mark phase and optionally during other stages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Intuitively most of us would want to have both all the time and make sue of application threads. But this isn't always the right choice. Concurrency and multiple application threads incur an overhead. Furthermore, these GC's often make tradeoffs that miss some unreachable objects and leave some heap memory unreclaimed for a longer period. To be clear, they will find all unused memory in a full GC cycle but they try to avoid such cycles and you might pay a penalty. &lt;/p&gt;

&lt;p&gt;The following are the big ticket GCs as of JDK 17.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serial-collector"&gt;
  &lt;/a&gt;
  Serial Collector
&lt;/h3&gt;

&lt;p&gt;This is a single thread garbage collector. That means it's a bit faster than most GCs but results in more pauses. If you're benchmarking performance it makes sense to turn on this GC to reduce variance. Since pretty much ever CPU is multi-core this GC isn't useful for most real world deployment, but it makes debugging some behaviors much easier.&lt;/p&gt;

&lt;p&gt;There is one case where serial collector might have a big benefit in production and that's serverless workloads (e.g. lambdas etc.). In those cases the smallest/fastest solution wins and this might be the right solution to work with limited physical memory on a single core VM.&lt;/p&gt;

&lt;p&gt;Notice that despite its relative simplicity, the serial collector is a generational GC. As such it's far more modern than the old Java GCs.&lt;/p&gt;

&lt;p&gt;You can turn on this GC explicitly using the &lt;code&gt;-XX:+UseSerialGC&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parallel-collector-aka-throughput-collector"&gt;
  &lt;/a&gt;
  Parallel Collector aka Throughput Collector
&lt;/h3&gt;

&lt;p&gt;The multi-thread equivalent of the serial collector. This is a fine collector that can be used in production, but there are better. The serial collector is better for benchmarks and ZGC/G1 usually offer better performance. &lt;/p&gt;

&lt;p&gt;You can turn on this GC explicitly using the &lt;code&gt;-XX:+UseParallelGC&lt;/code&gt; option. &lt;/p&gt;

&lt;p&gt;One of the big benefits of the parallel GC is its configurability. You can use the following JVM Options to tune it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-XX:ParallelGCThreads=ThreadCount&lt;/code&gt; - The number of GC threads used by the collector&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-XX:MaxGCPauseMillis=MaxDurationMilliseconds&lt;/code&gt; - Place a limit on GC pauses in milliseconds. This defaults to no-limit&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-XX:GCTimeRatio=ratio&lt;/code&gt; - Sets the time dedicated to GC in a &lt;code&gt;1/(ratio + 1)&lt;/code&gt; so a value of &lt;code&gt;9&lt;/code&gt; would mean &lt;code&gt;1 / (9 + 1)&lt;/code&gt; or &lt;code&gt;10%&lt;/code&gt;. So &lt;code&gt;10%&lt;/code&gt; of CPU time would be spent on GC. The default value is &lt;code&gt;99&lt;/code&gt; which means &lt;code&gt;1%&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#g1-garbage-collector"&gt;
  &lt;/a&gt;
  G1 Garbage Collector
&lt;/h3&gt;

&lt;p&gt;The G1 Garbage Collector is a heavy duty GC designed for big workloads on machines with large heap sizes (roughly 6GB or higher). It tries to adapt to the working conditions in the given machine. You can explicitly enable it using the JVM option &lt;code&gt;-XX:+UseG1GC&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;G1 is a concurrent GC that works in the background and minimizes pauses. One of it's cooler features is string de-duplication which reduces the overhead of strings in RAM. You can activate that feature using &lt;code&gt;-XX:+UseStringDeduplication&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#z-garbage-collector-zgc"&gt;
  &lt;/a&gt;
  Z Garbage Collector (ZGC)
&lt;/h3&gt;

&lt;p&gt;ZGC was experimental until recent versions of the JVM. It's designed for even larger heap sizes than G1 and is also a concurrent GC. It does support smaller environments and can be used for heap size as small as 8mb all the way to 16TB maximum heap size!&lt;/p&gt;

&lt;p&gt;One of its biggest features is that it doesn't pause the execution of the application for more than 10ms. The cost is a reduction in throughput. &lt;/p&gt;

&lt;p&gt;ZGC can be enabled using the &lt;code&gt;-XX:+UseZGC&lt;/code&gt; JVM option.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#picking-and-debugging-a-garbage-collector"&gt;
  &lt;/a&gt;
  Picking and Debugging a Garbage Collector
&lt;/h2&gt;

&lt;p&gt;Java 8 used the &lt;code&gt;-verbose:gc&lt;/code&gt; flag to generate GC logs and the &lt;code&gt;-XX:+PrintGCDetails&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;Newer JDKs use &lt;code&gt;-Xlog:gc:file.log&lt;/code&gt; which prints the GC details to the given file. By enabling these features and running your application as normal you can track the GC behavior and tune your code/deployment appropriately. &lt;/p&gt;

&lt;p&gt;A while back I ran into  &lt;a href="https://gceasy.io/"&gt;GCeasy&lt;/a&gt; , which is a website that analyzes GC logs rather nicely. There are several other tools like that and they can provide you with some interesting information. However, the log file is also readable directly and you can learn a lot from reading it.&lt;/p&gt;

&lt;p&gt;Furthermore, you can get more verbose GC information using the JVM option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-Xlog:gc*=debug:file=gc-verbose.log
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that on Linux/Unix you will need to surround this command in quotes so the shell won't try to expand it.&lt;/p&gt;

&lt;p&gt;With verbose output you get deeper insight into the inner workings of the GC and can follow up on tuning the JVM heap. In fact I recommend that any JVM developer try this flag at least once to get a sense of the inner workings of the Java heap space.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benchmarkingmeasuring"&gt;
  &lt;/a&gt;
  Benchmarking/Measuring
&lt;/h3&gt;

&lt;p&gt;As I mentioned before, GCs are terrible for application performance benchmarks. If we just used regular benchmarks the serial GC would often win even though it shouldn't be the first pick for most of us. The trick is to use realistic loads then review the GC logs.&lt;/p&gt;

&lt;p&gt;Then we can decide on the tradeoffs we're willing to live with based on the statistics each GC provides. Notice we can also limit ourselves to external metrics only such as CPU and RAM usage. That can be a perfectly fine approach. However, doing a heavy load test might not be the best representation of a GC performance. To be clear, you should still do a heavy load tests. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gc-tuning"&gt;
  &lt;/a&gt;
  GC Tuning
&lt;/h2&gt;

&lt;p&gt;The first thing pretty much any Java developer does when tuning memory is define the maximum size and minimum size. The initial heap size is easily determined using &lt;code&gt;-Xmx&lt;/code&gt; and -&lt;code&gt;Xms&lt;/code&gt; JVM arguments that have been with us for decades.&lt;/p&gt;

&lt;p&gt;One common approach is to set both to the same size. This isn't necessarily bad. It simplifies the memory management logic within the GC which focuses on one value now. This does pose a risk though. It means there's very little room for error.&lt;/p&gt;

&lt;p&gt;The most important performance improvements you can do are through application code. It's very rare that a performance issue falls to GC flag tuning (although it can happen). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reducing-ram-usage"&gt;
  &lt;/a&gt;
  Reducing RAM Usage
&lt;/h3&gt;

&lt;p&gt;Most developers prefer reducing garbage collection times, but for some memory consumption is a bigger issue. If you're running in a restricted environment, e.g. a microservice or serverless container. You can deal with memory shortage by using the following Java flags:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Reduce the values of &lt;code&gt;-XX:MaxHeapFreeRatio&lt;/code&gt; which defaults to &lt;code&gt;70%&lt;/code&gt; and &lt;code&gt;-XX:MinHeapFreeRatio&lt;/code&gt; which defaults to &lt;code&gt;40%&lt;/code&gt;. The max value can be reduced to as much as &lt;code&gt;10%&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;You can use &lt;code&gt;-XX:-ShrinkHeapInSteps&lt;/code&gt; which will trigger GC more frequently and push down memory usage at the expense of performance&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#generational-optimization"&gt;
  &lt;/a&gt;
  Generational Optimization
&lt;/h3&gt;

&lt;p&gt;Typically most Java applications perform better when you add RAM. But sometimes a very large amount of RAM can trigger very long GC stalls that can sometimes even trigger a timeout. &lt;/p&gt;

&lt;p&gt;A big source of stalls is full GC cycles which can happen if the GC fails to build the right memory pools of young/survivor generations.  E.g if you have an application that creates and discards objects quickly you might need a larger young generation than an older generation. You can tune that using &lt;code&gt;-XX:NewRatio&lt;/code&gt; which lets you define the ration between old and young generations. This defaults to 2, which means the new generation is double the size of the old generation. &lt;/p&gt;

&lt;p&gt;You can also tune the -XX:NewSize value which specifies the amount of RAM dedicated to the new generation. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#metaspace-permanent-generation-stack-size-etc"&gt;
  &lt;/a&gt;
  Metaspace, Permanent Generation, Stack Size, etc.
&lt;/h2&gt;

&lt;p&gt;These aren't technically a part of the GC but they often get mixed up with Java heap memory related issues so it's a good place to discuss them. &lt;/p&gt;

&lt;p&gt;If you have a thread heavy application you might want to consider reducing the stack size if applicable. Usually the stack size is tuned to allow for a larger size, this lets us support deeply recursive algorithms.&lt;/p&gt;

&lt;p&gt;With Java 8 PermGen (AKA Permanent Generation) was finally killed. PermGen was a special memory space that stored class files and meta data. We occasionally had to tune it for applications that generated bytecode dynamically as it would trigger memory errors if there were too many class files. The new Metaspace has automatic memory management and solves most of the issues in PermGen.&lt;/p&gt;

&lt;p&gt;We can still set the size of the meta-space using the hint &lt;code&gt;-XX:MaxMetaspaceSize&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It's important to tune the application properly to GC. Reducing usage of native code (and finalizers), weak references, soft and phantom references. All of these features create an overhead to the GC. Although to be fair, in most cases on the server, these aren't the determining factor.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-future-at-valhalla"&gt;
  &lt;/a&gt;
  The Future at Valhalla
&lt;/h2&gt;

&lt;p&gt;GCs are amazing, but there are some edge cases in Java heap memory performance. &lt;/p&gt;

&lt;p&gt;E.g. if we write native memory handling in C vs. Java we can get roughly equivalent performance to native code with something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In some cases this can perform faster than C due to Javas fast allocator code and primitive support. &lt;/p&gt;

&lt;p&gt;The same isn't true for:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;myArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or for:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;myPointArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In C++ we can define a stack object whose memory is directly connected to its parent. Be it the stack frame or the object in which it's contained. This has its downsides as data needs to be copied, it's no longer just a pointer. But data sits in the same page or even register and thus memory fragmentation is non-existent and overhead is very low.&lt;/p&gt;

&lt;p&gt;This is part of the huge problem Valhalla is trying to solve. It will add the ability to define objects as value or primitive which will let us define them as part of something else. This will effectively remove the overhead of &lt;code&gt;Optional&lt;/code&gt; and of the primitive wrappers. It will also make nullability a bit more nuanced. &lt;/p&gt;

&lt;p&gt;The impact on the GC would also be huge. Imagine an array of 2000 Point objects collected as a single operation... &lt;/p&gt;

&lt;p&gt;This is a big change to Java SE both in the language and the virtual machine. As such I used to be on the fence about it. But after reading some of the  &lt;a href="https://mail.openjdk.java.net/pipermail/valhalla-spec-experts/2021-December/001747.html"&gt;materials related to the project&lt;/a&gt;  I'm cautiously optimistic. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;Garbage collector threads are rarely the reason your app performs badly or even runs out of memory. For &lt;code&gt;99.9%&lt;/code&gt; of the cases the cause would be in the application code. Don't expect command-line options that would fix an issue magically. &lt;/p&gt;

&lt;p&gt;However, these tools let you track the inner working of your application from the GC point of view. When you experience a memory issue in your JVM process you can use these tools to narrow it down.&lt;/p&gt;

&lt;p&gt;Having said all that, GC pauses are a real problem that can cause production failures. Especially in very large heaps. Again, you need to review the objects in memory first, but understanding the tradeoffs the virtual machine makes with memory crucial. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  Learn More
&lt;/h3&gt;

&lt;p&gt;Follow me on  &lt;a href="https://twitter.com/debugagent/"&gt;Twitter&lt;/a&gt;  to learn more and get updates for future posts.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Learning code is hard!</title>
      <author>Clement</author>
      <pubDate>Wed, 05 Jan 2022 10:03:51 +0000</pubDate>
      <link>https://dev.to/meyclem/learning-code-is-hard-4i1k</link>
      <guid>https://dev.to/meyclem/learning-code-is-hard-4i1k</guid>
      <description>&lt;p&gt;I've been working for 20 years. I worked in different places, different jobs like plumbing, accountancy, banking, teaching.&lt;/p&gt;

&lt;p&gt;Long story short: at some point I had to move forward and make something that I &lt;strong&gt;wanted to do&lt;/strong&gt; because, you know... Life is short but working days can be very long if you do something you don't like.&lt;/p&gt;

&lt;p&gt;So, 4 years ago, I decided to change again and became a developer. I didn't knew anything about the job at this time, neither about how to achieve that. I only knew that I wanted to make video games (spoiler: I didn't 😁).&lt;/p&gt;

&lt;p&gt;Anyway, after some research, I discovered &lt;a href="https://www.lewagon.com/"&gt;Le Wagon&lt;/a&gt;, an intensive nine weeks long coding bootcamp that was perfectly fitting my needs: a way to catch up quickly with the basics of &lt;strong&gt;The Code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I finally ended up by teaching code at Le Wagon, at &lt;a href="https://www.fewlines.tech/"&gt;Fewlines&lt;/a&gt; and after that, at &lt;a href="https://oclock.io/"&gt;O'Clock&lt;/a&gt;, so I am pretty well aware of both sides of the picture... And let me make a statement here: &lt;strong&gt;For most people, learning to code is hard&lt;/strong&gt;. And I hear you in the back:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can't be a developer in two or three months.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even if this is often some kind of troll, &lt;strong&gt;I have to agree with it&lt;/strong&gt;. But let me be clear, if you consider those bootcamps to be developers factories, well...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read again&lt;/strong&gt;, because they're not.&lt;/p&gt;

&lt;p&gt;As I said before, they provide a way to quickly learn the basics of programming and computer science. And most importantly, &lt;strong&gt;they teach you to learn&lt;/strong&gt; in a right way.&lt;/p&gt;

&lt;p&gt;This is a perfect way for people, like me, that didn't make related or great studies, or even people that just want to change their jobs.&lt;/p&gt;

&lt;p&gt;Nowadays, a lot of companies are hiring developers to suit their needs. It is a labor market in expansion and maybe you are a junior developer or you may work with one at some point.&lt;/p&gt;

&lt;p&gt;So, here are some tips that you could try as a learner or provide as a more senior developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-not-compare"&gt;
  &lt;/a&gt;
  Do not compare
&lt;/h2&gt;

&lt;p&gt;As a coding teacher, I often hear students say that they feel less competent when they compare themselves to other learners. I was doing the same when I started my journey. And boy... this is demoralising.&lt;/p&gt;

&lt;p&gt;When we compare to others, we are more inclined to see the negative side of it without even trying to consider that they may have more knowledge because they have more practice. &lt;strong&gt;This is not magic&lt;/strong&gt; if they do know about something you don't, &lt;strong&gt;that's because they learned&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The only one unique person in the world we should compare to when learning to code is oneself. Take a breath and look back. What did you knew one month, one week or even the day before? What are you capable of &lt;strong&gt;now&lt;/strong&gt; that you weren't before?&lt;/p&gt;

&lt;p&gt;More often than not, it will be a lot. So be proud of that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dont-be-afraid"&gt;
  &lt;/a&gt;
  Don't be afraid!
&lt;/h2&gt;

&lt;p&gt;Being a junior developer is something absolutely normal. Every developer was a junior once, even if some of us tend to forget that.&lt;/p&gt;

&lt;p&gt;It means that you &lt;strong&gt;can't&lt;/strong&gt; know everything and it is normal! It also means that a junior dev &lt;strong&gt;must&lt;/strong&gt; tell when something is not understood or when there are questions.&lt;/p&gt;

&lt;p&gt;One of the best way to improve is to ask for explanation.&lt;/p&gt;

&lt;p&gt;Stupid questions don't exist. If you're not a junior dev but work with one of them, keep it in mind too 🙏.&lt;/p&gt;

&lt;p&gt;Don't be afraid either by the quantity or density of information. Sometimes there will be a LOT of it. Focus on what is understandable is the way. You will have time to learn the rest later 😉. This specific point leads us to...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-the-flow"&gt;
  &lt;/a&gt;
  Follow the flow
&lt;/h2&gt;

&lt;p&gt;It is ok to be curious. If you're not, you should try, if you're TOO curious, take your time. Have confidence in your mentors/teachers/coworkers that have more experience than you.&lt;/p&gt;

&lt;p&gt;They should tell you what to learn when needed, what to leave aside for the moment. As we stated earlier, the quantity of things that we can learn is tremendous and you should focus first on what is important right now.&lt;/p&gt;

&lt;p&gt;How to know if something is an important thing to know? Well... Ask for it 😁.&lt;/p&gt;

&lt;p&gt;As a friend told me one day, knowledge can be compared to a sphere.&lt;/p&gt;

&lt;p&gt;Our knowledge is the sphere. The more we learn, the more this sphere grows.&lt;/p&gt;

&lt;p&gt;The space surrounding the sphere is what we do &lt;strong&gt;not&lt;/strong&gt; know. The more the sphere grows, the more its contact surface with the unknown is growing too. This can lead to a feeling where the more we know the less we think we know. But it also helps us to make connections. For exemple, a subject you left behind at some point because it was too hard to understand, could now be accessible because we learned other related things.&lt;/p&gt;

&lt;p&gt;One thing to note though: Do not confuse being a junior developer with having things to learn. I hope for you that you will always feel that you learn stuff. It is, in my opinion, one of the most important skill of a developer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#note-for-juniors-coworkers"&gt;
  &lt;/a&gt;
  Note for junior's coworkers
&lt;/h2&gt;

&lt;p&gt;I had the chance to work with fantastic teams, where I could learn a lot and this is because I had such wonderful coworkers, and they always took the time needed to explain until I got the point. They were always available, for &lt;strong&gt;any&lt;/strong&gt; (work related) question.&lt;/p&gt;

&lt;p&gt;I also had the chance to give code courses, and thus be in contact with a lot of code learners. This is an extremely &lt;strong&gt;good way to learn&lt;/strong&gt; and improve &lt;strong&gt;your skills&lt;/strong&gt; because explaining a concept forces to have a deep understanding of how it works. As any other skill, mentoring is a practice.&lt;/p&gt;

&lt;p&gt;Working with junior developers is nice because you will also learn a lot. It may be about new good practices, about new tech or, simply, about yourself.&lt;/p&gt;

&lt;p&gt;It is worth it 😁.&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>management</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
