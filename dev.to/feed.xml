<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>#CodepenChallenge Click: Subscribe Call to Action</title>
      <author>Takane Ichinose</author>
      <pubDate>Thu, 08 Apr 2021 15:30:56 +0000</pubDate>
      <link>https://dev.to/takaneichinose/codepenchallenge-click-subscribe-call-to-action-3o7b</link>
      <guid>https://dev.to/takaneichinose/codepenchallenge-click-subscribe-call-to-action-3o7b</guid>
      <description>&lt;p&gt;A micro interaction of a subscription card. When clicked, the card will become a circle, and then a check mark will be drawn.&lt;/p&gt;

&lt;p&gt;This time, I didn't make a separate function for the other functionality of a React component. All are just in a nested function.&lt;/p&gt;

&lt;p&gt;I used GSAP to animate the elements.&lt;/p&gt;

&lt;p&gt;The bell icon came from FontAwesome. I only used one icon from them this time.&lt;/p&gt;

&lt;p&gt;I used the Open Sans font. I directly took it from the Assets part of this pen. Though, the font is uploaded on Google Fonts.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/takaneichinose/embed/RwKLzEG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>react</category>
      <category>javascript</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Django ajax request with axios and vanilla javascript (Tutorial)</title>
      <author>Nikhil Chandra Roy</author>
      <pubDate>Thu, 08 Apr 2021 15:07:29 +0000</pubDate>
      <link>https://dev.to/nikhilroy2/django-ajax-request-with-axios-and-vanilla-javascript-tutorial-37nh</link>
      <guid>https://dev.to/nikhilroy2/django-ajax-request-with-axios-and-vanilla-javascript-tutorial-37nh</guid>
      <description>&lt;p&gt;Hi there Nomosker, &lt;br&gt;
Hope everyone well.&lt;br&gt;
In this short tutorial, I will explain a bit about Django ajax with Axios.&lt;br&gt;
I have seen most of the tutorials used with jquery but in some cases, we are not using jquery so instantly we can use Axios to make it easy to understand.&lt;/p&gt;

&lt;p&gt;Let's do step by step.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1st app/urls.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;path('developer', views.Developer, name="developer")&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2nd app/models.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class DeveloperList(models.Model):
    name = models.CharField(max_length=25)
    email = models.EmailField(max_length=25)
    country = models.CharField(max_length=25)
    def __str__(self):
        return self.name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3rd app/views.py&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def Developer(request):
    developer_list = DeveloperList.objects.all()
    json_data = {}
    if request.method == 'POST':
        # get the input field name
        name = request.POST.get('name')
        email = request.POST.get('email')
        country = request.POST.get('country')

        # set in json 
        json_data['name'] = name
        json_data['email'] = email
        json_data['country'] = country

        # create the model to store in db
        DeveloperList.objects.create(
            name = name,
            email = email,
            country = country
        )
        #return the json
        return JsonResponse(json_data)

    return render(request, 'developer.html', {"developer_list": developer_list})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4th app/templates&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-templates-folder-and-put-developerhtml"&gt;
  &lt;/a&gt;
  create templates folder and put developer.html
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;

&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Ajax learning with axios&amp;lt;/title&amp;gt;

&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;


    &amp;lt;form method="post" onsubmit="return formSubmit()"&amp;gt;
        {% csrf_token %}
        &amp;lt;div class="form-group"&amp;gt;
            &amp;lt;label for="" class="form-label"&amp;gt;Name&amp;lt;/label&amp;gt;
            &amp;lt;input type="text" name="name" class="form-control"&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="form-group"&amp;gt;
            &amp;lt;label for="" class="form-label"&amp;gt;Email&amp;lt;/label&amp;gt;
            &amp;lt;input type="eamil" name="email" class="form-control"&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="form-group"&amp;gt;
            &amp;lt;label for="" class="form-label"&amp;gt;Country&amp;lt;/label&amp;gt;
            &amp;lt;input type="text" name="country" class="form-control"&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;button type="submit" class="btn btn-primary"&amp;gt;Submit&amp;lt;/button&amp;gt;
    &amp;lt;/form&amp;gt;

    {% if developer_list %}
    &amp;lt;table&amp;gt;
        &amp;lt;thead&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;th&amp;gt; Name &amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt; Email &amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt; Country &amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;tbody id="developer_list"&amp;gt;
            {% for developer in developer_list %}
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt; {{developer.name}} &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt; {{developer.email}} &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt; {{developer.country}} &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            {% endfor %}
        &amp;lt;/tbody&amp;gt;
        &amp;lt;/thead&amp;gt;
    &amp;lt;/table&amp;gt;
    {% endif %}


    &amp;lt;script src='https://cdnjs.cloudflare.com/ajax/libs/axios/0.9.1/axios.js'&amp;gt;&amp;lt;/script&amp;gt;


    &amp;lt;script&amp;gt;

        function formSubmit() {
            event.preventDefault()
            axiosSetup()
        }

        function axiosSetup() {
            // for geting the input value to pass at server for collecting there value and save in db
            let data = new FormData()
            data.append('name', document.querySelector('input[name="name"]').value)
            data.append('email', document.querySelector('input[name="email"]').value)
            data.append('country', document.querySelector('input[name="country"]').value)
            data.append('csrfmiddlewaretoken', '{{csrf_token}}') // setup csrf_token as a post request

            // ....axios post request
            let url = '{% url "developer" %}' // self request so we call developer

            axios.post(url, data)
                .then(res =&amp;gt; { 
                    document.getElementById('developer_list').innerHTML += `
                    &amp;lt;tr&amp;gt;
                        &amp;lt;td&amp;gt; ${res.data.name} &amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt; ${res.data.email} &amp;lt;/td&amp;gt;
                        &amp;lt;td&amp;gt; ${res.data.country} &amp;lt;/td&amp;gt;
                    &amp;lt;/tr&amp;gt;
                    `
                })
                .catch(e =&amp;gt; console.log(e))
        }



    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5th go to terminal&lt;/strong&gt;&lt;br&gt;
run below the command one by one&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py makemigrations
python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;everything is ready so now, we can run our project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6th run project&lt;/strong&gt;&lt;br&gt;
go to terminal again by &lt;code&gt;ctrl+&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python manage.py runserver
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you like this short Django tutorial don't forget to like, comment, share.&lt;br&gt;
Thanks all.&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>javascript</category>
      <category>axios</category>
    </item>
    <item>
      <title>Flask Command-Line - Open-Source Sample</title>
      <author>Sm0ke</author>
      <pubDate>Thu, 08 Apr 2021 15:04:08 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-command-line-open-source-sample-34m9</link>
      <guid>https://dev.to/sm0ke/flask-command-line-open-source-sample-34m9</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;This article presents a Flask sample project that implements custom commands on top of &lt;strong&gt;Flask Command-Line&lt;/strong&gt; interface. Custom commands might be useful to implement maintenance tasks, inspect the application state in production, or simply to load new records into the database using a JSON file as input. The code, available on Github, can be extended with ease to cover more useful use-cases.&lt;/p&gt;

&lt;p&gt;Thank you! &lt;strong&gt;Content provided by &lt;a href="https://appseed.us"&gt;AppSeed - App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/flask-command-line-blueprints"&gt;Flask Command-Line&lt;/a&gt; - sample project&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/flask-dashboard-black"&gt;Flask Black Dashboard&lt;/a&gt; - the original starter&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7cyNgCOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8tl0p341t6tucsz8izm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7cyNgCOz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i8tl0p341t6tucsz8izm.png" alt="Flask Command-Line - Sample Project provided by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;How to use the code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The sample code can be compiled with a few commands typed in the terminal if a Python3 environment is up &amp;amp; running on our workspace.  The first step is to clone the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Get the code&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-command-line.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-command-line
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Install modules and set up the environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Virtualenv modules installation (Unix based systems)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install dependencies&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_APP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;run.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, the app is ready to be executed and we can list the registered (new) commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# List the new commands &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands
Usage: flask commands &lt;span class="o"&gt;[&lt;/span&gt;OPTIONS] COMMAND &lt;span class="o"&gt;[&lt;/span&gt;ARGS]...

Options:
  &lt;span class="nt"&gt;--help&lt;/span&gt;  Show this message and exit.

Commands:
  cfg    List all Config Variables   &amp;lt;&lt;span class="nt"&gt;--&lt;/span&gt; NEW Command
  hello  Simple Hello                &amp;lt;&lt;span class="nt"&gt;--&lt;/span&gt; NEW Command
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The "Commands" node shows two commands that we can invoke and check the results:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands hello
Custom &lt;span class="nb"&gt;command&lt;/span&gt; - Hello               &amp;lt;- The Output 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our first command is fairly simple: prints a "Hello" message. The code can be found in the "&lt;a href="https://github.com/app-generator/flask-command-line-blueprints/blob/master/app/commands.py"&gt;commands&lt;/a&gt;" Blueprint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;""" Simple Hello """&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Custom command - Hello"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the second custom command we are getting closer to something useful: list the configuration variables and optionally filter the output using an input string.&lt;/p&gt;

&lt;p&gt;Here is the code - defined in the same file (&lt;strong&gt;commands.py&lt;/strong&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'cfg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'filter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="s"&gt;""" List all Config Variables """&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Custom command - Cfg(Filter="&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;")"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Filtered config
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IGNORECASE&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;'  |- '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' -&amp;gt; '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Unfiltered config
&lt;/span&gt;        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="s"&gt;'  |- '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;' -&amp;gt; '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;The above code read an optional parameter "filter" and iterate over the application config variables. If the "filter" parameter is defined, only the keys that match the filter are listed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Custom COMMAND&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Unfiltered output (list all keys)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands cfg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The OUTPUT&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Custom &lt;span class="nb"&gt;command&lt;/span&gt; - Cfg&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;None&lt;span class="o"&gt;)&lt;/span&gt;
  |- ENV -&amp;gt; production
  |- DEBUG -&amp;gt; False
  |- TESTING -&amp;gt; False
  |- PROPAGATE_EXCEPTIONS -&amp;gt; None
  |- PRESERVE_CONTEXT_ON_EXCEPTION -&amp;gt; None
  |- SECRET_KEY -&amp;gt; S3cr3t_K#Key
  |- PERMANENT_SESSION_LIFETIME -&amp;gt; 31 days, 0:00:00
  |- USE_X_SENDFILE -&amp;gt; False
  |- SERVER_NAME -&amp;gt; None
  |- APPLICATION_ROOT -&amp;gt; /
  |- SESSION_COOKIE_NAME -&amp;gt; session
  |- SESSION_COOKIE_DOMAIN -&amp;gt; None
  |- SESSION_COOKIE_PATH -&amp;gt; None
  |- SESSION_COOKIE_HTTPONLY -&amp;gt; True
  |- SESSION_COOKIE_SECURE -&amp;gt; False
  |- SESSION_COOKIE_SAMESITE -&amp;gt; None
...
&lt;span class="o"&gt;(&lt;/span&gt;truncated output&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;To see the filtered configuration keys, we should provide an extra input parameter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Custom COMMAND&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Filter ouput that matches `database`  &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands cfg database
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The OUTPUT&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Custom &lt;span class="nb"&gt;command&lt;/span&gt; - Cfg&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;database&lt;span class="o"&gt;)&lt;/span&gt;
  |- SQLALCHEMY_DATABASE_URI -&amp;gt; sqlite:///...&lt;span class="se"&gt;\f&lt;/span&gt;lask-command-line-blueprints&lt;span class="se"&gt;\d&lt;/span&gt;b.sqlite3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Let's highlight all configuration parameters with "JSON" in their names:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Custom COMMAND&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Filter ouput that matches `JSON`&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask commands cfg JSON
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The OUTPUT&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Custom &lt;span class="nb"&gt;command&lt;/span&gt; - Cfg&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Filter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;JSON&lt;span class="o"&gt;)&lt;/span&gt;
  |- JSON_AS_ASCII -&amp;gt; True
  |- JSON_SORT_KEYS -&amp;gt; True
  |- JSONIFY_PRETTYPRINT_REGULAR -&amp;gt; False
  |- JSONIFY_MIMETYPE -&amp;gt; application/json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From this point, the code can be extended with ease to execute other useful tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;delete inactive user accounts&lt;/li&gt;
&lt;li&gt;extract sales information and other useful statistics&lt;/li&gt;
&lt;li&gt;notify users regarding new products and updates&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! For more resource please access:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://flask.palletsprojects.com/en/1.1.x/cli/"&gt;Flask CLI&lt;/a&gt; (command-line interface)   - the official docs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://itnext.io/use-flask-cli-to-create-commands-for-your-postgresql-on-heroku-in-6-simple-steps-e8166c024c8d"&gt;Use Flask CLI to create commands for your PostgreSQL&lt;/a&gt; - blog article&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/flask"&gt;Flask Starters&lt;/a&gt; - a curated index provided by &lt;a href="https://appseed.us/"&gt;AppSeed&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_QPr4seB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w9kc5ctl8ht1vrrp8k0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_QPr4seB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8w9kc5ctl8ht1vrrp8k0.png" alt="Flask Starter - Open-Source project provided by AppSeed."&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>flask</category>
      <category>python</category>
      <category>appseed</category>
    </item>
    <item>
      <title>Learn how to add a simple dark/light mode switcher!</title>
      <author>CristoferK</author>
      <pubDate>Thu, 08 Apr 2021 15:03:56 +0000</pubDate>
      <link>https://dev.to/cristoferk/learn-how-to-add-a-simple-dark-light-mode-switcher-29nh</link>
      <guid>https://dev.to/cristoferk/learn-how-to-add-a-simple-dark-light-mode-switcher-29nh</guid>
      <description>&lt;p&gt;Don't forget to subscribe to my YouTube channel! &lt;a href="https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured"&gt;https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured&lt;/a&gt;&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
HTML

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Light/Dark mode&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;header&amp;gt;
    &amp;lt;label id="dark-change"&amp;gt;&amp;lt;/label&amp;gt;

&amp;lt;style&amp;gt;
body {
    margin: 0;
    padding: 0;
    font-family: sans-serif;
}
main {
    margin: Svh 15%;
        align-content: center;
    align-items: center;
}
h1 {
    font-size: 40px;
    font-weight: 400;
    text-align: center;
}
img {
    width: 50%;
    height: auto;
}
p {
    text-align: justify;
    font-size: 18px;
}
label {
    position: absolute;
    width: 45px;
    height: 22px;
    right: 20px;
    top: 20px;
    border: 2px solid;
    border-radius: 20px;
}
label:before {
    position: absolute;
    content: "";
    width: 20px;
    height: 20px;
    left: 1px;
    top: 1px;
    border-radius: 50%;
    cursor: pointer;
    background: #000;
    transition: 0.4s;
}
label.active:before {
    left: 24px;
    background: #fff;
}
body.night {
    background: #000;
    color: #fff;
    transition: 0.5s;
}
&amp;lt;/style&amp;gt;
&amp;lt;/header&amp;gt;
&amp;lt;main&amp;gt;
    &amp;lt;h1&amp;gt;Easy Light/Dark mode&amp;lt;/h1&amp;gt;
    &amp;lt;div id="respon"&amp;gt;
        &amp;lt;img src="https://www.universityofcalifornia.edu/sites/default/files/night-sky-purple.jpg"&amp;gt;
        &amp;lt;p&amp;gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla nec malesuada tortor. Ut pharetra, velit ut facilisis scelerisque, tortor ligula imperdiet metus, et ultrices nisi erat at enim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris vestibulum et erat in ultricies. Vivamus id nulla elementum, sagittis felis id, aliquet ligula.&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/main&amp;gt;
&amp;lt;script&amp;gt;
var content = document.getElementsByTagName('body')[0];
var darkMode = document.getElementById('dark-change');
darkMode.addEventListener('click', function() {
        darkMode.classList.toggle('active');
        content.classList.toggle('night');
})
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>html</category>
      <category>youtube</category>
    </item>
    <item>
      <title>Proxying web feeds with Dancer2</title>
      <author>Dave Cross</author>
      <pubDate>Thu, 08 Apr 2021 15:00:18 +0000</pubDate>
      <link>https://dev.to/davorg/proxying-web-feeds-with-dancer2-on1</link>
      <guid>https://dev.to/davorg/proxying-web-feeds-with-dancer2-on1</guid>
      <description>&lt;p&gt;I registered the domain dave.org.uk in March 1999 and I've had a web site set up there since very soon after that. Over those twenty-two years, it's had a &lt;a href="https://web.archive.org/web/19990701000000*/https://dave.org.uk/"&gt;number of different looks&lt;/a&gt; and has been powered by various technologies. For a lot of the time, it was raw HTML; I then think I moved it to Movable Type for a while. But for the last few years, it's been running on WordPress.&lt;/p&gt;

&lt;p&gt;I've got a lot of time for WordPress. It's a nice content management system, but I've started to think that it's rather overcomplicated for a site that has mostly turned into a collection of widgets and web feeds that tell what I've been doing on various other sites.&lt;/p&gt;

&lt;p&gt;Regular readers will know I've dabbled a bit with &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; and a few weeks ago, I started to wonder if I'd be better off running this site using those. I set up &lt;a href="https://github.com/davorg/dave.org.uk"&gt;a repo&lt;/a&gt; and started to investigate.&lt;/p&gt;

&lt;p&gt;The big limitation with GitHub pages is that it will only serve static pages. &lt;a href="https://dev.to/davorg/github-actions-for-semi-static-web-sites-597g"&gt;GitHub Actions gives us ways to mitigate that slightly&lt;/a&gt;, but that's not what I wanted here. For most of the pages on my site, I wanted to display data from other sites using some kind of Javascript widget.&lt;/p&gt;

&lt;p&gt;There are basically two scenarios to deal with. On the &lt;a href="https://dave.org.uk/reading/"&gt;Reading&lt;/a&gt; page, for example, I'm displaying my recent reading history from my Goodreads account. On the other hand, the &lt;a href="https://dave.org.uk/writing/"&gt;Writing&lt;/a&gt; page just displays the contents of a web feed. In the WordPress world, I just found &lt;a href="https://en-gb.wordpress.org/plugins/"&gt;plugins&lt;/a&gt; that did what I wanted, now I'd need to dig a bit deeper and find (or, perhaps, write) widgets to do this.&lt;/p&gt;

&lt;p&gt;I found a couple of widgets that did what I wanted (one for Goodreads and another for Instagram) but none of the web feed widgets I could find produced output that I was happy with. So I wrote my own. Actually, I wrote two - one for &lt;a href="https://github.com/davorg/rss_widget"&gt;RSS feeds&lt;/a&gt; and another for &lt;a href="https://github.com/davorg/rss_widget"&gt;Atom feeds&lt;/a&gt; (I should really spend the time to combine them into one). And when I was testing my solutions I kept falling over CORS errors.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Cross-origin_resource_sharing"&gt;Cross-origin resource sharing&lt;/a&gt; (or CORS) is a mechanism that controls how domains are able to reuse resources from a different domain. And the default setting is that they probably can't.&lt;/p&gt;

&lt;p&gt;If you think about the RSS widget on my writing page, for example, it reads the &lt;a href="https://dev.to/feed/davorg"&gt;RSS feed for my dev.to&lt;/a&gt; posts, parses the data and then formats it into HTML which it then inserts into the page. It reads the RSS feed by making an HTTP request to the dev.to site. But CORS, by default, says that if you're not making a request from the domain that hosts the feed (i.e. dev.to) then you can't get that resource by making a Javascript request. You'll get a CORS error. The way to fix it is for the person hosting the feed you're interested in to add a header to the response saying that reuse is OK. The header looks like this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Access-Control-Allow-Origin: http://www.example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Or this:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Access-Control-Allow-Origin: *
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The first allows reuse by requests from example.com; the second allows reuse by anyone (and is probably a bad idea).&lt;/p&gt;

&lt;p&gt;So I was getting these CORS errors while testing my RSS and Atom widgets. And they can only be fixed by the people who own the resources (i.e. the web feeds). Now, on the writing page, I was lucky. I own most of the sites where I blog - &lt;a href="https://perlhacks.com/"&gt;Perl Hacks&lt;/a&gt; and &lt;a href="https://blog.dave.org.uk"&gt;Davblog&lt;/a&gt; are both WordPress sites that I run. And I found a WordPress plugin that allowed me to add the required headers. I also blog on dev.to (as you'll see from this post!) and, luckily, dev.to already include the correct headers for my widgets to work.&lt;/p&gt;

&lt;p&gt;But not every page was as simple. I use &lt;a href="https://trakt.tv/"&gt;Trakt.tv&lt;/a&gt; to track the films and TV shows that I'm watching. They'll give me an Atom feed of what I've been watching recently, but it comes without the CORS header so I can't use it in my widget.&lt;/p&gt;

&lt;p&gt;And then I had an idea.&lt;/p&gt;

&lt;p&gt;CORS only blocks requests that come from browsers. Requests that come from back-end programs work just as they always have. So I could set up some kind of proxy system where I request a feed from a server that I control but that server then requests the data from another (non-CORS-friendly) site and passes the data back to the original requester with the CORS header added.&lt;/p&gt;

&lt;p&gt;Half an hour dabbling with &lt;a href="https://perldancer.org/"&gt;Dancer2&lt;/a&gt; and a bit of DNS and nginx configuration and &lt;a href="https://feeds.dave.org.uk/"&gt;feeds.dave.org.uk&lt;/a&gt; was working. Currently, it only runs two feeds - the Film and TV one I mentioned above and another which tells you what I've been listening to (through the magic of &lt;a href="https://www.last.fm/"&gt;Last.fm&lt;/a&gt; and their scrobbling service. Last.fm used to provide a web feed of tunes I'd been listening to, but they turned it off a few years ago and now I build a web feed from JSON I get back from their API (&lt;a href="https://github.com/davorg/lastfm-feed"&gt;the code to do it is online&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;If you go to the &lt;a href="https://feeds.dave.org.uk/"&gt;front page&lt;/a&gt;, you'll get a list of the available feeds. Clicking on one of those links will give you the required feed with the correct CORS feed added.&lt;/p&gt;

&lt;p&gt;The feed proxy code needs a lot of cleaning up, but it does the job. &lt;a href="https://github.com/davorg/feeds"&gt;It's on GitHub&lt;/a&gt; if you think it might be interesting to you.&lt;/p&gt;

&lt;p&gt;And the new version of my site is &lt;a href="https://davorg.dev/dave.org.uk/"&gt;coming together fast&lt;/a&gt;. I haven't switched the domain over yet, but it can't be that far away.&lt;/p&gt;

</description>
      <category>cors</category>
      <category>perl</category>
      <category>feeds</category>
      <category>dancer2</category>
    </item>
    <item>
      <title>How to Create a React.JS Application</title>
      <author>Rithik Samanthula</author>
      <pubDate>Thu, 08 Apr 2021 14:59:16 +0000</pubDate>
      <link>https://dev.to/code2rithik/how-to-create-a-react-js-application-2h8k</link>
      <guid>https://dev.to/code2rithik/how-to-create-a-react-js-application-2h8k</guid>
      <description>&lt;p&gt;Want to set up a local development environment for React.JS? Then this is the blog for you.&lt;/p&gt;

&lt;p&gt;This blog is for MAC and WINDOWS users.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#here-are-the-steps"&gt;
  &lt;/a&gt;
  Here are the steps:
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FgEg4zJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cku8mc2kevvdlm7pharx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FgEg4zJT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cku8mc2kevvdlm7pharx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-checking-whether-nodejs-is-uptodate"&gt;
  &lt;/a&gt;
  1. Checking whether Node.JS is up-to-date
&lt;/h1&gt;

&lt;p&gt;First, open your terminal and type &lt;code&gt;node --version&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PyPnSJGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suyuenaz2tskq3lzteqm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyPnSJGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suyuenaz2tskq3lzteqm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check if it Matches with the Node.JS &lt;a href="https://nodejs.org"&gt;website&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPD-TxA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsi8b58bx368wqu8gibe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPD-TxA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gsi8b58bx368wqu8gibe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-install-visual-studio-code"&gt;
  &lt;/a&gt;
  2. Install Visual Studio Code
&lt;/h1&gt;

&lt;p&gt;For this tutorial, I will be downloading Visual Studio Code because it is much easier to develop React Applications. If you would like to use another text editor, feel free to do so.&lt;/p&gt;

&lt;p&gt;Head over to &lt;a href="https://code.visualstudio.com"&gt; Visual Studio Code's &lt;/a&gt; website and choose the operating system that you use&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Bno92fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8l59q51lgodnr897slx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Bno92fg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8l59q51lgodnr897slx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, wait for some time for the ZIP file to download.&lt;/p&gt;

&lt;p&gt;After the ZIP file is completed downloading, double click on it.&lt;/p&gt;

&lt;p&gt;It will take a couple of seconds to do so.&lt;/p&gt;

&lt;p&gt;After that, Drag VSCode to your Applications Folder.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-using-createreactapp"&gt;
  &lt;/a&gt;
  3. Using &lt;code&gt;create-react-app&lt;/code&gt;
&lt;/h1&gt;

&lt;p&gt;Open a terminal and type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx create-react-app my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will take a few minutes, so grab a cup of tea or coffee :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5OwkVrfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i6bw6wqlnhmme7amphi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5OwkVrfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2i6bw6wqlnhmme7amphi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If it is successful, you should get an image like this. If not, comment down in this blog post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4usUWFmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6jtp5d6eemtgbvz7u8f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4usUWFmv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6jtp5d6eemtgbvz7u8f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, &lt;code&gt;cd&lt;/code&gt; into the directory by using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd my-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, open it in VSCode by using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ code .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IQF3SOOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op6tt3kywjlkjpavsews.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQF3SOOe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op6tt3kywjlkjpavsews.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, use the command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should get something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vnYIkVzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gjd9om8idwz4qkxf5qo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vnYIkVzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9gjd9om8idwz4qkxf5qo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, Open &lt;code&gt;localhost:3000&lt;/code&gt; in your browser and VOILA, it opens:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xk6vYpx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idfkmsn7ylow2bnsdif2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xk6vYpx2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idfkmsn7ylow2bnsdif2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As the page says, if you want to write your own react code, edit the &lt;code&gt;src/App.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Thanks for reading the blog.&lt;/p&gt;

&lt;p&gt;And remember...&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-coding-yall"&gt;
  &lt;/a&gt;
  Keep Coding Y'All 👨🏻‍💻
&lt;/h1&gt;

</description>
      <category>react</category>
      <category>createreactapp</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Protect your .NET and .NET Core applications without leaving visual studio.</title>
      <author>Dotnetsafer</author>
      <pubDate>Thu, 08 Apr 2021 14:56:22 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/protege-tus-aplicaciones-net-y-net-core-sin-salir-de-visual-studio-54eh</link>
      <guid>https://dev.to/dotnetsafer/protege-tus-aplicaciones-net-y-net-core-sin-salir-de-visual-studio-54eh</guid>
      <description>&lt;p&gt;Hello developers 👋, I'm Juan.&lt;/p&gt;

&lt;p&gt;As we have shown in some articles, we helped you protect the source code of .NET applications, and we had detected a problem.&lt;/p&gt;

&lt;p&gt;Honestly, &lt;strong&gt;it was a pain&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Like you, we are all developers and distractions when programming are everywhere, we always have to go looking for information, reading articles and using different platforms and programs.&lt;/p&gt;

&lt;p&gt;This makes us less effective and productive.&lt;/p&gt;

&lt;p&gt;So, we came up with creating an extension for Visual Studio that with almost no effort or maintenance allows you to protect your applications simply by clicking the "compile" button that you always use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---uVEwA6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05wnf4e49qqr4e3eukr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---uVEwA6G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/05wnf4e49qqr4e3eukr2.png" alt="Protect net core apps in visual studio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I am sure that you are restless, curious and you like all this, we have created a BETA program.&lt;/p&gt;

&lt;p&gt;We are looking for people who want to try it before anyone else, and even if you like it you can help us develop more advanced functions or improve the current ones.&lt;/p&gt;

&lt;p&gt;Would you like to be part of it? &lt;a href="https://mailchi.mp/05c7df4c5902/dotnetsafer-beta"&gt;Join beta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our mission is&lt;/strong&gt;, that in an increasingly digitized world where security is a growing problem, developers can focus on creating incredible solutions without security being a headache or the focus of your developing.&lt;/p&gt;

&lt;p&gt;We want to offer security with few clicks so that developers take care of developing without worry.&lt;/p&gt;

&lt;p&gt;We are looking for people to help us along the way ❤.&lt;/p&gt;

&lt;p&gt;This is the idea we have in the short-term beta:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visual studio extension.

&lt;ul&gt;
&lt;li&gt;It allows to protect several projects of the solution.&lt;/li&gt;
&lt;li&gt;You can configure each one from visual studio.&lt;/li&gt;
&lt;li&gt;You can make the compilation output protected directly.&lt;/li&gt;
&lt;li&gt;It allows you to protect before doing a deployment with visual studio.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;CLI to protect applications.

&lt;ul&gt;
&lt;li&gt;It allows you to protect .net applications from any platform through a console.&lt;/li&gt;
&lt;li&gt;Configure everything from the directory itself or CLI.&lt;/li&gt;
&lt;li&gt;Manage your protected apps and projects.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Integration with github.

&lt;ul&gt;
&lt;li&gt;It allows you to integrate a github actions so that in the deployment process your application is protected.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Integration with Azure.

&lt;ul&gt;
&lt;li&gt;Allows you to add a task in your pipeline to protect your application in Azure Devops.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;New add-ons, we will announce later some add-ons that we will make public so that you can better manage security in your developments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mailchi.mp/05c7df4c5902/dotnetsafer-beta"&gt;Join us, let's make security more accessible for our developments&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading, we will send news next week ❤&lt;/p&gt;

&lt;p&gt;(Ah, obviously we do not spam or provide your email to any third party.)&lt;br&gt;
&lt;a href="https://i.giphy.com/media/e7yNPQmGUozyU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/e7yNPQmGUozyU/giphy.gif" alt="privacy"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>security</category>
      <category>csharp</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Learn Front End Easy And Fast By Watching This!</title>
      <author>CristoferK</author>
      <pubDate>Thu, 08 Apr 2021 14:44:43 +0000</pubDate>
      <link>https://dev.to/cristoferk/learn-front-end-easy-and-fast-by-watching-this-3dic</link>
      <guid>https://dev.to/cristoferk/learn-front-end-easy-and-fast-by-watching-this-3dic</guid>
      <description>&lt;p&gt;Hello! If you want to learn Front End you can watch this YouTube channel:&lt;a href="https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured"&gt;https://www.youtube.com/channel/UCFzeA3xC-_i4ZT-XwcwsJxQ/featured&lt;/a&gt;&lt;br&gt;
Don't forget to subscribe! A new video every week!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>youtube</category>
    </item>
    <item>
      <title>Should You Care About React Server Components?</title>
      <author>TJ VanToll</author>
      <pubDate>Thu, 08 Apr 2021 14:39:40 +0000</pubDate>
      <link>https://dev.to/tjvantoll/should-you-care-about-react-server-components-4dg2</link>
      <guid>https://dev.to/tjvantoll/should-you-care-about-react-server-components-4dg2</guid>
      <description>&lt;p&gt;Developers are busy people, and we don’t always have time to evaluate the JavaScript world’s myriad of frameworks and tools.&lt;/p&gt;

&lt;p&gt;In this article I want to help you decide whether &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;React Server Components&lt;/a&gt; is something that you should check out immediately, or whether you should wait.&lt;/p&gt;

&lt;p&gt;We’ll start by looking at what React Server Components are, then discuss what problems they solve, and wrap up with a conversation on whether you should care or not. Let’s get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-react-server-components"&gt;
  &lt;/a&gt;
  What are React Server Components?
&lt;/h2&gt;

&lt;p&gt;React Server Components are a new experimental feature of React. Here’s how &lt;a href="https://github.com/josephsavona/rfcs/blob/server-components/text/0000-server-components.md"&gt;the React team describes the feature&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Server Components allow developers to build apps that span the server and client, combining the rich interactivity of client-side apps with the improved performance of traditional server rendering.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;em&gt;client&lt;/em&gt; in the context of Server Components is a web browser. Although React can run in other clients—aka React Native running on iOS and Android—the Server Components feature is currently only concerned with the web.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;server&lt;/em&gt; in the context of Server Components is a JavaScript-based backend like &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea is, Server Components give you the ability to selectively move components from the &lt;em&gt;client&lt;/em&gt;, where the browser executes them, to the server, where something like Express executes them.&lt;/p&gt;

&lt;p&gt;To make it easy to tell the difference, Server Components introduces a new naming convention, where &lt;code&gt;.server.js&lt;/code&gt; files are server components, &lt;code&gt;.client.js&lt;/code&gt; files are client components, and regular &lt;code&gt;.js&lt;/code&gt; files are files that can run in both environments. Here’s what that looks like in the &lt;a href="https://github.com/reactjs/server-components-demo"&gt;React team’s Server Components demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9Hhn0_K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8x3dt6emmaoqtc33baun.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9Hhn0_K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8x3dt6emmaoqtc33baun.png" alt="An example of the new naming convention"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wait-why-would-i-want-to-do-any-of-this"&gt;
  &lt;/a&gt;
  Wait, why would I want to do any of this?
&lt;/h2&gt;

&lt;p&gt;Rendering components on a server has a number of potential benefits. The React team’s &lt;a href="https://github.com/josephsavona/rfcs/blob/server-components/text/0000-server-components.md"&gt;full writeup on server components&lt;/a&gt; lists these benefits in great detail, but I’ll summarize what I think are the most important ones here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefit-1-using-thirdparty-dependencies-without-a-file-size-penalty"&gt;
  &lt;/a&gt;
  Benefit #1: Using third-party dependencies without a file size penalty
&lt;/h3&gt;

&lt;p&gt;One of best-known web performance tips is to minimize the amount of code you ship to your users. As such, front-end developers are hesitant to add large dependencies to their applications, even if those dependencies would save us a lot of time and effort.&lt;/p&gt;

&lt;p&gt;Server Components offer an interesting solution to this problem. Because Server Components can live on a server (and not a client), their dependencies can live on the server as well—allowing you to use dependencies with zero impact on the size of your client-size bundles.&lt;/p&gt;

&lt;p&gt;For example, suppose you’re writing an application that displays user-written Markdown. Two libraries that can help you do that are &lt;a href="https://www.npmjs.com/package/marked"&gt;marked&lt;/a&gt;, which parses Markdown, and &lt;a href="https://www.npmjs.com/package/sanitize-html"&gt;sanitize-html&lt;/a&gt;, which cleans up user-written HTML, including removing potential &lt;a href="https://en.wikipedia.org/wiki/Cross-site_scripting"&gt;XSS&lt;/a&gt; attacks.&lt;/p&gt;

&lt;p&gt;By using those two libraries you can write a simple React component that looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* RenderMarkdown.js */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;marked&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;marked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 35.9K (11.2K gzipped)&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;sanitizeHtml&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sanitize-html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 206K (63.3K gzipped)&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;RenderMarkdown&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sanitizedHtml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sanitizeHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sanitizedHtml&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you’re writing this component today you have to do a cost-benefit analysis. Are the conveniences of marked and sanitize-html worth the ~75K of gzipped JavaScript being added to your client-side bundle, as well as the performance hit of having your users’ browsers interpret an (un-gzipped) 200K+ of JavaScript code at runtime? Probably?&lt;/p&gt;

&lt;p&gt;Now let’s look at a version of this component that can run on a server as a Server Component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* RenderMarkdown.server.js */&lt;/span&gt;
&lt;span class="c1"&gt;// Same code, but now these dependencies have no client-side penalty&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;marked&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;marked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;sanitizeHtml&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sanitize-html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;RenderMarkdown&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sanitizedHtml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sanitizeHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;marked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;sanitizedHtml&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only code difference in this version is the file name (&lt;code&gt;RenderMarkdown.server.js&lt;/code&gt; instead of &lt;code&gt;RenderMarkdown.js&lt;/code&gt;), but the behavior difference is fairly substantial. With this version of RenderMarkdown, your user never has to download or interpret marked or sanitize-html, but you still get the benefit of using both to keep Markdown implementation clean.&lt;/p&gt;

&lt;p&gt;This is pretty cool, but before you get too excited, there are some Server Components limitations that will keep you from removing a lot of your client-side dependencies. Here’s the full of things a Server Component can &lt;em&gt;not&lt;/em&gt; do from the &lt;a href="https://github.com/josephsavona/rfcs/blob/server-components/text/0000-server-components.md#sharing-code-between-server-and-client"&gt;React team’s Server Components RFC (Request for Comments)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92Sn1DQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9lq54thk14gsh358u3h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92Sn1DQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n9lq54thk14gsh358u3h.png" alt="List of Server Components limitations"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The big ones here are Server Components cannot have state and cannot work with DOM APIs, which means all of your components that use things like &lt;code&gt;useState()&lt;/code&gt; or &lt;code&gt;onChange&lt;/code&gt; are not eligible. This is a big limitation because... most UI components rely on state and DOM APIs—meaning, a lot of your dependencies will have to remain on the client.&lt;/p&gt;

&lt;p&gt;Still, being able to remove some of your code to the server has the potential to lead to noticeable performance gains, especially for larger apps. Facebook stated that &lt;a href="https://www.youtube.com/watch?v=TQQPAU21ZUw&amp;amp;t=2994s"&gt;their first production experiments with Server Components allowed them to remove almost 30% of their code from the client&lt;/a&gt;, which is a big deal.&lt;/p&gt;

&lt;p&gt;And being able to move code to the server is not the only benefit of Server Components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefit-2-accessing-your-backend-fast"&gt;
  &lt;/a&gt;
  Benefit #2: Accessing your backend fast
&lt;/h3&gt;

&lt;p&gt;Accessing data is one of the most expensive tasks in modern front-end applications. Because most applications store their data remotely (aka not on the client), getting the data you need involves network calls, and trying to reduce the number of network calls you make, while also keeping your code clean and maintainable, can be a big challenge.&lt;/p&gt;

&lt;p&gt;Server Components have the ability to help here, as you now have the ability to move data-access components to a server, which can access data storage much faster.&lt;/p&gt;

&lt;p&gt;For example, suppose you have a header component that needs to retrieve notifications, a user’s profile, and a user’s subscription. Here’s one way you could write that component today.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Header.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;notifications&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNotifications&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setProfile&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSubscription&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.mycompany.com/notifications&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setNotifications&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.mycompany.com/profile&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.mycompany.com/subscription&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setSubscription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{...}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This approach is not ideal, as your component must wait for three separate network requests to completely render.&lt;/p&gt;

&lt;p&gt;There are ways around this. You could ask a backend developer to build an API just for your header, which would return exactly what you need from multiple locations. But UI-specific APIs aren’t reusable, and therefore difficult to maintain over time. You could also use something like &lt;a href="https://graphql.org/"&gt;GraphQL&lt;/a&gt; to aggregate your backend API calls, but GraphQL isn’t an option for every company.&lt;/p&gt;

&lt;p&gt;React Server Components offers an interesting new approach to this problem, by allowing you to access your data directly on the server. For example, consider this update to the header that lets you access a database right in your component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Header.server.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-database-of-choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notifications&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notifications&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;profile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{...}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With Server Components, because you’re running on a server, you have the ability to access server-side resources without making a network round trip. And this ability lets you write cleaner code, as you don’t need to write a bespoke backend API just for the UI, or architect your components to reduce as many network calls as possible.&lt;/p&gt;

&lt;p&gt;That being said, even though the ability to quickly access server-side resources is cool, it’s also not without downsides—the big one being, this is all highly dependent on your backend setup. You stand to gain a lot if your server-side resources are JavaScript-based, but if your server-side resources are in a completely different ecosystem (Java, .NET, PHP, etc), you’ll have a hard time actually gaining much from a Server Component architecture.&lt;/p&gt;

&lt;p&gt;Before we wrap up let’s look at some of the other limitations of Server Components.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: I’m only hitting the high-level benefits of server components to keep this discussion brief. If you want to read about all the benefits, I’d recommend reading through &lt;a href="https://github.com/josephsavona/rfcs/blob/server-components/text/0000-server-components.md#motivation"&gt;the section on Server Components benefits from the React team’s RFC&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-issues-with-server-components"&gt;
  &lt;/a&gt;
  What are the issues with Server Components?
&lt;/h2&gt;

&lt;p&gt;After spending time with Server Components my biggest complaint is the complexity it introduces to React applications.&lt;/p&gt;

&lt;p&gt;For example, as I started to play around with the &lt;a href="https://github.com/reactjs/server-components-demo"&gt;React team’s Server Components demo&lt;/a&gt;, I realized I had to fundamentally change how I approached building components. Instead of just creating a new file and typing &lt;code&gt;export const MyComponent = () =&amp;gt; {}&lt;/code&gt;, I now had to start thinking about how the component would be used, to help determine whether it was a better fit for the client or the server.&lt;/p&gt;

&lt;p&gt;And that’s just when creating the components. As Server Components advance, some of those same concerns are going to apply to how you unit test your Server Components, and also how to debug these components when things go wrong.&lt;/p&gt;

&lt;p&gt;For example, currently React Server Components return “a description of the rendered UI, not HTML”, which I’m sure is important to the implementation, but it does mean that the response you see in your developer tools looks like nonsense.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F0hHEMDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuwj49bj0t5oktd4aqvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0hHEMDZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuwj49bj0t5oktd4aqvq.png" alt="The output of a Server Component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To be fair, most of these limitations come from Server Components being so new. The React team has stated that they expect most of the initial adoption to be through frameworks like &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; early on, so it would make sense that some of these workflows are a bit rough today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-should-you-care"&gt;
  &lt;/a&gt;
  So should you care?
&lt;/h2&gt;

&lt;p&gt;In my opinion there are a three groups of people that should care about Server Components today.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) If you are a developer on a framework like Next.js.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Frameworks like Next.js are a logical consumer of React Server Components, as Next.js is already a framework that users server-side code to help React apps run faster.&lt;/p&gt;

&lt;p&gt;These frameworks also have the ability to help hide some of the messy details of the underlying React implementation, making Server Components easier for your average developer to use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) If your company is operating at Facebook’s scale.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In its current state, React Server Components introduces a lot of complexity for small performance gains.&lt;/p&gt;

&lt;p&gt;For companies like Facebook this sort of tradeoff makes sense, as they have the engineering capacity to deal with this complexity, and marginal performance gains are a big deal for web applications operating at Facebook’s scale.&lt;/p&gt;

&lt;p&gt;That being said, most companies don’t operate at Facebook’s scale, and therefore most companies have no need to evaluate Server Components in its current state. You can wait until the feature stabilizes, or appears in a framework like Next.js&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) If you like tinkering with the latest and greatest.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The reason I looked into Server Components is I think they’re a cool idea with a lot of potential. The line between the client and server is getting blurry in the front-end world, and I think we’re going to see more experiments that try to mix and match the two environments to help developers build the best possible web applications.&lt;/p&gt;

&lt;p&gt;With that in mind, if you’re the type of person that likes to experiment with the latest and greatest, React Server Components is well worth trying. The &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;Server Components intro video&lt;/a&gt; is excellent, &lt;a href="https://github.com/josephsavona/rfcs/blob/server-components/text/0000-server-components.md"&gt;the React team’s RFC&lt;/a&gt; is a well-written guide that details how everything works. There’s also an &lt;a href="https://github.com/reactjs/rfcs/pull/188"&gt;open pull request where you can submit your own feedback&lt;/a&gt; on the feature.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;Overall, Server Components is still too early for your average developer to care about, but it’s a fascinating idea with a lot of potential for those that want to guide the future of React and web development.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#master-the-art-of-react-ui-with-kendoreact"&gt;
  &lt;/a&gt;
  Master the Art of React UI with KendoReact
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.telerik.com/kendo-react-ui"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5SDTj2qM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuysownz801fx230mkh6.png" alt="Learn more about KendoReact"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.telerik.com/kendo-react-ui/"&gt;KendoReact&lt;/a&gt; is a professional UI components and data visualization library for React on a mission to help you design and build business apps with React much faster. With KendoReact, developers get an immediate productivity boost and businesses get shorter time-to-market. Designed and built from the ground up for React, KendoReact plays well with any existing UI stack. Its 90+ customizable and feature-rich components make it the perfect foundation for your internal UI library.&lt;/p&gt;

&lt;p&gt;Built by a team with 19+ years of experience in making enterprise-ready components, this library is lightning fast, highly customizable and fully accessible, delivering support for WCAG 2.1, Section 508, and WAI-ARIA a11y standards. You can find detailed accessibility compliance information &lt;a href="https://www.telerik.com/kendo-react-ui/components/accessibility/accessibility-compliance/"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>Stop making these mistakes if you want to succeed</title>
      <author>Andrew Behery</author>
      <pubDate>Thu, 08 Apr 2021 14:34:11 +0000</pubDate>
      <link>https://dev.to/andrew_behery/stop-making-these-mistakes-if-you-want-to-succeed-3d2d</link>
      <guid>https://dev.to/andrew_behery/stop-making-these-mistakes-if-you-want-to-succeed-3d2d</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;What programming languages should I learn?&lt;/p&gt;

&lt;p&gt;Which frameworks are the best?&lt;/p&gt;

&lt;p&gt;Udemy is having a sale, which courses should I get?&lt;/p&gt;

&lt;p&gt;There's so many blogs and articles about programming that I feel like I'm drowning in things to read.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Stop it. Stop that right now.&lt;/p&gt;

&lt;p&gt;Adam Smith had it right hundreds of years ago when he wrote in his &lt;em&gt;Wealth of Nations&lt;/em&gt; that wealthy nations will tend to have a labor force that specializes. When people specialize, they can get really good at that one thing, which will make them in very high demand for the thing that they've spent their lives mastering. &lt;/p&gt;

&lt;p&gt;This is why the specialized surgeon tends to earn more than the general practitioner physician. This is why top athletes focus their efforts on one sport. Even Michael Jordan, when he attempted to switch to baseball, went right back to basketball.&lt;/p&gt;

&lt;p&gt;Have goals, turn goals into plans, and then put on your blinders.&lt;/p&gt;

&lt;p&gt;There's a time to brainstorm, to think, and to compare options to one another.&lt;/p&gt;

&lt;p&gt;Sure, decide if you want to learn python or Javascript. Figure out if you'll run Windows, Mac OS, or Linux. Check out that blog for a moment to see if it's worth subscribing to.&lt;/p&gt;

&lt;p&gt;But once you've decided what you want to learn, or what you want to accomplish, you need to focus, and that means shutting out all the rest. Have a plan, or a curriculum of courses, books, whatever, and stick to it until it's done. Be slow when deciding to change your plans, don't just do it on a whim, don't just get swept up by marketing (sales on courses, or catchy headlines).&lt;/p&gt;

&lt;p&gt;You don't need to read every article post, don't worry, you're not missing anything, and they're not going anywhere. Getting good at your craft and practicing the fundamentals is more important then the shiny new whatever-it-is that the blog is writing about. &lt;/p&gt;

&lt;p&gt;You don't need to constantly be on x or y forum just to "check in", "see how others are doing", or "report your status/progress". You can if it's intentional for your own personal online social media presence, but intentional is the important bit.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;TL;DR: This is a reminder to stop getting distracted, stop having FOMO for things that won't make you a better dev, and to get to it, and do the work you need to do.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Useful resource for generating SVG images</title>
      <author>ManuTheCoder</author>
      <pubDate>Thu, 08 Apr 2021 14:15:02 +0000</pubDate>
      <link>https://dev.to/manuthecoder/useful-resource-for-generating-svg-images-9gj</link>
      <guid>https://dev.to/manuthecoder/useful-resource-for-generating-svg-images-9gj</guid>
      <description>&lt;p&gt;Want to generate layered waves, waves, blobs, blob scenes, and more?&lt;/p&gt;

&lt;p&gt;Check this out:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.haikei.app"&gt;https://app.haikei.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recommended thing once you download a generated SVG:&lt;/p&gt;

&lt;p&gt;URL encode it for CSS: &lt;a href="https://yoksel.github.io/url-encoder"&gt;https://yoksel.github.io/url-encoder&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Next.js: Multilanguage support with internationalized routing</title>
      <author>velan</author>
      <pubDate>Thu, 08 Apr 2021 13:57:03 +0000</pubDate>
      <link>https://dev.to/singaravelan/next-js-multilanguage-support-with-internationalized-routing-486e</link>
      <guid>https://dev.to/singaravelan/next-js-multilanguage-support-with-internationalized-routing-486e</guid>
      <description>&lt;p&gt;Let's create a simple Next.js starter project with multiple languages - English &lt;em&gt;(en-US)&lt;/em&gt;, Tamil &lt;em&gt;(ta-IN)&lt;/em&gt;, Hindi &lt;em&gt;(hi-IN)&lt;/em&gt;, Kannada &lt;em&gt;(kn-IN)&lt;/em&gt; support using Next.js native &lt;a href="https://nextjs.org/docs/advanced-features/i18n-routing"&gt;i18n&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;👉 Source code of this article available at &lt;a href="https://github.com/singara-velan/Nextjs-Multilanguage"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-are-we-going-to-do"&gt;
  &lt;/a&gt;
  What are we going to do
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Creating a Next js app (v10.x.x) with boostrap.css&lt;/li&gt;
&lt;li&gt;Configuring i18n in next.config.js&lt;/li&gt;
&lt;li&gt;Create locale JSON&lt;/li&gt;
&lt;li&gt;Read locale from the route and display in the HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#set-up"&gt;
  &lt;/a&gt;
  Set up
&lt;/h3&gt;

&lt;p&gt;Create a Next js app and add bootstrap, swr as dependency&lt;br&gt;
&lt;code&gt;npx create-next-app&lt;/code&gt;&lt;br&gt;
&lt;code&gt;npm i -s bootstrap&lt;/code&gt;&lt;br&gt;
&lt;code&gt;npm i -s swr&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run the app&lt;br&gt;
&lt;code&gt;npm run dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create a new page called home under pages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Home = () =&amp;gt; {
    return (
        &amp;lt;h1&amp;gt;Hey! I am home - English&amp;lt;/h1&amp;gt;
    )
}

export default Home;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to &lt;code&gt;http://localhost:3000/home&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2CZk9JA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/342pb2yn0i9yk0tbepbw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2CZk9JA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/342pb2yn0i9yk0tbepbw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#configuring-i18n-route"&gt;
  &lt;/a&gt;
  Configuring i18n route
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;There are two ways to handle locale: Sub-path and domain routing. Here we explore Sub-path routing&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sub-path routing is basically prefixing locale code in front of existing routes without any impact on actual routing. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;eg: /home,&lt;br&gt;
     /en-US/home,&lt;br&gt;
     /ta-IN/home,&lt;br&gt;
     /hi-IN/home&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now if you try to access one of the routes eg: &lt;code&gt;/en-us/home&lt;/code&gt;, you will see 404 message. Because locale-based routing not enabled yet.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oy4SNYyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqhzgvgeabm74twl4xdj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oy4SNYyn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yqhzgvgeabm74twl4xdj.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p923Cahe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bc1465poepp1jllqdjv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p923Cahe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bc1465poepp1jllqdjv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To enable locale-based routing, Create a next.config.js file in the project root as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
    i18n: {
        locales: ['en-us', 'ta-in', 'hi-in', 'kn-in'],
        defaultLocale: 'en-us'
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;💡 checkout i18n locale code reference for different languages &lt;a href="https://gist.github.com/singara-velan/aedb97495f4e430fc34e88daef6716e5"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;💡 Do remember to stop and start the app, whenever modifying next.config.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now try again to access locale-based route &lt;code&gt;/en-us/home&lt;/code&gt;&lt;br&gt;
Boom, it works!! 😍&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--55ZvdvR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fov47yv1scapniddnuwe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--55ZvdvR1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fov47yv1scapniddnuwe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's try with another locale code &lt;code&gt;/ta-in/home&lt;/code&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R4gDBoAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld7q4g2jf5o6vaykvk58.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R4gDBoAB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ld7q4g2jf5o6vaykvk58.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
The page didn't break, but the language doesn't change 😦 Because we didn't create any language-specific content. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#create-languagespecific-files"&gt;
  &lt;/a&gt;
  Create language-specific files
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Create a new folder called &lt;code&gt;locales&lt;/code&gt; under the public folder and create JSON files with exact names as locale codes&lt;/em&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c2bO-a5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6nq8m9s08xy5zl82l5h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c2bO-a5z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y6nq8m9s08xy5zl82l5h.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Inside of each JSON create one key-value language as a data property&lt;/p&gt;

&lt;p&gt;eg: &lt;a href="https://raw.githubusercontent.com/singara-velan/Nextjs-Multilanguage/main/public/locales/en-US.json"&gt;en-US&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "language": "English"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/singara-velan/Nextjs-Multilanguage/main/public/locales/ta-IN.json"&gt;ta-IN&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "language": "தமிழ்"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/singara-velan/Nextjs-Multilanguage/main/public/locales/hi-IN.json"&gt;hi-IN&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "language": "हिन्दी"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#loading-the-language-file-based-on-route-locale-code"&gt;
  &lt;/a&gt;
  Loading the language file based on route locale code
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;When navigating to a specific locale route, the page should show content from the respective locale JSON file.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will be achieving that by&lt;br&gt;
1 Get the locale code from the route&lt;br&gt;
2 Fetch the locale JSON&lt;br&gt;
3 Bind in HTML&lt;/p&gt;

&lt;p&gt;1: Get the locale code from the route&lt;br&gt;
&lt;code&gt;next/router&lt;/code&gt; will provide us the locale code. Update the home.js file with &lt;code&gt;useRouter&lt;/code&gt; hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const router = useRouter();
const locale = router.locale;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2: Fetch locale JSON file&lt;br&gt;
Make Rest call using &lt;a href="https://swr.vercel.app/"&gt;useSWR&lt;/a&gt; hook with the locale code from the previous step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { data, error } = useSWR(`/locales/${locale}.json`, fetcher)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3: Bind in HTML&lt;br&gt;
Replace the &lt;code&gt;English&lt;/code&gt; with the data fetched from the previous step. Final home.js will looks as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useRouter } from 'next/router'
import useSWR from 'swr'

const Home = () =&amp;gt; {
    const router = useRouter();
    const locale = router.locale;

    const { data, error } = useSWR(`/locales/${locale}.json`, fetcher)

    return (
        &amp;lt;h1&amp;gt;Hey! I am home - {data?.language}&amp;lt;/h1&amp;gt;
    )
}

const fetcher = (...args) =&amp;gt; fetch(...args).then(res =&amp;gt; res.json());

export default Home;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#time-for-testing-smiley-smiley"&gt;
  &lt;/a&gt;
  Time for Testing! 😃 😃
&lt;/h3&gt;

&lt;p&gt;Try access different route based on route code&lt;br&gt;
&lt;code&gt;http://localhost:3000/ta-IN/home&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OsLsxv0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdkfumx0hothga3lexp5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OsLsxv0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdkfumx0hothga3lexp5.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;code&gt;http://localhost:3000/hi-IN/home&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jiMo4jUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/495mynxb6dll3dr7quyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jiMo4jUC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/495mynxb6dll3dr7quyg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Its working !! Have a great day 😊 😇&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>i18n</category>
      <category>indianlanguages</category>
      <category>multilingual</category>
    </item>
  </channel>
</rss>
