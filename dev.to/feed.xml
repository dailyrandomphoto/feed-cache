<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Getting BitClout User Information using BitClout API</title>
      <author>Aditya Chaudhary👨‍💻</author>
      <pubDate>Thu, 17 Jun 2021 16:43:03 +0000</pubDate>
      <link>https://dev.to/itsaditya/getting-bitclout-user-information-using-bitclout-api-48if</link>
      <guid>https://dev.to/itsaditya/getting-bitclout-user-information-using-bitclout-api-48if</guid>
      <description>&lt;p&gt;You might want to get BitClout user information for your next project, right ?&lt;br&gt;
If yes, you are on the right page of the Internet!&lt;/p&gt;

&lt;p&gt;We will be covering two BitClout API endpoints that provides user information including username, coin price, profile photo and other &lt;strong&gt;tons&lt;/strong&gt; of information about any user.&lt;/p&gt;

&lt;p&gt;To use the endpoints, you only need a prior knowledge of dealing with GET or POST requests. Since the article shows working code in python, it is must that you know some basic python atleast.&lt;br&gt;
Of course you can use your desired language to do your task since it is only the game of GET and POST requests.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The first and most preferred way to get user information is through "Public Key" of a user.
The &lt;code&gt;get-user-stateless&lt;/code&gt; endpoint returns a gigantic data in JSON format!
Here is a working code of the endpoint:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getUserStateless&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOfPublicKeys&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#the method takes List of PublicKey(s)
&lt;/span&gt;  &lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://api.bitclout.com/get-users-stateless"&lt;/span&gt;
  &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"PublicKeysBase58Check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;listOfPublicKeys&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"userData.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#the response data will be saved in file "userData.json"
&lt;/span&gt;  &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="c1"&gt;#returning response code. 200 means successful !
&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;listOfPublicKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"BC1YLhBLE1834FBJbQ9JU23JbPanNYMkUsdpJZrFVqNGsCe7YadYiUg"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;#you can add more public keys in this list
&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getUserStateless&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listOfPublicKeyss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above code dumps the data returned by the endpoint in json file. &lt;br&gt;
You can study the file "userData.json" to better understand the data.&lt;/p&gt;

&lt;p&gt;You might want to see metrices like coin price etc. but for that you will have to do some basic calculations.&lt;br&gt;
For example, if you want to get the coin price of the user, you will have to divide the &lt;code&gt;CoinPriceBitCloutNanos&lt;/code&gt; by 1,000,000,000 and then multiply the resultant with the current price of BitClout in USD. In order to get the current price of BitClout, refer to this &lt;a href="https://devsclout.hashnode.dev/getting-current-bitclout-price-using-bitclout-api"&gt;article&lt;/a&gt;.&lt;br&gt;
The endpoint returns more than just a coin price. You can study the &lt;strong&gt;userData.json&lt;/strong&gt; file to learn more!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;get-user-stateless&lt;/code&gt; returns gigantic data about the user but in some cases you might want to get only general information about the user like coin price, username, description, profile picture etc.
That's where the &lt;code&gt;get-single-profile&lt;/code&gt; endpoints come handy!
Below is working python code to use the &lt;code&gt;get-single-profile&lt;/code&gt; endpoint:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getSingleProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;publicKey&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"PublicKeyBase58Check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;publicKey&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"Username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://api.bitclout.com/get-single-profile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"singleProfile.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;publicKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"BC1YLhBLE1834FBJbQ9JU23JbPanNYMkUsdpJZrFVqNGsCe7YadYiUg"&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getSingleProfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;publicKey&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If the above code prints the status code 200, you will see a new file created in your working directory named "singleProfile.json" that has general information about the user. Be a geek and study it!&lt;/p&gt;

&lt;p&gt;The above mentioned two endpoints accept public key of BitClout user to fetch the data but what if you want to get information of a user through user name ? Well, there is a way to do that!&lt;/p&gt;

&lt;p&gt;You can simply use the &lt;code&gt;get-single-profile&lt;/code&gt; to get the user information by passing the username only.&lt;/p&gt;

&lt;p&gt;Here is a working python code to get general information of a user through username:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getInfoByUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"PublicKeysBase58Check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="s"&gt;"Username"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"https://api.bitclout.com/get-single-profile"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nb"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"getUserByName.json"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"ItsAditya"&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getInfoByUsername&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the above code prints status code 200, you will see a new file created named "getUserByName.json" that has all the general information about that user.&lt;/p&gt;

&lt;p&gt;Now it's totally your choice to get the information through public key or through username.&lt;br&gt;
It must be noted that public key of a user is a constant entity which never changes while a username can be changed so it's a good practice to fetch the data through the public key.&lt;/p&gt;

&lt;p&gt;If you like the article don't forget to let us know in the comments or maybe give a shout to &lt;a href="https://bitclout.com/u/DevsClout"&gt;DevsClout&lt;/a&gt; ? You can also join DevsClout &lt;a href="https://discord.gg/4tCW2C8WhQ"&gt;discord server&lt;/a&gt; to chat with more devs who are building awesome projects on BitClout! We would love to hear back from you!&lt;/p&gt;

</description>
      <category>python</category>
      <category>bitclout</category>
      <category>api</category>
    </item>
    <item>
      <title>Methods to Fetch in React</title>
      <author>Prasuk Jain</author>
      <pubDate>Thu, 17 Jun 2021 15:51:54 +0000</pubDate>
      <link>https://dev.to/itzprasuk/methods-to-fetch-in-react-122i</link>
      <guid>https://dev.to/itzprasuk/methods-to-fetch-in-react-122i</guid>
      <description>&lt;h3&gt;
  &lt;a href="#there-are-many-ways-to-fetch-data-from-an-external-api-in-react-but-which-one-should-you-be-using-for-your-applications"&gt;
  &lt;/a&gt;
  There are many ways to fetch data from an external API in React. But which one should you be using for your applications?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CXoVApiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj9wjwc6ygmuv9j7w4hg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CXoVApiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dj9wjwc6ygmuv9j7w4hg.jpg" alt="Main Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial, we will be reviewing five of the most commonly used patterns to fetch data with React by making an HTTP request to a REST API.&lt;/p&gt;

&lt;p&gt;We will not only cover how to fetch data, but how to best handle loading and error state upon fetching our data.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For all of these examples, we will be using an endpoint from the popular JSON Placeholder API, but you can use your own API that you have created or any other public API.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#1-fetch-data-in-react-using-the-fetch-api"&gt;
  &lt;/a&gt;
  1. Fetch Data in React Using the Fetch API
&lt;/h3&gt;

&lt;p&gt;The Fetch API is a tool that's built into most modern browsers on the window object (&lt;code&gt;window.fetch&lt;/code&gt;) and enables us to make HTTP requests very easily using JavaScript promises.&lt;/p&gt;

&lt;p&gt;To make a simple GET request with fetch we just need to include the URL endpoint to which we want to make our request. We want to make this request once our React component has mounted.&lt;/p&gt;

&lt;p&gt;To do so, we make our request within the useEffect Hook, and we make sure to provide an empty dependencies array as the second argument, so that our request is only made once (assuming it's not dependent on any other data in our component).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1wwjIHml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxudqyvuvs1c2xl1yyjo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1wwjIHml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fxudqyvuvs1c2xl1yyjo.gif" alt="Clip1"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-fetch-data-in-react-using-axios"&gt;
  &lt;/a&gt;
  2. Fetch Data in React Using Axios
&lt;/h3&gt;

&lt;p&gt;The second approach to making requests with React is to use the library &lt;code&gt;axios&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In this example, we will simply revise our Fetch example by first installing &lt;code&gt;axios&lt;/code&gt; using npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we will import it at the top of component file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What axios enables us to do is to use the exact same promise syntax as fetch - but instead of using our first then callback to manually determine whether the response is okay and throw an error, axios takes care of that for us.&lt;/p&gt;

&lt;p&gt;Additionally, it enables us in that first callback to get the JSON data from &lt;code&gt;response.data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What's convenient about using axios is that it has a much shorter syntax that allows us to cut down on our code and it includes a lot of tools and features which Fetch does not have in its API.&lt;/p&gt;

&lt;p&gt;All of these reasons are why it has become the go-to HTTP library for React Developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bkwUxunj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pyntlihgtb1ifrasnza.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bkwUxunj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pyntlihgtb1ifrasnza.gif" alt="Clip2"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-fetch-data-in-react-using-raw-asyncawait-endraw-syntax"&gt;
  &lt;/a&gt;
  3. Fetch Data in React Using &lt;code&gt;async/await&lt;/code&gt; syntax
&lt;/h3&gt;

&lt;p&gt;In ES7, it became possible to resolve promises using the  &lt;code&gt;async/await&lt;/code&gt; syntax.&lt;/p&gt;

&lt;p&gt;The benefit of this is that it enables us to remove our &lt;code&gt;.then()&lt;/code&gt;, &lt;code&gt;.catch()&lt;/code&gt; and &lt;code&gt;.finally()&lt;/code&gt; callbacks and simply get back our asynchronously resolved data as if we were writing synchronous code without promises altogether.&lt;/p&gt;

&lt;p&gt;In other words, we do not have to rely on callbacks when we use &lt;code&gt;async/await&lt;/code&gt; with React.&lt;/p&gt;

&lt;p&gt;We have to be aware of the fact that when we use &lt;code&gt;useEffect&lt;/code&gt; the effect function (the first argument) cannot be made an async function.&lt;/p&gt;

&lt;p&gt;If we take a look at the linting error that React gives us if we were using Create React App to build our project, we will be told that this function cannot be asynchronous to prevent race conditions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wWX16VMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvw5wit75qx7925loso6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wWX16VMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fvw5wit75qx7925loso6.gif" alt="Clip3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a result, instead of making that function async, we can create a seperate async function in our component, which we can call synchronously. That is, without the &lt;code&gt;await&lt;/code&gt; keyword before it.&lt;/p&gt;

&lt;p&gt;In this example, we create an async function called &lt;code&gt;getData&lt;/code&gt;. By calling it synchronously within &lt;code&gt;useEffect&lt;/code&gt;, we can fetch our data like we would expect.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-how-to-fetch-data-in-react-using-a-custom-react-hook-usefetch"&gt;
  &lt;/a&gt;
  4. How to Fetch Data in React Using a Custom React Hook (useFetch)
&lt;/h3&gt;

&lt;p&gt;Over time, you may realize that it gets a bit tedious and time-consuming to keep writing the useEffect hook with all of its boilerplate within every component in which you want to fetch data.&lt;/p&gt;

&lt;p&gt;To cut down on our reused code, we can use a custom hook as a special abstraction, which we can write ourselves from a third party library (like we are here, using the library (&lt;code&gt;react-fetch-hook&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;A custom hook that makes our HTTP request allows us to make our components much more concise. All we have to do is call our hook at the top of our component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-fetch-hook&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hlWW66y7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1sk29quqxy9ts7qzv3d0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hlWW66y7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1sk29quqxy9ts7qzv3d0.gif" alt="Clip4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, we get back all the data, loading, and error state that we need to be able to use the same structure for our component as before, but without having to &lt;code&gt;useEffect&lt;/code&gt;. Plus, we no longer need to imperatively write how to resolve our promise from our GET request every time we want to make a request.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-how-to-fetch-data-in-react-using-the-react-query-library"&gt;
  &lt;/a&gt;
  5. How to Fetch Data in React Using the React Query Library
&lt;/h3&gt;

&lt;p&gt;Using custom hooks is a great approach to writing much more concise HTTP requests to get our data and all of its related state.But a library that really takes data fetching with hooks to the next level is React Query.&lt;/p&gt;

&lt;p&gt;React Query not only allows us to use custom hooks that we can reuse across our components in a concise way, but it also gives us a great deal of state management tools to be able to control when, how, and how often our data is fetched.&lt;/p&gt;

&lt;p&gt;In particular, React query gives us a cache, which you can see below through the React Query Devtools. This enables us to easily manage the requests that we have made according to key value that we specify for each request.&lt;/p&gt;

&lt;p&gt;For the requests below, our query for our random user data is identified by the string 'random-user' (provided as the first argument to &lt;code&gt;useQuery&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-query&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--18ns2ulV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48m7bwp75s2oj48gd0m5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18ns2ulV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48m7bwp75s2oj48gd0m5.gif" alt="Clip5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By referencing that key, we can do powerful things such as refetch, validate or reset our various queries.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If we rely on our custom hook solution or useEffect, we will refetch our data every single time our component is mounted. To do this is in most cases unnecessary. If our external state hasn't changed, we should ideally not have to show loading state every time we display our component.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;React Query improves our user experience greatly by trying to serve our data from its cache first and then update the data in the background to display changes if our API state has changed.&lt;/p&gt;

&lt;p&gt;It also gives us an arsenal of powerful tools to better manage our requests according to how our data changes through our request.&lt;/p&gt;

&lt;p&gt;For example, if our application allowed us to add a different user, we might want to refetch that query, once the user was added. If we knew the query was being changed very frequently, we might want to specify that it should be refreshed every minute or so. Or to be refreshed whenever the user focuses their window tab.&lt;/p&gt;

&lt;p&gt;In short, React Query is the go-to solution for not only making requests in a concise manner, but also efficiently and effectively managing the data that is returned for our HTTP requests across our app's components.&lt;/p&gt;

&lt;p&gt;Thank You for Reading!!!&lt;br&gt;
Do Like and Save for your Reference.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Quick Introduction to *a concept* in C++</title>
      <author>Aastha Gupta</author>
      <pubDate>Thu, 17 Jun 2021 15:48:06 +0000</pubDate>
      <link>https://dev.to/guptaaastha/quick-introduction-to-a-concept-in-c-15n6</link>
      <guid>https://dev.to/guptaaastha/quick-introduction-to-a-concept-in-c-15n6</guid>
      <description>&lt;p&gt;I've been writing C++ programs since past 5 years now (I didn't realize it has been that long until I typed this out) and have come across various concepts that beginners seem to struggle with. &lt;/p&gt;

&lt;p&gt;To help my fellow programmers in the community, I started a series of articles called &lt;strong&gt;Quick Introduction to &lt;em&gt;a concept&lt;/em&gt; in C++&lt;/strong&gt;. These articles are generally 2 to 5 minute reads that cover a &lt;code&gt;specific concept&lt;/code&gt; in C++ in simple words, contain examples and point to comprehensive resources as well.&lt;/p&gt;

&lt;p&gt;I read and reply to comments often, and you can suggest any topics you'd like to be covered in this series.&lt;/p&gt;

&lt;p&gt;Here is a list of all the articles currently in the series :&lt;br&gt;
(I'll keep updating this list as and when I write new articles)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/guptaaastha/quick-introduction-to-namespaces-in-c-2pmg"&gt;Quick Introduction to namespaces in C++&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/guptaaastha/quick-introduction-to-using-in-c-4n73"&gt;Quick Introduction to using in C++&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/guptaaastha/quick-introduction-to-typedef-in-c-5362"&gt;Quick Introduction to typedef in C++&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;As always, thanks for giving this article a read and I'll see you in the next one 😄&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Quick Introduction to namespaces in C++</title>
      <author>Aastha Gupta</author>
      <pubDate>Thu, 17 Jun 2021 15:43:43 +0000</pubDate>
      <link>https://dev.to/guptaaastha/quick-introduction-to-namespaces-in-c-2pmg</link>
      <guid>https://dev.to/guptaaastha/quick-introduction-to-namespaces-in-c-2pmg</guid>
      <description>&lt;p&gt;As someone who writes C++ code often, I see (and use) the &lt;code&gt;keyword&lt;/code&gt; &lt;code&gt;namespace&lt;/code&gt; frequently and I think it is worth knowing what this &lt;code&gt;keyword&lt;/code&gt; is all about.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;namespace&lt;/code&gt; is a region that provides a &lt;code&gt;scope&lt;/code&gt; to the &lt;code&gt;identifiers&lt;/code&gt; (the names of functions, variables, etc) inside it. &lt;code&gt;namespaces&lt;/code&gt; are used to organize code into &lt;code&gt;logical groups&lt;/code&gt;. All &lt;code&gt;identifiers&lt;/code&gt; in the &lt;code&gt;namespace&lt;/code&gt; scope are visible to one another. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;identifiers&lt;/code&gt; in the &lt;code&gt;namespace&lt;/code&gt; can be accessed by bringing those said &lt;code&gt;identifiers&lt;/code&gt; into the current scope by &lt;a href="https://dev.to/guptaaastha/quick-introduction-to-using-in-c-4n73"&gt;&lt;code&gt;using&lt;/code&gt;&lt;/a&gt; or utilizing fully qualified names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// the namespace std is now in scope&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;my_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;my_string&lt;/span&gt;
&lt;span class="c1"&gt;// fully qualified name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#declaring-raw-namespace-endraw-and-raw-namespace-members-endraw-"&gt;
  &lt;/a&gt;
  Declaring &lt;code&gt;namespace&lt;/code&gt; and &lt;code&gt;namespace members&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;A &lt;code&gt;namespace&lt;/code&gt; declaration is generally done in a header file as following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// my_namespace_declaration.h&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;my_own_namepsace&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;func_one&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;func_two&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The members of this &lt;code&gt;namespace&lt;/code&gt; can then be brought into &lt;code&gt;scope&lt;/code&gt; of any other file by fully qualified names or the &lt;code&gt;using&lt;/code&gt; directive. (If you want to know more about &lt;code&gt;using&lt;/code&gt;, checkout &lt;a href="https://dev.to/guptaaastha/quick-introduction-to-using-in-c-4n73"&gt;this&lt;/a&gt; article by me)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;// other_file.cpp&lt;/span&gt;

&lt;span class="cp"&gt;#include"my_own_namepsace.h"
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;my_own_namepsace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;my_own_namepsace&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;func_one&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// fully qualified names are to be used&lt;/span&gt;
&lt;span class="c1"&gt;// even when bringing the namespace in &lt;/span&gt;
&lt;span class="c1"&gt;// scope with using directive&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Code in a header file that uses &lt;code&gt;identifiers&lt;/code&gt; from other &lt;code&gt;namespaces&lt;/code&gt; should always use the fully qualified &lt;code&gt;namespace&lt;/code&gt; name to avoid ambiguity. &lt;a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rs-using-directive"&gt;This&lt;/a&gt; isocpp core guideline puts more light.   &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#nested-namespaces"&gt;
  &lt;/a&gt;
  Nested namespaces
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;namespaces&lt;/code&gt; can be nested. A nested namespace has unqualified access to its parent's members however the parent members do not have unqualified access to the nested namespace (unless it is declared as &lt;a href="https://en.cppreference.com/w/cpp/language/namespace#:~:text=An%20inline%20namespace%20is%20a,many%20situations%20(listed%20below)."&gt;inline&lt;/a&gt;).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-std-namespace"&gt;
  &lt;/a&gt;
  The std namespace
&lt;/h4&gt;

&lt;p&gt;All C++ standard library types and functions are declared in the &lt;code&gt;std namespace&lt;/code&gt; or the various namespaces that are nested inside &lt;code&gt;std&lt;/code&gt; which makes it one of the most common &lt;code&gt;namespaces&lt;/code&gt; to be encountered.&lt;/p&gt;

&lt;p&gt;This article is a short introduction and if you want to know more about &lt;code&gt;namespaces&lt;/code&gt;, I encourage you to head over &lt;a href="https://en.cppreference.com/w/cpp/language/namespace"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for giving this article a read and I'll see you in the next one 😄&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PS: This is an article in my series &lt;strong&gt;Quick Introduction to &lt;em&gt;a concept&lt;/em&gt; in C++&lt;/strong&gt;. You can find all the articles in this series &lt;a href="https://dev.to/guptaaastha/quick-introduction-to-a-concept-in-c-15n6"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>I built a React app generator.</title>
      <author>Leopold</author>
      <pubDate>Thu, 17 Jun 2021 15:39:56 +0000</pubDate>
      <link>https://dev.to/leopold/i-build-a-react-app-generator-2dg6</link>
      <guid>https://dev.to/leopold/i-build-a-react-app-generator-2dg6</guid>
      <description>&lt;p&gt;I am proud to announce I finally built my first desktop application. And even if I can't consider it to be in a production-ready state for now, it is usable and I was really looking forward to sharing this work and see if it can interest some react developers.&lt;br&gt;
 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-this-"&gt;
  &lt;/a&gt;
  What is this ?
&lt;/h3&gt;

&lt;p&gt;The application is called &lt;a href="https://github.com/Leopold-V/Reactirator"&gt;reactirator&lt;/a&gt;.&lt;br&gt;
It is a desktop application built with Electron using TypeScript, React and Node. The objective is to provide a simple GUI to create a React.js application with any configs and packages you need. So you can focus on the code as fast as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oaWOQlU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.gyazo.com/8e3320905a53b17be5d342f353da0f30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oaWOQlU3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.gyazo.com/8e3320905a53b17be5d342f353da0f30.png" alt="screen"&gt;&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;Some months ago I did learn about how to build my own boilerplate and install them like create-react-app does.&lt;br&gt;
I made an article about &lt;a href="https://dev.to/leopold/generate-your-web-app-boilerplate-like-create-react-app-does-301p"&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Build and use boilerplates according to your needs is cool but it can lead to a lot of project maintenances and efforts. Often you also have differents requirements than in your previous project so you will be looking for another boilerplate or make your own again and ending up with a ton of different boilerplate to maintain... or just come back to a very generic one like create-react-app if you're bored !&lt;/p&gt;

&lt;p&gt;So I went a bit further to find a more optimal solution for my need and this is why I started to build this. It does generate a react app on top of create-react-app so you get all the advantages of CRA but where you can also chose your config and packages then push the create button like you would command a pizza.&lt;br&gt;
 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#techs-corner"&gt;
  &lt;/a&gt;
  Techs corner
&lt;/h3&gt;

&lt;p&gt;As a javascript developer, I definitely enjoy working with electron, everything is full javascript and so you can build beautiful desktop app even if you are a frontend developer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I encounter some technical difficulties though :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I haven't found another way to gather the npm package size data but to use the &lt;a href="https://registry.npmjs.org/"&gt;npm registry&lt;/a&gt;, problem with that is : it can't be fetched (cors issues) and so I have to use the old &lt;a href="https://www.npmjs.com/package/request"&gt;request&lt;/a&gt; module !&lt;/li&gt;
&lt;li&gt;A few packages installations such as tailwind require quite a lot of configuration to do on a CRA app : &lt;a href="https://tailwindcss.com/docs/guides/create-react-app"&gt;have a look here&lt;/a&gt;, at this time I haven't found another way than to "hardcode" some packages version (for example, tailwind requires postcss 7, autoprefixer 9 etc.) to have it installed which is definitely not ideal for maintenance reasons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you have any idea, those are listed in the &lt;a href="https://github.com/Leopold-V/Reactirator/issues"&gt;issues list in github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the long run the project goal is to extend the possible customizations providing you more control over the generation and more advantages to use this project (for example, custom script command in the package json file etc.).&lt;/p&gt;

&lt;p&gt;Alright, Thanks a lot for reading ! I am glad to share Reactirator and if anyone want to contribute don't hesitate, whether you are a total beginner or not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Leopold-V/Reactirator"&gt;https://github.com/Leopold-V/Reactirator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a good day.&lt;/p&gt;

</description>
      <category>react</category>
      <category>news</category>
      <category>productivity</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Taking KubeMQ Build &amp; Deploy for a Test Drive: My Thoughts and Impressions</title>
      <author>Michael Bogan</author>
      <pubDate>Thu, 17 Jun 2021 15:12:37 +0000</pubDate>
      <link>https://dev.to/mbogan/taking-kubemq-build-deploy-for-a-test-drive-my-thoughts-and-impressions-1djg</link>
      <guid>https://dev.to/mbogan/taking-kubemq-build-deploy-for-a-test-drive-my-thoughts-and-impressions-1djg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;As a full-stack developer who often takes on DevOps and infrastructure responsibilities, the following happens all too frequently. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; I need to set up a backend server for my app!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; Google it!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google result #1:&lt;/strong&gt; How to set up tech 1, tech 2, and tech 3 in just five minutes, for free!&lt;/p&gt;

&lt;p&gt;(skip the prereqs because who needs those, follow the instructions, hit an error)&lt;/p&gt;

&lt;p&gt;Hmm, let’s try that again…&lt;/p&gt;

&lt;p&gt;(install all the prereqs, follow the instructions, hit another error)&lt;/p&gt;

&lt;p&gt;Okay, maybe it’s just this article. Let’s try a different one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Google result #2:&lt;/strong&gt; Make your own tech 2 and tech 3 server using Docker and Kubernetes.&lt;/p&gt;

&lt;p&gt;(follow the instructions, hit an error)&lt;/p&gt;

&lt;p&gt;Well...maybe the third time’s the charm?&lt;/p&gt;

&lt;p&gt;(day passes)&lt;/p&gt;

&lt;p&gt;Guess I’ll try again in the morning…&lt;/p&gt;

&lt;p&gt;While every tool promises to be simple to set up and use, the reality is that setting up infrastructure can be complex and unforgiving without the necessary experience. As such, I tend to shy away from instructions that consist of long lists of command-line operations, as more often than not they don’t work for me.&lt;/p&gt;

&lt;p&gt;I’ve recently been exploring &lt;a href="https://kubemq.io/"&gt;KubeMQ&lt;/a&gt;, a Kubernetes-native message queue. They’ve recently released a new web-based configuration tool called &lt;a href="https://build.kubemq.io"&gt;Build and Deploy&lt;/a&gt; which promises to make infrastructure setup as simple as filling in a form. &lt;/p&gt;

&lt;p&gt;In this article, I’ll cover what KubeMQ is, what Build and Deploy adds, and we’ll run through a test scenario with an API gateway and a Redis backend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-kubemq"&gt;
  &lt;/a&gt;
  What is KubeMQ?
&lt;/h2&gt;

&lt;p&gt;KubeMQ is a Kubernetes-native messaging app that is extremely lightweight and easy to play with. Historically speaking, message queues are large, resource-intensive applications. For example, the latest version of IBM MQ at the time of writing has &lt;a href="https://www.ibm.com/software/reports/compatibility/clarity-reports/report/html/softwareReqsForProduct?deliverableId=E3F333600B7F11EABCF401BE73544226&amp;amp;osPlatforms=Linux&amp;amp;duComponentIds=D005%7CS011%7CS006%7CS010%7CS008%7CS007%7CS009%7CA004%7CA003%7CA001%7CA002&amp;amp;mandatoryCapIds=16&amp;amp;optionalCapIds=30%7C341%7C47%7C12%7C9%7C1%7C25%7C20%7C28%7C184%7C185%7C70%7C16%7C15%7C26#!"&gt;significant hardware requirements&lt;/a&gt;, such as &amp;gt; 1.5 GB disk space and 3 GB of RAM. In contrast, the Docker container for KubeMQ is roughly ~30 MB and installs on my local machine nearly instantly.&lt;/p&gt;

&lt;p&gt;I’ve already written about how KubeMQ can simplify much of the complexity around &lt;a href="https://henryjin.dev/writing/microservice-messaging-in-kubernetes"&gt;connecting microservice architectures&lt;/a&gt; as well as &lt;a href="https://henryjin.dev/writing/kubemq-bridges-for-edge-computing"&gt;communicating between multiple edge and cloud environments&lt;/a&gt;, so I won’t repeat all of that here. To summarize, because it is lightweight and Kubernetes-native, KubeMQ unlocks new possibilities that simply aren’t possible with legacy message queues.&lt;/p&gt;

&lt;p&gt;So far, however, configuration has been a bit more difficult than I would like. &lt;a href="https://docs.kubemq.io/"&gt;Documentation&lt;/a&gt; is somewhat sparse, and configuration happens via either the command line or YML files. There are &lt;a href="https://github.com/kubemq-hub/kubemq-bridges/tree/master/examples"&gt;some examples online&lt;/a&gt;, but without context, it can be difficult to modify them to fit my needs. Through my experience with KubeMQ, configuration has been the main point of friction.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://build.kubemq.io/"&gt;KubeMQ Build &amp;amp; Deploy&lt;/a&gt;, which promises to make it simple to go from 0 to 100 with KubeMQ. Let’s take a look.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-kubemq-build-amp-deploy"&gt;
  &lt;/a&gt;
  What is KubeMQ Build &amp;amp; Deploy?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EvV0iX5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhr45dglnu7wagud5iwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EvV0iX5G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xhr45dglnu7wagud5iwo.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://build.kubemq.io/"&gt;KubeMQ Build &amp;amp; Deploy&lt;/a&gt; is a new web-based tool that generates KubeMQ configuration YML files. These can then be applied to your K8s cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f &amp;lt;insert URL or filename here&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, it’s a GUI that allows you to skip the command-line configuration process. As an added bonus, the YML files can be saved and applied any number of times. And as your familiarity with the system grows, you can build upon them by editing them on your own.&lt;/p&gt;

&lt;p&gt;All of these make KubeMQ Build &amp;amp; Deploy useful for a number of scenarios. Prototyping or trying to evaluate whether KubeMQ is for you? Build &amp;amp; Deploy makes that process significantly simpler, as you don’t need to learn YML in order to do so. &lt;/p&gt;

&lt;p&gt;Experienced already and need to build a complex production configuration? Create it in Build &amp;amp; Deploy, and then compare it to what you would have built manually to avoid unforeseen gaps in your infrastructure.&lt;/p&gt;

&lt;p&gt;Enough talk, let’s take it for a spin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#try-it-out-a-tutorial-to-connect-api-gateways-and-a-redis-store"&gt;
  &lt;/a&gt;
  Try it out! A tutorial to connect API gateways and a Redis store
&lt;/h2&gt;

&lt;p&gt;First, make sure that you have a local installation of Kubernetes (I’ll be using minikube on Windows) and a &lt;a href="https://account.kubemq.io/login/register"&gt;free account with KubeMQ&lt;/a&gt;. Second, make sure that you can successfully initialize KubeMQ:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f https://deploy.kubemq.io/init
kubectl apply -f https://deploy.kubemq.io/key/&amp;lt;your key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a minute or two, check your pods; you should see something like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cm8Fy2Tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pck4qf5ru8nowt0bg91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cm8Fy2Tu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pck4qf5ru8nowt0bg91.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;KubeMQ has created a basic three-node cluster for you, and as long as it’s all running we are ready to continue.&lt;/p&gt;

&lt;p&gt;For reference in case you hit any issues, I’ve created a &lt;a href="https://github.com/henryjin3/kubemq-build-deploy"&gt;GitHub repo&lt;/a&gt; with all of my YML files. That said, the whole point is to try out Build &amp;amp; Deploy, let’s keep going and do that!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-up-the-api-gateway"&gt;
  &lt;/a&gt;
  Set up the API Gateway
&lt;/h3&gt;

&lt;p&gt;Next, head on over to &lt;a href="https://build.kubemq.io/"&gt;KubeMQ Build &amp;amp; Deploy&lt;/a&gt;. Since we already have the cluster, we need to configure the source (API gateway) as well as a target (Redis backend). Let’s start with the source:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IhaDwlZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xk6eais2rkmnac0qvrvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IhaDwlZT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xk6eais2rkmnac0qvrvq.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From there, in the top right search “API” and you should see the HTTP source.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_idzPXFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9tu580nx77wo61i02rk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_idzPXFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t9tu580nx77wo61i02rk.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Update the name, and let’s make it go from /redis to a KubeMQ Query channel called Redis. Your configuration should look as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ciZQR-bN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdu94ou4bjiqnyt9efbw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ciZQR-bN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdu94ou4bjiqnyt9efbw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit Save. Next, hit Deploy at the bottom right. Configure it to expose with a Node Port of 30000, and then hit “Get Deploy Manifests”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vLq47by1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z72lpbjgf8lmokynbmd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vLq47by1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z72lpbjgf8lmokynbmd9.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the link to automatically copy it to your clipboard. From there, paste it in your terminal and apply that configuration. If you want to take a look at the YML, simply copy the URL portion of the command and navigate to that URL in your browser. It should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: core.k8s.kubemq.io/v1alpha1
kind: KubemqConnector
metadata:
  name: kubemq-sources
  namespace: kubemq
spec:
  config: |
    bindings:
    - id: 84691jbourwif3uk
      name: api-source
      properties: {}
      source:
        kind: http
        properties:
          methods: post
          path: /redis
      target:
        kind: kubemq.query
        properties:
          address: kubemq-cluster-grpc.kubemq:50000
          channel: redis
  node_port: 30000
  replicas: 1
  service_type: NodePort
  type: sources
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s continue and set up the Redis backend.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-up-redis"&gt;
  &lt;/a&gt;
  Set up Redis
&lt;/h3&gt;

&lt;p&gt;Since it’s not part of KubeMQ, Build &amp;amp; Deploy won’t generate the configuration for you. You can go ahead and download &lt;a href="https://github.com/henryjin3/kubemq-build-deploy/blob/main/redis.yaml"&gt;this YML file&lt;/a&gt; from my GitHub which you can just apply. It should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nyqkoaJl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e85l4znvinzbj96301e1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nyqkoaJl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e85l4znvinzbj96301e1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that this is up, let’s wire it all together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-the-redis-target"&gt;
  &lt;/a&gt;
  Configure the Redis Target
&lt;/h3&gt;

&lt;p&gt;Go back to the Build &amp;amp; Deploy homepage, and go to KubeMQ Targets:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pzG-SQrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f317do126iejzvu9s9xd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pzG-SQrR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f317do126iejzvu9s9xd.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Search and select Redis:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5mlMZWIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c38vjgis07pcn5tpn9ov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5mlMZWIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c38vjgis07pcn5tpn9ov.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set the source as the KubeMQ Query “Redis” channel, and change the target connection string to “redis://redis-svc.redis:6379”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEUudhts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0jjkpdphjdxwscqyx4p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEUudhts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0jjkpdphjdxwscqyx4p.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit Save and then Deploy. We don’t need to change anything else, so just go ahead and hit “Get Deploy Manifests”, and apply the command.&lt;/p&gt;

&lt;p&gt;To test it out, go ahead and run a POST. You can get the URL by running &lt;code&gt;minikube service list&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Av4vo_ed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51t0w3hijn3vwdmz2c4u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Av4vo_ed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/51t0w3hijn3vwdmz2c4u.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And then let’s do a POST. I’ll use Postman, although I’ve also provided some &lt;a href="https://github.com/henryjin3/kubemq-build-deploy/blob/main/curl_commands.txt"&gt;sample cURL commands&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1J4RAltW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rs2gm287aog7s7u2oer3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1J4RAltW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rs2gm287aog7s7u2oer3.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can do a get (this is a Redis get, not an HTTP GET):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5YMFu7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2n8fbp0emljy5ec2wupi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5YMFu7G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2n8fbp0emljy5ec2wupi.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should get something like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sqi26IWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoyuu91ppyyk55mfu7jc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sqi26IWl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uoyuu91ppyyk55mfu7jc.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The result is a base64 byte array, which can be decoded at a site such as &lt;a href="https://www.motobit.com/util/base64-decoder-encoder.asp"&gt;this one&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mzydUkRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tn30j07ay9reswq9d6dl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mzydUkRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tn30j07ay9reswq9d6dl.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s it! Via KubeMQ Build and Deploy, you’ve used KubeMQ and Kubernetes to set up a working link between an API gateway and a Redis backend. The best part is, these YML files can be applied in any Kubernetes cluster, making it easy to turn this prototype into a real production setup.&lt;/p&gt;

&lt;p&gt;Below, I’ll share my overall impressions of this new product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#review-and-impressions"&gt;
  &lt;/a&gt;
  Review and Impressions
&lt;/h2&gt;

&lt;p&gt;Overall, my first experience with KubeMQ Build &amp;amp; Deploy has been really positive! Installing KubeMQ was always easy, and using a fully configured cluster was seamless and performant. &lt;/p&gt;

&lt;p&gt;Configuration used to be a bit of a black box. Now, Build &amp;amp; Deploy makes it a good bit more transparent and straightforward. Plus, going through the tool allows us to experience just how powerful KubeMQ itself is; the number of sources and targets that can be connected is quite high, and it makes me think of all the possibilities. In many cases, I think I could replace some simpler backend services with KubeMQ, and probably end up with something more performant and stable.&lt;/p&gt;

&lt;p&gt;There are several small UI things that could be improved. For example, I wish there was a button to save YML files directly to my computer instead of doing it manually. I also wish there was an option to either save configurations to my account for later editing or even import YML files so that I could add to them via the browser. Right now, without that functionality, the tool is primarily useful for setting up new environments. That said, the tool is quite new and I expect these will be added with time.&lt;/p&gt;

&lt;p&gt;For me, Build &amp;amp; Deploy significantly bridges the gap between installation and production, and I’m already thinking about how I can use this in my current and future projects. What about you?&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
    </item>
    <item>
      <title>Window and this keyword, what the heck it is?</title>
      <author>Utkarsh Yadav</author>
      <pubDate>Thu, 17 Jun 2021 15:04:42 +0000</pubDate>
      <link>https://dev.to/uyadavdev/window-and-this-keyword-what-the-heck-it-is-160a</link>
      <guid>https://dev.to/uyadavdev/window-and-this-keyword-what-the-heck-it-is-160a</guid>
      <description>&lt;p&gt;Table of content&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shortest program in JavaScript&lt;/li&gt;
&lt;li&gt;window keyword&lt;/li&gt;
&lt;li&gt;This keyword&lt;/li&gt;
&lt;li&gt;Working behind the scenes&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-the-shortest-program-in-javascript-"&gt;
  &lt;/a&gt;
  What is the shortest program in JavaScript ?
&lt;/h1&gt;

&lt;p&gt;Running an empty file in JavaScript is the shortest program in JavaScript. &lt;/p&gt;

&lt;p&gt;Create a JavaScript file with &lt;code&gt;.js&lt;/code&gt; extension and compile the file using Dev Tools in the browser and the magic you would see that even though you have not written a piece of code but your JavaScript engine in the browser will create a complete new Global Execution context with all the methods and API available to you by your browser.&lt;/p&gt;

&lt;p&gt;Isn't it interesting?.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#window-keyword"&gt;
  &lt;/a&gt;
  Window Keyword
&lt;/h1&gt;

&lt;p&gt;This is a functionality provided by JavaScript engine. basically window is the class in which various functions and methods are encapsulated.&lt;/p&gt;

&lt;p&gt;These functions and methods can be used anywhere inside our JavaScript program.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-keyword"&gt;
  &lt;/a&gt;
  This Keyword
&lt;/h1&gt;

&lt;p&gt;This is an another functionality provided by JavaScript engine. &lt;code&gt;At the Global level this points to window keyword and their functionality&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is how JavaScript runs --&amp;gt; A global Context is created --&amp;gt; window object is created on initialised by the browser --&amp;gt; the this variable points to the window is created and the complete shortest program of JavaScript runs.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#working-behind-the-scenes"&gt;
  &lt;/a&gt;
  Working behind the scenes.
&lt;/h1&gt;

&lt;p&gt;Steps are:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Global Space creation:  Anything not inside and block scope or a function scope is said to be in or bounded with Global Space.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Window keyword is Global Space&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, everything outside the function will be under &lt;code&gt;window&lt;/code&gt; keyword object or &lt;code&gt;Global State Object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's see an example to understand it better.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Global space&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// Global space&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Not in Global space&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// Global space&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Global space&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Global space&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Points to be noted: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Everything that is inside Global Space are accessed inside &lt;code&gt;window&lt;/code&gt; object.&lt;/li&gt;
&lt;li&gt;Everything that is outside Global Space are not accessed inside &lt;code&gt;window&lt;/code&gt; object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conclusion:  This vs window points to the same global space.&lt;/p&gt;

&lt;p&gt;This concludes the blog if you like the content please support me: &lt;/p&gt;

&lt;p&gt;Read more blogs: &lt;a href="https://utkarshwhocodesblogs.netlify.app"&gt;utkarshwhocodesblogs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Rate Limiting in IPv6 Era Using Probabilistic Data Structures</title>
      <author>Amir Keshavarz</author>
      <pubDate>Thu, 17 Jun 2021 15:01:01 +0000</pubDate>
      <link>https://dev.to/satrobit/rate-limiting-in-ipv6-era-using-probabilistic-data-structures-15on</link>
      <guid>https://dev.to/satrobit/rate-limiting-in-ipv6-era-using-probabilistic-data-structures-15on</guid>
      <description>&lt;p&gt;In any system where two parties communicate with each other, we hear things like rate-limiting, flow control, etc. The problem is that all systems have limits and to protect the system, you'd need to somehow control the flow of information passing through.&lt;/p&gt;

&lt;p&gt;As you may have already figured out, we're going to talk about a specific problem regarding rate-limiting in IPv6 networks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#packets"&gt;
  &lt;/a&gt;
  Packets
&lt;/h2&gt;

&lt;p&gt;When we communicate through computer networks, we need to break down our data into smaller pieces called packets. These packets are basically like the letters you send through the post.&lt;/p&gt;

&lt;p&gt;Each letter (packet) has 3 important components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Source Address&lt;/li&gt;
&lt;li&gt;Destination Address&lt;/li&gt;
&lt;li&gt;The actual data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VUl-OdvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rwpoxa2kkufakbiiort.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VUl-OdvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rwpoxa2kkufakbiiort.gif" alt="Packet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, real packets also have those things. (The picture only shows the IP header which doesn't include the data body)&lt;/p&gt;

&lt;p&gt;We only care about the source and destination addresses in this context, so we call them a 2-tuple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ip-addresses"&gt;
  &lt;/a&gt;
  IP Addresses
&lt;/h2&gt;

&lt;p&gt;Until now, IPv4 is still dominant in most countries but its address pool is limited, thus, It's not future-proof.&lt;/p&gt;

&lt;p&gt;IPv6 is the successor to the IPv4 and instead of a 32-bit address, it provides 128-bit addresses so It's a huge bump in the case of the address pool.&lt;/p&gt;

&lt;p&gt;IPv4 address pool: 4,294,967,296&lt;br&gt;
IPv6 address pool: 340,282,366,920,938,463,463,374,607,431,768,211,456&lt;/p&gt;

&lt;p&gt;Yep, that's a huge difference.&lt;/p&gt;

&lt;p&gt;Even though IPv6 itself is not a new protocol, but the process of migrating to IPv6 from IPv4 has been a tedious and very long battle. The issue is that IPv6 is not backward compatible and lots of old hardware and software don't and will not support IPv6.&lt;/p&gt;

&lt;p&gt;Nonetheless, IPv6 is already here and its users are rising by the day. Google's statistics show IPv6 availability of its users at around 30.30–35.10% depending on the day of the week (greater on weekends), as of April 2021.&lt;/p&gt;

&lt;p&gt;Before continuing, you can also read another post of mine which goes through different technics on how to implement a rate-limiter:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/satrobit/rate-limiting-using-the-token-bucket-algorithm-3cjh"&gt;Rate limiting using the Token Bucket algorithm&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we talked about before, that's not the case for IPv6 addresses because of its huge address pool. Even if you may see no difference in normal times, the existing risk won't be accepted by lots of people.&lt;/p&gt;

&lt;p&gt;So what's the solution? How can we store the frequency of these events in a space-efficient data structure?&lt;br&gt;
Like all solutions, we compromise.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#challenge"&gt;
  &lt;/a&gt;
  Challenge
&lt;/h2&gt;

&lt;p&gt;Even in the simplest forms of rate-limiting, we're required to store the number of times that packets with similar 2-tuple have been processed.&lt;/p&gt;

&lt;p&gt;In most IPv4-era systems, that information is stored in an array or a tree, or some other normal data structure. They'll do the job perfectly since the IPv4 address pool is not that big so keeping all of the data won't be an issue.&lt;/p&gt;

&lt;p&gt;For this purpose, we can use probabilistic data structures, specifically Count-Min Sketch.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#probabilistic-data-structures"&gt;
  &lt;/a&gt;
  Probabilistic Data Structures
&lt;/h2&gt;

&lt;p&gt;Unlike normal data structures which are deterministic, probabilistic data structures are not deterministic and won't give you definite answers but only an estimation or a probability.&lt;/p&gt;

&lt;p&gt;This kind of data structure is useful when an unknown stream of data is being processed.&lt;/p&gt;

&lt;p&gt;You'd be amazed to find out in how many cases we don't really need deterministic data structures especially when we're processing data streams.&lt;/p&gt;

&lt;p&gt;Probabilistic data structures are lossy but that's not really an issue for our use case since we only need to know the heavy-hitters. With an enough large space, the risk of collision should be low enough for most people.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7YlLN1dZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpyqhit4pacxqje9p8rg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7YlLN1dZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tpyqhit4pacxqje9p8rg.jpg" alt="Probabilistic data structures from sciencedirect.com"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#countmin-sketch"&gt;
  &lt;/a&gt;
  Count-Min Sketch
&lt;/h2&gt;

&lt;p&gt;The Count-Min Sketch, or CMS for short, is a probabilistic data structure to count the frequencies of events.&lt;/p&gt;

&lt;p&gt;We can argue that the whole CMS is like a 3-D table.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;w&lt;/code&gt;: a fixed width&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;d&lt;/code&gt;: pairwise-independent hash functions&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;c&lt;/code&gt;: total count of an event&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9xegKw1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqhr2ree2b2lvmobqabx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9xegKw1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pqhr2ree2b2lvmobqabx.png" alt="Count-Min Sketch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;w&lt;/code&gt; is basically an arbitrary width. The bigger it is, the lower the overestimation is.&lt;br&gt;
&lt;code&gt;d&lt;/code&gt; is a list of hash functions that shouldn't have many collisions with each other.&lt;br&gt;
&lt;code&gt;c&lt;/code&gt; is the number that we increment when an event is repeated.&lt;/p&gt;

&lt;p&gt;The process of incrementing or estimation is really simple.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#incrementing"&gt;
  &lt;/a&gt;
  Incrementing
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Calculate the hash of your event using the hash function &lt;code&gt;h1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Normalize the hash value to the &lt;code&gt;w&lt;/code&gt; so you would get an index.&lt;/li&gt;
&lt;li&gt;Increment the element &lt;code&gt;w[hash]&lt;/code&gt; by 1.&lt;/li&gt;
&lt;li&gt;Repeat the process for all hash functions in &lt;code&gt;d&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#estimation"&gt;
  &lt;/a&gt;
  Estimation
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Calculate the hash of your event using the hash function &lt;code&gt;h1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Normalize the hash value to the &lt;code&gt;w&lt;/code&gt; so you would get an index.&lt;/li&gt;
&lt;li&gt;Get the value of element &lt;code&gt;w[hash]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Repeat the process for all hash functions and then jump to &lt;code&gt;5&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Between all the values that you got, the lowest one is your estimation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you may have already guessed, the whole CMS is quite similar to other probabilistic data structures like bloom filters. It's relatively simple and quite fast.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;Now we can implement a dead simple Count-Min Sketch data structure in Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mmh3&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CountMinSketch&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#1
&lt;/span&gt;        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#2
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mmh3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="c1"&gt;#3
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#4
&lt;/span&gt;            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;#5
&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;#6
&lt;/span&gt;            &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tables&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="c1"&gt;#7
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;We require 2 parameters to create a CMS object. &lt;code&gt;w&lt;/code&gt;: the width of our table and &lt;code&gt;d&lt;/code&gt;: number of hash functions.&lt;/li&gt;
&lt;li&gt;We pre-populate the tables with zeros. Notice that one dimension is &lt;code&gt;s&lt;/code&gt; and the other &lt;code&gt;w&lt;/code&gt; which is basically a matrix.&lt;/li&gt;
&lt;li&gt;This is our hash function. It requires 2 parameters. &lt;code&gt;x&lt;/code&gt; which is the input and &lt;code&gt;seed&lt;/code&gt; that is used to seed the mmh3 hash function. &lt;code&gt;seed&lt;/code&gt; needs to be unique for each &lt;code&gt;d&lt;/code&gt;. Later you'll see that I used the index of &lt;code&gt;d&lt;/code&gt; elements for seed but that's not good :) You need to generate random numbers when creating the CMS object for each element. After generating the hash, we normalize it relative to &lt;code&gt;w&lt;/code&gt; to generate an index for &lt;code&gt;w&lt;/code&gt; arrays.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;add&lt;/code&gt; function, we should iterate over all hash function elements (&lt;code&gt;d&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;For each element, we calculate a hash which itself is an index for &lt;code&gt;w&lt;/code&gt; arrays. Now we have an index for both dimension and increment the value by one.&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;get&lt;/code&gt; function like the one in &lt;code&gt;add&lt;/code&gt;, we iterate over all hash function elements (&lt;code&gt;d&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Like before, we calculate the hash, and using the table index, we get the value inside and put it in a temporary array named &lt;code&gt;items&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;After going through all hash function elements (&lt;code&gt;d&lt;/code&gt;), we select the minimum of all items and return it. This is basically our estimation.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sketch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CountMinSketch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;sketch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"128.3.202.200"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sketch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"128.3.202.200"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sketch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"128.3.202.200"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# prints 2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;By combining this and a simple rate-limiter explained in another post (&lt;a href="https://dev.to/satrobit/rate-limiting-using-the-token-bucket-algorithm-3cjh"&gt;Rate limiting using the Token Bucket algorithm&lt;br&gt;
&lt;/a&gt;), You'll have a rate-limiter ready for IPv6.&lt;/p&gt;

&lt;p&gt;There's lots of optimization you can do and one of them is making the object, CIDR-aware. You can also tweak the implementation or use different hash functions to get the best performance possible.&lt;/p&gt;

&lt;p&gt;Even though we used Count-Min Sketch to store the frequency of incoming packets, but its application is extremely broad, especially when you're dealing with stream processing workloads.&lt;/p&gt;

&lt;p&gt;This post was so fun to write and I hope you found it fun to read. :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/IPv6_deployment"&gt;https://en.wikipedia.org/wiki/IPv6_deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.researchgate.net/figure/The-Count-Min-sketch-combines-the-counts-of-multiple-items-and-returns-the-counter_fig1_261130855"&gt;https://www.researchgate.net/figure/The-Count-Min-sketch-combines-the-counts-of-multiple-items-and-returns-the-counter_fig1_261130855&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cse.unsw.edu.au/%7Ecs9314/07s1/lectures/Lin_CS9314_References/cm-latin.pdf"&gt;https://www.cse.unsw.edu.au/~cs9314/07s1/lectures/Lin_CS9314_References/cm-latin.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>computerscience</category>
      <category>python</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Adios FontAwesome, Hola Tabler Icons</title>
      <author>dux</author>
      <pubDate>Thu, 17 Jun 2021 14:58:05 +0000</pubDate>
      <link>https://dev.to/duxtech/adios-fontawesome-hola-tabler-icons-1625</link>
      <guid>https://dev.to/duxtech/adios-fontawesome-hola-tabler-icons-1625</guid>
      <description>&lt;p&gt;&lt;a href="https://tablericons.com/"&gt;Tabler Icons&lt;/a&gt; es una nueva manera que encontré de poder utilizar icons en tus proyectos web. Consta de &lt;strong&gt;1280&lt;/strong&gt; iconos gratuitos en formato SVG que puedes usarlos desde ya. &lt;/p&gt;

&lt;p&gt;Es posible parametrizar los iconos cambiando desde el color hasta el tamaño y el grosor. Dale una chance, es super fácil. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JW8JV9KH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://repository-images.githubusercontent.com/243546335/6463da80-5f41-11ea-8f72-bb8d5dd26f29" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JW8JV9KH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://repository-images.githubusercontent.com/243546335/6463da80-5f41-11ea-8f72-bb8d5dd26f29" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Awwward : Mouse Wheel Event + CSS Perspective, REACT.JS</title>
      <author>The coding Freak</author>
      <pubDate>Thu, 17 Jun 2021 14:45:14 +0000</pubDate>
      <link>https://dev.to/thecodingfreak/awwward-mouse-wheel-event-css-perspective-react-js-38a9</link>
      <guid>https://dev.to/thecodingfreak/awwward-mouse-wheel-event-css-perspective-react-js-38a9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#awwward-mouse-wheel-event-css-perspective-reactjs"&gt;
  &lt;/a&gt;
  Awwward : Mouse Wheel Event + CSS Perspective, REACT.JS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--riaxd0zy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AEK8nXViqIdf7vyZEj297zA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--riaxd0zy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2560/1%2AEK8nXViqIdf7vyZEj297zA.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I love to spend time studying cool websites on &lt;a href="https://www.awwwards.com/"&gt;awwward.com&lt;/a&gt;, there are always impressive and inspiring effects.&lt;/p&gt;

&lt;p&gt;In this tutorial, we are building an interactive vinyl box using React.&lt;/p&gt;

&lt;p&gt;Original website &lt;a href="https://music.zajno.com/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-plan"&gt;
  &lt;/a&gt;
  The plan
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Install React, SASS, …&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create your folder structure&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create the Home page and your components&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create data and setup vinyls with CSS&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create your wheel event&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Handle click on current vinyl&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-install-react-sass-"&gt;
  &lt;/a&gt;
  1. Install React, SASS, …
&lt;/h3&gt;

&lt;p&gt;To use React, you first have to install it using NPM:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app nameOfYourProject
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Install SASS&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install node-sass@4.14.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Launch your app&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd nameOfYourProject
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#2-create-your-folder-structure"&gt;
  &lt;/a&gt;
  2. Create your folder structure
&lt;/h3&gt;

&lt;p&gt;Add the following folders in &lt;strong&gt;/src :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;/&lt;strong&gt;components&lt;/strong&gt; (It will contain our Cursor component)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/&lt;strong&gt;pages&lt;/strong&gt; (It will contain our Home page)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/&lt;strong&gt;services&lt;/strong&gt; (It will contain utils functions)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/&lt;strong&gt;styles&lt;/strong&gt; (It will contain styles of our app)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/*&lt;em&gt;assets *&lt;/em&gt;(It will contain your images)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--reXqLBWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ARUnbBz-v-x6tPASMZddudw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--reXqLBWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ARUnbBz-v-x6tPASMZddudw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#3-create-the-home-page-and-your-components"&gt;
  &lt;/a&gt;
  3. &lt;strong&gt;Create the Home page and your components&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Now we need to create a Home page so add &lt;strong&gt;Home.jsx **in the pages folder. Don’t forget to also create a home folder in /&lt;/strong&gt;styles** and add to it &lt;strong&gt;Home.scss&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
In &lt;strong&gt;index.css **add few lines to your body tag.&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Then add **Home **in your **app.js&lt;br&gt;&lt;/p&gt;

&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Easy, isn’t it! Create a new folder /&lt;strong&gt;vinyleBox *&lt;em&gt;in *&lt;/em&gt;/components **and add to it **VinyleBox.jsx&lt;/strong&gt;. &lt;strong&gt;VinyleBox.jsx **contain one parameter which is data. Add your **VinyleBox **component in **Home.jsx. **Do the same thing for the CSS that we did previously.&lt;br&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
Create a new folder /vinyles &lt;strong&gt;in **/components **and add to it **Vinyles.jsx **and save images bellow like **cover.jpg&lt;/strong&gt; to your folder &lt;strong&gt;/assets. Vinyles.jsx **contains two parameters id and styles! Then add your **Vinyles **component in **VinylesBox.jsx.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9V4979sH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAqacQCXkyOt1I_ZF0TVxsg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9V4979sH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAqacQCXkyOt1I_ZF0TVxsg.jpeg" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
You should have this result :

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j7UxznDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3796/1%2Af3oEIDjrMn6rB-MxB10MtA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j7UxznDI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/3796/1%2Af3oEIDjrMn6rB-MxB10MtA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-create-data-and-setup-vinyls-with-css"&gt;
  &lt;/a&gt;
  4. &lt;strong&gt;Create data and setup vinyls with CSS&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;First, we need two functions to generate random ID and background color. So add &lt;strong&gt;VinylesServices.js&lt;/strong&gt; to &lt;strong&gt;/services&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
You’ll initialize a new state data and create a new function initData. Each vinyl contains an id, parameters position, and style.

&lt;p&gt;To place vinyls like on the image with CSS you need to use the property transform and three transform-function. The first one is perspective which will be similar for each vinyls, it’s to sets the distance between the user and the z=0 plane. In other words, have a logic scaling if your item is far or near to you. The second is translateZ to move an element along the z-axis and the last one is translateY to move an element vertically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Biy_-dJo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ap2GUOLx4xIMGkSRNfjVSGw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Biy_-dJo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ap2GUOLx4xIMGkSRNfjVSGw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So let’s do this in &lt;strong&gt;Home.jsx&lt;/strong&gt; by including the two previous new services functions. And pass data to your &lt;strong&gt;VinylesBox **component.&lt;br&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Add a map function in **VinylesBox.js.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Now you should have this result :

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--puof0xIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2182/1%2AGJONgJ0N6gXKCu6WUzen-w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--puof0xIW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2182/1%2AGJONgJ0N6gXKCu6WUzen-w.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#read-the-rest-of-the-article-on-medium"&gt;
  &lt;/a&gt;
  &lt;a href="https://thecodingfreak.medium.com/awwward-mouse-wheel-event-css-perspective-react-js-a04e874f37ea"&gt;Read the rest of the article on medium&lt;/a&gt;
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>TakeOver.io: A .io game</title>
      <author>FRADAR</author>
      <pubDate>Thu, 17 Jun 2021 14:39:42 +0000</pubDate>
      <link>https://dev.to/fradar/takeover-io-a-io-game-1570</link>
      <guid>https://dev.to/fradar/takeover-io-a-io-game-1570</guid>
      <description>&lt;p&gt;This is the first .io game I have ever made. But there is a problem, as you are playing with bots and A.Is and not real people/multiplayer. It took me a lot of time to create and make this, as I am not familiar with .io games like this. Tell me if you have any suggestions in the comments!&lt;/p&gt;

&lt;p&gt;ABOUT THE GAME: The game is not multiplayer, you are just playing with random named A.I bots. The game is like agar.io, but much more low graphic.Ok so, the rules of the game are that you are supposed to collect mass that is all around the game world and when you are bigger then another circle that is moving, you can take him in your colour of the team, and your team will keep trying to dominate others to win. The other circles in your team are called comrades. Got that? Great. Me neither.&lt;/p&gt;

&lt;p&gt;(Updates on the game are in the editor view in the Javascript window)&lt;/p&gt;

&lt;p&gt;Try it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/pen/oNBYXap"&gt;https://codepen.io/FRADAR/pen/oNBYXap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like my games? Follow me on codepen.io&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>gamedev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Google Summer of Code: How to Ensure a Successful Community Bonding Period</title>
      <author>Rohan Lekhwani</author>
      <pubDate>Thu, 17 Jun 2021 14:36:16 +0000</pubDate>
      <link>https://dev.to/rohanlekhwani/google-summer-of-code-how-to-ensure-a-successful-community-bonding-period-2l42</link>
      <guid>https://dev.to/rohanlekhwani/google-summer-of-code-how-to-ensure-a-successful-community-bonding-period-2l42</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Ever wondered what the 21 day GSoC Community Bonding period is about and how to make the most of it?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’ve made it to Google Summer of Code — the ultimate open-source development opportunity for students around the world.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/L6EoLS78pcBag/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img alt="Now What?" src="https://i.giphy.com/media/L6EoLS78pcBag/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You are automatically entered into a phase called — &lt;strong&gt;Community Bonding Period&lt;/strong&gt; on your dashboard and your GSoC summer officially kicks in.&lt;/p&gt;

&lt;p&gt;If you opt-in you’ll be added to two mailing lists — the GSoC Students List comprising of all the GSoC students accepted this season and the GSoC Alumni list which consists of the &lt;strong&gt;10,000+ GSoCers&lt;/strong&gt; throughout the history of GSoC.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9aM8LVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8cy72uo96f7ym5a3ku5i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9aM8LVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8cy72uo96f7ym5a3ku5i.jpg" alt="GSoC Profile with the ability to opt into mailing lists"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You would also receive a mail with a customized link to set-up your Payoneer account to recieve your stipend.&lt;/p&gt;

&lt;p&gt;In case you’re aspiring to be a GSoCer you can bookmark &lt;a href="https://docs.google.com/document/d/16jpmv6TP3ZAvJh7BKhnh7C25Jy4H1PFPmqOT7gnAWdw/edit"&gt;this&lt;/a&gt; doc to see what mails are sent by the GSoC organizers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-you-should-do-to-ensure-a-successful-community-bonding-period"&gt;
  &lt;/a&gt;
  What you should do to ensure a successful Community Bonding Period
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Set-up Clear Communication with Mentors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s likely that you’ve interacted with your mentors through text during the application period. Now is the time to get to know them better and there’s nothing better than a one-on-one video call.&lt;/p&gt;

&lt;p&gt;Schedule weekly one-on-one meets with your mentors. Doing this ensures both of you take out time from your schedules and meet at least once a week. This helps in preventing miscommunications and sudden revelations of misunderstandings.&lt;/p&gt;

&lt;p&gt;If possible, also form a channel on any &lt;a href="https://en.wikipedia.org/wiki/Internet_Relay_Chat"&gt;IRC&lt;/a&gt; your organization uses or else creating one on &lt;a href="https://open.rocket.chat/"&gt;Rocket.Chat&lt;/a&gt; is always a good idea.&lt;/p&gt;

&lt;p&gt;I meet my mentor — &lt;a href="https://www.linkedin.com/in/ramkumarkb?originalSubdomain=sg"&gt;Ramkumar KB&lt;/a&gt; every Friday at 1 PM.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get Tasks Prioritized&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s been a month since you submitted your proposal. A lot has changed.&lt;/p&gt;

&lt;p&gt;Maybe a dependency on which a feature you’re about to implement is now deprecated. Maybe your organization needs a feature in your proposal implemented urgently.&lt;/p&gt;

&lt;p&gt;It is important to prioritize your implementation tasks for the upcoming coding period.&lt;/p&gt;

&lt;p&gt;I asked my mentor to set-up a &lt;a href="https://github.com/orgs/RocketChat/projects/40"&gt;Project Roadmap Board&lt;/a&gt; on GitHub to keep track of progress.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V-zGUc2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fff2khd3hlgs447gj9d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-zGUc2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fff2khd3hlgs447gj9d.jpg" alt="GitHub Project Roadmap for my GSoC project"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Learn your stack&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You might not have coded in a particular language required for your project before. Or you might not be familiar with how things work out internally.&lt;/p&gt;

&lt;p&gt;In my case I had just finished building &lt;a href="https://github.com/RonLek/Rocket.Chat.MemeBuddy"&gt;MemeBuddy&lt;/a&gt; and was getting started with Typescript and the Rocket.Chat Apps Engine.&lt;/p&gt;

&lt;p&gt;You should ask your mentors for resources to learn and they’ll be more than happy to help you out. Even if you feel you have experience working on a particular stack, ask them for resources and you’ll be amazed how much you still don’t know compared to your mentors (they’re mentors for a reason :P ).&lt;/p&gt;

&lt;p&gt;The community bonding period is the best time to get yourself boosted before the coding period starts.&lt;/p&gt;

&lt;p&gt;My awesome mentor sent me resources to learn Typescript. I’ve shared them at the end of the article for those interested in learning Typescript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start Coding Already&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’re done with all the planning why not start coding already?&lt;/p&gt;

&lt;p&gt;You’ll not only get a buffer at the end but also get a chance to try out newer approaches you didn’t mention in your proposal.&lt;/p&gt;

&lt;p&gt;I started working on my target for Week 1 of the Coding Period a week before the Coding Period actually started. Lo and behold:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a6wuPIoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj4zrwrphxmqa2zkbpwm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a6wuPIoG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj4zrwrphxmqa2zkbpwm.jpg" alt="My first GSoC PR (Now Merged)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had my first GSoC PR raised before the week ended.&lt;/p&gt;

&lt;p&gt;This was the second article of my GSoC journey at Rocket.Chat. I’m writing biweekly blogs. Follow my voyage on &lt;a href="https://rohanlekhwani.medium.com/about"&gt;Medium&lt;/a&gt; and Devpost. ⭐&lt;/p&gt;

&lt;p&gt;In case you haven’t checked out the previous blog about How I Got Selected into Google Summer of Code, hit the link below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/rohanlekhwani/how-i-got-selected-into-google-summer-of-code-27"&gt;How I Got Selected into Google Summer of Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are the resources that were shared with me by my mentor for learning Typescript. I found them pretty useful.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;Typescript Handbook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://typescript-exercises.github.io/"&gt;Typescript Exercises&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.typescript-weekly.com/"&gt;Typescript Weekly&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Like what I do? Help me pull my next all-nighter. Consider &lt;a href="https://www.buymeacoffee.com/rohanlekhwani"&gt;buying me a coffee&lt;/a&gt;.🥤&lt;/p&gt;

&lt;p&gt;Rohan Lekhwani is an open source contributor and enthusiast. You can connect with him on &lt;a href="https://www.linkedin.com/in/rohanlekhwani/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="http://github.com/RonLek"&gt;GitHub&lt;/a&gt;, &lt;a href="https://twitter.com/Rohanlekhwani"&gt;Twitter&lt;/a&gt;, and his &lt;a href="https://ronlek.github.io/"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>career</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
