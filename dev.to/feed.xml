<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>A Successful IOC Pattern with Functions in TypeScript</title>
      <author>Rasmus Schultz</author>
      <pubDate>Sun, 20 Jun 2021 19:12:41 +0000</pubDate>
      <link>https://dev.to/mindplay/a-successful-ioc-pattern-with-functions-in-typescript-2nac</link>
      <guid>https://dev.to/mindplay/a-successful-ioc-pattern-with-functions-in-typescript-2nac</guid>
      <description>&lt;p&gt;Over the past few months, I've been working on a TypeScript project, where I decided to challenge myself to use Functions only. This week, I refactored the codebase to use &lt;a href="https://en.wikipedia.org/wiki/Inversion_of_control"&gt;IOC&lt;/a&gt; everywhere, and it feels like I &lt;em&gt;leveled up&lt;/em&gt;. üòÑ&lt;/p&gt;

&lt;p&gt;There's been a lot of articles these past couple of years about "functional programming" in JavaScript, and for some reason these are mostly concerned with immutability, sets, map/reduce, and so on. I come from a background of mostly OOP, where the answer to IOC is largely just "use constructors and interfaces", so this hasn't been really helpful.&lt;/p&gt;

&lt;p&gt;What was missing for me, was a functional perspective on IOC and dependency injection.&lt;/p&gt;

&lt;p&gt;In this article, I will try to illustrate the problems and solutions with a &lt;em&gt;silly&lt;/em&gt; example for illustration purposes: for some reason, your boss wants the browser to display a personalized welcome message using an old-fashioned alert. Yikes. Well, whatever you say, boss, but I &lt;em&gt;expect&lt;/em&gt; this requirement will change in the future.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;To make the most of this article, you should know some basic TypeScript, and you should be familiar with the terms "inversion of control" or "dependency injection" - at least in the sense of using constructors and interfaces.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;While&lt;/em&gt; &lt;code&gt;DEV&lt;/code&gt; &lt;em&gt;thinks this is "an 8 minute read", I recommend you open the &lt;a href="https://www.typescriptlang.org/play"&gt;Playground&lt;/a&gt; and spend 20-30 minutes getting a feel for this.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay, let's say you come up with function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, I am already doing dependency injection. Rather than reaching out for the &lt;code&gt;window&lt;/code&gt; global, this function asks for an instance of &lt;code&gt;Window&lt;/code&gt;, which makes it easy to unit-test this function on a mock &lt;code&gt;Window&lt;/code&gt; instance. So far so good.&lt;/p&gt;

&lt;p&gt;üí≠ &lt;em&gt;So we're done, right?&lt;/em&gt; üòÅ&lt;/p&gt;

&lt;p&gt;Not quite.&lt;/p&gt;

&lt;p&gt;Pretty soon, you will introduce functions that depend on &lt;code&gt;showMessage&lt;/code&gt; - and, in order for another function to call &lt;code&gt;showMessage&lt;/code&gt;, the other function needs to supply the &lt;code&gt;window&lt;/code&gt; parameter - which means the dependency on &lt;code&gt;Windows&lt;/code&gt; &lt;em&gt;spreads&lt;/em&gt; to other functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Welcome, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But wait, now &lt;code&gt;showWelcomeMessage&lt;/code&gt; internally depends on &lt;code&gt;showMessage&lt;/code&gt; - we really should use dependency injection for that too, right?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`Welcome, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üí≠ &lt;em&gt;This looks wrong.&lt;/em&gt; ü§®&lt;/p&gt;

&lt;p&gt;&lt;code&gt;showWelcomeMessage&lt;/code&gt; had to depend on &lt;code&gt;Window&lt;/code&gt;, only so it could pass it along to &lt;code&gt;showMessage&lt;/code&gt; - but it doesn't actually &lt;em&gt;do&lt;/em&gt; anything with the &lt;code&gt;Window&lt;/code&gt; object itself.&lt;/p&gt;

&lt;p&gt;And while &lt;code&gt;showMessage&lt;/code&gt; happens to use &lt;code&gt;Window&lt;/code&gt; today, we might change that in the future, when someone realizes what a sad idea it was to use that alert. Maybe we decide to have it display a toast message on the page instead, and so the dependency changes from &lt;code&gt;Window&lt;/code&gt; to &lt;code&gt;Document&lt;/code&gt;. That's a breaking change. Now we have to run around and refactor everything that calls &lt;code&gt;showMessage&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Calling any function gets increasingly cumbersome - anytime any of the dependencies of any function changes, we have to manually correct the calls and introduce more dependencies everywhere. We're in &lt;em&gt;dependency hell&lt;/em&gt;, and by now we're wasting most of our time refactoring.&lt;/p&gt;

&lt;p&gt;üí≠ &lt;em&gt;There has to be a better way.&lt;/em&gt; ü§î&lt;/p&gt;

&lt;p&gt;My first realization was, why should someone who wants to call &lt;code&gt;showMessage&lt;/code&gt; need to know anything about it's internal dependencies? What I really want, is a function that is &lt;em&gt;internally bound&lt;/em&gt; to an instance of &lt;code&gt;Window&lt;/code&gt;, so that the caller doesn't need to know or care.&lt;/p&gt;

&lt;p&gt;That means we need a &lt;em&gt;factory&lt;/em&gt;-function for the &lt;em&gt;actual&lt;/em&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll need to extract the inner function-type - the one that has the &lt;code&gt;message&lt;/code&gt; argument only, so that other units can depend on that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;createShowMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Note the user of &lt;a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypetype"&gt;&lt;code&gt;ReturnType&lt;/code&gt;&lt;/a&gt; here - you could have manually typed out the function signature of the inner function, but this helps avoid the duplication and the extra refactoring chore going forward.)&lt;/p&gt;

&lt;p&gt;With that in place, our &lt;code&gt;showWelcomeMessage&lt;/code&gt; no longer needs to care that &lt;code&gt;showMessage&lt;/code&gt; internally uses &lt;code&gt;window&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Welcome, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also makes &lt;code&gt;showWelcomeMessage&lt;/code&gt; easier to test, since now we don't need to mock &lt;code&gt;window&lt;/code&gt; anymore - we can mock &lt;code&gt;showMessage&lt;/code&gt; instead and test that it's being called. The code and the tests will now refactor much better, as they have fewer reasons to change.&lt;/p&gt;

&lt;p&gt;üí≠ &lt;em&gt;So we're done, right?&lt;/em&gt; üòÖ&lt;/p&gt;

&lt;p&gt;Yeah, but No.&lt;/p&gt;

&lt;p&gt;Consider now what happens to the next function up the call hierarchy. Let's say we have a &lt;code&gt;login&lt;/code&gt; function, and showing the welcome message happens to be part of what it does - and we apply dependency injection here, too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This problem doesn't go away by just fixing it at one level - we need to apply the same pattern we applied to &lt;code&gt;showMessage&lt;/code&gt;, wrapping it in a &lt;code&gt;createShowMessage&lt;/code&gt; factory-function. And what happens when something else needs to call &lt;code&gt;login&lt;/code&gt;? Same thing again.&lt;/p&gt;

&lt;p&gt;In fact, as you may have realized by now, we might as well apply this pattern consistently, as a convention, to every function we write.&lt;/p&gt;

&lt;p&gt;üí≠ &lt;em&gt;Really? To every function?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, really - and bear with me, because it doesn't &lt;em&gt;look&lt;/em&gt; pretty:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;createShowMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createShowWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Welcome, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;createShowWelcomeMessage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createLogin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;createLogin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReturnType&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;createLogin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It does what we wanted though. We can do all of our dependency injection from the top down now - we can now bootstrap everything from a single function in our entry-point script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createShowWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createLogin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;showWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;login&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// usage:&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rasmus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that, in this example, &lt;code&gt;bootstrap&lt;/code&gt; returns only &lt;code&gt;login&lt;/code&gt; - if you have multiple entry-points, you can return more functions.&lt;/p&gt;

&lt;p&gt;Now, as helpful as this pattern was, this approach to bootstrapping does not really scale well. There are two problems:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;We're creating everything up front. In this simple example, we do need every component - but applications with multiple entry-points might only need some of the components, some of the time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The code is very sensitive to reordering: you have to carefully arrange your factory-function calls, so that the previous function can be passed to the next. It requires a lot of thinking about dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We can solve both of these problems by &lt;em&gt;deferring&lt;/em&gt; the creation of dependencies until they're required - that is, by making the calls to the factory-functions from within &lt;em&gt;another&lt;/em&gt; function. Let's call this a &lt;em&gt;getter&lt;/em&gt;-function.&lt;/p&gt;

&lt;p&gt;Now, since these getter-functions could potentially be called more than once (although, in this simple example, they're not) we want them to return the &lt;em&gt;same&lt;/em&gt; dependency every time - rather than generating new ones.&lt;/p&gt;

&lt;p&gt;We can solve this by adding a tiny helper-function &lt;code&gt;once&lt;/code&gt; to construct these wrapper-functions and &lt;a href="https://en.wikipedia.org/wiki/Memoization"&gt;memoize&lt;/a&gt; the result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// first call&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's refactor again: we'll wrap all of our initializations in closures and apply &lt;code&gt;once&lt;/code&gt; to them - and our &lt;code&gt;bootstrap&lt;/code&gt; function will now return the &lt;code&gt;getLogin&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;(Note that the &lt;code&gt;once&lt;/code&gt; function would generate &lt;a href="https://en.wikipedia.org/wiki/Singleton_pattern"&gt;singletons&lt;/a&gt;, if you were to call it from the global scope - but since we're calling it from the &lt;code&gt;bootstrap&lt;/code&gt; function scope, new instances of all dependencies will be generated for every call to &lt;code&gt;bootstrap&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;The new bootstrap-function looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getLogin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;createLogin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getShowWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getShowWelcomeMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;createShowWelcomeMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getShowMessage&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getShowMessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;once&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;createShowMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getLogin&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// usage:&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getLogin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rasmus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've purposely mixed-up the order of these getter-functions, to illustrate the fact that the order no longer matters: we're now free to arrange and group these lines in any order that makes sense - and we're also no longer creating anything before one of the getter-functions is actually called, which removes any concerns about potential future performance problems.&lt;/p&gt;

&lt;p&gt;üí≠ &lt;em&gt;So we're...?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Yes, done! üèÜ‚ú®&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#footnote-when-not-to-apply-this-pattern"&gt;
  &lt;/a&gt;
  Footnote: When &lt;em&gt;not&lt;/em&gt; to apply this pattern
&lt;/h4&gt;

&lt;p&gt;You don't need to apply this pattern to every function. Some functions don't have dependencies, or maybe they depend only on standard JavaScript environment functions.&lt;/p&gt;

&lt;p&gt;For example, there's no benefit to injecting the &lt;code&gt;Math.max&lt;/code&gt; function, since that's a &lt;a href="https://en.wikipedia.org/wiki/Pure_function"&gt;pure function&lt;/a&gt; with no side-effects. Whereas, on the other hand, there's a clear benefit to injecting &lt;code&gt;Math.random&lt;/code&gt;, since a mock can return values that aren't actually random - making it possible to write predictable tests for your function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bonus-mutable-state"&gt;
  &lt;/a&gt;
  Bonus: Mutable State
&lt;/h3&gt;

&lt;p&gt;I made one more little discovery this week that I'd like to share.&lt;/p&gt;

&lt;p&gt;I think we've all been &lt;em&gt;here&lt;/em&gt; one time or another?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;loggedInUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setLoggedInUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;loggedInUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getLoggedInUser&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;loggedInUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's dangerously easy and natural to do this in JavaScript. üí£&lt;/p&gt;

&lt;p&gt;But even if you put this inside a module, this is &lt;em&gt;global state&lt;/em&gt; - and it makes things difficult to test, since &lt;code&gt;setLoggedInUser&lt;/code&gt; leaves behind in-memory state that persists between tests. (And you could write more code to clear out this state between tests, but, ugh.)&lt;/p&gt;

&lt;p&gt;If you &lt;em&gt;must&lt;/em&gt; have mutable state, we need to model that mutable &lt;code&gt;loggedInUser&lt;/code&gt; state as a dependency, and then apply the create-function pattern described above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;LoginState&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;loggedInUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createSetLoggedInUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LoginState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setLoggedInUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loggedInUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createGetLoggedInUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;LoginState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getLoggedInUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;loggedInUser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I could have abbreviated this more, but I actually like seeing the word &lt;code&gt;state&lt;/code&gt; here, clarifying the fact that a shared state is being either read or written.&lt;/p&gt;

&lt;p&gt;It might be tempting to just take the previous version of this code, wrap it all in a single create-function, and return both of the functions, bound to the same &lt;code&gt;state&lt;/code&gt; - but I wouldn't recommend that, because you could end up with &lt;em&gt;many&lt;/em&gt; functions that depend on this state, and you don't want to be forced to declare them &lt;em&gt;all&lt;/em&gt; in the same create-function. (Also, if you have to write a function that depends on &lt;em&gt;several&lt;/em&gt; different state objects, that approach does not work.)&lt;/p&gt;

&lt;p&gt;One more piece of advice: don't just create one big state object for all of your mutable state - this will muddy your dependencies, as functions will appear to depend on "the entire application state", even when those functions only actually depend on one property. (If you have multiple properties in the same state object, the &lt;a href="https://en.wikipedia.org/wiki/Cohesion_(computer_science)"&gt;cohesion&lt;/a&gt; should be high - ideally 100%, meaning every function depends on &lt;em&gt;all&lt;/em&gt; of the properties of that object.)&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;setLoggedInUser&lt;/code&gt; function &lt;em&gt;does&lt;/em&gt; have a &lt;a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)"&gt;side-effect&lt;/a&gt;, but now the effect is on state that you instantiate and control - making it easy to inject a new state for every test.&lt;/p&gt;

&lt;p&gt;I'm not a functional programming Guru &lt;em&gt;yet&lt;/em&gt;, and maybe there is more to learn here, but it's definitely a step up from global state. üôÇ&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I feel like I've finally found a JS/TS code-style that really scales - both in terms of complexity and performance.&lt;/p&gt;

&lt;p&gt;Applying this to my codebase has been an absolute breeze. I'm spending considerably less time juggling dependencies or refactoring things. Unit-testing is never a problem anymore.&lt;/p&gt;

&lt;p&gt;For years, I've heard proponents of functional programming talk about the benefits - but the articles are mostly about arrays and immutability, which is great, and I've heard all the other great arguments. But it didn't really help me &lt;em&gt;write software&lt;/em&gt;, and the outcome of prior attempts too often was either unmanageable or untestable. (But usually both.)&lt;/p&gt;

&lt;p&gt;Unlocking this feels like the "next level" for me, and I really hope this puts somebody else on the path to more productive and scalable codebases with TypeScript or JavaScript.&lt;/p&gt;

&lt;p&gt;Thanks for reading. Have fun! üòÄ‚úå&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>ioc</category>
      <category>functional</category>
    </item>
    <item>
      <title>Wordpress - Move cron jobs to CLI</title>
      <author>Pawe≈Ç P≈Çotka</author>
      <pubDate>Sun, 20 Jun 2021 19:04:22 +0000</pubDate>
      <link>https://dev.to/plotek/wordpress-move-cron-jobs-to-cli-kgg</link>
      <guid>https://dev.to/plotek/wordpress-move-cron-jobs-to-cli-kgg</guid>
      <description>&lt;p&gt;Some time ago we started to observe performance issues in our company‚Äôs site built with WordPress. One of the issues we have observed was calling crons in random user requests. It is realized by calling URL &lt;code&gt;https://yourdomain.com/wp-cron.php&lt;/code&gt;. Although in this file WordPress calls PHP method &lt;code&gt;fastcgi_finish_request&lt;/code&gt;, which sends a response to the user as soon as possible, the cost of calling sub-requests during the main request is worth acknowledging and improving. There are other drawbacks of this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calling crons in request context means that it is limited, e.g. by php-fpm setting. We often have limited resources (such as memory or time limit) for HTTP requests. &lt;/li&gt;
&lt;li&gt;What‚Äôs worse, calling cron as http request utilizes resource (e.g. php-fpm pools that might be necessary to handle our traffic). &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the Internet, there are a lot of tips on how to disable making subrequest to call crons and move them to CLI. But there is one problem. A lot of these tips suggest calling these scheduled tasks using &lt;code&gt;crontab&lt;/code&gt; by calling curl (or other http callings). This addressed first problem and makes user request free of sub-requests, but does not resolve two abovementioned problems. It is surprising because WordPress comes with &lt;code&gt;wp cron&lt;/code&gt; command, which supports running scheduled tasks in CLI without making HTTP calls. &lt;/p&gt;

&lt;p&gt;In order to do this, you have to add one line to your crontab:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*/5 * * * * wp cron event run --due-now --path=path_to_your_wp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, we call the scheduled task every 5 minutes. WordPress is responsible for choosing a concrete task to run and runs it. &lt;/p&gt;

&lt;p&gt;Of course, you also have to disable calling sub-request to &lt;code&gt;/wp-cron.php&lt;/code&gt; file. In order to do that, add the following to your wp-config.php file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'DISABLE_WP_CRON'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my opinion, you should also deny access to &lt;code&gt;wp-cron.php&lt;/code&gt; file (because some bots might DDoS our site requesting this endpoint). I suggest making it on the application server level. For example, if you use Nginx,  add the following to your host configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;location = /wp/wp-cron.php { deny all; }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>wordpress</category>
      <category>devops</category>
    </item>
    <item>
      <title>The Key Element to Responsive Websites</title>
      <author>mayankav</author>
      <pubDate>Sun, 20 Jun 2021 18:56:37 +0000</pubDate>
      <link>https://dev.to/mayankav/the-key-element-to-responsive-websites-31e5</link>
      <guid>https://dev.to/mayankav/the-key-element-to-responsive-websites-31e5</guid>
      <description>&lt;p&gt;What is the first thing you think of when someone says responsive websites? What comes rushing to your mind when you think of the most important piece of code related to responsive websites? CSS? relative units (%)? Media queries? Well, we won't talk about that here. This post aims to pin point the most essential stuff without which none of your responsive techniques would ever work the way you expect them to. We are talking about the  html tag. Well, but you know meta tags have got nothing to do with what's being rendered, right? They just carry information regarding the page content. They do not even appear on the page themselves. How do they matter when it comes to making our web page responsive? &lt;/p&gt;

&lt;p&gt;There's a special meta tag called the meta viewport, which actually has a lot to do with how well your page adapts to the screen it is rendered on. Lets dig deep.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Meta Viewport Example&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=80, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Look at the code snippet that shows a meta tag enclosed within the Head section. The name attribute says viewport. That should be enough to indicate that this tag is supposed to add some kind of information related to the viewport - the space on the screen on which your web page is being rendered. Lets not confuse the viewport width with screen width. They may be the same when the rendering device is a mobile phone (we shall talk about this later in the same post) but on desktops and PCs, you can play with the size of your browser. &lt;b&gt;&lt;u&gt;Check out the following piece of code.&lt;/u&gt;&lt;/b&gt; Paste it in your browser console and resize your window to see how the viewport width changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientWidth&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we hopefully understand the difference between the physical screen width and the viewport width, let me break it to you that mobile phones generally (if not all of them) do not map the viewport to the exact dimensions of the screen (width). You can check out some real examples &lt;a href="https://experienceleague.adobe.com/docs/target/using/experiences/vec/mobile-viewports.html?lang=en"&gt;here&lt;/a&gt;. So for example if a mobile phone's screen is say 320px wide, it may consider a virtual viewport that is 800px, 900px wide or whatever and then minimize (zoom out) the rendered output to fit the screen size. Why would they do so you ask? This comes from back in time when responsive websites were not that common maybe. Even today not all websites are made mobile friendly (which indeed isn't what we want to do). If the mobile browser vendors mapped the viewport width of the browser to the screen width, the elements in the real website (big images/big buttons etc..) would break when rendered on such a small viewport. So they render it on a bigger viewport and then scale down the result to show it to you on a smaller screen. You can then zoom in on the part you want. You want an example? Checkout &lt;a href="https://www.youtube.com/"&gt;YouTube&lt;/a&gt; but do it on your desktop and then resize your window to make sure you do not go to m.youtube.com which is another version meant specifically for mobile phones. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wrhT5jMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkusib41gn67ubya7q04.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wrhT5jMc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pkusib41gn67ubya7q04.PNG" alt="YouTube Desktop"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;h6&gt;YouTube Desktop (not optimized for mobile experience)&lt;/h6&gt;&lt;/center&gt;




&lt;p&gt;This however, is not an ideal experience for websites which are made mobile friendly. Can you guess what sort of issues can this virtual viewport cause? You guessed it, didn't you? The media queries will start breaking. If you put in place a media query that should fire at 320px, it simply won't get triggered because factually the screen width is 900px which was just zoomed out to show it to you on a 320px wide mobile screen. What do such mobile browser vendors do for developers like us who write media queries to make our websites look good on all screen sizes? Well, they gave us this meta viewport tag which we can now use on our web page and tell the browser, to set the virtual viewport's width in accordance with our needs. So now when you say&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;html &amp;lt;meta name="viewport" content="width=device-width" /&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;br&gt;
, the mobile browser knows that you want to render your page with a virtual viewport that is as wide as the device's screen. Of course, you can set this "width" value to random pixels but that does not bring us joy. You can see the examples on &lt;a href="https://www.w3schools.com/css/css_rwd_viewport.asp"&gt;w3school&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Interestingly, if you use boilerplate builder tools like create-react-app, vue create etc.. you may or may not have bothered to go through the index.html file completely. If you do a cross check, you shall definitely find the meta viewport tag included in the head section. Get rid of it for a while and see how your web app behaves on different screen sizes. Hopefully now, everyone can relate to the virtual viewport of mobile browsers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5DLLs44W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yt9nm69wxjgapeth08u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5DLLs44W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5yt9nm69wxjgapeth08u.jpg" alt="Virtual Viewports"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;h6&gt;Learn more about Virtual Viewports &lt;a href="https://developers.google.com/web/updates/2015/01/What-the-Viewport"&gt;here&lt;/a&gt;
&lt;/h6&gt;&lt;/center&gt;




&lt;h2&gt;Originally posted here -&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mayankav.webflow.io/blog/javascript-symbols-dont-be-scared-of-them"&gt;https://mayankav.webflow.io/blog/javascript-symbols-dont-be-scared-of-them&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>12 CSS Best Practices by Twitter</title>
      <author>Pritam Patil</author>
      <pubDate>Sun, 20 Jun 2021 18:31:15 +0000</pubDate>
      <link>https://dev.to/pritampatil/12-css-best-practices-by-twitter-2fap</link>
      <guid>https://dev.to/pritampatil/12-css-best-practices-by-twitter-2fap</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When grouping selectors, keep individual selectors to a single line.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RJ65SQwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/piv7i8jtumkte1g2vd8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RJ65SQwl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/piv7i8jtumkte1g2vd8u.png" alt="single-line-selectors"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't prefix property values with a leading zero. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--krzTBI1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ggwfe767m7wd6c02ofc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--krzTBI1N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ggwfe767m7wd6c02ofc.png" alt="leading-zero-prefix"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lowercase all hex values and use shorthand hex values whenever possible. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pT7esLGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jorymrfsvjcqmpm16nos.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pT7esLGr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jorymrfsvjcqmpm16nos.png" alt="shorthand-hex"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid specifying units for zero values. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhIIf1hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phuajjsobkh8rrpadtaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhIIf1hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phuajjsobkh8rrpadtaq.png" alt="no-units-zero"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Related property declarations should be grouped together following the order: &lt;em&gt;position, box-model, typography, visual. misc.&lt;/em&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EacfECL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipk1j98v0mk6hrxpe612.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EacfECL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipk1j98v0mk6hrxpe612.png" alt="declaration-order"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't use &lt;code&gt;!important&lt;/code&gt; - It is a last resort generally and  only use when you need to override something and there is no other way. Instead increase the specificity of the selector.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o7gv1pYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21iomsoth86mwr866l6c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7gv1pYy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21iomsoth86mwr866l6c.png" alt="no-imp-use-specificity"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When a rule set includes only one declaration, consider removing line breaks for readability and faster editing. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jcnVyKMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbfmpvw5gdtrwvurd67c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jcnVyKMd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rbfmpvw5gdtrwvurd67c.png" alt="single-declare-no-line-break"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Limit shorthand declaration usage to instances where you must explicitly set all available values.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cHk2JmhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eei8z39zpzqa1julsgzo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cHk2JmhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eei8z39zpzqa1julsgzo.png" alt="shorthand-declare-limit"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ensure your code is descriptive, well commented and approachable by others. Great code comments convey context and/or purpose.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RYOBN8kI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f98c5rl5f1pfz115pjws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RYOBN8kI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f98c5rl5f1pfz115pjws.png" alt="good-comments"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Class names:&lt;br&gt;
a. Keep them lowercase and use dashes to separate words&lt;br&gt;
b. Avoid excessive shorthand notation. (&lt;code&gt;.btn&lt;/code&gt; is fine, &lt;code&gt;.s&lt;/code&gt; is not)&lt;br&gt;
c. Use meaningful names: use structural or purposeful names over presentation.&lt;br&gt;
d. Prefix classes based on the closest parent or base class. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9i9a7wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwokogvsf132dyemn5tk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9i9a7wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwokogvsf132dyemn5tk.png" alt="classname-rules"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Selectors:&lt;br&gt;
a. Use classes over generic element tag for optimum rendering performance.&lt;br&gt;
b. Avoid using several attribute selectors (e.g. &lt;code&gt;[class^="..."]&lt;/code&gt;) on commonly occurring components. &lt;em&gt;Browser performance is known to be impacted by these&lt;/em&gt;.&lt;br&gt;
c. Keep selectors short and strive to limit the number of elements in each selector to three names over presentational.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--diOc4NS7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehrdcd5drxhy73ftnvbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--diOc4NS7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehrdcd5drxhy73ftnvbj.png" alt="selector-rules"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Place media queries as close to their relevant rule sets whenever possible.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5h1vNYNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hiia6o6vrdfsdo5gl4t6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5h1vNYNi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hiia6o6vrdfsdo5gl4t6.png" alt="media-query-rule"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Follow me on &lt;a href="https://twitter.com/TheDoucheP"&gt;twitter&lt;/a&gt; or &lt;a href="https://github.com/pritam-patil"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>bestofdev</category>
    </item>
    <item>
      <title>Melhores Plataformas de Lo-Fi: No Trabalho ou Estudo e sua import√¢ncia durante a Pandemia</title>
      <author>Paulo Freitas </author>
      <pubDate>Sun, 20 Jun 2021 18:03:52 +0000</pubDate>
      <link>https://dev.to/paulofreitas_py/melhores-plataformas-de-lo-fi-no-trabalho-ou-estudo-e-sua-importancia-durante-a-pandemia-4d48</link>
      <guid>https://dev.to/paulofreitas_py/melhores-plataformas-de-lo-fi-no-trabalho-ou-estudo-e-sua-importancia-durante-a-pandemia-4d48</guid>
      <description>&lt;p&gt;Deste a pandemia me tornei um viciado em Lo-fi e dessa forma queria compartilhar alguns pontos sobre esse novo conceito musical.&lt;/p&gt;

&lt;p&gt;Primeiro ponto: O que √© m√∫sica lo-fi? O termo vem do ingl√™s low fidelity, ou seja, baixa fidelidade. Ou seja, a m√∫sica lo-fi tem essa caracter√≠stica da leveza e da simplicidade, e por ser, em grande parte, livre de vocais, tem sido muito buscada para auxiliar a manter o foco em casa, durante o trabalho em home-office, ou mesmo para relaxar enquanto se l√™ um livro ou espera o sono chegar. E apesar do estilo lo-fi hip hop estar super em alta, ele n√£o tem a agressividade, a percussividade intensa e os subgraves do hip hop tradicional, mantendo o ritmo mais lento com os chamados "beats de lo-fi". Ali√°s, o lo-fi hip hop, quando n√£o tem absolutamente nenhuma parte cantada, √© o que deixa o estilo ainda mais suave e relaxante. Muitas vezes, encontramos samples de mon√≥logos ou di√°logos extra√≠dos filmes, animes ou notici√°rios no meio da m√∫sica.&lt;br&gt;
Segundo ponto: Qual a rela√ß√£o entre a m√∫sica lo-fi com a pandemia e a quarentena? Temos percebido um aumento consider√°vel de assinantes, promo√ß√µes e cria√ß√µes de novas playlists nos servi√ßos de streaming apresentando m√∫sicas com batidas suaves, melodias viajantes, muitas vezes livres de letras, completamente instrumentais e, no caso do hip hop, repletas de componentes eletr√¥nicos e at√© rimas que remetem ao rap, em v√°rios idiomas.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#o-lofi-%C3%A9-onipresente"&gt;
  &lt;/a&gt;
  O lo-fi √© onipresente
&lt;/h1&gt;

&lt;p&gt;Os grandes canais de lo-fi hip hop j√° marcam presen√ßa em v√°rias plataformas online, mas √© no YouTube que a coisa se concentra. Por l√°, voc√™ encontra n√£o s√≥ os canais oficiais dos principais nomes da "cena" lo-fi atual, como tamb√©m d√° de cara com r√°dios, playlists, novos artistas e lives de conte√∫do para relaxar enquanto trabalha ou procura aliviar sua tens√£o no meio da pandemia.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lofi-brazuca"&gt;
  &lt;/a&gt;
  Lo-fi brazuca
&lt;/h1&gt;

&lt;p&gt;N√£o √© s√≥ l√° fora que a m√∫sica lo-fi est√° bombando. No Brasil, os g√™neros lo-fi hip hop ou apenas a m√∫sica lo-fi tamb√©m est√£o em alta: de janeiro para c√°, percebemos um incremento consider√°vel no volume de buscas pelos termos "lofi" e "lo fi", em um per√≠odo que coincide com a pandemia do novo coronav√≠rus, e mais: com a epidemia da COVID-19 no Brasil, j√° que os volumes de buscas de mar√ßo e abril aumentaram em at√© tr√™s vezes nesse intervalo. Ser√° que as pessoas est√£o buscando se concentrar mais no home office? Ou ser√° que preferem ouvir o novo estilo simplesmente porque est√£o passando muito mais tempo em casa?&lt;/p&gt;

&lt;p&gt;Links:&lt;br&gt;
&lt;a href="https://ffm.to/lofisleep?utm_source=PauloFreitas.py&amp;amp;utm_medium=Pingback"&gt;Lo-Fi Bloom Sleep Rain&lt;/a&gt;&lt;br&gt;
&lt;a href="https://open.themusicport.com/url/kx0kd7?utm_source=PauloFreitas.py&amp;amp;utm_medium=Pingback"&gt;Lo-Fi Forest&lt;/a&gt;&lt;br&gt;
&lt;a href="https://open.spotify.com/playlist/66YQDZDPxIAotL6fOID7BJ?utm_source=PauloFreitas.py&amp;amp;utm_medium=Pingback"&gt;Lo-Fi Hip Hop&lt;/a&gt;&lt;br&gt;
&lt;a href="http://smarturl.it/pokechill?utm_source=PauloFreitas.py&amp;amp;utm_medium=Pingback"&gt;Pok√© &amp;amp; Chill&lt;/a&gt;&lt;br&gt;
&lt;a href="https://chillhop.com/spotify_playlists/?utm_source=PauloFreitas.py&amp;amp;utm_medium=Pingback"&gt;ChillHop Radio&lt;/a&gt;&lt;br&gt;
&lt;a href="https://fanlink.to/lofigirl-music?utm_source=PauloFreitas.py&amp;amp;utm_medium=Pingback"&gt;Lo-Fi Girl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Extra:&lt;br&gt;
&lt;a href="https://youtu.be/rA56B4JyTgI"&gt;chill beats to quarantine to Will Smith&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/ZhstyJSNKME"&gt;lofi hip hop - brazil songs playlist&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/EtrL_x8sceY"&gt;Mix LoFi Hip Hop Brasil para estudar, trabalhar ou dormir ~ Vol. 1&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtu.be/fo5Jp9Hekg8"&gt;Lo Fi Brazil Songs Playlist&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#post-orignal"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.instagram.com/p/COigLTlshVt/"&gt;Post Orignal&lt;/a&gt;
&lt;/h3&gt;

</description>
    </item>
    <item>
      <title>Create professional portfolio website with Nextjs and ChakraUI</title>
      <author>Muhammad  Ahmad</author>
      <pubDate>Sun, 20 Jun 2021 18:00:11 +0000</pubDate>
      <link>https://dev.to/m_ahmad/create-professional-portfolio-website-with-nextjs-and-chakraui-4lkn</link>
      <guid>https://dev.to/m_ahmad/create-professional-portfolio-website-with-nextjs-and-chakraui-4lkn</guid>
      <description>&lt;p&gt;Currently, I'm learning Nextjs and Typescript. And for learning perspective I decided to rebuilt my portfolio website with Nextjs. And I really loved it. It was so easy to recreate my portfolio website with Nextjs. &lt;br&gt;
So far I'm using some of Nextjs features.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#built-with"&gt;
  &lt;/a&gt;
  Built with
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;React Framework - &lt;a href="https://nextjs.org/"&gt;Nextjs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;UI components - &lt;a href="https://chakra-ui.com"&gt;Chakra UI&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Icons - &lt;a href="https://react-icons.github.io/react-icons/"&gt;react icons&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Demo Link:&lt;/strong&gt; &lt;a href="https://my-portfolio-ma-ahmad.vercel.app"&gt;NextPortfolio&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;GitHub Repo:&lt;/strong&gt; &lt;a href="https://github.com/MA-Ahmad/myPortfolio"&gt;Repo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#skills"&gt;
  &lt;/a&gt;
  Skills
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8pJP6Emi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xy9nhrh697g1czkbfy1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8pJP6Emi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xy9nhrh697g1czkbfy1z.png" alt="screen1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#open-source-projects"&gt;
  &lt;/a&gt;
  Open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_9WnZQVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r98v94u1cidrf1ycq33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_9WnZQVy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r98v94u1cidrf1ycq33.png" alt="screen2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4HjCFh51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xel2ey7j60u5q7psjxmj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4HjCFh51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xel2ey7j60u5q7psjxmj.png" alt="screen3"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#developer-story"&gt;
  &lt;/a&gt;
  Developer story
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DG48pyhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6srfuga2owd9xk32cu1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DG48pyhw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m6srfuga2owd9xk32cu1.png" alt="screen4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: I have already created this website with reactjs and chakraUI.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/m_ahmad" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vrvEKvHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--iCCO7GRa--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/370400/bda2fd3e-cb65-4abb-81e6-1f50edf567dd.png" alt="m_ahmad image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/m_ahmad/portfolio-website-template-built-with-react-and-chakraui-15ok" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Built Portfolio website with React and ChakraUi&lt;/h2&gt;
      &lt;h3&gt;Muhammad  Ahmad „Éª Apr 3 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>nextjs</category>
      <category>webdev</category>
      <category>react</category>
      <category>beginners</category>
    </item>
    <item>
      <title>My Dev Journey: Week 7</title>
      <author>Harry York</author>
      <pubDate>Sun, 20 Jun 2021 17:48:14 +0000</pubDate>
      <link>https://dev.to/harryyork97/my-dev-journey-week-7-58b7</link>
      <guid>https://dev.to/harryyork97/my-dev-journey-week-7-58b7</guid>
      <description>&lt;p&gt;This week was the last week in the Back-End block of the Northcoders bootcamp, this week focused on taking everything we had learnt in the previous 2 weeks and applying it to create a working back-end of a project. I also had my first code review this week, which went really well and it was great to get feedback on what to improve and what was going well.&lt;/p&gt;

&lt;p&gt;If you've enjoyed any of my blog series, then maybe consider following me on &lt;a href="https://twitter.com/grand_oldduke"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/harryyork97"&gt;GitHub&lt;/a&gt; üòÅ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-ive-learnt-this-week"&gt;
  &lt;/a&gt;
  What I've learnt this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#async-await"&gt;
  &lt;/a&gt;
  Async / Await
&lt;/h3&gt;

&lt;p&gt;We'd previously been shown how to do asynchronous functions using Promises and then blocks, so this was all about learning how to write asynchronous code in a different way. I've definately found async await easier to read then Promises which has made them easier to work with for me but I have from myself accidently mixing the two together a bit!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advanced-error-handling"&gt;
  &lt;/a&gt;
  Advanced Error Handling
&lt;/h3&gt;

&lt;p&gt;This section focussed a lot on how to error handle our database queries more indepth, we used tools like pg-format for formatting query strings and also error first functions with the idea of passing those errors out of our database interactions into the different error handling middleware we created.&lt;/p&gt;

&lt;p&gt;It was great to be able to reuse errors across db queries to help keep my codebase clean, and learning about extra error handling also helped with trickier errors for tables with forgien keys.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aggregate-sql-queries"&gt;
  &lt;/a&gt;
  Aggregate SQL queries
&lt;/h3&gt;

&lt;p&gt;Making aggregate queries, like adding JOIN, WHERE and LIKE operations to my existing queries allowed me to learn to more efficient queries to the database rather than stitching multiple queries together. It's been good to learn where these are more appropriate to use over some JavaScript solutions I originally came up with that makes my code more efficient especially at a larger scale.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosting-with-heroku"&gt;
  &lt;/a&gt;
  Hosting with Heroku
&lt;/h3&gt;

&lt;p&gt;Towards the end of the week we' learned how to host a PSQL DB and express server using Heroku. It was great to finally be able to understand how to put something I've made out there for other people to see and not just be something that is running on my laptop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-ive-found-useful-this-week"&gt;
  &lt;/a&gt;
  Resources I've found useful this week
&lt;/h2&gt;

&lt;p&gt;Unlike most weeks where we've had a lot of new information introduced to us in quick succession, this week was all about rounding off our understanding and applying to the back-end of a project that we will make the front-end for in the coming weeks. So with that in mind I reflected back on previous code and notes of my own to apply to this week's project!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#postgresql-documentation"&gt;
  &lt;/a&gt;
  Postgresql documentation
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://www.postgresql.org/docs/"&gt;documentation&lt;/a&gt; has been great to use to sense check my queries and make sure they're doing what I'm intending, especially with more complex queries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nodepostrgres"&gt;
  &lt;/a&gt;
  Node-Postrgres
&lt;/h3&gt;

&lt;p&gt;The docs for the &lt;a href="https://node-postgres.com/"&gt;node-postgres&lt;/a&gt; modules are also fantastic, especially for getting small code snippets from and double checking my syntax is correct.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#northcoders-notes"&gt;
  &lt;/a&gt;
  Northcoders Notes
&lt;/h3&gt;

&lt;p&gt;They're in here everyweek but the folks at Nortcoders really do a great job with the notes. Just going back over the notes that have been written for us is fantastic, because there's been several times where I've gone back and re-read the notes ina completely new light, and that clarity is great.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What is DeFiFarms?</title>
      <author>DefiFarms Non-Fungible Yearn</author>
      <pubDate>Sun, 20 Jun 2021 17:43:59 +0000</pubDate>
      <link>https://dev.to/defifarms/what-is-defifarms-h26</link>
      <guid>https://dev.to/defifarms/what-is-defifarms-h26</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In short, DeFiFarms is bringing to the DeFi table a series of revolutionary solutions focused around ERC-721, The Non-Fungible Token ‚Äî NFT Standards. DeFiFarm inherits all innovative functions from current Decentralized Finance Platforms such as Decentralized Trading, Swapping using AMM supported by Liquidity Providers and adds new cool functions utilizing NFT.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The native token of DeFiFarms is DEFIY ‚Äî DeFiFarms non-fungible Yearn, the Governance Token&lt;br&gt;
Below are our most unique features:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AMM powered Trading&lt;/strong&gt;&lt;br&gt;
DeFiFarms offers a Decentralized Exchange platform that is capable of swapping with the use of an automated market maker (AMM) model. On our AMM-based decentralized exchanges, the traditional order book is replaced by liquidity pools that are pre-funded on-chain for both assets of the trading pair. The liquidity is provided by other users who also earn passive income on their deposits through trading fees based on the percentage of the liquidity pool that they provide. The solution works across different blockchain networks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Staking, Liquidity Providing.&lt;/strong&gt;&lt;br&gt;
The protocol allows users to stake their various digital assets into different pools to verify transactions, provide liquidity and earn DEFIY, the governance token of DeFiFarms. Our staking process will be the same as any other staking platform plus various new improvements powered by NFT.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚úîWe fully support CAKE-LP v2 staking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;NFT Farming&lt;/strong&gt;&lt;br&gt;
By using NFT, DeFiFarms allows stakes to be more dynamic. Instead of a stake being tied to a user‚Äôs wallet address, it is linked to a proof of ownership, transferable NFT. Meaning, when you become a Liquidity Provider and stake your tokens, you not only earn rewards but also receive an NFT of equivalent value. This is called NFT Farming.&lt;br&gt;
In detail, DeFiFarms adds a new layer of possibility to Liquidity Providers and Yield Farmers by letting them ‚Äúmove around‚Äù locked values of Liquidity Providers Token.&lt;/p&gt;

&lt;p&gt;When you stake your DEFIY/BNB liquidity tokens in the DeFiFarms platform, the LP tokens are locked in the staking contract, but the value is not. The protocol will mint an NFT at the time of staking which will wrap the value you have locked in a transferable ERC-721 token, an NFT. Your stake will be stored on-chain in the metadata of this NFT. There‚Äôs no need to unstake your locked assets, when you decide you no longer want to be a liquidity provider, you can go on the market and trade that NFT for the market value of the LP tokens along with the accrued rewards.&lt;/p&gt;

&lt;p&gt;You can also unstake if you wish. When you unstake, the NFT is burned and staked funds plus unredeemed rewards will be transferred back to your wallet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automatic Liquidity&lt;/strong&gt;&lt;br&gt;
Every transfer made with DEFIY must incur an 8% transfer tax. 6% transfer tax will also be added to the DEFIY-BNB liquidity pool through the contract to automatically and continuously raise the price floor. The liquidity will be locked and inaccessible. Before DeFiFarms is launched on AMM dex, the liquidity will be added on PancakeSwap then on DeFiFarms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Automated Burning&lt;/strong&gt;&lt;br&gt;
As mentioned above, each transfer of DEFIY must pay an 8% transfer tax. The 6% transfer tax will be allocated to automatic liquidity acquisition. The other 2% transfer tax will be burned immediately. The whole process is automatic.&lt;br&gt;
Black Hole Address: 0x000000000000000000000000000000000000dEaD&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anti-Whale&lt;/strong&gt;&lt;br&gt;
To limit Pump and Dump schemes initiated by Whales, transfer of more than 0.15% (current ratio) of the total supply will be rejected. As the total supply grows, this ratio will be reduced.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚úîDeposit or withdraw tokens to the farms will not be subject to this restriction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can view the max transfer amount on our website: &lt;a href="https://defifarms.org"&gt;https://defifarms.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Harvest Lockup&lt;/strong&gt;&lt;br&gt;
Harvest lockup is a unique and creative farming rewards lockup mechanism created by the DeFiFarms dev team. This mechanism can help us limit the frequency of harvest to prevent farming arbitrage bots from constantly harvesting and dumping.&lt;br&gt;
For example, the harvest lockup of the DEFIY-BUSD farm is 4 hours. It means that farmers who stake in the DEFIY-BUSD farm can only harvest (claim their rewards from farming) every 4 hours.&lt;br&gt;
You can check the harvest lockup on each farm card.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚úîTo clarify, the harvest lockup only locks users‚Äô farming rewards. The tokens and LP tokens staked in farms can be withdrawn anytime.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Deposit Fee Redistribution&lt;/strong&gt;&lt;br&gt;
A 5% deposit fee will be charged when users enter staking on DeFiFarms, but unlike other yield farms, DeFiFarms don‚Äôt use the deposit fee to buy back and burn. Instead, the platform will redistribute the 4% deposit fee to DEFIY holders to encourage holding.&lt;/p&gt;

&lt;p&gt;When users enter the farming on DeFiFarms, a 5% deposit fee will be charged.&lt;br&gt;
‚¶Å a 1% deposit fee will be sent to the dev team as the development fund.&lt;br&gt;
‚¶Å a 4% deposit fee will be redistributed to DEFIY holders via Defi Factory&lt;br&gt;
DeFiFactories&lt;br&gt;
DeFi Factories are farming pools that allow DEFIY holders to stake their DEFIY to earn other tokens. Two DeFi Factories (BUSD &amp;amp; BNB) will be created by the dev team after the launch, the 4% deposit fee will be added to these two pools as the rewards for DEFIY staking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Referral Program&lt;/strong&gt;&lt;br&gt;
An on-chain referral program has been implemented to incentivize users to invite friends to take part in farming activities. Inviters can earn 1% of his/her friends‚Äô earnings forever.&lt;br&gt;
How to participate in our Referral Program:&lt;br&gt;
‚¶Å Visit DeFiFarms referral program page: &lt;a href="https://DeFiFarms.org/referrals"&gt;https://DeFiFarms.org/referrals&lt;/a&gt;&lt;br&gt;
‚¶Å Unlock your wallet to get your unique referral link&lt;br&gt;
‚¶Å Share your referral link with your friends&lt;br&gt;
‚¶Å Every time your friends get rewards from farms, you will receive referral commissions automatically&lt;br&gt;
‚¶Å The current referral commission rate is 1%&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lottery&lt;/strong&gt;&lt;br&gt;
Taking part in the DeFiFarms ‚Äî DEFIY lottery draw is a way to reward users with DEFIY and help promote DEFIY at the same time.&lt;/p&gt;

&lt;p&gt;‚¶Å Lottery Ticket Fee for 1 ticket: 20 DEFIY&lt;br&gt;
‚¶Å Single User Lottery Entry Limit: No overall limit, but only 50 tickets can be bought at one time.&lt;br&gt;
‚¶Å Paying for one ticket will give users a random 4 digit combination with each digit being between 1‚Äì9, e.g. ‚Äú1‚Äì9‚Äì3‚Äì2‚Äù&lt;/p&gt;

&lt;p&gt;To win the lottery jackpot (50% of the entire lottery pool), users need to match all 4 numbers on their ticket in the same order as the 4 winning numbers.&lt;/p&gt;

&lt;p&gt;If you don‚Äôt match all 4, no need to worry. As long as you match 2 or more numbers in the correct order, you are guaranteed to win a prize.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Launch&lt;/strong&gt;&lt;br&gt;
We are launching on Thursday, July 22, 2021 at 20:45:45 GMT+07:00 (Indochina Time)&lt;/p&gt;

&lt;p&gt;For more details please visit our website: &lt;a href="https://defifarms.org"&gt;https://defifarms.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who founded DeFiFarms?&lt;/strong&gt;&lt;br&gt;
An experienced team of data scientists and blockchain and database engineers built DEFIFARMS. They are passionate about improving and scaling blockchain technologies. Cesar Deandres, CEO, and Co-founder is a physicist by training and started his career.&lt;br&gt;
Zackhary Brown, CMO, and Co-founder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow us on Social Media&lt;/strong&gt;&lt;br&gt;
Website : &lt;a href="https://defifarms.org/"&gt;https://defifarms.org/&lt;/a&gt;&lt;br&gt;
Telegram : &lt;a href="https://t.me/DeFiFarmsNFT"&gt;https://t.me/DeFiFarmsNFT&lt;/a&gt;&lt;br&gt;
Media : &lt;a href="https://t.me/DefifarmsNFTs"&gt;https://t.me/DefifarmsNFTs&lt;/a&gt;&lt;br&gt;
Twitter : &lt;a href="https://twitter.com/DeFiFarmsNFTs"&gt;https://twitter.com/DeFiFarmsNFTs&lt;/a&gt;&lt;br&gt;
Medium : &lt;a href="https://medium.com/@DeFiFarmsNFTs"&gt;https://medium.com/@DeFiFarmsNFTs&lt;/a&gt;&lt;br&gt;
Reddit : &lt;a href="https://www.reddit.com/r/DeFiFarms/"&gt;https://www.reddit.com/r/DeFiFarms/&lt;/a&gt;&lt;br&gt;
Githud : &lt;a href="https://github.com/defifarms"&gt;https://github.com/defifarms&lt;/a&gt;&lt;br&gt;
‚úÖContract: &lt;a href="https://bscscan.com/token/0x2307DfB065CF1c9c5bC0f3435b49830C0AB86847"&gt;https://bscscan.com/token/0x2307DfB065CF1c9c5bC0f3435b49830C0AB86847&lt;/a&gt;&lt;/p&gt;

</description>
      <category>defifarms</category>
      <category>defiy</category>
      <category>defif</category>
    </item>
    <item>
      <title>Pop the lock! | A Lock Picking game. (Inspired by the popular mobile game)</title>
      <author>FRADAR</author>
      <pubDate>Sun, 20 Jun 2021 17:35:47 +0000</pubDate>
      <link>https://dev.to/fradar/pop-the-lock-a-lock-picking-game-inspired-by-the-popular-mobile-game-516p</link>
      <guid>https://dev.to/fradar/pop-the-lock-a-lock-picking-game-inspired-by-the-popular-mobile-game-516p</guid>
      <description>&lt;p&gt;Recreation of the popular mobile game Pop the Lock in CSS/JavaScript. The game stores your progress, so you can start from the level you had ended at.&lt;/p&gt;

&lt;p&gt;Try it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/PopRdZJ"&gt;https://codepen.io/FRADAR/full/PopRdZJ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow me:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S&lt;/em&gt; Check out the mobile game: &lt;a href="https://www.youtube.com/watch?v=eOPqezBcKrY"&gt;https://www.youtube.com/watch?v=eOPqezBcKrY&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>gamedev</category>
      <category>mobile</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Block Jumper | A precise endless platformer jumping game.</title>
      <author>FRADAR</author>
      <pubDate>Sun, 20 Jun 2021 17:28:54 +0000</pubDate>
      <link>https://dev.to/fradar/block-jumper-a-precise-endless-platformer-jumping-game-305i</link>
      <guid>https://dev.to/fradar/block-jumper-a-precise-endless-platformer-jumping-game-305i</guid>
      <description>&lt;p&gt;A frustrating platformer game that I made.&lt;/p&gt;

&lt;p&gt;The controls are : &lt;br&gt;
Click to jump, and hold down your click to jump higher.&lt;/p&gt;

&lt;p&gt;Mind you, this game is very hard.&lt;/p&gt;

&lt;p&gt;Try it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/zYogJjg"&gt;https://codepen.io/FRADAR/full/zYogJjg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Comment your score!&lt;br&gt;
If you beat my high-score of 127 i'm accusing you of witchcraft.&lt;/p&gt;

&lt;p&gt;Like my games?&lt;br&gt;
Follow me:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>gamedev</category>
      <category>showdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Misc update: new pfp.</title>
      <author>Calin Baenen</author>
      <pubDate>Sun, 20 Jun 2021 17:27:04 +0000</pubDate>
      <link>https://dev.to/baenencalin/misc-update-new-pfp-4pfp</link>
      <guid>https://dev.to/baenencalin/misc-update-new-pfp-4pfp</guid>
      <description></description>
      <category>watercooler</category>
    </item>
    <item>
      <title>Taxi Apocalypse | A car game</title>
      <author>FRADAR</author>
      <pubDate>Sun, 20 Jun 2021 17:14:51 +0000</pubDate>
      <link>https://dev.to/fradar/taxi-apocalypse-a-car-game-5f2e</link>
      <guid>https://dev.to/fradar/taxi-apocalypse-a-car-game-5f2e</guid>
      <description>&lt;p&gt;This is  a little endless side- scroller game I would like to refine, if you have any suggestion/advice about the code or gameplay please tell me in the comments. Anyways, hope you like it!&lt;br&gt;
Credits : Music from Trevor Lentz (&lt;a href="https://opengameart.org/content/just-move"&gt;https://opengameart.org/content/just-move&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Try it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/OJpJMMz"&gt;https://codepen.io/FRADAR/full/OJpJMMz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like my games? Want to see more?&lt;br&gt;
Follow me here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>gamedev</category>
      <category>javascript</category>
      <category>pixelart</category>
    </item>
  </channel>
</rss>
