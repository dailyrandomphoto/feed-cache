<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What's in the TensorFlow Federated Box?</title>
      <author>Bala Priya</author>
      <pubDate>Mon, 26 Apr 2021 02:49:02 +0000</pubDate>
      <link>https://dev.to/balapriya/what-s-in-the-tensorflow-federated-box-5b5f</link>
      <guid>https://dev.to/balapriya/what-s-in-the-tensorflow-federated-box-5b5f</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Krzysztof Ostrowski is a Research Scientist at Google, where he leads the TensorFlow Federated development team. This blog post is inspired by his talk at the OpenMined Privacy Conference.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#what-is-tensorflow-federated"&gt;
  &lt;/a&gt;
  What is TensorFlow Federated?
&lt;/h2&gt;

&lt;p&gt;TensorFlow Federated(TFF) is a new development framework for Federated Computations, that typically involve computations on data that is born decentralized and stays decentralized. TFF provides a common framework for federated computations in both research and production and is an open source project within the TensorFlow ecosystem.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#whats-in-the-tensorflow-federated-library"&gt;
  &lt;/a&gt;
  What’s in the TensorFlow Federated library?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Federated Computation API(FC API) that provides new abstractions, execution models and language designed for federated computations.&lt;/li&gt;
&lt;li&gt;Higher-level libraries and canned APIs that provide implementations of federated learning algorithms.&lt;/li&gt;
&lt;li&gt;Runtime and Simulation Components that provide datasets, canned training loops and single to multi-machine runtime, including flexible integration points for custom backend.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#design-goals-for-tff"&gt;
  &lt;/a&gt;
  Design Goals for TFF
&lt;/h2&gt;

&lt;p&gt;The TFF library has been designed so as to facilitate an easy path from research to production. In TFF, the code is serialized into a portable, language-independent and platform-independent representation.&lt;br&gt;
The design is, therefore, motivated by the dictum:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write code once, and deploy it anywhere;&lt;br&gt;
Your code shouldn’t have to change!&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#understanding-the-characteristics-of-federated-computationsfc"&gt;
  &lt;/a&gt;
  Understanding the characteristics of Federated Computations(FC)
&lt;/h2&gt;

&lt;p&gt;In this section, we shall seek to understand some of the characteristics of federated computations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Distributed Programming for privacy, anonymity and scale&lt;/strong&gt;: In such systems, the client stays on-device, because it’s very sensitive. We can have millions of clients coming and going continuously. The clients are assumed to be anonymous, unreliable and stateless. No client IDs are allowed in computation. There are no one-to-one interactions between clients, only collective operations are involved.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us consider the following example. Let us assume that temperature sensor readings of client devices are sensitive; The server wishes to get the percentage of client devices whose temperature sensor readings exceed a certain threshold. There’s federated broadcast of the threshold to all client devices. The client devices run a simple threshold check and send out a &lt;code&gt;1/0&lt;/code&gt; depending on whether &lt;code&gt;temperature &amp;gt; threshold&lt;/code&gt; is &lt;code&gt;True/False&lt;/code&gt; respectively. The server then does federated averaging on the values from the clients, which gives the fraction of devices whose temperature exceeds the threshold.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Clients and Server bear complementary responsibilities&lt;/strong&gt; — the server orchestrates the training process, while the clients perform the bulk of processing, such as model training.
Slicing and Dicing distributed (federated) values: A value is ‘federated’ if it can exist in multiple places. In our example, we may think of ‘temperature readings’ as &lt;code&gt;federated float32@clients&lt;/code&gt;
Involves communication and orchestration  —  collective operations, known as federated ops, rather than dealing with individual client’s data.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#tffs-federated-computation-api"&gt;
  &lt;/a&gt;
  TFF’s Federated Computation API
&lt;/h2&gt;

&lt;p&gt;The program flow is expressed in a Pythonic way for better interpretability; As stated in an earlier section, all code is traced and serialized at definition time to a platform-independent representation. Here’s the code snippet showing the collective operations and on-device processing for the temperature sensor example discussed above.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exceeds_threshold_fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="c1"&gt;#on-device processing    
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reading&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;tff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;federated_computation&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_fraction_over_threshold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;readings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;federated_mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="c1"&gt;#collective operations                           
&lt;/span&gt;       &lt;span class="n"&gt;tff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;federated_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="c1"&gt;#collective communication                     
&lt;/span&gt;            &lt;span class="n"&gt;tff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tf_computation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exceeds_threshold_fn&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;                       
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;readings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;federated_broadcast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;)]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tffs-canned-and-simulation-apis"&gt;
  &lt;/a&gt;
  TFF’s Canned and Simulation APIs
&lt;/h2&gt;

&lt;p&gt;We shall enumerate some of the features of TFF’s Canned and Simulation APIs.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One-line call to create portable TFF code for federated training.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Just plug in your Keras model
&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tff&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;learning&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_federated_averaging_process&lt;/span&gt;&lt;span class="p"&gt;(...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;To run a simulation, we can invoke just like a Python function, similar to the example below; By default, a single-machine in-process TFF runtime is spawned in the background.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initilaize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    
    &lt;span class="n"&gt;train_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="c1"&gt;#pick random clients    
&lt;/span&gt;    &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;train_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#canned-tff-executors"&gt;
  &lt;/a&gt;
  Canned TFF Executors
&lt;/h2&gt;

&lt;p&gt;Canned TFF Executors provide support for the most common scenarios. A single-machine, multi-threaded execution is spawned by default in the background, and the Canned TFF Executors facilitate remote and distributed execution. TFF executor building blocks are reusable, stackable modules that add to individual capabilities and are specifically designed for extensibility and customizability.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#collaboration-opportunities-for-open-source-contributors"&gt;
  &lt;/a&gt;
  Collaboration opportunities for Open Source contributors
&lt;/h2&gt;

&lt;p&gt;There are opportunities to contribute to the federated algorithms suite, simulation infrastructure and more flexible runtime integrations.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;[1] &lt;a href="https://www.tensorflow.org/federated"&gt;https://www.tensorflow.org/federated&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Create Native Apps with React Native and Android Studio</title>
      <author>MichaelPaulKunz</author>
      <pubDate>Mon, 26 Apr 2021 02:12:29 +0000</pubDate>
      <link>https://dev.to/michaelpaulkunz/create-native-apps-with-react-native-and-android-studio-37ja</link>
      <guid>https://dev.to/michaelpaulkunz/create-native-apps-with-react-native-and-android-studio-37ja</guid>
      <description>&lt;p&gt;If you've been making web pages with JavaScript and React, and you want to try apps that users can download and install onto their phones, then React Native is the path of least resistance. React Native is a library that converts JavaScript and React code into the native langauges used by both Android and Mac devices. It takes the place of ReactDOM, which you use for regular web pages. You can install it globally with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g react-native-cli&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;This tutorial won't cover deploying your app to the Mac or Android store where a user can download it. But we will go over getting started, explore some basic React Native syntax, and test our code with Android Studio. I'm working in Ubuntu 18.04 and some of my commands are Linux specific. Also, I'll focus on running an Android app instead of an iOS app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#android-studio"&gt;
  &lt;/a&gt;
  Android Studio
&lt;/h3&gt;

&lt;p&gt;Since we're not making web pages that will render in a browser, we won't be able to simply run a local server and test our code in Chrome. Instead we'll use &lt;a href="https://linuxize.com/post/how-to-install-android-studio-on-ubuntu-18-04/"&gt;Android Studio&lt;/a&gt; to display our output to a cell phone emulator. To run Android Studio, you'll first need a Java Development Kit. Linux users can install OpenJDK and Android STudio with the following two commands:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo apt install openjdk-8-jdk&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;



&lt;p&gt;&lt;code&gt;sudo snap install android-studio --classic&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;I should mention that installing Android Studio is not always easy. You can find more detailed instructions for installing to Ubuntu 18.04 &lt;a href="https://linuxize.com/post/how-to-install-android-studio-on-ubuntu-18-04/"&gt;here&lt;/a&gt;, but even then, you'll probably do a good bit of troubleshooting. I tried to keep a log of all the error messages I received along the way and the steps I took to fix them, but it proved too exhaustive. You'll deal with your own unique bouquet of complications anyway, so just know that having set-backs doesn't mean you're doing it wrong.&lt;/p&gt;

&lt;p&gt;One thing you'll probably want to do is configure a hardware accelerator for your virtual machine. The Android developer page provides &lt;a href="https://developer.android.com/studio/run/emulator-acceleration?utm_source=android-studio"&gt;detailed instructions&lt;/a&gt; for how to do that on Mac, Windows, or Linux. Android Studio can really slow your computer down without an accelerator. &lt;/p&gt;

&lt;p&gt;Once it's fully installed, running the command &lt;code&gt;android-studio&lt;/code&gt; in your terminal will bring up this window:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cJSad7jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dc33astqfev2tux058y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cJSad7jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9dc33astqfev2tux058y.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Click configure on the bottom right and choose "AVD Manager" to set up your Android Virtual Device. One may already be created for you, or you may need to make your own. I created a Pixel 2. Once it's created, you should have a line in your window displaying its name, resolution properties, and some other attributes. All the way to the right of the line are the actions. If everything is configured right, hitting the play button in actions launches your virtual machine. But you might still have to set up some environment variables. You're doing it right if you see a replica of an Android phone on your screen:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J2Bm7Rk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn1jfb29kvf2kqwb4pkl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J2Bm7Rk3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sn1jfb29kvf2kqwb4pkl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;React Native&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
You're pretty much finished with Android Studio at this point. The rest is in VS Code with React Native. Once you have it installed globally, you can initiate a React-Native app with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;react-native init &amp;lt;projectName&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;It will create a folder named after whatever you put for projectName. You can &lt;code&gt;cd&lt;/code&gt; into that folder and run &lt;code&gt;code .&lt;/code&gt; to explore your boilerplate app. There will be a lot of folders and a few dependencies installed for React-Native. Go into package.json to and check your scripts object to see what commands you need to run in the terminal. You'll be running "start" and "android" if you're working on an Android app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
npm android
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If everything is configured properly, your cell phone emulator will pop up whether you have Android Studio running or not, and you'll see some sample text on the cell phone screen. But it probably won't be configured properly. I know I got at least four errors when initially running the commands. Three saying I didn't have an emulator, or that it couldn't find the emulator. And one saying I had the wrong version of OpenJDK-- I had only just installed it specifically to work on this very project. In a lot of cases, getting these errors to go away was a matter of searching them on Google, finding solutions on Stack Overflow and other help forums, and trying them out until one worked. More often than not, the changes wouldn't take until I rebooted my computer, so keep that in mind if it seems like nothing's working. You've officially made it if you see your virtual cell phone running this screen:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pinR9GWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8mxhk4s342tmy2o4sih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pinR9GWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8mxhk4s342tmy2o4sih.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow the instructions on the screen and make some minor edits to App.js so you can see the results change. Coding in React Native isn't much different from coding in React. You can still use classes or functions with hooks. You import and export files the same. Your return statement will still be JSX rendering. One big difference is you can't use &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags. Instead of traditional html &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; tags, React Native provides us with a predefined library of components that we need to wrap around our code. You'll import them from 'react-native' at the top of the file and use them like you'd use any other React Component. Wrap your text in &lt;code&gt;&amp;lt;Text&amp;gt;&amp;lt;/Text&amp;gt;&lt;/code&gt; component tags and then wrap that in &lt;code&gt;&amp;lt;View&amp;gt;&amp;lt;/View&amp;gt;&lt;/code&gt; tags to control screen placement. Use a &lt;code&gt;&amp;lt;TextInput /&amp;gt;&lt;/code&gt; component for a form. And &lt;code&gt;&amp;lt;TouchableOpacity /&amp;gt;&lt;/code&gt; to make an item that responds visually to being pressed on the touch screen. Give it an &lt;code&gt;onPress&lt;/code&gt; property to make it dynamic.&lt;/p&gt;

&lt;p&gt;Traversy Media has a very good &lt;a href="https://www.youtube.com/watch?v=Hf4MJH0jDb4&amp;amp;ab_channel=TraversyMedia"&gt;React Native Crash Course&lt;/a&gt; where they walk you through building a Shopping List. You can pull or peak at their code &lt;a href="https://github.com/bradtraversy/react_native_shopping_list"&gt;here&lt;/a&gt; to see the way these Native components are used. Or check out my &lt;a href="https://github.com/MichaelPaulKunz/ToDoListReactNative"&gt;not-at-all derivative to-do list code&lt;/a&gt; instead. &lt;/p&gt;

&lt;p&gt;I hope you've found this helpful. It's far from exhaustive, and you'll definitely need to supplement it with other sources to get up and running. React Native is a pretty useful skill to have. It can almost certainly get you hired. Here's a list of some of the resources I used to build my first React Native app and write this article. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cites"&gt;
  &lt;/a&gt;
  Cites:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Hf4MJH0jDb4&amp;amp;ab_channel=TraversyMedia"&gt;React Native Crash Course&lt;/a&gt;&lt;br&gt;
&lt;a href="https://reactnative.dev/docs/environment-setup"&gt;React Native Docs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://linuxize.com/post/how-to-install-android-studio-on-ubuntu-18-04/"&gt;Install Android Studio&lt;/a&gt;&lt;br&gt;
&lt;a href="https://developer.android.com/studio/run/emulator-acceleration?utm_source=android-studio#vm-linux"&gt;Install KVM Acceleration&lt;/a&gt;&lt;br&gt;
&lt;a href="https://help.ubuntu.com/community/KVM/Installation"&gt;KVM Acceleration Ubuntu&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Audit Your Website!</title>
      <author>DigitalDump</author>
      <pubDate>Mon, 26 Apr 2021 00:52:21 +0000</pubDate>
      <link>https://dev.to/deexvish/audit-your-website-49ka</link>
      <guid>https://dev.to/deexvish/audit-your-website-49ka</guid>
      <description>&lt;p&gt;Today I will be auditing the website of a Penn State Student Organization I have proudly dedicated over 3 years to, Engineering-Consulting Collaborative. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://web.dev/"&gt;Web.dev&lt;/a&gt; (aka Lighthouse) and &lt;a href="https://wave.webaim.org/"&gt;WAVE&lt;/a&gt; are the services I will be using to analyze the accessibility, SEO, and performance of &lt;a href="http://eccpsu.weebly.com/"&gt;http://eccpsu.weebly.com/&lt;/a&gt;. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#accessibility-a11y"&gt;
  &lt;/a&gt;
  Accessibility / a11y
&lt;/h1&gt;

&lt;p&gt;Providing and supporting access to the web and technologies regardless of ability, connection quality, device capabilities, or human capabilities. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#search-engine-optimization-seo"&gt;
  &lt;/a&gt;
  Search Engine Optimization / SEO
&lt;/h1&gt;

&lt;p&gt;The discoverability of a website, based on how high it ranks on Google, Bing, and other search engines. This also comes into play with how often it shows up on social media feeds. Good SEO means more traffic. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-out-the-video-of-the-results-of-the-audit-where-i-also-share-the-steps-we-plan-to-take-to-improve-the-website"&gt;
  &lt;/a&gt;
  Check out the &lt;a href="https://youtu.be/gNSzi8REJlQ"&gt;video&lt;/a&gt; of the results of the audit, where I also share the steps we plan to take to improve the website.
&lt;/h3&gt;

</description>
      <category>seo</category>
      <category>a11y</category>
      <category>webdev</category>
      <category>performance</category>
    </item>
    <item>
      <title>Daily Share: A Custom React Hook that handles duplicate API call</title>
      <author>AnxinYang</author>
      <pubDate>Mon, 26 Apr 2021 00:39:44 +0000</pubDate>
      <link>https://dev.to/anxinyang/daily-share-a-custom-react-hook-that-handles-duplicate-api-call-41cd</link>
      <guid>https://dev.to/anxinyang/daily-share-a-custom-react-hook-that-handles-duplicate-api-call-41cd</guid>
      <description>&lt;p&gt;Today, we are going to create a custom hook that solve this problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have multiple components that calling same API.&lt;/li&gt;
&lt;li&gt;Component may not always be on same page, therefore, they have to call the API by themselves.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is a example hook I think can handle this problem:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isCalling&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// This can be replace by some global state. I use this for the sake of simplicity.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useFetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isThisAPICalling&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isCalling&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isThisAPICalling&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;isThisAPICalling&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="nx"&gt;isCalling&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isThisAPICalling&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// The body can only be parsed once.&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;isThisAPICalling&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;done&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;isCalling&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is a demo.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/o9sxf"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thank you all! Please let me know if you have any suggestion.&lt;/p&gt;

</description>
      <category>react</category>
      <category>hook</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Cómo registrar una cuenta en Freenom?</title>
      <author>Douglas Lovera</author>
      <pubDate>Sun, 25 Apr 2021 23:29:52 +0000</pubDate>
      <link>https://dev.to/doulovera/como-registrar-una-cuenta-en-freenom-5e4d</link>
      <guid>https://dev.to/doulovera/como-registrar-una-cuenta-en-freenom-5e4d</guid>
      <description>&lt;p&gt;Al escribir mi post sobre cómo &lt;a href="https://dev.to/somosdevs/tener-dominios-y-subdominios-gratis-con-freenom-y-netlify-4dj"&gt;crear dominios y subdominios con Freenom y Netlify&lt;/a&gt;, mi amigo &lt;a href="https://twitter.com/akachrosto/"&gt;@akachrosto&lt;/a&gt; me comentó que Freenom no le permite crear una cuenta ni generar un dominio, lo cual me pareció raro, entonces decidí hacer una pequeña investigada.&lt;/p&gt;

&lt;p&gt;Por lo que vi en &lt;a href="https://www.reddit.com/r/webhosting/comments/e085g8/all_freenom_domains_not_available/"&gt;este post&lt;/a&gt; de reddit, muchas personas también tienen el mismo problema, pero la solución es muy fácil:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#soluci%C3%B3n"&gt;
  &lt;/a&gt;
  Solución
&lt;/h1&gt;

&lt;p&gt;En el buscador de Freenom, en vez de poner solo el dominio de segundo nivel (el nombre), incluye también el de mayor nivel (la extensión). Es decir, hazlo de esta forma:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_j6tud2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/moa3mrnhho73lnved1o4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_j6tud2J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/moa3mrnhho73lnved1o4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esto lo incluirá directamente a tu carrito y podrás reclamarlo. &lt;/p&gt;

&lt;p&gt;Espero te haya servido! :D &lt;/p&gt;

</description>
      <category>spanish</category>
      <category>tutorial</category>
      <category>freenom</category>
    </item>
    <item>
      <title>The best interviewers are well prepared (100 Bytes Of Wisdom: Day 45)</title>
      <author>Sam Jarman 👨🏼‍💻</author>
      <pubDate>Sun, 25 Apr 2021 23:12:53 +0000</pubDate>
      <link>https://dev.to/samjarman/the-best-interviewers-are-well-prepared-100-bytes-of-wisdom-day-45-2lnp</link>
      <guid>https://dev.to/samjarman/the-best-interviewers-are-well-prepared-100-bytes-of-wisdom-day-45-2lnp</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g1iLuUst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3cx8xeh8sgag9c8tr5e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g1iLuUst--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k3cx8xeh8sgag9c8tr5e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first bit of advice I have for conducting interviews is prepare, prepare, prepare. So what do I mean by this? Well, I think we’ve probably all been the recipient of a poorly prepared interviewer. They skim your CV in the meeting itself, the conversation doesn’t really flow or go very deep, and the impression the candidate gets is pretty poor. Remember, these candidates have spent a few hours on your company already, preparing a CV/Résumé, writing a cover letter, prepping for an interview, etc, so how much disrespect have you shown them by not doing some prep? A lot.&lt;/p&gt;

&lt;p&gt;Thirty minutes is all it takes, and it revolves around what they present. Their CV/Résumé, cover letter, portfolio (GitHub, Blog, etc). Go through all of these, find tidbits that interest you, prepare a list of leading questions to learn more about these things. Examples: “You mention here you scaled the platform at company X from 1,000 to 1,000,000 users? What sort of bottlenecks did you find and fix? Because here we found….” or “I see here you launched an app to the app store, tell me what you did for marketing and launch week?” This is the time where you can really find out from the candidate if they have the skills or experience you’re after for the role.&lt;/p&gt;

&lt;p&gt;Heads up: As with any terse bit of advice, there will be exceptions of course, and subtleties and nuance that can't possibly be captured in a Byte of Wisdom. This has been what I've experienced, I'd love to hear yours in the comments too!&lt;/p&gt;

&lt;p&gt;You can catch up with all the other bytes at &lt;a href="http://bytesofwisdom.com/"&gt;http://bytesofwisdom.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>journey</category>
      <category>advice</category>
    </item>
    <item>
      <title>Tener dominios y subdominios gratis con Freenom y Netlify</title>
      <author>Douglas Lovera</author>
      <pubDate>Sun, 25 Apr 2021 22:56:13 +0000</pubDate>
      <link>https://dev.to/somosdevs/tener-dominios-y-subdominios-gratis-con-freenom-y-netlify-4dj</link>
      <guid>https://dev.to/somosdevs/tener-dominios-y-subdominios-gratis-con-freenom-y-netlify-4dj</guid>
      <description>&lt;p&gt;&lt;em&gt;cover tomada de &lt;a href="https://sainfoinc.com/a-brief-history-of-internet-domains"&gt;este artículo&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Como desarrolladores web, nos encontramos en la necesidad de acceder y compartir nuestros proyectos, pero los hosts nos dan URLs muy largas como  &lt;code&gt;https://gh-profile-finder.netlify.app&lt;/code&gt; (igual muchas gracias 🥺).&lt;/p&gt;

&lt;p&gt;La solución para esto son &lt;strong&gt;los dominios&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pero-son-de-pago-"&gt;
  &lt;/a&gt;
  Pero... Son de pago :(
&lt;/h3&gt;

&lt;p&gt;Y si estás empezando o no quieres gastar 8$ por uno para un proyecto que no es &lt;strong&gt;muuuy&lt;/strong&gt; importante, tienes suerte porque tenemos una alternativa gratuita:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#freenom"&gt;
  &lt;/a&gt;
  Freenom
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Freenom&lt;/strong&gt; es una página de dominios, donde están 5 que podemos usar de forma &lt;strong&gt;completamente gratuita&lt;/strong&gt;, que son: .tk, .ml, .ga, .cf, .gq. Todos esos son dominios de nivel superior geográfico de países chiquitos pero que podemos usar libremente.&lt;/p&gt;

&lt;p&gt;Ahora, &lt;strong&gt;hay que dejar en claro unas cosas&lt;/strong&gt; sobre Freenom antes de empezar:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Estos dominios &lt;strong&gt;no son&lt;/strong&gt; para nada &lt;strong&gt;SEO friendly&lt;/strong&gt;. Esto quiere decir que no esperes que tu página salga en los primeros resultados de los buscadores como &lt;strong&gt;google&lt;/strong&gt;. No recomiendo usarlo para portafolios.&lt;/li&gt;
&lt;li&gt;El &lt;strong&gt;máximo de tiempo&lt;/strong&gt; por el que puedes "contratar" el dominio son &lt;strong&gt;12 meses&lt;/strong&gt;, después de eso, para renovarlo, tienes que volver a pedirlo manualmente.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Esto lo vamos a vincular con un proyecto en Netlify para aprovechar un par de características que nos regala el host.&lt;/p&gt;

&lt;p&gt;Ahora sí, empecemos.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#1-registrando-una-cuenta"&gt;
  &lt;/a&gt;
  1. Registrando una cuenta
&lt;/h1&gt;

&lt;p&gt;Para &lt;strong&gt;registrar&lt;/strong&gt; una cuenta nueva, tienes que crear un dominio nuevo, sigue los siguientes pasos hasta que te pidan la información para crear tu cuenta&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ojo&lt;/strong&gt; que si usas VPN, cada vez que vayas a crear un dominio nuevo tiene que estar en el mismo país de la IP de la cuenta.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Si no puedes crear una cuenta &lt;a href="https://dev.to/doulovera/como-registrar-una-cuenta-en-freenom-5e4d"&gt;lee este post&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHAWJoij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r9f6ol084f0s8j9lgsop.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHAWJoij--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r9f6ol084f0s8j9lgsop.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-buscando-el-dominio"&gt;
  &lt;/a&gt;
  2. Buscando el dominio
&lt;/h1&gt;

&lt;p&gt;Ahora, en el nav vas a &lt;strong&gt;Services&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Register a New Domain&lt;/strong&gt; y seleccionas el dominio que quieres, ahí la página chequeará su disponibilidad.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zBXAurlP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr91h3nqexmwka24wfkv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zBXAurlP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sr91h3nqexmwka24wfkv.png" alt="freenom_search"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-adquiriendo-el-dominio"&gt;
  &lt;/a&gt;
  3. Adquiriendo el dominio
&lt;/h1&gt;

&lt;p&gt;Una vez añadido al carrito, te toca &lt;strong&gt;pedirlo&lt;/strong&gt;. En la imagen anterior sale un botón que dice &lt;strong&gt;checkout&lt;/strong&gt;, tocas ahí y en &lt;strong&gt;Period&lt;/strong&gt; seleccionas el de &lt;strong&gt;12 meses&lt;/strong&gt; (el gratuito) y le das a continuar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ovROokb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muvx4euh7xuh8s1eimzw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ovROokb4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muvx4euh7xuh8s1eimzw.png" alt="freenom_cart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Después le das a que has leído los términos y condiciones y completas la orden. Te llegará una confirmación a tu correo y ¡listo!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#vinculando-el-dominio-con-el-proyecto"&gt;
  &lt;/a&gt;
  Vinculando el dominio con el proyecto
&lt;/h3&gt;

&lt;p&gt;Como ya dije, vamos a estar utilizando &lt;strong&gt;Netlify&lt;/strong&gt; para este proyecto. Si no sabes cómo subir un repositorio a Netlify, te recomiendo &lt;a href="https://www.genbeta.com/desarrollo/como-publicar-web-gratis-usando-netlify-github"&gt;este artículo&lt;/a&gt; de Marcos Merino que te explica cómo.&lt;/p&gt;

&lt;p&gt;Una vez teniendo tu proyecto en línea, vamos al &lt;strong&gt;Overview&lt;/strong&gt; del proyecto, donde verás algo así:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QscmNGLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htkq6padd0mbv74q1zsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QscmNGLr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htkq6padd0mbv74q1zsq.png" alt="freenom_ntlfy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ve a &lt;strong&gt;Set up a custom domain&lt;/strong&gt;, e introduce el dominio que creaste, le das a que es tu dominio, y te llevará a la parte del manejo del dominio del proyecto. Ahí no acaba, ya que tiene unas advertencias, por lo que nos toca arreglarlas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#verificando-el-dominio"&gt;
  &lt;/a&gt;
  Verificando el dominio
&lt;/h3&gt;

&lt;p&gt;Acá tenemos dos caminos que podemos tomar:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Verificarlo a través de los DNS de Freenom.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Utilizar los DNS de Netlify&lt;/strong&gt; (recomendada)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Personalmente prefiero utilizar los DNS de Netlify por dos razones:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Certificado SSL gratuito (lo que dice que el sitio es seguro).&lt;/li&gt;
&lt;li&gt;Subdominios a través de los branches del repositorio.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Entonces, continuamos con esto:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configurando-los-dns-de-netlify"&gt;
  &lt;/a&gt;
  Configurando los DNS de Netlify
&lt;/h3&gt;

&lt;p&gt;Una vez le des a &lt;strong&gt;Set up Netlify DNS&lt;/strong&gt; te saldrá una pantalla como esta:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t5bpUd0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30uia0b65hzzgixcefm8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t5bpUd0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/30uia0b65hzzgixcefm8.png" alt="freenom__ntlfy_dns"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Simplemente le das a &lt;strong&gt;Verify&lt;/strong&gt;, ignora lo de &lt;strong&gt;Add DNS Records&lt;/strong&gt; y tocas en continuar y acá viene lo interesante:&lt;/p&gt;

&lt;p&gt;Te van a aparecer unos links raros, estos son los DNS que tenemos que agregar a nuestro dominio en freenom de la siguiente forma:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#agregando-los-dns-a-freenom"&gt;
  &lt;/a&gt;
  Agregando los DNS a Freenom
&lt;/h3&gt;

&lt;p&gt;Ve a la configuración de tu dominio y entra en &lt;strong&gt;Management Tools&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Nameservers&lt;/strong&gt; y seleccionas &lt;strong&gt;Use custom nameservers (enter below)&lt;/strong&gt; y rellenas con los DNS que Netlify te dio y le das a &lt;strong&gt;Change Nameservers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xLKuCYgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0k5xngdhzlo8jetuhdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xLKuCYgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v0k5xngdhzlo8jetuhdg.png" alt="freenom_dns"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Con eso &lt;strong&gt;¡ya tienes tu página con un dominio!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pero todavía sale que el sitio es No seguro&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lgV2tET---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3ve9q39x2ut2g3q410e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lgV2tET---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3ve9q39x2ut2g3q410e.png" alt="freenom_nosafe"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configurando-ssl"&gt;
  &lt;/a&gt;
  Configurando SSL
&lt;/h3&gt;

&lt;p&gt;En la configuración del proyecto en Netlify, ve al fondo de &lt;strong&gt;Domain management&lt;/strong&gt; y aquí presiona &lt;strong&gt;Verify DNS Configuration&lt;/strong&gt; y toca en &lt;strong&gt;Provision certificate&lt;/strong&gt; y listo, &lt;strong&gt;ya es seguro&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NbUlquU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/167eulnw5ol3q3a140gb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NbUlquU_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/167eulnw5ol3q3a140gb.png" alt="freenom_ntlfy_ssl"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;¡Ya tienes tu dominio listo!&lt;/strong&gt; Puedes compartir libremente tu proyecto con tu nuevo dominio.&lt;/p&gt;

&lt;p&gt;Pero ahora, te comenté que Netlify te permite crear subdominios a través de las ramas del repositorio. ¿Cómo se hace?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#subdominios-con-netlify"&gt;
  &lt;/a&gt;
  Subdominios con Netlify
&lt;/h2&gt;

&lt;p&gt;Gracias a que configuramos los DNS de Netlify en nuestro dominio, ahora podemos generar subdominios, algo como: &lt;code&gt;beta.github-finder-ga&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Para hacerlo es sencillo. Primero debes tener más de una rama (branch) en tu repositorio de Github, después sigue estos pasos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ve a al proyecto en netlify y ve a &lt;strong&gt;Site Settings&lt;/strong&gt;. Luego, en el menú de la izquierda, busca donde dice &lt;strong&gt;Build &amp;amp; deploy&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jtkyt8Cw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdo0ozhy7x7qv8v0aq1m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jtkyt8Cw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdo0ozhy7x7qv8v0aq1m.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ahí, bajas hasta donde dice &lt;strong&gt;Deploy contexts&lt;/strong&gt;. En esa parte tenemos que configurar los deploys de otras branches.&lt;br&gt;
Presiona &lt;strong&gt;Edit settings&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OSbmjjIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqwmbp3i5xpr1zqvhh0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OSbmjjIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iqwmbp3i5xpr1zqvhh0f.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;En la parte de Branch deploys, escoge la opción &lt;strong&gt;All&lt;/strong&gt;, y guardas.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ahora, haz un commit desde la nueva branch para que Netlify reconozca los cambios.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Regresa a la parte de &lt;strong&gt;Domain management&lt;/strong&gt; de tu proyecto y busca &lt;strong&gt;Branch subdomains&lt;/strong&gt; y presionas &lt;strong&gt;New subdomain&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ED-2z2Tb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/attnun2i0ktz4u1npicd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ED-2z2Tb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/attnun2i0ktz4u1npicd.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Agregas la branch y netlify generará el subdominio, y luego presiona &lt;strong&gt;Create subdomain&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;y...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ya-est%C3%A1"&gt;
  &lt;/a&gt;
  ¡Ya está!
&lt;/h3&gt;

&lt;p&gt;Puede tardar unas horas en que aplique, pero sí o sí estará disponible después de un rato&lt;/p&gt;

&lt;p&gt;Espero que te haya servido :D. &lt;strong&gt;Comparte aquí&lt;/strong&gt; en los comentarios el o los subdominios que has creado para echarle un ojo ;)&lt;/p&gt;

&lt;p&gt;Recuerda que puedes seguirnos aquí en dev.to y en Twitter como &lt;a href="https://twitter.com/"&gt;@doulovera&lt;/a&gt;&lt;/p&gt;

</description>
      <category>spanish</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to use SvelteKit with Netlify Forms</title>
      <author>swyx</author>
      <pubDate>Sun, 25 Apr 2021 22:28:24 +0000</pubDate>
      <link>https://dev.to/swyx/how-to-use-sveltekit-with-netlify-forms-5gmj</link>
      <guid>https://dev.to/swyx/how-to-use-sveltekit-with-netlify-forms-5gmj</guid>
      <description>&lt;p&gt;This is a direct answer to &lt;a href="https://github.com/sveltejs/kit/issues/942"&gt;this SvelteKit issue&lt;/a&gt;. I see a lot of JS developers struggle with using Netlify Forms, so I want to help.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-min-video-walkthru"&gt;
  &lt;/a&gt;
  9 Min Video Walkthru
&lt;/h2&gt;

&lt;p&gt;This is the video version of the instructions below.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cj3f2Xth5Mk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;Netlify Forms were designed primarily for traditional static site generators like Hugo and Jekyll, using HTML crawling to initialize forms. The idea is like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your static site is a folder of &lt;code&gt;.html&lt;/code&gt; files&lt;/li&gt;
&lt;li&gt;Netlify crawls all of them looking for &lt;code&gt;&amp;lt;form netlify&amp;gt;&lt;/code&gt; tags (or &lt;code&gt;&amp;lt;form data-netlify="true"&amp;gt;&lt;/code&gt;, because some projects like Create React App or Gatsby helpfully delete unrecognized attributes for you, what fun)&lt;/li&gt;
&lt;li&gt;For each detected tag, it sets up a dedicated "form" which is pretty much an append-only schemaless document store of all submissions.&lt;/li&gt;
&lt;li&gt;These are received via a special endpoint set up at the domain root (&lt;code&gt;/&lt;/code&gt;) looking for &lt;code&gt;POST&lt;/code&gt; requests with &lt;code&gt;"Content-Type": "application/x-www-form-urlencoded"&lt;/code&gt; (or with &lt;code&gt;multipart&lt;/code&gt; for file uploads)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Crucially: If no forms are detected, this feature doesn't work&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many JS framework users struggle to use them because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the form needs to exist in HTML at build time but JS frameworks render them at runtime. &lt;/li&gt;
&lt;li&gt;SvelteKit introduces another wrinkle in that you have to decide whether to prerender the form. &lt;/li&gt;
&lt;li&gt;JS framework users also often want to use AJAX to offer a better UX. So again you have to do things slightly differently than with pure HTML forms. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#optional-features-you-may-want"&gt;
  &lt;/a&gt;
  Optional Features You May Want
&lt;/h3&gt;

&lt;p&gt;What I cover here is just the simplest solution to help people solve the immediate pain point. You can also:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;leave your "helper form" hidden at build time and render the real form clientside&lt;/li&gt;
&lt;li&gt;upload files with Netlify Forms (underrated)&lt;/li&gt;
&lt;li&gt;do progressive enhancement of behavior from HTML to JS. &lt;/li&gt;
&lt;li&gt;For spam prevention, there is support for &lt;a href="https://docs.netlify.com/forms/spam-filters/"&gt;honeypot and recaptcha&lt;/a&gt;. See &lt;a href="https://github.com/sw-yx/gatsby-netlify-form-example-v2"&gt;demo apps&lt;/a&gt; for setup instructions.&lt;/li&gt;
&lt;li&gt;You can also &lt;a href="https://docs.netlify.com/functions/trigger-on-events/"&gt;trigger Netlify functions&lt;/a&gt; on successful submissions to do arbitrary logic (like notify you on Slack or create an account)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll come back and add that to this blogpost if I ever get the time. Pls &lt;a href="https://twitter.com/swyx/status/1386447885936390147"&gt;yell at me&lt;/a&gt; to indicate interest or i wont do it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltekit-setup-instructions"&gt;
  &lt;/a&gt;
  SvelteKit Setup Instructions
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#project-init"&gt;
  &lt;/a&gt;
  Project Init
&lt;/h3&gt;

&lt;p&gt;Go through the standard SvelteKit setup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init svelte@next myapp       
&lt;span class="nb"&gt;cd &lt;/span&gt;myapp
npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can set up GitHub/Netlify either thru CLI or UI - I found some &lt;a href="https://github.com/netlify/cli/issues/2229"&gt;bugs&lt;/a&gt; with Netlify CLI when I tried this but it might be fixed by the time you read this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# optional: set up git/github/netlify deploy via CLI&lt;/span&gt;
git init &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git add &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"hi"&lt;/span&gt;
gh repo create &lt;span class="c"&gt;# have the github cli installed&lt;/span&gt;
ntl init &lt;span class="c"&gt;# netlify cli&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or you can just use the UIs for each service&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-sveltekit-netlify-adapter"&gt;
  &lt;/a&gt;
  Add SvelteKit Netlify Adapter
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-D&lt;/span&gt; @sveltejs/adapter-netlify@next       
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then add it to &lt;code&gt;svelte.config.cjs&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@sveltejs/adapter-netlify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;kit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="c1"&gt;// currently the adapter does not take any options&lt;/span&gt;
        &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;prerender&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;crawl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;force&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then add a &lt;code&gt;netlify.toml&lt;/code&gt; file at project root:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[build]
  command = "npm run build"
  publish = "build/"
  functions = "functions/"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see these instructions in &lt;a href="https://github.com/sveltejs/kit/pull/1217"&gt;my netlify adapter docs&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-the-prerendered-form"&gt;
  &lt;/a&gt;
  Add the Prerendered Form
&lt;/h3&gt;

&lt;p&gt;Head to &lt;code&gt;/src/routes/index.svelte&lt;/code&gt; and add the form accordingly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;context=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prerender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;


&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome to SvelteKit&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Visit &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://kit.svelte.dev"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;kit.svelte.dev&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; to read the documentation&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;netlify&lt;/span&gt; &lt;span class="na"&gt;netlify-honeypot=&lt;/span&gt;&lt;span class="s"&gt;"bot-field"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"form-name"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"bot-field"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Your Name: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Your Email: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Message: &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Send&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deploy"&gt;
  &lt;/a&gt;
  Deploy
&lt;/h3&gt;

&lt;p&gt;Now you should be able to push to GitHub and have it build and render the form successfully.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/sw-yx/sveltekitnetlifyforms"&gt;https://github.com/sw-yx/sveltekitnetlifyforms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sveltekitnetlifyforms.netlify.app/"&gt;https://sveltekitnetlifyforms.netlify.app/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#screenshots"&gt;
  &lt;/a&gt;
  Screenshots
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxFoBf3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/116011598-83975d00-a658-11eb-8f1e-9140698fd22c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxFoBf3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/116011598-83975d00-a658-11eb-8f1e-9140698fd22c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9P3x2dS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/116011546-27343d80-a658-11eb-9a3e-862cbe61ea08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9P3x2dS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/116011546-27343d80-a658-11eb-9a3e-862cbe61ea08.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3qKJVtIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/116011560-3dda9480-a658-11eb-8954-fd8cf7160ae2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3qKJVtIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/116011560-3dda9480-a658-11eb-8954-fd8cf7160ae2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6AqB0V5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/116011573-564aaf00-a658-11eb-8f94-56c5ec824014.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6AqB0V5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6764957/116011573-564aaf00-a658-11eb-8f94-56c5ec824014.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#graveyard-ajax-example"&gt;
  &lt;/a&gt;
  Graveyard: AJAX Example
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning: this is untested code - I ran out of time but dumping it here anyway in case it helps someone&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you want an AJAX experience for your form here is some untested code I was working on that may help you get going:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;context=&lt;/span&gt;&lt;span class="s"&gt;"module"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prerender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;isSubmitting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myForm&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;isSubmitting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/x-www-form-urlencoded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Form successfully submitted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;isSubmitting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;myForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;isSubmitting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Welcome to SvelteKit&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
  Visit &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://kit.svelte.dev"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;kit.svelte.dev&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; to read the documentation
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt;
  &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;
  &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt;
  &lt;span class="na"&gt;on:submit=&lt;/span&gt;&lt;span class="s"&gt;{handleSubmit}&lt;/span&gt;
  &lt;span class="na"&gt;netlify&lt;/span&gt;
  &lt;span class="na"&gt;netlify-honeypot=&lt;/span&gt;&lt;span class="s"&gt;"bot-field"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"form-name"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"test"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"bot-field"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"opacity: 0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Your Name: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Your Email: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Message: &lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    {#if isSubmitting}
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Submitting&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    {:else}
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Send&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    {/if}
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>tutorial</category>
      <category>svelte</category>
      <category>netlify</category>
    </item>
    <item>
      <title>TheVECentre.com</title>
      <author>James Wallis</author>
      <pubDate>Sun, 25 Apr 2021 22:22:43 +0000</pubDate>
      <link>https://dev.to/jameswallis/thevecentre-com-29io</link>
      <guid>https://dev.to/jameswallis/thevecentre-com-29io</guid>
      <description>&lt;p&gt;The VECentre by Inner Sanctum Design is a virtual venue designed to reflect a live show, by artists for artists. It was created as a replacement for in-person art exhibitions, a major revenue stream for artists, that could no longer take place due to COVID-19 restrictions. Each exhibition is bespoke and results in a 3D tour that a user can navigate around. I was requested to develop a website and implement the tour hosting. &lt;a href="https://thevecentre.com"&gt;TheVECentre.com&lt;/a&gt; helps users find out more about The VECentre and provides an interface to access the virtual tours. The website was originally built for the Christmas 2020 tour.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2-jgndJ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hwns4og2o9z5bf37v47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2-jgndJ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9hwns4og2o9z5bf37v47.png"&gt;&lt;/a&gt;&lt;br&gt;The homepage
  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;My task was to work alongside Inner Sanctum Design to develop the website and organise the tour hosting platform. As such, the desktop version of the website had already been designed - all I needed to do was design a mobile version and build it in a responsive manner. I made a few usability changes such as making the header reduce in height when the user scrolls (to increase screen real estate). In addition, I was required to find a provider to host the tours and make them display on a &lt;code&gt;thevecentre.com/tour&lt;/code&gt; URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m9hfo5_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yeqyfjurmh7qtc16z0df.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9hfo5_W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yeqyfjurmh7qtc16z0df.png"&gt;&lt;/a&gt;&lt;br&gt;The tour selection page
  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-details"&gt;
  &lt;/a&gt;
  Technical Details
&lt;/h2&gt;

&lt;p&gt;TheVECentre.com is predominately built using &lt;a href="https://nextjs.org"&gt;Next.js&lt;/a&gt; and &lt;a href="https://tailwindcss.com/"&gt;Tailwind CSS&lt;/a&gt;. Two Next.js plugins, &lt;a href="https://github.com/garmeeh/next-seo"&gt;next-seo&lt;/a&gt; and &lt;a href="https://github.com/cyrilwanner/next-optimized-images"&gt;next-optimized-images&lt;/a&gt;, to handle the SEO orientated properties and optimise images for different device sizes respectively. Additionally, &lt;a href="https://react-icons.github.io/react-icons/"&gt;React Icons&lt;/a&gt; supplies any social icons, &lt;a href="https://www.emailjs.com/"&gt;EmailJS&lt;/a&gt; powers the contact form and &lt;a href="https://www.framer.com/motion"&gt;Framer Motion&lt;/a&gt; adds animations to the site. &lt;/p&gt;

&lt;p&gt;The tours are stored on &lt;a href="https://aws.amazon.com/s3/"&gt;AWS S3&lt;/a&gt; in a public bucket and are displayed in iframes. As the 3D software used to build the tours creates a social image, manifest and other assets, they are loaded into the website at build time. The result is that Inner Sanctum Design are able to change tour assets and the website will automatically pick up any changes. &lt;/p&gt;

&lt;p&gt;As a separate feature, I was asked to create a "guestbook" to enable visitors to review a tour and see previous visitors comments. The data is both saved to and read from a Google Sheet using the &lt;a href="https://www.npmjs.com/package/googleapis"&gt;Google APIs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dUDb-0rK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9km1apmrw9vjpdjnyww.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dUDb-0rK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9km1apmrw9vjpdjnyww.gif"&gt;&lt;/a&gt;&lt;br&gt;Scrolling through the homepage
  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/james-wallis/TheVECentre"&gt;The source code for TheVECentre.com is available on GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://thevecentre.com"&gt;Visit TheVECentre.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>react</category>
    </item>
    <item>
      <title>Setting Default Parameters for Your Functions</title>
      <author>Randy Rivera</author>
      <pubDate>Sun, 25 Apr 2021 22:14:57 +0000</pubDate>
      <link>https://dev.to/rthefounding/setting-default-parameters-for-your-functions-29pa</link>
      <guid>https://dev.to/rthefounding/setting-default-parameters-for-your-functions-29pa</guid>
      <description>&lt;p&gt;In order to help us create more flexible functions, ES6 introduces default parameters for functions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ex:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const increment = (number, value = 1) =&amp;gt;  number + value;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(increment(5)); will display 6
console.log(increment(5, 2)); will display 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the example above,  we added a default parameter so that it will add 1 to number if value is not specified. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Writing Arrow Functions with Parameters</title>
      <author>Randy Rivera</author>
      <pubDate>Sun, 25 Apr 2021 22:06:48 +0000</pubDate>
      <link>https://dev.to/rthefounding/writing-arrow-functions-with-parameters-573b</link>
      <guid>https://dev.to/rthefounding/writing-arrow-functions-with-parameters-573b</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Just like a regular function, you can pass arguments into an arrow function.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const double = (item) =&amp;gt; item * 2;
double(4);
double(4) would return the value 8.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;It is possible to pass more than one argument into an arrow function.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const myConcat = (arr1, arr2) =&amp;gt; arr1.concat(arr2);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(myConcat([1, 2, 3,], [4, 5])); will display [1, 2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Note:Java string concat() method concatenates multiple strings. This method appends the specified string at the end of the given string and returns the combined string. We can use concat() method to join more than one strings.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>devops</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Crypto miners are killing free CI</title>
      <author>Lyn Chen 🦄</author>
      <pubDate>Sun, 25 Apr 2021 22:06:45 +0000</pubDate>
      <link>https://dev.to/lyncozy/crypto-miners-are-killing-free-ci-4pii</link>
      <guid>https://dev.to/lyncozy/crypto-miners-are-killing-free-ci-4pii</guid>
      <description>&lt;p&gt;Originally published here: &lt;a href="https://layerci.com/blog/crypto-miners-are-killing-free-ci/"&gt;https://layerci.com/blog/crypto-miners-are-killing-free-ci/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CI providers like GitLab, TravisCI, and Shippable are all worsening or shutting down their free tiers due to cryptocurrency mining attacks.&lt;/p&gt;

&lt;p&gt;On September 1st, 2020, GitLab announced that their free CI offering was being restricted in response to "usage." Two months later, TravisCI announced that a similar restriction in response to "significant abuse."&lt;/p&gt;

&lt;p&gt;Concurrently with these pricing changes, the market capitalization of mineable cryptocurrencies has exploded.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sOeJZXUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jc9suxzzfcof06vjqauy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sOeJZXUt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jc9suxzzfcof06vjqauy.png" alt="crypto"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These events are related: As the market capitalization of cryptocurrency surged from $190 billion in January of 2020 to $2 trillion in April of 2021, it's become profitable for bad actors to make a full time job of attacking the free tiers of platform-as-a-service providers.&lt;/p&gt;

&lt;p&gt;717 GitHub commits in one month&lt;br&gt;
"testronan" is an avid Flask user. Every hour they make a commit to their only GitHub repository: "testronan/MyFirstRepository-Flask"&lt;/p&gt;

&lt;p&gt;The prolific programmer is certainly making sure that their contributions are well tested. Their repository contains configurations for five different CI providers: TravisCI, CircleCI, GitHub Actions, Wercker, and LayerCI.&lt;/p&gt;

&lt;p&gt;Seemingly quite proficient at shell scripting, their CI tasks run "listen.sh": A shell script that combines a complicated NodeJS script with some seemingly random numbers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yxbzQ-A2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pblcmwjf5n5kv4pamswu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yxbzQ-A2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pblcmwjf5n5kv4pamswu.png" alt="screenshot-layerci.com-2021.04.25-18_05_27"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;MyFirstRepository-Flask has nothing to do with Flask or webservers. It hosts cryptocurrency mining scripts that send WebDollars to an anonymous address. The numbers correspond to installation options for the NodeJS implementation of WebDollar&lt;/p&gt;

&lt;p&gt;The repository is not attacking GitHub directly, instead it abuses GitHub actions' "cron" feature to create a new commit every hour and mine WebDollars on four other CI providers.&lt;/p&gt;

&lt;p&gt;At WebDollar's April peak price of $.0005, the repository was making $77USD per month - a considerable sum in many countries, especially given that the only tools required are a laptop and an internet connection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7g04nPT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bn1dm0o77icoo0uaspm8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7g04nPT---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bn1dm0o77icoo0uaspm8.png" alt="cryptomining-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The two wallet addresses that receive these coins are:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.webdscan.io/address/WEBD%24gBJhmuwat3kvP2@%232E4K2zXX967grh9L43%24"&gt;https://www.webdscan.io/address/WEBD%24gBJhmuwat3kvP2@%232E4K2zXX967grh9L43%24&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.webdscan.io/address/WEBD%24gCszFRxzuMDbyNXnCXszoB2aIMSuV9kgbb%24"&gt;https://www.webdscan.io/address/WEBD%24gCszFRxzuMDbyNXnCXszoB2aIMSuV9kgbb%24&lt;/a&gt;&lt;br&gt;
Headless browser cryptocurrency mining&lt;br&gt;
"vippro99" is less subtle about their intentions. Out of dozens of repositories, most are related to cryptocurrency or browser automation.&lt;/p&gt;

&lt;p&gt;The nodejs-monney repository contains various scripts to start instances of chrome with the Google's popular puppeteer project.&lt;/p&gt;

&lt;p&gt;The idea is simple: Mining cryptocurrency directly in CI is somewhat easily detectable (with executable content analysis, for example) but browser automation is a common workload within CI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7M2_Ssj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsz5qhc7pqw747r4yi7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7M2_Ssj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qsz5qhc7pqw747r4yi7f.png" alt="screenshot-layerci.com-2021.04.25-18_03_34"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The referenced GitHub pages website contains a simple browser-based Monero miner, reminiscent of Coinhive.&lt;/p&gt;

&lt;p&gt;As of writing, the account is currently attacking JFrog's Shippable CI, which (perhaps relatedly) announced the end of its free tier earlier this year.&lt;/p&gt;

&lt;p&gt;"vippro99"'s comments indicate that they are in Vietnam. At the current price of Monero, each instance of their cryptocurrency miner on Shippable is giving $2.5USD per month, so maintaining a mere 60 concurrent instances would be equivalent to a full time job in that country.&lt;/p&gt;

&lt;p&gt;A solution for crypto&lt;br&gt;
Ethereum, the second most popular cryptocurrency, recently announced plans to fully disable computation-based mining as a way to earn new Ethereum, switching entirely to a proof-of-stake (POS) validation model.&lt;/p&gt;

&lt;p&gt;Beyond the environmental impact of traditional "proof of work" mining, there are externalities in many other fields like worldwide GPU shortages and attacks on free tiers of compute platforms like CI.&lt;/p&gt;

&lt;p&gt;Providers can do their best to enforce terms of service, but as long as it's profitable and untraceable to make such attacks, they will continue to become more sophisticated and circumvent measures. The only long-term way that we will continue to be able to enjoy free tiers on Heroku, Netlify, and GitHub are to switch away from proof-of-work.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>cybersecurity</category>
      <category>programming</category>
      <category>startup</category>
    </item>
  </channel>
</rss>
