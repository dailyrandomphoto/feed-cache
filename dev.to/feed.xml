<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title> üêßInstalling Ubuntu - A Step by Step guide üêß</title>
      <author>Kaiwalya Koparkar</author>
      <pubDate>Mon, 17 May 2021 13:44:59 +0000</pubDate>
      <link>https://dev.to/kaiwalyakoparkar/installing-ubuntu-a-step-by-step-guide-2b29</link>
      <guid>https://dev.to/kaiwalyakoparkar/installing-ubuntu-a-step-by-step-guide-2b29</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-this-tutorial-about-"&gt;
  &lt;/a&gt;
  üìå What is this tutorial about :
&lt;/h2&gt;

&lt;p&gt;In this tutorial we will be seeing how can we install Ubuntu on any computer with few easy steps. I am going to tell you the steps if you want to make Ubuntu your primary OS and wipe off everything available on your computer.&lt;br&gt;
If you are looking for dual boot, or live OS (in a USB stick) then that will be coming in the future blogs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-go-"&gt;
  &lt;/a&gt;
  üìå Let's Go :
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#0-requirements-"&gt;
  &lt;/a&gt;
  0. Requirements :
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Ensure you have at least 25 GB of free storage space or 5 GB for a minimal installation.&lt;/li&gt;
&lt;li&gt;Connect your laptop to a power.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#1-backup-"&gt;
  &lt;/a&gt;
  üö© 1. Backup :
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Taking backup is extremely essential.&lt;/li&gt;
&lt;li&gt;Take the backup of your images, videos, documents, etc.&lt;/li&gt;
&lt;li&gt;This is important because while installing ubuntu it will delete the entire thing that is available on the particular hard disk.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-installing-iso-file"&gt;
  &lt;/a&gt;
  üö© 2. Installing ISO file
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Now you need to download the latest stable version (LTS) of ubuntu.&lt;/li&gt;
&lt;li&gt;You can download it &lt;a href="https://ubuntu.com/download/desktop"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;It usually takes time to download depending on your internet speed and space in the disk.&lt;/li&gt;
&lt;li&gt;Make sure you have a stable internet connection&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-making-a-bootable-device"&gt;
  &lt;/a&gt;
  üö© 3. Making a bootable device.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You will need a DVD or USB stick for it (In this tutorial we will be done using a USB stick)&lt;/li&gt;
&lt;li&gt;You will need to download &lt;a href="https://rufus.ie/en_US/"&gt;Rufus&lt;/a&gt;. It is open-source software for making the drives bootable with almost any OS.&lt;/li&gt;
&lt;li&gt;After downloading and installing it. Open the software. It would look something like this.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rJ81dwHK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/581nkmld0ud9fbe827vo.jpg" alt="Rufus Starting"&gt;
&lt;/li&gt;
&lt;li&gt;Then perform the following steps

&lt;ul&gt;
&lt;li&gt;Plugin your USB stick. The software will automatically detect the USB drive. If not then select it from the &lt;strong&gt;Device&lt;/strong&gt; section.&lt;/li&gt;
&lt;li&gt;Then click on "&lt;strong&gt;Select&lt;/strong&gt;" in the &lt;strong&gt;Boot Section&lt;/strong&gt; and select your downloaded ISO file.&lt;/li&gt;
&lt;li&gt;Don't touch any other thing and click on &lt;strong&gt;Start&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;This will start the process and you will see the progress bar there.&lt;/li&gt;
&lt;li&gt;When it will show Ready in Green color (Like in the image below) then click &lt;strong&gt;Close to complete the process&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXCkw2K_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0jmnx3w6vui11xy6vpx.png" alt="Rufus Completed"&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-booting-the-computer"&gt;
  &lt;/a&gt;
  üö© 4. Booting the Computer:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You have to restart the computer and look for the initial message which tells how to enter the bios settings generally it appears by pressing &lt;code&gt;F10&lt;/code&gt; or &lt;code&gt;F12&lt;/code&gt; (This depends from computer to computer)&lt;/li&gt;
&lt;li&gt;Once you enter the bios settings. Your computer will automatically detect the plugged USB. If not the changing the booting sequence of the Hard disk with the USB.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#declaring-the-software-specs"&gt;
  &lt;/a&gt;
  üö© Declaring the software specs
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Now after the Ubuntu Loader you will see a screen like this :
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V4mFU9sO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/euxl211ub480t198t45p.png" alt="1st screen image"&gt;
&lt;/li&gt;
&lt;li&gt;Now you can select &lt;strong&gt;Normal Installation&lt;/strong&gt; or &lt;strong&gt;Minimal Installation&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;If you want to make this process less time consuming then select &lt;strong&gt;Minimal Installation&lt;/strong&gt; (You can download the software afterward)&lt;/li&gt;
&lt;li&gt;After that checkmark, both &lt;strong&gt;Download Updates while installing Ubuntu&lt;/strong&gt; &amp;amp; &lt;strong&gt;Install third-party software for graphics and Wi-Fi hardware and additional media formats&lt;/strong&gt; trust me they are very important&lt;/li&gt;
&lt;li&gt;And then click on &lt;strong&gt;Continue&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#erasing-the-old-stuff"&gt;
  &lt;/a&gt;
  üö© Erasing the old stuff
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;After clicking &lt;strong&gt;Continue&lt;/strong&gt; from the last window. you will come to this 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0QwXx94D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g8huw6u36p9qhej62hgp.png" alt="Screen 2 Ubuntu"&gt;
&lt;/li&gt;
&lt;li&gt;Select the &lt;strong&gt;Erase disk and install Ubuntu&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;And click &lt;strong&gt;Install Now&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;You will get a confirmation pop-up like this:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQW82pcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0g0smidub0hmk2m54h5t.png" alt="Screen 3 Ubuntu"&gt;
&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Continue&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#selecting-the-time-zone"&gt;
  &lt;/a&gt;
  üö© Selecting the time zone
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;After some time you will be shown a window like this\
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVWgupfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wtlxvam40aapacuag8k.png" alt="Screen 4 Ubuntu"&gt;
&lt;/li&gt;
&lt;li&gt;Select your timezone and click on &lt;strong&gt;Continue&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#login-and-authentication"&gt;
  &lt;/a&gt;
  üö© Login and Authentication
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Now you will come to the window like this:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W7Zr6XGn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zf4c4e922jr2cdohiub.png" alt="Screen 5 Ubuntu"&gt;
&lt;/li&gt;
&lt;li&gt;Add your Name, Computer's name, Nickname (username), Password.&lt;/li&gt;
&lt;li&gt;And click on &lt;strong&gt;Continue&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  üö© Installation
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;After this, you will find a screen like this:
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zi8JEm7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dr5j59pyws4dun9d4iyy.png" alt="Screen 6 Ubuntu"&gt;
&lt;/li&gt;
&lt;li&gt;Now you are at the last stage of the installation. &lt;/li&gt;
&lt;li&gt;Grab a drink and hang around because there is nothing you can do here.&lt;/li&gt;
&lt;li&gt;It takes a bit longer depending on your computer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#done-"&gt;
  &lt;/a&gt;
  üö© Done !!
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Now you will find the screen like this :
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gwRUfSIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50k0sg6pqgdwmn50bq7r.jpg" alt="Screen 7 Ubuntu"&gt;
&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Restart Now&lt;/strong&gt; and wait for some time to get your system restart. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üìå Now Enjoy your newly installed Operating system.!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  ‚ù§Ô∏è Thank you for reading ‚ù§Ô∏è
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;üåè Like | Follow | Share üåè&lt;/strong&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Automate Backup database SQL Server in docker container.</title>
      <author>Pobx</author>
      <pubDate>Mon, 17 May 2021 13:17:41 +0000</pubDate>
      <link>https://dev.to/pobx/automate-backup-database-sql-server-in-docker-container-oea</link>
      <guid>https://dev.to/pobx/automate-backup-database-sql-server-in-docker-container-oea</guid>
      <description>&lt;p&gt;Hi, everyone. This is first my post in dev.to and my first time for write article in second language. today I want to share some trick for backup your database from docker container. let's begin... :)&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt; I assume your already running container. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-write-tsql-for-backup-your-database"&gt;
  &lt;/a&gt;
  1. Write T-SQL for backup your database.
&lt;/h3&gt;

&lt;p&gt;For example I use TutorialDB database for demonstrate purpose. Your can create same database click &lt;a href="https://docs.microsoft.com/en-us/sql/azure-data-studio/quickstart-sql-server?view=sql-server-ver15#create-a-database"&gt;Create a database&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PRINT "Start Backup process...";
DECLARE @MyFileName varchar(200)
SELECT @MyFileName=N'/tmp/Backup_' + convert(nvarchar(20),GetDate(),112)+'_'+convert(nvarchar(20),GetDate(),108)+ '.bak'
BACKUP DATABASE [TutorialDB] TO DISK=@MyFileName
PRINT "Finished backup process...";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then save above T-SQL to backup-database.sql&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-copy-backupdatabasesql-file-to-your-container"&gt;
  &lt;/a&gt;
  2. Copy backup-database.sql file to your container.
&lt;/h3&gt;

&lt;p&gt;For example I just copy it to tmp directory. You can copy it to any your directory.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qdvzy8y5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwiuc0jggck83goacj1u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qdvzy8y5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwiuc0jggck83goacj1u.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Then go inside container and see in tmp directory as below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NG-mzfLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw5e3z8anxenfrs62tzw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NG-mzfLC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tw5e3z8anxenfrs62tzw.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-update-packages-list-to-new-version"&gt;
  &lt;/a&gt;
  3. Update packages list to new version.
&lt;/h3&gt;

&lt;p&gt;Go inside your container by docker exec cli as below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X3E1UCZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27l83eru4ept5gmu5cfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X3E1UCZa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27l83eru4ept5gmu5cfl.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Note&lt;/strong&gt; You need to use --user root (option) for update package list.&lt;br&gt;
Now, update package list by apt-get update -y as below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wgcjEiBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5zisiqcobmgvzat2y41.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wgcjEiBb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n5zisiqcobmgvzat2y41.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Then you will installing 2 package such as vim and cron as below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OdNrJESv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u67zj8nurlnvl0hnrjku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OdNrJESv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u67zj8nurlnvl0hnrjku.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EMIR8Rse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2mmleibq9yok9i8a8gl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EMIR8Rse--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s2mmleibq9yok9i8a8gl.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-add-sqlcmd-cli-to-crontab-by-cron-e-cli-as-below"&gt;
  &lt;/a&gt;
  4. Add sqlcmd cli to crontab by cron -e cli as below
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g7iGvuvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/leod92unp5vtvhi0k8zz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g7iGvuvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/leod92unp5vtvhi0k8zz.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
For example above configuration is running backup-database.sql every 1 minute. Keep in mind it's just example for show how it work. Next you want to restart crontab for start your schedule job like this&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lMyry2LT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtuk50cojg5apimviz7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lMyry2LT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtuk50cojg5apimviz7c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-see-log-by-tail-f-tmpdailybackuplog-amp-bak-files"&gt;
  &lt;/a&gt;
  5. see log by tail -f /tmp/daily-backup.log &amp;amp; .bak files.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E_oKNobc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sgtut8xpcfvvh3101gu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E_oKNobc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6sgtut8xpcfvvh3101gu.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WS8MB7eH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbagw2p288kyzsbsf50e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WS8MB7eH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbagw2p288kyzsbsf50e.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Until we meet again. Thank you&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>sql</category>
      <category>linux</category>
      <category>docker</category>
    </item>
    <item>
      <title>Animatly.io the platform for animated Icons and Illustrations</title>
      <author>Animatly.io</author>
      <pubDate>Mon, 17 May 2021 13:00:04 +0000</pubDate>
      <link>https://dev.to/animatlio/animatly-io-the-platform-for-animated-icons-and-illustrations-2jo0</link>
      <guid>https://dev.to/animatlio/animatly-io-the-platform-for-animated-icons-and-illustrations-2jo0</guid>
      <description>&lt;p&gt;Animatly is a platform for designers and developers where you can download and customize animated icons and illustrations. If you now wonder why to use animated icons and illustrations, I suggest you to read this article: &lt;a href="https://dev.to/animatlio/how-lottie-animations-can-improve-your-design-5cga"&gt;https://dev.to/animatlio/how-lottie-animations-can-improve-your-design-5cga&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Animatly is based on Lottie animations. Animatly stands for the easy way to customize and download animations in the fastest way possible. Compared to other platforms, you can change the color of the whole icon library with only one click. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--khgE6pOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8tlugs8nrdm9sw9cg08.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--khgE6pOJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8tlugs8nrdm9sw9cg08.png" alt="Animatly Screen"&gt;&lt;/a&gt;&lt;br&gt;
According to the color, you can also change the stroke size of each icon. To make this possible you need to add some parameters already in After Effects. That's why it only works for Animatly icons. For the best workflow, you download the SVG, for your design program and at the same time download the JSON file to hand it to your developer. Make sure you hand him the JSON and not the HTML file. The HTML is only for previewing the animation. You also have the option to convert the Lottie to a GIF but it will take quite some time. When you click on Edit you will get more options to perfect the animation for your needs. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MNX6HX8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx6fjjqxxbzpu17jamra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MNX6HX8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vx6fjjqxxbzpu17jamra.png" alt="Animatly Editor"&gt;&lt;/a&gt;&lt;br&gt;
To save an animation you can hit the like button and it will be stored in your account. &lt;/p&gt;

&lt;p&gt;Animatly is specialized in perfectly looped animations. Compared to other platforms Animatly is mainly made for animations that should fit your normal screen behavior. That means that you can use them instead of your normal static icons and illustrations. The animation style is very slow and made to not interrupt the user in his experience. They are just perfect for feature sections.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W31S15uY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmr2quzwvq2r54a1dsu1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W31S15uY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmr2quzwvq2r54a1dsu1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Many big Agnecys have gone from static icons to animated ones in the past few years. It became more than just a trend. Even Stripe (one of the biggest payment providers in the world) is using animated icons naturally in their screen design. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hXXrk0q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4ivo9nrpc193mkvoxvq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXXrk0q9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v4ivo9nrpc193mkvoxvq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
If you still think animated icons are not necessary, then any help comes too late. &lt;/p&gt;

&lt;p&gt;No wait.. maybe there is something else I can impress you with. We haven't talked about animated illustrations yet. Animated illustrations are even rarer than animated icons. Animatly belongs to the biggest consistent libraries in the world for animated illustrations. They are even more satisfying than animated icons. Animatly has an illustration for every situation. And if there are missing some they will be created very soon. The Editor of the illustrations is even more iconic.&lt;br&gt;
 &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a5OIt2ex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j5fzivvv6v7p750pgyk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a5OIt2ex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j5fzivvv6v7p750pgyk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
You can change every color of the animation in a very easy way. If you hover over a color field the color on the illustration will start to blink in black and white. You are able to match the colors of the animation to your CI/CD within a few seconds. You will get all of that for an insane price of just 15$. With buying a license you definitely can't go wrong. &lt;a href="https://animatly.io/"&gt;https://animatly.io/&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>ux</category>
      <category>javascript</category>
      <category>libraries</category>
    </item>
    <item>
      <title>UML diagram for GoF design pattern examples in TypeScript</title>
      <author>Takaaki Teshima</author>
      <pubDate>Mon, 17 May 2021 12:44:33 +0000</pubDate>
      <link>https://dev.to/takaakit/uml-diagram-for-gof-design-pattern-examples-in-typescript-46d5</link>
      <guid>https://dev.to/takaakit/uml-diagram-for-gof-design-pattern-examples-in-typescript-46d5</guid>
      <description>&lt;p&gt;This post lists UML diagrams of GoF design pattern examples written in TypeScript.  The UML diagrams are displayed using &lt;em&gt;Diagram Map&lt;/em&gt;. If you want to know about &lt;em&gt;Diagram Map&lt;/em&gt;, see &lt;a href="https://dev.to/takaakit/diagram-map-tracing-uml-sysml-elements-across-diagrams-49i7"&gt;this post&lt;/a&gt;. Also, you can get UML model data and TypeScript code of the examples from &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript"&gt;here&lt;/a&gt;.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Behavioral Patterns

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chain-of-responsibility"&gt;Chain of Responsibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#command"&gt;Command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#interpreter"&gt;Interpreter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#iterator"&gt;Iterator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mediator"&gt;Mediator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#memento"&gt;Memento&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#observer"&gt;Observer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#state"&gt;State&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#strategy"&gt;Strategy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#template-method"&gt;Template Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#visitor"&gt;Visitor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Creational Patterns

&lt;ul&gt;
&lt;li&gt;&lt;a href="#abstract-factory"&gt;Abstract Factory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#builder"&gt;Builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#factory-method"&gt;Factory Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prototype"&gt;Prototype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#singleton"&gt;Singleton&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Structural Patterns

&lt;ul&gt;
&lt;li&gt;&lt;a href="#adapter"&gt;Adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bridge"&gt;Bridge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#composite"&gt;Composite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#decorator"&gt;Decorator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#facade"&gt;Facade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flyweight"&gt;Flyweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#proxy"&gt;Proxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#links"&gt;Links&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#chain-of-responsibility"&gt;
  &lt;/a&gt;
  Chain of Responsibility &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
A trouble is turned around among supporters, and the trouble will be handled by the supporter who can handle it. There are four types of supporters below:

&lt;ul&gt;
&lt;li&gt;LazySupporter doesn't handle any trouble&lt;/li&gt;
&lt;li&gt;MoodySupporter handles odd ID troubles&lt;/li&gt;
&lt;li&gt;SpecialSupporter handles a trouble of the target ID.&lt;/li&gt;
&lt;li&gt;LimitedSupporter handles troubles below the limit ID.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NDncbtSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/chain-of-responsibility/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NDncbtSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/chain-of-responsibility/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/chain-of-responsibility"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/9zk4faog/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/chain-of-responsibility/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#command"&gt;
  &lt;/a&gt;
  Command &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Encapsulate a request as an object, thereby letting you parametrize clients with different requests, queue or log requests, and support undoable operations (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Simple drawing application:

&lt;ul&gt;
&lt;li&gt;Draw a path with points by dragging the mouse.&lt;/li&gt;
&lt;li&gt;Revert to one previous drawing by pressing the Undo button.&lt;/li&gt;
&lt;li&gt;Erase all drawing by pressing the Clear button.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--60vAkUgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/command/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60vAkUgV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/command/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/command"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/6b4nvscm/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/command/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#interpreter"&gt;
  &lt;/a&gt;
  Interpreter &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
An interpreter for mini language to operate radio controlled car. It parses the following syntax composed of "forward", "left", "right", and "repeat" commands:&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;program&amp;gt;      ::= program &amp;lt;command list&amp;gt;
&amp;lt;command list&amp;gt; ::= &amp;lt;command&amp;gt;* end
&amp;lt;command&amp;gt;      ::= &amp;lt;repeat&amp;gt; | &amp;lt;action&amp;gt;
&amp;lt;repeat&amp;gt;       ::= repeat &amp;lt;number&amp;gt; &amp;lt;command list&amp;gt;
&amp;lt;action&amp;gt;       ::= forward | right | left
&amp;lt;number&amp;gt;       ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--joHF-5OQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/interpreter/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--joHF-5OQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/interpreter/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/interpreter"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/5f9u1Lmy/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/interpreter/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#iterator"&gt;
  &lt;/a&gt;
  Iterator &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Add books in a bookshelf and display the names of the book in turn.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EHfkmpDn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/iterator/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EHfkmpDn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/iterator/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/iterator"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/r20hcqzg/5//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/iterator/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#mediator"&gt;
  &lt;/a&gt;
  Mediator &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Show a login dialog for entering a username and password. The dialog has the following elements:

&lt;ul&gt;
&lt;li&gt;"Guest" and "Login" radio buttons&lt;/li&gt;
&lt;li&gt;"Username" and "Password" text fields&lt;/li&gt;
&lt;li&gt;"OK" and "Cancel" buttons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And change the editable properties of the elements depending on the state of the radio buttons and text fields.&lt;/p&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y4Jj7rj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/mediator/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y4Jj7rj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/mediator/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/mediator"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/kdgw0var/5//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/mediator/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#memento"&gt;
  &lt;/a&gt;
  Memento &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Without violating encapsulation, capture and externalize an object's internal state so that the object can be returned to this state later (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
A dice game in which money increases and decreases:

&lt;ul&gt;
&lt;li&gt;A gamer shakes a dice and the number determine the next state.&lt;/li&gt;
&lt;li&gt;If the number of dice is even, gamer's money doubles, and if it is odd, gamer's money is halved.&lt;/li&gt;
&lt;li&gt;If the gamer's money is less than half of the highest amount, it returns to the highest amount.&lt;/li&gt;
&lt;li&gt;The game is repeated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HDjOTrtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/memento/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HDjOTrtF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/memento/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/memento"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/udwzpn2a/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/memento/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#observer"&gt;
  &lt;/a&gt;
  Observer &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Observers observe a Subject object holding a numerical value and display the value. The display formats are digits and bar charts.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fgj3IpCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/observer/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fgj3IpCe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/observer/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/observer"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/a5md90gz/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/observer/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#state"&gt;
  &lt;/a&gt;
  State &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Allow an object to alter its behavior when its internal state changes. The object will appear to change its class (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Safe security system that the security status changes with time. When you press a button in a dialog, the message displayed will change depending on whether the time is day or night. The internal time of the dialog advances one hour for every second of real time.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yVUgzdqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/state/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yVUgzdqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/state/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/state"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/L3yhe8of/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/state/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#strategy"&gt;
  &lt;/a&gt;
  Strategy &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from the clients that use it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
A game of rock-scissors-paper. Two strategies are available:

&lt;ul&gt;
&lt;li&gt;Random Strategy: showing a random hand signal.&lt;/li&gt;
&lt;li&gt;Mirror Strategy: showing a hand signal from the previous opponent's hand signal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g_43RJh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/strategy/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g_43RJh4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/strategy/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/strategy"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/kyLve8go/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/strategy/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#template-method"&gt;
  &lt;/a&gt;
  Template Method &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define the skeleton of an algorithm in an operation, deferring some steps to client subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a character or string repeatedly 5 times.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dJR_DVRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/template-method/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dJR_DVRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/template-method/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/template-method"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/bcnt8qra/6//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/template-method/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#visitor"&gt;
  &lt;/a&gt;
  Visitor &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Visitor visits the file system composed of files and directories, and displays a list of files/directories.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VoHMtSPw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/visitor/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VoHMtSPw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/visitor/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/behavioral-patterns/visitor"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/c24b3rda/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/behavioral-patterns/visitor/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#abstract-factory"&gt;
  &lt;/a&gt;
  Abstract Factory &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide an interface for creating families of related or dependent objects without specifying their concrete classes (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Create a hierarchical link collection as an HTML file. It can be created in either tabular or list format.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_38lZ1Pm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/abstract-factory/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_38lZ1Pm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/abstract-factory/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/creational-patterns/abstract-factory"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/ews91mcL/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/abstract-factory/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#builder"&gt;
  &lt;/a&gt;
  Builder &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Separate the construction of a complex object from its representation so that the same construction process can create different representations (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Create documents in HTML format and text format. It is possible to create different documents in the same construction process.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D5_8zQEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/builder/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D5_8zQEe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/builder/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/creational-patterns/builder"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/fra9yu5m/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/builder/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#factory-method"&gt;
  &lt;/a&gt;
  Factory Method &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
The subject is a factory to make credit cards. The Factory defines how to create an credit card, but the actual credit card is created by the CreditCardFactory. The "createProduct()" is called a Factory Method, and it is responsible for manufacturing an object.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d7wfkC-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/factory-method/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d7wfkC-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/factory-method/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/creational-patterns/factory-method"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/rfg8t4dx/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/factory-method/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#prototype"&gt;
  &lt;/a&gt;
  Prototype &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a string enclosed with a frame line, or drawn with an underline. The Client (Main) registers instances of the Display subclass in the Manager class. When necessary, the Manager class asks those registered instances to return a clone. The Client (Main) requires the returned clones to display.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oA_fDy7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/prototype/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oA_fDy7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/prototype/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/creational-patterns/prototype"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/p8z5dasv/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/prototype/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#singleton"&gt;
  &lt;/a&gt;
  Singleton &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Ensure a class has only one instance, and provide a global point of access to it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Check whether the same instance is obtained.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EXH0S7nE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/singleton/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EXH0S7nE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/singleton/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/creational-patterns/singleton"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/3o9xz8mh/2//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/creational-patterns/singleton/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#adapter"&gt;
  &lt;/a&gt;
  Adapter &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn't otherwise because of incompatible interfaces (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display the given string as follows&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-- Nice to meet you --
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;or display it as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[[ Nice to meet you ]]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aBBVtKUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/adapter/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aBBVtKUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/adapter/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/structural-patterns/adapter"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/huscqp84/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/adapter/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#bridge"&gt;
  &lt;/a&gt;
  Bridge &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Decouple an abstraction from its implementation so that the two can vary independently (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display only one line or display the specified number of lines.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OhH2F7xc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/bridge/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OhH2F7xc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/bridge/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/structural-patterns/bridge"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/3t7uy2av/5//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/bridge/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#composite"&gt;
  &lt;/a&gt;
  Composite &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Compose objects into tree structures to represent whole-part hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Represents a file system composed of files and directories. FileSystemElement makes it possible to treat File and Directory uniformly.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J820_Fxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/composite/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J820_Fxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/composite/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/structural-patterns/composite"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/9wsxz4Lb/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/composite/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#decorator"&gt;
  &lt;/a&gt;
  Decorator &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a string with decorative frames. The frames can be combined arbitrarily.

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y1a9MPHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/decorator/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y1a9MPHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/decorator/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/structural-patterns/decorator"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/qu769pxy/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/decorator/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#facade"&gt;
  &lt;/a&gt;
  Facade &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Create a simple homepage through a Facade (PageCreator). The Facade gets info from the DataLibrary and uses the info to create an HTML file.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BMWGbYm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/facade/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BMWGbYm_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/facade/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/structural-patterns/facade"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/gzp6c89d/5//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/facade/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#flyweight"&gt;
  &lt;/a&gt;
  Flyweight &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Use sharing to support large numbers of fine-grained objects efficiently (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Display a string consisting of large characters (0-9 digits only). Large character objects are not created until they are needed. And the created objects are reused.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9sSpY3Lc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/flyweight/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9sSpY3Lc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/flyweight/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/structural-patterns/flyweight"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/5su60q8b/3//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/flyweight/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#proxy"&gt;
  &lt;/a&gt;
  Proxy &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;
  &lt;strong&gt;Pattern Intent&lt;/strong&gt;
  &lt;br&gt;
Provide a surrogate or placeholder for another object to control access to it (Design Patterns: Elements of Reusable Object-Oriented Software).&lt;br&gt;


&lt;/p&gt;

&lt;p&gt;
  &lt;strong&gt;About This Example&lt;/strong&gt;
  &lt;br&gt;
Print on a named printer. Setting and changing the printer name is done by Proxy (ProxyPrinter). At the time of printing, create an instance of the RealSubject (RealPrinter) for the first time.  

&lt;p&gt;Execution Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_0k8tYtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/proxy/ExecutionResult.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_0k8tYtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/proxy/ExecutionResult.png%3Fraw%3Dtrue" alt="Execution Result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TypeScript Code: &lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript/tree/master/structural-patterns/proxy"&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;



&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/takaakit2021/sfvo96k3/4//embedded/result//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;a href="https://htmlpreview.github.io/?https://github.com/takaakit/uml-diagram-for-typescript-design-pattern-examples/blob/master/structural-patterns/proxy/DiagramMap.html"&gt;Open the diagram in full screen&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Gamma, E. et al. Design Patterns: Elements of Reusable Object-Oriented Software, Addison-Wesley, 1994&lt;/li&gt;
&lt;li&gt;Hiroshi Yuki. Learning Design Patterns in Java [In Japanese Language], Softbank publishing, 2004&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links &lt;a&gt;&lt;/a&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/takaakit/diagram-map-tracing-uml-sysml-elements-across-diagrams-49i7"&gt;Diagram Map: tracing UML/SysML elements across diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/takaakit/design-pattern-examples-in-typescript"&gt;Design Pattern Examples in TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>uml</category>
      <category>gof</category>
      <category>designpatterns</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Call Screen Glass UI Using HTML &amp; CSS</title>
      <author>Innocent Coder</author>
      <pubDate>Mon, 17 May 2021 12:44:26 +0000</pubDate>
      <link>https://dev.to/innocentcoder/call-screen-glass-ui-using-html-css-1ifl</link>
      <guid>https://dev.to/innocentcoder/call-screen-glass-ui-using-html-css-1ifl</guid>
      <description>&lt;p&gt;If you're hearing the term "Glassmorpism" for the first time, well... It only just got my attention a few hours before this post so, What is glassmorphism?&lt;/p&gt;

&lt;p&gt;Glassmorphism is a new trend which is getting more traction on websites like Dribble, Behance etc and I've seen a couple of awesome designs made using this trendy UI.&lt;/p&gt;

&lt;p&gt;Here We Have Call Screen Design Using HTML And CSS.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5TQtM2rn67E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code:-&lt;/strong&gt; &lt;a href="https://www.websitemakers.xyz/2021/05/call-phone-glass-ui-using-html-css.html"&gt;https://www.websitemakers.xyz/2021/05/call-phone-glass-ui-using-html-css.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTML Code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section&amp;gt;
        &amp;lt;div class="card"&amp;gt;
            &amp;lt;div class="face"&amp;gt;
                &amp;lt;h3&amp;gt;Innocent Coder&amp;lt;/h3&amp;gt;
                &amp;lt;h6&amp;gt;mobile&amp;lt;/h6&amp;gt;
                &amp;lt;div class="icon-content"&amp;gt;
                    &amp;lt;div style="text-align: center;"&amp;gt;
                        &amp;lt;i class="far fa-clock"&amp;gt;&amp;lt;/i&amp;gt;
                        &amp;lt;h5&amp;gt;Remind me&amp;lt;/h5&amp;gt;
                    &amp;lt;/div&amp;gt;
                    &amp;lt;div style="text-align: center;"&amp;gt;
                        &amp;lt;i class="fas fa-comment"&amp;gt;&amp;lt;/i&amp;gt;
                        &amp;lt;h5&amp;gt;Message&amp;lt;/h5&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;div class="slide-content"&amp;gt;
                    &amp;lt;h5&amp;gt;Slide to answer &amp;gt;&amp;lt;/h5&amp;gt;
                &amp;lt;/div&amp;gt;        
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;CSS Code&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@200;300;400;500;600&amp;amp;display=swap');
*{
    margin: 0;
    padding: 0;
    font-family: 'Poppins', sans-serif;
}
body{
    overflow: hidden;
    color: #fff;
}
section{
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #1c1c25;
    height: 100vh;
}
section::before,
.card::before{
    content: '';
    position: absolute;
    width: 170px;
    height: 170px;
    background: linear-gradient(#f00, #f0f);
    border-radius: 50%;
}
section::before{
    top: 3%;
    left: 55%;
}
.card::before{
    bottom: 2%;
    left: 31%;
    background: linear-gradient(#0098f0, #0457d3);
}

.face{
    width: 250px;
    height: 485px;
    border-radius: 20px;
    box-shadow: 0 15px 35px rgba(0,0,0,0.5);
    background-color: rgba(255,255,255,0.05);
    filter: blur(0.2px);
    border-width: 0.1px;
    border-style: solid;
    border-color: rgba(255, 255, 255, 0.425);
}
.slide-content{
    width: 120px;
    height: 15px;
    padding: 12px 20px;
    border-radius: 20px;
    box-shadow: 0 15px 35px rgba(0,0,0,0.5);
    background-color: rgba(255,255,255,0.05);
    text-align: center;
    margin: 30px auto;
    cursor: pointer;
}
.face h3{

    font-weight: 300;
    font-size: 20px;
    text-align: center;
    margin-top: 100px;
}
.face h6{
    font-weight: 300;
    font-size: 12px;
    text-align: center;
    letter-spacing: 1px;
}
.icon-content{
    margin-top: 180px;
    padding: 0 30px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}
.icon-content i{
    font-size: 14px;

}
h5{
    font-weight: 400;
    font-size: 11px;
    letter-spacing: 0.5px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:-&lt;/strong&gt; visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/innocentcoder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGJ5NE5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ICZsIDfS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620705/764eb964-ecd2-4875-90c2-142dfc2f639c.jpg" alt="innocentcoder image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/innocentcoder/7-rare-website-with-awesome-free-fonts-3dfg" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 rare website with awesome free fonts&lt;/h2&gt;
      &lt;h3&gt;Innocent Coder „Éª May 15 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#flutter&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What exactly are SYMBOLS in Javascript ? </title>
      <author>Sumanth</author>
      <pubDate>Mon, 17 May 2021 12:43:06 +0000</pubDate>
      <link>https://dev.to/movingmelody/what-exactly-are-symbols-in-javascript-5a13</link>
      <guid>https://dev.to/movingmelody/what-exactly-are-symbols-in-javascript-5a13</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1-what-is-a-symbol-in-javascript-js-symbols-grand-tour"&gt;
  &lt;/a&gt;
  1. What is a &lt;strong&gt;Symbol&lt;/strong&gt; in Javascript ? JS Symbols Grand Tour
&lt;/h3&gt;

&lt;p&gt;A primitive data of Javascript, along with String, Number (Integers, Floats, Infinity, NaN), Boolean, null, and undefined. And it represents a "unique" Identifier. Introduced in ECMAScript 2015, ES6.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-how-raw-symbols-endraw-can-be-used-"&gt;
  &lt;/a&gt;
  2. How &lt;code&gt;symbols&lt;/code&gt; can be used ?
&lt;/h2&gt;

&lt;p&gt;They bring a few benefits to the language and are particularly useful when used as object &lt;strong&gt;properties&lt;/strong&gt;. But, what can they do for us that strings cannot? Usually, we use &lt;strong&gt;strings&lt;/strong&gt; as object properties.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#birds-eye-view"&gt;
  &lt;/a&gt;
  Bird's Eye View
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Once you create a symbol, its value is kept private and for internal use.&lt;/li&gt;
&lt;li&gt;You create a symbol by calling the &lt;code&gt;Symbol()&lt;/code&gt; global factory function.&lt;/li&gt;
&lt;li&gt;Every time you invoke &lt;code&gt;Symbol()&lt;/code&gt; we get a new and unique symbol, guaranteed to be different from all other symbols
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Symbols are used to identify Object Properties.&lt;/li&gt;
&lt;li&gt;And to avoid name clashing btw properties, since no symbol is equal to another.&lt;/li&gt;
&lt;li&gt;Symbols are not enumerated, which means that they do not get included in a for..of or for..in loop ran upon an object.&lt;/li&gt;
&lt;li&gt;Symbols are not part of the &lt;code&gt;Object.keys()&lt;/code&gt; or &lt;code&gt;Object.getOwnPropertyNames()&lt;/code&gt; result.&lt;/li&gt;
&lt;li&gt;You can access all the symbols assigned to an object using the &lt;code&gt;Object.getOwnPropertySymbols()&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;Or to add properties that the user cannot overwrite, intentionally or without realizing.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Flavio&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;//'Sumanth'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RUN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;RUN&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Person is running&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;RUN&lt;/span&gt;&lt;span class="p"&gt;]())&lt;/span&gt; &lt;span class="c1"&gt;//'Person is running'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#creating-symbols"&gt;
  &lt;/a&gt;
  Creating Symbols
&lt;/h3&gt;

&lt;p&gt;A value of this type can be created using &lt;code&gt;Symbol()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// here id is the new symbol&lt;/span&gt;
&lt;span class="nx"&gt;consolo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Symbol()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since a &lt;code&gt;symbol&lt;/code&gt; is a primitive value, if you attempt to create a symbol using the new operator, you will get an error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// TypeError&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Totally acceptable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also give symbol a description in string format as a first argument while instantiating a Symbol and it is optional and it doesn't affect the symbol itself.&lt;/p&gt;

&lt;p&gt;This description is mostly useful for debugging purpose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// without description&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstname&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// symbol with desc "firstname"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Symbol("firstname")&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "firstname"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Symbol()&lt;/code&gt; function creates a new unique value each time you call it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;s2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even if we give the same &lt;strong&gt;description&lt;/strong&gt; to different symbols they are totally different and that's why Symbol is a unique Identifier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;debug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;debug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;debug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;id2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sumanth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// primitive type string&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sumanth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#why-symbols-are-introduced"&gt;
  &lt;/a&gt;
  Why Symbols are Introduced
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Basically, primitive values are &lt;strong&gt;Immutable&lt;/strong&gt;. They can't be changed. Of course, a variable with a primitive assigned can be reassigned. For example, when you write the code let x = 1; x++; you've &lt;strong&gt;reassigned&lt;/strong&gt; the variable x. But, you haven't mutated the primitive numeric value of 1.&lt;/li&gt;
&lt;li&gt;However, if you modify a non-primitive value, the modified value will also be modified where it has been called from.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;primitiveMutator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;primitiveMutator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1 (value not changed)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;objectMutator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;objectMutator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Primitive values are equal to another primitive with an equivalent value.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;abc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;def&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cd&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ef&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;But, equivalent non-primitive values will not result in values which are exactly equal.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Intrinsic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Intrinsic&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;

&lt;span class="c1"&gt;// Though, their .name properties ARE primitives:&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Objects play an elemental role in the JavaScript language. They‚Äôre often used as collections of key/value pairs. However, this is a big limitation of using them in this manner: Until &lt;strong&gt;symbols existed&lt;/strong&gt;, object keys could only be strings. If we ever attempt to use a non-string value as a key for an object, the value will be coerced to a string.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;code&gt;Map&lt;/code&gt; data structure was created in part to allow for key/value storage in situations where a key is not a string. Whereas in Objects we can use only strings as keys&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#where-can-we-use-raw-symbols-endraw-symbols-actual-usecase"&gt;
  &lt;/a&gt;
  Where can we use &lt;code&gt;Symbols&lt;/code&gt; (Symbols actual Use-case)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;There are the ways to add new &lt;code&gt;properties&lt;/code&gt; to an Object:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sumanth&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mars&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// using square brackets&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Native&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// "Mars"&lt;/span&gt;

&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;96584&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// using dot operator&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 96584&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// {name: "sumanth", Native: "Mars", phno: 96584}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;And the another way using Symbols as object Properties:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;// new object&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sym&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// new symbol&lt;/span&gt;
&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// adding new property to obj&lt;/span&gt;

 &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foobar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// another way of using symbols // not as "sym": 123&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// directly creating symbols here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What‚Äôs the benefit of using Symbol("name") as property name or key over a string "name"?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Properties with a symbol key don't appear in the JSON representation of your object. Not even the for-in loop or Object.keys can enumerate them:&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// new symbol&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="mi"&gt;369&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// symbol property&lt;/span&gt;
  &lt;span class="na"&gt;okay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;A text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// {"okay":"A text"}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;prop&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// A text&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// ['okay']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you can observe in the above examples symbol properties are not appeared when we try to access them. In this way they allow us to create some "&lt;strong&gt;HIDDEN&lt;/strong&gt;" properties of an object.&lt;/p&gt;

&lt;p&gt;But these properties are not fully private in a strict sense. We can access them using &lt;code&gt;Object.getOwnPropertySymbols()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOwnPropertySymbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;// Symbol(name)&lt;/span&gt;
&lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOwnPropertySymbols&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newObj&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt; &lt;span class="c1"&gt;// 369 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Let's say we imported one user &lt;code&gt;object&lt;/code&gt; from another code&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// belongs to another code or imported code&lt;/span&gt;

&lt;span class="c1"&gt;// Our script wants to create "id" property or identifier&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Our id value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...Another script also wants "id" for its purposes...&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Their id value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// Boom! overwritten by another script!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, to overcome this conflict we can use Symbols as property names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// belongs to another code&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, imagine that another script wants to have its own identifier inside¬†&lt;code&gt;user&lt;/code&gt;, for its own purposes. That may be another JavaScript library, so that the scripts are completely unaware of each other.&lt;/p&gt;

&lt;p&gt;Then that script can create its own¬†&lt;code&gt;Symbol("id")&lt;/code&gt;, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Symbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Their id value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There will be no conflict between our and their identifiers, because symbols are always different, even if they have the same name.&lt;/p&gt;

&lt;p&gt;‚Ä¶But if we used a string¬†&lt;code&gt;"id"&lt;/code&gt;¬†instead of a symbol for the same purpose, then there¬†&lt;em&gt;would&lt;/em&gt;¬†be a conflict as we seen above.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;To avoid conflicts in identifier names we can use Symbols. If one imported object has a property as "name" and if we accidentally create our property with same "name" then the previous property will be overridden.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Understanding the Node.js Event¬†Loop</title>
      <author>Tyler Hawkins</author>
      <pubDate>Mon, 17 May 2021 12:39:07 +0000</pubDate>
      <link>https://dev.to/thawkin3/understanding-the-node-js-event-loop-242d</link>
      <guid>https://dev.to/thawkin3/understanding-the-node-js-event-loop-242d</guid>
      <description>&lt;p&gt;JavaScript is single-threaded, so how does it handle asynchronous code without blocking the main thread while it waits for an action to complete? The key to understanding the asynchronous nature of JavaScript is understanding the event loop.&lt;/p&gt;

&lt;p&gt;In the browser, the &lt;a href="https://www.educative.io/edpresso/what-is-an-event-loop-in-javascript"&gt;event loop&lt;/a&gt; coordinates the execution of code between the call stack, web APIs, and the callback queue. Node.js, however, implements its own ‚Äú&lt;a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/"&gt;Node.js event loop&lt;/a&gt;,‚Äù which is different from the regular ‚ÄúJavaScript event loop.‚Äù How confusing!&lt;/p&gt;

&lt;p&gt;The Node.js event loop follows many of the same patterns as the JavaScript event loop but works slightly differently, as it doesn‚Äôt interact with the DOM but does deal with things like input and output (I/O).&lt;/p&gt;

&lt;p&gt;In this article, we‚Äôll dive into the theory behind the Node.js event loop and then look at a few examples using &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;setImmediate&lt;/code&gt;, and &lt;code&gt;process.nextTick&lt;/code&gt;. We'll even deploy some working code to &lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt; (an easy way to quickly deploy apps) to see it all in action.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-nodejs-event-loop"&gt;
  &lt;/a&gt;
  The Node.js Event Loop
&lt;/h2&gt;

&lt;p&gt;The Node.js event loop coordinates the execution of operations from timers, callbacks, and I/O events. This is how Node.js handles asynchronous behavior while still being single-threaded. Let‚Äôs look at a diagram of the event loop below to get a better understanding of the order of operations:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JPqyTBeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79kfp84x5v333be5ub1s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JPqyTBeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/79kfp84x5v333be5ub1s.png" alt="The Node.js event loop‚Äôs order of operations (Source: Node.js docs)"&gt;&lt;/a&gt;&lt;/p&gt;
The Node.js event loop‚Äôs order of operations (Source: Node.js docs)



&lt;p&gt;As you can see, there are &lt;a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#phases-overview"&gt;six main phases&lt;/a&gt; in the Node.js event loop. Let‚Äôs briefly look at what happens in each phase:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Timers&lt;/strong&gt;: callbacks scheduled by &lt;code&gt;setTimeout&lt;/code&gt; and setInterval are executed during this phase&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pending callbacks&lt;/strong&gt;: I/O callbacks that were previously deferred to the next loop iteration are executed during this phase&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Idle, prepare&lt;/strong&gt;: this phase is only used internally by Node.js&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Poll&lt;/strong&gt;: new I/O events are retrieved and I/O callbacks are executed during this phase (except for callbacks scheduled by timers, callbacks scheduled by &lt;code&gt;setImmediate&lt;/code&gt;, and close callbacks, because those are all handled in different phases)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Check&lt;/strong&gt;: callbacks scheduled by &lt;code&gt;setImmediate&lt;/code&gt; are executed during this phase&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Close callbacks&lt;/strong&gt;: close callbacks, like when a socket connection is destroyed, are executed during this phase&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It‚Äôs interesting to note that &lt;code&gt;process.nextTick&lt;/code&gt; isn't mentioned anywhere in any of these phases. That's because it's a special method that's not technically part of the Node.js event loop. Instead, whenever the &lt;code&gt;process.nextTick&lt;/code&gt; method is called, it places its callbacks into a queue, and those queued callbacks are then "processed after the current operation is completed, regardless of the current phase of the event loop" (Source: &lt;a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#process-nexttick"&gt;Node.js event loop docs&lt;/a&gt;).&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#event-loop-example-scenarios"&gt;
  &lt;/a&gt;
  Event Loop Example Scenarios
&lt;/h2&gt;

&lt;p&gt;Now, if you‚Äôre like me, those explanations of each phase of the Node.js event loop may still seem a little abstract. I learn by seeing and by doing, so &lt;a href="https://nodejs-event-loop-demo.herokuapp.com/"&gt;I created this demo app on Heroku&lt;/a&gt; for running various code snippet examples. In the app, clicking on any of the example buttons sends an API request to the server. The code snippet for the selected example is then executed by Node.js on the backend, and the response is returned to the frontend via the API. You can &lt;a href="https://github.com/thawkin3/nodejs-event-loop-demo"&gt;view the full code on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6qnuYA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c83daa1sa98t78l4emho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6qnuYA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c83daa1sa98t78l4emho.png" alt="Node.js event loop demo app"&gt;&lt;/a&gt;&lt;/p&gt;
Node.js event loop demo app



&lt;p&gt;Let‚Äôs look at some examples to better understand the order of operations in the Node.js event loop.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#example-1"&gt;
  &lt;/a&gt;
  Example 1
&lt;/h3&gt;

&lt;p&gt;We‚Äôll start with an easy one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pjuMMTdc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vw0e9sub3h1z5n8qs18b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pjuMMTdc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vw0e9sub3h1z5n8qs18b.png" alt="Example 1 ‚Äî synchronous code"&gt;&lt;/a&gt;&lt;/p&gt;
Example 1 ‚Äî synchronous code



&lt;p&gt;Here we have three synchronous functions called one after the other. Because these functions are all synchronous, the code is simply executed from top to bottom. So because we call our functions in the order &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;, &lt;code&gt;third&lt;/code&gt;, the functions are executed in the same order: &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;, &lt;code&gt;third&lt;/code&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#example-2"&gt;
  &lt;/a&gt;
  Example 2
&lt;/h3&gt;

&lt;p&gt;Next, we‚Äôll introduce the concept of &lt;code&gt;setTimeout&lt;/code&gt; with our second example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cYi_51UP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zajzeasm7lt984hruv5s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cYi_51UP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zajzeasm7lt984hruv5s.png" alt="Example 2 ‚Äî setTimeout"&gt;&lt;/a&gt;&lt;/p&gt;
Example 2 ‚Äî setTimeout



&lt;p&gt;Here we call our &lt;code&gt;first&lt;/code&gt; function, then schedule our &lt;code&gt;second&lt;/code&gt; function using &lt;code&gt;setTimeout&lt;/code&gt; with a delay of 0 milliseconds, then call our &lt;code&gt;third&lt;/code&gt; function. The functions are executed in this order: &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;third&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;. Why is that? Why is the &lt;code&gt;second&lt;/code&gt; function executed last?&lt;/p&gt;

&lt;p&gt;There are a couple key principles to understand here. The first principle is that using the &lt;code&gt;setTimeout&lt;/code&gt; method and providing a delay value &lt;em&gt;doesn't&lt;/em&gt; mean that the callback function will be executed &lt;em&gt;exactly after&lt;/em&gt; that number of milliseconds. Rather, that value represents the &lt;em&gt;minimum&lt;/em&gt; amount of time that needs to elapse before the callback will be executed.&lt;/p&gt;

&lt;p&gt;The second key principle to understand is that using &lt;code&gt;setTimeout&lt;/code&gt; schedules the callback to be executed at a later time, which will always be at least during the next iteration of the event loop. So during this first iteration of the event loop, the &lt;code&gt;first&lt;/code&gt; function was executed, the &lt;code&gt;second&lt;/code&gt; function was scheduled, and the &lt;code&gt;third&lt;/code&gt; function was executed. Then, during the second iteration of the event loop, the minimum delay of 0 milliseconds had been reached, so the &lt;code&gt;second&lt;/code&gt; function was executed during the ‚Äútimers‚Äù phase of this second iteration.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#example-3"&gt;
  &lt;/a&gt;
  Example 3
&lt;/h3&gt;

&lt;p&gt;Next up, we‚Äôll introduce the concept of &lt;code&gt;setImmediate&lt;/code&gt; with our third example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SiKBjZm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7qda0rh2jtpvheiw4v9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SiKBjZm8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7qda0rh2jtpvheiw4v9.png" alt="Example 3 ‚Äî setImmediate vs. setTimeout"&gt;&lt;/a&gt;&lt;/p&gt;
Example 3 ‚Äî setImmediate vs. setTimeout



&lt;p&gt;In this example, we execute our &lt;code&gt;first&lt;/code&gt; function, schedule our &lt;code&gt;second&lt;/code&gt; function using &lt;code&gt;setTimeout&lt;/code&gt; with a delay of 0 milliseconds, and then schedule our &lt;code&gt;third&lt;/code&gt; function using &lt;code&gt;setImmediate&lt;/code&gt;. This example begs the question: Which type of scheduling takes precedence in this scenario? &lt;code&gt;setTimeout&lt;/code&gt; or &lt;code&gt;setImmediate&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;We‚Äôve already discussed how &lt;code&gt;setTimeout&lt;/code&gt; works, so we should give a brief background on the &lt;code&gt;setImmediate&lt;/code&gt; method. The &lt;code&gt;setImmediate&lt;/code&gt; method executes its callback function during the "check" phase of the next iteration of the event loop. So if &lt;code&gt;setImmediate&lt;/code&gt; is called during the first iteration of the event loop, its callback method will be scheduled and then will be executed during the second iteration of the event loop.&lt;/p&gt;

&lt;p&gt;As you can see from the output, the functions in this example are executed in this order: &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;third&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;. So in our case, the callback scheduled by &lt;code&gt;setImmediate&lt;/code&gt; was executed before the callback scheduled by &lt;code&gt;setTimeout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It‚Äôs interesting to note that the behavior you see with &lt;code&gt;setImmediate&lt;/code&gt; and &lt;code&gt;setTimeout&lt;/code&gt; may vary depending on the context in which these methods are called. When these methods are called directly from the main module in a Node.js script, &lt;a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout"&gt;the timing depends on the performance of the process&lt;/a&gt;, so the callbacks could actually be executed in either order each time you run the script. However, when these methods are called within an I/O cycle, the &lt;code&gt;setImmediate&lt;/code&gt; callback is always invoked before the &lt;code&gt;setTimeout&lt;/code&gt; callback. Since we are invoking these methods as part of a response in an API endpoint in our example, our &lt;code&gt;setImmediate&lt;/code&gt; callback always gets executed before our &lt;code&gt;setTimeout&lt;/code&gt; callback.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#example-4"&gt;
  &lt;/a&gt;
  Example 4
&lt;/h3&gt;

&lt;p&gt;As a quick sanity check, let‚Äôs run one more example using &lt;code&gt;setImmediate&lt;/code&gt; and &lt;code&gt;setTimeout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zak6pVqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7co9fwxnzkes4h72pdrj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zak6pVqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7co9fwxnzkes4h72pdrj.png" alt="Example 4 ‚Äî setImmediate versus setTimeout again"&gt;&lt;/a&gt;&lt;/p&gt;
Example 4 ‚Äî setImmediate versus setTimeout again



&lt;p&gt;In this example, we schedule our &lt;code&gt;first&lt;/code&gt; function using &lt;code&gt;setImmediate&lt;/code&gt;, execute our &lt;code&gt;second&lt;/code&gt; function, and then schedule our &lt;code&gt;third&lt;/code&gt; function using &lt;code&gt;setTimeout&lt;/code&gt; with a delay of 0 milliseconds. As you might have guessed, the functions are executed in this order: &lt;code&gt;second&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;third&lt;/code&gt;. This is because the &lt;code&gt;first&lt;/code&gt; function is scheduled, the &lt;code&gt;second&lt;/code&gt; function is immediately executed, and then the &lt;code&gt;third&lt;/code&gt; function is scheduled. During the second iteration of the event loop, the &lt;code&gt;second&lt;/code&gt; function is executed since it was scheduled by &lt;code&gt;setImmediate&lt;/code&gt; and we're in an I/O cycle, and then the &lt;code&gt;third&lt;/code&gt; function is executed now that we're in the second iteration of the event loop and the specified delay of 0 milliseconds has passed.&lt;/p&gt;

&lt;p&gt;Are you starting to get the hang of it?&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#example-5"&gt;
  &lt;/a&gt;
  Example 5
&lt;/h3&gt;

&lt;p&gt;Let‚Äôs look at one last example. This time we‚Äôll introduce another method called &lt;code&gt;process.nextTick&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ug036ahu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yyp3hzgf2drub9twbcir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ug036ahu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yyp3hzgf2drub9twbcir.png" alt="Example 5 ‚Äî process.nextTick"&gt;&lt;/a&gt;&lt;/p&gt;
Example 5 ‚Äî process.nextTick



&lt;p&gt;In this example, we schedule our &lt;code&gt;first&lt;/code&gt; function using &lt;code&gt;setImmediate&lt;/code&gt;, schedule our &lt;code&gt;second&lt;/code&gt; function using &lt;code&gt;process.nextTick&lt;/code&gt;, schedule our &lt;code&gt;third&lt;/code&gt; function using &lt;code&gt;setTimeout&lt;/code&gt; with a delay of 0 milliseconds, and then execute our &lt;code&gt;fourth&lt;/code&gt; function. The functions end up being called in the following order: &lt;code&gt;fourth&lt;/code&gt;, &lt;code&gt;second&lt;/code&gt;, &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;third&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The fact that the &lt;code&gt;fourth&lt;/code&gt; function was executed first shouldn't be a surprise. This function was called directly without being scheduled by any of our other methods. The &lt;code&gt;second&lt;/code&gt; function was executed second. This is the one that was scheduled with &lt;code&gt;process.nextTick&lt;/code&gt;. The &lt;code&gt;first&lt;/code&gt; function was executed third, followed by the &lt;code&gt;third&lt;/code&gt; function last, which shouldn't be a surprise to us either since we already know that callbacks scheduled by &lt;code&gt;setImmediate&lt;/code&gt; get executed before callbacks scheduled by &lt;code&gt;setTimeout&lt;/code&gt; when inside an I/O cycle.&lt;/p&gt;

&lt;p&gt;So why did the &lt;code&gt;second&lt;/code&gt; function scheduled by &lt;code&gt;process.nextTick&lt;/code&gt; get executed before the &lt;code&gt;first&lt;/code&gt; function scheduled by &lt;code&gt;setImmediate&lt;/code&gt;? The method names are misleading here! You would think that a callback from &lt;code&gt;setImmediate&lt;/code&gt; would get executed &lt;em&gt;immediately&lt;/em&gt; while a callback from &lt;code&gt;process.nextTick&lt;/code&gt; would get executed on the &lt;em&gt;next tick&lt;/em&gt; of the event loop. However, &lt;a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#process-nexttick-vs-setimmediate"&gt;it's actually the other way around&lt;/a&gt;. Confusing, right?&lt;/p&gt;

&lt;p&gt;It turns out that a callback from &lt;code&gt;process.nextTick&lt;/code&gt; gets executed immediately during &lt;em&gt;the same phase&lt;/em&gt; as it was scheduled. A callback from &lt;code&gt;setImmediate&lt;/code&gt; gets executed during the next iteration or tick of the event loop. So in our example, it makes sense that the &lt;code&gt;second&lt;/code&gt; function scheduled by &lt;code&gt;process.nextTick&lt;/code&gt; was executed before the &lt;code&gt;first&lt;/code&gt; function scheduled by &lt;code&gt;setImmediate&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;By now you should be a little more familiar with the Node.js event loop as well as with methods like &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;setImmediate&lt;/code&gt;, and &lt;code&gt;process.nextTick&lt;/code&gt;. You can certainly get by without digging into the internals of Node.js and the order of operations in which commands are processed. However, when you begin to understand the Node.js event loop, Node.js becomes a little less of a black box.&lt;/p&gt;

&lt;p&gt;If you want to see these examples live in action again, you can always &lt;a href="https://nodejs-event-loop-demo.herokuapp.com/"&gt;check out the demo app&lt;/a&gt; or &lt;a href="https://github.com/thawkin3/nodejs-event-loop-demo"&gt;view the code on GitHub&lt;/a&gt;. You can even &lt;a href="https://heroku.com/deploy?template=https://github.com/thawkin3/nodejs-event-loop-demo"&gt;deploy the code to Heroku yourself by clicking here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>heroku</category>
    </item>
    <item>
      <title>Tricky things of javascript</title>
      <author>Raisul Islam Rabby</author>
      <pubDate>Mon, 17 May 2021 12:27:39 +0000</pubDate>
      <link>https://dev.to/raisulju47/tricky-things-of-javascript-1hpj</link>
      <guid>https://dev.to/raisulju47/tricky-things-of-javascript-1hpj</guid>
      <description>&lt;p&gt;Truthy&lt;br&gt;
In JavaScript, a truthy value is a value that is considered true when encountered in a Boolean context. All values are truthy unless they are defined as falsy (i.e., except for false, 0, -0, 0n, "", null, undefined, and NaN).&lt;br&gt;
Falsy&lt;br&gt;
A falsy (sometimes written falsey) value is a value that is considered false when encountered in a Boolean context.&lt;br&gt;
Difference between call,apply and¬†bind&lt;br&gt;
Call( ): The call() method invokes a function with a given 'this' value and arguments provided one by one. This means that we can call any function, and explicitly specify what 'this' should reference within the calling function.&lt;br&gt;
Apply( ): Invokes the function and allows you to pass in arguments as an array.&lt;br&gt;
Bind(): returns a new function, allowing you to pass in an array and any number of arguments.&lt;br&gt;
setTimeout()&lt;br&gt;
As we said before, setTimeout() executes a particular block of code once after a specified time has elapsed. It takes the following parameters:&lt;br&gt;
A function to run, or a reference to a function defined elsewhere.&lt;br&gt;
A number representing the time interval in milliseconds (1000 milliseconds equals 1 second) to wait before executing the code. If you specify a value of 0 (or omit the value), the function will run as soon as possible. (See the note below on why it runs "as soon as possible" and not "immediately".) More on why you might want to do this later.&lt;br&gt;
Zero or more values that represent any parameters you want to pass to the function when it is run.&lt;/p&gt;

&lt;p&gt;setInterval()&lt;br&gt;
setTimeout() works perfectly when you need to run code once after a set period of time. But what happens when you need to run the code over and over again-for example, in the case of an animation?&lt;br&gt;
This is where setInterval() comes in. This works in a very similar way to setTimeout(), except that the function you pass as the first parameter is executed repeatedly at no less than the number of milliseconds given by the second parameter apart, rather than once. You can also pass any parameters required by the function being executed as subsequent parameters of the setInterval() call.&lt;br&gt;
What is an¬†API?&lt;br&gt;
An API (Application Programming Interface) is a set of functions that allows applications to access data and interact with external software components, operating systems, or microservices.&lt;br&gt;
To simplify, an API delivers a user response to a system and sends the system's response back to a user. You click "add to cart;" an API tells the site you added a product to your cart; the website puts the product in your cart, and your cart is updated.&lt;br&gt;
What is JSON and why is it¬†used?&lt;/p&gt;

&lt;p&gt;What is an API? A Digestible Definition with API Examples for Ecommerce Owners&lt;br&gt;
GET THE PRINT VERSION&lt;br&gt;
Tired of scrolling? Download a PDF version for easier offline reading and sharing with coworkers.&lt;br&gt;
DOWNLOAD PDF&lt;br&gt;
You've probably heard the terms API, Public API, or Web API before. These are often used by software companies when speaking about an application, operating system or website. They are used everywhere in today's world and offer a tremendous benefit. But have you ever wondered what an API actually is, or how to use it?&lt;br&gt;
What is an¬†API?&lt;/p&gt;

&lt;p&gt;An API (Application Programming Interface) is a set of functions that allows applications to access data and interact with external software components, operating systems, or microservices.&lt;br&gt;
To simplify, an API delivers a user response to a system and sends the system's response back to a user. You click "add to cart;" an API tells the site you added a product to your cart; the website puts the product in your cart, and your cart is updated.&lt;br&gt;
You may hear the term "microservices" come up in relation to API. These however, are not the same. Microservices are a style or architecture which divides functionality within a web application. While API is the framework which developers interact with a web application. Microservices can actually use API to communicate between each other.&lt;br&gt;
API lets a developer make a specific "call" or "request" in order to send or receive information. This communication is done using a programming language called "JSON." It can also be used to make a defined action such as updating or deleting data. There are four basic request methods that can be made with API:&lt;br&gt;
GET‚Ää-‚ÄäGathers information (Pulling all Coupon Codes)&lt;br&gt;
PUT‚Ää-‚ÄäUpdates pieces of data (Updating Product pricing)&lt;br&gt;
POST‚Ää-‚ÄäCreates (Creating a new Product Category)&lt;br&gt;
DELETE‚Ää-‚Ää(Deleting a blog post)&lt;/p&gt;

&lt;p&gt;So What is JSON and why is it¬†used?&lt;/p&gt;

&lt;p&gt;JSON (JavaScript Object Notation) is used to represent data on a server. It's fairly easy to read by humans, and easy for machines/applications to understand. Let's look at an example of JSON from a product on BigCommerce:&lt;br&gt;
What is an API¬†Request?&lt;br&gt;
There are several components of an API Request in order for it to function. Let's go over these individually and how they can be used to build a request.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to measure contributions &amp; finance open source projects?</title>
      <author>Mridul Bhandari</author>
      <pubDate>Mon, 17 May 2021 12:27:22 +0000</pubDate>
      <link>https://dev.to/ibmdeveloper/how-to-measure-contributions-finance-open-source-projects-118m</link>
      <guid>https://dev.to/ibmdeveloper/how-to-measure-contributions-finance-open-source-projects-118m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-measure-anything%C2%A0"&gt;
  &lt;/a&gt;
  Why measure anything?¬†
&lt;/h2&gt;

&lt;p&gt;Data, when utilized carefully, can help you settle on better choices as an open-source maintainer.¬†&lt;br&gt;
¬†&lt;br&gt;
With more data, you can:¬†&lt;br&gt;
¬†&lt;br&gt;
¬∑ See how users react to new features&lt;br&gt;
¬†&lt;br&gt;
¬∑ Find out where new users come from¬†&lt;br&gt;
¬†&lt;br&gt;
¬∑ Recognize, and conclude whether to help, an out of the box use case or feature¬†&lt;br&gt;
¬†&lt;br&gt;
¬∑ Evaluate your projects bugs&lt;br&gt;
¬†&lt;br&gt;
¬∑ See how your project is utilized¬†&lt;br&gt;
¬†&lt;br&gt;
¬∑ Fund-raise through sponsorships&lt;br&gt;
¬†&lt;br&gt;
Prominence isn't all that matters. Everyone gets into open source for various reasons. If your objective as an open-source maintainer is to flaunt your work, be straightforward about your code, measurements may not be imperative to you.¬†&lt;br&gt;
¬†&lt;br&gt;
If you are keen on understanding your project on a more profound level, read on for approaches to examine your project's activity.&lt;br&gt;
¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#revelation"&gt;
  &lt;/a&gt;
  Revelation
&lt;/h2&gt;

&lt;p&gt;Before anyone can utilize or contribute back to your project, they need to realize it exists. Ask yourself: are people discovering this project?¬†&lt;br&gt;
¬†&lt;br&gt;
If your project is on GitHub, you can see the number of individuals land on your project and where they come from. From your project‚Äôs page, click "Insights", and then "Traffic". On this page, you can see:¬†&lt;br&gt;
¬†&lt;br&gt;
&lt;strong&gt;Total page views:&lt;/strong&gt; Tells you how frequently your project was seen¬†&lt;br&gt;
¬†&lt;br&gt;
&lt;strong&gt;Total unique visitors:&lt;/strong&gt; Tells you the number of views on your project&lt;br&gt;
¬†&lt;br&gt;
&lt;strong&gt;Referring sites:&lt;/strong&gt; Tells you where visitors came from. This measurement can help you sort out where to reach out to your crowd and whether your marketing efforts are working.¬†&lt;br&gt;
¬†&lt;br&gt;
&lt;strong&gt;Popular content:&lt;/strong&gt; Tells you where guests go on your project, separated by page views and unique visitors.¬†&lt;br&gt;
¬†&lt;br&gt;
GitHub stars can likewise help give a basic measure of popularity. While GitHub stars don't really correspond to downloads and utilization, they can disclose to you the number of individuals considering your work.¬†&lt;br&gt;
¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eo2qe6gD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wietup3k40gh7vbsr7tg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eo2qe6gD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wietup3k40gh7vbsr7tg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On GitHub, go to the "Traffic" page. where you can see the clone graph to see how frequently your repository has been cloned on a given day, separated by all out clones and unique cloners.&lt;/p&gt;

&lt;p&gt;If the usage is low as compared to the views on your project, there are two points to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your churn is very high&lt;/li&gt;
&lt;li&gt;You are targeting the wrong crowd&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#maintenance"&gt;
  &lt;/a&gt;
  Maintenance
&lt;/h2&gt;

&lt;p&gt;Developers are finding your project and they're utilizing it. The following inquiry you'll need to pose to yourself is: are individuals contributing back to this task?¬†&lt;br&gt;
¬†&lt;br&gt;
It's never too soon to think about contributors. Without others contributing, you are placing yourself into an undesirable circumstance where your project is well known (numerous individuals use it) however not supported (insufficient maintainer time to fulfill need).¬†&lt;br&gt;
¬†&lt;br&gt;
Maintenance requires an inflow of new contributors, as former contributors will eventually proceed to different things.¬†&lt;br&gt;
¬†&lt;br&gt;
Measurements that you may need to routinely follow include:¬†&lt;br&gt;
¬†&lt;br&gt;
¬∑ &lt;strong&gt;Total count of contributors and number of commits:&lt;/strong&gt; Tells you the number of contributors you have, and the activity. On GitHub, you can see this under "Insights" - &amp;gt; "Contributors." Right now, this chart just commits on the default branch. It also helps you see if you are getting new contributors and if they return. Occasional contributors have lower commits. Without new and active contributors, your project can become dormant.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4KptRcnz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pg7yd2gbrwljdobk2gf7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4KptRcnz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pg7yd2gbrwljdobk2gf7.png" alt="Alt Text"&gt;&lt;/a&gt;¬†&lt;br&gt;
¬†&lt;br&gt;
¬∑ &lt;strong&gt;Number of open issues and Pull requests:&lt;/strong&gt; If these numbers get excessively high, you may require help with issue triaging and code checkup.¬†&lt;br&gt;
¬†&lt;br&gt;
¬∑ &lt;strong&gt;Number of opened issues and opened pull requests:&lt;/strong&gt; Opened issues implies someone thinks often about your project to open an issue. If the number increments after some time, it means people are keen on your project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uyIYdI2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzncjhrfead8o08zamp3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uyIYdI2G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzncjhrfead8o08zamp3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W9CMF0_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2umw9uck824p9ah4kt3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W9CMF0_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2umw9uck824p9ah4kt3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
¬†&lt;br&gt;
¬∑ &lt;strong&gt;Category of Contributions:&lt;/strong&gt; Contributions can be of various types such as commits, grammatical fixes, fixes for bugs or replying to issues.¬†&lt;br&gt;
¬†&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#financial-support"&gt;
  &lt;/a&gt;
  Financial Support
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9zYb2_QM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj69yeuex3nlx1lqk7lz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9zYb2_QM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hj69yeuex3nlx1lqk7lz.png" alt="Alt Text"&gt;&lt;/a&gt;¬†&lt;br&gt;
¬†&lt;br&gt;
Apart from individual developers, projects fund-raise from organizations, people, or others to support continuous work. Corporate funding may go towards paying current contributors, taking care of the expenses of running projects, (for example, production &amp;amp; deployment charges), or putting into new highlights or thoughts. As open source's fame builds, finding funding for projects is as still under trial, but there are a couple of options available.¬†&lt;br&gt;
¬†&lt;br&gt;
¬∑ &lt;strong&gt;Fund-raise for your work through crowdfunding efforts or sponsorships&lt;/strong&gt;¬†&lt;br&gt;
Discovering sponsorships functions admirably on the off chance that you have a solid crowd or your project is well known.¬†&lt;br&gt;
¬†&lt;br&gt;
¬∑ &lt;strong&gt;Make an income stream&lt;/strong&gt;¬†&lt;br&gt;
Building upon your project, you might have the option to charge for business support.&lt;br&gt;
¬†&lt;br&gt;
¬∑¬†&lt;strong&gt;Apply for grants&lt;/strong&gt;¬†&lt;br&gt;
Some product establishments and organizations offer awards for open source work.¬†&lt;br&gt;
¬†&lt;br&gt;
If you are interested in creating a 3D model of your GitHub contribution graph, you can go here ‚Üí &lt;a href="https://skyline.github.com/"&gt;https://skyline.github.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On June 8, The Digital Developer Conference: Data &amp;amp; AI will provide a free opportunity for developers to learn industry-recognized data and AI skills from IBM experts, partners, and the worldwide community‚Äîfeaturing hands-on experiences, IBM client stories, essentials and best practices, latest trends, and more. Sign-up here ‚Üí ibm.biz/devcon-ai&lt;/p&gt;

&lt;p&gt;Looking to use #TechforGood? Join a community of problem solvers to fight back some of the world‚Äôs most pressing challenges. Answer the call on ‚Üí &lt;a href="http://callforcode.org"&gt;http://callforcode.org&lt;/a&gt;&lt;br&gt;
¬†&lt;br&gt;
Follow us on Meetup to join us in the upcoming relevant workshops and webinars&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>ibm</category>
      <category>redhat</category>
      <category>callforcode</category>
    </item>
    <item>
      <title>Git Commands! </title>
      <author>Timothy Yang</author>
      <pubDate>Mon, 17 May 2021 12:26:45 +0000</pubDate>
      <link>https://dev.to/timothyoung97/git-commands-3pkh</link>
      <guid>https://dev.to/timothyoung97/git-commands-3pkh</guid>
      <description>&lt;p&gt;&lt;code&gt;To be frank, there are just way too many commands... somebody saves me ‡ºº‡≤¢_‡≤¢‡ºΩ&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A Git project is broken down into 4 parts:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A working directory: where you'll be doing all the work ie. creating, editing, deleting and organizing files&lt;/li&gt;
&lt;li&gt;A Staging Area: Where you'll list changes you make to the working directory&lt;/li&gt;
&lt;li&gt;A Repository: where Git permanently stores those changes as different versions of the project&lt;/li&gt;
&lt;li&gt;A Remote: a Git repository that lives outside your Git project folder. Remotes can live on the web, on a shared network or even in a separate folder on your local computer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Basic Workflow:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TarpesY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yvmqvp0o2z5k2lh32d7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TarpesY1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4yvmqvp0o2z5k2lh32d7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;General&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;git init&lt;/strong&gt;: creates a new Git repository&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git status&lt;/strong&gt;: inspects the contents of the working directory and staging area&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git add&lt;/strong&gt;: adds files from the working directory to the staging area&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git diff&lt;/strong&gt;: shows the difference between the working directory and the staging area&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git log&lt;/strong&gt;: shows a list of all previous commits&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git commit -m "type your message here"&lt;/strong&gt;: permanently stores file changes from the staging area in the repository&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git remote add origin &lt;em&gt;github repository link&lt;/em&gt;&lt;/strong&gt;: link to GitHub (for existing repository)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git push -u origin main&lt;/strong&gt;: link to GitHub (for existing repository)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git show HEAD&lt;/strong&gt;: in git, the commit you are currently on is known as the HEAD commit. The most recently made commit is the HEAD commit. The output of the command will display all git log command displays for the HEAD commit, plus files changes that were committed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Backtracking&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;git checkout HEAD filename&lt;/strong&gt;: will restore the file in your working directory to look exactly like what it did when you last made a commit. Basically means discard changes go back to the previous state. REMEMBER that this is entered before commit&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git checkout -- filename&lt;/strong&gt;:  does the same thing as above.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git reset HEAD filename&lt;/strong&gt;:   This command resets the file in the staging area to be the same as the commit. It does not discard file changes from the working directory, it removes them from the staging area.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git reset commit_SHA&lt;/strong&gt;: This command works by using the first 7 characters of the SHA of a commit. Refer to git log to see the version you would like to backtrack to.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Branching&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;git branch&lt;/strong&gt;: This command will tell you which branch that you're currently on. (*) marks the current branch that you're currently on.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git branch new_branch&lt;/strong&gt;: This command will create a new branch according to the name of the new new_branch&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git checkout branch_name&lt;/strong&gt;: This command will switch your terminal to the desired branch that you would like to go to&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git merge branch_name&lt;/strong&gt;: This command is executed when you're in the master branch. This basically merges the custom branch to the master branch and keep the master branch updated on the changes made to the custom branch.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;conflict resolve&lt;/em&gt;: Merge conflicts arise due to the changes with respect to a certain file that exists in two or more different branches. To resolve it, we need to delete the unwanted part in the specific file, and then proceed with add to staging, commit to master branch then delete the custom branch.

&lt;ul&gt;
&lt;li&gt;"&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;" represents the head. aka the master branch.&lt;/li&gt;
&lt;li&gt;"=====" represents the separator between branches.&lt;/li&gt;
&lt;li&gt;"&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;" represents the other branches.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git branch -d branch_name&lt;/strong&gt;: This command will delete the branch that is no use / unwanted.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git branch -D branch_name&lt;/strong&gt;: This command is able to delete not fully merged branches&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Teamwork&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;git clone remote_location clone_name&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;remote_location: tells Git where to go to find the remote. This could be a web address, or a file path, such as: /Users/teachers/Documents/some-remote&lt;/li&gt;
&lt;li&gt;clone_name: the name you give to the directory in which Git will clone the repository.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git remote -v&lt;/strong&gt;: This command allows you to see the remotes

&lt;ul&gt;
&lt;li&gt;Git lists the name of the remote, &lt;em&gt;origin&lt;/em&gt;, as well as its location.&lt;/li&gt;
&lt;li&gt;Git automatically names this remote &lt;em&gt;origin&lt;/em&gt;, because it refers to the remote repository of origin. However, it is possible to safely change its name.&lt;/li&gt;
&lt;li&gt;The remote is listed twice: once for (fetch) and once for (push). We‚Äôll learn about these later in the lesson&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git fetch&lt;/strong&gt;: This is an easy way to see if changes have been made to the remote and bring the changes down to your local copy. This command will not merge changes from the remote into your local repository. It brings those changes onto what‚Äôs called a remote branch.

&lt;ul&gt;
&lt;li&gt;Take note: After fetch, the new commits are only in the origin/master branch, but not in the local master branch. We need to use 'git merge origin/master' in order to see the changes made previously.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;git push origin your_branch_name&lt;/strong&gt;: will push your branch up to the remote, (origin). From there, Sally can review your branch and merge your work into the (master) branch, making it part of the definitive project version.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Workflow of Git Collaboration&lt;br&gt;
Steps 1 and 4 are a safeguard against merge conflicts, which occur when two branches contain file changes that cannot be merged with the git merge command. Step 5 involves git push.&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Fetch and merge changes from the remote&lt;/li&gt;
&lt;li&gt;Create a branch to work on a new project feature&lt;/li&gt;
&lt;li&gt;Develop the feature on your branch and commit your work&lt;/li&gt;
&lt;li&gt;Fetch and merge from the remote again (in case new commits were made while you were working)&lt;/li&gt;
&lt;li&gt;Push your branch up to the remote for review&lt;/li&gt;
&lt;/ol&gt;


&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Misc&lt;br&gt;&lt;br&gt;
And here's Peter... without any context... Gigidy&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3pmaqZvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6rr67yepzmq0spvr3pg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3pmaqZvL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6rr67yepzmq0spvr3pg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>github</category>
      <category>beginners</category>
      <category>git</category>
    </item>
    <item>
      <title>Download Youtube video to mp3 with Python</title>
      <author>Stokry</author>
      <pubDate>Mon, 17 May 2021 12:18:10 +0000</pubDate>
      <link>https://dev.to/stokry/download-youtube-video-to-mp3-with-python-26p</link>
      <guid>https://dev.to/stokry/download-youtube-video-to-mp3-with-python-26p</guid>
      <description>&lt;p&gt;I often need to download videos from Youtube in  &lt;code&gt;mp3&lt;/code&gt; format. There are many websites where you can convert Youtube videos to &lt;code&gt;mp3&lt;/code&gt;, but I am giving you a simple Python script that does the same job. &lt;/p&gt;

&lt;p&gt;I am using &lt;a href="https://pypi.org/project/youtube_dl/"&gt;youtube_dl&lt;/a&gt;. Command-line program to download videos from YouTube.com and other video sites. It requires the Python interpreter, version 2.6, 2.7, or 3.2+, and it is not platform-specific. It should work on your Unix box, on Windows, or on macOS. &lt;/p&gt;

&lt;p&gt;Let's jump to the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;youtube_dl&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;video_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"please enter youtube video url:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;video_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;youtube_dl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;YoutubeDL&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;extract_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;video_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.mp3"&lt;/span&gt;
    &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'format'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;'bestaudio/best'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'keepvideo'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'outtmpl'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;youtube_dl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;YoutubeDL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ydl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ydl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;video_info&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'webpage_url'&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Download complete... {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just enter the URL of the song and the script will download that song in &lt;code&gt;mp3&lt;/code&gt; format, cool isn't it?&lt;/p&gt;

&lt;p&gt;Thank you all.&lt;/p&gt;

</description>
      <category>python</category>
      <category>showdev</category>
      <category>tutorial</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Building an Event Registration Page with Composition API and Serverless Functions</title>
      <author>Ekene Eze</author>
      <pubDate>Mon, 17 May 2021 12:18:08 +0000</pubDate>
      <link>https://dev.to/kenny_io/building-an-event-registration-page-with-composition-api-and-serverless-functions-4dii</link>
      <guid>https://dev.to/kenny_io/building-an-event-registration-page-with-composition-api-and-serverless-functions-4dii</guid>
      <description>&lt;p&gt;The Composition API was born out of the desire to offer Vue developers a different way of writing and organizing code while building Vue apps. It provided some flexibilities around how we build Vue applications that weren‚Äôt possible in the Options API, but like every other methodology, they all have trade-offs.&lt;/p&gt;

&lt;p&gt;The Composition API at a high-level overview offers developers a different way of writing code that ensures that codebases remain legible, readable and easier to maintain even as it grows larger.&lt;/p&gt;

&lt;p&gt;In this post, we‚Äôll look at how to collect data from a conference registration form with the Composition API and post it to a serverless function that will receive the request and return a response. You can do pretty much anything else you want in the function, like saving users to a database using Hasura, or handling authentications with Netlify Identity.&lt;/p&gt;

&lt;p&gt;If you‚Äôll like to code along, I‚Äôve prepared a starter repository here for you. Check out the start branch and build from there.&lt;/p&gt;

&lt;p&gt;For visual context, this is what the form looks like at the end.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fYac13KD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/kennyy/image/upload/q_auto/v1609936428/jaminspace_oadphi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fYac13KD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/kennyy/image/upload/q_auto/v1609936428/jaminspace_oadphi.png" alt="jamstack"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should already have a &lt;code&gt;src/components/Registration&lt;/code&gt; file set up for you in the &lt;code&gt;start&lt;/code&gt; branch so we‚Äôll go ahead and walkthrough handling the form fields with the Composition API. We‚Äôll have fields for &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;track&lt;/code&gt;, &lt;code&gt;mobile&lt;/code&gt; track and &lt;code&gt;tickets&lt;/code&gt;. This means that we need a way to handle state for these fields.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reactivity-in-the-composition-api"&gt;
  &lt;/a&gt;
  Reactivity in the Composition API
&lt;/h2&gt;

&lt;p&gt;In the Options API, all the pieces of data in the data() option is tracked and made reactive in Vue by default. But, in the Composition API, all the data is static by default. This means that we need a way to make it reactive. The Composition API comes with the reactive and ref helper methods which are available by default in Vue 3. Wrapping the data we need in our Vue app with these methods ensures that they remain reactive across the app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ref"&gt;
  &lt;/a&gt;
  ref
&lt;/h2&gt;

&lt;p&gt;ref provides us a way to make data reactive. For instance, if I wanted to track when a form is submitted, I could create a ref variable for it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isUserRegistered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;isUserRegistered&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By returning &lt;code&gt;isUserRegistered&lt;/code&gt; in the &lt;code&gt;setup()&lt;/code&gt; function, I have exposed it to the template.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accessing-ref-values"&gt;
  &lt;/a&gt;
  Accessing ref values
&lt;/h3&gt;

&lt;p&gt;To access the value of ref variables, you have to append &lt;code&gt;.value&lt;/code&gt; to it. Consider this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isUserRegistered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sayHi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isUserRegistered&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
          &lt;span class="c1"&gt;// say hi to the registered user :&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;isUserRegistered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;sayHi&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This might seem like you need to write a lot of &lt;code&gt;.value&lt;/code&gt;‚Äòs when using ref but that is not the case in the render context. When you return a &lt;code&gt;ref&lt;/code&gt; in the &lt;code&gt;setup()&lt;/code&gt; function, it automatically unwraps to the inner value and becomes accessible to the template. As a result, you won‚Äôt need to append &lt;code&gt;.value&lt;/code&gt; to access a &lt;code&gt;ref&lt;/code&gt; in the template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;!isUserRegistered&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;more&lt;/span&gt; &lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="nx"&gt;thingy&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reactive"&gt;
  &lt;/a&gt;
  Reactive
&lt;/h2&gt;

&lt;p&gt;Just like &lt;code&gt;ref&lt;/code&gt;, reactive also provides us with a way of keeping data reactive in Vue 3. Albeit different from ref, it achieves the same result. Let‚Äôs demonstrate how the &lt;code&gt;reactive&lt;/code&gt; helper method works in the registration form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;formData&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;formData&lt;/code&gt; in the &lt;code&gt;setup()&lt;/code&gt; function above is a reactive object that contains all the pieces of data supplied by the user. We return it in the &lt;code&gt;setup()&lt;/code&gt; function to expose it for use in the template. Speaking about the template, this is how we‚Äôll use it there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Let&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;s JAM in Space!&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;
      Register for the upcoming Jamstack conference in space! &amp;lt;br /&amp;gt;
      &amp;lt;strong&amp;gt;Free &amp;lt;/strong&amp;gt;for one and &amp;lt;strong&amp;gt;$5 &amp;lt;/strong&amp;gt; for 2+ tickets
    &amp;lt;/p&amp;gt;
    &amp;lt;form&amp;gt;
      &amp;lt;label for="name"&amp;gt;Name&amp;lt;/label&amp;gt;
      &amp;lt;input id="name" v-model="formData.name" placeholder="Enter your name" /&amp;gt;
      &amp;lt;label for="email"&amp;gt;Email &amp;lt;/label&amp;gt;
      &amp;lt;input
        id="email"
        v-model="formData.email"
        placeholder="Enter your email"
      /&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can immediately see why you may not want to keep binding data to the template using &lt;code&gt;formData&lt;/code&gt; as doing that could lead to a bloated markup when you have multiple properties inside the object. In my case, I decided to destructure &lt;code&gt;formData&lt;/code&gt; and get &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; directly from it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="c1"&gt;// spread&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;//OR&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// destructure&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;email&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we do that, then you might assume that &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; would be directly bound to the template so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter your name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter your email&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But unfortunately, that‚Äôs not possible for one reason: spreading or destructuring the &lt;code&gt;formData&lt;/code&gt; object will remove reactivity from the different pieces of data inside the object. It suffices to say that it seems the reactive object cannot be destructured or spread directly with the spread operator. What do we do then?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#torefs"&gt;
  &lt;/a&gt;
  toRefs
&lt;/h2&gt;

&lt;p&gt;With respect to the snippet &lt;a href=""&gt;above&lt;/a&gt;, &lt;code&gt;toRefs&lt;/code&gt; is a helper method that allows us to achieve the spread effect on the &lt;code&gt;formData&lt;/code&gt; object while retaining reactivity for the different pieces of data inside it. In our case, we can use it to wrap the &lt;code&gt;formData&lt;/code&gt; object like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toRefs&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// other piece of data&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;toRefs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, we can go ahead and use &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; directly in the template like we wanted to do &lt;a href=""&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#computed"&gt;
  &lt;/a&gt;
  Computed
&lt;/h3&gt;

&lt;p&gt;Computed properties in the Composition API work the same way they do in the Options API. However, they have a slightly different syntax. Imagine that I have an imaginary &lt;code&gt;coupon&lt;/code&gt; that gives users with 2 or more tickets a $3 discount from the total price of their ticket. If that was the case, then I would use a computed property to calculate the total price of the ticket like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toRefs&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;tickets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;coupon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;discountedPrice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tickets&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coupon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="c1"&gt;// other pieces of data&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;toRefs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;discountedPrice&lt;/code&gt; in the snippet above is a computed property that tracks all of it‚Äôs dependencies (&lt;code&gt;formData.price&lt;/code&gt; and &lt;code&gt;formData.coupon&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Here‚Äôs an even more interesting scenario. Let‚Äôs introduce a &lt;code&gt;tickets&lt;/code&gt; property to the &lt;code&gt;formData&lt;/code&gt; object, and calculate &lt;code&gt;price&lt;/code&gt; based on how many tickets are selected. 1 ticket = $0 (free) while 2 or more tickets will be a flat rate of $5. Computed properties shines in this regard as you can see below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toRefs&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;tickets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;coupon&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tickets&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coupon&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;toRefs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the computed property &lt;code&gt;price&lt;/code&gt; is tracking both &lt;code&gt;coupon&lt;/code&gt; and &lt;code&gt;tickets&lt;/code&gt; and ensures that anytime any of the values change, it will update automatically to capture the new changes. Bonus Point: You don‚Äôt even need to have a separate &lt;code&gt;discountedPrice&lt;/code&gt; property anymore.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#methods"&gt;
  &lt;/a&gt;
  Methods
&lt;/h3&gt;

&lt;p&gt;Methods in the Composition API are just regular functions defined in &lt;code&gt;setup()&lt;/code&gt;. As the last step to creating and using them, you have to always return it in &lt;code&gt;setup()&lt;/code&gt; so that it is exposed to the template. In our case, I want to create a method that takes all the information provided in the form and post it to a serverless function (which doesn‚Äôt exist yet). Here‚Äôs how to handle it in the Composition API:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toRefs&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;reactive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;tickets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isUserRegistered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// method&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;registerUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// "/.netlify/functions/register" is the path to my serverless function&lt;/span&gt;
      &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/.netlify/functions/register&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// do something with the response&lt;/span&gt;
          &lt;span class="nx"&gt;isUserRegistered&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;toRefs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="nx"&gt;isUserRegistered&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;registerUser&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;registerUser&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Register&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember, methods in the Composition API are normal JavaScript functions. No special syntax needed. The notable thing here is that just like everything else you need in the template, you have to return it in the &lt;code&gt;setup()&lt;/code&gt; function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#serverless-function"&gt;
  &lt;/a&gt;
  Serverless function
&lt;/h2&gt;

&lt;p&gt;Serverless functions make it possible for developers to run a server without the overhead that come with fully managing a server. More-so, it comes with fewer cost implications as it only executes on demand. If this tutorial is your first look at serverless functions, I would recommend this awesome &lt;a href="https://frontendmasters.com/courses/serverless-functions/"&gt;intro to serverless functions course&lt;/a&gt; by &lt;a href="https://twitter.com/jlengstorf"&gt;Jason Lengstorf.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A general rule of thumb for creating serverless functions is that it exports a function called &lt;code&gt;handler&lt;/code&gt; and returns a response. The response must be an object containing at least a &lt;code&gt;statusCode&lt;/code&gt; that matches a valid HTTP response code and a &lt;code&gt;body&lt;/code&gt; that is a string by default. At the barest minimum, this is a valid serverless function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#event"&gt;
  &lt;/a&gt;
  event
&lt;/h3&gt;

&lt;p&gt;The event argument in the function above is an object that contains all the information you need to know about the request. Here‚Äôs a quick look at the structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/.netlify/functions/register&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;httpMethod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;queryStringParameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="nx"&gt;multiValueQueryStringParameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="nx"&gt;multiValueHeaders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nl"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="nx"&gt;isBase64Encoded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This can be very useful to perform all sorts of operations in the function. Like validating the request methods, getting request query parameters, using data from the request body etc. When working with serverless functions, the event argument is your single source of truth for information about the request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  context
&lt;/h3&gt;

&lt;p&gt;The second argument is &lt;code&gt;context&lt;/code&gt;. It is an object that provides broader information about the request. In it, you will find information like:&lt;/p&gt;

&lt;p&gt;The name of the function that was called&lt;br&gt;
If Netlify identity is present&lt;br&gt;
What the client context is and&lt;br&gt;
Lots of other information that you will rarely need, but provided for you regardless.&lt;br&gt;
I‚Äôll go ahead and link you up with &lt;a href="https://docs.netlify.com/functions/build-with-javascript/?_ga=2.96358748.1516608840.1621190479-34143335.1617390407"&gt;this doc&lt;/a&gt; that explains it in even more detail.&lt;/p&gt;

&lt;p&gt;Now that we know what a serverless function looks like, let‚Äôs make one. Create a &lt;code&gt;functions/register.js&lt;/code&gt; file in the root of your project and update it with this snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// export a function called handler&lt;/span&gt;
&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// receive the request event and get the user's details from it&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mobileTrack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Things you can do here!&lt;/span&gt;
  &lt;span class="c1"&gt;// create a user object and do what you want with, like:&lt;/span&gt;
  &lt;span class="c1"&gt;// Save user to a database&lt;/span&gt;
  &lt;span class="c1"&gt;// Authenticate user&lt;/span&gt;
  &lt;span class="c1"&gt;// Send event details to user's email&lt;/span&gt;
  &lt;span class="c1"&gt;// etc.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newUserDetails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;track&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;track&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;mobileTrack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mobileTrack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;price&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="c1"&gt;// Send response back to the client&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;statusCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newUserDetails&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Serverless functions help us perform server-side operations without maintaining a dedicated server. That is what we can do here. The form data sent from the client can be handled however you want in the function. You can save to your database, do server-side validation, handle authentication, roles etc. Talk about dynamic Jamstack? serverless functions is the way to go!&lt;/p&gt;

&lt;p&gt;Finally, you‚Äôll need to create a &lt;code&gt;netlify.toml&lt;/code&gt; file where you tell Netlify where your functions folder is. This helps Netlify locate your functions and deploy them for you along with the rest of your site.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;build&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;functions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This site is hosted here on Netlify and you can play around with the repo yourself here on GitHub. I tried and failed to keep this post under 2k words, but I do hope you found some useful information here on both the Composition API and serverless functions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-resources"&gt;
  &lt;/a&gt;
  More resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://frontendmasters.com/courses/serverless-functions/?"&gt;Introduction to Serverless Functions ‚Äî Video Course ‚Äî Frontend Masters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://explorers.netlify.com/learn/launching-with-composition-api"&gt;Launching with the Composition API ‚Äî Free Video Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/functions/overview/?_ga=2.95846108.1516608840.1621190479-34143335.1617390407"&gt;Netlify Functions docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://v3.vuejs.org/guide/composition-api-introduction.html"&gt;Official Vue 3 Composition API Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.netlify.com/tags/vue/"&gt;vue&lt;/a&gt; &lt;a href="https://www.netlify.com/tags/serverless/"&gt;serverless&lt;/a&gt; &lt;a href="https://www.netlify.com/tags/composition-api/"&gt;composition-api&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>serverless</category>
      <category>compositionapi</category>
    </item>
  </channel>
</rss>
