<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Applying ideas from CS to solve group allocation</title>
      <author>davyie</author>
      <pubDate>Tue, 06 Apr 2021 20:27:53 +0000</pubDate>
      <link>https://dev.to/davyie/applying-ideas-from-cs-to-solve-group-allocation-ike</link>
      <guid>https://dev.to/davyie/applying-ideas-from-cs-to-solve-group-allocation-ike</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Group allocation is a major part of organising students and teams in general. Therefore, it is a good idea to have a strategy for creating an allocation. We can achieve an allocation with multiple different methods e.g. random allocation or let the students choose their group etc. There are infinite number of methods to create group allocation but today we are going to take a look at a method that takes advantage of computer science theory, mainly the NP-Complete problem called Clique Problem! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#clique-problem" class="anchor"&gt;
  &lt;/a&gt;
  Clique Problem
&lt;/h1&gt;

&lt;p&gt;To understand &lt;a href="https://en.wikipedia.org/wiki/Clique_problem#Definitions"&gt;Clique Problem&lt;/a&gt; we have to understand graphs. A graph consists of nodes and edges. A sub-graph is a subset of nodes with the same edges from the original graph. A complete graph is when all the nodes have edges with each other. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VLgDtee6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1qn4efyrt2sia18cjsq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VLgDtee6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1qn4efyrt2sia18cjsq.png" alt="Clique problem"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So one might ask themselves, what is the Clique Problem? It is one of the 21 NP-complete problems presented by Karp! This problem is a well studied problem by computer scientists and mathematicians that can be formulated in multiple ways. We can focus on the fourth definition on its &lt;a href="https://en.wikipedia.org/wiki/Clique_problem#Definitions"&gt;Wikipedia page&lt;/a&gt;. We are gonna formulate the problem as the following &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Given a graph and a size, can we guarantee that the graph contains a complete sub-graph with a given size? &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The size and graph can vary from different problem instances and currently we do not have an efficient algorithm to solve all the problem instances of the Clique problem. However, we have a bruteforce algorithm that works on small graphs such as the one we generated for Software Development academy. So, the next question is, how did we create the graph? &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creation-of-graph" class="anchor"&gt;
  &lt;/a&gt;
  Creation of graph
&lt;/h1&gt;

&lt;p&gt;To gather data about the graph we asked the students to answer two questions, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name one or two student(s) you feel is more knowledgeable in programming than you.
&lt;/li&gt;
&lt;li&gt;Name one and two student(s) you trust and would give your phone to. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This allowed us to observe the connections between students in from three perspectives, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Both questions&lt;/li&gt;
&lt;li&gt;First question &lt;/li&gt;
&lt;li&gt;Second question &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately I will not reveal what or which question(s) we used to create our graph. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zKRtHhVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5lioqj3lgwhebu53psm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zKRtHhVS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5lioqj3lgwhebu53psm.png" alt="Clique graph"&gt;&lt;/a&gt; Figure 1: All the nodes that had edges between them. &lt;/p&gt;

&lt;p&gt;Now that we have our graph we can apply our algorithm on it! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bruteforce-algorithm" class="anchor"&gt;
  &lt;/a&gt;
  Bruteforce algorithm
&lt;/h1&gt;

&lt;p&gt;So the idea behind the bruteforce algorithm is to check a node's neighbours and their neighbours. If we come back from the starting node from all of its neighbours then we know that a clique exists. This algorithm does not work for all graphs but we can use it for a small instance, and in our case it is group allocation. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vynkihQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zit9x0ba2wqamz4mk9uk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vynkihQE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zit9x0ba2wqamz4mk9uk.png" alt="Set of cliques"&gt;&lt;/a&gt;Figure 2: The set of cliques the algorithm had found. &lt;/p&gt;

&lt;p&gt;Once the algorithm has run we get a set of nodes that creates a clique. We can see that our algorithm generated some groups that share the same node(s). Thus, we cannot directly choose all set of groups but a subset groups for the final group allocation. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#issues" class="anchor"&gt;
  &lt;/a&gt;
  Issues
&lt;/h1&gt;

&lt;p&gt;There are many issues with this approach and one of them is the missing responses for the two questions. Those nodes are stand alone but have to be integrated some how. We turn to randomisation! The nodes are randomly picked in which clique they are put in. We can add them in two ways, either direct or indirect to one of the nodes in the clique. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFkzYLYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jncct9kdua9wmphp6cmr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFkzYLYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jncct9kdua9wmphp6cmr.png" alt="Entire graph"&gt;&lt;/a&gt;Figure 3: All of the nodes in the graph&lt;/p&gt;

&lt;p&gt;Second problem that occurred is the event of nodes connected to the graph was not included in the set of chosen cliques. Those have to be allocated as well! We then try to find an edge from that node to one of the cliques so it will have some connection to the group. And thus conclude our group allocation process for Backend Module! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary" class="anchor"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;We have gone through a short explanation of how the group allocation was made in the Backend Module in Software Engineering Academy. This is a compiled list of the steps, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Send out a questionnaire to students to answer&lt;/li&gt;
&lt;li&gt;Create a graph based on the questionnaire &lt;/li&gt;
&lt;li&gt;Find the Cliques in the graph with bruteforce algorithm &lt;/li&gt;
&lt;li&gt;Choose a subset of the available Cliques &lt;/li&gt;
&lt;li&gt;Allocate nodes with some connection to a clique&lt;/li&gt;
&lt;li&gt;Allocate stand-alone nodes to each clique 
And now we are done with our group allocation! Hope this was fun to read and happy with your groups and how the groups was created for Backend Module! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding in Backend Module! &lt;/p&gt;

</description>
    </item>
    <item>
      <title>The Management of Data</title>
      <author>Novice</author>
      <pubDate>Tue, 06 Apr 2021 20:13:16 +0000</pubDate>
      <link>https://dev.to/noviicee/the-management-of-data-6h1</link>
      <guid>https://dev.to/noviicee/the-management-of-data-6h1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-data" class="anchor"&gt;
  &lt;/a&gt;
  What is Data?
&lt;/h2&gt;

&lt;p&gt;Data are any raw facts and figures that can be recorded. It can also be thought as a collection of facts about the object of interest.&lt;br&gt;
Eg: text, number, images, video, speech etc.&lt;/p&gt;

&lt;p&gt;Since data is raw, we need to process it in order to get a meaning out of it. The processed data is called information, and data and information collectively synthesize to provide knowledge.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Data&lt;/strong&gt; ---&lt;em&gt;processing&lt;/em&gt;----&amp;gt; &lt;strong&gt;Information&lt;/strong&gt; ------(information + data) &lt;em&gt;synthesize&lt;/em&gt;------&amp;gt; &lt;strong&gt;Knowledge&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Eg:.&lt;br&gt;
   marks&amp;gt;90 :data&lt;br&gt;
   1st division :information&lt;br&gt;
   class topper :knowledge&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_tEfyq8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvzdl6lgwtw3okh0vmjt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_tEfyq8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvzdl6lgwtw3okh0vmjt.png" alt="data pyramid"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Software Applications need to store data as it is required to answer questions.&lt;br&gt;
For e.g.: From a student's record, how many students have scored above 80?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data is also required to convey a story.&lt;br&gt;
For e.g.: How a student is categorized as Top Performer?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#database" class="anchor"&gt;
  &lt;/a&gt;
  Database
&lt;/h2&gt;

&lt;p&gt;It is a collection of related data.&lt;br&gt;
If the database is very huge and historical, then it is referred to as &lt;strong&gt;Data Warehouse&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#define-construct-and-manipulate-data" class="anchor"&gt;
  &lt;/a&gt;
  Define, Construct and Manipulate Data
&lt;/h2&gt;

&lt;p&gt;Earlier, &lt;a href="#"&gt;Operating Systems&lt;/a&gt; used to provide support to the Database. But putting additional burdens on the operating system makes the OS way more acquired, and the boot time eventually becomes high. Also, another problem associated with this approach is that whenever a user wants to reach to the database, to say, fetch an information, or for updating data, or maybe anything else; he/she is supposed to call the operating system. &lt;br&gt;
Whenever the operating system is called, it switches from &lt;em&gt;user mode&lt;/em&gt; to &lt;em&gt;kernel mode&lt;/em&gt;, which is way more advanced.&lt;/p&gt;

&lt;p&gt;But as a user, one does not require such an advanced level of functionality in order to just reach to our database. All we need is the speed, in accessing the database.&lt;/p&gt;

&lt;p&gt;Hence, to avoid this, users write their &lt;em&gt;own programs&lt;/em&gt;, which helps them in order to access their own database, and these programs run in the user mode, with just the needed functionalities, as expected by the user.&lt;/p&gt;

&lt;p&gt;These &lt;em&gt;set of programs&lt;/em&gt;, which the users write in order to reach out to the database, which helps in &lt;code&gt;defining, constructing, and manipulating data&lt;/code&gt; is known as &lt;strong&gt;DBMS&lt;/strong&gt;, i.e., Data Base Management System.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-management-system" class="anchor"&gt;
  &lt;/a&gt;
  Database Management System
&lt;/h2&gt;

&lt;p&gt;is a software system that enables users to define, create, maintain and control access to the database.&lt;/p&gt;

&lt;p&gt;Database systems typically have high cost and they require high-end hardware configurations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Then why do we use Databases to store data?&lt;br&gt;
&lt;a href="https://dev.to/noviicee/files-448o"&gt;Why can't we use other methods, such as files for storing data?&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;DataBase + DBMS = DataBase System&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#advantage-of-databases-over-files" class="anchor"&gt;
  &lt;/a&gt;
  Advantage of Databases over Files
&lt;/h2&gt;

&lt;p&gt;Database Management Systems offers several functions that help us overcome problems associated with file-based systems.Some of them are-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data Management&lt;/li&gt;
&lt;li&gt;Integrity&lt;/li&gt;
&lt;li&gt;Transaction&lt;/li&gt;
&lt;li&gt;Concurrency&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Recovery&lt;/li&gt;
&lt;li&gt;Utilities &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AFBQVmMr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28gjq3bcjwsmz98fr7ij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AFBQVmMr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28gjq3bcjwsmz98fr7ij.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storing-data" class="anchor"&gt;
  &lt;/a&gt;
  Storing Data?
&lt;/h2&gt;

&lt;p&gt;Even though they have numerous advantage over files,&lt;br&gt;
&lt;em&gt;Databases are costly.&lt;/em&gt;&lt;br&gt;
Read as well as write operations are costly in a database.&lt;br&gt;
eg: AWS, Google Cloud(GCP), Azure, GoDaddy&lt;/p&gt;

&lt;p&gt;This is because large and complex databases are quite complicated and expensive to manage. It requires a lot of highly competent (and hence expensive) staff to manage the tables, or data sets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Database Systems&lt;/strong&gt; are categorized into four types based upon the underlying structure used to store data. These database systems in chronological order of their evolution are-&lt;/p&gt;
&lt;p&gt;Hierarchical, Network, Relational and NoSql.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dXX6OJSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8puhm1dhma61frursfk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dXX6OJSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p8puhm1dhma61frursfk.png" alt="Types of Databases"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depending on their underlying structure, each database system has its own methods and set of rules to store data.&lt;/p&gt;

</description>
      <category>database</category>
      <category>systems</category>
      <category>bigdata</category>
      <category>management</category>
    </item>
    <item>
      <title>Automate Let's Encrypt Automate Let's Encrypt Wildcard Certificate creation with Ionos DNS Rest API</title>
      <author>Florian Storz</author>
      <pubDate>Tue, 06 Apr 2021 19:46:03 +0000</pubDate>
      <link>https://dev.to/devlix-blog/automate-let-s-encrypt-automate-let-s-encrypt-wildcard-certificate-creation-with-ionos-dns-rest-api-o23</link>
      <guid>https://dev.to/devlix-blog/automate-let-s-encrypt-automate-let-s-encrypt-wildcard-certificate-creation-with-ionos-dns-rest-api-o23</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;“At the end of the day, the goals are simple: safety and security.” – Jodi Rell&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The majority of page views on the Internet are using encrypted connections.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rQaUuhfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c36as4yizabjgdgafvhm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rQaUuhfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c36as4yizabjgdgafvhm.png" alt="Google Transparency Report"&gt;&lt;/a&gt;&lt;/p&gt;

  &lt;b&gt;Figure 1:&lt;/b&gt; Source: &lt;a href="https://transparencyreport.google.com/https/overview?hl=en"&gt;Google Transparency Report&lt;/a&gt;



&lt;p&gt;A website has to provide a certificate, issued by a trusted certification authority to establish those connections.&lt;/p&gt;

&lt;p&gt;Until a few years ago, you only got such certificates with an annual fee for issuing from commercial companies like GeoTrust, DigiCert, etc. &lt;/p&gt;

&lt;p&gt;With Let's Encrypt, an open-source certification authority has been available since the end of 2015, which provides free certificates via a more automated protocol.&lt;/p&gt;

&lt;p&gt;To avoid the effort of managing many subdomains and their associated certificates, there is the option of using so-called wildcard certificates. However, applying for such certificates is a bit more complicated and was previously only possible through manual interaction with the DNS provider Ionos in combination with Let's Encrypt.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#what-are-wildcard-certificates" class="anchor"&gt;
  &lt;/a&gt;
  What are wildcard certificates?
&lt;/h1&gt;

&lt;p&gt;In order for your own certificate to be displayed as "secure" in the browser, it must first be applied for from a trustworthy certification authority (so-called CAs / Certificate Authorities). When the certificate for a website is presented to the browser, it is checked against a list of CAs stored in the operating system.&lt;/p&gt;

&lt;p&gt;Each certificate has a unique name (the so-called "CN - Common Name"), which represents the domain that is to be protected by the certificate. &lt;/p&gt;

&lt;p&gt;For example, if a website is accessed under &lt;code&gt;example.com&lt;/code&gt;, the common name of the associated certificate must be &lt;code&gt;CN=example.com&lt;/code&gt;. Now, if a website is provided under &lt;code&gt;sub.example.com&lt;/code&gt;, it needs its own certificate with the common name &lt;code&gt;CN=sub.example.com&lt;/code&gt;. The website under the subdomain cannot be protected by the top-level domain (TLD) certificate.&lt;/p&gt;

&lt;p&gt;If a company uses many subdomains, it can become much of administrative work to maintain all the certificates of the individual subdomains. For this reason there are the so-called &lt;a href="https://en.wikipedia.org/wiki/Wildcard_certificate"&gt;wildcard certificates&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The name already implies the functionality of this special type. If the CN contains e.g. the value &lt;code&gt;CN=*.example.com&lt;/code&gt;, the TLD and all direct subdomains of the TLD are automatically protected by this certificate.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#what-is-lets%C2%A0encrypt" class="anchor"&gt;
  &lt;/a&gt;
  What is Let's Encrypt?
&lt;/h1&gt;

&lt;p&gt;There have been established certification authorities for a very long time, such as DigiCert, GeoTrust or similar. Since these are commercial companies, they usually charge an annual fee for the "authentication" of the certificates. &lt;/p&gt;

&lt;p&gt;In contrast, since the end of 2015, there is an open-source certification authority called &lt;a href="https://letsencrypt.org"&gt;Let's Encrypt&lt;/a&gt;. Let's Encrypt is a free, automated and open certification authority provided by the &lt;a href="https://www.abetterinternet.org/"&gt;Internet Security Research Group (ISRG)&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Let's Encrypt uses the Automated Certificate Management Environment (ACME) protocol, which was standardized in &lt;a href="https://tools.ietf.org/html/rfc8555"&gt;RFC 8555&lt;/a&gt;, to validate the ownership of a domain. Since March 2018, Let's Encrypt also offers wildcard certificates using the ACMEv2 protocol (see also &lt;a href="https://community.letsencrypt.org/t/acme-v2-and-wildcard-certificate-support-is-live/55579"&gt;Let's Encrypt blog post&lt;/a&gt;).&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#how-to-request-a-wildcard-certificate-at-lets-encrypt" class="anchor"&gt;
  &lt;/a&gt;
  How to request a (wildcard) certificate at Let's Encrypt?
&lt;/h1&gt;

&lt;p&gt;Let's Encrypt certificates for a specific domain can be requested through the &lt;a href="https://letsencrypt.org/docs/challenge-types/#http-01-challenge"&gt;HTTP Challenge&lt;/a&gt; or the &lt;a href="https://letsencrypt.org/docs/challenge-types/#dns-01-challenge"&gt;DNS Challenge&lt;/a&gt;. For wildcard certificates from Let's Encrypt, only the DNS Challenge can be used (see the article in the &lt;a href="https://letsencrypt.org/docs/faq/#does-let-s-encrypt-issue-wildcard-certificates"&gt;Let's Encrypt FAQ&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;With the DNS Challenge, validation is accomplished by setting dedicated DNS records. This means that during the process a TXT entry must be created, e.g. for the domain &lt;code&gt;_acme-challenge.example.com&lt;/code&gt; with a unique value defined by Let's Encrypt. It then checks whether the specified value can be retrieved via the DNS system under the named domain. To ensured that the person making the request has access to the domain and is therefore authorized to carry out the process.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#workflow-until-now-with-lets-encrypt-and-ionos-dns" class="anchor"&gt;
  &lt;/a&gt;
  Workflow until now with Let's Encrypt and Ionos DNS
&lt;/h1&gt;

&lt;p&gt;In the past, Ionos as domain and DNS provider at the same time only offered the possibility to create, change or delete DNS entries via web UI. Since TXT entries must be available in the DNS for the domain for the validation process, it was previously necessary to add these manually and then remove them again.&lt;/p&gt;

&lt;p&gt;The Let's Encrypt certificates are only valid for 3 months. Therefore, this process must be performed regularly and manually. The following steps are showing how the steps looked like so far.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In order to create or delete DNS entries, authentication at the web UI and navigation to the DNS management.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The validation process is started e.g. with &lt;a href="https://certbot.eff.org/"&gt;Certbot&lt;/a&gt; by executing the following command (replace  with the desired TLD)&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;certbot certonly 
  -d *.&amp;lt;your.domain&amp;gt; 
  --preferred-challenges dns 
  --manual
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;During the DNS challenge protocol, the process is paused for a short time so that a TXT entry with a value defined by Let's Encrypt (&lt;code&gt;&amp;lt;acme-challenge-value&amp;gt;&lt;/code&gt;) can be entered in the DNS under a defined sub-domain (&lt;code&gt;_acme-challenge.&amp;lt;your.domain&amp;gt;&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator manual, Installer None
Obtaining a new certificate
Performing the following challenges:
dns-01 challenge for &amp;lt;your.domain&amp;gt;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Please deploy a DNS TXT record under the name
_acme-challenge.&amp;lt;your.domain&amp;gt; with the following value:

&amp;lt;acme-challenge-value&amp;gt;

Before continuing, verify the record is deployed.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Press Enter to Continue
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The values are entered and saved in the Ionos web UI.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ws5wZ5Gg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7g80hg4f0gcvt4kwerq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ws5wZ5Gg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u7g80hg4f0gcvt4kwerq.png" alt="Ionos add dns entry dialog"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the DNS entries have been saved, the process can be continued. The certificate is stored in the filesystem after the DNS entries have been successfully validated.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Waiting for verification...
Cleaning up challenges

IMPORTANT NOTES:
- Congratulations! Your certificate and chain have been saved at:
  /etc/letsencrypt/live/&amp;lt;your.domain&amp;gt;/fullchain.pem
  Your key file has been saved at:
  /etc/letsencrypt/live/&amp;lt;your.domain&amp;gt;/privkey.pem
  Your cert will expire on 2019-08-01. To obtain a new or tweaked
  version of this certificate in the future, simply run certbot
  again. To non-interactively renew *all* of your certificates, 
  run "certbot renew"
- If you like Certbot, please consider supporting our work by:

  Donating to ISRG / Let's Encrypt:   &amp;lt;https://letsencrypt.org/donate&amp;gt;
  Donating to EFF:                    &amp;lt;https://eff.org/donate-le&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the DNS challenge has finished, the created DNS entries should be deleted again. The deletion of the entries needs to be done manually in the Ionos web UI.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#the-new-ionos-dns-api" class="anchor"&gt;
  &lt;/a&gt;
  The new Ionos DNS API
&lt;/h1&gt;

&lt;p&gt;Since December 2020 Ionos provides a beta API for their DNS system. &lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://developer.hosting.ionos.de"&gt;Developer Portal&lt;/a&gt; of Ionos you can find a section for the &lt;a href="https://developer.hosting.ionos.de/docs/dns"&gt;DNS API&lt;/a&gt; with a Swagger UI. For an easier start, a "&lt;a href="https://developer.hosting.ionos.de/docs/getstarted"&gt;Getting Started&lt;/a&gt;" is provided, which provides some details on how to use and register for the API. &lt;/p&gt;

&lt;p&gt;In order to use the DNS API, a registration must be completed. On the page for &lt;a href="https://developer.hosting.ionos.de/keys"&gt;retrieving the associated API keys&lt;/a&gt;, you will be directed to the &lt;a href="https://mein.ionos.de/contact"&gt;contact page&lt;/a&gt; of Ionos for this purpose.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; In our own experience, the registration can only be done via the support hotline, since the activation of the API is a free "order"!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After successful ordering, the "access key" can be requested in the Developer Portal via the "Create a new key" button. The key consists of a &lt;code&gt;publicprefix&lt;/code&gt; and a &lt;code&gt;secret&lt;/code&gt;. &lt;strong&gt;The secret is only displayed once and should be stored securely.&lt;/strong&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#automation-scripts" class="anchor"&gt;
  &lt;/a&gt;
  Automation Scripts
&lt;/h1&gt;

&lt;p&gt;There is a plugin for the Certbot tool for &lt;a href="https://certbot.eff.org/docs/using.html#dns-plugins"&gt;some DNS providers&lt;/a&gt; to automate the validation process and to create or remove entries via their APIs. &lt;/p&gt;

&lt;p&gt;There is no such plugin for Ionos. However, there is the possibility to &lt;a href="https://certbot.eff.org/docs/using.html#pre-and-post-validation-hooks"&gt;automate the process with shell scripts&lt;/a&gt; for Certbot itself.&lt;/p&gt;

&lt;p&gt;We want to show you such shell scripts, which can be used to create wildcard certificates with the DNS provider Ionos in an automated way and how the scripts can be used in combination with Certbot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#auth-hook" class="anchor"&gt;
  &lt;/a&gt;
  Auth Hook
&lt;/h2&gt;

&lt;p&gt;The Auth Hook Script creates the DNS entries required for validating the domain at Ionos via the DNS API. In the process, the Certbot tool sets certain &lt;a href="https://certbot.eff.org/docs/using.html#pre-and-post-validation-hooks"&gt;environment variables&lt;/a&gt; at runtime, which can be used during processing. These include, for example, the domain to be validated (&lt;code&gt;CERTBOT_DOMAIN&lt;/code&gt;) or the token for validating the domain (&lt;code&gt;CERTBOT_VALIDATION&lt;/code&gt;).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; On the system, which executes the script, curl &amp;amp; python must be installed!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Execution note:&lt;/strong&gt; To display debug logs, remove the &lt;code&gt;#&lt;/code&gt; character before the command &lt;code&gt;set -x&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#auth-hook-shell-script" class="anchor"&gt;
  &lt;/a&gt;
  Auth Hook Shell Script
&lt;/h3&gt;

&lt;p&gt;In the first step, the script searches for the name of the DNS zone based on the domain for which a certificate is requested. &lt;/p&gt;

&lt;p&gt;In the next step, the identifier for the zone is requested from Ionos via the DNS API. This identifier is needed to create DNS entries in this zone via the API. &lt;/p&gt;

&lt;p&gt;The TXT DNS entry is then created with the validation token under the subdomain expected by Let's Encrypt (&lt;code&gt;_acme-challenge.&amp;lt;your.domain&amp;gt;&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;Finally, the identifier of the zone is written to a temporary file, which is later used for the cleanup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/sh
#set -x

API_URL="https://api.hosting.ionos.com/dns/v1"
API_KEY_HEADER="X-API-Key: $API_KEY"

# Strip only the top domain to get the zone id
ZONE_NAME=$(expr match "$CERTBOT_DOMAIN" '.*\.\(.*\..*\)')
# When already the TLD then use it
if [ -z "$ZONE_NAME" ]; then
  ZONE_NAME="$CERTBOT_DOMAIN"
fi

# Get the Ionos zone id
ZONE_RESPONSE=$(curl -s -X GET "$API_URL/zones" \
                     -H "$API_KEY_HEADER" \
                     -H "Accept: application/json")
ZONE_ID=$(echo $ZONE_RESPONSE \
     | python -c "import sys,json;response=json.load(sys.stdin);print(next((x for x in response if x['name']=='$ZONE_NAME'))['id'])")

# Create TXT record
CREATE_DOMAIN="_acme-challenge.$CERTBOT_DOMAIN"
RECORD_CREATE_RESPONSE=$(curl -s -X POST "$API_URL/zones/$ZONE_ID/records" \
                              -H "$API_KEY_HEADER" \
                              -H "Content-Type: application/json" \
                              --data '[{"name": "'"$CREATE_DOMAIN"'", "type": "TXT", "content": "'"$CERTBOT_VALIDATION"'", "ttl": 3600, "prio": 100, "disabled": false}]')

# Save info for cleanup
echo $ZONE_ID &amp;gt; /tmp/CERTBOT_$CERTBOT_DOMAIN

# Sleep to make sure the change has time to propagate over to DNS
sleep 25
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#cleanup-hook" class="anchor"&gt;
  &lt;/a&gt;
  Cleanup Hook
&lt;/h2&gt;

&lt;p&gt;The cleanup hook script deletes the DNS records created for domain validation at Ionos via the DNS API.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Precondition:&lt;/strong&gt; On the system, which executes the script, curl &amp;amp; python must be installed!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Execution note:&lt;/strong&gt; To display debug logs, remove the &lt;code&gt;#&lt;/code&gt; character before the command &lt;code&gt;set -x&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#cleanup-hook-shell-script" class="anchor"&gt;
  &lt;/a&gt;
  Cleanup Hook Shell Script
&lt;/h3&gt;

&lt;p&gt;In the first step, the script checks whether a file exists for the validated domain, which contains an identifier of a DNS zone. &lt;/p&gt;

&lt;p&gt;If this exists, all identifiers of the DNS entries that were created for the validation of the domain are retrieved for this zone via the DNS API. &lt;/p&gt;

&lt;p&gt;Finally, all DNS entries found are deleted using their identifiers via the DNS API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#!/bin/sh
#set -x

API_URL="https://api.hosting.ionos.com/dns/v1"
API_KEY_HEADER="X-API-Key: $API_KEY"

if [ -f /tmp/CERTBOT_$CERTBOT_DOMAIN ]; then
    ZONE_ID=$(cat /tmp/CERTBOT_$CERTBOT_DOMAIN)
    rm -f /tmp/CERTBOT_$CERTBOT_DOMAIN

    CREATE_DOMAIN="_acme-challenge.$CERTBOT_DOMAIN"
    # request the created records
    RECORD_GET_RESPONSE=$(curl -s -X GET "$API_URL/zones/$ZONE_ID?recordName=$CREATE_DOMAIN&amp;amp;recordType=TXT" \
                             -H "$API_KEY_HEADER" \
                             -H "Accept: application/json")
    RECORD_IDS=$(echo $RECORD_GET_RESPONSE \
            | python -c "import sys,json;records=json.load(sys.stdin)['records'];print('\n'.join([x['id'] for x in records]))")
fi

# Remove the challenge TXT record from the zone
if [ -n "$ZONE_ID" -a -n "$RECORD_IDS" ]; then
    echo "$RECORD_IDS" \
    | xargs -n1 -I {} curl -s -X DELETE "$API_URL/zones/$ZONE_ID/records/{}" \
            -H "$API_KEY_HEADER"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;For simplicity, we use the official Certbot docker image for this demo. The certbot tool and python are already installed. In order to create the certificate, several things have to be prepared.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A folder for the Let's Encrypt certificate structure must be created. In our example this is located under &lt;code&gt;/opt/letsencrypt/cert&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A folder where the scripts are located. In our example these are located under &lt;code&gt;/opt/letsencrypt/scripts&lt;/code&gt; and are executable (&lt;code&gt;chmod +x /opt/letsencrypt/scripts/*.sh&lt;/code&gt;).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/opt/letsencrypt/scripts/authenticate.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt/letsencrypt/scripts/cleanup.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;API access must have been requested (see above) and the &lt;code&gt;&amp;lt;publicprefix&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;secret&amp;gt;&lt;/code&gt; must be set in the following code block. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;NOTE:&lt;/strong&gt; A dot (&lt;code&gt;.&lt;/code&gt;) must be placed between publicprefix and secret!&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An email for expiration notifications and as identifier for a Let's Encrypt account must be set in the following code block (&lt;code&gt;&amp;lt;email-address&amp;gt;&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The domain for which the certificate is to be created must be set in the following code block (&lt;code&gt;&amp;lt;your.domain&amp;gt;&lt;/code&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Execution note:&lt;/strong&gt; Since the Certbot docker image does not have the tool curl installed, it has to be added additionally. The easiest way to do this is to add the apk add curl command in the auth hook script, e.g. in line 3. Alternatively, you could create your own Docker image, which installs the curl tool in the associated Dockerfile.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -i --rm \
  -v /opt/letsencrypt/cert:/etc/letsencrypt \
  -v /opt/letsencrypt/scripts:/tmp/scripts \
  -e "API_KEY=&amp;lt;publicprefix&amp;gt;.&amp;lt;secret&amp;gt;" \
  certbot/certbot \
  certonly \
  --keep-until-expiring \
  --preferred-challenges dns \
  --non-interactive \
  --agree-tos \
  -m &amp;lt;email-address&amp;gt; \
  --manual \
  --manual-auth-hook /tmp/scripts/authenticate.sh \
  --manual-cleanup-hook /tmp/scripts/cleanup.sh \
  -d *.&amp;lt;your.domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After successful validation, the certificate, the complete certificate chain and the corresponding private key are located in the directory &lt;code&gt;/opt/letsencrypt/cert/live/&amp;lt;your.domain&amp;gt;&lt;/code&gt;.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The two shell scripts can be used to completely automate the process of applying for and renewing wildcard certificates. &lt;/p&gt;

&lt;p&gt;For example, the command shown above can be executed regularly using a cron job on a server. This prevents the certificate from expiring and the website visitors from receiving an error message/warning. &lt;/p&gt;

&lt;p&gt;The implementation of a native plugin for the Certbot tool would be best, but until then, the scripts shown can be used :)&lt;/p&gt;

</description>
      <category>ionos</category>
      <category>letsencrypt</category>
      <category>dns</category>
      <category>certificate</category>
    </item>
    <item>
      <title>Plugin Architecture for Angular Libraries using Dependency Injection</title>
      <author>Nacho Vazquez</author>
      <pubDate>Tue, 06 Apr 2021 19:43:00 +0000</pubDate>
      <link>https://dev.to/this-is-angular/plugin-architecture-for-angular-libraries-using-dependency-injection-5d8k</link>
      <guid>https://dev.to/this-is-angular/plugin-architecture-for-angular-libraries-using-dependency-injection-5d8k</guid>
      <description>&lt;p&gt;The plugin architecture is a well-known software design pattern used for its flexibility, extensibility, and isolation. It consists of a core system and several separate plugin modules. &lt;/p&gt;

&lt;p&gt;We will cover how to create a plugin-based architecture in Angular using its &lt;strong&gt;Dependency Injection&lt;/strong&gt; system and why this is an excellent tool to have in our Engineers belt.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#plugin-architecture" class="anchor"&gt;
  &lt;/a&gt;
  Plugin Architecture
&lt;/h2&gt;

&lt;p&gt;The Plugin Architecture concept is simple: the &lt;strong&gt;Core System&lt;/strong&gt; manages the essential functionalities and orchestrates the &lt;strong&gt;Plugins&lt;/strong&gt;, but it is agnostic in its behavior. The &lt;strong&gt;Plugins&lt;/strong&gt; implement the use-case-specific functionalities, and they are agnostic of other plugins and the system behavior. &lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Core System&lt;/strong&gt; is responsible for defining the contract used by itself and the &lt;strong&gt;Plugins&lt;/strong&gt; to communicate.&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/zojzzdop0fzx/4YV1LsLI1qZByb39tKTcFF/bd35ad12b61cf188bed022f11c7b29c2/plugin-dependency-flow.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/zojzzdop0fzx/4YV1LsLI1qZByb39tKTcFF/bd35ad12b61cf188bed022f11c7b29c2/plugin-dependency-flow.png" alt="Plugin Architecture -- Dependency flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plugins&lt;/strong&gt; aren't necessarily designed for a particular &lt;strong&gt;Core System&lt;/strong&gt;, but in those cases, an adapter is required to make the &lt;strong&gt;Plugins&lt;/strong&gt; follow the contract. &lt;/p&gt;

&lt;p&gt;The main principles related to this kind of Architecture are the &lt;strong&gt;Inversion of Control (IoC) Principle&lt;/strong&gt; and the &lt;strong&gt;Dependency Inversion Principle&lt;/strong&gt; (&lt;strong&gt;DIP&lt;/strong&gt;, the D from the SOLID principles)&lt;/p&gt;

&lt;p&gt;While the &lt;strong&gt;Plugins&lt;/strong&gt; follow the &lt;strong&gt;IoC&lt;/strong&gt; by extracting behavior and control from the main flow or &lt;strong&gt;Core System&lt;/strong&gt;, the &lt;strong&gt;DIP&lt;/strong&gt; is necessary for avoiding coupling and establishing the contract.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dependency Injection&lt;/strong&gt; is not the only design pattern that allows building a Plugin Architecture or follows the &lt;strong&gt;IoC&lt;/strong&gt; Principle; callbacks, schedulers, event loops, and message queues are also valid options.&lt;/p&gt;

&lt;p&gt;If you are interested in learning more about Plugin Architecture, check the following links.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cs.uwaterloo.ca/~m2nagapp/courses/CS446/1195/Arch_Design_Activity/PlugIn.pdf"&gt;Plugin Architecture - Waterloo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/LoadingCode/Concepts/Plugins.html"&gt;Plugin Architecture - Apple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pluginbased-angular-libraries" class="anchor"&gt;
  &lt;/a&gt;
  Plugin-based Angular Libraries
&lt;/h2&gt;

&lt;p&gt;The Angular community is big and healthy, every day, new packages get published, and our favorite tools get renewed. &lt;/p&gt;

&lt;p&gt;In this constellation, not all libraries are built using a Plugin Architecture, and with a good reason. This pattern is &lt;strong&gt;NOT&lt;/strong&gt; a silver bullet, and you should not try to design all your libraries using Plugins.&lt;/p&gt;

&lt;p&gt;But there are some scenarios where the Plugin Architecture provides outstanding flexibility and relief maintainers from creating all possible features for a given domain. &lt;br&gt;
For example, in Components libraries, using content projection is a great way to achieve &lt;strong&gt;IoC&lt;/strong&gt;. From there, it is pretty easy to build plugins that extend your core Component functionality or customize the UI.&lt;/p&gt;

&lt;p&gt;This article will focus on another of the design patterns implemented in Angular, the &lt;strong&gt;Dependency Injection (DI) pattern&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementing-a-plugin-architecture-with-dependency-injection" class="anchor"&gt;
  &lt;/a&gt;
  Implementing a Plugin Architecture with Dependency Injection
&lt;/h2&gt;

&lt;p&gt;As described previously, the Plugin Architecture has two components. The &lt;strong&gt;Core System&lt;/strong&gt; and the &lt;strong&gt;Plugins&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Plugins&lt;/strong&gt; depend on the &lt;strong&gt;Core System&lt;/strong&gt;, but not the other way around. Therefore, we should start designing the &lt;strong&gt;Core System&lt;/strong&gt; first.&lt;/p&gt;

&lt;p&gt;The minimum elements we are going to need are &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;PluginContract&lt;/strong&gt;, this is the contract that our Plugins will implement and that the Core System uses for communication.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PluginInjectionToken&lt;/strong&gt;, in some technologies, the &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PluginContract&lt;/strong&gt; would be used as the injection token. Still, since interfaces are not genuine artifacts in typescript and they disappear at build time, we have to define an additional token. It is good to notice that this splitting also contributes to the separation of concerns.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;OrchestrationService&lt;/strong&gt; will gather all the plugins, orchestrate their behavior, and provide error resolution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will also have some configuration elements, optional for small and straightforward systems but instrumental in building flexible libraries.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;PluginConfiguration&lt;/strong&gt; contains information about the integration of the Plugin with the Core system.  &lt;strong&gt;The OrchestrationService&lt;/strong&gt; uses it to identify if it should execute a Plugin and how. The Plugin can extend it to configure internal Plugin behavior. The core system can provide a default configuration for the Plugins.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;PluginConfigurationToken&lt;/strong&gt;, injection token for the PluginConfiguration&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CoreConfiguration&lt;/strong&gt; provides configuration at a Core level, makes the overall system execute in a certain way. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CoreConfigurationToken&lt;/strong&gt;, injection token for the CoreConfiguration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The dependency flow would look like Fig.2.&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/zojzzdop0fzx/qgy5abOxfBq5DOzwZ48Fa/a404acfe2b6f51070f50839209f70006/plugin-dependency-flow-interface.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/zojzzdop0fzx/qgy5abOxfBq5DOzwZ48Fa/a404acfe2b6f51070f50839209f70006/plugin-dependency-flow-interface.png" alt="Plugin Architecture -- Dependency Flow Extended"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-angular-code" class="anchor"&gt;
  &lt;/a&gt;
  The Angular code
&lt;/h2&gt;

&lt;p&gt;Now that we have a big picture of our architectural design let's jump into the details and learn how to implement our library following this pattern.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-core-system" class="anchor"&gt;
  &lt;/a&gt;
  The core system
&lt;/h3&gt;

&lt;p&gt;The first thing we need is the contract that our plugins need to implement to communicate with the core system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PluginConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./plugin.config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;SystemPlugin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PluginConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// 👈&lt;/span&gt;

&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;operationA&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;operationB&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;operationZ&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This contract could have any signature; it is up to the library that you are building. The only remarkable element is the config. We are forcing the &lt;strong&gt;Plugin&lt;/strong&gt; to have it since the &lt;strong&gt;Core System&lt;/strong&gt; needs it to handle the &lt;strong&gt;Plugin&lt;/strong&gt;  correctly.&lt;/p&gt;

&lt;p&gt;The config itself is very basic and generic for our demonstrational purpose. Still, the idea is to define in the &lt;code&gt;PluginConfig&lt;/code&gt; everything that we want to make adjustable in our &lt;strong&gt;Plugin&lt;/strong&gt; behavior. This config can serve both the &lt;strong&gt;Plugin&lt;/strong&gt; and the &lt;strong&gt;Core System&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;PluginConfig&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;optionA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;optionB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;optionZ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, we need some injectors here since we cannot use the interfaces with Angular Dependency Injection. Let's add those.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;InjectionToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SystemPlugin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pluginToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;InjectionToken&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;SystemPlugin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InjectionToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__PLUGIN_TOKEN__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;InjectionToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PluginConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./plugin.config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pluginConfigToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;InjectionToken&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PluginConfig&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InjectionToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__PLUGIN_CONFIG_TOKEN__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next thing we are going to implement is our &lt;strong&gt;Core System&lt;/strong&gt; configuration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;CoreConfig&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;coreOptionsA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;coreOptionsB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;coreOptionsZ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;CoreConfig&lt;/code&gt;, like all other elements of this example, should be implemented accordingly with your library. For simplicity, let's imagine it represents all the different configurable tweaks we can make to our &lt;strong&gt;Core System&lt;/strong&gt;. Occasionally, part of the configuration options of the &lt;code&gt;CoreConfig&lt;/code&gt; is used as global defaults for not required configuration options in the &lt;code&gt;PluginConfig&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As before, we will also create the &lt;code&gt;coreConfigToken&lt;/code&gt; to inject the &lt;code&gt;CoreConfig&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;InjectionToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CoreConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./core.config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;coreConfigToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;InjectionToken&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CoreConfig&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;InjectionToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;__CORE_CONFIG_TOKEN__&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's take a look at our &lt;code&gt;OrchestratorService&lt;/code&gt;, the heart of our library. In our example, the &lt;code&gt;OrchestratorService&lt;/code&gt; will also be the entry point to our library, but this is not required. The library entry points can vary from a directive to a secondary service that uses the orchestrator service to any other communication form between the client code and our library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Optional&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;coreConfigToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./core-config.token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CoreConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./core.config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SystemPlugin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;pluginToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./plugin.token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;providedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;OrchestratorService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SystemPlugin&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pluginToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SystemPlugin&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coreConfigToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CoreConfig&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;coreOperationA&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// just a demonstration of what can be done&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canPluginExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operationA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;canPluginExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SystemPlugin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// implement any validation to determine whether the plugin should be executed or not&lt;/span&gt;

&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// use the  core config and/or the driver config&lt;/span&gt;

&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// just a demonstration of what can be done&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coreOptionsA&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;optionA&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wow, a lot is going on in there. Since this service is larger than the other files, let's split it to understand what is going on.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Optional&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pluginToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SystemPlugin&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;coreConfigToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CoreConfig&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;plugins&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing we need to do is inject what we are going to need.&lt;/p&gt;

&lt;p&gt;The key elements are the &lt;strong&gt;Plugins&lt;/strong&gt;, and I want to emphasize the plural, Plugins. We are receiving an Array of Plugins. However, it is possible that we only received a single Plugin or none plugin at all. In such cases, we need to transform the data to a suitable form, to an Array.&lt;/p&gt;

&lt;p&gt;But, how is it possible to receive multiple instances of the same Injection token? That's one of the critical ingredients when using Angular's Dependency Injection as the Plugin Architecture mechanism. We will go over this feature when we provide our Plugins, but the key is in the &lt;code&gt;multi&lt;/code&gt; options of Angular's StaticProvider.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;coreOperationA&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// just a demonstration of what can be done&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugins&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canPluginExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;operationA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;coreOperationA&lt;/code&gt; is an example of how the client code could use our library and how the &lt;code&gt;OrchestratorService&lt;/code&gt; handles our plugins.&lt;/p&gt;

&lt;p&gt;The example implementation shows how we can filter which plugins are configured to execute at a given moment and how to compose the different plugins to build a response. Real-world implementations could differ significantly, but the point is that we can access all the configured plugins and make decisions about them in our orchestrator.&lt;/p&gt;

&lt;p&gt;Finally, we use our &lt;code&gt;canPluginExecute&lt;/code&gt; method to determine if a Plugin should be used or not based on both the &lt;code&gt;CoreConfig&lt;/code&gt; and the &lt;code&gt;PluginConfig&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;canPluginExecute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SystemPlugin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// implement any validation to determine whether the plugin should be executed or not&lt;/span&gt;

&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// use the  core config and/or the driver config&lt;/span&gt;

&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// just a demonstration of what can be done&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coreOptionsA&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;optionA&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it. That is our Core System, well almost, we still need a module to configure everything. Let's see how we can do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ModuleWithProviders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CoreConfig&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./core.config&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;coreConfigToken&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./core-config.token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;CoreSystemModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CoreConfig&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ModuleWithProviders&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CoreSystemModule&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;ngModule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;CoreSystemModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;coreConfigToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;useValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are using the static method &lt;code&gt;forRoot&lt;/code&gt; to received the &lt;code&gt;CoreConfig&lt;/code&gt; configuration from the client code and then provided it to the DI system. Otherwise, we might not need to have a module, but this is a well-known pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-plugins" class="anchor"&gt;
  &lt;/a&gt;
  The Plugins
&lt;/h3&gt;

&lt;p&gt;The Core System exports everything we need, and possibly it could execute independently, but a Plugin Architecture makes little sense without plugins.&lt;/p&gt;

&lt;p&gt;Let's start by implementing our &lt;code&gt;SystemPlugin&lt;/code&gt; contract; that's where our unique Plugin logic will leave after all.&lt;br&gt;
&lt;br&gt;
 &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;PluginConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;pluginConfigToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;SystemPlugin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;projects/core-system/src/public-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExamplePlugin&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;SystemPlugin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(@&lt;/span&gt;&lt;span class="nd"&gt;Inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pluginConfigToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PluginConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;operationA&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Method not implemented.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;operationB&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Method not implemented.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;operationZ&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[]):&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Method not implemented.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We need to inject our &lt;code&gt;PluginConfig&lt;/code&gt; and implement the interface; the particular implementation is unique to every Plugin. This example shows non-implemented methods, but the idea is there.&lt;/p&gt;

&lt;p&gt;The final piece and essential part is the Plugin configuration.&lt;br&gt;
&lt;br&gt;
 &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ModuleWithProviders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;PluginConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;pluginConfigToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;pluginToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;projects/core-system/src/public-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ExamplePlugin&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./example.plugin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;examplePluginFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PluginConfig&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ExamplePlugin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ExamplePlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExamplePluginModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PluginConfig&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ModuleWithProviders&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ExamplePluginModule&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;ngModule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ExamplePluginModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pluginConfigToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;useValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;pluginToken&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;useFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;examplePluginFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;pluginConfigToken&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Firstly, we are receiving the &lt;code&gt;PluginConfig&lt;/code&gt; from the client code and providing it to the Dependency Injection system. Then it is time to provide our Plugin.&lt;/p&gt;

&lt;p&gt;Since our Plugin depends on the provided &lt;code&gt;PluginConfig&lt;/code&gt; we need to use a factory function combined with the &lt;code&gt;deps&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;The critical part is the &lt;code&gt;multi&lt;/code&gt; options. If missed, that single configuration can make the whole system fail because it can overwrite all other plugins and only provide the one without &lt;code&gt;multi&lt;/code&gt;. When set to true, it enables the power of importing multiple artifacts using a single injection token, in this case, our Plugins.&lt;/p&gt;

&lt;p&gt;And that's all we need! Now we can start using our Plugin-based library.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#usage" class="anchor"&gt;
  &lt;/a&gt;
  Usage
&lt;/h3&gt;

&lt;p&gt;Like with any other Angular library, we have to import it and configure its module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CoreSystemModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;projects/core-system/src/public-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;BrowserModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;CoreSystemModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;coreOptionsA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_A_&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;coreOptionsB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_B_&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;coreOptionsZ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_Z_&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can start using our &lt;code&gt;OrchestratorService&lt;/code&gt; or any other communication form we have in place in our library.&lt;/p&gt;

&lt;p&gt;However, we will not go far if we don't have any Plugins; let's add the one we already implemented.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;NgModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;BrowserModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/platform-browser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;CoreSystemModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;projects/core-system/src/public-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ExamplePluginModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;projects/example-plugin/src/public-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;BrowserModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;CoreSystemModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;coreOptionsA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_A_&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;coreOptionsB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_B_&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;coreOptionsZ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;_Z_&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ExamplePluginModule&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;optionA&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-A-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;optionB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-B-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;optionZ&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-Z-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;AppComponent&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppModule&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And as simple as that, without letting the &lt;code&gt;CoreSystemModule&lt;/code&gt; know anything about our Plugin, we have our system configured.&lt;/p&gt;

&lt;p&gt;I hope you can appreciate the simplicity of the configuration of our Plugin Architecture. Exactly as we imported our &lt;code&gt;ExamplePluginModule&lt;/code&gt;, we can import as many Plugins as we want, following the same structure. The Core System will access all the imported Plugins and manage their usage for us.&lt;/p&gt;

&lt;p&gt;Now we are set up, let's start using our library.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;OrchestratorService&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;projects/core-system/src/public-api&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="na"&gt;styleUrls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;plugins-architecture-demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;orchestrator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;OrchestratorService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;orchestrator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coreOperationA&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The client application or library now only has to inject our library entry point. In our example, it is the OrchestrationService. Then, it can start interacting with the library. Plugins are only a concern of the library. The client code is agnostic to the Plugins' existence except for the configuration part.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The Plugin Architecture pattern is a great pattern to create extensible systems using the Inversion of Control Principle and lift our system's focused functionalities to the Plugins.&lt;/p&gt;

&lt;p&gt;We have learned how to implement a custom Angular library following a Plugin Architecture using Angular Dependency Injection while briefly introducing the Angular Dependency Injection elements that allow us to make our Plugins decoupled from our Core System.&lt;/p&gt;

&lt;p&gt;You can find the final solution at this &lt;a href="https://github.com/NachoVazquez/angular-library-plugin-architecture-example"&gt;repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you want to see a real-world usage of this pattern, you can visit &lt;a href="https://github.com/ngworker/lumberjack"&gt;Lumberjack&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>architecture</category>
    </item>
    <item>
      <title>I've joined Forem!</title>
      <author>Abigail Phoenix</author>
      <pubDate>Tue, 06 Apr 2021 19:25:07 +0000</pubDate>
      <link>https://dev.to/aphoenix/i-ve-joined-forem-3kab</link>
      <guid>https://dev.to/aphoenix/i-ve-joined-forem-3kab</guid>
      <description>&lt;p&gt;Hi folks! I’m delighted to share that I’ve just joined Forem in the new role of Special Projects Manager, where I’ll be overseeing logistics on all sorts of exciting projects and events (including Codeland!).&lt;/p&gt;

&lt;p&gt;As a conference organizer — of several &lt;a href="https://rubyconf.org"&gt;RubyConfs&lt;/a&gt; and &lt;a href="https://railsconf.com"&gt;RailsConfs&lt;/a&gt; as well as Codeland 2019 — I know firsthand how amazing it is to collaborate with an engaged, kind, and committed community. To be honest, until recently, I didn’t know the DEV community very well, but it hasn’t taken me long to see that you’ve all built something so special here. I can’t wait to be part of it and to help translate this inspiring community spirit into concrete projects.&lt;/p&gt;

&lt;p&gt;In the spirit of getting to know each other, here are a few things about me: I’m a chatty one — it doesn’t take much to get me gabbing animatedly on most topics. &lt;/p&gt;

&lt;p&gt;A few of my favorites?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;LA food&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Fleabag&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Intersectional feminism&lt;/li&gt;
&lt;li&gt;Skincare routines&lt;/li&gt;
&lt;li&gt;Sad dad music&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I live in Los Angeles with my husband and two daughters, and I’m &lt;em&gt;highly&lt;/em&gt; &lt;a href="https://en.wiktionary.org/wiki/indoorsy"&gt;indoorsy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a pic of me in pre-pandemic times with one of my truest loves: a bag of garlicky Cajun shrimp.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tRdYRYd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3btt7aw4seucxpy4qtrf.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tRdYRYd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3btt7aw4seucxpy4qtrf.jpeg" alt="AbbyAndShrimp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm so looking forward to helping deliver meaningful experiences for all of you devs, and the wider Forem community!&lt;/p&gt;

</description>
      <category>meta</category>
      <category>career</category>
    </item>
    <item>
      <title>Why I'm Learning Rust</title>
      <author>Aisha Blake</author>
      <pubDate>Tue, 06 Apr 2021 19:23:09 +0000</pubDate>
      <link>https://dev.to/newrelic/why-i-m-learning-rust-2672</link>
      <guid>https://dev.to/newrelic/why-i-m-learning-rust-2672</guid>
      <description>&lt;p&gt;I've been a JavaScript developer for nearly my entire career. I've even spent much of said career &lt;em&gt;teaching&lt;/em&gt; other people to write JavaScript. And now, all of a sudden, here I am &lt;a href="https://www.twitch.tv/aishacodes"&gt;coming to you live on Mondays (and Tuesdays) to stream Learning Rust&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I could sum this up quickly by saying "Why? Because I can!" but there are other good reasons to learn Rust and I'd also like to share some of the resources I've used so far.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#move-fast-without-breaking-things" class="anchor"&gt;
  &lt;/a&gt;
  Move fast without breaking things
&lt;/h2&gt;

&lt;p&gt;My (perhaps over-) simplified impression of Rust's goals is that it's trying to be &lt;em&gt;fast, safe, and friendly&lt;/em&gt;. You get the crunchy, low-level goodness that you get with a language like C++ but with guardrails that make it more difficult to make costly mistakes. &lt;/p&gt;

&lt;p&gt;In addition, at least so far, the error messages and documentation I've read have been uncommonly clear and helpful. In the following example, the compiler is not only telling me that I tried to use a variable that doesn't exist but is telling me there's a similar name that &lt;em&gt;does&lt;/em&gt; exist which may be (is) what I'm looking for.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;error[E0425]: cannot find value &lt;span class="sb"&gt;`&lt;/span&gt;filename&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="k"&gt;in &lt;/span&gt;this scope
 &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; src/main.rs:9:23
  |
9 |     println! &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{:?}"&lt;/span&gt;, filename&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  |                       ^^^^^^^^ &lt;span class="nb"&gt;help&lt;/span&gt;: a &lt;span class="nb"&gt;local &lt;/span&gt;variable with a similar name exists: &lt;span class="sb"&gt;`&lt;/span&gt;fileName&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#learning-with-a-buddy" class="anchor"&gt;
  &lt;/a&gt;
  Learning with a buddy
&lt;/h2&gt;

&lt;p&gt;Probably the best part of this process for me has been that I'm not doing it alone! My brilliant colleague &lt;a href="https://www.therelicans.com/chaelcodes"&gt;ChaelCodes&lt;/a&gt; is right there with me, which has made the last couple of weeks so much more fun. We approach the material differently, come up with different questions, and can play off of each other's strengths.&lt;/p&gt;

&lt;p&gt;Aaaand sometimes we get sidetracked and I sing songs. 😅&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://clips.twitch.tv/embed?autoplay=false&amp;amp;clip=AcceptableNastyWalletWoofer--BgAAr2q2Sj2_bvR&amp;amp;parent=dev.to" height="399" width="710"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The point is that &lt;strong&gt;I highly recommend connecting with at least one other person also actively learning whatever you're trying to learn&lt;/strong&gt;. It might be difficult to find someone you vibe with but it's worth the effort!&lt;/p&gt;

&lt;p&gt;Some ideas for finding your learning buddy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Put out a call on Twitter&lt;/li&gt;
&lt;li&gt;Check your Slack and Discord communities for an "accountability" channel&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Join&lt;/em&gt; whatever platform people use to talk about your subject of interest&lt;/li&gt;
&lt;li&gt;Ask around at work to see whether anyone has the interest/bandwidth&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#circling-back-to-web-dev" class="anchor"&gt;
  &lt;/a&gt;
  Circling back to web dev
&lt;/h2&gt;

&lt;p&gt;My friend &lt;a href="https://laurieontech.com/posts/rust/"&gt;Laurie Barth&lt;/a&gt; was the first person to spark a real interest in Rust for me. She did a great job of sharing her first impressions of the language on her blog. That led to me digging into some of &lt;a href="https://www.christopherbiscardi.com/rust"&gt;Chris Biscardi's writing on &lt;em&gt;his&lt;/em&gt; experience with Rust&lt;/a&gt;. Essentially, hearing what other folks in my very JavaScript-heavy circle were doing with Rust got the wheels spinning in my head too!&lt;/p&gt;

&lt;p&gt;Chris is building a Jamstack framework called &lt;a href="https://github.com/toastdotdev/toast"&gt;Toast&lt;/a&gt; with both Rust and JavaScript that feels like it's right up my alley. I'd like to be able to contribute to the project and better understand how it works!&lt;/p&gt;

&lt;p&gt;I'm not planning on shifting to systems engineering or game dev anytime soon, so it helps to have a project in mind that's relevant to my primary area of interest (broadly, web development).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources" class="anchor"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;I'm excited by what I've learned so far! It feels good to have the time and freedom to devote to learning something like this because I want to. If you've decided you want to as well, check out the following resources and be sure to &lt;a href="https://www.twitch.tv/aishacodes?utm_campaign=DevRel&amp;amp;utm_medium=theRelicans&amp;amp;utm_source=blog"&gt;drop in on my Twitch channel&lt;/a&gt; and tell me what you're building with Rust!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://doc.rust-lang.org/book/"&gt;The Rust Programming Language&lt;/a&gt; book&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/rust-lang/rustlings/"&gt;Rustlings&lt;/a&gt; course&lt;/li&gt;
&lt;li&gt;Chris Biscardi's Egghead playlist &lt;a href="https://egghead.io/courses/learning-rust-by-solving-the-rustlings-exercises-a722"&gt;Learning Rust by Working Through the Rustlings Exercises&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://doc.rust-lang.org/stable/rust-by-example/"&gt;Rust by Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Include (or omit) Node.js devDependencies in your CI environment</title>
      <author>Dana Woodman</author>
      <pubDate>Tue, 06 Apr 2021 19:18:23 +0000</pubDate>
      <link>https://dev.to/danawoodman/include-or-omit-node-js-devdependencies-in-your-ci-environment-32g2</link>
      <guid>https://dev.to/danawoodman/include-or-omit-node-js-devdependencies-in-your-ci-environment-32g2</guid>
      <description>&lt;p&gt;Ever need to install your &lt;code&gt;devDependencies&lt;/code&gt; in a CI environment but the environment wants to install only &lt;code&gt;dependencies&lt;/code&gt;? Here's how to fix it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--include&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also omit dependencies with the &lt;code&gt;--omit=...&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;You can use the options &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;optional&lt;/code&gt; and &lt;code&gt;peer&lt;/code&gt; in both these flags.&lt;/p&gt;

&lt;p&gt;Hope that saves you a few minutes, as it did me! 🍻&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hat tip to &lt;a href="https://twitter.com/BenjaminMcCann"&gt;Ben McCann&lt;/a&gt; on the Svelte Discord for pointing me in the right direction!&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Follow me on &lt;a href="https://dev.to/danawoodman"&gt;Dev.to&lt;/a&gt;, &lt;a href="https://twitter.com/DanaWoodman"&gt;Twitter&lt;/a&gt; and &lt;a href="https://github.com/danawoodman"&gt;Github&lt;/a&gt; for more web dev and startup related content&lt;/em&gt; 🤓&lt;/p&gt;

</description>
      <category>node</category>
      <category>devops</category>
      <category>ci</category>
    </item>
    <item>
      <title>Make your own Smarthome Server with NodeJS</title>
      <author>Joseph Maurer</author>
      <pubDate>Tue, 06 Apr 2021 18:51:03 +0000</pubDate>
      <link>https://dev.to/mwrpwr/make-your-own-smarthome-server-with-nodejs-43eb</link>
      <guid>https://dev.to/mwrpwr/make-your-own-smarthome-server-with-nodejs-43eb</guid>
      <description>&lt;p&gt;The smart home product segment is more competitive than ever with lots of companies competing to be the next cool product that you buy for your home. But as a consumer there are lots of complications with trying to pick a product when trying to decide if a product will be compatible with your setup or with the things you may want to buy. And for a lot of products, like TVs, you can get a cheaper TV if it doesn’t support HomeKit as it typically means it’s a few years older. But wouldn’t it be cool if you could still add HomeKit support so that you can control those devices from your phone?&lt;/p&gt;

&lt;p&gt;Enter &lt;a href="https://github.com/homebridge/homebridge"&gt;Homebridge&lt;/a&gt;, a lightweight NodeJS server that you can run on your home network that emulates the iOS HomeKit API. With a growing open source library of plugins, Homebridge is quickly becoming a solid option for anyone looking to add more functionality to their smart home.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;My Experience&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KIXkrgiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2AX-g-Ty3emO3rEFz5QturOQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KIXkrgiR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/1%2AX-g-Ty3emO3rEFz5QturOQ.jpeg"&gt;&lt;/a&gt;Source: &lt;a href="https://techcrunch.com/2019/12/19/anybody-can-now-make-homekit-accessories/"&gt;TechCrunch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Homekit has allowed me to expand my smart home capabilities and add automations that otherwise wouldn’t be possible. It started when I got a 2019 &lt;a href="https://www.amazon.com/Samsung-QN75Q70RAFXZA-Flat-QLED-Smart/dp/B07N4MVTXB/ref=asc_df_B07N4MVTXB/?tag=hyprod-20&amp;amp;linkCode=df0&amp;amp;hvadid=241883071164&amp;amp;hvpos=&amp;amp;hvnetw=g&amp;amp;hvrand=8233342149939902883&amp;amp;hvpone=&amp;amp;hvptwo=&amp;amp;hvqmt=&amp;amp;hvdev=c&amp;amp;hvdvcmdl=&amp;amp;hvlocint=&amp;amp;hvlocphy=9030890&amp;amp;hvtargid=pla-654607754631&amp;amp;psc=1"&gt;Samsung Q70 smart tv&lt;/a&gt; that somehow didn’t support Homekit. I got a killer deal on the TV, but the newer models released later that year all supported Homekit natively, and of course cost way more. I had a &lt;a href="https://www.amazon.com/CanaKit-Raspberry-Power-Supply-Listed/dp/B07BC6WH7V"&gt;Raspberry Pi B+&lt;/a&gt; sitting around so I decided to tinker with it and see if I could get Homebridge to run on it. After less than 30 minutes I was able to get everything up and running with no problems. I figured because it was so easy that it wouldn’t be very stable, but it is really stable. It honestly acts just like first-party Homekit support. I have since added a &lt;a href="https://www.amazon.com/LEVOIT-LV-PUR131-Purifier-Allergies-Eliminator/dp/B06W54K29J"&gt;Levoit Air Purifier&lt;/a&gt; to my homebridge server and that has also worked out very well.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--llcP55L1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2AlFFGMmWLK2xJWxG3" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--llcP55L1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2AlFFGMmWLK2xJWxG3"&gt;&lt;/a&gt;Source: &lt;a href="https://blog.pimoroni.com/a-deep-dive-into-the-raspberry-pi-3-b-hardware/"&gt;Sandy MacDonald&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are already lots of breakdowns of already installing Homebridge out there, and the &lt;a href="https://github.com/homebridge/homebridge/wiki"&gt;official documentation is really solid&lt;/a&gt;. I thought I would document how I went about it as I think my implementation was a little bit cleaner.&lt;/p&gt;

&lt;p&gt;The first step is to figure out what system you are going to be running this on and download the correct image. I didn’t install Homebridge UI and I kinda wish I did as it just makes it easier to manage going forward. I would highly recommend using a Raspberry pi as it is so easy to get going. After following the basic steps to get everything downloaded, I did the following to run &lt;a href="https://words.bombast.net/homebridge-service-debian/"&gt;Homebridge as a service on Linux&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;sudo nano /etc/systemd/system/homebridge.service&lt;/em&gt; and &lt;a href="https://words.bombast.net/homebridge-service-debian/"&gt;paste this&lt;/a&gt; in there.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;sudo systemctl daemon-reload&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;sudo systemctl enable homebridge&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;sudo systemctl start homebridge&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These commands create a system service and system manager that has widely become the new standard for Linux distributions. The advantage of this is that the service will run as soon as the pi boots so there is no need to worry if the power goes out or if there are any failures that cause Homebridge to crash. It was simply reboot.&lt;/p&gt;

&lt;p&gt;After you have the service running, restart you pi and you are ready to start installing any plugins that you want.&lt;/p&gt;

&lt;p&gt;If you run into any problems, there is a great community on &lt;a href="https://github.com/homebridge/homebridge/issues"&gt;Github&lt;/a&gt;, &lt;a href="https://discord.com/invite/kqNCe2D"&gt;Discord&lt;/a&gt;, and &lt;a href="https://www.reddit.com/r/homebridge/"&gt;Reddit&lt;/a&gt; to help you. If you have questions about how I was able to get mine set, &lt;a href="https://twitter.com/maurerpwer"&gt;tweet me here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So get out there and make your home smarter!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lIPS4OrJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medium.com/_/stat%3Fevent%3Dpost.clientViewed%26referrerSource%3Dfull_rss%26postId%3D86e7aa0f63f4" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lIPS4OrJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medium.com/_/stat%3Fevent%3Dpost.clientViewed%26referrerSource%3Dfull_rss%26postId%3D86e7aa0f63f4" width="1" height="1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>ios</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Get out of my &amp;lt;head&amp;gt;! redundant head tags you can safely delete</title>
      <author>Nathaniel</author>
      <pubDate>Tue, 06 Apr 2021 18:47:30 +0000</pubDate>
      <link>https://dev.to/shadowfaxrodeo/get-out-of-my-lt-head-gt-redundant-head-tags-you-can-safely-delete-5ab2</link>
      <guid>https://dev.to/shadowfaxrodeo/get-out-of-my-lt-head-gt-redundant-head-tags-you-can-safely-delete-5ab2</guid>
      <description>&lt;p&gt;Visit almost any popular website, open up the inspector, and take a look at what's between the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;You'll see a whole load of cryptic meta data, SEO gibberish, social media stuff, and a lot of external links to trackers, analytics, and ad networks. &lt;/p&gt;

&lt;p&gt;How many of these tags improved your experience of the website?&lt;/p&gt;

&lt;p&gt;Most of these tags have no benefit to people. Many of them are completely useless. Some of them are actively annoying!&lt;/p&gt;

&lt;p&gt;These are digital plastic bags - small bits of redundant code that pollute the internet.&lt;/p&gt;

&lt;p&gt;As a rule, sending users useless data is bad, it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;slows down your website&lt;/li&gt;
&lt;li&gt;costs you and your visitors money&lt;/li&gt;
&lt;li&gt;pollutes the planet (yes actually)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Redundant head tags are hardly the worst offenders when it comes to wasting data. But I've got a little bit obsessed with them recently. &lt;em&gt;I even purchased some old devices in order to run some tests.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I've gone through so many web pages &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tags looking at the markup, and have found so many bits of redundant code, that I could almost fill a book.&lt;/p&gt;

&lt;p&gt;But before I do that I thought I'd guage interest in this very dry topic. So, &lt;strong&gt;if you're intested in micro-optimizing your &lt;code&gt;html&lt;/code&gt; by removing head tags, please let me know!&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#some-digital-plastic-bags" class="anchor"&gt;
  &lt;/a&gt;
  Some digital plastic bags:
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#favicons" class="anchor"&gt;
  &lt;/a&gt;
  Favicons
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://almanac.httparchive.org/en/2020/markup#favicons"&gt;&lt;code&gt;~75%&lt;/code&gt; of websites&lt;/a&gt; have a tag in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; letting the browser know where to find the site's &lt;code&gt;favicon&lt;/code&gt;, something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.ico"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But, by default, all browsers look for a file &lt;code&gt;/favicon.ico&lt;/code&gt; in a site's root directory. So deleting the above code has no negative effects.&lt;/p&gt;

&lt;p&gt;Removing it saves at least &lt;code&gt;37 bytes&lt;/code&gt; on every page on your website. There's a little bit more to it than that (for a future post) but that's the gist.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#-raw-ltmeta-charsetutf8gt-endraw-" class="anchor"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;meta charset="utf-8"&amp;gt;&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;This tag is sacred. You must have this tag. Except, you absolutely don't need it. Here's why:&lt;/p&gt;

&lt;p&gt;By default pretty much every web server adds an http header telling the browser to use &lt;code&gt;utf-8&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is actually a better way of doing it, because the sooner you tell the browser the charset, the sooner it can start to render the page.&lt;/p&gt;

&lt;p&gt;So all your doing by adding &lt;code&gt;&amp;lt;meta charset="utf-8"&amp;gt;&lt;/code&gt; is telling the browser something it already knows.&lt;/p&gt;

&lt;p&gt;Now some people say you should still have it, in case someone downloads your web page and opens it locally, because then there won't be any &lt;code&gt;http&lt;/code&gt; headers. But here's the thing. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;UTF-8&lt;/code&gt; is the only allowed character encoding for &lt;code&gt;HTML5&lt;/code&gt; so if you have &lt;code&gt;&amp;lt;!doctype html&amp;gt;&lt;/code&gt; at the beginning of your document. Then the browser already knows what to do. &lt;strong&gt;And&lt;/strong&gt;, even if you don't declare a &lt;code&gt;doctype&lt;/code&gt;, the browser will still work it out! You can try it, it works absolutely fine.&lt;/p&gt;

&lt;p&gt;If you're looking for a real life example of this, take a look at &lt;code&gt;youtube&lt;/code&gt;. No &lt;code&gt;&amp;lt;meta charset="utf-8"&amp;gt;&lt;/code&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#apple-touch-icons" class="anchor"&gt;
  &lt;/a&gt;
  Apple Touch Icons
&lt;/h3&gt;

&lt;p&gt;An &lt;code&gt;apple-touch-icon&lt;/code&gt; is an image used on &lt;code&gt;iOS&lt;/code&gt; devices when a website is added to the home screen. &lt;/p&gt;

&lt;p&gt;Different &lt;code&gt;iOS&lt;/code&gt; devices display icons at different sizes, and so it's common to see something like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example from theguardian.co.uk&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"apple-touch-icon"&lt;/span&gt; &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"152x152"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://assets.guim.co.uk/images/favicons/fee5e2d638d1c35f6d501fa397e53329/152x152.png"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"apple-touch-icon"&lt;/span&gt; &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"144x144"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://assets.guim.co.uk/images/favicons/1fe70b29879674433702d5266abcb0d4/144x144.png"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"apple-touch-icon"&lt;/span&gt; &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"120x120"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://assets.guim.co.uk/images/favicons/c58143bd2a5b5426b6256cd90ba6eb47/120x120.png"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"apple-touch-icon"&lt;/span&gt; &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"114x114"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://assets.guim.co.uk/images/favicons/68cbd5cf267598abd6a026f229ef6b45/114x114.png"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"apple-touch-icon"&lt;/span&gt; &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"72x72"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://assets.guim.co.uk/images/favicons/873381bf11d58e20f551905d51575117/72x72.png"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"apple-touch-icon-precomposed"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://assets.guim.co.uk/images/favicons/6a2aa0ea5b4b6183e92d0eac49e2f58b/57x57.png"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just like with &lt;code&gt;favicon.ico&lt;/code&gt; you can &lt;strong&gt;remove these links&lt;/strong&gt; and place a single &lt;code&gt;apple-touch-icon.png&lt;/code&gt; in your root directory.&lt;/p&gt;

&lt;p&gt;e.g. &lt;code&gt;https://example.com/apple-touch-icon.png&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Want to use different sizes? There's a trick to that aswell, but I'll save that for another post if anyone is interested.&lt;/em&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#handheldfriendly" class="anchor"&gt;
  &lt;/a&gt;
  HandheldFriendly
&lt;/h3&gt;

&lt;p&gt;This is a surprisingly popular tag. Notionally it is used for making your site work better on old handheld devices.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"HandheldFriendly"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"True"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is not the case.&lt;/p&gt;

&lt;p&gt;What it's really does is tell very old Palm Pilots that you've designed your website specifically to work on them. Which is a lie.&lt;/p&gt;




&lt;p&gt;I've collected lots more of these nuggets, with sources and tests. If you're interested, like this article, leave a comment, etc.&lt;/p&gt;

&lt;p&gt;If enough people do I'll make a website about it. &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>webperf</category>
      <category>performance</category>
    </item>
    <item>
      <title>The 7 Most Popular DEV Posts from the Past Week</title>
      <author>Jess Lee (she/her)</author>
      <pubDate>Tue, 06 Apr 2021 18:34:24 +0000</pubDate>
      <link>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-2koj</link>
      <guid>https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-2koj</guid>
      <description>&lt;p&gt;&lt;em&gt;Every Tuesday we round up the previous week's top posts based on traffic, engagement, and a hint of editorial curation. The typical week starts on Monday and ends on Sunday, but don't worry, we take into account posts that are published later in the week. ❤️&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performant-accessible-interactive" class="anchor"&gt;
  &lt;/a&gt;
  Performant, accessible, interactive
&lt;/h2&gt;

&lt;p&gt;What else do you need in a portfolio?! &lt;a class="comment-mentioned-user" href="https://dev.to/jemimaabu"&gt;@jemimaabu&lt;/a&gt;
 walks us through how they got theirs to * &lt;em&gt;chef's kiss&lt;/em&gt; * level &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jemimaabu" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yH8fXaQs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--wi2sA3YA--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/121416/b1bb7c72-d1f8-40a3-a484-baf01c44e461.JPG" alt="jemimaabu image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jemimaabu/how-i-built-my-perfect-score-portfolio-website-4ek0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I Built My Perfect Score Portfolio Website &lt;/h2&gt;
      &lt;h3&gt;Jemima Abu ・ Mar 31 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#portfolio&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#a11y&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#performance&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-deep-hurt-we-must-confront" class="anchor"&gt;
  &lt;/a&gt;
  A deep hurt we must confront
&lt;/h2&gt;

&lt;p&gt;In this honest and incredibly important post, &lt;a class="comment-mentioned-user" href="https://dev.to/penelope_zone"&gt;@penelope_zone&lt;/a&gt;
 shares a bit about their experience as a trans woman in technology. Instead of summarizing it here, I urge you to read it for yourself ❤️&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/penelope_zone" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AQoXpObQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--04fCLC0y--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/194867/75eb2b9b-268d-45fe-8516-01dadef3f89a.png" alt="penelope_zone image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/penelope_zone/the-incredible-weight-of-being-a-trans-woman-in-tech-45n0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The incredible weight of being a trans woman in tech&lt;/h2&gt;
      &lt;h3&gt;Penelope Phippen ・ Mar 31 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#inclusion&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#shecoded&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#hit-that-save-button" class="anchor"&gt;
  &lt;/a&gt;
  Hit that save button
&lt;/h2&gt;

&lt;p&gt;Great job on this week’s animation collection, &lt;a class="comment-mentioned-user" href="https://dev.to/afif"&gt;@afif&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/afif" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSZolrIL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5k2bquNj--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/577896/343fde9f-609b-419b-95d1-07d16b320a37.png" alt="afif image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/afif/another-100-underline-overlay-animations-the-extended-css-collection-574c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Another 100 underline/overlay  animations | The extended CSS collection 🥇🥈&lt;/h2&gt;
      &lt;h3&gt;Temani Afif ・ Mar 30 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#get-hooked" class="anchor"&gt;
  &lt;/a&gt;
  Get hooked!
&lt;/h2&gt;

&lt;p&gt;Despite reading lots of explainers and a few tutorials, &lt;a class="comment-mentioned-user" href="https://dev.to/kimberleejohnson"&gt;@kimberleejohnson&lt;/a&gt;
 understandably didn't really start to “grok” React Hooks until they needed to dig into the Daily React video chat demo. Follow along with this retrospective of their hooks learning process. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/kimberleejohnson" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sn0rvnai--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bhea_RWU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/165022/e4a63140-22dd-4916-99c0-da647a7e856e.jpeg" alt="kimberleejohnson image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kimberleejohnson/learn-react-hooks-by-looking-under-the-hood-of-a-video-chat-app-3a5o" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Learn React Hooks by looking under the hood of a video chat app &lt;/h2&gt;
      &lt;h3&gt;Kimberlee Johnson  ・ Apr  1 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#solve-a-problem-with-an-unfamiliar-solution" class="anchor"&gt;
  &lt;/a&gt;
  Solve a problem with an unfamiliar solution
&lt;/h2&gt;

&lt;p&gt;So… you’ll still need to try. But &lt;a class="comment-mentioned-user" href="https://dev.to/thelogicwarlock"&gt;@thelogicwarlock&lt;/a&gt;
 shares some priorities that might help what you’re learning about coding soak in better. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thelogicwarlock" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XDag1kMb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Fa9AAPL3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/255032/7bed4f4d-1325-4e6d-9d90-aee028bc93d0.jpeg" alt="thelogicwarlock image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thelogicwarlock/how-to-get-better-at-coding-without-really-trying-34ed" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Get Better at Coding Without Really Trying&lt;/h2&gt;
      &lt;h3&gt;Kaemon Lovendahl ・ Mar 31 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#keep-it-simple-smarty" class="anchor"&gt;
  &lt;/a&gt;
  Keep It Simple, Smarty
&lt;/h2&gt;

&lt;p&gt;If you’ve never heard of Big O Notation, this super simple explanation will feel like a gift from above. It’s actually a gift from &lt;a class="comment-mentioned-user" href="https://dev.to/humblecoder00"&gt;@humblecoder00&lt;/a&gt;
!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/humblecoder00" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2VQ_LwLa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--dOP88niJ--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/586298/8e10ff26-4b96-4668-b5cd-31f46eba1f75.jpeg" alt="humblecoder00 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/humblecoder00/comprehensive-big-o-notation-guide-in-plain-english-using-javascript-3n6m" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Comprehensive Big O Notation Guide in Plain English, using Javascript&lt;/h2&gt;
      &lt;h3&gt;Şahin Arslan ・ Apr  4 ・ 14 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#algorithms&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#a-work-of-art" class="anchor"&gt;
  &lt;/a&gt;
  A work of art
&lt;/h2&gt;

&lt;p&gt;&lt;a class="comment-mentioned-user" href="https://dev.to/fossheim"&gt;@fossheim&lt;/a&gt;
 made this &lt;em&gt;beautiful&lt;/em&gt; Muson toy synthesizer using only HTML and CSS. Love!&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/fossheim" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n8Y4xiT7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--POWeEBF4--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/162343/44361076-7f51-4b84-8c99-86c7e8824249.jpeg" alt="fossheim image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/fossheim/i-drew-a-synthesizer-with-html-css-53f" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I drew a synthesizer with HTML &amp;amp; CSS&lt;/h2&gt;
      &lt;h3&gt;Sarah ・ Apr  4 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codepen&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;That's it for our weekly wrap up! Keep an eye on dev.to this week for daily content and discussions...and if you miss anything, we'll be sure to recap it next Tuesday!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>icymi</category>
    </item>
    <item>
      <title>✔||🤢 Commit or Vomit | + cast</title>
      <author>Jasper de Jager</author>
      <pubDate>Tue, 06 Apr 2021 18:29:46 +0000</pubDate>
      <link>https://dev.to/jmdejager/commit-or-vomit-cast-2b2g</link>
      <guid>https://dev.to/jmdejager/commit-or-vomit-cast-2b2g</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@mbaumi?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Mika Baumeister&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/plus?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another ✔||🤢, casting to number with +;&lt;/p&gt;

&lt;p&gt;Actually found this one in the angular documentation at some point.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// example: numberInputField.value = "3"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;numberInputField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#casting-to-number-with-%E2%9C%94" class="anchor"&gt;
  &lt;/a&gt;
  casting to number with + ✔||🤢
&lt;/h3&gt;

&lt;p&gt;❤: Commit (something I could commit)&lt;br&gt;
🏷: Vomit (I'd never commit this)&lt;br&gt;
🦄: I like your post please continue this series!&lt;/p&gt;

&lt;p&gt;Let's vote! 😊&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>Amazing Pure HTML and CSS background animations </title>
      <author>Babi-B</author>
      <pubDate>Tue, 06 Apr 2021 18:28:20 +0000</pubDate>
      <link>https://dev.to/babib/amazing-pure-html-and-css-background-animations-4dim</link>
      <guid>https://dev.to/babib/amazing-pure-html-and-css-background-animations-4dim</guid>
      <description>&lt;p&gt;Animations are a pretty cool thing, aren't they? They add something extra our websites and make them standout in the crowd! However, coming up the ideas could be quite daunting sometimes and just because you decide to code in html and css (only) does not mean you don't get to spice up your web pages. Here are some amazing ideas to get you started&lt;/p&gt;

&lt;h2&gt;Diagonal Color Gradients&lt;/h2&gt; 

&lt;p&gt;Created by Alison Quaglia&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/hylobates-lar/embed/qBbQeON?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's simple,subtle, easy to code and could create a cool hover effect&lt;/p&gt;

&lt;h2&gt;Sliding Diagonals Background Effect&lt;/h2&gt; 

&lt;p&gt;Created by Chris Smith&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/chris22smith/embed/RZogMa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now unlike the previous example which was subtle, this one is aimed at grabbing your attention&lt;/p&gt;

&lt;h2&gt;CSS only animated background&lt;/h2&gt; 

&lt;p&gt;Created by Nour Ibram&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/nouribram/embed/OzqNvJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Gives the party feeling to an otherwise plain background, doesn't it?&lt;/p&gt;

&lt;h2&gt;October falling leaves&lt;/h2&gt; 

&lt;p&gt;Created by Casthra Demosthene&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/incrediblecast/embed/yLBmVXQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;Pattern Animation (Infinite)&lt;/h2&gt;

&lt;p&gt;Created by Adam Abundis&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/adamabundis/embed/PoYgvYQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thank you &lt;code&gt;@keyframes&lt;/code&gt; for the infinite scroll😁&lt;/p&gt;

&lt;h2&gt;Awesome Animated background&lt;/h2&gt;

&lt;p&gt;Created by Beshoy Ekram&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/beshoooo/embed/jmbGNd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Could you just take a moment to appreciate how attractive the animation is?. The color mixture very pleasant and appealing yet does not take attention away from title in the front end.&lt;/p&gt;

&lt;h2&gt;Animated forest background&lt;/h2&gt; 

&lt;p&gt;Created by Carpe numidium&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/carpenumidium/embed/vNNzyG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;Floating cubes&lt;/h2&gt; 

&lt;p&gt;Created by Mohammad Abdul Mohaiman&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/mohaiman/embed/MQqMyo?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I used this animation in my last &lt;a href="https://dev.to/babib/freecodecamp-project-done-4-a-technical-documentation-page-32kb"&gt;post&lt;/a&gt;. Yup it's dope!😀&lt;/p&gt;

&lt;h2&gt;Sépion CSS background animation 2&lt;/h2&gt; 

&lt;p&gt;Created by Sépion&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Sepion/embed/ZQJyeq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Sublte😏&lt;/p&gt;

&lt;h2&gt;Floating Cloud Background&lt;/h2&gt;

&lt;p&gt;Created by Shaw&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shshaw/embed/DxJka?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I know I said pure CSS but when I saw this CSS(Less) animation, I figured you'll like it too😏&lt;/p&gt;

&lt;p&gt;I do hope these ideas serve as a kick. Feel free to play around with these CodePens and make them your own! This is also just a small sample of ideas; the web is a treasure trove of infinite possibilities.&lt;/p&gt;

&lt;p&gt;Happy coding! 😊&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;                                                 💞 Babi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>codepen</category>
      <category>codequality</category>
    </item>
  </channel>
</rss>
