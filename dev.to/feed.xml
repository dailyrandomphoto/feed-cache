<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Moving Up In Technical Leadership</title>
      <author>Shariq</author>
      <pubDate>Wed, 01 Dec 2021 19:21:34 +0000</pubDate>
      <link>https://dev.to/shariq/moving-up-in-technical-leadership-5egl</link>
      <guid>https://dev.to/shariq/moving-up-in-technical-leadership-5egl</guid>
      <description>&lt;p&gt;Many paths lead to the top of the mountain that is technical leadership and it all starts with the definition of the term. We will define technical leadership as a position where an individual leads a team and focuses on the details of a project along with the overall implementation. Today's leaders need to pay attention to the part where a technical leader is still focusing on the details. The nitty-gritty details are, if anything, even more so the responsibility of a technical leader than they were of an independent contributor. An individual in the role will need to take the on responsibilities of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Making sure their team is up to speed on¬†defined best practices.&lt;/li&gt;
&lt;li&gt;Ensuring the quality of code meets¬†defined¬†expectations.&lt;/li&gt;
&lt;li&gt;Training their team to prepare them for the responsibilities that will help progress their careers over a¬†defined¬†career lattice.&lt;/li&gt;
&lt;li&gt;Managing¬†defined stakeholder expectations.&lt;/li&gt;
&lt;li&gt;Delivering a full-scale implementation of a feature or product as¬†defined¬†by stakeholders.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#technical-lead-roles-and-responsibilities"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Technical Lead Roles and Responsibilities&lt;/strong&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Leaders must provide structure and definition to be able to effectively support their teams and deliver excellent products and features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That‚Äôs quite a lot of responsibility on the shoulders of one individual, isn‚Äôt it? But defining technical leadership isn't the penultimate goal of this post. This article is for individuals who have started tackling all of these responsibilities and have embraced the role. How does a technical leader move up in their role? The answer roundaboutedly lies in these initial responsibilities. The most surprising aspect of technical leadership is that it is much less technical than one expects in today‚Äôs technology spheres. Each of the individual responsibilities and how they can be used to move up will be covered below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-sure-your-team-is-up-to-speed-on-best-practices"&gt;
  &lt;/a&gt;
  Making Sure Your Team Is Up To Speed on Best Practices
&lt;/h2&gt;

&lt;p&gt;The responsibility for clearly setting details of a project for the stakeholder fall to the technical lead. They will be the main point of contact and will need to be up to date on all the technical measures of said project. If a technical lead is not well practiced in the necessary technologies, they can not expect any other behavior from their team. First, the Lead must ensure that they are at an expert level in the skills needed on a project. Once that is done, ensure that they can constantly work with their team to get them as close to that same level as possible. The buck stops with the technical lead. If they can maintain their's and their team's expertise, it will undoubtedly show that they contain the knowledge to not simply better themselves, but those around them. There‚Äôs not a quality I would rank higher than this when it comes to any sort of leadership.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ensuring-the-quality-of-code-meets-expectations"&gt;
  &lt;/a&gt;
  Ensuring the Quality of Code Meets Expectations
&lt;/h2&gt;

&lt;p&gt;Ensuring high-quality code cannot be overstated and goes hand in hand with the above responsibility of keeping a team up to speed on best practices. If a team is well-versed in the necessary technologies, the chances of higher code quality increase substantially and make the leadership role easier.&lt;/p&gt;

&lt;p&gt;One way in which I learned to tackle these first two responsibilities two was to hold ad-hoc tech talks or lunch and learns with an open forum for the team to ask questions relevant to the current project. This has a two-fold effect in that it helped me learn what the team did not know coupled with allowing me to further support and educate them on those topics. It also had the unintended effect of building camaraderie with my team and potentially others at my place of work. Leads should always feel free to extend the invitation to other teams that could benefit from the information that you have to share.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#training-your-team-to-prepare-them-for-the-responsibilities-that-will-help-progress-their-careers"&gt;
  &lt;/a&gt;
  Training Your Team to Prepare Them for the Responsibilities that Will Help Progress Their Careers
&lt;/h2&gt;

&lt;p&gt;The world of software development is increasingly social and career growth also depends on individuals taking full advantage of this fact. There are only so many roles that let someone excel at technology and continue onto leadership without embracing a team. Technical leaders must learn to individually tailor guidance for each team member. The above two topics help with the technical grooming, but leads must go further and help team members identify their own weaknesses and strengths and build upon them. This is where the most pertinent aspects of leadership are seen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#managing-stakeholder-expectations"&gt;
  &lt;/a&gt;
  Managing Stakeholder Expectations
&lt;/h2&gt;

&lt;p&gt;Communication with stakeholders is the most paramount skill that can be attained in the realm of software leadership. Whether focusing on an internal project, a high-profile client, or even just an individual project, it‚Äôs key to manage these expectations. As developers estimate stories early in their careers, they're able to get away with miscalculations and misses on demo day because leaders are taking the heat or because they had already managed the expectations to the stakeholders prior to demo day.&lt;/p&gt;

&lt;p&gt;For leaders in these situations, it goes further than estimation - they have to begin to look at implementation and delivery on an agreed-upon date and timeframe. As an expert, technical leaders must be able to identify the total effort needed on a project, the dates that stories and the final product will be delivered, and any roadblocks - all at the inception of a project and convince the stakeholder that the team will need the estimated time to deliver.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#delivering-fullscale-implementations-as-agreed-upon-with-stakeholders"&gt;
  &lt;/a&gt;
  Delivering Full-Scale Implementations as Agreed Upon with Stakeholders
&lt;/h2&gt;

&lt;p&gt;Meeting deadlines with technical excellence in the project code and management all lead to this final responsibility. Just like dominos, every topic interconnects and can make or break another responsibility. The above four responsibilities all tie into the final one of delivering full-scale implementations as agreed up with stakeholders. If leaders have successfully managed the responsibilities above, they will be able to focus on the larger implementation and delivery.&lt;/p&gt;

&lt;p&gt;What it all comes down to is playing these dominos correctly so that each of these responsibilities can be handled expertly. But ‚Äúhandling‚Äù does not mean that leads get to solo the effort and only rely on themselves. At this point in a developer's career, they‚Äôve ideally built up a network and strong team to support their responsibilities. Leads manage those around them and make them better all while managing the other flip side of the coin with the stakeholders. If leads can trust their teams, and thus trust their own ability in keeping their team motivated and skilled, and if they can effectively manage client expectations and delivery, they will have mastered the tools needed to move up in technical leadership.&lt;/p&gt;

</description>
      <category>engineering</category>
      <category>leadership</category>
      <category>engineeringmanagement</category>
    </item>
    <item>
      <title>TypeScript used to be on my $#!% üí© list  </title>
      <author>Niico</author>
      <pubDate>Wed, 01 Dec 2021 19:20:44 +0000</pubDate>
      <link>https://dev.to/shecodez/typescript-used-to-be-on-my-list-42l9</link>
      <guid>https://dev.to/shecodez/typescript-used-to-be-on-my-list-42l9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#javascript-js"&gt;
  &lt;/a&gt;
  JavaScript (JS)
&lt;/h2&gt;

&lt;p&gt;JS - a high-level, ECMAScript, interpreted / just-in-time compiled programming language developed by Brendan Eich of Netscape. Not to be confused with &lt;a href="https://dev.java/"&gt;Java&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript was initially created to ‚Äúmake web pages alive‚Äù.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;well known - JS is almost as old as the internet&lt;/li&gt;
&lt;li&gt;JS is an OOP (object oriented programming) language&lt;/li&gt;
&lt;li&gt;JS is single-threaded&lt;/li&gt;
&lt;li&gt;but JS is weakly and dynamically typed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üë©üèΩ‚Äçüíª (me): Good ol' &lt;a href="https://www.javascript.com/"&gt;JavaScript&lt;/a&gt;, what more can I say about one of the worlds most popular scripting language? üåé (world): &lt;strong&gt;Learn to &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; or GTFO&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So I started learning TypeScript. Not gonna lie it was so painful in the beginning. I hadn't been working with JS long enough, understand JS well enough, or become annoyed enough by all the silly JS errors / browser compatibility issues to applicate something like TS. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thus, TS &lt;strong&gt;was&lt;/strong&gt; very much so on my üí© list, but I have since seen the light. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#typescript-ts"&gt;
  &lt;/a&gt;
  TypeScript (TS)
&lt;/h2&gt;

&lt;p&gt;TS - a strongly typed programming language developed by Microsoft that builds on JavaScript, giving you better tooling at any scale.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#editor-checks"&gt;
  &lt;/a&gt;
  Editor Checks
&lt;/h3&gt;

&lt;p&gt;Suddenly debugging was less of a nightmare with editor checks, because if TS doesn't like it, it wont compile.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
  id: l334,
  firstName: "Nicole",
  lastName: "Nobles",
  job: "Web developer",
}

console.log(user.name)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;JS doesn't know to alert me that user doesn't have a name property.&lt;/p&gt;

&lt;p&gt;but with TS I get an error:&lt;br&gt;
&lt;code&gt;Property 'name' does not exist on type { firstName: string; lastName: string; job: string }&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#autocomplete"&gt;
  &lt;/a&gt;
  Auto-complete
&lt;/h3&gt;

&lt;p&gt;No more guessing what properties are on an object.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#interfaces"&gt;
  &lt;/a&gt;
  Interfaces
&lt;/h3&gt;

&lt;p&gt;If I made a User interface I can't add / remove any required properties to the object. &lt;/p&gt;

&lt;p&gt;*Note: adding &lt;code&gt;?&lt;/code&gt; after a property makes it optional.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;interface User {
  id: number
  firstName: string
  lastName: string
  job: string
  remote?: boolean
}

function updateUser(id: number, update: Partial&amp;lt;User&amp;gt;) {
  const data = getUser(id)
  const user = { ...data, ...update, city: "Hachi≈çji" }
  saveUser(id, user)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TS will rightfully complain that 'city' does not exist on interface 'User'.&lt;/p&gt;

&lt;p&gt;This only the tip of the TS iceberg. Don't take my word for it, you can check out the documentation &lt;a href="https://www.typescriptlang.org/docs/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Once given a proper chance TypeScript has been amazingly helpful at saving me time and hard ache with features Editor Check, Auto-complete, and Interfaces. I won't lie sometimes I just slap &lt;code&gt;any&lt;/code&gt; on things and call it a day, but it eats away at me until I get it typed like the rest of the project. &lt;/p&gt;

&lt;p&gt;So, &lt;strong&gt;Keep calm, and Type(Script) on&lt;/strong&gt;. Thanks for reading! üòä &lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Welcome Thread - v153</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 01 Dec 2021 19:15:04 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v153-36c0</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v153-36c0</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/xT1XGDKwOxacd92rYI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT1XGDKwOxacd92rYI/giphy.gif" alt="Cow saying hi" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. üëã &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>AWS Just Announced that the Future is Serverless at re:Invent ‚Äî Day 3</title>
      <author>Brian H. Hough</author>
      <pubDate>Wed, 01 Dec 2021 19:10:27 +0000</pubDate>
      <link>https://dev.to/aws-builders/aws-just-announced-that-the-future-is-serverless-at-reinvent-day-3-14pe</link>
      <guid>https://dev.to/aws-builders/aws-just-announced-that-the-future-is-serverless-at-reinvent-day-3-14pe</guid>
      <description>&lt;p&gt;We just wrapped up Day 3 of Amazon Web Services (AWS) re:Invent and there were a ton of announcements! AWS CEO Adam Selipsky delivered the opening keynote and announced a number of exciting updates and announcements, including Amazon Private 5G (imagine building your own 5G network - how cool is that?!)...Amazon SageMaker Canvas for low-code machine learning in the cloud...and a great analysis of what a modern data strategy looks like.&lt;/p&gt;

&lt;p&gt;Additionally, I share insights from AWS' David Yanacek about how he builds operational excellence for his teams in an agile way for developers and DevOps engineers at Amazon. Finally, I go through a theme park app I built at one of the workshops üòä &lt;/p&gt;

&lt;p&gt;In this episode of the &lt;a href="https://www.youtube.com/watch?v=IOwKhN4Q49s" rel="noopener noreferrer"&gt;Tech Stack Playbook&lt;/a&gt;, I'll be sharing more about AWS re:Invent - the year's largest global tech conference that brings together leaders, builders, innovators, and creators from cloud, DevOps, serverless, app development, and software engineering from all around the world.&lt;/p&gt;

&lt;p&gt;In this blog post and the blog posts to come this week, my hope is to vlog through the entire week and share all that I'm learning and building with you all so whether you are attending virtually or in person, this AWS re:Invent series on the Tech Stack Playbook will help you gain skills, level up in tech, and boost your software engineering abilities from the sessions I'm attending throughout the conference.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a glance at what you‚Äôll learn in this blog post:&lt;br&gt;
üëâ  What AWS re:Invent is all about&lt;br&gt;
üëâ  Traveling to Las Vegas for the year's largest tech conference&lt;br&gt;
üëâ  What I'll be learning about and building this week&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IOwKhN4Q49s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's going to be a major week for cloud and tech in general, so I am so excited to bring you along for the ride.&lt;/p&gt;

&lt;p&gt;What do you want to know about AWS, serverless, and DevOps? üí≠&lt;/p&gt;

&lt;p&gt;Let me know in the comments below! ‚¨áÔ∏è&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-out-the-full-recording-below"&gt;
  &lt;/a&gt;
  Check out the full recording below:
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IOwKhN4Q49s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let me know if you found this post helpful! And if you haven't yet, make sure to check out these free resources below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Follow my Instagram for more: &lt;a href="https://instagram.com/brianhhough" rel="noopener noreferrer"&gt;@BrianHHough&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Watch my latest &lt;a href="https://youtube.com/brianhhough" rel="noopener noreferrer"&gt;YouTube video for more&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;Listen to my Podcast on &lt;a href="https://podcasts.apple.com/us/podcast/tech-stack-playbook/id1553712082" rel="noopener noreferrer"&gt;Apple Podcasts&lt;/a&gt; and &lt;a href="https://open.spotify.com/show/01bHbabSyBmPfbc3ORMZa9?si=av_16aPbQEqL_bVu3RnO0g" rel="noopener noreferrer"&gt;Spotify&lt;/a&gt;&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join my FREE &lt;a href="https://facebook.com/groups/techstackplaybook" rel="noopener noreferrer"&gt;Tech Stack Playbook Facebook Group&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's digitize the world together! üöÄ&lt;/p&gt;

&lt;p&gt;-- Brian&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>devops</category>
    </item>
    <item>
      <title>Build 30 JavaScript projects in 30 days:Day 0</title>
      <author>prachigarg19</author>
      <pubDate>Wed, 01 Dec 2021 19:09:51 +0000</pubDate>
      <link>https://dev.to/prachigarg19/build-30-javascript-projects-in-30-daysday-0-2m8j</link>
      <guid>https://dev.to/prachigarg19/build-30-javascript-projects-in-30-daysday-0-2m8j</guid>
      <description>&lt;p&gt;This is building 30 projects in 30 days series. I'll be following Wes Bos Javascript30 course for this challenge,the link to which is: &lt;a href="https://javascript30.com/"&gt;https://javascript30.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'll be sharing my approach in every article which may or may not be same as the one mentioned in his videos.&lt;/p&gt;

&lt;p&gt;Before starting with this series I recommend you to download the starter files in your device, the link to which is &lt;a href="https://github.com/wesbos/JavaScript30"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;u&gt;Process to download starter files -&amp;gt;&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Fork&lt;/strong&gt; the repo by clicking the option in the top right.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Clone repo:&lt;/strong&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2.a. If you have &lt;u&gt;github desktop&lt;/u&gt; installed (which I recommend as it is easier to work with), click on the green colored 'code' option and then click open with gitub desktop. Now the application will automatically clone the repo to your device. &lt;/p&gt;

&lt;p&gt;2.b. &lt;u&gt;Using git bash:&lt;/u&gt; Refer to this &lt;a href="https://git-scm.com/book/en/v2/Git-Basics-Getting-a-Git-Repository"&gt;article&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now go to the folder where repo has been cloned and congrats there is your starter package! You can copy and paste all the sounds,images etc. to your project folder as per your requirements and use them in your projects.&lt;/p&gt;

&lt;p&gt;This is it for today. In my next article, I will discuss the first project, which is a DrumKit.&lt;/p&gt;

&lt;p&gt;If you have any doubts or suggestions please do let me know in the comment section. I'll be more than happy to interact with you. &lt;/p&gt;

&lt;p&gt;If you like this series and want to be a part if it, do consider following me at &lt;a class="mentioned-user" href="https://dev.to/prachigarg19"&gt;@prachigarg19&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading. :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>üåü Biggest ‚ÄúOnline Tools‚Äù Collection: 10015.io üß∞</title>
      <author>Fatih Telis</author>
      <pubDate>Wed, 01 Dec 2021 19:09:05 +0000</pubDate>
      <link>https://dev.to/fatihtelis/biggest-online-tools-collection-10015io-3gbf</link>
      <guid>https://dev.to/fatihtelis/biggest-online-tools-collection-10015io-3gbf</guid>
      <description>&lt;p&gt;Hi üëã,&lt;/p&gt;

&lt;p&gt;I'm &lt;a href="https://fatihtelis.com"&gt;Fatih&lt;/a&gt;, a frontend developer based in Istanbul and this is the short story of my project: 10015.io.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://10015.io"&gt;10015.io&lt;/a&gt; is an &lt;strong&gt;online toolbox&lt;/strong&gt; project I've been working on for a while. Since I'm a &lt;em&gt;frontend developer&lt;/em&gt;, I've been using many online tools while I'm working. I'm also a bookmark type of guy where I organize all my bookmarks under specific folders. The longest folder I had on my bookmarks toolbar was "Tools" folder previously. At some point, I asked myself "What is going on?". Clearly, there is something wrong with that folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nIX5ccSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2frihfhu06frgiovw0o.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nIX5ccSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w2frihfhu06frgiovw0o.jpeg" alt="Something wrong" width="487" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the point where I decided to create an online toolbox. There are some reasons behind this decision.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-i-decided-to-create-an-online-toolbox"&gt;
  &lt;/a&gt;
  üí° Why I decided to create an online toolbox?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;There isn't any nice toolbox which contains every tool I need.&lt;/li&gt;
&lt;li&gt;UI/UX of almost all online tools are really bad.&lt;/li&gt;
&lt;li&gt;It is hard the find the tool I need instantly.&lt;/li&gt;
&lt;li&gt;It will be a good challenge for me to discover how this types of tools are developed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After I made my decision, I started to think about the brand name of the project. As many of you experienced before, almost all generic domains were already bought by domain brokers. So, I need to find a short &amp;amp; catchy as well as smart brand name. Then, a light bulb went on my head and I found 10015. If you look closer to the logo, you will see why I chose this brand name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tnm_g6Sh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dadkeqwquv7p06eolkt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tnm_g6Sh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dadkeqwquv7p06eolkt.png" alt="10015 Online Tools Logo" width="360" height="105"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have a prediction about why I chose 10015 as brand name, just comment and I will send you a 1-year free membership. (Ohh sorry, 10015.io is already free! üôÉ)&lt;/p&gt;

&lt;p&gt;I developed 2 extension for 10015.io, one is for Chrome and one is for Firefox. You can use these extensions for accessing the tools instantly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/online-tools-by-10015io/afbphoagjpegnkpeiliacmiiggojdabo"&gt;Chrome Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://addons.mozilla.org/tr/firefox/addon/online-tools-by-10015-io/"&gt;Firefox Extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are 50 &lt;a href="//10015.io"&gt;online tools&lt;/a&gt; in 10015.io right now and I'm adding new tools regularly. I have a list on Notion for upcoming tools which are added as a result of either my needs or requests I get via 10015 contact page. &lt;/p&gt;

&lt;p&gt;I set some goals and milestones for 10015.io. Here is my roadmap.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#roadmap"&gt;
  &lt;/a&gt;
  üõ£Ô∏è Roadmap
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;50 Tools -&amp;gt; Write some articles and post stuff on social media&lt;/li&gt;
&lt;li&gt;64 Tools -&amp;gt; Post on Product Hunt&lt;/li&gt;
&lt;li&gt;128 Tools -&amp;gt; Post on Product Hunt as v2&lt;/li&gt;
&lt;li&gt;256 Tools -&amp;gt; Post on Product Hunt as v3&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My aim is to make 10015.io the biggest free online toolbox in web, so I decided to use a pretentious title like this for my article as a motivation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tech-stack"&gt;
  &lt;/a&gt;
  üíª Tech Stack
&lt;/h3&gt;

&lt;p&gt;I'm using Next.js (A React Framework) along with styled-components for styling &amp;amp; theming. I'm not using a UI library for components, all are written specifically for this project. Almost all tools are working on client-side only. There are very few of them making API requests to server.&lt;/p&gt;

&lt;p&gt;If you have any comments about 10015.io, feel free to write on comment section or you can directly contact with me.&lt;/p&gt;

&lt;p&gt;I will post some articles about the tools individually; how I made them and what I've learnt while I was creating the tools. If you want to get notified, just follow me!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tooling</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>I broke production 3 times in 3 weeks - Part II</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 01 Dec 2021 19:02:49 +0000</pubDate>
      <link>https://dev.to/sandordargo/i-broke-production-3-times-in-3-weeks-part-ii-4c4a</link>
      <guid>https://dev.to/sandordargo/i-broke-production-3-times-in-3-weeks-part-ii-4c4a</guid>
      <description>&lt;p&gt;Last week I shared with you that despite that I consider myself a careful coder, &lt;a href="https://dev.to/sandordargo/i-broke-production-3-times-in-3-weeks-part-i-35n1"&gt;I managed to break production several times in a row&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It can happen to anyone, though one shouldn't forget about his responsibility leading to such events.&lt;/p&gt;

&lt;p&gt;We can complain about how useless the test systems are, we can blame the reviewers, but at the end of the day, the code was written by one person. In these cases, by me.&lt;/p&gt;

&lt;p&gt;Last week, I shared how I slipped and introduced undefined behaviour by not initializing a pointer correctly. Now let's continue with two other stories, with two other bugs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-memory-leak"&gt;
  &lt;/a&gt;
  A memory leak
&lt;/h2&gt;

&lt;p&gt;Another issue I introduced was once again about pointers. A very knowledgeable C++ engineer told me recently for a good reason that for dynamic memory management you should always use smart pointers, but it's even better if you can avoid using dynamic allocations at all.&lt;/p&gt;

&lt;p&gt;So in one of another monster classes, I found a pointer that was initialized to &lt;code&gt;nullptr&lt;/code&gt; in the initializer list, some objects were assigned to it at many different places and at the end, in the destructor, it was not deleted and I couldn't find where it was cleaned up. A memory leak - unless I missed the cleanup.&lt;/p&gt;

&lt;p&gt;The pointer was passed to another object several times, it updated the pointed object and then it was taken back.&lt;/p&gt;

&lt;p&gt;Somehow like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;aStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;STATUS&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;UNDEFINED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;aService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyService&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="n"&gt;aService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_serviceAdapter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;aStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// should now contain the right data!&lt;/span&gt;
&lt;span class="n"&gt;m_serviceAdapter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;static_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyServiceAdapter&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAdapter&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All problems can be avoided by using smart pointers.&lt;/p&gt;

&lt;p&gt;A very easy option could have been using a shared pointer, but I didn't want to do it for two reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;MyService&lt;/code&gt; lives in another repository and it takes about a day to change, review and deliver a new version (and this is such a lousy reason!)&lt;/li&gt;
&lt;li&gt;in most cases where you use a shared pointer, it's not necessary. It's simply the easier road to take. I didn't want to take the easier road.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I went on using a unique pointer, &lt;code&gt;m_serviceAdapter&lt;/code&gt; became a &lt;code&gt;std::unique_ptr&amp;lt;MyServiceAdapter&amp;gt;&lt;/code&gt; instead of &lt;code&gt;MyServiceAdapter*&lt;/code&gt; and I changed the code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;aStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;STATUS&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;UNDEFINED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;aService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyService&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="n"&gt;aService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m_serviceAdapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;aStatus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// should now contain the right data!&lt;/span&gt;
&lt;span class="n"&gt;m_serviceAdapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;static_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MyServiceAdapter&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAdapter&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt; &lt;span class="c1"&gt;//2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;My reasoning was that at &lt;code&gt;// 1&lt;/code&gt;, we don't want to own the service adapter anymore, we pass the ownership to the service - even if we happen to know that it won't delete it, it'll just give back the ownership a few lines later.&lt;/p&gt;

&lt;p&gt;At step &lt;code&gt;// 2&lt;/code&gt;, we just reset the local adapter from the other service's adapter. All is fine, right?&lt;/p&gt;

&lt;p&gt;At step 1, we released the ownership and at step 2 we got it back.&lt;/p&gt;

&lt;p&gt;What can go wrong?&lt;/p&gt;

&lt;p&gt;What if &lt;code&gt;MyServiceAdapter&lt;/code&gt; assigns another pointer without deleting what it got? It's a memory leak, but it's a problem in &lt;code&gt;MyServiceAdapter&lt;/code&gt;, not at the call place.&lt;/p&gt;

&lt;p&gt;So we could argue that all is fine.&lt;/p&gt;

&lt;p&gt;There were about 5-6 functions following the above pattern. But there was another one where there was only the release part, there was no reset.&lt;/p&gt;

&lt;p&gt;And with this, I clearly introduced a memory leak and it required a fallback!&lt;/p&gt;

&lt;p&gt;So how it is possible that from a small memory leak we went to a bigger one?&lt;/p&gt;

&lt;p&gt;That's something I still don't understand. I think that with the above change I should have reduced the memory leak because in most cases the pointer got deleted - unlike before. Yet, the stats from production was very clear.&lt;/p&gt;

&lt;p&gt;The takeaways for this second issue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When it comes to memory management, be extra cautious.&lt;/li&gt;
&lt;li&gt;Don't go with half solutions. If you assume you pass ownership, go all way through the chain and fix the whole flow.&lt;/li&gt;
&lt;li&gt;Use valgrind more to understand better what happens to your allocated memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#know-your-tools"&gt;
  &lt;/a&gt;
  Know your tools
&lt;/h2&gt;

&lt;p&gt;This last one will be shorter, probably a bit less technical. Do you know this meme?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EGMHmcBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/%7B%7B%20site.baseurl%20%7D%7D/assets/img/works-doesnt-work.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EGMHmcBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/v1/%7B%7B%20site.baseurl%20%7D%7D/assets/img/works-doesnt-work.jpg" alt="Works - does not work" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think this is a great one, and what you can see on the bottom half is actually a quite frequent situation.&lt;/p&gt;

&lt;p&gt;Why do I say so?&lt;/p&gt;

&lt;p&gt;You have some piece of code that doesn't work and you have no idea why. Then you fix it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you even think it through? Do you understand why it works?&lt;/li&gt;
&lt;li&gt;If so, great! But what if not? Do you keep investigating? Or do you simply move on to the next issue?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm not here to judge. Often, we don't have time to continue the investigation and we must take things in the pipe. But it has a serious implication.&lt;/p&gt;

&lt;p&gt;Often, what works will not function because it's the good solution. I wouldn't even call it a good enough solution. Sometimes it's just a brittle repair that happens to work under the given circumstances, but it can break any time.&lt;/p&gt;

&lt;p&gt;C++ still doesn't have a build management system that would be the de-facto standard, many companies have their own one, just like us. Therefore I will not go into deep technical details of what happened, but I give you a more high-level view.&lt;/p&gt;

&lt;p&gt;Some dependencies were grouped into a package and I made the necessary updates in our descriptors. We were already depending on several packages which were pretty much listed in alphabetical order. By the way, the two most important packages happened to be at the beginning of this sorting.&lt;/p&gt;

&lt;p&gt;So I updated the dependencies, put the package in its alphabetical place, then I ran launched the build and the tests. They were all fine.&lt;/p&gt;

&lt;p&gt;We loaded into test systems. Nobody raised a word.&lt;/p&gt;

&lt;p&gt;Later, we loaded into production. People started to complain.&lt;/p&gt;

&lt;p&gt;We broke our stats collector.&lt;/p&gt;

&lt;p&gt;We understood quickly that it's coming from the load so we did a fallback. But what could it be?&lt;/p&gt;

&lt;p&gt;I was preparing for an important and high-risk change and I didn't want to mix it with a routine version update, so I performed this version update separately.&lt;/p&gt;

&lt;p&gt;Even that broke our software?&lt;/p&gt;

&lt;p&gt;I changed two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I updated the versions of some of our dependencies &lt;/li&gt;
&lt;li&gt;And I changed from where we take those exact same dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I checked the release notes, the source code of our dependencies. Nothing.&lt;/p&gt;

&lt;p&gt;I checked with the maintainers of the package, they had no idea.&lt;/p&gt;

&lt;p&gt;I checked the documentation of the build management system and it had nothing on the order of the dependencies.&lt;/p&gt;

&lt;p&gt;But as we were out of ideas, we changed the order and lo and behold, that actually worked.&lt;/p&gt;

&lt;p&gt;The order of the included dependencies matters when it comes to resolving some non-matching versions.&lt;/p&gt;

&lt;p&gt;Many things made this investigation more painful than it should have been:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the problem was not noticed before the production load, even though it was visible in test already for the users&lt;/li&gt;
&lt;li&gt;it's not reproducible in local, so there was only a very limited number of chances to try something new each day &lt;/li&gt;
&lt;li&gt;the documentation is clearly incomplete on how versions are inferred&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What are the lessons learned?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Things only work by chance more often than you think&lt;/li&gt;
&lt;li&gt;If you want to grow to the next level, take time to understand your tools&lt;/li&gt;
&lt;li&gt;If you are unsure about your changes, take baby steps and validate them as soon as possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Often, things are accidentally working and they can break anytime! You can break them with the best intention, even when you think you introduce some changes that you consider technical improvements. I'd go even further, those are the moments when it's the easiest to break the system; when you are convinced that you are delivering improvements.&lt;/p&gt;

&lt;p&gt;My advice is to take time to understand what exactly are you doing and don't be afraid of taking baby steps. The smaller the iterations, the easier it will be to understand and debug.&lt;/p&gt;

&lt;p&gt;And if shit happens, don't be discouraged. Keep improving the system!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cpp</category>
      <category>virtual</category>
      <category>pointers</category>
      <category>dependencies</category>
    </item>
    <item>
      <title>Get rid of try-catch in server-side development, here's a better way!</title>
      <author>Muzammil</author>
      <pubDate>Wed, 01 Dec 2021 17:32:55 +0000</pubDate>
      <link>https://dev.to/earthboundmisfit/get-rid-of-try-catch-in-server-side-development-heres-a-better-way-2im6</link>
      <guid>https://dev.to/earthboundmisfit/get-rid-of-try-catch-in-server-side-development-heres-a-better-way-2im6</guid>
      <description>&lt;p&gt;&lt;strong&gt;PS: This write-up goes well with node.js or express.js development&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;We'll go knocking on the try-catch statement door whenever we encounter an asynchronous function in javascript - the traditional way. It is and will always be the backbone to handling async-await functions in server-side development.&lt;br&gt;
It has been of great help when we had to avoid the callback function and got us out of callback hell several times.&lt;/p&gt;

&lt;p&gt;But what if we can enhance this and make the try-catch statements shorter and cleaner. Here goes our typical way of handling things.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;async function main(req, res, next) {
  try {
    var result = await doSomething();
    console.log(result);
  } catch (error) {
    console.error(error);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Being Javascript developers, we are familiar with the above code, &lt;code&gt;result&lt;/code&gt; is printed to the console if everything goes smooth or else &lt;code&gt;error&lt;/code&gt; gets printed - üç∞&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-cleaner-alternative"&gt;
  &lt;/a&gt;
  A Cleaner Alternative
&lt;/h3&gt;

&lt;p&gt;Say if we're using Express framework and handling requests using try-catch, here's something cleaner and simpler that can be replaced for the never-ending lengthy statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const catchAsync = (fn) =&amp;gt; (req, res, next) =&amp;gt;{
    Promise.resolve(fn(req, res, next)).catch((err) =&amp;gt; next(err));
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;catchAsync&lt;/code&gt; function can be considered as a middleware that just accepts the parameters (req, res, next). If there's any error, then it returns the error.&lt;/p&gt;

&lt;p&gt;This is how we can call our enhanced error catching function to avoid try-catch statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const sampleFunction = catchAsync(async (req, res) =&amp;gt; {
           const awaitedResponse = await getResponse();
           res.send(awaitedResponse);
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;catchAsync&lt;/code&gt; can be called anywhere we need to implement our traditional try-catch logic. Let's keep enhancing our good old lengthy statements and make javascript simpler for budding developers&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>üî• 3 Coisinhas Legais  do ES12 (JavaScript 2021) üåü</title>
      <author>Lu√≠s Von Muller</author>
      <pubDate>Wed, 01 Dec 2021 17:24:23 +0000</pubDate>
      <link>https://dev.to/luisvonmuller/3-coisinhas-legais-do-es12-javascript-2021-65e</link>
      <guid>https://dev.to/luisvonmuller/3-coisinhas-legais-do-es12-javascript-2021-65e</guid>
      <description>&lt;p&gt;Foram trazidas a vida no JavaScript (&lt;strong&gt;ECMAScript&lt;/strong&gt;) em 2021 v√°rias novas op√ß√µes de sintaxe e outros (&lt;strong&gt;ES12&lt;/strong&gt;), separei &lt;strong&gt;3&lt;/strong&gt; aqui √† n√≠vel &lt;strong&gt;iniciante&lt;/strong&gt; para voc√™ usar em ambiente NodeJs ou similar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;‚ö†Ô∏è Antes de sair usando, por favor meu anjo üòá lembre-se que nem todo navegador vai suportar isso, e n√£o √© para ser exportado por quest√µes de compatibilidade. Por favor. üòÆ‚Äçüí®&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#separador-entre-d%C3%ADgitos-num%C3%A9ricos"&gt;
  &lt;/a&gt;
  üî¢ Separador entre d√≠gitos Num√©ricos:
&lt;/h2&gt;

&lt;p&gt;üëâ Permite usar "_" para separar os n√∫meros facilitando a leitura:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bilhao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;√â um bilh√£o? √â. Mas t√° meio dif√≠cil de visualizar de primeira. Apenas o presidenci√°vel &lt;strong&gt;Ciro Gomes&lt;/strong&gt; iria ver de primeira...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quero ver onde vamos achar, "1 Bilh√£o"? - Gomes, Ciro&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;J√° com o &lt;strong&gt;ES12&lt;/strong&gt; podemos fazer o seguinte:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bilhao&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;_000_000_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;small&gt; Leitura de casas decimais facilitada :) &lt;/small&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#replaceall-substituir-todas-as-ocorr%C3%AAncias-de-uma-string-em-outra"&gt;
  &lt;/a&gt;
  üí¨ replaceAll() - Substituir todas as ocorr√™ncias de uma string em outra.
&lt;/h2&gt;

&lt;p&gt;üëâ Vamos imaginar ü™Ñ que temos a seguinte string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;strExemplo1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Javascript √© alguma coisa, provavelmente Javascript √© uma Linguagem de programa√ß√£o. Javascript n√£o tem nada a ver com Java&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se n√≥s usarmos o m√©todo "replace" para trocar todas as ocorr√™ncias da palavra &lt;strong&gt;Javascript&lt;/strong&gt; por Typescript, ele s√≥ trocaria a primeira.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strExemplo1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Typescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Remove apenas a primeira ocurr√™ncia&lt;/span&gt;
&lt;span class="c1"&gt;// Output: Typescript √© alguma coisa, provavelmente Javascript √© uma Linguagem de programa√ß√£o. Javascript n√£o tem nada a ver com Java&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para fazermos isso precisar√≠amos usar uma Express√£o regular dentro do m√©todo, isto √©: &lt;strong&gt;REGEX&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strExemplo1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Javascript/g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Typescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// Remove todas as ocorr√™ncias.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mas com o ES 12...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;strExemplo1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Javascript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Typescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;üëÄ Sa√≠da da execu√ß√£o (comparativo entre as 3 maneiras)... üëâ&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DPuFEkhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3n9l8kas2ui066c0og0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DPuFEkhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h3n9l8kas2ui066c0og0.png" alt="Output das 3 execu√ß√µes supracitadas" width="880" height="78"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#atribui%C3%A7%C3%A3o-em-nulo-nullish-coalescing-assignment-operator"&gt;
  &lt;/a&gt;
  ü§© Atribui√ß√£o em Nulo - &lt;strong&gt;Nullish Coalescing Assignment Operator&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;üëâ Vamos imaginar ü™Ñ que temos o seguinte c√≥digo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;algumaCoisa&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nada&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, vamos verificar se "nada" √© nulo, e caso for, vamos atribuir o valor de "algumaCoisa" √† ele.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;nothing&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// T√° nulo, recebe 1.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;something&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;something&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Retona true.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ou seja, caso alguma coisa seja nula, recebe um valor informado.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Bom, por hoje √©: s√≥ (‚ó°‚Äø‚ó°‚úø)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Vem pro meu Twitter &amp;amp; muito mais: &lt;a href="https://allmylinks.com/luisvonmuller"&gt;https://allmylinks.com/luisvonmuller&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;small&gt; "Meu est√¥mago acha que todas as batatas s√£o pur√™ de batatas.". &lt;/small&gt;&lt;br&gt;
Beij√£o („Å£Àò–∑(Àò‚å£Àò ) &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>1 line of code: How to shuffle an array</title>
      <author>martin krause</author>
      <pubDate>Wed, 01 Dec 2021 17:20:24 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-shuffle-an-array-2d1a</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-shuffle-an-array-2d1a</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shuffle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns a new array with shuffled items. &lt;/p&gt;

&lt;p&gt;Be aware, that the shuffled items are not truly random because &lt;code&gt;Math.random&lt;/code&gt; will return a pseudo-random number.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-repository-amp-npm-package"&gt;
  &lt;/a&gt;
  The repository &amp;amp; npm package
&lt;/h2&gt;

&lt;p&gt;You can find the all the utility functions from this series at &lt;a href="https://github.com/martinkr/onelinecode"&gt;github.com/martinkr/onelinecode&lt;/a&gt;&lt;br&gt;
The library is also published to &lt;a href="https://www.npmjs.com/package/@onelinecode/onelinecode"&gt;npm as @onelinecode&lt;/a&gt; for your convenience.&lt;/p&gt;

&lt;p&gt;The code and the npm package will be updated every time I publish a new article.&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt; and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codequality</category>
    </item>
    <item>
      <title>A Guide to Data Analytics with DuckDB</title>
      <author>Abid</author>
      <pubDate>Wed, 01 Dec 2021 17:19:41 +0000</pubDate>
      <link>https://dev.to/kingabzpro/a-guide-to-data-analytics-with-duckdb-4j65</link>
      <guid>https://dev.to/kingabzpro/a-guide-to-data-analytics-with-duckdb-4j65</guid>
      <description>&lt;p&gt;The life of a data analyst revolves around loading data through SQL serve, analyzing it using various Python packages, and finally creating the technical report. Sometimes these SQL queries can take a longer time to process as we are dealing with terabytes of data. In this fast-paced world, this strategy fails miserably and most analytics are moving away from traditional ways to doing data analytics. DuckDB solves all the issues, it is integrated with Python &amp;amp; R. It works similarly to SQLite and focuses on providing faster analytical queries.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sample-code"&gt;
  &lt;/a&gt;
  Sample Code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;duckdb&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;‚Äú&lt;/span&gt;&lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;sex&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected_recovery_amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="n"&gt;SUM&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual_recovery_amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;Actual&lt;/span&gt; 
 &lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="n"&gt;bank_data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;
 &lt;span class="n"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;recovery_strategy&lt;/span&gt; &lt;span class="n"&gt;LIKE&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="n"&gt;Level&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;Recovery&lt;/span&gt;&lt;span class="err"&gt;‚Äô&lt;/span&gt;
 &lt;span class="n"&gt;GROUP&lt;/span&gt; &lt;span class="n"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;sex&lt;/span&gt;
 &lt;span class="n"&gt;HAVING&lt;/span&gt; &lt;span class="n"&gt;sex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;‚Äò&lt;/span&gt;&lt;span class="n"&gt;Female&lt;/span&gt;&lt;span class="err"&gt;‚Äô‚Äù&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZG11s1am--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AaBLQxyveMuJf251NY5c4hA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZG11s1am--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AaBLQxyveMuJf251NY5c4hA.png" alt="code result" width="415" height="112"&gt;&lt;/a&gt;&lt;br&gt;
Read full guide on &lt;a href="https://www.analyticsvidhya.com/blog/2021/12/the-guide-to-data-analysis-with-duckdb/"&gt;Analytics Vidhya&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sql</category>
      <category>beginners</category>
      <category>datascience</category>
      <category>analytics</category>
    </item>
    <item>
      <title>Listen to the S7E4 of DevDiscuss: "Should We All Be Thinking About Design Justice?"</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 01 Dec 2021 17:19:28 +0000</pubDate>
      <link>https://dev.to/devteam/listen-to-the-s7e4-of-devdiscuss-should-we-all-be-thinking-about-design-justice-1gm9</link>
      <guid>https://dev.to/devteam/listen-to-the-s7e4-of-devdiscuss-should-we-all-be-thinking-about-design-justice-1gm9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#have-you-accumulated-ethical-and-social-debt-lets-talk-about-it-in-this-weeks-episode-of-devdiscuss"&gt;
  &lt;/a&gt;
  Have you accumulated ethical and social debt? Let's talk about it in this week's episode of DevDiscuss...
&lt;/h2&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s7-e4-should-we-all-be-thinking-about-design-justice"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S7:E4 - Should we all be thinking about design justice?&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s7-e4-should-we-all-be-thinking-about-design-justice" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s7-e4-should-we-all-be-thinking-about-design-justice" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s7-e4-should-we-all-be-thinking-about-design-justice" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s7-e4-should-we-all-be-thinking-about-design-justice" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s7-e4-should-we-all-be-thinking-about-design-justice"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s7-e4-should-we-all-be-thinking-about-design-justice"&gt;
      &lt;img id="episode-profile-image" alt="S7:E4 - Should we all be thinking about design justice?" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;√ó&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Quick refresher ‚Äî DevDiscuss is the first original podcast from DEV all about the burning topics that impact all our lives as developers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Episode Info&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In S7E4, we talk about design justice with some knowledgeable guests! As developers (and designers) this is an important topic to familiarize ourselves with. Let's do it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosts"&gt;
  &lt;/a&gt;
  Hosts:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/ben"&gt;@ben&lt;/a&gt;
 ‚Äî Creator of DEV &amp;amp; Co-Founder of Forem&lt;/li&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/coffeecraftcode"&gt;@coffeecraftcode&lt;/a&gt;
 ‚Äî Developer Advocate at Forem&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#guests"&gt;
  &lt;/a&gt;
  Guests:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://twitter.com/@westiv"&gt;Wesley Taylor&lt;/a&gt;&lt;/strong&gt; is a print maker, graphic designer, musician, animator, educator, mentor, and curator. Wesley roots his practice in performance and social justice. Wesley‚Äôs individual practice is inextricably linked to his collective practices, which consists of a constellation of collectives he has helped form for over 20 years which includes Design Justice Network, Complex Movements, Talking Dolls Detroit. Wesley is currently an Assistant Professor at Virginia Commonwealth University in the Department of Graphic Design.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="http://twitter.com/@boazsender"&gt;Boaz Sender&lt;/a&gt;&lt;/strong&gt; is the founder of Bocoup, an inclusive technology consulting firm. Along with running Bocoup day-to-day, Boaz contributes to other projects related to art, technology, and social justice including Design Justice, StopLAPDSyping, and the Processing Foundation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us know your thoughts on this show in the comments below ‚Äî or on Twitter (&lt;a href="https://twitter.com/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0zcTd9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/qZelsWAXfWpAA/giphy.gif%3Fcid%3Decf05e47ddu6jql6tkj8kvdmj4z5ofal65l38f235ruuinlo%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0zcTd9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/qZelsWAXfWpAA/giphy.gif%3Fcid%3Decf05e47ddu6jql6tkj8kvdmj4z5ofal65l38f235ruuinlo%26rid%3Dgiphy.gif%26ct%3Dg" alt="Speakers" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; ‚Äî or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s7-e4-should-we-all-be-thinking-about-design-justice/id1513053883?i=1000543596560"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/33T9jyk8HQkZoIBbMOXInv"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzUz?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjAvZadjcP0AhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s7e4-should-we-all-be-qF0heZXc4T7/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=168135963"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devpods.herokuapp.com/podcasts/devdiscuss/episodes/233"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season seven sponsors: &lt;a href="https://www.microsoft.com/en-us/dev-community/Event/Register?eventId=DevDiscussPodcast_o7nllI4cp4Vg&amp;amp;ocid=aid3038582"&gt;Microsoft&lt;/a&gt;, &lt;a href="https://developer.newrelic.com/"&gt;New Relic&lt;/a&gt;, &amp;amp; &lt;a href="https://dev.toource=devdiscuss&amp;amp;utm_medium=syndication&amp;amp;utm_campaign=october21"&gt;Vultr&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
    </item>
  </channel>
</rss>
