<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Build A React App Using React Router v6 Without create-react-app</title>
      <author>Jordan Smith</author>
      <pubDate>Tue, 14 Dec 2021 17:10:33 +0000</pubDate>
      <link>https://dev.to/jordan_smith/how-to-build-a-react-app-using-react-router-v6-without-create-react-app-4fe3</link>
      <guid>https://dev.to/jordan_smith/how-to-build-a-react-app-using-react-router-v6-without-create-react-app-4fe3</guid>
      <description>&lt;p&gt;Recently I found myself in the position of needing to start a new React app from scratch, but due to anticipation for future needs of the app it was decided that we wouldn't be using create-react-app. But unfortunately, create-react-app is the only way I knew how to get a React project started. I also knew that we needed to use React Router in the app, and it just so happened that a new version was just released. So off to the internet I went, looking for a tutorial on getting started. I found some helpful links and articles, but I also found that I had to pull different steps from different areas in order to get a process that actually worked together with my setup and versioning. So in the interest of helping the next dev in my position, I decided to document the process I used. Hopefully this will make it much quicker and easier for whoever is reading this today.&lt;/p&gt;

&lt;p&gt;To start off, create a new folder and give it a name (this will end up being the name of the app). Open up the folder and in a terminal type the following command:&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm init -y&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;You should see something similar to the following output&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XMHyNM86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639011959135/OHrqfeN-V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XMHyNM86--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639011959135/OHrqfeN-V.png" alt="Screen Shot 2021-12-08 at 4.28.45 PM.png" width="834" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next you'll create a "dist" folder at the root of your application. In that folder, create a file called index.html. This will be the initial starting HTML file for your application. Copy the following boilerplate into that file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;Sample React App&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id="app"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script src="bundle.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice that inside the body tags there is a div with an id of "app." This is the div that you will eventually reference when telling React where to render everything. You can name it whatever you want, just make sure when you are referencing later on you use the same id the one you specify here.&lt;/p&gt;

&lt;p&gt;Next, we'll install the React dependencies, Webpack and Babel. These are the core dependencies you'll need for a basic React app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react react dom
npm i --save-dev @babel/preset-env react-hot-loader webpack webpack-cli webpack-dev-server @babel/core @babel/preset-react babel-loader
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll install React Router at version 6.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i react-router-dom@6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that everything is installed, we'll add a script allowing us to start the application from the terminal. In package.json, add the following code to the "scripts" section.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"start": "webpack serve --config ./webpack.config.js --mode development --port 3000"&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Your package.json should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "sample-react-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "webpack serve --config ./webpack.config.js --mode development --port 3000"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "dom": "^0.0.3",
    "react": "^17.0.2"
  },
  "devDependencies": {
    "@babel/core": "^7.16.0",
    "@babel/preset-env": "^7.16.4",
    "@babel/preset-react": "^7.16.0",
    "babel-loader": "^8.2.3",
    "react-hot-loader": "^4.13.0",
    "webpack": "^5.65.0",
    "webpack-cli": "^4.9.1",
    "webpack-dev-server": "^4.6.0"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we need to set some Babel presets. In your root directory create a file called .babelrc and put in the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "presets": ["@babel/preset-env", "@babel/preset-react"]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll specify our Webpack presets. Create another file in the root directory called webpack.config.js and put in the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const webpack = require("webpack");
const path = require("path");

module.exports = {
  entry: path.resolve(__dirname, "./src/index.js"),
  module: {
    rules: [
      {
        test: /\.(js|jsx|ts|tsx)$/,
        exclude: /node_modules/,
        use: ["babel-loader"],
      },
    ],
  },
  resolve: {
    extensions: ["*", ".js", ".jsx", ".ts", ".tsx"],
  },
  output: {
    path: path.resolve(__dirname, "./dist"),
    filename: "bundle.js",
  },
  plugins: [new webpack.HotModuleReplacementPlugin()],
  devServer: {
    static: path.resolve(__dirname, "./dist"),
    hot: true,
    historyApiFallback: true,

  },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: if you are not using typescript in your app you can omit the all references to "ts" and "tsx" (found under &lt;em&gt;resolve.extensions&lt;/em&gt; and &lt;em&gt;module.rules.test&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Now we'll create our root React app file. Create a src folder at your root directory and inside make a new file called app.jsx. This will contain the following (I'll explain what all of this is below):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import { BrowserRouter, Routes, Route, Outlet } from "react-router-dom";

const App = () =&amp;gt; {
  return (
    &amp;lt;BrowserRouter&amp;gt;
      &amp;lt;Routes&amp;gt;
        &amp;lt;Route path="/" element={&amp;lt;Layout /&amp;gt;}&amp;gt;
          &amp;lt;Route index element={&amp;lt;Home /&amp;gt;} /&amp;gt;
          &amp;lt;Route path="about" element={&amp;lt;About /&amp;gt;} /&amp;gt;
          &amp;lt;Route path="contact" element={&amp;lt;Contact /&amp;gt;} /&amp;gt;
          &amp;lt;Route path="*" element={&amp;lt;h2&amp;gt;Page Not Found&amp;lt;/h2&amp;gt;} /&amp;gt;
        &amp;lt;/Route&amp;gt;
      &amp;lt;/Routes&amp;gt;
    &amp;lt;/BrowserRouter&amp;gt;
  );
};

export default App;

const Layout = () =&amp;gt; {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1&amp;gt;Welcome to the app&amp;lt;/h1&amp;gt;
      &amp;lt;Outlet /&amp;gt;
    &amp;lt;/&amp;gt;
  );
};

const Home = () =&amp;gt; {
  return &amp;lt;h2&amp;gt;Home&amp;lt;/h2&amp;gt;;
};

const About = () =&amp;gt; {
  return &amp;lt;h2&amp;gt;About&amp;lt;/h2&amp;gt;;
};

const Contact = () =&amp;gt; {
  return &amp;lt;h2&amp;gt;Contact&amp;lt;/h2&amp;gt;;
};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At first glance, it looks like I just threw a massive code block at you just now. But if you break it down, it's simply a component that holds a router with a couple dummy components to get started. You can see that the component is called App and in this component we return a &lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;. This is the built in React Router component that will wrap around whatever routes you add to your app in the future.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt; tag is where we will place all of our Routes. We start with a &lt;code&gt;&amp;lt;Routes&amp;gt;&lt;/code&gt; (note the "s") tag, another React Router component, basically saying "Hey here's a bunch of different routes to look for." Then of course is the &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component, which is where you'll put the actual path and the component to be rendered when that path is hit. I won't go into anymore detail on how these React Router components work. Instead if you want to see a more in depth explanation on how they all work I'd recommend checking out their documentation  &lt;a href="https://reactrouter.com/docs/en/v6"&gt;here&lt;/a&gt;. Their docs are really clear and they explain things much better than I ever could.&lt;/p&gt;

&lt;p&gt;Below that is just a couple simple dummy components, so that something will actually render when you hit each route. You'll notice that layout is the parent route, and it contains an &lt;code&gt;&amp;lt;Outlet&amp;gt;&lt;/code&gt; that renders any children elements (again - see the official documentation for a much better explanation). These of course should be replaced once you start building out your application, and they should probably be split into their own separate files. But for ease of this tutorial I decided to put them all together so you can clearly see what's being rendered and when.&lt;/p&gt;

&lt;p&gt;Finally you'll need to write your ReactDOM renderer component. In your src folder, create a file called index.js. Inside that you'll place the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";
import ReactDOM from "react-dom";
import App from "./app";

ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById("app"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code is what React uses to actually render your entire app. Notice in the document.getElementbyId,  you are using the id "app" that you created in your index.html file at the beginning.&lt;/p&gt;

&lt;p&gt;Now time to check everything out! Run the app using &lt;code&gt;npm start&lt;/code&gt; and then in your browser navigate to &lt;em&gt;localhost:3000&lt;/em&gt;. You should see the &lt;em&gt;home&lt;/em&gt; screen rendered on the page. In the URL bar, add "/about" to the end of the current URL and you'll see the &lt;em&gt;about&lt;/em&gt; page rendered. Switch that to "/contact" for the &lt;em&gt;contact&lt;/em&gt; page. The header from &lt;em&gt;layout&lt;/em&gt; should be shown for all routes.&lt;/p&gt;

&lt;p&gt;And that's it! You now have a basic React app with React Router v6. This is of course only one way to do it, and I'm sure others have other methods, but this is what I've found to be simple and effective to get everything going. &lt;/p&gt;

&lt;p&gt;I hope this helped, and saved you some time in the process! If you want to save even more time and not read through everything - although I do recommend going through the steps and typing everything yourself so you can have a good idea of what's going on - you can go to the GitHub repo  &lt;a href="https://github.com/TechWithJordan/react-app-with-router-quickstart"&gt;here&lt;/a&gt; to get everything in one go.&lt;/p&gt;

&lt;p&gt;Thanks for reading! If this article was helpful, or you have any questions or feedback, feel free to leave a comment!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Responsive Shopping cart for eCommerce website HTML CSS JS</title>
      <author>Sadee</author>
      <pubDate>Tue, 14 Dec 2021 17:01:51 +0000</pubDate>
      <link>https://dev.to/codewithsadee/responsive-shopping-cart-for-ecommerce-website-html-css-js-383g</link>
      <guid>https://dev.to/codewithsadee/responsive-shopping-cart-for-ecommerce-website-html-css-js-383g</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-gEV3znqu8E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;How to make responsive shopping cart for eCommerce website html css javascript.&lt;br&gt;
create a shopping cart page using javascript functionalities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommended-videos"&gt;
  &lt;/a&gt;
  📹 Recommended Videos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/TTrYjLOJeKs"&gt;How to use ionicon&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#essential-links"&gt;
  &lt;/a&gt;
  🔗 Essential links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://drive.google.com/file/d/10cLnh0ECCAoxifoFGObLFQVNxSdHdNm7/view?usp=sharing"&gt;All Images&lt;/a&gt;&lt;br&gt;
&lt;a href="https://fonts.google.com/specimen/Source+Sans+3"&gt;Font - Source Sans 3&lt;/a&gt;&lt;br&gt;
&lt;a href="https://ionic.io/ionicons"&gt;Ionicon&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.patreon.com/posts/source-code-cart-59909583?utm_medium=clipboard_copy&amp;amp;utm_source=copy_to_clipboard&amp;amp;utm_campaign=postshare"&gt;Source Code&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#like-follow-amp-subscribe-me"&gt;
  &lt;/a&gt;
  👤 Like - Follow &amp;amp; Subscribe Me
&lt;/h2&gt;

&lt;p&gt;Twitter : &lt;a href="https://twitter.com/codewithsadee"&gt;https://twitter.com/codewithsadee&lt;/a&gt;&lt;br&gt;
Github : &lt;a href="https://github.com/codewithsadee"&gt;https://github.com/codewithsadee&lt;/a&gt;&lt;br&gt;
YouTube : &lt;a href="https://www.youtube.com/channel/UC1PZHWV6VvICTL1LgFUZq6g"&gt;codewithsadee&lt;/a&gt;&lt;br&gt;
Patreon : &lt;a href="https://www.patreon.com/codewithsadee"&gt;https://www.patreon.com/codewithsadee&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/codewithsadee"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qhS87mRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9kn6vwn4mulhsx6o69is.png" alt="Buy Me A Coffee" width="225" height="51"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Various Types of Angular Component Selectors</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Tue, 14 Dec 2021 16:59:06 +0000</pubDate>
      <link>https://dev.to/anubhab5/various-types-of-angular-component-selectors-1ec</link>
      <guid>https://dev.to/anubhab5/various-types-of-angular-component-selectors-1ec</guid>
      <description>&lt;p&gt;Today we will be learning the various ways of using the component selector in Angular. &lt;br&gt;
If you are unaware of what is a component in Angular or what are the different parts of it I would recommend you to have a quick read on the following article - &lt;a href="https://dev.to/anubhab5/understanding-angular-component-2bpa"&gt;Understanding-Components&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are mainly four different ways you can define a selector in Angular component.&lt;/p&gt;

&lt;p&gt;i. &lt;strong&gt;Tag Selector&lt;/strong&gt; &lt;br&gt;
When a component is created by default it is provided with a tag selector.&lt;br&gt;
&lt;u&gt;app.component.ts&lt;/u&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'MyFirstProject';
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lets use the selector in our index.html file in the following way-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset="utf-8" /&amp;gt;
    &amp;lt;title&amp;gt;MyFirstProject&amp;lt;/title&amp;gt;
    &amp;lt;base href="/" /&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width,
     initial-scale=1" /&amp;gt;
    &amp;lt;link rel="icon" type="image/x-icon" href="favicon.ico" /&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;app-root&amp;gt;&amp;lt;/app-root&amp;gt;
  &amp;lt;/body&amp;gt;
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;ii. &lt;strong&gt;Class Selector&lt;/strong&gt; &lt;br&gt;
The class selector syntax is similar to the CSS class .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from '@angular/core';

@Component({
  selector: '.app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'MyFirstProject';
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the index file we can use the selector in the below way&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  &amp;lt;body&amp;gt;
    &amp;lt;div class="app-root"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;iii. &lt;strong&gt;ID Selector&lt;/strong&gt;&lt;br&gt;
The id selector syntax also resemble like the CSS id selector.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  
&lt;/h1&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from '@angular/core';

@Component({
  selector: '#app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'MyFirstProject';
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the index.html file lets see how the selector has been used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; &amp;lt;body&amp;gt;
    &amp;lt;div id="app-root"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;iv. &lt;strong&gt;Attribute Selector&lt;/strong&gt;&lt;br&gt;
The attribute selector syntax in the component decorator selector metadata looks like [app-name]&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Component } from '@angular/core';

@Component({
  selector: '[app-root]',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'MyFirstProject';
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the index.html it will be used as any other attribute inside a html element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div app-root&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now we completed learning the different ways we can write and use the selectors in Angular. &lt;/p&gt;

&lt;p&gt;Hope you enjoyed the post, if you enjoyed it do like and comment.&lt;br&gt;
Also if you want any specific topic please write it in the comment section.&lt;/p&gt;

&lt;p&gt;Coming up next some more advanced features on Angular Component and more Angular topics. So stay tuned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>intermediate</category>
      <category>component</category>
      <category>selector</category>
    </item>
    <item>
      <title>Route Model binding in Laravel</title>
      <author>Arif Iqbal</author>
      <pubDate>Tue, 14 Dec 2021 16:47:57 +0000</pubDate>
      <link>https://dev.to/arifiqbal/route-model-binding-in-laravel-4amk</link>
      <guid>https://dev.to/arifiqbal/route-model-binding-in-laravel-4amk</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-routemodel-binding"&gt;
  &lt;/a&gt;
  What is &lt;em&gt;Route-Model Binding&lt;/em&gt;?
&lt;/h3&gt;

&lt;p&gt;As the name tells, to bind an Eloquent Model instance to a route (wildcard).&lt;/p&gt;

&lt;p&gt;At this point in our &lt;a href="https://github.com/arifktk32/Laravel-From-Scratch-Blog-Project/commits/main"&gt;Blog Project&lt;/a&gt;, we capture the post ID in the route definition for a single post, pass it to the callback function as paramere, and then send it to the &lt;code&gt;findOrFail()&lt;/code&gt; method of our &lt;code&gt;Post&lt;/code&gt; model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/{post}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'post'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;findOrFail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Would it not be nicer to send the &lt;code&gt;Post&lt;/code&gt; model instance directly to the callback function?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/{post}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Post&lt;/span&gt; &lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'post'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$post&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It means we bound the &lt;code&gt;Post&lt;/code&gt; model to the route &lt;code&gt;/posts/{post}&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-to-remember-about-the-routemodel-binding"&gt;
  &lt;/a&gt;
  Things to remember about the &lt;em&gt;Route-Model Binding&lt;/em&gt;:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The Model type-hinted variable name in the route callback function should be the same as the route wildcard name. It means if your wildcard is &lt;code&gt;{post}&lt;/code&gt; then callback variable name must be &lt;code&gt;$post&lt;/code&gt;, otherwise it would not work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The default key that represents a Model is &lt;code&gt;ID&lt;/code&gt;. It means, Laravel by default will assume the wildcard value to be the &lt;code&gt;ID&lt;/code&gt; attribute of the Model instance. You can change it to any other unique key in the following two ways:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;a) Update your route definition to mention the key with the wildcard as &lt;code&gt;{post:slug}&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/posts/{post:slug}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Post&lt;/span&gt; &lt;span class="nv"&gt;$post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;view&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'post'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'post'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$post&lt;/span&gt;
    &lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a relatively newer approach introduced in some recent version of Laravel.&lt;/p&gt;

&lt;p&gt;b) Add a public function to your Model &lt;code&gt;getRouteKeyName()&lt;/code&gt; and return the field name from it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getRouteKeyName&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'slug'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was the old way of changing the default key which still works.&lt;/p&gt;

&lt;p&gt;Update you view files accordingly based on what key represents your Model. For example, if you changed it from &lt;code&gt;id&lt;/code&gt; to &lt;code&gt;slug&lt;/code&gt;, update your &lt;code&gt;posts.blade.php&lt;/code&gt; as in the image&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oJ6Piu3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7tawzeg7ofyu6n7o7l6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oJ6Piu3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7tawzeg7ofyu6n7o7l6.png" alt="Route-Model Binding" width="765" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>programming</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Save Textbox Value to File using JavaScript</title>
      <author>Shantanu Jana</author>
      <pubDate>Tue, 14 Dec 2021 16:26:26 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/save-textbox-value-to-file-using-javascript-2ljp</link>
      <guid>https://dev.to/shantanu_jana/save-textbox-value-to-file-using-javascript-2ljp</guid>
      <description>&lt;p&gt;In this article you will learn how to convert textbox value to files using JavaScript. If we want to create any type of file such as HTML, CSS, text etc., we manually use it with the help of different types of text editors. However, this type of project can make this work easier. With this project you can easily save any text content as any file.&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://www.foolishdeveloper.com/2021/12/save-textarea-text-to-file.html"&gt;watch the live demo&lt;/a&gt; to see how it works. First we have created a box in which different types of text or information can be input. Text area has been used to create this box. Then there is the input space that we created using the input function of HTML.&lt;/p&gt;

&lt;p&gt;In the input box you can add the name of the file of your choice and add to it any file you want to convert. Then when you click on the download button, the texts in that text area will be converted to a file and saved. I used HTML CSS and JavaScript to create this project.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iDtWDU6ajyA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Hope the above video has helped you a bit. However, below I have shared the step-by-step tutorial. If you want, you can &lt;a href="https://www.foolishdeveloper.com/2021/12/save-textarea-text-to-file.html"&gt;download the source code&lt;/a&gt; of this project (Textarea Text to a File using JavaScript).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-create-a-box-on-the-webpage"&gt;
  &lt;/a&gt;
  1. Create a box on the webpage
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#044b82&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Kanit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Verdana&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;430px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zBTz82fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4ytqn7ernwlgva697yc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zBTz82fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4ytqn7ernwlgva697yc.jpg" alt="Create a box on the webpage" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-add-a-heading"&gt;
  &lt;/a&gt;
  2. Add a heading
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Save the text to a file&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0773d7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hYDFnVh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ln79vmss2t5xgk1msecv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hYDFnVh---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ln79vmss2t5xgk1msecv.jpg" alt="Add a heading" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-create-a-text-input-box"&gt;
  &lt;/a&gt;
  3. Create a text input box
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Type your text here..."&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#021652&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#3ba9f4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nwi78bWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uashgwx20gp4de6zw9tg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nwi78bWU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uashgwx20gp4de6zw9tg.jpg" alt="Create a text input box" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-create-a-box-to-input-the-file-name"&gt;
  &lt;/a&gt;
  4. Create a box to input the file name
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"filename"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Specify a filename..."&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#filename&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#3ba9f4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#052a53&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gSga5vfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxt8fnejrybn4xye7j9s.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gSga5vfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxt8fnejrybn4xye7j9s.jpg" alt="Image description" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-create-file-download-button"&gt;
  &lt;/a&gt;
  5. Create file download button
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"download"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Download file&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#download&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#3ba9f4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;174px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3P05GnCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6rqguk1n9yu1n6u8q87.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3P05GnCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6rqguk1n9yu1n6u8q87.jpg" alt="Image description" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-save-text-to-file-with-javascript"&gt;
  &lt;/a&gt;
  6. Save Text to File with JavaScript
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;downloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// It works on all HTML5 Ready browsers as it uses the download attribute of the &amp;lt;a&amp;gt; element:&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//A blob is a data type that can store binary data&lt;/span&gt;
  &lt;span class="c1"&gt;// "type" is a MIME type&lt;/span&gt;
  &lt;span class="c1"&gt;// It can have a different value, based on a file you want to save&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;plain/text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;//createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fileUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//setAttribute() Sets the value of an attribute on the specified element.&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;href&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fileUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//file location&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;download&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// file name&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;//use appendChild() method to move an element from one element to another&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;//The removeChild() method of the Node interface removes a child node from the DOM and returns the removed node&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;download&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;
  &lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;//The value of the file name input box&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;filename&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//The value of what has been input in the textarea&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// The &amp;amp;&amp;amp; (logical AND) operator indicates whether both operands are true. If both operands have nonzero values, the result has the value 1 . Otherwise, the result has the value 0.&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;downloadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--49X_Nlqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxxusk7chlorz0khis6g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--49X_Nlqj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxxusk7chlorz0khis6g.jpg" alt="Save Text to File with JavaScript" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Hopefully the above tutorial has helped you to know how I created this Save textbox value to file using JavaScript. You must comment on how you like this design.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this.&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Convertendo AND para OR em JavaScript</title>
      <author>Beatriz Oliveira</author>
      <pubDate>Tue, 14 Dec 2021 16:26:21 +0000</pubDate>
      <link>https://dev.to/beatrizoliveira/convertendo-and-para-or-em-javascript-4ohd</link>
      <guid>https://dev.to/beatrizoliveira/convertendo-and-para-or-em-javascript-4ohd</guid>
      <description>&lt;h3&gt;
  &lt;a href="#tabela-verdade"&gt;
  &lt;/a&gt;
  Tabela Verdade
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Primeiramente é bom dá uma revisada nos conceitos de tabela verdade, para entender como valores de entrada e booleanos funcionam.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A Tabela verdade nada mais é que um mecanismo de lógica que para determinada entrada ou valor e é calculado sua saída de acordo com predeterminações lógicas, funcionais e booleanas&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KoEzUD4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yym18z269wupq9q7nbyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KoEzUD4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yym18z269wupq9q7nbyo.png" alt="Tabela Verdade" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#and-e-or"&gt;
  &lt;/a&gt;
  AND e OR
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Recentemente me deparei com uma falta de conhecimento em relação a booleanos eu não sabia como converter um &lt;strong&gt;&amp;amp;&amp;amp;(AND)&lt;/strong&gt; para &lt;strong&gt;||(OR)&lt;/strong&gt; na linguagem que estava utilizando (JavaScript), teria que fazer uma validação convertendo AND para OR por isso o foco nesses dois operadores lógicos nesse post.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Operadores lógicos são nada a menos que funções e expressões matemáticas, sim aquelas que você estudou provavelmente na escola.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H70oBvPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a17pmq6jeleruwpat0b7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H70oBvPc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a17pmq6jeleruwpat0b7.png" alt="Tabela Verdade" width="405" height="210"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;O Operador lógico AND&lt;/strong&gt; também chamado de &lt;strong&gt;Conjunção lógica&lt;/strong&gt;, ele é utilizado para dados dois inputs de valores
onde produz um valor verdadeiro se &lt;em&gt;ambos os operandos forem verdadeiros&lt;/em&gt;. Em lógica de programação existem dois valores em bits que representam verdadeiro ou falso que são: 1 e 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f9ULdgv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbiiqapo8ikx8e77no7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f9ULdgv5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbiiqapo8ikx8e77no7x.png" alt="Tabela AND" width="475" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Operador lógico OR&lt;/strong&gt; também chamado de &lt;strong&gt;Disjunção lógica&lt;/strong&gt;, dado dois inputs com valores ele produz um valor verdadeiro &lt;em&gt;se pelo menos um de seus operandos for verdadeiro&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LBnmL5LV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1m1uhugunlvmrgaxluk7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LBnmL5LV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1m1uhugunlvmrgaxluk7.png" alt="Tabela OR" width="550" height="306"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#operador-l%C3%B3gico-xor"&gt;
  &lt;/a&gt;
  Operador Lógico XOR
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;O operador lógico XOR ele representa a função de desigualdade ou seja se ambas as entradas forem verdadeiras ou falsas a saída será falsa (0) se ambas entradas se distinguirem ele retornará verdadeiro. Uma frase legal para lembrar a lógica do XOR é : &lt;br&gt;
&lt;em&gt;"deve ter um ou outro, mas não ambos"&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A apresentação analítica desse operador lógico se dar pela expressão:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;f(a,b)=a+b-2ab
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2PZFgy0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdr6h1tutqm8u4r84duy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2PZFgy0V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mdr6h1tutqm8u4r84duy.png" alt="Tabela XOR" width="503" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uma curiosidade interessante que você deve ainda não ter percebido é que o operador lógico XOR é a conversão dos operadores AND e OR, e assim quando você tiver uma lógica AND e quiser transformá-la em uma lógica OR usará o XOR.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LMtUsFeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hi1ydfqbl9vnnrdb4y8p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LMtUsFeM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hi1ydfqbl9vnnrdb4y8p.png" alt="Tabela XOR Gate" width="880" height="521"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#operador-l%C3%B3gico-xor-em-javascript"&gt;
  &lt;/a&gt;
  Operador lógico XOR em JavaScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Depois de um breve resumo sobre operadores lógicos e tabela verdade agora podemos voltar a resolução do problema que desencadeou esse post.&lt;/li&gt;
&lt;li&gt;Assim como na tabela verdade também existem nas linguagens de programação operadores lógicos, e como seria o operador XOR em JavaScript?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simples, já que não temos um símbolo de fato desse operador podemos representá-lo com a conversão dos operadores AND para OR que ficaria desde modo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bCondition1 &amp;amp;&amp;amp; bCondition2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;para&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;!(!bCondition1 || !bCondition2)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Espero que esse post tenha lhe ajudado ou agregado em algo \o/&lt;/p&gt;

&lt;p&gt;Para feedbacks sobre fale comigo pelo &lt;a href="https://twitter.com/biantris_"&gt;Twitter&lt;/a&gt;&lt;br&gt;
Se quiser continuar apoiando meus conteúdos &lt;a href="https://www.patreon.com/beatrizoliveira"&gt;Patreon&lt;/a&gt;&lt;br&gt;
Meu GitHub &lt;a href="https://github.com/beatrizoliveiira"&gt;https://github.com/beatrizoliveiira&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>javascript</category>
      <category>computerscience</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Responsive Navbar using HTML, CSS, and Javascript</title>
      <author>Amrin</author>
      <pubDate>Tue, 14 Dec 2021 16:14:24 +0000</pubDate>
      <link>https://dev.to/coderamrin/responsive-navbar-using-html-css-and-javascript-1jo4</link>
      <guid>https://dev.to/coderamrin/responsive-navbar-using-html-css-and-javascript-1jo4</guid>
      <description>&lt;p&gt;For every CSS project we build, a responsive navigation bar is a must-have.&lt;/p&gt;

&lt;p&gt;So, today we are going to build a responsive navigation bar using HTML CSS and vanilla javascript.&lt;/p&gt;

&lt;p&gt;** Note: It's a Mobile-First design **&lt;/p&gt;

&lt;p&gt;** If you prefer video. I also created a video. You can watch it here **&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=nR6IQad9PEg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e6Sk3Rlg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e1xr4pti5qn49uwq7jv9.png" alt="IMAGE ALT TEXT HERE" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's get started 🎉🎉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-1-html"&gt;
  &lt;/a&gt;
  Part 1: HTML
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"styles.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;responsive navbar&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;logo&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hamburger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__link hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;about&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above we got our navbar's markup with a hamburger. &lt;/p&gt;

&lt;p&gt;I linked the CSS and javascript files too. &lt;/p&gt;

&lt;p&gt;Let's see how we can style this markup with CSS&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-2-css"&gt;
  &lt;/a&gt;
  Part: 2 CSS
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we removed some of the default styles and added some styles to the ** a ** tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* nav styles */&lt;/span&gt;

&lt;span class="nc"&gt;.nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;116&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="nc"&gt;.line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;lightblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;lightcoral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the main design. Here we styled our navbar the hamburger and the logo.&lt;/p&gt;

&lt;p&gt;The mobile design is done. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gmIq19GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497326382/5DA8lPM9X.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmIq19GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497326382/5DA8lPM9X.png" alt="screencapture-127-0-0-1-5500-index-html-2021-12-14-21_54_51.png" width="500" height="645"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to look at the desktop design now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the desktop design, we removed the absolute position and made it a display block.&lt;br&gt;
And to the nav__link's we added display inline-block so that the links say next to each other.&lt;br&gt;
Lastly, added display none to the .hamburger &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9Uwm_di--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497595439/3-MnZjkLX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9Uwm_di--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497595439/3-MnZjkLX.png" alt="screencapture-127-0-0-1-5500-index-html-2021-12-14-21_59_21.png" width="880" height="633"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One last thing is left. Now we need to make our hamburger clickable.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-3-javascript"&gt;
  &lt;/a&gt;
  Part 3 : Javascript
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hamburger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.hamburger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.nav__link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;hamburger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;navLink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here we added a click event to the hamburger and added the classList.toggle to the navLink.&lt;/p&gt;

&lt;p&gt;What the classList.toggle does is, it removes the class if the given class is available and add's if it's not available.&lt;/p&gt;

&lt;p&gt;source code:  &lt;a href="https://github.com/Coderamrin/respons"&gt;https://github.com/Coderamrin/respons&lt;/a&gt;...&lt;/p&gt;

&lt;p&gt;Live preview:  &lt;a href="https://coderamrin.github.io/responsi"&gt;https://coderamrin.github.io/responsi&lt;/a&gt;...&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;If you liked it don't forget to follow me @&lt;a href="https://dev.to@coderamrin"&gt;amrin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;also, I've started a YouTube channel where I share programming tutorials and videos. If that sounds great check it out: &lt;a href="https://www.youtube.com/channel/UCiHUi4wJ6rkPSQ5n4bxKU1A"&gt;https://www.youtube.com/channel/UCiHUi4wJ6rkPSQ5n4bxKU1A&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a good one :D&lt;br&gt;
For every CSS project we build, a responsive navigation bar is a must-have.&lt;/p&gt;

&lt;p&gt;So, today we are going to build a responsive navigation bar using HTML CSS and vanilla javascript.&lt;/p&gt;

&lt;p&gt;** Note: It's a Mobile-First design **&lt;/p&gt;

&lt;p&gt;** If you prefer video. I also created a video. You can watch it here **&lt;/p&gt;

&lt;p&gt;%[&lt;a href="https://www.youtube.com/watch?v=nR6IQad9PEg"&gt;https://www.youtube.com/watch?v=nR6IQad9PEg&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Let's get started 🎉🎉&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-1-html"&gt;
  &lt;/a&gt;
  Part 1: HTML
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"styles.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;responsive navbar&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;logo&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hamburger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"line"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__link hide"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;about&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Above we got our navbar's markup with a hamburger. &lt;/p&gt;

&lt;p&gt;I linked the CSS and javascript files too. &lt;/p&gt;

&lt;p&gt;Let's see how we can style this markup with CSS&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-2-css"&gt;
  &lt;/a&gt;
  Part: 2 CSS
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;uppercase&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, we removed some of the default styles and added some styles to the ** a ** tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* nav styles */&lt;/span&gt;

&lt;span class="nc"&gt;.nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.8rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;116&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="nc"&gt;.line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;94%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;lightblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;lightcoral&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hide&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the main design. Here we styled our navbar the hamburger and the logo.&lt;/p&gt;

&lt;p&gt;The mobile design is done. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gmIq19GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497326382/5DA8lPM9X.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmIq19GM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497326382/5DA8lPM9X.png" alt="screencapture-127-0-0-1-5500-index-html-2021-12-14-21_54_51.png" width="500" height="645"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to look at the desktop design now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;static&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.hamburger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the desktop design, we removed the absolute position and made it a display block.&lt;br&gt;
And to the nav__link's we added display inline-block so that the links say next to each other.&lt;br&gt;
Lastly, added display none to the .hamburger &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9Uwm_di--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497595439/3-MnZjkLX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9Uwm_di--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639497595439/3-MnZjkLX.png" alt="screencapture-127-0-0-1-5500-index-html-2021-12-14-21_59_21.png" width="880" height="633"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One last thing is left. Now we need to make our hamburger clickable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#part-3-javascript"&gt;
  &lt;/a&gt;
  Part 3 : Javascript
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hamburger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.hamburger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navLink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.nav__link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;hamburger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;navLink&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hide&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we added a click event to the hamburger and added the classList.toggle to the navLink.&lt;/p&gt;

&lt;p&gt;What the classList.toggle does is, it removes the class if the given class is available and add's if it's not available.&lt;/p&gt;

&lt;p&gt;source code:  &lt;a href="https://github.com/Coderamrin/responsive-navbar-css-js"&gt;https://github.com/Coderamrin/responsive-navbar-css-js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live preview:  &lt;a href="https://coderamrin.github.io/responsive-navbar-css-js/"&gt;https://coderamrin.github.io/responsive-navbar-css-js/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;If you liked it don't forget to follow me @&lt;a href="https://dev.to@coderamrin"&gt;amrin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;also, I've started a YouTube channel where I share programming tutorials and videos. If that sounds great check it out: &lt;a href="https://www.youtube.com/channel/UCiHUi4wJ6rkPSQ5n4bxKU1A"&gt;https://www.youtube.com/channel/UCiHUi4wJ6rkPSQ5n4bxKU1A&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have a good one :D&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>A Comparison of WYSIWYG HTML Editors: Froala vs. QuillJS</title>
      <author>Kegan Blumenthal</author>
      <pubDate>Tue, 14 Dec 2021 16:02:43 +0000</pubDate>
      <link>https://dev.to/keganblumenthal/a-comparison-of-wysiwyg-html-editors-froala-vs-quilljs-5410</link>
      <guid>https://dev.to/keganblumenthal/a-comparison-of-wysiwyg-html-editors-froala-vs-quilljs-5410</guid>
      <description>&lt;p&gt;Coding is a must when it comes to web development. Does this rule apply today also? Not necessarily if you are aware of HTML WYSIWYG editor. A quick fix for those having coding phobia to easily play with the web content. Do you know what the scary-looking abbreviation WYSIWYG means?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What You See Is What You Get 👀&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;WYSIWYG editor has expanded the scope of web content editing and formatting for a much faster and easier experience. Whether it’s spell-checking, auto-completion or syntax highlighting, you can have it all. Moreover, the tool instantly displays the content live on the web in the exact same way as in the preview.  &lt;/p&gt;

&lt;p&gt;Indeed, there are multiple featured-packed HTML editors to choose from. To help you accomplish more in less time, we have analyzed the marketplace trends and compared the two of the most popular WYSIWYG editors - &lt;strong&gt;Froala&lt;/strong&gt; and &lt;strong&gt;Quill&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;Let’s dig in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#market-trends"&gt;
  &lt;/a&gt;
  Market trends
&lt;/h2&gt;

&lt;p&gt;As per the &lt;a href="https://www.g2.com/compare/froala-editor-vs-quill-1a2d7035-0d86-4646-9a37-5a04a2adbae6?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;report released by G2 comparison&lt;/a&gt;, the customer review rate for Froala and QuillJS editor is 4.5/5 and 3.9/5, respectively. The product's score at G2 is estimated based on real-time data collected from verified user reviews.&lt;/p&gt;

&lt;p&gt;What’s more? &lt;a href="https://www.g2.com/categories/wysiwyg-editors#grid&amp;amp;utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;G2 Grid for WYSIWYG Editors&lt;/a&gt; has crowned Froala as one of the top-performing leaders while QuillJS holds a strong position among the contenders in terms of market presence and customer satisfaction that set Froala ahead in the race as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drG4BT43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oytbb6epnof3f78q3wm5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drG4BT43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oytbb6epnof3f78q3wm5.png" alt="Image description" width="880" height="634"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;While assessing the two solutions, reviewers felt that Froala editor has better ongoing product support, updates, roadmaps and meets the needs of their business better than Quill. Along the way, Froala also offers over 170 responsive &lt;a href="https://froala.com/design-blocks/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;design blocks&lt;/a&gt; ready to be used in websites or applications. These building blocks are based on the Bootstrap library and help to frame beautiful web content. It’s a modern design framework that combines HTML5 and CSS3 design blocks together to build responsive websites and applications.&lt;/p&gt;

&lt;p&gt;In Github, Froala design blocks is one of the top starred modern web development frameworks with &lt;a href="https://github.com/froala/design-blocks?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;13.3k stars and 1.2k forks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ahead, we’ll see powerful features of the two intuitive and overwhelming WYSIWYG text editors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#froala"&gt;
  &lt;/a&gt;
  Froala
&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://https://froala.com/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;Froala&lt;/a&gt; is the all-in-one visual development tool for editing and formatting web apps and websites. It is one of the few text editors featuring a modern and retina-ready design. Froala provides a visual text editor and a code editor with standard features such as code completion, syntax highlighting, and code collapsing.&lt;/p&gt;

&lt;p&gt;More advanced features such as dynamic code introspection for generating code hints assist the user in writing code. Furthermore, the user-friendly interface is based on the latest web design trend, and it is compatible with any web page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M7a6ik-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xt7uaetbqgbqvt6neq47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M7a6ik-b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xt7uaetbqgbqvt6neq47.png" alt="Image description" width="750" height="565"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key Features
&lt;/h2&gt;

&lt;p&gt;Froala is loaded with a tonne of powerful features that help you to stand out in the crowd. The platform offers an all-in-one rich text-editing package for optimizing any web application or website. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;To get a better feel of how far things have come, let’s take a look at a few of the noteworthy features.&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-compatibility"&gt;
  &lt;/a&gt;
  1 - Compatibility
&lt;/h3&gt;

&lt;p&gt;From Safari to Chrome, Froala &lt;a href="http://https://froala.com/wysiwyg-editor/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;WYSIWYG editor&lt;/a&gt; runs seamlessly across all major web browsers, including Firefox, Chrome, Opera, Safari, and Microsoft Edge.&lt;/p&gt;

&lt;p&gt;Not only browsers, but Froala is accessible across multiple operating systems and devices, thus it guarantees a wonderful user experience every time to users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;The true editor without any compatibility limitations! Now we are talking.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-customization"&gt;
  &lt;/a&gt;
  2 - Customization
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;In today’s world, users expect more control over the content they are producing without putting coding skills into action or hiring somebody else for it.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Froala understands this trend very well and hence, the editor has been designed to offer comprehensive customization features to make editing a convenient job. Using custom plugins you can extend the functionalities and customize the existing features. Also, the user has complete access over the toolbar to select the layout, content, design, or functionality that appeals to them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2ABPWjG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5tivv61w3l941gk3aip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2ABPWjG2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j5tivv61w3l941gk3aip.png" alt="Image description" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-markdown-support"&gt;
  &lt;/a&gt;
  3 - Markdown Support
&lt;/h3&gt;

&lt;p&gt;Froala editor enables you to format text content using prebuilt markdown commands via the &lt;a href="http://https://froala.com/wysiwyg-editor/docs/plugins/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;Markdown plugin&lt;/a&gt;. The plugin can be used to mark down the Image, heading, list, code block, table, and many more. &lt;/p&gt;

&lt;p&gt;Besides, traditional users can get a clearer sense of what they are creating!&lt;/p&gt;

&lt;p&gt;All a user has to do is - &lt;strong&gt;&lt;em&gt;switch to markdown mode, split the screen to view the real-time changes, and start rolling!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rg8QSDj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjnmns8776sx82woebhe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rg8QSDj---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yjnmns8776sx82woebhe.png" alt="Image description" width="880" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-autosave-amp-autocorrect"&gt;
  &lt;/a&gt;
  4 - Autosave &amp;amp; Autocorrect
&lt;/h3&gt;

&lt;p&gt;We introduced this feature to simplify the way you optimize content!&lt;/p&gt;

&lt;p&gt;The Autosave plugin has a built-in feature that automatically hits HTTP requests from JS to the server, which handles the requests and saves the data automatically.&lt;/p&gt;

&lt;p&gt;The autocorrect feature turns predefined snippets into special symbols and characters. Users can write complex characters such as ½ becomes as easy as writing 1/2. What’s more? The feature also allows you to frame your own editing rules!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-realtime-collaboration"&gt;
  &lt;/a&gt;
  5 - Real-time collaboration
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;“Talent wins games, but teamwork and intelligence win championships.” - Michael Jordan.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Froala implemented this principle to offer the users a real-time collaboration for synchronized content creation and instant cooperation with colleagues. You can track changes through dynamic editing features for an asynchronous and co-authoring experience.&lt;/p&gt;

&lt;p&gt;With real-time collaboration, users can instantly see content changes with the name of the editor. In real-time collaboration, you can view the list of active users you are collaborating with at the top-right corner of the editor window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6sSq8Btr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3gssj8ybtnj38mpocga.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6sSq8Btr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3gssj8ybtnj38mpocga.png" alt="Image description" width="880" height="249"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more information, you can check the documentation - &lt;a href="https://froala.com/wysiwyg-editor/examples/codox-real-time-editing/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;how to install plugin for real-time collaboration&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-track-changes"&gt;
  &lt;/a&gt;
  6 - Track Changes
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="http://https://froala.com/track-changes-plugin/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;track changes&lt;/a&gt; plugin allows users to keep the track of all changes users make to the text, format, tables, styles, tables, and more. You can easily accept or decline the introduced changes in the content. It enables users to collaborate on documents while maintaining complete control over the content creation process. It is fully compatible with real-time collaboration.&lt;/p&gt;

&lt;p&gt;For example, some users can operate in the editing mode while others can operate in suggestion mode by enabling track changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-froala"&gt;
  &lt;/a&gt;
  Why Froala?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Why not?&lt;/strong&gt; Froala is a perfect editor choice if you are looking for diverse functionalities, customization features, extensive documentation, and reliable support. Besides, there's no need to reinvent the wheel to integrate additional features; the rich text editor comes with over 30 out-of-the-box plugins to choose from.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Without any extra steps, it provides:&lt;/strong&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-high-performance"&gt;
  &lt;/a&gt;
  1 - High Performance
&lt;/h3&gt;

&lt;p&gt;Froala is faster than the blink of an eye; the rich editor initiates under 40ms while providing an amazing editing experience. It is carefully designed with high performance in mind and can withstand the most rigorous tests. The lightweight and well-structured architecture make it the best Javascript-rich text editor in every single aspect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-security"&gt;
  &lt;/a&gt;
  2 - Security
&lt;/h3&gt;

&lt;p&gt;Froala WYSIWYG HTML editor has a robust defense mechanism against XSS attacks. It is regularly updated, which significantly reduces vulnerabilities. The input data is screened and validated on both the client-side to protect against cross-site scripting attacks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-extend-functionality"&gt;
  &lt;/a&gt;
  3 - Extend Functionality
&lt;/h3&gt;

&lt;p&gt;The plugins help to manage and extend the functionalities of the editor. You can use multiple built-in plugins or you can also build your own custom plugins as per your requirements to extend the editor functionality.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wPFs8ouE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54kra3lih71ppqm5g80c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wPFs8ouE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/54kra3lih71ppqm5g80c.png" alt="Image description" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow the steps below for downloading Froala plugins.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Launch the &lt;a href="https://froala.com/wysiwyg-editor/docs/plugins/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;Froala Plugins&lt;/a&gt; documentation on your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wiB9Wtrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r00hm1oepq0tvc448xpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wiB9Wtrs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r00hm1oepq0tvc448xpm.png" alt="Image description" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Click on the icon of the required &lt;strong&gt;plugin&lt;/strong&gt; you want to download. For example, Align.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tOYJOoP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbwv7ctti6j0z9rd22cx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tOYJOoP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbwv7ctti6j0z9rd22cx.png" alt="Image description" width="880" height="523"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Click on the &lt;strong&gt;Download&lt;/strong&gt; button to download the plugin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcXk11Hk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w38n1p82ds3rbr3os0kq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcXk11Hk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w38n1p82ds3rbr3os0kq.png" alt="Image description" width="880" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Enter the required details and click on the download button to &lt;strong&gt;download&lt;/strong&gt; the plugin.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7Fe3N-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x12oniqly917lx0fsv1v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7Fe3N-0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x12oniqly917lx0fsv1v.png" alt="Image description" width="880" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, for faster plugin integration, you also use a CDN link for each plugin; for example, you can check the CDN link for &lt;a href="https://froala.com/wysiwyg-editor/?utm_source=Dev.to&amp;amp;utm_medium=Leads%20Acquisition&amp;amp;utm_content=3rdParty%20-%20APPWRKIT%2B12%2F14%2F2021%2BFroala%20vs.Quill&amp;amp;utm_campaign=APPWRKSIT%202nd%20ARTICLE"&gt;Align plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9AjXjHSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39zhh63q2wvt8he7avyx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9AjXjHSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39zhh63q2wvt8he7avyx.png" alt="Image description" width="880" height="541"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple, Right? Let’s move to the next section and take a look at QuillJS and its features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quilljs"&gt;
  &lt;/a&gt;
  QuillJS
&lt;/h2&gt;

&lt;p&gt;Quill is an open-source WYSIWYG editor built for the modern web. It is designed as an easy-to-use editor that helps create and format content across the web. It is built on top of consistent and predictable constructs. With its extensible architecture and an expressive API, you can completely customize the editor to fulfill your needs.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dtVxzXSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqzgosyt65tl6f0dslwk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dtVxzXSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqzgosyt65tl6f0dslwk.png" alt="Image description" width="880" height="441"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key Features
&lt;/h2&gt;

&lt;p&gt;QuillJS is designed with numerous features to make it an easy-to-use editor for creating content across the web.&lt;/p&gt;

&lt;p&gt;Let’s see what this editor has got in its bucket list that can break the wall of code in the web development space.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-api-driven"&gt;
  &lt;/a&gt;
  1 - API Driven
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.google.com/url?q=https://quilljs.com/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1639491435337000&amp;amp;usg=AOvVaw0Bm6T6EAdxFXr4mmGgmnri"&gt;Quill&lt;/a&gt; is an API-driven platform that makes editing and formatting easy. You can call core API calls to create arbitrary indexes, modify content, extend functionalities, and more. Users don’t need to traverse the DOM to change the font-weight style attributes; instead, call API. Its event API also reports changes in an intuitive JSON format - no need to parse HTML or diff DOM trees.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-deltas"&gt;
  &lt;/a&gt;
  2 - Deltas
&lt;/h3&gt;

&lt;p&gt;QuillJS has its separate standalone library - &lt;a href="https://www.google.com/url?q=https://github.com/quilljs/delta/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1639491435340000&amp;amp;usg=AOvVaw0vdoSDDrVeSp0WLekZUTtl"&gt;Deltas&lt;/a&gt;. The Deltas are the simple and expressive format used in interpreting Quill’s content modifications for formatting. It’s a strict subset of JSON and can be easily parsed. This library can help in describing text and formatting information of any Quill document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-parchment"&gt;
  &lt;/a&gt;
  3 - Parchment
&lt;/h3&gt;

&lt;p&gt;To provide users with a consistent editing experience, Quill offers a document model - &lt;a href="https://www.google.com/url?q=https://github.com/quilljs/parchment/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1639491435341000&amp;amp;usg=AOvVaw3qW2Mb6cu1VE73AaOm5GG0"&gt;Parchment&lt;/a&gt;. Parchment provides a powerful abstraction over the DOM to enable custom formats over the content in Quill. With Parchment, you can now enhance or customize existing Quill formats or add entirely new ones in your application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-quilljs"&gt;
  &lt;/a&gt;
  Why QuillJS
&lt;/h2&gt;

&lt;p&gt;Quill editor offers multiple customization features to suit your needs. You can easily extend existing functionality and change styling themes using the APIs. Also, you can strikingly customize the editor by simply adding features and functionalities using individual modules.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are some of the reasons how QuillJS features can make your life easier.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-easy-to-use"&gt;
  &lt;/a&gt;
  1 - Easy to use
&lt;/h3&gt;

&lt;p&gt;Quill offers the features in an easy-to-use package format. You can configure logical default settings immediately using a few lines of Javascript command. For easy editing, the syntax module detects and highlights syntax to format code blocks automatically. With API and modular architecture, it can be customized to suit your needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-customization"&gt;
  &lt;/a&gt;
  2 - Customization
&lt;/h3&gt;

&lt;p&gt;Themes of the CSS stylesheet primarily control Quill visuals, and other changes can be easily made by overriding the existing codebase. Overriding makes customization simple with any web application. For this purpose, you can use a browser console to inspect the elements, which will allow you to view and modify them. For example, the toolbar in the user interface can be customized through the toolbar module.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DKoNV2nQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka0zx7oa5bvw18utf66h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DKoNV2nQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka0zx7oa5bvw18utf66h.png" alt="Image description" width="880" height="236"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-crossplatform"&gt;
  &lt;/a&gt;
  3 - Cross-Platform
&lt;/h3&gt;

&lt;p&gt;Cross-platform support is not a bar for QuillJS; it runs or works the same way across all browsers, devices, and operating systems. It’s not only equally functional but also strikes the same user experience across all browsers and devices. If some content produces a particular markup in Chrome on OSX, it will also make the same markup on Mozilla Firefox. If hitting enter preserves bold format state in Firefox on Windows, it will be kept on mobile Safari.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#feature-comparison-table-froala-vs-quilljs"&gt;
  &lt;/a&gt;
  Feature Comparison Table: Froala Vs. QuillJS
&lt;/h2&gt;

&lt;p&gt;After, evaluating these two text editors, it is fair to say that Froala has an edge over QuillJS with over 100 features to help users to construct quality content. However, let’s check the feature comparison table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xzz55zVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfr78yr3ehvysfl1t9vh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xzz55zVE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vfr78yr3ehvysfl1t9vh.png" alt="Image description" width="850" height="900"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h2&gt;

&lt;p&gt;A WYSIWYG editor not only gifts editing powers to the users but also simplifies the whole content development process without investing in coding skills. Above, we have rolled down the features of the top picks in the market but the only catch is to go for the option that aligns with your needs.&lt;/p&gt;

&lt;p&gt;Quill is quite right with the price, but “free” comes with its costs. On this basis, Quill deficit of the most powerful content editing features that set Froala apart. If you are looking for a more sophisticated WYSIWYG editor, go with Froala. The flexibility, easy-to-understand documentation, and more than 100 features alone are great assets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeaway"&gt;
  &lt;/a&gt;
  Takeaway
&lt;/h2&gt;

&lt;p&gt;Before you jump into optimizing your web content, make sure you pick the right text editor. There are tons of different WYSIWYG editors available on the market today but what matters the most is whether the editor makes your content optimization process easy and emphatic?&lt;/p&gt;

&lt;p&gt;Froala WYSIWYG editor offers a striking collaborative platform to optimize and publish content on the web. Whether you are dealing with an enterprise website or just want to customize the user interface designs of your blog site - Froala editor is ready to serve you all.  &lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>github</category>
    </item>
    <item>
      <title>Deploying to DigitalOcean Kubernetes using Terraform Cloud and GitHub Actions</title>
      <author>mkdelta</author>
      <pubDate>Tue, 14 Dec 2021 15:30:43 +0000</pubDate>
      <link>https://dev.to/mkdelta/deploying-to-digitalocean-kubernetes-using-terraform-cloud-and-github-actions-1me6</link>
      <guid>https://dev.to/mkdelta/deploying-to-digitalocean-kubernetes-using-terraform-cloud-and-github-actions-1me6</guid>
      <description>&lt;p&gt;&lt;em&gt;This is a follow-up to my previous post about my submission to the &lt;a href="https://www.digitalocean.com/community/pages/kubernetes-challenge"&gt;DigitalOcean Kubernetes Challenge&lt;/a&gt;! I recommend that you at least skim through it for context on &lt;a href="https://www.kubegres.io/"&gt;Kubegres&lt;/a&gt;, the Kubernetes operator we'll be using to deploy Postgres.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: This isn't an intro to any of the technologies mentioned! If you haven't used Terraform with GitHub Actions before,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;I highly suggest going through &lt;a href="https://learn.hashicorp.com/tutorials/terraform/github-actions"&gt;this tutorial&lt;/a&gt; from HashiCorp itself&lt;/em&gt;&lt;/strong&gt;. &lt;em&gt;I'll mostly be riffing off of it, pointing out important departures throughout.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A GitHub account and a working Git installation&lt;/li&gt;
&lt;li&gt;A Terraform Cloud account and a working Terraform installation&lt;/li&gt;
&lt;li&gt;A DigitalOcean account (the process for other providers is very similar, however)&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#brief-overview"&gt;
  &lt;/a&gt;
  Brief overview
&lt;/h2&gt;

&lt;p&gt;I had recently deployed a scalable Postgres cluster to DigitalOcean Kubernetes, but I did it manually. The process is straightforward but quite tedious, which makes it a prime candidate for automation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Infrastructure configuration is pushed to the GitHub repo, triggering a GitHub Actions workflow&lt;/li&gt;
&lt;li&gt;GitHub Actions checks out code to a &lt;a href="https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners"&gt;runner&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Runner connects to Terraform Cloud to plan and apply the configuration&lt;/li&gt;
&lt;li&gt;Terraform Cloud connects to the provider (DigitalOcean in this case) to provision the needed resources&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UsHJ4SW---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lny4yieohodcoqjf5dbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UsHJ4SW---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lny4yieohodcoqjf5dbp.png" alt="Diagram of how it works" width="880" height="249"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-steps"&gt;
  &lt;/a&gt;
  The steps
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Set up Terraform Cloud&lt;/li&gt;
&lt;li&gt;Set up the GitHub repository&lt;/li&gt;
&lt;li&gt;Set up the Terraform file&lt;/li&gt;
&lt;li&gt;Push to the repository&lt;/li&gt;
&lt;li&gt;Cleanup!&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#1-set-up-terraform-cloud"&gt;
  &lt;/a&gt;
  1. Set up Terraform Cloud
&lt;/h3&gt;

&lt;p&gt;1.1. From your DigitalOcean account, &lt;a href="https://docs.digitalocean.com/reference/api/create-personal-access-token/"&gt;create a personal access token&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;1.2. From your Terraform Cloud account, create a new workspace, selecting &lt;strong&gt;API-driven workflow&lt;/strong&gt; as its type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9UvUTCpc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45qywk0ws4ctzsrxz3f3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9UvUTCpc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/45qywk0ws4ctzsrxz3f3.png" alt="Workflow types" width="796" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.3. In your newly created workspace, go to the variables tab and make a new workspace variable called &lt;strong&gt;DIGITALOCEAN_TOKEN&lt;/strong&gt;. Select the &lt;strong&gt;env&lt;/strong&gt; variable type and check the &lt;strong&gt;Sensitive&lt;/strong&gt; box.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1LQ4YWgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chjqim9pep0k4hyolaog.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1LQ4YWgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/chjqim9pep0k4hyolaog.png" alt="Variables tab" width="430" height="159"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0oWXjgES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ripxcg7xm7gogvgkmxe4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0oWXjgES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ripxcg7xm7gogvgkmxe4.png" alt="Entering DigitalOcean token" width="880" height="260"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1.4. From your Terraform Cloud account, go to the &lt;strong&gt;User settings&lt;/strong&gt; page, select &lt;strong&gt;Tokens&lt;/strong&gt; from the sidebar, and generate a new token. We'll need this for GitHub Actions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PDCt8Pim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tukf4oe1bw2lgzedpc2e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDCt8Pim--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tukf4oe1bw2lgzedpc2e.png" alt="Generating a Terraform Cloud token" width="602" height="302"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#2-set-up-a-github-repository"&gt;
  &lt;/a&gt;
  2. Set up a GitHub repository
&lt;/h3&gt;

&lt;p&gt;2.1. Create a new repository. Go to the &lt;strong&gt;Settings&lt;/strong&gt; tab and select &lt;strong&gt;Secrets&lt;/strong&gt; from the sidebar.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CwhP5Ulc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7gemdn8caai4ex1r50h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CwhP5Ulc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7gemdn8caai4ex1r50h.png" alt="Settings tab" width="880" height="105"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eZuTx9ud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pdo7fhveigsvmct70xr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eZuTx9ud--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2pdo7fhveigsvmct70xr.png" alt="GitHub secrets" width="880" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.2. Create a new secret called &lt;strong&gt;TF_API_TOKEN&lt;/strong&gt; and paste the Terraform Cloud token you just generated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Hoy2Yay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4ouguh9zcfuf33f1ph2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Hoy2Yay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a4ouguh9zcfuf33f1ph2.png" alt="Terraform API token" width="331" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.3. Navigate to the &lt;strong&gt;Actions&lt;/strong&gt; tab in your repository and find the &lt;strong&gt;Terraform&lt;/strong&gt; template. Click &lt;strong&gt;Set up this workflow&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uq4siYVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcdis3ajc9rf7jgvjmd9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uq4siYVn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcdis3ajc9rf7jgvjmd9.png" alt="Actions tab" width="410" height="106"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbAmdgEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o582os7e9uxgpq1l7qtv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbAmdgEz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o582os7e9uxgpq1l7qtv.png" alt="Terraform template" width="794" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Refer to the &lt;strong&gt;Review Actions workflow&lt;/strong&gt; section in &lt;a href="https://learn.hashicorp.com/tutorials/terraform/github-actions"&gt;this tutorial&lt;/a&gt; for a breakdown of the workflow steps. The template we're using is slightly different in that it doesn't have the update pull request steps.&lt;/p&gt;

&lt;p&gt;2.4. Commit the file. The workflow is going to be triggered but it'll quickly error out because we don't have a Terraform file yet!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#3-set-up-the-terraform-file"&gt;
  &lt;/a&gt;
  3. Set up the Terraform file
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/mkdlt/digital-ocean-k8s-challenge/blob/main/main.tf"&gt;Click here&lt;/a&gt; to see the Terraform file I used. This section of the tutorial is gonna be a breakdown of the file instead of a sequence of steps. For the experts in the audience: I'm new to Terraform so go easy on me! I tried ordering it in a way conducive to explanation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;terraform {
  backend "remote" {
    organization = "your-org-here"

    workspaces {
      name = "your-workspace-name-here"
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This part tells Terraform to use Terraform Cloud to plan, apply, etc. instead of doing it locally. This also means the state of your deployment will be &lt;a href="https://medium.com/@itsmattburgess/why-you-should-be-using-remote-state-in-terraform-2fe5d0f830e8"&gt;stored remotely and securely&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;required_providers {
    digitalocean = {
      source  = "digitalocean/digitalocean"
      version = "~&amp;gt; 2.16.0"
    }

    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~&amp;gt; 2.6.0"
    }

    kubectl = {
      source  = "gavinbunney/kubectl"
      version = "&amp;gt;= 1.7.0"
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty straightforward. The &lt;a href="https://registry.terraform.io/providers/gavinbunney/kubectl/latest/docs"&gt;kubectl provider&lt;/a&gt; is super useful for elegantly doing &lt;code&gt;kubectl apply&lt;/code&gt; to our cluster (we did a lot of that manually last time). We'll see it in action later.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;resource "digitalocean_project" "k8s_challenge" {
  name        = "k8s-challenge"
  description = "Entry for the DigitalOcean Kubernetes Challenge"
  purpose     = "Just trying out DigitalOcean"
  environment = "Development"

  resources = [
    digitalocean_kubernetes_cluster.postgres.urn
  ]
}

resource "digitalocean_vpc" "k8s" {
  name   = "k8s-vpc"
  region = "sgp1"

  timeouts {
    delete = "4m"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;DigitalOcean uses projects to organize resources. We'll put our cluster in a new one and create a new VPC for it. The delete timeout section in the VPC resource makes sure everything else has been deleted before deleting the VPC (it'll throw an error in the destroy process otherwise; I've found that deletions take a few minutes to register).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data "digitalocean_kubernetes_versions" "prefix" {
  version_prefix = "1.21."
}

resource "digitalocean_kubernetes_cluster" "postgres" {
  name         = "postgres"
  region       = "sgp1"
  auto_upgrade = true
  version      = data.digitalocean_kubernetes_versions.prefix.latest_version

  vpc_uuid = digitalocean_vpc.k8s.id

  maintenance_policy {
    start_time = "04:00"
    day        = "sunday"
  }

  node_pool {
    name       = "worker-pool"
    size       = "s-2vcpu-2gb"
    node_count = 3
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we're finally configuring the cluster itself. We're more or less creating a default one. Notice that we're using the id of the VPC we created. The maintenance policy determines when DigitalOcean will install updates and patches.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;provider "kubernetes" {
  host  = digitalocean_kubernetes_cluster.postgres.endpoint
  token = digitalocean_kubernetes_cluster.postgres.kube_config[0].token
  cluster_ca_certificate = base64decode(
    digitalocean_kubernetes_cluster.postgres.kube_config[0].cluster_ca_certificate
  )
}

provider "kubectl" {
  host  = digitalocean_kubernetes_cluster.postgres.endpoint
  token = digitalocean_kubernetes_cluster.postgres.kube_config[0].token
  cluster_ca_certificate = base64decode(
    digitalocean_kubernetes_cluster.postgres.kube_config[0].cluster_ca_certificate
  )
  load_config_file = false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we're configuring our providers to get credentials from the cluster for adding Kubegres resources.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;variable "superUserPassword" {}
variable "replicationUserPassword" {}


resource "kubernetes_secret" "postgres_secret" {
  metadata {
    name      = "mypostgres-secret"
    namespace = "default"
  }

  data = {
    superUserPassword       = var.superUserPassword
    replicationUserPassword = var.replicationUserPassword
  }

  type = "Opaque"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is basically the equivalent of the &lt;code&gt;my-postgres-secret.yaml&lt;/code&gt; in the &lt;a href="https://www.kubegres.io/doc/getting-started.html"&gt;Kubegres tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Short detour: put these secrets in your Terraform Cloud workspace variables!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D7ZaslOW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bi2ssdd4pebafilwcbxm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D7ZaslOW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bi2ssdd4pebafilwcbxm.png" alt="Terraform Cloud workspace variables" width="880" height="268"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data "kubectl_path_documents" "docs" {
  pattern = "./manifests/*.yaml"
}

resource "kubectl_manifest" "kubegres" {
  for_each  = toset(data.kubectl_path_documents.docs.documents)
  yaml_body = each.value
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we're telling the kubectl provider to apply all the manifests in our &lt;code&gt;./manifests/*&lt;/code&gt; directory. We're using &lt;code&gt;kubectl_path_documents&lt;/code&gt; instead of &lt;code&gt;kubectl_filename_list&lt;/code&gt; because the &lt;code&gt;kubegres.yaml&lt;/code&gt; file actually consists of multiple documents defining different resources. I got stuck on this the first time around :^)&lt;/p&gt;

&lt;p&gt;See the &lt;a href="https://registry.terraform.io/providers/gavinbunney/kubectl/latest/docs/data-sources/kubectl_path_documents"&gt;kubectl provider docs&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Short detour: create a manifests directory in your repo and put the required manifests in it! Also check the previous post for context.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oY0Pj7Nd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrvvtfledfwlawguzdh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oY0Pj7Nd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrvvtfledfwlawguzdh2.png" alt="Manifests directory" width="539" height="218"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-push-to-the-repository"&gt;
  &lt;/a&gt;
  4. Push to the repository
&lt;/h3&gt;

&lt;p&gt;4.1. You should be pretty much done! Push everything to the repository. At the minimum, you should have &lt;strong&gt;a main.tf file, a manifests directory, and a .github/workflows directory&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;4.2. Look at your Actions tab to see the triggered workflow. You should see something like the following.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OuKHWHRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yr9e3mye6zjyg9szeyp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OuKHWHRs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yr9e3mye6zjyg9szeyp.png" alt="Triggered workflow" width="596" height="527"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A lot of configuration is hidden in that Kubegres manifest. Don't panic if the console throws thousands of lines of output at you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Zl8Bo55e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1mv5qtwufaat2uyrioy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zl8Bo55e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1mv5qtwufaat2uyrioy.png" alt="Thousands of lines of output" width="355" height="146"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also check the ongoing run in your Terraform Cloud account. The &lt;code&gt;terraform apply&lt;/code&gt; part takes a few minutes. Grab a cup of your favorite beverage and sit tight!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FMDNJlLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue93tmfehsikbygk4x1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FMDNJlLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue93tmfehsikbygk4x1h.png" alt="Terraform Cloud output" width="636" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a few minutes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7BJFWH4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpe6y9eaxn3xdh4nzcpn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7BJFWH4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpe6y9eaxn3xdh4nzcpn.png" alt="GitHub Action apply complete" width="548" height="466"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zp9gMctR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3hvysqh7zx3tbta33ss.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zp9gMctR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3hvysqh7zx3tbta33ss.png" alt="Terraform Cloud Apply complete" width="592" height="163"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also view the cluster in your DigitalOcean control panel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HNj-o13F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wl3xfhl3n3u6cxmcgk9o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HNj-o13F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wl3xfhl3n3u6cxmcgk9o.png" alt="DigitalOcean control panel" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clusters also come with a dashboard by default.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C_yJmx_k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwdrk810r3zi2kiejhcd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C_yJmx_k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dwdrk810r3zi2kiejhcd.png" alt="Kubernetes cluster dashboard" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-cleanup"&gt;
  &lt;/a&gt;
  5. Cleanup!
&lt;/h3&gt;

&lt;p&gt;5.1 Since we used Terraform Cloud, we can simply queue up a destroy plan! Just go to your workspace &lt;strong&gt;Settings&lt;/strong&gt; and select &lt;strong&gt;Destruction and Deletion&lt;/strong&gt;. Click the red &lt;strong&gt;Queue destroy plan&lt;/strong&gt; and confirm by entering the name of your cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jDlVsfNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo2g1j135mvx66ue4to2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jDlVsfNH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo2g1j135mvx66ue4to2.png" alt="Terraform Cloud settings" width="504" height="526"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L4jgsz8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdb26ci5uldrybjzwld0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L4jgsz8l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hdb26ci5uldrybjzwld0.png" alt="Queue destroy plan" width="807" height="489"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sN0iBCuQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1nhqkssg2j975evclbe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sN0iBCuQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1nhqkssg2j975evclbe.png" alt="Confirm destroy plan" width="788" height="496"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.2. You should be taken to a new run. Click &lt;strong&gt;Confirm &amp;amp; Apply&lt;/strong&gt; below, add a comment, and click &lt;strong&gt;Confirm Plan&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BZZUEdYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epifbl5sa3aqx23x1zhb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BZZUEdYl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epifbl5sa3aqx23x1zhb.png" alt="Confirm destroy plan" width="573" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5.3. Wait a few minutes and your cluster should be destroyed! The created DigitalOcean project should also disappear from your control panel shortly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yn5dtRxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cou6op08fdgcwpdsf96.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yn5dtRxW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2cou6op08fdgcwpdsf96.png" alt="Successful destroy" width="448" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ohDOFk1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmuw22qcgzok9z3zfw04.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ohDOFk1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kmuw22qcgzok9z3zfw04.png" alt="VPC delay" width="497" height="80"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the VPC took some time to get destroyed.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank you!
&lt;/h2&gt;

&lt;p&gt;And that's it! I know this tutorial was a bit gisty so feel free to ask questions and ask for debugging help. Thanks to DigitalOcean for organizing the challenge! The repo can be found &lt;a href="https://github.com/mkdlt/digital-ocean-k8s-challenge"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>terraform</category>
      <category>kubernetes</category>
      <category>digitalocean</category>
      <category>postgres</category>
    </item>
    <item>
      <title>Build a Vacation Rental Site with Amplify Studio</title>
      <author>Ali Spittel</author>
      <pubDate>Tue, 14 Dec 2021 15:12:12 +0000</pubDate>
      <link>https://dev.to/aspittel/build-a-vacation-rental-site-with-amplify-studio-1n10</link>
      <guid>https://dev.to/aspittel/build-a-vacation-rental-site-with-amplify-studio-1n10</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-amplify-studio"&gt;
  &lt;/a&gt;
  What is Amplify Studio?
&lt;/h2&gt;

&lt;p&gt;One of the most exciting projects I've worked on in my career, AWS Amplify Studio, just launched at Re:Invent in public preview. With Amplify Studio you can quickly go from a designer’s vision to a full stack, cloud connected app that scales with your needs. You can create components in &lt;a href="https://www.figma.com/"&gt;Figma&lt;/a&gt;, import them into Amplify Studio, and then connect them to your AWS-backed data models. Then, Studio can export your UI components to human-readable React code that you can extend yourself. Let's go step by step through how you would build an app with Amplify Studio.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/7MKVCmNKT1c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-data-model"&gt;
  &lt;/a&gt;
  Create a Data Model
&lt;/h2&gt;

&lt;p&gt;Head to the &lt;a href="https://sandbox.amplifyapp.com/getting-started"&gt;Amplify Sandbox&lt;/a&gt;. Once there, change the dropdown after &lt;strong&gt;Build a&lt;/strong&gt; to "Blank", then click &lt;strong&gt;Get Started&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wrPRMeqK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/sandbox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wrPRMeqK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/sandbox.png" alt="Amplify Sandbox" width="880" height="484"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;strong&gt;Data Modeling&lt;/strong&gt; page, add a "Rental" model with the fields "name", "image", "price" (an integer), and "location".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6mkITXFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/rental-model.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6mkITXFq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/rental-model.png" alt="Rental model fields" width="880" height="702"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click the "Deploy to AWS" button on the upper right of the page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you're new to Amplify's data modeling, you can check out &lt;a href="https://welearncode.com/intro-amplify-admin-ui/"&gt;this tutorial&lt;/a&gt; to learn more!&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploy-to-aws"&gt;
  &lt;/a&gt;
  Deploy to AWS
&lt;/h2&gt;

&lt;p&gt;On the deployment page, choose whether or not you have an AWS account (create one if you don't have one yet!) and then choose an app name and deployment region.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-data-in-the-data-manager"&gt;
  &lt;/a&gt;
  Create Data in the Data Manager
&lt;/h2&gt;

&lt;p&gt;Once your app finishes deploying, click the &lt;strong&gt;Launch Studio&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ScS_iJeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/launch-studio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ScS_iJeV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/launch-studio.png" alt="Launch Studio button" width="880" height="249"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, head to the &lt;code&gt;content&lt;/code&gt; tab on the left side. This gives you an admin panel where you can perform full CRUD actions for your models -- create a few rental properties! Click &lt;strong&gt;Create rental&lt;/strong&gt; then use the form to create new entries.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j6v2P1ki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/new-instances.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j6v2P1ki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/new-instances.png" alt="New rental instances" width="880" height="135"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amplify-figma-file"&gt;
  &lt;/a&gt;
  Amplify Figma File
&lt;/h2&gt;

&lt;p&gt;If you go back to the home page for studio, you'll see an option on the Amplify Studio home page to "Accelerate UI development" - click the &lt;strong&gt;Build UI&lt;/strong&gt; button underneath. On the UI Library home page, there will be a &lt;strong&gt;Get started&lt;/strong&gt; button that once clicked asks you for a link to your Figma file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdRMxjmm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/ui-library-home-page.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdRMxjmm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/ui-library-home-page.png" alt="accelerate UI development with Amplify" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amplify launched a &lt;a href="https://www.figma.com/community/file/1047600760128127424"&gt;UI Kit&lt;/a&gt; on Figma. You can duplicate this file and then make any modifications that you want and create your own components! Do this in the &lt;code&gt;components&lt;/code&gt; Figma page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUZjN0O7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/figma-components.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUZjN0O7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/figma-components.png" alt="All components in Figma" width="880" height="460"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll modify the appearance of &lt;code&gt;CardA&lt;/code&gt; to round the corners, bold some text, and remove the background color.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xclUPvwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/cardA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xclUPvwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/cardA.png" alt="CardA with modifications" width="736" height="962"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This UI kit correlates with the &lt;a href="https://ui.docs.amplify.aws/"&gt;Amplify UI Components&lt;/a&gt;, which Studio will be using under the hood when it generates your Figma components to React.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#import-figma-to-studio"&gt;
  &lt;/a&gt;
  Import Figma to Studio
&lt;/h2&gt;

&lt;p&gt;Speaking of, let's import our Figma components into Studio. Copy your Figma file's URL and paste it into Studio. Then click "Continue". Your components will be loaded into Studio.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wk7pUG0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/figma-sync.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wk7pUG0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/figma-sync.png" alt="sync to Figma" width="880" height="700"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From there, you can accept or reject your components, and you can view their variants. I'll go ahead and "Accept all".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#link-data"&gt;
  &lt;/a&gt;
  Link Data
&lt;/h2&gt;

&lt;p&gt;Now, I've created a data model and UI components. I now need to link my data to the UI. I'll choose my &lt;code&gt;CardA&lt;/code&gt; component and then click &lt;strong&gt;Configure&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NTUzsCkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/component-preview.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NTUzsCkN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/component-preview.png" alt="" width="880" height="516"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then, create a prop using the component properties form. Choose a name and then use the dropdown to find the model you created! This will pass the data from that model to the component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rkVY-7hc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/component-props.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rkVY-7hc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/component-props.png" alt="" width="586" height="790"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From there, select the elements you would like to populate with your data and choose the attribute you'd like to use. I'll click the "image" which right now is a placeholder, then I'll set the &lt;code&gt;src&lt;/code&gt; prop to &lt;code&gt;rental.image&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ED_xt16c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/src-rental-image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ED_xt16c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/src-rental-image.png" alt="" width="608" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the spot that currently says "Classic Long Sleeve T-Shirt", set the label to &lt;code&gt;rental.name&lt;/code&gt;. Finally, for the price, I'll set what currently says $99 to the price from my data model. I'll also concatenate that with a "$" and "/night".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TYXShZ5d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/concat.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TYXShZ5d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/concat.png" alt="" width="600" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, my component renders my live data!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xeN6-ebf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/data-filled.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xeN6-ebf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/data-filled.png" alt="" width="760" height="1060"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-a-collection"&gt;
  &lt;/a&gt;
  Create a Collection
&lt;/h2&gt;

&lt;p&gt;I want to display all my rentals, instead of just one. So, I'll create a collection from my component. Click "Create Collection" on the right side of the page. Then choose a name for your collection, I'll go with &lt;code&gt;RentalCollection&lt;/code&gt;. Once on the collection page, you can choose whether your cards render in a grid or list, the number of columns, padding between, and the direction of the collection.&lt;/p&gt;

&lt;p&gt;I'll create a grid, then switch to four columns and add 4px in between each one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mCL3LCyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/collection.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mCL3LCyz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/collection.png" alt="" width="880" height="625"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also modify the data set that goes into the collection. You can sort the items, or add a filter by clicking "View/Edit" next to "Data set".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eo537slh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/change-dataset.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eo537slh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/change-dataset.png" alt="" width="880" height="394"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pull-to-studio"&gt;
  &lt;/a&gt;
  Pull to Studio
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;If you're new to React, check out &lt;a href="https://welearncode.com/beginners-guide-react-2020/"&gt;this tutorial&lt;/a&gt; before continuing!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we have components created with data bound to them, let's use those components in an app! I'll create a React app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npx create-react-app amplify-studio-tutorial
$ cd amplify-studio-tutorial
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I'll install the Amplify JavaScript libraries and React components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm i aws-amplify @aws-amplify/ui-react
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I'll run the Amplify pull command to run code generation in my app. You can find the &lt;code&gt;amplify pull&lt;/code&gt; command specific to your app by clicking "local setup instructions" in Studio.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i_YXIscX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/local-setup.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i_YXIscX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/local-setup.png" alt="" width="880" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run this command in your React app, and you'll see quite a few files generated including &lt;code&gt;/src/ui-components&lt;/code&gt; -- this contains all of your React components! You can open them up and see what's inside.&lt;/p&gt;

&lt;p&gt;Now, let's set our app up. First, in your &lt;code&gt;index.js&lt;/code&gt; file, configure amplify by pasting in these three lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import config from './aws-exports'
import Amplify from 'aws-amplify'

Amplify.configure(config)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These will tie your frontend to your Amplify-created backend.&lt;/p&gt;

&lt;p&gt;Now, head to your App.js, and clear out the existing &lt;code&gt;return ()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Import the &lt;code&gt;AmplifyProvider&lt;/code&gt; component, and the Amplify CSS file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { AmplifyProvider } from '@aws-amplify/ui-react'
import '@aws-amplify/ui-react/styles.css'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, add the &lt;code&gt;AmplifyProvider&lt;/code&gt; at the top level of your &lt;code&gt;return&lt;/code&gt;. This will provide styling to all of its child components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App () {
  return (
    &amp;lt;AmplifyProvider&amp;gt;
    &amp;lt;/AmplifyProvider&amp;gt;
  )
}

export default App
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's render our &lt;code&gt;RentalCollection&lt;/code&gt;! First, import it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { RentalCollection } from './ui-components'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, add it to the render:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App () {
  return (
    &amp;lt;AmplifyProvider&amp;gt;
+ &amp;lt;RentalCollection /&amp;gt;
    &amp;lt;/AmplifyProvider&amp;gt;
  )
}

export default App
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run your React server and check out your page, you'll have your rentals collection!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fGJBrkgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/rentals.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fGJBrkgq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/rentals.png" alt="" width="880" height="733"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Amplify doesn't load a font in for you automatically, so you'll probably want to add your own. For example, you could add &lt;code&gt;Inter&lt;/code&gt; to your &lt;code&gt;App.css&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@import url('https://fonts.googleapis.com/css2?family=Inter:slnt,wght@-10..0,100..900&amp;amp;display=swap');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-a-prop"&gt;
  &lt;/a&gt;
  Use a Prop
&lt;/h2&gt;

&lt;p&gt;You can customize these React components in your own code. First, you can use props in order to modify your components. If you wanted to make your grid of rentals into a list, for example, you could pass the prop &lt;code&gt;type="list"&lt;/code&gt; to your &lt;code&gt;RentalCollection&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;RentalCollection type="list" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find a list of all props in the &lt;a href="https://ui.docs.amplify.aws/components"&gt;Amplify UI docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-an-override"&gt;
  &lt;/a&gt;
  Use an Override
&lt;/h2&gt;

&lt;p&gt;Sometimes, you'll want to modify child components instead of the top level one. You can use overrides in order to do so!&lt;/p&gt;

&lt;p&gt;Right now, the images are kind of wonky due to my styling in Figma. Let's change the object-fit to cover for the image via overrides to fix that.&lt;/p&gt;

&lt;p&gt;Open up the code for the &lt;code&gt;RentalCollection&lt;/code&gt; component. Inside each of its child components, you'll notice a line of code like this: &lt;code&gt;{...getOverrideProps(overrides, "Collection.CardA[0]")}&lt;/code&gt;. The second value is a key you can use to specify which component you want to add an override to.&lt;/p&gt;

&lt;p&gt;In this case we'll add the following to our &lt;code&gt;RentalCollection&lt;/code&gt; instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;RentalCollection
 type='list' overrides={{
   'Collection.CardA[0]': {
   }
 }}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add overrides to the CardA component. In this case, though, we want to override the &lt;code&gt;Image&lt;/code&gt; component inside of &lt;code&gt;CardA&lt;/code&gt;. Open up the code for that component, and you'll see similar overrides for each of its child components.&lt;/p&gt;

&lt;p&gt;We'll pass a second override object to the CardA override. Then we'll set the key to the override key for our Image. Then we'll set the objectFit prop to &lt;code&gt;cover&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;RentalCollection
 type='list' overrides={{
   'Collection.CardA[0]': {
       overrides: {
        'Flex.Image[0]': { objectFit: 'cover' }
       }
    }
 }}
/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use this to add almost any customization you need to your components!&lt;/p&gt;

&lt;p&gt;Note that if you re-run &lt;code&gt;amplify pull&lt;/code&gt; your components will regenerate. Because of this, you won't want to modify the components in the &lt;code&gt;ui-components&lt;/code&gt; directory directly. If you decided you wanted to modify the code in a component file, you could drag it out of that directory and it would no longer get overwritten by &lt;code&gt;amplify pull&lt;/code&gt;!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theming"&gt;
  &lt;/a&gt;
  Theming
&lt;/h2&gt;

&lt;p&gt;You may want to add a theme to your UI components so that they match your brand. You can do this via a JavaScript object, CSS variables, or through the &lt;a href="https://www.figma.com/community/plugin/1040722185526429545/AWS-Amplify-Theme-Editor"&gt;Amplify Theme Editor Figma Plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Install the plugin, then choose it from the Figma plugin dropdown.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J3eqZ9hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/figma-plugin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J3eqZ9hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/figma-plugin.png" alt="" width="880" height="1008"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll be prompted to enter your app's Amplify Studio URL, and then to sign into your app. In order to get your sign in, you can create a user within the AWS Amplify Console for your app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82gCY1JL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/invite-users.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82gCY1JL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://welearncode.com/studio-vacation-site/invite-users.png" alt="" width="880" height="262"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: make sure to reset your new user's password before using it to log into the Figma Plugin!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can then change any of the colors for your app, change your brand colors, and any of the components' colors. You can apply them to the Figma file and to your Studio app. Once you sync with Studio, the next time you run &lt;code&gt;amplify pull&lt;/code&gt;, you'll have a theme object that you can pass as a prop to &lt;code&gt;AmplifyProvider&lt;/code&gt; which will apply your theme to your app!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ui.docs.amplify.aws/theming"&gt;Learn more about theming in the docs.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-from-figma"&gt;
  &lt;/a&gt;
  Update from Figma
&lt;/h2&gt;

&lt;p&gt;If at any point you want to update a component, you can do so within Figma and then click "Sync with Figma" in Studio. Then, you'll be able to observe your changes compared to what you have now, and either accept or reject your changes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-the-rest-of-the-amplify-ecosystem"&gt;
  &lt;/a&gt;
  Use the rest of the Amplify Ecosystem
&lt;/h2&gt;

&lt;p&gt;You can use the whole Amplify ecosystem with an app that you create with Amplify Studio. You can add frontend hosting, additional backend resources like authentication, storage, and serverless functions, and then extend your project outside of what Amplify natively offers with CDK.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I can't wait for you to build your own app with Amplify Studio out. If you have any feedback, please leave a &lt;a href="https://github.com/aws-amplify/amplify-adminui"&gt;GitHub issue&lt;/a&gt; or join our &lt;a href="https://discord.gg/amplify"&gt;Discord Community&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>aws</category>
    </item>
    <item>
      <title>Building an EIP-1559 Gas Tracker</title>
      <author>Rounak Banik</author>
      <pubDate>Tue, 14 Dec 2021 15:07:00 +0000</pubDate>
      <link>https://dev.to/rounakbanik/building-an-eip-1559-gas-tracker-4p7k</link>
      <guid>https://dev.to/rounakbanik/building-an-eip-1559-gas-tracker-4p7k</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hbsx6NEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i67qt8spaxe6rpwoq0ij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hbsx6NEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i67qt8spaxe6rpwoq0ij.png" alt="EIP-1559 Image" width="678" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;The London Hard Fork in August 2021 brought about one of the biggest upgrades that the Ethereum network has ever witnessed. The fork implemented EIP-1559; a gas pricing mechanism that is touted to be superior to the blind auction model. It also introduced fundamental changes in the monetary policy of Ether (ETH), making it a deflationary currency at least in the short term.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will build a gas tracker that tracks the two new components of gas fees in EIP-1559 as well as other statistics (such as block volume) for the latest 20 blocks. By doing so, we will achieve two important goals:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A deeper understanding of how EIP-1559 works under the hood and what improvements it brings to the table.&lt;/li&gt;
&lt;li&gt;A fully functional gas tracker app that retrieves the latest block volumes and gas fees, broken down by base and priority fee.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In order to do this, we will use Alchemy, the Alchemy web3.js library, Node, and React. Don't worry if some of these words sound alien to you, we will cover them in detail!&lt;/p&gt;

&lt;p&gt;This tutorial does assume that you have a basic understanding of how gas and gas prices work on Ethereum though. A preliminary understanding of EIP-1559 is also helpful but not required. In case you need a primer, I strongly suggest going through this &lt;a href="https://blog.alchemy.com/blog/eip-1559"&gt;excellent article on Alchemy's blog&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-quick-recap-of-eip1559"&gt;
  &lt;/a&gt;
  A Quick Recap of EIP-1559
&lt;/h2&gt;

&lt;p&gt;EIP-1559 brought about the following changes in the gas pricing mechanism of Ethereum.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The blind auction gas fee has now been replaced by two component fees: a base free and a priority fee (or miner's tip).&lt;/li&gt;
&lt;li&gt;The base fee is determined automatically by the network. It can increases up to 12.5% if the previous block was full and decrease by up to 12.5% if the previous block was empty.&lt;/li&gt;
&lt;li&gt;The miner's tip is determined by the user and can be tuned based on the urgency of the transaction.&lt;/li&gt;
&lt;li&gt;The upper limit of block sizes has doubled to 30 million gas. This has been done to accomodate sudden spikes in traffic. The expectation, though, is that the average block volume will be 50%.&lt;/li&gt;
&lt;li&gt;The base fee is burned by the network to prevent miners from artificially flooding blocks. Miners, however, get to pocket the tip.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You will be able to see how this works in real time with the gas tracker that we build. We will be building this project in two parts: in the first part, we will write a node script that will track transaction fee history in real time. In the second part, we will create a React app leveraging this script to build our final tracker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-1-the-transaction-fee-history-script"&gt;
  &lt;/a&gt;
  Part 1: The Transaction Fee History script
&lt;/h2&gt;

&lt;p&gt;In this section, we will write a script (in node) that will allow us to get the gas fee history of the latest 20 blocks on the Ethereum network.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-0-install-node-and-npm"&gt;
  &lt;/a&gt;
  Step 0: Install node and npm
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b_xOY6jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7x90udj6afkoznubg4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_xOY6jp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g7x90udj6afkoznubg4g.png" alt="Node and npm" width="880" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure you have node and npm installed on your local computer (at least v14 or higher). You can download it &lt;a href="https://nodejs.org/en/download/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-an-alchemy-account"&gt;
  &lt;/a&gt;
  Step 1: Create an Alchemy account
&lt;/h3&gt;

&lt;p&gt;In order to get the latest gas fee history of blocks, we will have to connect to and communicate with the Ethereum network. Alchemy is a blockchain developer platform that allows us to do this without having to spin up our own nodes.&lt;/p&gt;

&lt;p&gt;You can create an Alchemy account for free &lt;a href="https://alchemy.com/?a=d7d81950c0"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-create-an-alchemy-app-and-api-key"&gt;
  &lt;/a&gt;
  Step 2: Create an Alchemy App (and API key)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3clAfN46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkti0yseb1wp47ypwkfj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3clAfN46--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkti0yseb1wp47ypwkfj.png" alt="Alchemy Dashboard" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create an app on the &lt;a href="https://dashboard.alchemyapi.io/"&gt;Alchemy dashboard&lt;/a&gt;. Set the chain to &lt;strong&gt;Ethereum&lt;/strong&gt; and the network to &lt;strong&gt;Mainnet&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSXlKgFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vi9cxwhj1rv58un9d0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSXlKgFD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vi9cxwhj1rv58un9d0z.png" alt="App Key Page" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, visit your app's page and click on &lt;strong&gt;View Key&lt;/strong&gt;. This will open a popup with the HTTP and Websocket URLs of your app. For this tutorial, we will be using the websocket URL.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-create-node-project-and-install-dependencies"&gt;
  &lt;/a&gt;
  Step 3: Create node project and install dependencies
&lt;/h3&gt;

&lt;p&gt;We are now in a good position to start writing our node script. Let's create an empty repository and install dependencies. For this script, we will be requiring the &lt;a href="https://docs.alchemy.com/alchemy/documentation/alchemy-web3"&gt;Alchemy web3.js library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On your Terminal (or Command Prompt), run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; mkdir gas-tracker-script &amp;amp;&amp;amp; cd gas-tracker-script
&amp;gt; npm init -y
&amp;gt; npm install --save @alch/alchemy-web3
&amp;gt; touch main.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should create a repository named &lt;code&gt;gas-tracker-script&lt;/code&gt; that holds all the files and dependencies we need. Open this repo in you favorite code editor. We will be writing all our code in the &lt;code&gt;main.js&lt;/code&gt; file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-create-a-web3-client-instance-using-alchemy"&gt;
  &lt;/a&gt;
  Step 4: Create a web3 client instance using Alchemy
&lt;/h3&gt;

&lt;p&gt;Creating a client instance with Alchemy web3 is incredibly simple. &lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;main.js&lt;/code&gt; file, add the following lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { createAlchemyWeb3 } = require("@alch/alchemy-web3");

// Using WebSockets
const web3 = createAlchemyWeb3(
    "wss://eth-mainnet.alchemyapi.io/v2/&amp;lt;--API KEY--&amp;gt;",
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to replace the placeholder above with the websocket URL of your app. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-get-fee-history-of-the-last-20-blocks"&gt;
  &lt;/a&gt;
  Step 5: Get fee history of the last 20 blocks
&lt;/h3&gt;

&lt;p&gt;We want to get the gas fees history of the last 10 blocks. Data we're interested in includes the base fee, range of priority fees, block volume, and block number.&lt;/p&gt;

&lt;p&gt;Fortunately for us, Alchemy has a very convenient &lt;a href="https://docs.alchemy.com/alchemy/apis/ethereum/eth_feehistory"&gt;eth_feeHistory&lt;/a&gt; that returns all the aforementioned data automatically.&lt;/p&gt;

&lt;p&gt;All we need to specify is the newest block we want data for, the total number of blocks to look at, and the percentile ranges for priority fees.&lt;/p&gt;

&lt;p&gt;We are interested in the latest 20 blocks and the 25th, 50th, and 75th percentile of priority fees.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;web3.eth.getFeeHistory(20, "latest", [25, 50, 75]).then(console.log)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this script (using &lt;code&gt;node main.js&lt;/code&gt;) should fetch you the data you're looking for. Here is some data I received after requesting for 5 blocks worth of data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1bhctkFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecjl22k207rxyglsva6c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1bhctkFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecjl22k207rxyglsva6c.png" alt="Terminal output" width="591" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-6-format-output"&gt;
  &lt;/a&gt;
  Step 6: Format output
&lt;/h3&gt;

&lt;p&gt;The output we received in step 5 is correct but is not very readable. The fees are expressed in hexadecimals and the data structure makes it difficult to figure out which data corresponds to which block.&lt;/p&gt;

&lt;p&gt;Let's write a small function that transforms the raw data into a list of dictionaries where each dictionary will contain data on a particular block. The function also converts all hexadecimal gas values denominated in wei to decimals denominated in Gwei.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const formatOutput = (data, numBlocks) =&amp;gt; {

    let blocks = []
    for (let i = 0; i &amp;lt; numBlocks; i++) {
        blocks.push({
            blockNumber: Number(data.oldestBlock) + i,
            reward: data.reward[i].map(r =&amp;gt; Math.round(Number(r) / 10 ** 9)),
            baseFeePerGas: Math.round(Number(data.baseFeePerGas[i]) / 10 ** 9),
            gasUsedRatio: data.gasUsedRatio[i],
        })
    }
    return blocks;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, let's use this function is callback of &lt;code&gt;feeHistory&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const numBlocks = 5;

web3.eth.getFeeHistory(numBlocks, "latest", [25, 50, 75]).then((data) =&amp;gt; {
    const blocks = formatOutput(data, numBlocks);
    console.log(blocks);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running this version of the script should yield output in the following format:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FHWsFshc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73nbc2qlku9kwfresskp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FHWsFshc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/73nbc2qlku9kwfresskp.png" alt="Terminal output" width="470" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-7-subscribe-to-latest-block-headers"&gt;
  &lt;/a&gt;
  Step 7: Subscribe to latest block headers
&lt;/h3&gt;

&lt;p&gt;A new block gets added to the Ethereum blockchain approximately every 15 seconds. Therefore, we would ideally want to subscribe to the event of blocks being added and update our transaction history such that it always shows data for the latest 20 blocks.&lt;/p&gt;

&lt;p&gt;Let's nest the &lt;code&gt;getFeeHistory&lt;/code&gt; functionality within a subscription event callback.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let subscription = web3.eth.subscribe('newBlockHeaders');

subscription.on("data", () =&amp;gt; {
    web3.eth.getFeeHistory(numBlocks, "latest", [25, 50, 75]).then((data) =&amp;gt; {
        const blocks = formatOutput(data, numBlocks);
        console.log(blocks);
    });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the &lt;code&gt;main.js&lt;/code&gt; script now will output the freshest batch of data every 15 seconds or so. If you've come this far, congratulations! You now have a fully functional gas tracker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2-the-gas-tracker-react-app"&gt;
  &lt;/a&gt;
  Part 2: The Gas Tracker React App
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EfkdRTQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obgf0x9giq33nam1x4ui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EfkdRTQ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obgf0x9giq33nam1x4ui.png" alt="React" width="880" height="481"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous section, we wrote a script that retrieved the fee history of the last 20 blocks every time a new block was added to the Ethereum mainnet.&lt;/p&gt;

&lt;p&gt;In this section, we will build a small React app that transports this data from our terminal to the browser. In addition to fee transaction history, we will also display the average gas fees and block volumes over the last 20 blocks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-initialize-react-project-and-install-dependencies"&gt;
  &lt;/a&gt;
  Step 1: Initialize React project and install dependencies
&lt;/h3&gt;

&lt;p&gt;Run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; npx create-react-app gas-tracker-frontend
&amp;gt; cd gas-tracker-frontend
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should create a sample React project. Apart from the react dependencies, we will also need to install the Alchemy web3 library from the previous section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; npm install --save @alch/alchemy-web3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2-populate-the-appjs-file"&gt;
  &lt;/a&gt;
  Step 2: Populate the App.js file
&lt;/h3&gt;

&lt;p&gt;All our logic will reside in the &lt;code&gt;App.js&lt;/code&gt; file. Copy the following contents into the aforementioned file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css';
import { useEffect, useState } from 'react';
import { createAlchemyWeb3 } from '@alch/alchemy-web3';

const NUM_BLOCKS = 20;

function App() {

  const [blockHistory, setBlockHistory] = useState(null);
  const [avgGas, setAvgGas] = useState(null);
  const [avgBlockVolume, setAvgBlockVolume] = useState(null);

  const formatOutput = (data) =&amp;gt; {

    let avgGasFee = 0;
    let avgFill = 0;
    let blocks = [];

    for (let i = 0; i &amp;lt; NUM_BLOCKS; i++) {

      avgGasFee = avgGasFee + Number(data.reward[i][1]) + Number(data.baseFeePerGas[i])
      avgFill = avgFill + Math.round(data.gasUsedRatio[i] * 100);

      blocks.push({
        blockNumber: Number(data.oldestBlock) + i,
        reward: data.reward[i].map(r =&amp;gt; Math.round(Number(r) / 10 ** 9)),
        baseFeePerGas: Math.round(Number(data.baseFeePerGas[i]) / 10 ** 9),
        gasUsedRatio: Math.round(data.gasUsedRatio[i] * 100),
      })
    }

    avgGasFee = avgGasFee / NUM_BLOCKS;
    avgGasFee = Math.round(avgGasFee / 10 ** 9)

    avgFill = avgFill / NUM_BLOCKS;
    return [blocks, avgGasFee, avgFill];
  }

  useEffect(() =&amp;gt; {

    const web3 = createAlchemyWeb3(
      "wss://eth-mainnet.alchemyapi.io/v2/&amp;lt;--API KEY--&amp;gt;",
    );

    let subscription = web3.eth.subscribe('newBlockHeaders');

    subscription.on('data', () =&amp;gt; {
      web3.eth.getFeeHistory(NUM_BLOCKS, "latest", [25, 50, 75]).then((feeHistory) =&amp;gt; {
        const [blocks, avgGasFee, avgFill] = formatOutput(feeHistory, NUM_BLOCKS);
        setBlockHistory(blocks);
        setAvgGas(avgGasFee);
        setAvgBlockVolume(avgFill);
      });
    });

    return () =&amp;gt; {
      web3.eth.clearSubscriptions();
    }
  }, [])


  return (
    &amp;lt;div className='main-container'&amp;gt;
      &amp;lt;h1&amp;gt;EIP-1559 Gas Tracker&amp;lt;/h1&amp;gt;
      {!blockHistory &amp;amp;&amp;amp; &amp;lt;p&amp;gt;Data is loading...&amp;lt;/p&amp;gt;}
      {avgGas &amp;amp;&amp;amp; avgBlockVolume &amp;amp;&amp;amp; &amp;lt;h3&amp;gt;
        &amp;lt;span className='gas'&amp;gt;{avgGas} Gwei&amp;lt;/span&amp;gt; | &amp;lt;span className='vol'&amp;gt;{avgBlockVolume}% Volume&amp;lt;/span&amp;gt;
      &amp;lt;/h3&amp;gt;}
      {blockHistory &amp;amp;&amp;amp; &amp;lt;table&amp;gt;
        &amp;lt;thead&amp;gt;
          &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;Block Number&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Base Fee&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Reward (25%)&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Reward (50%)&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Reward (75%)&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Gas Used&amp;lt;/th&amp;gt;
          &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
          {blockHistory.map(block =&amp;gt; {
            return (
              &amp;lt;tr key={block.blockNumber}&amp;gt;
                &amp;lt;td&amp;gt;{block.blockNumber}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{block.baseFeePerGas}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{block.reward[0]}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{block.reward[1]}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{block.reward[2]}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;{block.gasUsedRatio}%&amp;lt;/td&amp;gt;
              &amp;lt;/tr&amp;gt;
            )
          })}
        &amp;lt;/tbody&amp;gt;
      &amp;lt;/table&amp;gt;}
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since this isn't a React course, we are not doing to dive deep into the React-specific bits. But you should be able to observe that all that we're doing is retrieving fee history like we did in our script and outputting it in the form of an HTML table.&lt;/p&gt;

&lt;p&gt;The only additional logic we employ is computing average gas price and average block volumes over 20 blocks which is a trivial task to perform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-step-3-add-some-styles"&gt;
  &lt;/a&gt;
  (Optional) Step 3: Add some styles
&lt;/h3&gt;

&lt;p&gt;You can add some basic styles in the &lt;code&gt;App.css&lt;/code&gt; file as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.main-container {
    text-align: center;
}

table {
    border-collapse: collapse;
    margin: 20px auto;
    box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
}

thead {
    background: linear-gradient(267.45deg,#05d5ff -34.23%,#53f 99.39%);
    color: white;
    padding: 10px;
}

th {
    font-size: 18px;
    padding: 15px;

}

tbody &amp;gt; tr {
    border-top: 1px solid #ccc; 
    border-bottom: 1px solid #ccc;
    margin: 0px;
    padding: 15px;
}

td {
    padding: 6px;
}

.gas {
    color: #4299E1;
}

.vol {
    color: #4C51BF;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-deploy-app-to-localhost"&gt;
  &lt;/a&gt;
  Step 4: Deploy app to localhost
&lt;/h3&gt;

&lt;p&gt;We're all done. Watch your app in all its glory by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what the app should look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eN8W2VVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by05a6u5lyeozgyertje.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eN8W2VVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by05a6u5lyeozgyertje.png" alt="Gas Tracker" width="880" height="482"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You've built a fully functional gas tracker app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analysis"&gt;
  &lt;/a&gt;
  Analysis
&lt;/h2&gt;

&lt;p&gt;Let's take a step back and analyze the data above. Here are a few things we can observe which are a direct result of the EIP-1559 implementation.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The base fee does not fluctuate wildly from block to block. In fact, the maximum it increases or decreases is by 12.5%.&lt;/li&gt;
&lt;li&gt;The priority fee, in most cases, is a small percentage of the total fee.&lt;/li&gt;
&lt;li&gt;Block volumes tend to fluctuate but the average block volumes hover around 50%.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The data does seem to suggest that gas fees in this model is much more predictable. Since everyone pays the same base fee and the priority fee, in most cases, is a small percentage of total fee, most transactions don't end up overpaying for gas. Therefore, this small sample of data suggests that EIP-1559 has succeeded in what it set out to achieve: more predictable gas prices, and less overpayment in gas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We've covered a lot of ground in this article. By building an EIP-1559 gas tracker from scratch, I hope you were able to grasp and appreciate the improvement it brings to transacting on Ethereum.&lt;/p&gt;

&lt;p&gt;I also hope that you've gotten a decent grasp on how to use Alchemy, its APIs, and the web3.js library. We've barely scratched the surface with respect to its capabilities and offerings. I strongly suggest you dig more into &lt;a href="https://docs.alchemy.com/alchemy/"&gt;their documentation&lt;/a&gt; if and when you set out to build your next great dapp.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>javascript</category>
      <category>react</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What is AWS S3 Intelligent-Tiering?</title>
      <author>Vijay Patel</author>
      <pubDate>Tue, 14 Dec 2021 15:03:18 +0000</pubDate>
      <link>https://dev.to/easyawslearn/what-is-aws-s3-intelligent-tiering-2opn</link>
      <guid>https://dev.to/easyawslearn/what-is-aws-s3-intelligent-tiering-2opn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-aws-s3-intelligenttiering"&gt;
  &lt;/a&gt;
  What is AWS S3 Intelligent-Tiering
&lt;/h2&gt;

&lt;p&gt;S3 Intelligent-Tiering is an Amazon S3 storage class that analyzes an AWS user's stored data and automatically moves it between storage tiers based on usage frequency. It is designed to optimize storage costs for data with irregular or unknown access patterns.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Here is a full Demonstration video on AWS S3 Intelligent-Tiering👇&lt;/code&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=KYqgBIIuilo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TQadks0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m0c8q5lfc5z3mlc806j.png" alt="Image description" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#s3-intelligenttiering-features"&gt;
  &lt;/a&gt;
  S3 Intelligent-Tiering features
&lt;/h2&gt;

&lt;p&gt;A user can access S3 Intelligent-Tiering through the AWS Management Console, command-line interface, or S3 API. He or she can select this storage class when data is uploaded to S3, or move existing data into this class from another class. Lifecycle rules can also be established to transition data to another storage class, such as Amazon S3 Glacier, after a designated period.&lt;br&gt;
The service monitors and predicts user behavior to determine the tier in which it will store data. Those predictions are the output of machine learning algorithms AWS built to analyze data traffic patterns across the trillions of objects stored in S3.&lt;br&gt;
S3 Intelligent-Tiering is one of several S3 storage options designed around accessibility demands. S3 Intelligent-Tiering is not recommended for a user who knows data access patterns well.&lt;/p&gt;




&lt;p&gt;▬▬▬▬▬▬ WANT TO LEARN MORE? ▬▬▬▬▬▬&lt;br&gt;
Full Terraform tutorial ► &lt;a href="https://bit.ly/2GwK8V2"&gt;https://bit.ly/2GwK8V2&lt;/a&gt;&lt;br&gt;
DevOps Tools, like Ansible ► &lt;a href="https://bit.ly/3iASHuP"&gt;https://bit.ly/3iASHuP&lt;/a&gt;&lt;br&gt;
Docker Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
AWS Tutorial ► &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
GCP Tutorial ► &lt;a href="https://bit.ly/3mwh412"&gt;https://bit.ly/3mwh412&lt;/a&gt;&lt;br&gt;
Jenkins Tutorials ► &lt;a href="https://bit.ly/3iHnfv4"&gt;https://bit.ly/3iHnfv4&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>s3</category>
      <category>awss3</category>
      <category>cloudcomputing</category>
    </item>
  </channel>
</rss>
