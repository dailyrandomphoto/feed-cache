<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What language do I start with? (personal opinion)</title>
      <author>‚ÄòAbdelra·∏•man Dwedar üë®üèª‚Äçüíªüáµüá∏</author>
      <pubDate>Sat, 16 Oct 2021 19:51:12 +0000</pubDate>
      <link>https://dev.to/abdelrahman_dwedar/what-language-do-i-start-with-personal-opinion-30g4</link>
      <guid>https://dev.to/abdelrahman_dwedar/what-language-do-i-start-with-personal-opinion-30g4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#how-can-we-choose-our-first-languages"&gt;
  &lt;/a&gt;
  How can we choose our first languages? ü§î
&lt;/h1&gt;

&lt;p&gt;We have to take 5 main standards in account:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#howEasy"&gt;How easy it's&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#communities"&gt;The big of their communities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;The amount of free resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#IDE"&gt;The easy you can run the code (Their IDEs are easy)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inDemand"&gt;The most in-demand&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#how-easy-its"&gt;
  &lt;/a&gt;
  How easy it's &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The start for you has to be easy or you might hate programming from the beginning, so you don't have to start with something like C++ or Java, it's not about how "cool" that language is, it's about how much you understand it and comfortable with it.&lt;/p&gt;

&lt;p&gt;Start with easy programming language such as &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;JavaScript&lt;/strong&gt;, &lt;strong&gt;Ruby&lt;/strong&gt;, &lt;strong&gt;PHP&lt;/strong&gt;.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#the-most-important-thing-that-you-dont-think-that-programming-is-easy-that-may-stop-you-too"&gt;
  &lt;/a&gt;
  The most important thing that you don't think that programming is easy, that may stop you too.
&lt;/h6&gt;



&lt;h2&gt;
  &lt;a href="#the-big-of-their-communities"&gt;
  &lt;/a&gt;
  The big of their communities &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Starting with a language that have big community will make starting with it much easier. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can start with something easy like PHP, Ruby, etc... but why do we start with Python &amp;amp; JS?&lt;/strong&gt;&lt;br&gt;because, they have a really big community that can help you whenever you're stuck. and you need that help while starting. BUT you can start with others too.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#some-programming-languages-with-the-biggest-communities"&gt;
  &lt;/a&gt;
  &lt;a href="https://content.techgig.com/10-programming-languages-with-the-biggest-community-support/articleshow/78908491.cms"&gt;Some Programming languages with the biggest communities&lt;/a&gt;
&lt;/h6&gt;



&lt;h3&gt;
  &lt;a href="#the-amount-of-free-resources"&gt;
  &lt;/a&gt;
  The amount of free resources &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;When you start learning programming the resources is the most important thing to think about, some languages doesn't have easy to get resources.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#so-find-a-programming-language-that-has-a-lot-of-recourses"&gt;
  &lt;/a&gt;
  So find a programming language that has &lt;strong&gt;a lot of recourses&lt;/strong&gt;
&lt;/h6&gt;



&lt;h3&gt;
  &lt;a href="#the-easy-you-can-run-the-code-their-ides-are-easy"&gt;
  &lt;/a&gt;
  The easy you can run the code (Their IDEs are easy) &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Running&lt;/strong&gt;, &lt;strong&gt;debugging&lt;/strong&gt; and &lt;strong&gt;testing&lt;/strong&gt; is so important for any programmer\developer and you have to learn it, but if it's easy that'll take so much time of you just trying to run it while you can use other language like &lt;strong&gt;Python&lt;/strong&gt; and run it easily and that'll make you will will progress in lesser time.&lt;/p&gt;

&lt;p&gt;You can use &lt;a href="https://visualstudio.microsoft.com/"&gt;Visual Studio&lt;/a&gt; or &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio code&lt;/a&gt; since it can run lots of languages and they're easy to use.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-most-indemand"&gt;
  &lt;/a&gt;
  The most in-demand &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The best language to start with is the one that you can work with once you finish learning it, or at least you have more years of experience since you started earlier, which indeed will increase your chance of finding a job.&lt;br&gt;
So you have to choose a language you might start with after learning it, so you have to know what do most of companies search for.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#the-most-indemand-programming-languages-in-2021"&gt;
  &lt;/a&gt;
  The Most In-Demand Programming Languages in 2021
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://bootcamp.berkeley.edu/blog/most-in-demand-programming-languages/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IJ9GvP4a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.ucberkeleybootcamp.com/wp-content/uploads/sites/106/2020/12/most-demand-programming-languages-2021-1017x1024.jpg" alt="The Most In-Demand Programming Languages in 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#click-on-the-picture-to-check-the-resource"&gt;
  &lt;/a&gt;
  Click on the picture to check the resource
&lt;/h6&gt;

&lt;p&gt;This list is only for 2021, if you are reading this in like 2024, 2025, etc... the in-demand languages will be changed probably, so you have to &lt;a href="https://www.google.com/search?q=most-in-demand-programming-languages&amp;amp;rlz=1C1CHBD_arEG952EG952&amp;amp;oq=most-in-demand-programming-languages&amp;amp;aqs=chrome..69i57j69i60.666j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Google&lt;/a&gt; it yourself üòÑ&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations
&lt;/h2&gt;

&lt;p&gt;You're not required to follow all the standards of this post, there's ones more important the ones, so you have to just measure them, don't take it for granted. Good luck. üëçüèª&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#keep-in-mind"&gt;
  &lt;/a&gt;
  Keep in mind:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Do not be intolerant of the language you will start with or force others to start with it as well.&lt;/li&gt;
&lt;li&gt;Don't stop learning, and don't reject learning new language for no reason.&lt;/li&gt;
&lt;li&gt;When you learn your first language; focus more on learning the basics of programming itself, not just learning the language.


&lt;h3&gt;Thank you for reading üòä&lt;/h3&gt;
I've love to hear what do you think about that topic in the discussion below. &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Machine  Learning in Artificial Intelligence üíØ</title>
      <author>Deepak Gupta</author>
      <pubDate>Sat, 16 Oct 2021 18:26:59 +0000</pubDate>
      <link>https://dev.to/deepakguptacoder/machine-learning-in-artificial-intelligence-35cm</link>
      <guid>https://dev.to/deepakguptacoder/machine-learning-in-artificial-intelligence-35cm</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#hello-everyone"&gt;
  &lt;/a&gt;
  Hello everyone!
&lt;/h4&gt;

&lt;p&gt;In this article, we look into about machine learning in Artificial intelligence&lt;br&gt;
We are using Artificial intelligence in our daily life I will tell you that Machine learning how it work and how many types we are see all the step in this article  it's help you to grow and build your knowledge.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYs7TMyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4h5tlna4lrg47v595ry.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZYs7TMyp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4h5tlna4lrg47v595ry.jpeg" alt="Image description"&gt;&lt;/a&gt;&lt;br&gt;
Machine learning is a subset of AI,and it's provide the static ( Statistics )Method and there algorithm and enable to machine and computers learning ,the program to change in any case Machine Learning is utilized in various applications, ranging from automating.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-machine-learning-"&gt;
  &lt;/a&gt;
  What is Machine learning ?
&lt;/h2&gt;

&lt;p&gt;Machine Learning provides many different techniques and algorithms to make the computer learn Machine learning uses a massive amount of structured and semi-structured data so that a machine learning model can generate accurate result or give predictions based on that data. Also it's called (ML)Machine learning enables a computer system to make predictions or take some decisions using historical data without being explicitly programmed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-machine-learning"&gt;
  &lt;/a&gt;
  Types Of Machine Learning
&lt;/h2&gt;

&lt;p&gt;There are Three types of Machine learning&lt;br&gt;
1.Supervised Learning&lt;br&gt;
2.Unsupervised Learning&lt;br&gt;
3.Reinforcement Learning&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#supervised-learning"&gt;
  &lt;/a&gt;
  Supervised Learning
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GqF32Etf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1wl5s72jtytbv11fh17.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GqF32Etf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g1wl5s72jtytbv11fh17.png" alt="Image description"&gt;&lt;/a&gt;&lt;br&gt;
Supervised learning is typically done in the context of classification, when we want to map input to output labels, or regression.&lt;br&gt;
Supervised learning (SL) is the machine learning task of learning a function that maps an input to an output based on example input-output pairs. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unsupervised-learning"&gt;
  &lt;/a&gt;
  Unsupervised Learning
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tPz7hIL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgztqf42maobyautb43w.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tPz7hIL1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bgztqf42maobyautb43w.jpeg" alt="Image description"&gt;&lt;/a&gt;&lt;br&gt;
Unsupervised learning is a type of machine learning in which the algorithm is not provided with any pre-assigned labels or scores for the training data.&lt;br&gt;
Advantages of unsupervised learning include a minimal workload to prepare and audit the training set, in contrast to supervised learning techniques where a considerable amount. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reinforcement-learning"&gt;
  &lt;/a&gt;
  Reinforcement Learning
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I83n6Ucu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpkt6guutb09h03w7f9q.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I83n6Ucu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpkt6guutb09h03w7f9q.jpeg" alt="Image description"&gt;&lt;/a&gt;&lt;br&gt;
Reinforcement learning is a machine learning training method based.It enables an agent to learn through the consequences of actions in a specific environment.&lt;br&gt;
example, types of reinforcement might include praise, getting out of unwanted work, token rewards ,etc.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#its-the-some-of-the-basis-points-of-the-machine-learning-i-will-also-provide-the-machine-learning-and-there-platform-is-also-giving-in-my-last-article-you-can-check-there-and-learn-about-the-machine-learning"&gt;
  &lt;/a&gt;
  It's the some of the basis points of the machine learning I will also provide  the machine learning and there platform is also giving in my last article. You can check there and learn about the machine learning.
&lt;/h5&gt;

&lt;p&gt;.&lt;br&gt;
.&lt;br&gt;
.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#i-hope-you-found-this-article-useful-if-you-need-any-help-please-let-me-know-in-the-comment-section"&gt;
  &lt;/a&gt;
  I hope you found this article useful, if you need any help please let me know in the comment section.üíØ
&lt;/h4&gt;

</description>
      <category>machinelearning</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>webpack</category>
    </item>
    <item>
      <title>Javascript - Destructuring the Thing!</title>
      <author>Atif Aiman</author>
      <pubDate>Sat, 16 Oct 2021 18:02:53 +0000</pubDate>
      <link>https://dev.to/alserembani/javascript-destructuring-the-thing-8ap</link>
      <guid>https://dev.to/alserembani/javascript-destructuring-the-thing-8ap</guid>
      <description>&lt;p&gt;Salam, and well, hello everyone!&lt;/p&gt;

&lt;p&gt;Have you ever thought about the data structure of an array or object, with the most complex structure, and try to call a parameter that lives deep inside the dungeon of the object? Well, &lt;code&gt;students[4].subjects[2].information.lecturers[1]&lt;/code&gt; indeed seems horrifying, especially when you had to repeat the code throughout your codebases üíÄ&lt;/p&gt;

&lt;p&gt;There's a solution for that! But to understand how it works, we need to go for the conventional way first to see how it evolves into "destructuring". So, what is "destructure" in Javascript?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#destructuring"&gt;
  &lt;/a&gt;
  Destructuring
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i_voJ1OQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xszgefr6ooia06eaped7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i_voJ1OQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xszgefr6ooia06eaped7.png" alt="Destructuring"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, time for imagination. A box. Full of items. Later, you have to remember each of them just to play with them. Instead of remembering where it locates inside the box, you unpack the box and name it accordingly, so it will be easier to play with them later on. And it is not necessary to unpack everything, you can just unpack whatever you need.&lt;/p&gt;

&lt;p&gt;In Javascript, you can "unpack" whatever you need inside an object and arrays. Yes, both of them! But, how does it look like?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W0-py-1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vhiyj91wzyasvt92r31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W0-py-1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vhiyj91wzyasvt92r31.png" alt="Anatomy of destructuring"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are three parts of destructuring that you need to pay attention to. First is, of course, the original object or array. It's impossible to destructure something that doesn't exist.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#and-here-we-come"&gt;
  &lt;/a&gt;
  And here we come...
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Team Secret&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Europe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;members&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MATUMBAMAN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nisha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;zai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YapzOr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Puppey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;coach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Heen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;captain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Puppey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isFinalist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us consider the object above is the one we want to play with. Object with 6 entries, with each of them, has different value types. Cool. So, how do we want to call the region, as an example?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;region&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Europe&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As easy as TI, right? Huh, I mean, ABC! Cool. Now, how about calling Nisha?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// Nisha&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Still easy. So, just imagine you have to call the same exact thing at multiple places, so how will it be?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#and-we-come-from-a-long-way"&gt;
  &lt;/a&gt;
  ...and we come from a long way...
&lt;/h2&gt;

&lt;p&gt;From this point, instead, I want to call it the long way, I just want to call what is necessary. Not every entry in the &lt;code&gt;team&lt;/code&gt; object will be used. So, getting the members...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// zai&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, I need members, captain, and name of the team.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;teamName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;captain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, just imagine, if we deal with a big object, that means that the code above will be bigger as well if the need increases as well. But, just to give an idea, we rename the object values to the new variable declaration. Easier to read, but a bit redundant work here.&lt;/p&gt;

&lt;p&gt;I need you to put attention to two things here. We call the original index (or key), and then rename it by declaring a new variable, so we don't need to call the object anymore, since the new variable is declared using the object values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;teamName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;captain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;-------&lt;/span&gt;    &lt;span class="o"&gt;-------------&lt;/span&gt;
     &lt;span class="nx"&gt;rename&lt;/span&gt;       &lt;span class="nx"&gt;original&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#to-be-better-every-day"&gt;
  &lt;/a&gt;
  ...to be better every day
&lt;/h2&gt;

&lt;p&gt;Let's dive slowly to destructuring. The same idea that we discussed before, I will demonstrate how we use destructuring for better syntax.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;members&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;teamMembers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="o"&gt;---------&lt;/span&gt;  &lt;span class="o"&gt;--------------&lt;/span&gt;
 &lt;span class="nx"&gt;original&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;     &lt;span class="nx"&gt;rename&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;teamMembers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// MATUMBAMAN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, you don't need to use the standard declaration way and start using destructuring way. And, you can still access the object the normal way as well, since it doesn't change the original object. It just creates a new variable during destructuring.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;members&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;teamMembers&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;teamMembers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// MATUMBAMAN&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captain&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Puppey&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#without-renaming"&gt;
  &lt;/a&gt;
  Without renaming
&lt;/h3&gt;

&lt;p&gt;There is a time, you feel that renaming is unnecessary, and that happens! If that is the case, you can just omit the renaming, and just use the original index (or key).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;members&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="c1"&gt;// Puppey&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, destructuring can be as simple as that! Just use the original key name, and you are good to go. So, let's destructure everything!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;region&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;coach&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;captain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;isFinalist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And yes, as simple as that!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#destructure-one-and-retain-others"&gt;
  &lt;/a&gt;
  Destructure one and retain others
&lt;/h3&gt;

&lt;p&gt;For this case, let's assume this is the case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;otherInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;region&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;coach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coach&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;captain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;captain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isFinalist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isFinalist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What have you noticed here? Well, we can see we declare members, which can later be simplified with the destructuring method. But how about the next one, which is &lt;code&gt;otherInfo&lt;/code&gt;? It has everything the team has, except for members! So it has the rest of them after declaring members.&lt;/p&gt;

&lt;p&gt;For this case, we will learn to use a spread operator, where it will take everything else, and put it inside a new name for it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;otherInfo&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;otherInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coach&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Heen&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shorter, simpler, and easier to read, right? Since "the rest" didn't have any key it refers to, the way it writes is just &lt;code&gt;...rest&lt;/code&gt;. After spread operator (&lt;code&gt;...&lt;/code&gt;), put any name you want.&lt;/p&gt;

&lt;p&gt;You can also do a mix of everything!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;captain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;teamCaptain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;competeYear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;theRest&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#everything-has-its-beginning"&gt;
  &lt;/a&gt;
  Everything has its beginning
&lt;/h3&gt;

&lt;p&gt;There is a time, where the object key didn't exist, so you want to initialize it first. So, can we do that? Of course!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;director&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// This will return error, since director&lt;/span&gt;
&lt;span class="c1"&gt;// is not in `team` object&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;director&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Yao&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// This will not produce error, because&lt;/span&gt;
&lt;span class="c1"&gt;// the `director` will be initialized since&lt;/span&gt;
&lt;span class="c1"&gt;// director is not exist. Yet.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Can we also use this to the existing key? The answer is yes!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;coach&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Atif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// This will not produce error. However, you&lt;/span&gt;
&lt;span class="c1"&gt;// will get "Heen" later on, since coach is already&lt;/span&gt;
&lt;span class="c1"&gt;// has value in the object.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using this way, it will initialize it to "Atif", only when the coach isn‚Äôt existed or undefined.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#put-everything-in-one-place"&gt;
  &lt;/a&gt;
  Put everything in one place
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;captain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;teamCaptain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Aiman&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;competeYear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cyborgmatt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;theRest&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// YapzOr&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;teamCaptain&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Pupper&lt;/span&gt;
&lt;span class="c1"&gt;// Team captain already initialized in the original object&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;competeYear&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2021&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Cyborgmatt&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theRest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coach&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Heen&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, how about the object inside the object?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Team Secret&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Europe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;members&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MATUMBAMAN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nisha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;zai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YapzOr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Puppey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;coach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Heen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;captain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Puppey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isFinalist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;core&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MATUMBAMAN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;zai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;support&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Puppey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YapzOr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nisha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;core&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;support&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;team&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Just navigate through the nested object as usual. You can see the &lt;code&gt;position&lt;/code&gt; parameter I added, and later I destructure by using &lt;code&gt;position&lt;/code&gt; first and then destructure what is inside.&lt;/p&gt;

&lt;p&gt;That is how you rock the object destructuring! But, how about arrays?&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#destructuring-in-arrays"&gt;
  &lt;/a&gt;
  Destructuring in arrays
&lt;/h2&gt;

&lt;p&gt;Do you notice that I keep on saying index/keys? Yup, the object has flexible indexing or what we call keys, so it's easy to destructure an object without any need to see the arrangement. But the issue is different with arrays since the index is in sequence.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;teamMembers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MATUMBAMAN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nisha&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;zai&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;YapzOr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Puppey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will start from here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#destructure-in-sequence"&gt;
  &lt;/a&gt;
  Destructure in sequence
&lt;/h3&gt;

&lt;p&gt;Since the array's index is in sequence, we need to follow the arrangement when destructuring. With that, -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;core1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;core2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;support1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;support2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;teamMembers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;core1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// MATUMBAMAN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, you can see we destructure everything in the array. So, what if I only need the first 2? Well, just omit the rest!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;core1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;teamMembers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Nisha&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, how about the last 2? Because we need to put it in sequence, right? Well, you can leave it blank of course!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;support1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;support2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;teamMembers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;support2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Puppey&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next! How about using a spread operator for the rest? Chill, we got this covered!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;core1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;otherMembers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;teamMembers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;otherMembers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// ["zai", "YapzOr", "Puppey"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The spread operators will take the rest, and pass it as a new array. The spread operator first and then destructure the last 2? Stop right there! I am afraid that that is not possible unless you need to use &lt;code&gt;.split&lt;/code&gt; for that purpose.&lt;/p&gt;

&lt;p&gt;What? Do you say you want to use the object way? Well, sure you can, but rename is compulsory then.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;core1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;teamMembers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Nisha&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, that means, we can do things like destructure the middle and spread operator for the rest? Well well well, that works like jolly!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;core2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;otherMembers&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;teamMembers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;core2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// zai&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;otherMembers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// { 0: "MATUMBAMAN", 1: "Nisha", 3: "YapzOr", 4: "Puppey" }&lt;/span&gt;

&lt;span class="c1"&gt;// Note that `...otherMembers` will try to retain&lt;/span&gt;
&lt;span class="c1"&gt;// the index if destructure didn't happen at index 0,&lt;/span&gt;
&lt;span class="c1"&gt;// and will produce object instead.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That is everything about destructuring! From objects to arrays, we learn how to extract entries inside objects and arrays, so it will be easier for us to call later on. Note that destructuring will create a new variable in place without changing the original object or array. This is cooler when is used with functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;coach&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;director&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Luck&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Player is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Director is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;director&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;coach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Master&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;player&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Atif&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;director&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Life&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// Player is Atif&lt;/span&gt;
&lt;span class="c1"&gt;// Director is Life&lt;/span&gt;

&lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;coach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Master&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;player&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Aiman&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;// Player is Aiman&lt;/span&gt;
&lt;span class="c1"&gt;// Director is Luck&lt;/span&gt;

&lt;span class="c1"&gt;// Note that I put coach first instead of player. And it still works!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way, you don't have to put the parameter in sequence anymore. Neat right?! And even, you can do default value, if the parameter is not passed!&lt;/p&gt;

&lt;p&gt;So, thanks for the read, and until then, sayonara and peace be upon ya!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Functions in JavaScript</title>
      <author>Abhishek Rath</author>
      <pubDate>Sat, 16 Oct 2021 17:10:38 +0000</pubDate>
      <link>https://dev.to/abhishek_rath/functions-in-javascript-56if</link>
      <guid>https://dev.to/abhishek_rath/functions-in-javascript-56if</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One day a student was plotting some mischief in a class. The professor noticed this and as a way to punish him, he asked the student to write a program to calculate square of number. After a minute, the student came to professor to show his code, it was something like this &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fw_hCekU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpt2q8vt01kpto8es7xv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fw_hCekU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dpt2q8vt01kpto8es7xv.png" alt="Code"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The professor looked at the code, and asked him, "how will you solve this particular question, if ask you calculate square of 10 distinct number"?. The student replied, sir I'll write &lt;code&gt;console.log(x * x)&lt;/code&gt; 10 times.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To this the professor said it is one way to solve a problem, but now, if ask you to solve the same problem for 20 different numbers, what will you do? The student said, I'll print square of a number 20 times, but it is very boring and tedious task.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;"Exactly", said the professor. Repeating yourself in a code violates the DRY (Don't Repeat Yourself) principle and it also makes your code look ugly. Therefore, the professor said to his students, "Let us learn about a important topic called &lt;em&gt;"Functions"&lt;/em&gt;.&lt;br&gt;
Let us also learn with them...&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-function"&gt;
  &lt;/a&gt;
  What is a Function?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Function is a group of statements that are bundled together to perform a specific task.&lt;/li&gt;
&lt;li&gt;The syntax to create a function is - 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NbxPstF2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wh2pbiztq891udhmczh.png" alt="Syntax"&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#function-declaration"&gt;
  &lt;/a&gt;
  Function Declaration
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The function declaration also called as function definition consists of &lt;strong&gt;function&lt;/strong&gt; keyword followed by:

&lt;ul&gt;
&lt;li&gt;Name of the function.&lt;/li&gt;
&lt;li&gt;A list of parameters (optional) enclosed within the 
parentheses and separated by commas.&lt;/li&gt;
&lt;li&gt;Statements that define what the function does.&lt;/li&gt;
&lt;li&gt;An optional return statement.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HtgyMaru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2hw5zio12mkjjshnz2b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtgyMaru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2hw5zio12mkjjshnz2b.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In above code snippet, &lt;code&gt;square&lt;/code&gt; is the function name, followed by a parameter named &lt;code&gt;num&lt;/code&gt; enclosed in parentheses and the function body prints the square of the number.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#calling-a-function"&gt;
  &lt;/a&gt;
  Calling a function
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In above example we have defined a function, but it doesn't execute on its own. It only specifies what the function performs.&lt;/li&gt;
&lt;li&gt;To execute the statements specified in the body of function, you need to call it or invoke it.&lt;/li&gt;
&lt;li&gt;To invoke a function you need to write function name and pass the parameters enclosed within the parentheses, if any.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Example&lt;/strong&gt;: The above function can be invoked as: 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PG8ujlbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3psjnurjs86s5x7d0xd.png" alt="invoke a function"&gt;
&lt;/li&gt;
&lt;li&gt;This function call passes the value &lt;code&gt;5&lt;/code&gt; to the &lt;code&gt;num&lt;/code&gt; in the function declaration above.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#return-statement"&gt;
  &lt;/a&gt;
  Return Statement
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;A function may or may not return a value.&lt;/li&gt;
&lt;li&gt;If function has return statement, it returns the value to the caller function.&lt;/li&gt;
&lt;li&gt;A function can have only one return statement.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Example&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vZk4uuGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hwhm06iop0fr8nd6o7z.png" alt="Return Statement"&gt;
&lt;/li&gt;
&lt;li&gt;In above example, the &lt;code&gt;return&lt;/code&gt; statement returns the value of the calculated expression to the calling function.&lt;/li&gt;
&lt;li&gt;This returned value is stored in the variable &lt;code&gt;age&lt;/code&gt;, and the next statement prints the value of &lt;code&gt;age&lt;/code&gt; in the console.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-parameters"&gt;
  &lt;/a&gt;
  What are parameters?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We saw in above syntax that parameters are something that are enclosed within parentheses. But what exactly does it do ?&lt;/li&gt;
&lt;li&gt;The parameters act as a placeholder which accepts the value passed during calling the function.&lt;/li&gt;
&lt;li&gt;The parameters are optional, a function may or may not have them.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ArwwYb10--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1s922rle1wwvcxjqsynn.png" alt="Parameters example"&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-using-functions-"&gt;
  &lt;/a&gt;
  Benefits of using functions -
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;To improve readability of the code.&lt;/li&gt;
&lt;li&gt;To follow DRY (Don't repeat yourself) principle.&lt;/li&gt;
&lt;li&gt;Improves reusability of code, i.e. same function can be called to perform a specific task as many times it is required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#different-ways-to-use-functions-in-javascript"&gt;
  &lt;/a&gt;
  Different ways to use functions in JavaScript
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Declaring a function (most commonly used and discussed above).&lt;/li&gt;
&lt;li&gt;Function Expressions&lt;/li&gt;
&lt;li&gt;Arrow Functions&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#function-expressions"&gt;
  &lt;/a&gt;
  Function Expressions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Besides function declaration, the functions can also be created using function expressions.&lt;/li&gt;
&lt;li&gt;Such a function can be anonymous; it does not need to have a name. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Example&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZJ_ANL_Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4mka8c2zwyocs6d4u0b.png" alt="Function expression example"&gt;
&lt;/li&gt;
&lt;li&gt;The function in above example doesn't have name hence it is called anonymous function.&lt;/li&gt;
&lt;li&gt;However, the function expression can also have a name.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7L0g5psz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubqgiiufi8blchhdsvlp.png" alt="Named function expression"&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow Functions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Also called as one liner functions.&lt;/li&gt;
&lt;li&gt;Has a shorter syntax compared to function expressions.&lt;/li&gt;
&lt;li&gt;The arrow functions doesn't make use of function keyword to define a function. Instead, it uses a fat arrow =&amp;gt; to define what a function does.&lt;/li&gt;
&lt;li&gt;Arrow functions are anonymous.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Example&lt;/strong&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bfWhcHhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jaiauavbkxmctc3qftzc.png" alt="Arrow function"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The functions are very useful to write reusable code.&lt;/li&gt;
&lt;li&gt;A function can be written in one or more ways.&lt;/li&gt;
&lt;li&gt;Arrow functions must be avoided since they don't have a name, which causes problems while debugging.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;That will be all from my side. I hope, this article gave you a basic idea about the functions.&lt;/li&gt;
&lt;li&gt;Although basics of function are covered in this article, please look into &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions"&gt;MDN documentation&lt;/a&gt; for more details and examples.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Keep Learning!!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A Vim Guide for Expert Users</title>
      <author>Matthieu Cneude</author>
      <pubDate>Sat, 16 Oct 2021 16:07:46 +0000</pubDate>
      <link>https://dev.to/phantas0s/a-vim-guide-for-expert-users-137b</link>
      <guid>https://dev.to/phantas0s/a-vim-guide-for-expert-users-137b</guid>
      <description>&lt;p&gt;This article is the sixth of the series aimed to teach Vim from the ground up:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-beginner/"&gt;Vim for Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-intermediate/"&gt;Vim for Intermediate Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-advanced/"&gt;Vim for Advanced Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-adept/"&gt;Vim for Adept Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-veteran/"&gt;Vim for Veteran Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thevaluable.dev/vim-expert/"&gt;Vim for Expert Users&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You're now in your garden, sitting down in your favorite chair, contemplating a fabulous table full of the tastiest food. While delighted by your fantastic breakfast, a fresh breeze refresh your warm skin in this hot summer day. You hear the little birds singing in unison. The vivid smell of the young grass and the delicate and subtle aroma of your tea fill your nostrils. Everything is in perfect harmony; all your annoyances, problems, or negative thoughts are far away from this pure state of bliss.&lt;/p&gt;

&lt;p&gt;Suddenly, you hear a strong and imposing voice from the sky. The clouds move quickly. You're flabbergasted: almost falling from your chair, you recognize the logo of the Sacred Vim formed by the cloud!&lt;/p&gt;

&lt;p&gt;The voice, which was only a growl, begins to speak:&lt;/p&gt;

&lt;p&gt;"My sweet friend! The time has come. You are now ready to begin the final step of your enlightenment. You will receive the Word of Vim!"&lt;/p&gt;

&lt;p&gt;A bright and supernatural light break through the cloud and hit your table. You suddenly understand The Truth of Vim! Quickly, you take a bunch of napkins and begin to write (with some strawberry marmalade) all the knowledge which is given to you at this precise moment.&lt;/p&gt;

&lt;p&gt;This article is a transcript of what was called later the Napkins of Power‚Ñ¢. It helps customize Vim even further. More precisely, we'll see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Special arguments you can use for your mappings.&lt;/li&gt;
&lt;li&gt;How to create operator pending mappings.&lt;/li&gt;
&lt;li&gt;The command &lt;code&gt;:execute&lt;/code&gt; and its benefits when combined with the command &lt;code&gt;:normal&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;What are autocommands and autocommand groups.&lt;/li&gt;
&lt;li&gt;Why and how to create custom functions.&lt;/li&gt;
&lt;li&gt;What are user commands and how to use them.&lt;/li&gt;
&lt;li&gt;What special strings you can use in your commands.&lt;/li&gt;
&lt;li&gt;A complete example to illustrate most of the ideas described in this article.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We've covered many Vim functionalities since the beginning of this series of article, and this new one add even more on these foundations. But it can be daunting to try to add everything to your workflow at once; instead, it's better to add what can help you in your daily workflow. &lt;/p&gt;

&lt;p&gt;You can create a virtuous circle: pick a new and useful functionally, use it in your day-to-day workflow, and, when you feel comfortable with it, reiterate.&lt;/p&gt;

&lt;p&gt;Are your ready to receive The Expertise? The knowledge of this article is dangerous; use it with care, always to make the world a better place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#verbose-commands"&gt;
  &lt;/a&gt;
  Verbose Commands
&lt;/h2&gt;

&lt;p&gt;The more pieces of configuration and plugins you'll add to Vim, the more you'll wonder where they've been created in your config files. The command &lt;code&gt;:verbose&lt;/code&gt; can help you: it will output at what line of what file a precise configuration have been declared.&lt;/p&gt;

&lt;p&gt;More precisely, &lt;code&gt;:verbose&lt;/code&gt; can output the declarations of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Abbreviations&lt;/li&gt;
&lt;li&gt;Options&lt;/li&gt;
&lt;li&gt;Mapping&lt;/li&gt;
&lt;li&gt;User commands&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, I've set the option &lt;code&gt;undodir&lt;/code&gt; in my vimrc. If I run &lt;code&gt;:verbose set undodir?&lt;/code&gt;, I'll get the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Last set from ~/.config/nvim/init.vim line 354
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keeping your configuration well organized and simple is the best strategy. But everything gets messy overtime, especially when experimenting with new configuration or plugins. I don't use verbose often but, when I need it, I'm always happy to have it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help :verbose-cmd&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#mapping-special-arguments"&gt;
  &lt;/a&gt;
  Mapping Special Arguments
&lt;/h2&gt;

&lt;p&gt;We've seen the basics of mapping &lt;a href="https://dev.to/vim-intermediate/"&gt;in a previous article&lt;/a&gt;, but we didn't speak about the special arguments it can take. Most of them can be used for abbreviations, too.&lt;/p&gt;

&lt;p&gt;Here are the most useful ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;silent&amp;gt;&lt;/code&gt; - Doesn't output the mapping in the Vim command-line. If you want to also drop the output of the command linked to the mapping, add the command &lt;code&gt;:silent&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;buffer&amp;gt;&lt;/code&gt; - The mapping's scope is reduced to the current buffer only. These mappings have the priority on the global ones.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; - The mapping executes a Vimscript expression instead of a Vim command.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;unique&amp;gt;&lt;/code&gt; - The mapping fails if it already exists. It's useful if you don't want to override any mapping defined previously.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;Cmd&amp;gt;&lt;/code&gt; - The mapping can run a command without quitting the current mode you're in.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A special argument should be used as first argument for any mapping or abbreviation. The argument &lt;code&gt;&amp;lt;Cmd&amp;gt;&lt;/code&gt; is an exception: it should be used just before the command itself.&lt;/p&gt;

&lt;p&gt;To understand how it works, let's take some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;&amp;lt;f6&amp;gt; :source $MYVIMRC&amp;lt;CR&amp;gt;&lt;/code&gt; - The command &lt;code&gt;:source $MYVIMRC&lt;/code&gt; won't be displayed in the Vim command-line when hitting &lt;code&gt;LEADER F6&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:iab &amp;lt;expr&amp;gt; cdate strftime('%Y-%m-%d')&lt;/code&gt; - The Vimscript function &lt;code&gt;strftime&lt;/code&gt; is executed when the abbreviation &lt;code&gt;cdate&lt;/code&gt; is used.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:inoremap &amp;lt;c-d&amp;gt; &amp;lt;Cmd&amp;gt;delete&amp;lt;cr&amp;gt;&lt;/code&gt; - Execute the command &lt;code&gt;:delete&lt;/code&gt; without leaving INSERT mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:nnoremap &amp;lt;leader&amp;gt;&amp;lt;f6&amp;gt; :silent :source $MYVIMRC&amp;lt;CR&amp;gt;&lt;/code&gt; - The output of the command &lt;code&gt;:source $MYVIMRC&lt;/code&gt; will be dropped, thanks to the command &lt;code&gt;:silent&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll see a use case for the special argument &lt;code&gt;&amp;lt;buffer&amp;gt;&lt;/code&gt; below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help map-arguments&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#operator-pending-map"&gt;
  &lt;/a&gt;
  Operator Pending Map
&lt;/h2&gt;

&lt;p&gt;Operators are NORMAL mode keystrokes which need to be combined with motions or text-objects. For example, &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, or &lt;code&gt;y&lt;/code&gt; are operators. I've written about them in &lt;a href="https://dev.to/vim-beginner/"&gt;the very first article&lt;/a&gt; of this series.&lt;/p&gt;

&lt;p&gt;Vim lets you set a new motion for all existing operator with the command &lt;code&gt;:onoremap&lt;/code&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;onoremap &lt;span class="nb"&gt;ic&lt;/span&gt; &lt;span class="k"&gt;i&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've created here a new motion &lt;code&gt;ic&lt;/code&gt; to use an operator &lt;code&gt;i&lt;/code&gt;nside &lt;code&gt;c&lt;/code&gt;urly brackets. You can try it out to delete the content between two curly brackets for example, by:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Placing the cursor inside the curly brackets.&lt;/li&gt;
&lt;li&gt;Hitting &lt;code&gt;dic&lt;/code&gt; in NORMAL mode.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The motions created with &lt;code&gt;:onoremap&lt;/code&gt; always begins where your cursor is. That's why we need to place our cursor inside the curly brackets in our previous example. But it would be even better if we could act on the next curly brackets without worrying where the cursor is. The following command will make this dream a reality:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;onoremap nc &lt;span class="p"&gt;:&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;{&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's look at this example more closely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:normal&lt;/code&gt; - Execute keystrokes as if you were in NORMAL mode (see &lt;a href="https://dev.to/vim-advanced/"&gt;Vim for Advanced Users&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;f{&lt;/code&gt; - &lt;code&gt;f&lt;/code&gt;ind the next curly bracket on the line (see &lt;a href="https://dev.to/vim-beginner/"&gt;Vim for Beginners&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;vi{&lt;/code&gt; - Switch to VISUAL mode and select &lt;code&gt;i&lt;/code&gt;nside the curly brackets.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt; - Key notation for the &lt;code&gt;ENTER&lt;/code&gt; key (&lt;code&gt;c&lt;/code&gt;arriage &lt;code&gt;r&lt;/code&gt;eturn, see &lt;a href="https://dev.to/vim-intermediate/"&gt;Vim for Intermediate Users&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The operator will be applied on the selection made in VISUAL mode. To illustrate this idea, let's look at the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;My super‚îÉ&lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;with curly brackets&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The symbol &lt;code&gt;‚îÉ&lt;/code&gt; represents the cursor position. If you hit the keystroke &lt;code&gt;dnc&lt;/code&gt;, you'll &lt;code&gt;d&lt;/code&gt;elete what's inside the &lt;code&gt;n&lt;/code&gt;ext &lt;code&gt;c&lt;/code&gt;urly bracket. The result will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;My super &lt;span class="nb"&gt;line&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The cursor will end up on the last curly bracket.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help omap-info&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-command-execute"&gt;
  &lt;/a&gt;
  The Command Execute
&lt;/h2&gt;

&lt;p&gt;Let's look again at the mapping we've set above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;onoremap nc &lt;span class="p"&gt;:&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;f&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;vi&lt;/span&gt;&lt;span class="p"&gt;{&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key notation &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt; is considered a special character when you create a mapping. It works with mappings, but it won't work with the &lt;code&gt;:normal&lt;/code&gt; command by itself. &lt;/p&gt;

&lt;p&gt;For example, you can try to run the following to replace the next occurrence of "emacs" with "vim":&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;normal /emacs&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ciwvim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time, Vim doesn't recognize &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt; as a special character, so the command won't work. To go around this limitation, you can use &lt;code&gt;CTRL+V&lt;/code&gt; (see &lt;a href="https://dev.to/vim-adept/"&gt;Vim for Adept Users&lt;/a&gt;). In that precise case, we would need to hit &lt;code&gt;CTRL+V ENTER&lt;/code&gt; while writing our command. We would end up with something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;normal&lt;span class="p"&gt;!&lt;/span&gt; /emacs^Miwvim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command &lt;code&gt;:execute&lt;/code&gt; can solve our problem in a more elegant way. It lets you execute a command from a string. You can then use &lt;em&gt;string constants&lt;/em&gt; for these special characters, all prefixed with a &lt;code&gt;\&lt;/code&gt;. Here's an equivalent of our silly example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;"normal! /emacs\&amp;lt;cr&amp;gt;ciwvim"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the key notations you can use with &lt;code&gt;:map&lt;/code&gt; or &lt;code&gt;:abbreviate&lt;/code&gt; have their string constant equivalents.&lt;/p&gt;

&lt;p&gt;When you give multiple arguments to execute, they're concatenated into one string and separated with spaces. If you don't want the spaces, use a dot instead. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;'echo "this" "is" "a" "str"."ing"'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output will be: "this is a string".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help execute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help expr-quote&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#autocommands"&gt;
  &lt;/a&gt;
  Autocommands
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h3&gt;

&lt;p&gt;Autocommands can automatically run a command when a specific event happens. More precisely, it adds a command to a &lt;em&gt;list of command&lt;/em&gt; linked to a precise event. When this event is fired, every command of the list of commands are executed.&lt;/p&gt;

&lt;p&gt;An event can be opening Vim, reading any file, or writing a markdown file for example.&lt;/p&gt;

&lt;p&gt;Here are the basics to manipulate autocommands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:autocmd &amp;lt;event&amp;gt; &amp;lt;pattern&amp;gt; &amp;lt;cmd&amp;gt;&lt;/code&gt; or &lt;code&gt;:au &amp;lt;event&amp;gt; &amp;lt;pattern&amp;gt; &amp;lt;cmd&amp;gt;&lt;/code&gt; - Add the command &lt;code&gt;&amp;lt;cmd&amp;gt;&lt;/code&gt; to the list of commands executed automatically when the event &lt;code&gt;&amp;lt;event&amp;gt;&lt;/code&gt; is fired. The pattern &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; filter the files where the autocommand should be applied.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:autocmd &amp;lt;event&amp;gt;&lt;/code&gt; or &lt;code&gt;:au &amp;lt;event&amp;gt;&lt;/code&gt; - Output the list of commands executed when the event &lt;code&gt;&amp;lt;event&amp;gt;&lt;/code&gt; is fired.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:autocmd! &amp;lt;event&amp;gt;&lt;/code&gt; or &lt;code&gt;:au! &amp;lt;event&amp;gt;&lt;/code&gt; - Delete the list of autocommands of the event &lt;code&gt;&amp;lt;event&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To clarify all this jargon, here are some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:autocmd BufWrite * echom "Write..."&lt;/code&gt; - Output "Write" each time any file is saved. The wildcard &lt;code&gt;*&lt;/code&gt; means "every file".&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:autocmd BufNew *.md echom "Read..."&lt;/code&gt; - Output "Read" each time a new markdown buffer is created. Unsurprisingly, The pattern &lt;code&gt;*.md&lt;/code&gt; means every filename finishing with &lt;code&gt;.md&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After running these commands, you can try to write a file (command &lt;code&gt;:w&lt;/code&gt;) to see if it works. If you don't see the message in the command-line, run &lt;code&gt;:messages&lt;/code&gt; to display them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-events-and-patterns"&gt;
  &lt;/a&gt;
  Multiple Events and Patterns
&lt;/h3&gt;

&lt;p&gt;You can also create an autocommand with more than one event or pattern, separated with a comma. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;autocmd &lt;span class="nb"&gt;BufNew&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;BufWrite&lt;/span&gt; *&lt;span class="p"&gt;.&lt;/span&gt;md&lt;span class="p"&gt;,&lt;/span&gt;*&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;js&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;*&lt;span class="p"&gt;.&lt;/span&gt;php &lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="s2"&gt;"Create or write md, js, or php..."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command &lt;code&gt;echom "Create or write md, js or php..."&lt;/code&gt; will run when a markdown, JavaScript, or PHP buffer is created (&lt;code&gt;BufNew&lt;/code&gt;) or saved (&lt;code&gt;BufWrite&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Note that the pattern can be a bit different depending on the events you listen to. For a description of all events available, see &lt;code&gt;:help autocommand-events&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, if you want the scope of the autocmd to be limited to the current buffer, you can use the special pattern &lt;code&gt;&amp;lt;buffer&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#autocommand-groups"&gt;
  &lt;/a&gt;
  Autocommand Groups
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#why-using-autocommand-groups"&gt;
  &lt;/a&gt;
  Why Using Autocommand Groups?
&lt;/h3&gt;

&lt;p&gt;As the name indicates, an autocommand group is a group of one or more autocommands. When you create an autocommand as we did above, it's added automatically to a default autocommand group without a name. You can create autocommand groups with names and add autocommands to it, too. You can think of it as namespaces for autocommands.&lt;/p&gt;

&lt;p&gt;To understand this concept, let's see where it's useful to use autocommand groups. As we saw, each time you create an autocommand, it's added to the list of command triggered when a specific event occurs; &lt;em&gt;even if this command is already part of the list&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let's look at an example. First, let's add this autocommand to your vimrc:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;autocmd &lt;span class="nb"&gt;BufWritePre&lt;/span&gt; * &lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="s2"&gt;"Write..."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then try the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Source your virmc twice (by running &lt;code&gt;:source $MYVIMRC&lt;/code&gt; twice).&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;:autocmd BufWrite&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This last command will output the list of commands executed when the event &lt;code&gt;BufWrite&lt;/code&gt; is triggered. It will output something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="nb"&gt;BufWritePre&lt;/span&gt;
    *         &lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="s2"&gt;"Write..."&lt;/span&gt;
              &lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="s2"&gt;"Write..."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command &lt;code&gt;echom "Write..."&lt;/code&gt; appears two times in the command list for the pattern &lt;code&gt;*&lt;/code&gt;. As a result, each time the event occurs on any file, the command will run &lt;em&gt;two times&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;More often than not, we want to add our commands to the command list only once. Otherwise, it will impact performances each time the event is fired and, if the command is not &lt;a href="https://en.wikipedia.org/wiki/Idempotence"&gt;idempotent&lt;/a&gt;, nasty bugs will pop up.&lt;/p&gt;

&lt;p&gt;Using autocommand groups can solve this problem. Here are the basic commands you can use to manipulate these groups:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:augroup&lt;/code&gt; - Output all autocommand groups.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:augroup &amp;lt;name&amp;gt;&lt;/code&gt; or &lt;code&gt;aug &amp;lt;name&amp;gt;&lt;/code&gt; - Call a new autocommand group named &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;. All autocommands created after this command will be part of the group.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:augroup! &amp;lt;name&amp;gt;&lt;/code&gt; or &lt;code&gt;aug! &amp;lt;name&amp;gt;&lt;/code&gt; - Delete the group named &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:augroup END&lt;/code&gt; - End the autocommand group. If you define an autocommand after this one, it won't be part of the group.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;augroup &lt;span class="k"&gt;messages&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;autocmd &lt;span class="nb"&gt;BufWrite&lt;/span&gt; * &lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="s2"&gt;"Write..."&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;augroup END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The autocmd is now part of the autocommand group &lt;code&gt;messages&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By itself, it doesn't solve our problem. If you add the three lines above in your vimrc and source multiple times, the autocommand in the group &lt;code&gt;messages&lt;/code&gt; will be added to the autocommand list each time.&lt;/p&gt;

&lt;p&gt;We saw above that you can delete autocommands with the command &lt;code&gt;au! &amp;lt;event&amp;gt;&lt;/code&gt;. This will work if the autocommand is not in a named group. If you run &lt;code&gt;au! BufWrite&lt;/code&gt; for example, it will delete every autocommand in the nameless autocommand group (the default one), but not the one in the group &lt;code&gt;messages&lt;/code&gt; we've created above.&lt;/p&gt;

&lt;p&gt;To solve our problem, we could delete every autocommand belonging to the group &lt;code&gt;messages&lt;/code&gt; after creating the group itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;augroup &lt;span class="k"&gt;messages&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;au&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="k"&gt;messages&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;autocmd &lt;span class="nb"&gt;BufWrite&lt;/span&gt; * &lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="s2"&gt;"Write..."&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;augroup END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If these lines are in your vimrc and you source it three times, every autocommand will be deleted from the group &lt;code&gt;messages&lt;/code&gt; each time, before being added again. In short, our problem is solved: the command &lt;code&gt;echom "Write..."&lt;/code&gt;  will always appear once and only once in our list of command.&lt;/p&gt;

&lt;p&gt;When we use &lt;code&gt;au!&lt;/code&gt; between the initialization of the group (&lt;code&gt;augroup messages&lt;/code&gt;) and the end of the initialization (&lt;code&gt;augroup END&lt;/code&gt;), we don't have to indicate the name of the group. Vim will understand, in that case, that we want to delete every autocommand of the group declared just before. In short, the following commands are equivalent to the ones above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;augroup &lt;span class="k"&gt;messages&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;au&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;autocmd &lt;span class="nb"&gt;BufWrite&lt;/span&gt; * &lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="s2"&gt;"Write..."&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;augroup END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Redeclaring an autocommand group won't recreate it, but it will add autocommands in the existing group instead. For example, you can do something like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;augroup vimrc
&lt;span class="k"&gt;au&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
augroup END

augroup vimrc
    autocmd &lt;span class="nb"&gt;BufWrite&lt;/span&gt; * &lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="s2"&gt;"Write..."&lt;/span&gt;
augroup END
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Two things happen here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A group &lt;code&gt;vimrc&lt;/code&gt; is declared.&lt;/li&gt;
&lt;li&gt;Autocommands are declared and added to the group &lt;code&gt;vimrc&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In short, every autocommand added to the group &lt;code&gt;vimrc&lt;/code&gt; is merged with the command &lt;code&gt;:au!&lt;/code&gt;. You can even do better: when you create an autocommand, you can add it to an existing group directly. To do that, you can indicate the name of the group just between the command &lt;code&gt;autocmd&lt;/code&gt; and the event name as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;augroup vimrc
&lt;span class="k"&gt;au&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
augroup END

autocmd vimrc &lt;span class="nb"&gt;BufWrite&lt;/span&gt; * &lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="s2"&gt;"Write..."&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You're now able to reload your vimrc as much as you want, your autocommands will only appear once in the autocommand list. It applies for other sourced files too, like the ones you might have in your folder &lt;code&gt;ftplugin&lt;/code&gt; for example.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ignoring-events"&gt;
  &lt;/a&gt;
  Ignoring Events
&lt;/h3&gt;

&lt;p&gt;If you want to run a command without firing any event, you can use the command &lt;code&gt;:noautocmd&lt;/code&gt;. To take our previous example, if you want to ignore the event &lt;code&gt;BufWrite&lt;/code&gt; when running the command &lt;code&gt;:w&lt;/code&gt;, you can run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;:noautocmd w
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help autocmd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help autocommand-events&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help autocmd-events-abc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#custom-functions"&gt;
  &lt;/a&gt;
  Custom Functions
&lt;/h2&gt;

&lt;p&gt;Writing custom functions for Vim to make your craziest dreams come true should be the goal of any Vim Follower out there. &lt;/p&gt;

&lt;p&gt;It's true that many functions are already available on the infinite Internet. You can simply copy and paste them without worrying how they work. That said, knowing the basics of Vimscript functions can allow you to adapt them to your needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#checking-existing-functions"&gt;
  &lt;/a&gt;
  Checking Existing Functions
&lt;/h3&gt;

&lt;p&gt;Let's see first how you can display the functions already available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:function&lt;/code&gt; or &lt;code&gt;:fu&lt;/code&gt; - List all declared function.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:function /&amp;lt;pattern&amp;gt;&lt;/code&gt; or &lt;code&gt;:fu /&amp;lt;pattern&amp;gt;&lt;/code&gt; - Filter all declared functions with the pattern &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#creating-or-copying-functions"&gt;
  &lt;/a&gt;
  Creating Or Copying Functions
&lt;/h3&gt;

&lt;p&gt;Looking at a simple function will help us understand how they work. Here's one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; DeleteTrailingWS&lt;span class="p"&gt;()&lt;/span&gt; abort
    normal &lt;span class="k"&gt;mz&lt;/span&gt;
    %s&lt;span class="sr"&gt;/\v\s+$/&lt;/span&gt;/ge
    normal `z
endfunc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function delete trailing whitespaces in a whole buffer. Let's look at it in more details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;function&lt;/code&gt; - Keyword to declare a function. You can add a bang (&lt;code&gt;function!&lt;/code&gt;) to overwrite a previously declared function with the same name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DeleteTrailingWS&lt;/code&gt; - Name of the function. It should always begin with an uppercase letter.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;abort&lt;/code&gt; - Stop the function when an error occurs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Be careful if you use &lt;code&gt;function!&lt;/code&gt; (with a bang): you might overwrite a function from one of your plugin. It can open the door to random bugs difficult to fix.&lt;/p&gt;

&lt;p&gt;If you look at the body of our function, they are simply Vim commands. They are executed in order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;normal mz&lt;/code&gt; - Save the cursor position using the mark &lt;code&gt;z&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;%s/\v\s+$//ge&lt;/code&gt; - Delete every whitespace in the current buffer, using the substitute command.

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;%&lt;/code&gt; - Range for the whole buffer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\v&lt;/code&gt; - Use the &lt;code&gt;v&lt;/code&gt;ery magic mode.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;\s&lt;/code&gt; - Represent any whitespace.&lt;/li&gt;
&lt;li&gt;Flag &lt;code&gt;e&lt;/code&gt; - Doesn't output an error if the search pattern fail.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;normal&lt;/code&gt;&lt;code&gt;z&lt;/code&gt; - Go back to the mark &lt;code&gt;z&lt;/code&gt; (the cursor position when the function was invoked).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've already written about all these commands in &lt;a href="https://dev.to/vim-advanced/"&gt;Vim for Advanced Users&lt;/a&gt;. For more details about Vim regexes, see &lt;a href="https://dev.to/vim-adept/"&gt;Vim for Adept Users&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can then call the function using the command &lt;code&gt;:call&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;call&lt;/span&gt; DeleteTrailingWS&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also create a new mapping for some of your function if you want to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;ds&lt;/span&gt; &lt;span class="k"&gt;call&lt;/span&gt; DeleteTrailingWS&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#autoloading-functions"&gt;
  &lt;/a&gt;
  Autoloading Functions
&lt;/h3&gt;

&lt;p&gt;You can create function in your vimrc directly as we did above, but it might create some problems. Imagine that the name of the function conflict with a function from one of your plugin: the bugs occuring can be difficult to debug. &lt;/p&gt;

&lt;p&gt;Additionally, all the functions declared in your vimrc will be automatically loaded when you open Vim, even if you never use them. It would be more efficient to load them when you call them the first time.&lt;/p&gt;

&lt;p&gt;It's where the &lt;em&gt;autoload folder&lt;/em&gt; comes in handy. This folder is located in the Vim's runtime paths.&lt;/p&gt;

&lt;p&gt;When Vim needs to find something, it will look at the Vim's runtime paths. The folder containing your vimrc is one of these paths, for example. To display all of them, you can run the command &lt;code&gt;:set runtimepath?&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The folder autoload is one of these paths too. Any function created in this folder will have namespaces, and they will be loaded on demand. Exactly what we want!&lt;/p&gt;

&lt;p&gt;You can create the autoload folder where your vimrc is. Then, you can create Vimscript files in there; the name of the file will be the namespace for your functions.&lt;/p&gt;

&lt;p&gt;For example, you can create the file "general.vim" in the autoload folder. Then, you can write in the file the following function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; general#DeleteTrailingWS&lt;span class="p"&gt;()&lt;/span&gt; abort
    normal &lt;span class="k"&gt;mz&lt;/span&gt;
    %s&lt;span class="sr"&gt;/\v\s+$/&lt;/span&gt;/ge
    normal `z
endfunc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you call the function with &lt;code&gt;:call general#DeleteTrailingWS()&lt;/code&gt;, Vim will: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Look inside the autoload directory for a file called &lt;code&gt;general&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Search for a function called &lt;code&gt;DeleteTrailingWS&lt;/code&gt; inside this file.&lt;/li&gt;
&lt;li&gt;Load and execute the function.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Additionally, you can easily display every function for the namespace &lt;code&gt;&amp;lt;namespace&amp;gt;&lt;/code&gt; by running the command &lt;code&gt;:function /&amp;lt;namespace&amp;gt;&lt;/code&gt;. For example, if you want to display all the functions for the namespace &lt;code&gt;general&lt;/code&gt;, run &lt;code&gt;:function /general&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For more fine-grained namespaces, you can add sub-directories in the autoload directory. For example, you can create the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;autoload/my/super/namespace.vim
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you'll need to add the namespace "my#super#namespace" to the functions you create in the file &lt;code&gt;namespace.vim&lt;/code&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; my#super#namespace#DeleteTrailingWS&lt;span class="p"&gt;()&lt;/span&gt; abort
    normal &lt;span class="k"&gt;mz&lt;/span&gt;
    %s&lt;span class="sr"&gt;/\v\s+$/&lt;/span&gt;/ge
    normal `z
endfunc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help functions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help autoload-function&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help call&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help 'runtimepath'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#user-commands"&gt;
  &lt;/a&gt;
  User Commands
&lt;/h2&gt;

&lt;p&gt;Now that we're able to create our own functions, what about increasing our power with our own custom Vim commands? We'll then be able to run these user commands using the COMMAND-LINE mode, like any other command.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h3&gt;

&lt;p&gt;Like functions, custom user commands should always begin with an uppercase letter, to differentiate them from Vim's built-in commands.&lt;/p&gt;

&lt;p&gt;Continuing our ritual, here are three useful commands to manipulate user commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:command&lt;/code&gt; or &lt;code&gt;:com&lt;/code&gt; - Output all user commands.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:command &amp;lt;command&amp;gt;&lt;/code&gt; or &lt;code&gt;:com &amp;lt;command&amp;gt;&lt;/code&gt; - Output all user commands starting with &lt;code&gt;&amp;lt;command&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:command &amp;lt;attributes&amp;gt; &amp;lt;name&amp;gt; &amp;lt;cmd&amp;gt;&lt;/code&gt; or &lt;code&gt;:com &amp;lt;attributes&amp;gt; &amp;lt;name&amp;gt; &amp;lt;cmd&amp;gt;&lt;/code&gt; - Define a new user command with the name &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; running the command &lt;code&gt;&amp;lt;cmd&amp;gt;&lt;/code&gt;. The attributes &lt;code&gt;&amp;lt;attributes&amp;gt;&lt;/code&gt; indicate the number of arguments (among other things).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Similarly to custom functions, you can add a bang when you declare a command (&lt;code&gt;:command!&lt;/code&gt;). In that case, if a command already exists with the same name, it will be overwritten.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attributes-for-user-commands"&gt;
  &lt;/a&gt;
  Attributes for User Commands
&lt;/h3&gt;

&lt;p&gt;There are four different categories of attribute you can use when creating a user command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Argument handling&lt;/li&gt;
&lt;li&gt;Range handling&lt;/li&gt;
&lt;li&gt;Completion behavior&lt;/li&gt;
&lt;li&gt;Special cases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll only cover the most important one in this article: the argument handling. It allows us to specify the number of argument a user command can take, with the attribute &lt;code&gt;-nargs&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;-nargs=0&lt;/code&gt; - No argument allowed (default).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-nargs=1&lt;/code&gt; - One argument is required.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-nargs=*&lt;/code&gt; - Any number of arguments allowed.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-nargs=?&lt;/code&gt; - 0 or 1 argument allowed.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;-nargs=+&lt;/code&gt; - One argument or more are required.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To indicate where the arguments should be inserted in the command, you need to use the placeholder &lt;code&gt;&amp;lt;args&amp;gt;&lt;/code&gt;. For example, you can write the following in your vimrc:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; IScream&lt;span class="p"&gt;(&lt;/span&gt;content&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="nb"&gt;toupper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a:content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

command &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; Scream &lt;span class="k"&gt;call&lt;/span&gt; IScream&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;args&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, you can call the arguments of a function in its body using &lt;code&gt;a:&amp;lt;arg_name&amp;gt;&lt;/code&gt;. To try your new user command, source your vimrc with &lt;code&gt;:source $MYVIMRC&lt;/code&gt; and run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;Scream &lt;span class="s2"&gt;"hello"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When a user command call a function which can take multiple arguments, you need to separate them with whitespaces and use the placeholder &lt;code&gt;&amp;lt;f-args&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;args&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If there is only one argument allowed, Vim will consider the whitespace as part of the argument itself.&lt;/p&gt;

&lt;p&gt;Finally, if you need your user command to be only available in the current buffer, you can also add the attribute &lt;code&gt;-buffer&lt;/code&gt;. It's mandatory if you create user commands in your runtime folder &lt;code&gt;ftplugin&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help user-commands&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#special-strings-for-vim-commands"&gt;
  &lt;/a&gt;
  Special Strings for Vim Commands
&lt;/h2&gt;

&lt;p&gt;Let's now look at special strings you can use in COMMAND-LINE mode. These placeholders will be replaced under the hood with their representations. Here's a list of the most useful ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;%&lt;/code&gt; - Relative path of the current file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;cword&amp;gt;&lt;/code&gt; - Word under the cursor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;cWORD&amp;gt;&lt;/code&gt; - WORD under the cursor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;cfile&amp;gt;&lt;/code&gt; - Filepath under the cursor.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;afile&amp;gt;&lt;/code&gt; - File open in the buffer when executing autocommands.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;sfile&amp;gt;&lt;/code&gt; - Filename of sourced file when used with command &lt;code&gt;:source&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also use the following with &lt;code&gt;%&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:p&lt;/code&gt; - Output the absolute path instead of the relative one. Also expand the tilda &lt;code&gt;~&lt;/code&gt; to the home directory.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:.&lt;/code&gt; - Make the file path relative to the working directory.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:~&lt;/code&gt; - Make the file path relative to the home directory (if possible).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:h&lt;/code&gt; - Keep the &lt;code&gt;h&lt;/code&gt;ead of the file path (remove the last element).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:t&lt;/code&gt; - Keep the &lt;code&gt;t&lt;/code&gt;ail of the file path (remove everything except the last element).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:r&lt;/code&gt; - Keep the &lt;code&gt;r&lt;/code&gt;oot of the file name (remove its extension).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:e&lt;/code&gt; - Remove everything except the &lt;code&gt;e&lt;/code&gt;xtension of the filename.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:s?pat?sub?&lt;/code&gt; - Substitute the first occurrence of "pat" with "sub".&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:gs?pat?sub?&lt;/code&gt; - Substitute all occurrences of "pat" with "sub".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These special strings only work when a command expects a filename as argument; as a result, it makes this functionality quite limited. Fortunately, You can use the function &lt;code&gt;expand(&amp;lt;special_string&amp;gt;)&lt;/code&gt; to expand these placeholders in any command.&lt;/p&gt;

&lt;p&gt;For example, you can try to run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="nb"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="nb"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"%:p"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;echom&lt;/span&gt; &lt;span class="nb"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;cword&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a more useful example we already saw in the article &lt;a href="https://dev.to/vim-advanced/"&gt;Vim for Advanced Users&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;nnoremap gX &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;silent&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;execute&lt;/span&gt;
&lt;span class="se"&gt;            \&lt;/span&gt; &lt;span class="s2"&gt;"!xdg-open"&lt;/span&gt; &lt;span class="nb"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%:p:h'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;cfile&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;" &amp;amp;"&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now be able to understand this command:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;silent&amp;gt;&lt;/code&gt; - The mapping won't appear in the command line when used.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;execute&lt;/code&gt; - Execute a string as a Vim command.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;expand('%:p:h')&lt;/code&gt; - Output the head of the absolute path.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;expand("&amp;lt;cfile&amp;gt;")&lt;/code&gt; - Output the filepath under the cursor in the current buffer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, this mapping will open the relative filepath under the cursor using the CLI &lt;code&gt;xdg-open&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This command shouldn't take more than one line, but the backslash &lt;code&gt;\&lt;/code&gt; allows us to write it on two lines for a better readibility. Its fancy name is "line continuation symbol".&lt;/p&gt;

&lt;p&gt;If you're used to write shell scripts, remember that the line continuation symbol is not at the end of the line, but at the beginning of the next one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vim-help"&gt;
  &lt;/a&gt;
  Vim Help
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help cmdline-special&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:help line-continuation&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#a-complete-example"&gt;
  &lt;/a&gt;
  A Complete Example
&lt;/h2&gt;

&lt;p&gt;Let's summarize most of what we saw in this article with a final example. We want to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the user command &lt;code&gt;DevDocs&lt;/code&gt;. This command will automatically open the website &lt;a href="https://devdocs.io/"&gt;https://devdocs.io/&lt;/a&gt; and search the word under the cursor.&lt;/li&gt;
&lt;li&gt;Map the command to &lt;code&gt;&amp;lt;leader&amp;gt;D&lt;/code&gt; in NORMAL mode. This mapping will be available for python, ruby, JavaScript, go, html, and PHP filetypes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here's a possible solution:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;augroup vimrc
    autocmd&lt;span class="p"&gt;!&lt;/span&gt;
augroup END

command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;? DevDocs &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'xdg-open https://devdocs.io/#q=&amp;lt;args&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

autocmd vimrc &lt;span class="nb"&gt;FileType&lt;/span&gt; &lt;span class="k"&gt;python&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;ruby&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;javascript&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;html&lt;span class="p"&gt;,&lt;/span&gt;php nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;D &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s2"&gt;"DevDocs "&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;cword&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&amp;lt;&lt;/span&gt;CR&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;We first declare an autocommand group &lt;code&gt;vimrc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We declare the user command &lt;code&gt;DevDocs&lt;/code&gt;, accepting 0 or 1 argument.&lt;/li&gt;
&lt;li&gt;We declare an autocommand linked to the event &lt;code&gt;FileType&lt;/code&gt;. We indicate the filetypes which will trigger the autocommand.&lt;/li&gt;
&lt;li&gt;We use the special argument &lt;code&gt;&amp;lt;buffer&amp;gt;&lt;/code&gt; to make the mapping only available in the current buffer. Without that, the mapping would be available in every buffer regardless of the filetype.&lt;/li&gt;
&lt;li&gt;The autocommand use &lt;code&gt;expand('&amp;lt;cword&amp;gt;')&lt;/code&gt;, which is replaced by the word under the cursor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The event &lt;code&gt;FileType&lt;/code&gt; can be useful to assign precise mappings to a whole range of filetypes. We need, with this event, to give filetypes as autocommand patterns (like &lt;code&gt;python&lt;/code&gt; or &lt;code&gt;ruby&lt;/code&gt; for example). Remember that you can output the filetype of the current buffer with &lt;code&gt;:set filetype?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The binary &lt;code&gt;xdg-open&lt;/code&gt; is only available for Linux-based systems. If you want the autocommand to work on macOS too, you can use the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;command &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;? DevDocs &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'type open &amp;amp;&amp;gt;/dev/null &amp;amp;&amp;amp; open https://devdocs.io/#q=&amp;lt;args&amp;gt; || xdg-open https://devdocs.io/#q=&amp;lt;args&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The autocommand verifies if the binary &lt;code&gt;open&lt;/code&gt; exists (for macOS) and, if it doesn't, it uses &lt;code&gt;xdg-open&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#take-control-of-your-vim-destiny"&gt;
  &lt;/a&gt;
  Take Control of Your Vim Destiny
&lt;/h2&gt;

&lt;p&gt;Creating your own functions, commands, and mapping for tedious operations will help you focus on more important tasks. Additionally, you'll bring more efficient in your whole workflow. How great is that?&lt;/p&gt;

&lt;p&gt;Let's summarize what we saw in this article:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can use the command &lt;code&gt;:verbose&lt;/code&gt; to output where an abbreviation, option, mapping, or user command, is defined.&lt;/li&gt;
&lt;li&gt;Special arguments are available for your mappings to extend its power.&lt;/li&gt;
&lt;li&gt;Operator pending map allow you to define motions for operators.&lt;/li&gt;
&lt;li&gt;The command &lt;code&gt;:execute&lt;/code&gt; can execute a string as if it was a command.&lt;/li&gt;
&lt;li&gt;Autocommands can run a defined command when an event is triggered.&lt;/li&gt;
&lt;li&gt;You can use autocommand groups to organize your autocommand.&lt;/li&gt;
&lt;li&gt;Autocommand groups are mandatory if you don't want to add multiple times the same command in the autocommand list. It can happen when a Vimscript file is loaded multiple time (like your vimrc).&lt;/li&gt;
&lt;li&gt;Custom functions can execute numerous Vim commands one after the other.&lt;/li&gt;
&lt;li&gt;It's better to autoload custom functions to be able to use namespaces and for Vim to start quicker.&lt;/li&gt;
&lt;li&gt;User commands are commands you can personalize for your own needs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A last tip: if you want the list of Vimscript functions you can use, split in different category (like "Variables" or "Date and Time"), you can look at &lt;code&gt;:help function-list&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#learning-to-play-vim-a-fun-guide-to-learn-the-best-editor"&gt;
  &lt;/a&gt;
  Learning to Play Vim: A Fun Guide to Learn the Best Editor
&lt;/h2&gt;

&lt;p&gt;I began to write &lt;a href="https://themouseless.dev/vim"&gt;a very ambitious guide to learn Vim&lt;/a&gt; from the ground up. Thanks to great feedback from my readers, I'll be able to address the problems many beginners complain about when learning Vim. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to navigate in multiple files and projects in Vim?&lt;/li&gt;
&lt;li&gt;How to debug in Vim?&lt;/li&gt;
&lt;li&gt;How to search, find, and replace?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This guide will explain the most useful vanilla functionalities as well as some powerful plugins which will enrich your experience.&lt;/p&gt;

&lt;p&gt;Help me make an impact in the Vim world! You can subscribe to the newsletter and tell me everything you want to see in the book. Early bird discount guarantees!&lt;/p&gt;

&lt;p&gt;I reply to every email personally, so don't hesitate to ask as many questions as you want. It's always a pleasure to help.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://themouseless.dev/vim"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TX-zoMCr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://themouseless.dev/images/vim/book_cover_900.webp" alt="Learning to Play Vim"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last but not least: I've also written a book about building your own Mouseless Development Environment, so if you're interested by that too, &lt;a href="https://themouseless.dev"&gt;click on this shiny link&lt;/a&gt;.&lt;/p&gt;




</description>
      <category>vim</category>
      <category>terminal</category>
      <category>productivity</category>
    </item>
    <item>
      <title>3 Step Guide to Mine Crypto with your CPU in 2021</title>
      <author>Course Probe</author>
      <pubDate>Sat, 16 Oct 2021 16:03:45 +0000</pubDate>
      <link>https://dev.to/courseprobe/3-step-guide-to-mine-crypto-with-your-cpu-in-2021-2k1d</link>
      <guid>https://dev.to/courseprobe/3-step-guide-to-mine-crypto-with-your-cpu-in-2021-2k1d</guid>
      <description>&lt;p&gt;After reading this post you will be able to generate some extra income using your computer instead of having it on idle on that fancy desk of yours!&lt;/p&gt;

&lt;p&gt;Before you begin you need to know there are few precautions you have to take into account and I will talk about them in more detail at the end of the article, so I recommend you read that section before you start CPU mining.&lt;/p&gt;

&lt;p&gt;You might be asking yourself if this is worth trying and which coins could you efficiently mine with your CPU. Following the guidelines described in this post you will be able to mine with your CPU:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ethereum&lt;/li&gt;
&lt;li&gt;Cardano ADA&lt;/li&gt;
&lt;li&gt;Solana&lt;/li&gt;
&lt;li&gt;Ravencoin&lt;/li&gt;
&lt;li&gt;Ethereum Classic&lt;/li&gt;
&lt;li&gt;Shiba Inu&lt;/li&gt;
&lt;li&gt;Doge&lt;/li&gt;
&lt;li&gt;Binance BNB&lt;/li&gt;
&lt;li&gt;Polygon Matic and many more coins.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How is this possible ? I thought these coins were supposed to be mined with ASICs or GPUS. Keep reading below !!&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;STEP 1:&lt;/strong&gt; Get yourself a Wallet.&lt;/p&gt;

&lt;p&gt;I recommend you installing Metamask as a Chrome extension, you can get it at metamask.io&lt;/p&gt;

&lt;p&gt;Make sure you connect the Binance Smart Chain network to metamask (Google the instructions...) or get them from this link: &lt;a href="https://academy.binance.com/en/articles/connecting-metamask-to-binance-smart-chain"&gt;Binance Academy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You could also get Exodus or Atomic Wallet for you to get some other coin addresses without any hassle.&lt;/p&gt;

&lt;p&gt;Select the Binance Smart Chain in Metamask and copy your address. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP 2:&lt;/strong&gt; Download XMRIg from Github&lt;/p&gt;

&lt;p&gt;You could go to the xmrig site to download the latest version or from the oficial github repository: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/xmrig/xmrig/releases"&gt;https://github.com/xmrig/xmrig/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you download the latest version you would have to edit a file named "pool_mine_example.bat" Inside this file you need to modify 2 lines.&lt;/p&gt;

&lt;p&gt;It could look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd %~dp0
xmrig.exe -o rx.unmineable.com:3333 -u SHIB:0xe1b2456a2Ad227b93D7a7421f1E9Cc57908cC37c.wini3#e4xd-wmzl -p x
pause
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second line after the -o you can see the Pool URL, in this case all you have to do depending on your location is to use one of the following URLs (select the one closer to your location).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;USA:&lt;/strong&gt; rx-us.unmineable.com:3333&lt;br&gt;
&lt;strong&gt;Europe:&lt;/strong&gt; rx-eu.unmineable.com:3333&lt;br&gt;
&lt;strong&gt;Asia:&lt;/strong&gt; rx-asia.unmineable.com:3333&lt;/p&gt;

&lt;p&gt;Then, the third line is where you will enter your wallet's public address (copied in STEP 1), place it after the SHIB: and before the first dot "." .&lt;/p&gt;

&lt;p&gt;The general structure of the address needs to be:&lt;/p&gt;

&lt;p&gt;[COIN]:[Wallet address].[workerID]#[Code to lower mining fee]&lt;/p&gt;

&lt;p&gt;The workerID is any name you want to give to each computer where you are running the miner so it can easily be identified later on under the pool stats.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The code after the # is important&lt;/strong&gt; because mining with that code will drop the Mining Fee from 1% to 0.75% (it makes a difference). You can start mining using that code &lt;strong&gt;e4xd-wmzl&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Run the file as an administrator.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcb4pCSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca69fmuxwfmtc83gfqhh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hcb4pCSx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ca69fmuxwfmtc83gfqhh.jpg" alt="XMRig Mining"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything goes well, you are now running XMRig and are mining. Congrats !!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Log into Unmineable to check your stats&lt;/p&gt;

&lt;p&gt;Unmineable.com is a mining Pool which allows you to mine with your CPU using RandomX and pay you in any coin you select. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oeNp10_x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/op60aj3tql1phg4l63q5.jpg" alt="Unmineable Site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember when you set up the address inside the XMRig config file ? &lt;/p&gt;

&lt;p&gt;Well, there you just let Unmineable know the coin you want to be paid in, in this example SHIB and then the address where they will transfer the mined coins.&lt;/p&gt;

&lt;p&gt;In order to check your balance, log into &lt;a href="https://unmineable.com"&gt;Unmineable&lt;/a&gt; and then select the coin you want to mine. In this example, SHIB.&lt;/p&gt;

&lt;p&gt;Then you can select the Tab that reads RandomX and enter your address in the box that reads "Enter your address to check your stats:". &lt;/p&gt;

&lt;p&gt;After doing this you will see the balance on your account and you will even be able to request a payment.&lt;/p&gt;




&lt;p&gt;Congrats, you are a miner now! &lt;/p&gt;

&lt;p&gt;I recommend downloading some software to monitor the running temperature of your CPU, a good and free one is Hardware Monitor.&lt;/p&gt;

&lt;p&gt;Try not to exceed the temperature more than 90 degrees celsius. In case you are mining with a laptop, change the thermal paste of your CPU, get it cleaned inside, and get some heat extractors for laptops.&lt;/p&gt;

&lt;p&gt;If you take care of the temperature your computer should work very well, the amount of coins you can mine will depend on the hashrate of your CPU. &lt;/p&gt;




&lt;p&gt;If you are looking for more information, there's a good guide in a PDF ebook and is Free, get it at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdgD3-9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39cvnfjj6uzqatvoshn8.png" alt="Mining with CPU"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leanpub.com/how-to-start-mining-crypto-with-cpu"&gt;Download the PDF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: The content of this article is for educational purposes only, I won't be responsible for any malfunction on your hardware, try this under your own risk.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>crypto</category>
      <category>mining</category>
    </item>
    <item>
      <title>API Authentication via Social Networks in Laravel 8 using Sanctum with Socialite</title>
      <author>Siddhu</author>
      <pubDate>Sat, 16 Oct 2021 16:01:04 +0000</pubDate>
      <link>https://dev.to/siddhartha/api-authentication-via-social-networks-in-laravel-8-using-sanctum-with-socialite-36pa</link>
      <guid>https://dev.to/siddhartha/api-authentication-via-social-networks-in-laravel-8-using-sanctum-with-socialite-36pa</guid>
      <description>&lt;h1&gt;
  &lt;a href="#laravel-sanctum-with-socialite"&gt;
  &lt;/a&gt;
  Laravel Sanctum with Socialite
&lt;/h1&gt;

&lt;p&gt;Earlier I have written, &lt;a href="https://dev.to/siddhartha/laravel-sanctum-d3m"&gt;How to use Laravel Sanctum and user authentication using API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, I'm going to add social logins using via API. &lt;/p&gt;

&lt;p&gt;In this example, I'll show you how to integrate Laravel Sanctum authentication with social networks via Facebook, Google and GitHub. &lt;/p&gt;

&lt;p&gt;Make sure, you have already installed Laravel Sanctum if not follow this &lt;a href="https://dev.to/siddhartha/laravel-sanctum-d3m"&gt;article&lt;/a&gt; and then come here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laravel-socialite-configuration"&gt;
  &lt;/a&gt;
  Laravel Socialite Configuration
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;STEP1:&lt;/strong&gt; Install socialite package&lt;/p&gt;

&lt;p&gt;&lt;code&gt;composer require laravel/socialite&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP2:&lt;/strong&gt; Config socialite&lt;/p&gt;

&lt;p&gt;You need to add all social config details to &lt;code&gt;config\services.php&lt;/code&gt; file. As I shown below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'github' =&amp;gt; [
    'client_id' =&amp;gt; env('GITHUB_CLIENT_ID'),
    'client_secret' =&amp;gt; env('GITHUB_CLIENT_SECRET'),
    'redirect' =&amp;gt; 'GITHUB_REDIRECT_URI',
],
'facebook' =&amp;gt; [
    'client_id' =&amp;gt; env('FACEBOOK_CLIENT_ID'),
    'client_secret' =&amp;gt; env('FACEBOOK_CLIENT_SECRET'),
    'redirect' =&amp;gt; 'FACEBOOK_REDIRECT_URI',
],
'google' =&amp;gt; [
    'client_id' =&amp;gt; env('GOOGLE_CLIENT_ID'),
    'client_secret' =&amp;gt; env('GOOGLE_CLIENT_SECRET'),
    'redirect' =&amp;gt; 'GOOGLE_REDIRECT_URI',
],
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;STEP3:&lt;/strong&gt; Get config details from OAuth services providers&lt;/p&gt;

&lt;p&gt;Now, You need to get CLIENT_ID and CLIENT_SECRET from respective social developer accounts, Here I provided the following links&lt;/p&gt;

&lt;p&gt;GitHub &lt;a href="https://github.com/settings/developers"&gt;https://github.com/settings/developers&lt;/a&gt;&lt;br&gt;
Google &lt;a href="https://console.developers.google.com/apis/dashboard"&gt;https://console.developers.google.com/apis/dashboard&lt;/a&gt;&lt;br&gt;
Facebook &lt;a href="https://developers.facebook.com/apps/"&gt;https://developers.facebook.com/apps/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is easy to setup developer account in all social networks, where you can get the CLIENT_ID and CLIENT_SECRET keys. Finally, you need to set call-back URL. After successfully authentication it will send token to that URL. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP4:&lt;/strong&gt; Set config details on your application&lt;/p&gt;

&lt;p&gt;You have all CLIENT_ID and CLIENT_SECRET keys, Now add those keys into &lt;code&gt;.env&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;GITHUB_CLIENT_ID=XXXXXXXXX
GITHUB_CLIENT_SECRET=XXXXXXX
GITHUB_REDIRECT_URI=http://127.0.0.1:8000/api/login/github/callback
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mJCIMCQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3y2hra1255jt91vuo47.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mJCIMCQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3y2hra1255jt91vuo47.png" alt="Your GitHub account setting"&gt;&lt;/a&gt;&lt;br&gt;
                   &lt;em&gt;Your GitHub account setting&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Similarly add all other OAuth service providers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;STEP5:&lt;/strong&gt; Make password nullable&lt;/p&gt;

&lt;p&gt;When you authenticate user with OAuth services, you will receive token not password. So, in our database the password field must be nullable.&lt;/p&gt;

&lt;p&gt;Modify password field as nullable in users_table migration file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'users'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;id&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'email_verified_at'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;rememberToken&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;STEP6:&lt;/strong&gt; Create providers table&lt;/p&gt;

&lt;p&gt;Now, you have to create another table for providers&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php artisan make:migration create_providers_table&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the providers migration file, add this fields&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Schema&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'providers'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Blueprint&lt;/span&gt; &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;bigIncrements&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'provider'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'provider_id'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;bigInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user_id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;unsigned&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'avatar'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;nullable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;timestamps&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="nv"&gt;$table&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;foreign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'user_id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;references&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'users'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;onDelete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'cascade'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;STEP7:&lt;/strong&gt; Create Provider table&lt;/p&gt;

&lt;p&gt;Make Provider model&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php artisan make:model Provider&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;open Provider model&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Factories\HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$fillable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'provider'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'provider_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'user_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'avatar'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$hidden&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'created_at'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'updated_at'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;STEP8:&lt;/strong&gt; Add provider relation to user table&lt;/p&gt;

&lt;p&gt;Here I have created Providers function on user model&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Models&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Contracts\Auth\MustVerifyEmail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Database\Eloquent\Factories\HasFactory&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Foundation\Auth\User&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nc"&gt;Authenticatable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Notifications\Notifiable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Laravel\Sanctum\HasApiTokens&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Authenticatable&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;HasApiTokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;HasFactory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Notifiable&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * The attributes that are mass assignable.
     *
     * @var string[]
     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$fillable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'email'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * The attributes that should be hidden for serialization.
     *
     * @var array
     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$hidden&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;'remember_token'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * The attributes that should be cast.
     *
     * @var array
     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nv"&gt;$casts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'email_verified_at'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'datetime'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;];&lt;/span&gt;


    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;hasMany&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'user_id'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;STEP9:&lt;/strong&gt; Add the Routes&lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;routes/api.php&lt;/code&gt; file add route URL's&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/login/{provider}'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;AuthController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'redirectToProvider'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nc"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/login/{provider}/callback'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;AuthController&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'handleProviderCallback'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add above functions on your controller&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Http\Controllers&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Request&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\Response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Support\Facades\Hash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;GuzzleHttp\Exception\ClientException&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Illuminate\Http\JsonResponse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Laravel\Socialite\Facades\Socialite&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Models\User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Authcontroller&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Controller&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;


    &lt;span class="cd"&gt;/**
     * Redirect the user to the Provider authentication page.
     *
     * @param $provider
     * @return JsonResponse
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;redirectToProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$provider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$validated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;validateProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_null&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$validated&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$validated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Socialite&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$provider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;stateless&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * Obtain the user information from Provider.
     *
     * @param $provider
     * @return JsonResponse
     */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;handleProviderCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$provider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$validated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;validateProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$provider&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;is_null&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$validated&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$validated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Socialite&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;driver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$provider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;stateless&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;user&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ClientException&lt;/span&gt; &lt;span class="nv"&gt;$exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'error'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Invalid credentials provided.'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;422&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nv"&gt;$userCreated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;firstOrCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'email'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getEmail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'email_verified_at'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="s1"&gt;'name'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                &lt;span class="s1"&gt;'status'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$userCreated&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;updateOrCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'provider'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s1"&gt;'provider_id'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getId&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s1"&gt;'avatar'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getAvatar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nv"&gt;$token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$userCreated&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'token-name'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;plainTextToken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$userCreated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Access-Token'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$token&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cd"&gt;/**
     * @param $provider
     * @return JsonResponse
     */&lt;/span&gt;
    &lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;validateProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$provider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$provider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'facebook'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'github'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'google'&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;json&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'error'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'Please login using facebook, github or google'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;422&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;STEP10:&lt;/strong&gt; Final step, Call the OAuth services URL&lt;/p&gt;

&lt;p&gt;In my case I setup everything in my local, open&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://127.0.0.1:8000/api/login/github&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fp2ucto9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7agmw8l730bupjbisd3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fp2ucto9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7agmw8l730bupjbisd3.png" alt="github login"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After successfully login you will receive &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7BT57UPX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oaxdex6ie835we94oe2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7BT57UPX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oaxdex6ie835we94oe2n.png" alt="github response"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please feel free to ask me anything on this topic!&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>socialogins</category>
      <category>socialite</category>
      <category>sanctum</category>
    </item>
    <item>
      <title>Firebase Authentication with GetX in Flutter</title>
      <author>Imran Sefat</author>
      <pubDate>Sat, 16 Oct 2021 15:53:21 +0000</pubDate>
      <link>https://dev.to/imransefat/firebase-authentication-with-getx-in-flutter-4ik8</link>
      <guid>https://dev.to/imransefat/firebase-authentication-with-getx-in-flutter-4ik8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction üéâ
&lt;/h1&gt;

&lt;p&gt;You know about GetX. It is an extra-light and robust solution for Flutter. It combines high-performance state management, intelligent dependency injection, and route management quickly and practically.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zGDLbi50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/498/1%2Attg9ZoWbDPCV74ESDvmOHw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zGDLbi50--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/498/1%2Attg9ZoWbDPCV74ESDvmOHw.gif" alt="I won"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôm going to be honest; I‚Äôm not that pro at using GetX. So one day, I wanted to use GetX to make a flutter app with firebase authentication to understand better, but I was confused. Then it took me some time to figure out how it was working, and eventually, I succeeded and fell in love with the world of GetX.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c8UVf91d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/500/1%2AUD8yxXPlM3xhZaumoBtz7A.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c8UVf91d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/500/1%2AUD8yxXPlM3xhZaumoBtz7A.gif" alt="I won"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let‚Äôs Get Started üéØ
&lt;/h1&gt;

&lt;p&gt;I will assume that you have a starter template setup to enter email, password, or a button to login with Gmail. Let‚Äôs list the steps necessary to make the authentication process.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps üë£
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#1-configuring-the-flutter-project"&gt;
  &lt;/a&gt;
  1. Configuring the Flutter Project
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#2-connect-app-to-firebase"&gt;
  &lt;/a&gt;
  2. Connect App to Firebase
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#3-creating-the-auth-controller"&gt;
  &lt;/a&gt;
  3. Creating the Auth Controller
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#4-inject-the-auth-controller"&gt;
  &lt;/a&gt;
  4. Inject the auth controller
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#5-login-or-signing-up-users"&gt;
  &lt;/a&gt;
  5. Login or Signing up Users
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#6-success"&gt;
  &lt;/a&gt;
  6. Success
&lt;/h3&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HTBSSEyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/320/1%2ADk3weLuWt6CezEwKZriHdg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HTBSSEyX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/320/1%2ADk3weLuWt6CezEwKZriHdg.gif" alt="I won"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-configuring-the-flutter-project"&gt;
  &lt;/a&gt;
  1. Configuring the Flutter project ‚öôÔ∏è
&lt;/h1&gt;

&lt;p&gt;Let‚Äôs add the necessary packages that we‚Äôre going to use throughout the application.&lt;/p&gt;

&lt;p&gt;Copy the dependencies to your Pubspec.yaml file. I am using the latest version available now at this moment.latest version available now at this moment.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;h1&gt;
  &lt;a href="#2-connect-app-to-firebase"&gt;
  &lt;/a&gt;
  2. Connect App to Firebase ü§ù
&lt;/h1&gt;

&lt;p&gt;Now we have to connect our app to firebase. First, go to the firebase console and create your project if you haven‚Äôt already. You will see an option to add an app to firebase. Depending on your preference and requirement, do that. The steps are pretty straightforward, and firebase will show you what to do and how.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vg2IT4uH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AOL30IVcxpNRQtNU0f8CX0A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vg2IT4uH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AOL30IVcxpNRQtNU0f8CX0A.png" alt="Firebase Console"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Don‚Äôt forget to enable the Email/Password Sign in and Google Sign In methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--620NWDS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AHpZoBQBpBGWkxmkogfYHQA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--620NWDS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AHpZoBQBpBGWkxmkogfYHQA.png" alt="Sign In Method"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-creating-the-auth-controller"&gt;
  &lt;/a&gt;
  3. Creating the Auth Controller üéÆ
&lt;/h1&gt;

&lt;p&gt;First, let‚Äôs make a constant file for the sake of simplicity and not to get confused or code duplications. Copy the below codes and paste them into your dart file inside the lib folder.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Suggestion: Make a folder inside of the lib folder titled Constants.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;

&lt;p&gt;Now let‚Äôs create the Auth Controller where all of our business login related to Firebase Authentication will work. Just copy the below codes and paste them into your dart file inside of your lib folder.&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Suggestion: Make a folder for titled Controller.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;h1&gt;
  &lt;a href="#4-inject-the-auth-controller"&gt;
  &lt;/a&gt;
  4. Inject the Auth Controller üíâ
&lt;/h1&gt;

&lt;p&gt;We have created the Auth Controller, but how are we going to use it? Let‚Äôs hop into the main.dart file and make some changes to our code.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;Here, we are initializing the firebase and injecting the AuthController instance in the 4th line.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kuW8ZeFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/500/1%2AGiGyQlLWQTmmYb2EiQriwA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kuW8ZeFs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/500/1%2AGiGyQlLWQTmmYb2EiQriwA.gif" alt="Sign In Method"&gt;&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our dependencies are completed and initialized. Now let‚Äôs sign up some users.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#5-login-or-signing-up-users"&gt;
  &lt;/a&gt;
  5. Login or Signing up Users üôã‚Äç‚ôÇÔ∏èüôã‚Äç‚ôÄÔ∏è
&lt;/h1&gt;

&lt;p&gt;I assume you have a basic or super beautiful Signup or login screen ready. If not, you can copy my code for the screen, but note that it‚Äôs a super simple screen.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
&lt;br&gt;

&lt;p&gt;The above code is pretty self-explanatory. There are just two (2) text fields for email and password, one button to login and one to Register / Signup. The last elevated button is for the google authentication popup.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-success"&gt;
  &lt;/a&gt;
  6. Success üéâ
&lt;/h1&gt;

&lt;p&gt;You just implemented Firebase Authentication in Flutter with GetX.&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#note-for-the-reader"&gt;
  &lt;/a&gt;
  Note for the reader üìí
&lt;/h1&gt;

&lt;p&gt;This is my first time writing a medium story but you know you can press the clapüëè button 50 times? The higher you go, the more it motivates me to write more stuff for you!&lt;/p&gt;

&lt;p&gt;I have a Youtube Channel Named &lt;a href="https://www.youtube.com/c/CodingwithImran"&gt;‚ÄúCoding with Imran‚Äù&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do subscribe to my channel if you want to get future updates!&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>firebase</category>
      <category>authentication</category>
    </item>
    <item>
      <title>Survey: Web browsers</title>
      <author>coolprofessor</author>
      <pubDate>Sat, 16 Oct 2021 15:44:48 +0000</pubDate>
      <link>https://dev.to/coolprofessor/survey-web-browsers-55af</link>
      <guid>https://dev.to/coolprofessor/survey-web-browsers-55af</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-features-like-document-editing-or-customizing-would-be-awesome-to-have-on-a-web-browser"&gt;
  &lt;/a&gt;
  What features like document editing or customizing would be awesome to have on a web browser?
&lt;/h2&gt;

</description>
      <category>webdev</category>
      <category>ui</category>
      <category>html</category>
      <category>discuss</category>
    </item>
    <item>
      <title>The Only Advice You Need To Become a Developer</title>
      <author>Sonam Shukla</author>
      <pubDate>Sat, 16 Oct 2021 15:24:16 +0000</pubDate>
      <link>https://dev.to/sonam_shukla_707cc1e27f23/the-only-advice-you-need-to-become-a-developer-4ef8</link>
      <guid>https://dev.to/sonam_shukla_707cc1e27f23/the-only-advice-you-need-to-become-a-developer-4ef8</guid>
      <description>&lt;p&gt;Lots of wrong advice is being handed out here by people who have never actually been developers or failed to become one or people who are just bad developers.&lt;/p&gt;

&lt;p&gt;The technologies do not define a developer/programmer.&lt;/p&gt;

&lt;p&gt;A programmer is a problem solver. A programmer is not a person limited by his tools, it is a person who is willing to put in the work and learn the tools needed to do the job.&lt;br&gt;
Good programmers ask questions, best programmers ask things to be explained to them like they are idiots.&lt;br&gt;
Why you may ask? It is very simple.&lt;br&gt;
Distilled information coming from people with expertise is better consumed.&lt;br&gt;
I see people being afraid to ask questions and what is worse is then there are people who answer these questions in a very condescending way and if you are that type of person, fuck you. No, seriously.&lt;/p&gt;

&lt;p&gt;For the people who constantly ask "wHaT iS tHe BeSt CoUrSe To LeArN XYZ"&lt;a href="https://www.bitchute.com/video/xlWAYU8X2Wn3/"&gt;,&lt;/a&gt; you guys are making your life VERY DIFFICULT.&lt;/p&gt;

&lt;p&gt;"So what do I do?" - you might be asking yourself, and the answer to that is VERY SIMPLE.&lt;/p&gt;

&lt;p&gt;GO READ OFFICIAL DOCUMENTATION&lt;/p&gt;

&lt;p&gt;This will not only teach you how to navigate technical documentation, but it will teach you self-reliance and it will give you the confidence to tackle unknowns.&lt;br&gt;
Can't make sense of the docs? Read again. Can't make sense of the docs again? Go watch porn, watch Netflix&lt;a href="https://www.bitchute.com/channel/gMP0mLesJsHo/"&gt;,&lt;/a&gt; chill out a bit, and then come back. Still cannot understand? Read again, write down with actual words what you think you understand and what you need help with and go to forums and ask for help. But, the thing you should be doing is not asking for the best course to watch or some other resource where you expect knowledge to be spoon-fed to you.&lt;/p&gt;

&lt;p&gt;Here is a short story.&lt;/p&gt;

&lt;p&gt;I had the pleasure to work with a Junior Developer a few years ago. He was around 60.&lt;br&gt;
Turns out he was a programmer in the early 70/80's. How did he become one you ask?&lt;br&gt;
All the dude had was one book and a crap computer without internet.&lt;br&gt;
He told me that he read the book like 20 times before it clicked, took him like 3-4 months.&lt;br&gt;
There was no internet back then, nobody to ask.&lt;br&gt;
He said, once it clicked&lt;a href="https://ed.ted.com/on/qSDt2aUv"&gt;,&lt;/a&gt; everything fell into place and he started building games, later on, he joined a software company, and afterward he made his own company which he ran for like 30 years, and sold it.&lt;br&gt;
You may ask why did he want to continue development and I asked him that as well.&lt;br&gt;
The guy was loaded with money, I could tell so it wasn't for the money.&lt;br&gt;
He said solving problems is what he wants to do and for him, it's a quest for knowledge.&lt;/p&gt;

&lt;p&gt;What is the moral of the story?&lt;br&gt;
The moral of the story is that the initiative starts with you and you shouldn't rely on anything else.&lt;br&gt;
If you do not commit to understanding what you are trying to do, you will be forever stuck in watching videos and asking for help and what tech stack is best.&lt;/p&gt;

&lt;p&gt;This is it&lt;a href="https://www.bitchute.com/video/zzA3brlseq6b/"&gt;,&lt;/a&gt; the is the only thing you need.&lt;br&gt;
You need to trust yourself and give yourself the time to understand a given technology.&lt;br&gt;
You need to work hard until it clicks, once this happens, everything afterward is like a waterfall.&lt;br&gt;
Rinse and repeat.&lt;/p&gt;

&lt;p&gt;Every time we build software at work (and we build software for a lot of money), we fail our way to production. We break pipelines, introduce bugs all the time. It happens and no process in this world will prevent that. Nothing is perfect and it will never be. But we iterate and we make it better. And after each iteration, broken pipelines and bugs diminish.&lt;/p&gt;

&lt;p&gt;The same stupid principle applies here.&lt;/p&gt;

&lt;p&gt;You know you want to learn something. Take small steps and iterate. Trust yourself.&lt;/p&gt;

&lt;p&gt;This is the only advice I give to every Junior developer or people who want to become developers and I hope this opens the eyes for some of you. It is that simple.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>python</category>
      <category>php</category>
    </item>
    <item>
      <title>The difference between Git &amp; GitHub</title>
      <author>Svetlin Pavlov</author>
      <pubDate>Sat, 16 Oct 2021 15:14:59 +0000</pubDate>
      <link>https://dev.to/svetlinpavlov/the-difference-between-git-github-11nd</link>
      <guid>https://dev.to/svetlinpavlov/the-difference-between-git-github-11nd</guid>
      <description>&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=vmUpMOtWtxQ"&gt;https://www.youtube.com/watch?v=vmUpMOtWtxQ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Deploy React and AWS¬†Amplify</title>
      <author>aseem wangoo</author>
      <pubDate>Sat, 16 Oct 2021 15:09:32 +0000</pubDate>
      <link>https://dev.to/aseemwangoo/deploy-react-and-aws-amplify-dpo</link>
      <guid>https://dev.to/aseemwangoo/deploy-react-and-aws-amplify-dpo</guid>
      <description>&lt;p&gt;&lt;em&gt;In case it helped :)&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/aseemwangoo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kziPr3-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="Pass Me A Coffee!!"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;We will cover briefly:&lt;/p&gt;





&lt;ol&gt;
&lt;li&gt;Configure React App with AWS Amplify Console¬†&lt;/li&gt;
&lt;li&gt;Configure React App with yml file&lt;/li&gt;
&lt;li&gt;Manage multiple environments&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lwCFDhe9szs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;View the demo here&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Website: &lt;/em&gt;&lt;/strong&gt;&lt;a href="https://master.d19tgz4vpyd5.amplifyapp.com/" rel="noreferrer noopener"&gt;&lt;strong&gt;&lt;em&gt;https://master.d19tgz4vpyd5.amplifyapp.com/&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Configure React App with AWS Amplify¬†Console&lt;/h3&gt;

&lt;p&gt;According to the &lt;a href="https://docs.aws.amazon.com/amplify/latest/userguide/getting-started.html" rel="noreferrer noopener"&gt;docs&lt;/a&gt;, AWS Amplify is the &lt;strong&gt;&lt;em&gt;‚Äú&lt;/em&gt;&lt;/strong&gt;&lt;em&gt;fastest and easiest way to build mobile and web apps that scale.‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QmENOxZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2ASRxqYBm7xD0PELku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QmENOxZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/0%2ASRxqYBm7xD0PELku.png" alt="AWS Amplify Intro"&gt;&lt;/a&gt;AWS Amplify Intro&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Get started &lt;a href="https://console.aws.amazon.com/amplify/home" rel="noreferrer noopener"&gt;here&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;If you are starting from the &lt;strong&gt;All apps&lt;/strong&gt; page, choose &lt;strong&gt;New app&lt;/strong&gt;, &lt;strong&gt;Host web app&lt;/strong&gt; in the upper right corner.&lt;/li&gt;
&lt;li&gt;Connect your GitHub, Bitbucket, GitLab, or AWS CodeCommit repositories. We choose Github.&lt;/li&gt;
&lt;li&gt;After you connect the repository service provider, choose a repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;&lt;p&gt;Note: In case, your repository is under an organization, you won‚Äôt see the repositories unless the owner of the organization approves the email request from the AWS Amplify&lt;/p&gt;&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Now, you should be able to see your repositories, click the one you want, choose a corresponding branch to build and deploy.&lt;/li&gt;
&lt;li&gt;Choose &lt;strong&gt;Save and deploy&lt;/strong&gt; to deploy your web app&lt;/li&gt;
&lt;li&gt;Access the build logs screen by selecting a progress indicator on the branch tile. A build has the following stages:&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Provision -&amp;gt; Build -&amp;gt; Deploy -&amp;gt;Verify&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kffb8qUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Ac4CiVq9XjCwByXAma63jFg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kffb8qUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Ac4CiVq9XjCwByXAma63jFg.png" alt="Build Steps for AWS Amplify"&gt;&lt;/a&gt;Build Steps for AWS Amplify&lt;/p&gt;

&lt;h3&gt;Configure React App with AWS Amplify¬†Console&lt;/h3&gt;

&lt;p&gt;As a programmer, you want to have control over the deployments, but not via some console (AWS Amplify console in this case).&lt;/p&gt;

&lt;p&gt;We will configure our React deployments via the yml file, which is internally used by AWS Amplify.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to the AWS Amplify console and choose your app.&lt;/li&gt;
&lt;li&gt;On the left-hand side, click on the &lt;strong&gt;Build settings&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;In the App build specification, click &lt;strong&gt;Download. &lt;/strong&gt;This should download the default &lt;strong&gt;amplify.yml&lt;/strong&gt; file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8_GzaSwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AfST-UCEgyfkRnDcp0TjVBA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8_GzaSwC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2AfST-UCEgyfkRnDcp0TjVBA.png" alt="Amplify yml file"&gt;&lt;/a&gt;Amplify yml file&lt;/p&gt;

&lt;p&gt;Add this &lt;a href="https://github.com/AseemWangoo/expriments_with_react/blob/master/amplify.yml" rel="noreferrer noopener"&gt;file&lt;/a&gt; to the root of your repository&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;frontend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;phases&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;preBuild&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;yarn install&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;yarn run build&lt;/span&gt;
  &lt;span class="na"&gt;artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;baseDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build&lt;/span&gt;
    &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;**/*'&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;node_modules/**/*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;Manage multiple environments&lt;/h3&gt;

&lt;p&gt;Almost every react app has different environments and you want to deploy or manage multiple environments programmatically.&lt;/p&gt;

&lt;p&gt;We will configure our React app to deploy environment-based configurations inside AWS Amplify.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For configuring different environments, we make use of &lt;a href="https://www.npmjs.com/package/env-cmd" rel="noreferrer noopener"&gt;env-cmd&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Install the env-cmd using&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cmd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We have a separate environment file for production¬†&lt;code&gt;&lt;a href="https://github.com/AseemWangoo/expriments_with_react/blob/master/.env.production" rel="noreferrer noopener"&gt;.env.production&lt;/a&gt;&lt;/code&gt; (this can be of any name)&lt;/li&gt;
&lt;li&gt;Go to your &lt;a href="https://github.com/AseemWangoo/expriments_with_react/blob/master/package.json" rel="noreferrer noopener"&gt;package.json&lt;/a&gt; and add a new script as&lt;/li&gt;
&lt;/ul&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;build:prod&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;env-cmd -f .env.production react-scripts build&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, when you run the command &lt;code&gt;npm run build:prod&lt;/code&gt; this will take the configuration from the file¬†&lt;code&gt;.env.production&lt;/code&gt;¬†&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;Verify locally by running the &lt;code&gt;npm run build:prod&lt;/code&gt; and then using &lt;code&gt;serve -s build&lt;/code&gt; to run the production build locally.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;If everything works, we &lt;strong&gt;proceed with the Amplify deployment&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to your app inside the AWS Amplify console and on the left-hand side click on the &lt;strong&gt;Environment variables&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Enter a variable called &lt;strong&gt;BUILD_ENV &lt;/strong&gt;and give the value as&lt;strong&gt; prod&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iy0YFN0Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Axj7cFBfI6Wnk7lVuCCGjPQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iy0YFN0Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1600/1%2Axj7cFBfI6Wnk7lVuCCGjPQ.png" alt="Build Environments"&gt;&lt;/a&gt;Build Environments&lt;/p&gt;

&lt;p&gt;Inside your &lt;code&gt;amplify.yml&lt;/code&gt; edit the &lt;code&gt;preBuild&lt;/code&gt; phase to install the &lt;code&gt;env-cmd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, edit the build phase and change the command to &lt;code&gt;npm run build:$BUILD_ENV&lt;/code&gt;¬†&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;frontend&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;phases&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;preBuild&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;npm install env-cmd&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;npm ci&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;commands&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;echo "I am running üèÉ on $BUILD_ENV"&lt;/span&gt; 
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;npm run build:$BUILD_ENV&lt;/span&gt;
  &lt;span class="na"&gt;artifacts&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;baseDirectory&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build&lt;/span&gt;
    &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;**/*'&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;node_modules/**/*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;&lt;p&gt;Basically, this takes in the variable from your app‚Äôs environment variables(BUILD_ENV) and replaces the command with the value(prod).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So, at the time of build, your command becomes &lt;code&gt;npm run build:prod&lt;/code&gt; which was the same you used to build locally.&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;You can take this further, by creating different apps as per branches and using the BUILD_ENV variable as per your requirement.&lt;/li&gt;&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;# Examples
Create app with qa branch and set the BUILD_ENV as qa&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;a rel="noreferrer noopener" href="https://github.com/AseemWangoo/expriments_with_react"&gt;&lt;em&gt;Source code.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lwCFDhe9szs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In case it helped :)&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/aseemwangoo"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kziPr3-e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png" alt="Pass Me A Coffee!!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>react</category>
      <category>productivity</category>
    </item>
  </channel>
</rss>
