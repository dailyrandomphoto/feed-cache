<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>[JavaScript] Super dangerous, underrated vulnerability impacting JavaScript apps!</title>
      <author>Yuma-Tsushima </author>
      <pubDate>Wed, 07 Jul 2021 17:38:46 +0000</pubDate>
      <link>https://dev.to/yumatsushima07/javascript-super-dangerous-underrated-vulnerability-impacting-javascript-apps-4dgn</link>
      <guid>https://dev.to/yumatsushima07/javascript-super-dangerous-underrated-vulnerability-impacting-javascript-apps-4dgn</guid>
      <description>&lt;p&gt;In 2019, security researchers at Snyk disclosed details of a severe vulnerability in Lodash, a popular JavaScript library, which allowed hackers to attack multiple web applications.&lt;/p&gt;

&lt;p&gt;The security hole was a prototype pollution bug – a type of vulnerability that allows attackers to exploit the rules of the JavaScript programming language and compromise applications in various ways.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-prototype-pollution"&gt;
  &lt;/a&gt;
  What is prototype pollution?
&lt;/h2&gt;

&lt;p&gt;JavaScript is prototype-based: when new objects are created, they carry over the properties and methods of the prototype “object”, which contains basic functionalities such as &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;constructor&lt;/code&gt; and &lt;code&gt;hasOwnProperty&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Object-based inheritance gives JavaScript the flexibility and efficiency that web programmers have come to love – but it also makes it vulnerable to tampering.&lt;/p&gt;

&lt;p&gt;Malicious actors can make application-wide changes to all objects by modifying object, hence the name prototype pollution.&lt;/p&gt;

&lt;p&gt;Interestingly, attackers don’t even need to directly modify object – they can access it through the &lt;code&gt;‘__proto__’&lt;/code&gt; property of any JavaScript object. And once you make a change to object, it applies to all JavaScript objects in a running application, including those created after tampering.&lt;/p&gt;

&lt;p&gt;Here’s a simple example of how prototype pollution works. The following code changes the value of the &lt;code&gt;toString&lt;/code&gt; function in the prototype to an arbitrary code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;person&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;//output: "[object Object]"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;polluted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="c1"&gt;// alert box pops up: "polluted"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, every time &lt;code&gt;toString()&lt;/code&gt; is called on an object, an alert box will pop up with the message “polluted” (unless an object explicitly overrides &lt;code&gt;Object.toString()&lt;/code&gt; with its own implementation). Since &lt;code&gt;toString&lt;/code&gt; is widely used in client-side JavaScript, this will cause disruption in the application’s execution.&lt;/p&gt;

&lt;p&gt;Other prototype pollution attacks involve adding properties and methods to object to manipulate the behavior of an application.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-the-impact-of-prototype-pollution"&gt;
  &lt;/a&gt;
  What is the impact of prototype pollution?
&lt;/h2&gt;

&lt;p&gt;“The impact of prototype pollution depends on the application,” security researcher &lt;a href="https://twitter.com/securitymb"&gt;Michał Bentkowski&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;“In a nutshell, every time a JavaScript code accesses a property that doesn’t exist on an object (which includes checking the existence of the property), we can change the outcome of the check with prototype pollution.”&lt;/p&gt;

&lt;p&gt;He added: “Depending on the exact logic of the application, prototype pollution can lead to practically all popular web vulnerabilities: remote code execution (RCE), cross-site scripting (XSS), SQL injection, and so on.”&lt;/p&gt;

&lt;p&gt;On web browsers, prototype pollution commonly leads to XSS attacks (see example above). In 2019, for instance, a prototype pollution bug found in JavaScript library jQuery left many web applications vulnerable to such assaults.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Check my post to understand more about popular vulns: &lt;a href="https://dev.to/yumatsushima07/cybersecurity-most-common-web-security-vulnerabilities-3g7f"&gt;[Cybersecurity] Most common web security vulnerabilities!&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But other vulnerabilities are likely to surface. “Client-side exploitation of prototype pollution is not currently well covered,” says Bentkowski, who is currently working on a detailed account of how exploits in this category can bypass popular HTML sanitizers such as html-sanitize and DOMPurify.&lt;/p&gt;

&lt;p&gt;On the server side, the impact of prototype pollution is better known.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The impact of the prototype pollution on server-side is at least denial of service by causing the Node.js server to crash,” &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Security researcher Francesco Soncina discovered a &lt;a href="https://hackerone.com/reports/869574"&gt;prototype pollution vulnerability&lt;/a&gt; in the object-mapping JavaScript library TypeORM that allowed hackers to stage SQL injection attacks on Node.js applications.&lt;/p&gt;

&lt;p&gt;“If the end application depending on the library has dynamic code evaluation or command execution gadgets, the attacker can potentially trigger arbitrary command execution on the target machine,” Soncina wrote.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-harden-applications-against-prototype-pollution-attacks"&gt;
  &lt;/a&gt;
  How to harden applications against prototype pollution attacks
&lt;/h2&gt;

&lt;p&gt;Like many other security vulnerabilities, attackers exploit prototype pollution bugs through user input in web applications, and sending their malicious code in text fields, headers, and files.&lt;/p&gt;

&lt;p&gt;“I guess trusting user input is the actual root of the problem, so developers should be very careful about which object fields can be influenced by users,” Aldoub says.&lt;/p&gt;

&lt;p&gt;Another problem is the way many JavaScript applications are written. “The coding pattern that leads to prototype pollution is extremely common in JavaScript code,” Bentkowski points out.&lt;/p&gt;

&lt;p&gt;For instance, many JavaScript libraries accept an options object and check the object for the presence of specific properties. In case some property is not present, they default to some predefined option (example below).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someOption&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someOption&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;someOption&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this case, attackers can use prototype pollution to override &lt;code&gt;someOption&lt;/code&gt; and manipulate the logic of the application.&lt;/p&gt;

&lt;p&gt;One popular kind of defense it to create blocklists where developers remove risky fields from input strings. But this is easier said than done.&lt;/p&gt;

&lt;p&gt;“You have to enumerate all possibilities of risky fields, and all permutations to encode such fields, which is an immeasurably difficult feat,” Aldoub says.&lt;/p&gt;

&lt;p&gt;For instance, with the aforementioned Lodash vulnerability, developers initially checked strings against the field &lt;code&gt;__proto__,&lt;/code&gt; but then realized that &lt;code&gt;constructor&lt;/code&gt; was also a potential target for prototype pollution.&lt;/p&gt;

&lt;p&gt;“What if another field was then discovered to be exploitable?” Aldoub says.&lt;/p&gt;

&lt;p&gt;Another important step is checking dependency modules of potential prototype pollution vulnerabilities, which presents its own challenges.&lt;/p&gt;

&lt;p&gt;“From an application developer’s point of view, it is very difficult to check all the modules in use,” Posix explained. “Therefore, before use, it is necessary to verify that the module is fully validated.”&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question: What do you think about this vulnerability? Leave a comment below.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt; / &lt;a href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Readme file
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
      &lt;h1&gt;
Welcome to Yuma-Tsushima's Github page!&lt;/h1&gt;
  &lt;p&gt;
  &lt;b&gt;Visitor count &lt;/b&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;img src="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/Order_of_the_Black_Knights_C2_bot" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6a6769e2d2eb0567975317a589549beaa5db99df73ce9d6f5f9004ec12eee28e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f537570706f72742d42757925323075732532306125323050697a7a612d6f72616e67652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d70617472656f6e" alt="Support"&gt;&lt;/a&gt;
&lt;a href="https://disboard.org/server/711260885531885648" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/018986f113096a2680c8fa03f313cdf0b8adf24be6d7b9df04b81f14e7897680/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43322773253230506c6163652d4a6f696e2532307573253230666f7225323061253230636861742d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b3b2ffae6fa2d5de61341af99a4e69ce1546047acebcb5039aa106a8411b2209/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e253230746f253230636861742d4379626572417274427974652d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b8ae02d15a55c4261d919a7dd81f80335cf71d017eb6b737cc32698877f322f9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f536f756e642d436c6f75642d7265642e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d736f756e64636c6f7564" alt="SoundCloud"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/blob/main/assets/terminalpython.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--30kNr2f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/raw/main/assets/terminalpython.png"&gt;&lt;/a&gt;&lt;/p&gt;

      &lt;h3&gt;
About Myself&lt;/h3&gt;
      &lt;p&gt;Hello, my name is Yuma-Tsushima (frequently shortened to Yuma). I am an ambitious coder, and I enjoy coding in JavaScript (mainly). I also love making websites using HTML, CSS and (of course) JS! I started programming (self taught) at the age of 13. Originally, I came from the creative field ; I draw/sing/animate/make music.  &lt;/p&gt;
   

&lt;h3&gt;
Talents and Hobbies&lt;/h3&gt;
&lt;p&gt;I love drawing (I have been drawing all of my life). I play strategy games, I code and I do CTFs! I am also good at animation, making AMVs and image editing. My favourite game is Mindustry, followed by Flow Free and Sudoku. I love watching anime (I love Code Geass - I relate to Lelouch a lot) and I aspire to create my own anime!&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a"&gt;&lt;img src="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a" alt="Drawing"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042"&gt;&lt;img src="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042" alt="Music"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025" alt="Digital Artwork"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041" alt="ICT"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041" alt="Electronics"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525"&gt;&lt;img src="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525" alt="Desgins"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025" alt="Web dev"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525"&gt;&lt;img src="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525" alt="Strategy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt; Check out my work!: &lt;/b&gt; &lt;br&gt;
❯ Soundcloud : &lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;0c7av3h4ck5&lt;/a&gt; &lt;br&gt;
❯ Discord : &lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;{CyberArtByte}&lt;/a&gt;  &lt;br&gt;
❯ Artwork : &lt;a href="https://medibang.com/u/AcceleratorArts07/" rel="nofollow"&gt;AcceleratorArts07&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Recent Medium&lt;/b&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me!
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/Yuma-Tsushima07"&gt;https://github.com/Yuma-Tsushima07&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Medium: &lt;a href="https://0xv37r1x3r.medium.com/"&gt;https://0xv37r1x3r.medium.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;SoundCloud: &lt;a href="https://soundcloud.com/0c7av3h4ck5"&gt;https://soundcloud.com/0c7av3h4ck5&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#discord-servers"&gt;
  &lt;/a&gt;
  Discord Servers!!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bounty Hunters&lt;/strong&gt;: An amazing bug hunting community full of developers and exploiters!!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.gg/J5PsgKqdWq"&gt;https://discord.gg/J5PsgKqdWq&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CyberArtByte&lt;/strong&gt;: My server full of bling and joy!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.com/invite/mNAWykv67W"&gt;https://discord.com/invite/mNAWykv67W&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-soundcloud-track"&gt;
  &lt;/a&gt;
  New Soundcloud Track!!
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="100%" height="166" src="https://w.soundcloud.com/player/?url=https://soundcloud.com/0c7av3h4ck5/giornos-theme-edm-0c7av3h4ck5&amp;amp;auto_play=false&amp;amp;color=%23000000&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;show_teaser=true"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>npm</category>
      <category>vulnerabilities</category>
    </item>
    <item>
      <title>CSS inline, block, inline-block</title>
      <author>Suprabha</author>
      <pubDate>Wed, 07 Jul 2021 17:38:32 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/css-inline-block-inline-block-1jl0</link>
      <guid>https://dev.to/suprabhasupi/css-inline-block-inline-block-1jl0</guid>
      <description>&lt;p&gt;&lt;span&gt;L&lt;/span&gt;et's understand the difference between Inline, Block, Inline-Block.&lt;/p&gt;

&lt;p&gt;1️⃣ inline &lt;/p&gt;

&lt;p&gt;2️⃣ block&lt;/p&gt;

&lt;p&gt;3️⃣ inline-block&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Lets checkout how inline, block and inline-block works. You can or can't
    set the &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;width&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; or &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;height&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; for few display
    properties.
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#inline"&gt;
  &lt;/a&gt;
  1️⃣ inline
&lt;/h2&gt;

&lt;p&gt;Inline elements takes there own width and height, &lt;b&gt;you can not apply the width and height&lt;/b&gt;, and if you try to apply then it won't have any effect.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#these-are-the-inline-html-elements"&gt;
  &lt;/a&gt;
  These are the inline HTML elements 👇
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;span&lt;/li&gt;
&lt;li&gt;a&lt;/li&gt;
&lt;li&gt;img&lt;/li&gt;
&lt;li&gt;u&lt;/li&gt;
&lt;li&gt;small&lt;/li&gt;
&lt;li&gt;strong&lt;/li&gt;
&lt;li&gt;b&lt;/li&gt;
&lt;li&gt;... many more
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.inline&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="m"&gt;#ff527b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* ❌ It will not work */&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* ❌ It will not work */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZI0qsyP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YmAHdzr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZI0qsyP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YmAHdzr.png" alt="css display inline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#block"&gt;
  &lt;/a&gt;
  2️⃣ block
&lt;/h2&gt;

&lt;p&gt;A block-level element always starts on a new line. A block-level element always takes up the full width available.&lt;/p&gt;

&lt;p&gt;A block level element has a top and a bottom margin, whereas an inline element does not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#these-are-the-raw-block-endraw-html-elements"&gt;
  &lt;/a&gt;
  These are the &lt;code&gt;block&lt;/code&gt; HTML elements 👇
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;h1&lt;/li&gt;
&lt;li&gt;p&lt;/li&gt;
&lt;li&gt;div&lt;/li&gt;
&lt;li&gt;header&lt;/li&gt;
&lt;li&gt;main&lt;/li&gt;
&lt;li&gt;table&lt;/li&gt;
&lt;li&gt;section
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.block&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="m"&gt;#ff527b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KiKaDk9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/32PemXp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KiKaDk9v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/32PemXp.png" alt="css display block"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inlineblock"&gt;
  &lt;/a&gt;
  3️⃣ inline-block
&lt;/h2&gt;

&lt;p&gt;inline-block It’s formatted just like the inline element, where it doesn’t start on a new line. &lt;/p&gt;

&lt;p&gt;It’s essentially the same thing as inline, except that you can set height and width values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.inline-block&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="m"&gt;#ff527b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c"&gt;/* ✅ It will work  */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k2GNT3oT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PXcd2Ei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k2GNT3oT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PXcd2Ei.png" alt="css display inline-block"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference 🧐
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements"&gt;MDN Docs of Inline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements"&gt;MDN Docs of Block&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suprabhasupi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDe0OdcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4t25pJE.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        👩🏻‍💻 &lt;a href="https://www.suprabha.me/"&gt; suprabha.me&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Typewriter animation using Vanilla JS and Highlight.js</title>
      <author>Geni Jaho</author>
      <pubDate>Wed, 07 Jul 2021 16:57:29 +0000</pubDate>
      <link>https://dev.to/genijaho/typewriter-animation-using-vanilla-js-and-highlight-js-1ecc</link>
      <guid>https://dev.to/genijaho/typewriter-animation-using-vanilla-js-and-highlight-js-1ecc</guid>
      <description>&lt;p&gt;You’ve seen typewriter animations. You’ve seen the power of Highlight.js. Now you’re seeing the ultimate game-changer: typewriter animations for highlighted code, yay.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u9UkuDZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8b0d5oetkr4vetl6ckp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u9UkuDZE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f8b0d5oetkr4vetl6ckp.gif" alt="Typewriter Effect using Vanilla JS and Highlight.js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most of the animations out there work only for a single line of text. Some even span multiple lines but only support a predefined text markup. Not ideal, let’s get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#highlight-some-code-first"&gt;
  &lt;/a&gt;
  Highlight some code first
&lt;/h2&gt;

&lt;p&gt;For demonstration purposes, we’re using code from the python requests library on GitHub.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"code"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_encoding_from_headers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""Returns encodings from given HTTP Header Dict.
        :param headers: dictionary to extract encoding from.
        :rtype: str
        """&lt;/span&gt;
    &lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'content-type'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initialize the highlight.js library according to your project setup, following their usage guidelines. Then, highlight the code above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylesheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;//cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.0.1/build/styles/base16/darcula.min.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;//cdn.jsdelivr.net/gh/highlightjs/cdn-release@11.0.1/build/highlight.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;code&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;hljs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;highlightElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we’re here (minus the container styling):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NUvMVRQL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mm2iu2uiram3ncelwm4u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NUvMVRQL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mm2iu2uiram3ncelwm4u.png" alt="Code highlighted using the Darcula theme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#animate-nodes-not-individual-characters"&gt;
  &lt;/a&gt;
  Animate nodes, not individual characters
&lt;/h2&gt;

&lt;p&gt;The struggle with animating code came from the fact that the various highlighters create their own markup. If we try to animate the text only, we get the desired typewriter effect, but we lose the highlighting. If we animate the whole HTML we may get highlighting, but this includes the markup itself, like, we’re printing &lt;code&gt;&amp;lt;span class=&amp;gt;&lt;/code&gt; on the div.&lt;/p&gt;

&lt;p&gt;So, we animate the nodes. It goes like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;code&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;childNodes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Get all the child nodes of the highlighted code, empty the placeholder, and start displaying the nodes starting from the first one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Little helper&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Make the content visible&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;visible&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// When we've displayed all the nodes&lt;/span&gt;
    &lt;span class="c1"&gt;// Just start over&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Append each node to the target code placeholder&lt;/span&gt;
    &lt;span class="c1"&gt;// And scroll that div if the code scrolls past it&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasOwnProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// Step to the next node&lt;/span&gt;
    &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// Repeat the process&lt;/span&gt;
    &lt;span class="c1"&gt;// after a variable amount of time&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that’s it for the JS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus-styling-improvement"&gt;
  &lt;/a&gt;
  Bonus styling improvement
&lt;/h2&gt;

&lt;p&gt;So far we’ve been working with this minimal CSS styling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#code&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* So the code won't wrap */&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow-x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* You know, so it doesn't overflow*/&lt;/span&gt;
  &lt;span class="nl"&gt;overflow-y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* The yet unhighlighted code better hide */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using various blinking cursors available online (couldn’t find the CodePen where I got it) we can add some extra styling.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#code&lt;/span&gt;&lt;span class="nd"&gt;:after&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;blink&lt;/span&gt; &lt;span class="m"&gt;500ms&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@-webkit-keyframes&lt;/span&gt; &lt;span class="nb"&gt;blink&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@-moz-keyframes&lt;/span&gt; &lt;span class="nb"&gt;blink&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nb"&gt;blink&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, those scrollbars become pretty ugly. We don’t need them in our case so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nf"&gt;#code&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-scrollbar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#code&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;-ms-overflow-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c"&gt;/* IE and Edge */&lt;/span&gt;
    &lt;span class="py"&gt;scrollbar-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c"&gt;/* Firefox */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that’s it, finally. Check it out on &lt;a href="https://codepen.io/genijaho/pen/ZEeoJqg"&gt;CodePen&lt;/a&gt;, and see it in action on &lt;a href="https://genijaho.dev/"&gt;my site&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>highlightjs</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Execuion context, Event Loop, callback queue</title>
      <author>Chaitanya Khachane</author>
      <pubDate>Wed, 07 Jul 2021 16:49:36 +0000</pubDate>
      <link>https://dev.to/chait04/execuion-context-event-loop-callback-queue-2aec</link>
      <guid>https://dev.to/chait04/execuion-context-event-loop-callback-queue-2aec</guid>
      <description>&lt;h1&gt;
  &lt;a href="#explained-async-js-in-4min-read-callback-queue-amp-event-loop-"&gt;
  &lt;/a&gt;
  Explained Async JS in 4min read. ( callback queue &amp;amp; Event Loop )
&lt;/h1&gt;

&lt;p&gt;Post is distributed in 3 parts-&amp;gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Execution Context&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;callback Queue&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Event Loop&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;hireMe&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`you are hired`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hireMe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Me First!`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(1) &lt;strong&gt;execution context&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As execution starts it will declare a placeholder for hireMe in a global execution context and will store the function definition in it...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As it reaches to setTimeout, it will create a timer in the browser with the given amount of time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remember as we invoke a function first it goes to call stack then its execution context is created and it gets destroyed as the function returns something.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The interesting things start from here&lt;/p&gt;

&lt;p&gt;(2). &lt;strong&gt;Callback queue - let's understand how it works&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;So what setTimeout will do is, it will add the hireMe function in the callback queue as the timer finishes, which is specifically made for async calls.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Note the function will not be added directly to the call stack as the timer finishes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;callback queue is specifically made for Asynchronous calls&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It doesn't matter what time you have specified in setTimeout&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3). &lt;strong&gt;Event Loop&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now comes the &lt;code&gt;Event Loop&lt;/code&gt;, which checks the call stack if it's empty or not. If nothing is inside the call stack then the function from the callback queue gets pushed in the call stack.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Event Loop&lt;/code&gt; is an infinite loop which is consistently checking the call stack if it is empty or not.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;From what we have seen till We can say, functions that are in the &lt;code&gt;callback&lt;/code&gt; queue need to wait until the whole Global execution gets finished and whether the call stack is empty or not...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;so you can also have millions of &lt;code&gt;console.logs()&lt;/code&gt; in the global context and they all will run before the &lt;code&gt;hireMe()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is one more thing called Microtask queue i will explain it in next post ♥&lt;/p&gt;

</description>
    </item>
    <item>
      <title>learn about The OpenSource End-to-End DevOps tool - Devtron, Heroku for Kubernetes. Livestream on 8th July 3:00 PM UTC</title>
      <author>Prashant Ghildiyal</author>
      <pubDate>Wed, 07 Jul 2021 16:36:40 +0000</pubDate>
      <link>https://dev.to/pghildiyal/learn-about-the-opensource-end-to-end-devops-tool-devtron-heroku-for-kubernetes-livestream-on-8th-july-3-00-pm-utc-2gk5</link>
      <guid>https://dev.to/pghildiyal/learn-about-the-opensource-end-to-end-devops-tool-devtron-heroku-for-kubernetes-livestream-on-8th-july-3-00-pm-utc-2gk5</guid>
      <description>&lt;p&gt;I am Excited to share with everyone that I will be joining Saiyam Pathak, Director of Civocloud and a YouTuber, on a Livestream on 8th july to talk about our OpenSource End-to-End Devops tool, Devtron. &lt;br&gt;
There are cool giveaways as well for those who attend the event 😄&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FB5BI3Ef7uw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/devtron-labs/devtron"&gt;Devtron&lt;/a&gt; is an application-first way of looking at Kubernetes, meaning deep integrations with existing open-source, commercial software and add capabilities on top of them to enable a clean self serve UI for developers and DevOps. &lt;br&gt;
We support various OpenSource systems like argocd, Argo workflow, Clair, hibernator, grafana, Prometheus, envoy, and many others. In short, it automates and helps in maintaining a balance between Security, Cost and stability of your app.&lt;/p&gt;

&lt;p&gt;If any of this interests you, you will definitely have a great time. Come hang out with us on the &lt;a href="https://www.youtube.com/watch?v=FB5BI3Ef7uw"&gt;stream&lt;/a&gt; to have a chat with me.&lt;/p&gt;

&lt;p&gt;This is our OpenSource DevOps tool link, if you'd like to explore more&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/devtron-labs"&gt;
        devtron-labs
      &lt;/a&gt; / &lt;a href="https://github.com/devtron-labs/devtron"&gt;
        devtron
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Software Delivery Workflow For Kubernetes
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/devtron-labs/devtron/main/./assets/devtron-logo.png"&gt;&lt;img width="200" height="156" src="https://res.cloudinary.com/practicaldev/image/fetch/s--geHMJKVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devtron-labs/devtron/main/./assets/devtron-logo.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Devtron is an open source software delivery workflow for kubernetes written in go
&lt;br&gt;
&lt;a href="https://docs.devtron.ai/" rel="nofollow"&gt;&lt;strong&gt;Explore documentation »&lt;/strong&gt;&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
&lt;a href="https://devtron.ai/" rel="nofollow"&gt;Website&lt;/a&gt;
·
&lt;a href="https://devtron.ai/blog/" rel="nofollow"&gt;Blog&lt;/a&gt;
·
&lt;a href="https://discord.gg/jsRG5qx2gp" rel="nofollow"&gt;Join Discord&lt;/a&gt;
·
&lt;a href="https://twitter.com/DevtronL" rel="nofollow"&gt;Twitter&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;a href="https://discord.gg/jsRG5qx2gp" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/49150eb0ec107d15b5dd28d7377dfa805fe47ef61c1180a6ce3c9f482cb28d40/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e25323075732532306f6e2d446973636f72642d6530313536332e737667" alt="Join Discord"&gt;&lt;/a&gt;
&lt;a href="https://goreportcard.com/badge/github.com/devtron-labs/devtron" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d68a0a3471479dff6e5155220bd1e304b6d6405d281bbc54d5d559f78fa794da/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f64657674726f6e2d6c6162732f64657674726f6e" alt="Go Report Card"&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/devtron-labs/devtron/main/./LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/2a2157c971b7ae1deb8eb095799440551c33dcf61ea3d965d86b496a5a65df55/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667" alt="License"&gt;&lt;/a&gt;
&lt;a href="https://bestpractices.coreinfrastructure.org/projects/4411" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/649d033dd2509020bf49e2775ffb7b18c6fcc80b4263d7050707540cf4357aa7/68747470733a2f2f626573747072616374696365732e636f7265696e6672617374727563747572652e6f72672f70726f6a656374732f343431312f6261646765" alt="CII Best Practices"&gt;&lt;/a&gt;
&lt;a href="http://golang.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b530ddfe089b6cab64711fdab82afaa28b0e1a833b26bdb15082e261850d22e6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d616465253230776974682d476f2d3166343235662e737667" alt="made-with-Go"&gt;&lt;/a&gt;
&lt;a href="http://devtron.ai/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/dc954b1e6af0e39a8148a4908ac9a4e49e4f17340977c9c88173e3788af10eb6/68747470733a2f2f696d672e736869656c64732e696f2f776562736974652d75702d646f776e2d677265656e2d7265642f687474702f736869656c64732e696f2e737667" alt="Website devtron.ai"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
📖 Menu&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#bulb-why-devtron"&gt;Why Devtron&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#tada-features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#rocket-getting-started"&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.devtron.ai/" rel="nofollow"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#memo-compatibility-notes"&gt;Compatibility Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#busts_in_silhouette-community"&gt;Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#handshake-contribute"&gt;Contribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#beetle-vulnerability-reporting"&gt;Vulnerability Reporting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devtron-labs/devtron#bookmark-license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
💡 Why Devtron?&lt;/h2&gt;

&lt;p&gt;It is designed as a self-serve platform for operationalizing and maintaining applications (AppOps) on kubernetes in a developer friendly way
&lt;br&gt;
&lt;br&gt;
&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/devtron-labs/devtron/main/./assets/preview.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7PECaETA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/devtron-labs/devtron/main/./assets/preview.gif"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
🎉 Features&lt;/h2&gt;


 &lt;b&gt; Zero code software delivery workflow &lt;/b&gt;
  
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;Workflow which understands the domain of &lt;strong&gt;kubernetes, testing, CD, SecOps&lt;/strong&gt; so that you dont have to write scripts&lt;/li&gt;
&lt;li&gt;Reusable and composable components so that workflows are easy to contruct and reason through&lt;/li&gt;
&lt;/ul&gt;


 &lt;b&gt; Multi cloud deployment &lt;/b&gt;
 &lt;br&gt; 
&lt;ul&gt;
&lt;li&gt;Deploy to multiple kubernetes cluster&lt;/li&gt;
&lt;/ul&gt;


  &lt;b&gt; Easy dev-sec-ops integration &lt;/b&gt; 
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;Multi level security policy at global, cluster, environment and application for efficient hierarchical policy management&lt;/li&gt;
&lt;li&gt;Behavior driven security policy&lt;/li&gt;
&lt;li&gt;Define policies and exception for kubernetes resources&lt;/li&gt;
&lt;li&gt;Define policies for events for faster resolution&lt;/li&gt;
&lt;/ul&gt;


  &lt;b&gt; Application debugging dashboard &lt;/b&gt; 
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;One place…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/devtron-labs/devtron"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>news</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Chatting Via the Command Line (ssh)</title>
      <author>ColeDrain</author>
      <pubDate>Wed, 07 Jul 2021 16:33:43 +0000</pubDate>
      <link>https://dev.to/coledrain/imagine-chatting-via-the-command-line-5d4h</link>
      <guid>https://dev.to/coledrain/imagine-chatting-via-the-command-line-5d4h</guid>
      <description>&lt;p&gt;Hello devs, trust your day is going great. &lt;/p&gt;

&lt;p&gt;I came across this cool repository on GitHub Made by Ishan Goel.&lt;/p&gt;

&lt;p&gt;Imagine chatting via the command line 😮.&lt;/p&gt;

&lt;p&gt;Devzat is chat over SSH: &lt;a href="//github.com/quackduck/devzat"&gt;devzat&lt;/a&gt;&lt;br&gt;
Because there's SSH apps on all platforms, even on mobile, you can join from anywhere.&lt;/p&gt;

&lt;p&gt;To use, just open your command prompt and run this command:&lt;br&gt;
&lt;code&gt;ssh devzat.hackclub.com&lt;/code&gt;&lt;br&gt;
make sure you're connected to the internet, of course.&lt;/p&gt;

&lt;p&gt;Run cmds to see a list of commands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interesting features:&lt;/strong&gt;&lt;br&gt;
• Rooms! Run cd to see all rooms and use cd #foo to join a new room.&lt;br&gt;
• Markdown support! Tables, headers, italics and everything. Just use \n in place of newlines.&lt;br&gt;
• Code syntax highlighting. Use Markdown fences to send code. Run eg-code to see an example.&lt;br&gt;
• Direct messages! Send a quick DM using =user  or stay in DMs by running cd @user.&lt;br&gt;
• Timezone support, use tz Continent/City to set your timezone.&lt;br&gt;
• Built in Tic Tac Toe and Hangman! Run tic or hang  to start new games.&lt;br&gt;
• Emoji replacements! 🚀 =&amp;gt;  (like on Slack and Discord)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Devs this is cool, come try it out.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>ssh</category>
      <category>go</category>
      <category>showdev</category>
    </item>
    <item>
      <title>What is Redux Toolkit?</title>
      <author>Maxine Meurer</author>
      <pubDate>Wed, 07 Jul 2021 15:34:57 +0000</pubDate>
      <link>https://dev.to/mmeurer00/what-is-redux-toolkit-b94</link>
      <guid>https://dev.to/mmeurer00/what-is-redux-toolkit-b94</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;p&gt;&lt;a href="#1"&gt;Introduction&lt;/a&gt;&lt;br&gt;
&lt;a href="#2"&gt;What's included inside Redux Toolkit?&lt;/a&gt;&lt;br&gt;
&lt;a href="#3"&gt;RTK Query&lt;/a&gt;&lt;br&gt;
&lt;a href="#4"&gt;What does RTK Query include?&lt;/a&gt;&lt;br&gt;
&lt;a href="#5"&gt;Conclusion&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The Redux Toolkit package was developed to be the new standard way to write Redux code, handling three major concerns about Redux itself...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;"Configuring a Redux store is too complicated"&lt;/li&gt;
&lt;li&gt;"I have to add a lot of packages to get Redux to do anything useful"&lt;/li&gt;
&lt;li&gt;"Redux requires too much boilerplate code"&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;These concerns were taken from and can be read further upon in the &lt;a href="https://redux-toolkit.js.org/introduction/getting-started"&gt;Redux ToolKit Documentation&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;One important thing to take away is that &lt;strong&gt;Redux provides us with powerful data fetching and caching capability&lt;/strong&gt;. This removes the need to create functions ourselves that would perform the same logic. &lt;/p&gt;

&lt;p&gt;Using Redux Toolkit is not required when using Redux, however it is encouraged because it does make your code DRYer and more maintainable, while speeding development. The package can be used at any skill level, and added at the beginning, in the middle, or at the end. &lt;em&gt;I would encourage starting off your redux application with the redux toolkit package if you are planning to use it in the future, just to make things easier.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#whats-included-inside-redux-toolkit"&gt;
  &lt;/a&gt;
  What's included inside Redux Toolkit? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Redux Toolkit includes the following APIs... &lt;em&gt;These APIs were created to supply logic and avoid repetition.&lt;/em&gt; &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/api/configureStore"&gt;configureStore()&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Wraps createStore to provide simplified configuration options and good defaults. It can automatically combine your slice reducers, adds whatever Redux middleware you supply, includes redux-thunk by default, and enables use of the Redux DevTools Extension.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/api/createReducer"&gt;createReducer()&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Lets you supply a lookup table of action types to case reducer functions, rather than writing switch statements. In addition, it automatically uses the immer library to let you write simpler immutable updates with normal mutative code, like state.todos[3].completed = true&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/api/createAction"&gt;createAction()&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Generates an action creator function for the given action type string. The function itself has toString() defined, so that it can be used in place of the type constant.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/api/createSlice"&gt;createSlice&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Accepts an object of reducer functions, a slice name, and an initial state value, and automatically generates a slice reducer with corresponding action creators and action types.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/api/createAsyncThunk"&gt;createAsyncThunk&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Accepts an action type string and a function that returns a promise, and generates a thunk that dispatches &lt;strong&gt;pending/fulfilled/rejected&lt;/strong&gt; action types based on that promise.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/api/createEntityAdapter"&gt;createEntityAdapter&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Generates a set of reusable reducers and selectors to manage normalized data in the store.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/api/createSelector"&gt;createSelector&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Utility from the Reselect library, re-exported for ease of use.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#rtk-query"&gt;
  &lt;/a&gt;
  RTK Query &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The RTK Query is given as an optional addition to the Redux toolkit package. It was built to ease the work load for programmers, solving the use case of data fetching and caching. The RTK Query is a compact and powerful toolset used to define an API interface layer for your app.&lt;/p&gt;

&lt;p&gt;The toolset is built on top of the Redux Toolkit, and uses Redux internally for its architecture. RTK query provides additional global store management capabilities. To further understand RTK query, it is recommended that you install the Redux DevTools browser extension. You can then examine and replay the behaviors of your requests and cache as they execute. &lt;/p&gt;

&lt;p&gt;RTK Query is already included with Redux Toolkit package. You can simply add the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createApi&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@reduxjs/toolkit/query&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="cm"&gt;/* React-specific entry point that automatically generates
   hooks corresponding to the defined endpoints */&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createApi&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@reduxjs/toolkit/query/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-does-rtk-query-include"&gt;
  &lt;/a&gt;
  What does RTK Query include? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/rtk-query/api/createApi"&gt;createApi()&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;The core of RTK Query's functionality. It allows you to define a set of endpoints describe how to retrieve data from a series of endpoints, including configuration of how to fetch and transform that data. In most cases, you should use this once per app, with "one API slice per base URL" as a rule of thumb.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/rtk-query/api/fetchBaseQuery"&gt;fetchBaseQuery()&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;A small wrapper around fetch that aims to simplify requests. Intended as the recommended baseQuery to be used in createApi for the majority of users.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/rtk-query/api/ApiProvider"&gt;ApiProvider&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Can be used as a Provider if you do not already have a Redux store.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://redux-toolkit.js.org/rtk-query/api/setupListeners"&gt;setupListeners()&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;A utility used to enable refetchOnMount and refetchOnReconnect behaviors.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find more information about &lt;a href="https://redux-toolkit.js.org/rtk-query/overview"&gt;RTK query&lt;/a&gt; here in the Redux Toolkit documentation. But the main thing to take away from RTK query is that it...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;DRYs up your code.&lt;/li&gt;
&lt;li&gt;You avoid recreating logic, saving time and resources.&lt;/li&gt;
&lt;li&gt;It can create cleaner and more efficient code.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Redux Toolkit comes with a lot of &lt;em&gt;tools&lt;/em&gt; that save you lines of code, time, and headaches. But its purpose and &lt;em&gt;benefits&lt;/em&gt; have raised controversy in the tech realm. For some user's, the package is very useful and fits all the points listed above. However, some find that it requires a lot of boilerplate code and just makes things more confusing. The only way to truly find out, is to use Redux Toolkit for yourself! There are many tutorials out there explaining how to create small &lt;em&gt;or large&lt;/em&gt; applications utilizing the toolkit. It is unknown whether Redux Toolkit is just another fad of programming, or here to stay...but we might as use while it's hot! &lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Create a Blog with SvelteKit and Strapi</title>
      <author>Shada </author>
      <pubDate>Wed, 07 Jul 2021 15:23:37 +0000</pubDate>
      <link>https://dev.to/strapi/how-to-create-a-blog-with-sveltekit-and-strapi-54pb</link>
      <guid>https://dev.to/strapi/how-to-create-a-blog-with-sveltekit-and-strapi-54pb</guid>
      <description>&lt;p&gt;&lt;a href="https://kit.svelte.dev"&gt;SvelteKit&lt;/a&gt; is a relatively new SSR framework for SvelteJS. We can compare it to NextJS, but instead of using React, it uses Svelte. In this tutorial, you'll learn how you can create a blog website with SvelteKit and Strapi as a CMS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is a CMS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A CMS, or a Content Management System, is a popular tool for creating web pages, blogs, and online stores. They store your website's data, images, pictures, and other hosted content. They are popular among bloggers because anyone can spin up a blog pretty quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://strapi.io"&gt;Strapi&lt;/a&gt; is a Headless CMS coded in Javascript. A headless CMS has no frontend, only an admin panel, so it is ideal for developers. In other words, a Headless CMS is an API that serves up your content to be consumed by a frontend.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#goals-for-today"&gt;
  &lt;/a&gt;
  Goals for today
&lt;/h2&gt;

&lt;p&gt;In this tutorial, you'll code a blog website using the &lt;a href="https://kit.svelte.dev"&gt;SvelteKit&lt;/a&gt; framework. You'll use &lt;a href="https://strapi.io"&gt;Strapi&lt;/a&gt; for content management.&lt;/p&gt;

&lt;p&gt;You'll learn the basics of SvelteKit, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Filesystem based routing&lt;/li&gt;
&lt;li&gt;Preloading content&lt;/li&gt;
&lt;li&gt;Dynamic routing&lt;/li&gt;
&lt;li&gt;404 Error handling&lt;/li&gt;
&lt;li&gt;SvelteKit Layouts&lt;/li&gt;
&lt;li&gt;And much more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You'll also learn how to use Strapi to manage your content.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://nodejs.org"&gt;NodeJS&lt;/a&gt; and &lt;a href="https://npmjs.com"&gt;NPM&lt;/a&gt; installed on your machine.&lt;/li&gt;
&lt;li&gt;Javascript and &lt;a href="https://svelte.dev"&gt;Svelte&lt;/a&gt; knowledge. (Svelte has &lt;a href="https://svelte.dev/tutorial"&gt;a great tutorial&lt;/a&gt;, so go check it out!)&lt;/li&gt;
&lt;li&gt;Some coffee and articles to write on your new blog!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-strapi-project"&gt;
  &lt;/a&gt;
  Creating a Strapi project
&lt;/h2&gt;

&lt;p&gt;Now that you know what a CMS and Strapi are, you can get started by locally hosting Strapi, or in other words, Creating a Strapi Project.&lt;/p&gt;

&lt;p&gt;Run this command in an empty folder to create a Strapi project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    npx create-strapi-project cms --quickstart
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can replace the word &lt;code&gt;cms&lt;/code&gt; with anything you like. This command will be the name of the folder your new Strapi project will sit in.&lt;/p&gt;

&lt;p&gt;Now sit back, relax, and wait for the project to create itself. After that, you should automatically be taken to localhost:1377. &lt;/p&gt;

&lt;p&gt;If that's not the case, &lt;code&gt;cd&lt;/code&gt; into the newly created folder and run this command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    npm run strapi develop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will start Strapi up on port &lt;code&gt;1337&lt;/code&gt;. If a page is not automatically opened up for you, open &lt;a href="http://localhost:1377"&gt;localhost:1377&lt;/a&gt; to launch the Strapi Admin Page.&lt;/p&gt;

&lt;p&gt;It should present you with this page. You need to sign up for an account here. &lt;strong&gt;Remember that this account is locally-scoped to this project, meaning it won't work on other Strapi projects.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--69kO_Seg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/bQFuopK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--69kO_Seg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/bQFuopK.png" alt="The Strapi Admin login page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Creating content types&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the sidebar of Strapi admin &lt;code&gt;http://localhost:1377&lt;/code&gt;, click the &lt;code&gt;Content-Types Builder&lt;/code&gt; button. This button should take you to the Content Types builder page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3n4eVyvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7OtSRoU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3n4eVyvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7OtSRoU.png" alt="The content builder page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-content-types"&gt;
  &lt;/a&gt;
  What are content types?
&lt;/h2&gt;

&lt;p&gt;We can compare a content type to a table in SQL. Thus, content types help us structure and categorize our data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Posts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let's create a content type for posts. Then, click the &lt;code&gt;Create new Collection Type&lt;/code&gt; button to launch a dialogue.&lt;/p&gt;

&lt;p&gt;Enter &lt;code&gt;Post&lt;/code&gt; as the name. Go to &lt;code&gt;Advanced Settings&lt;/code&gt; at the top and disable the Drafts system. Click Continue&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c4EEXJge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7YzVrrs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c4EEXJge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7YzVrrs.png" alt="The Content Type Creation Dialogue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add these fields. Refer to the image if you get stuck.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;title&lt;/code&gt; field with type &lt;code&gt;Text&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;description&lt;/code&gt; field with type &lt;code&gt;Text&lt;/code&gt;. Make sure the text is &lt;code&gt;Long text&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;content&lt;/code&gt; field with the &lt;code&gt;Rich Text&lt;/code&gt; type.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rrAXdHz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qmGgLFt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rrAXdHz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qmGgLFt.png" alt="The Post content type's fields"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's also add a relation between &lt;code&gt;Post&lt;/code&gt; and User from the &lt;code&gt;users-permissions&lt;/code&gt; plugin. This relationship allows us to easily link a post to a user to display relevant information like the Author's name and profile picture, fetch the Author's posts, etc.&lt;/p&gt;

&lt;p&gt;Add a new &lt;code&gt;Relation&lt;/code&gt; field to the &lt;code&gt;Post&lt;/code&gt; content type. The column on the left should be PostPost, and the column on the right should be User from &lt;code&gt;users-permissions&lt;/code&gt;. Select the fourth relation; the &lt;code&gt;User&lt;/code&gt; has many &lt;code&gt;Posts&lt;/code&gt; and clicks &lt;code&gt;Finish&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Refer to the below image if you get stuck:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e7o9oZbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7pnHCe1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e7o9oZbM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7pnHCe1.png" alt="Post and User relation dialogue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Save&lt;/code&gt; to save your changes and restart the server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setting up roles and permissions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you try querying the &lt;a href="https://strapi.io/documentation/developer-docs/latest/developer-resources/content-api/content-api.html#api-endpoints"&gt;Content API&lt;/a&gt; for the &lt;code&gt;posts&lt;/code&gt; content type, i.e., at &lt;code&gt;http://localhost:5000/posts&lt;/code&gt;, you'll get a &lt;code&gt;403 FORBIDDEN&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;This error is because, by default, Strapi doesn't allow any man down the street to access your content. You're supposed to set rules and permissions for specific roles. Let's allow the &lt;code&gt;Public&lt;/code&gt; role, i.e., an unauthenticated user, to read our posts.&lt;/p&gt;

&lt;p&gt;In the sidebar, click on the &lt;code&gt;Settings&lt;/code&gt; button. There, click on &lt;code&gt;Roles&lt;/code&gt; in the &lt;code&gt;Users &amp;amp; Permissions&lt;/code&gt; section. But, first, let's edit the permissions for the Public role.&lt;br&gt;
We'll allow the &lt;code&gt;Public&lt;/code&gt; role to &lt;code&gt;count&lt;/code&gt;, &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;findOne&lt;/code&gt; for Posts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XXWEsQZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sCyu7CJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXWEsQZF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/sCyu7CJ.png" alt="Roles Settings Page for the Public Role"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, let's do the same for the &lt;code&gt;Authenticated&lt;/code&gt; role, but we'll also allow them to create, update and delete posts as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hJaD6LT5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/39jLkby.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hJaD6LT5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/39jLkby.png" alt="The settings for the Authenticated Role"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-sveltekit-project"&gt;
  &lt;/a&gt;
  Creating a SvelteKit project
&lt;/h2&gt;

&lt;p&gt;Now for the main &lt;a href="https://kit.svelte.dev"&gt;SvelteKit&lt;/a&gt; code. Create a new folder named &lt;code&gt;frontend&lt;/code&gt; in the same directory as the folder for the Strapi project and &lt;code&gt;cd&lt;/code&gt; into it. &lt;/p&gt;

&lt;p&gt;Now, let's create a SvelteKit project with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    npm init svelte@next
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be sure to choose the options as shown in the below image.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hltyxNZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qVNyCXu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hltyxNZ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qVNyCXu.png" alt="The output of the above command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Launch the app inside your favourite editor, for example, &lt;a href="https://code.visualstudio.com"&gt;VSCode&lt;/a&gt;. Now, we can start the app with the below two commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    # To install packages
    npm i 

    # To start the app
    npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Feel free to use &lt;code&gt;[yarn](https://yarnpkg.org)&lt;/code&gt; instead of &lt;code&gt;[npm](https://npmjs.com)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's how your app should look, hosted on &lt;a href="https://localhost:3000"&gt;localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2hQKJcpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/aXLfKrI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2hQKJcpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/aXLfKrI.png" alt="Your SvelteKit app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt; &lt;a href="https://tailwindcss.com"&gt;&lt;strong&gt;TailwindCSS&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com"&gt;TailwindCSS&lt;/a&gt; is a straightforward way to style your apps, and it's clear to add them to SvelteKit.&lt;br&gt;
We'll use &lt;a href="https://github.com/svelte-add/svelte-add"&gt;SvelteAdd&lt;/a&gt; to add TailwindCSS to our application quickly. &lt;/p&gt;

&lt;p&gt;Run the below command to add TailwindCSS to our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    npx svelte-add tailwindcss
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Be sure to stop the running server with &lt;code&gt;Ctrl+C&lt;/code&gt; first.&lt;/p&gt;

&lt;p&gt;Let's start our project from scratch. &lt;/p&gt;

&lt;p&gt;Delete all the extra CSS, except the &lt;code&gt;@tailwind&lt;/code&gt; parts in &lt;code&gt;src/app.postcss&lt;/code&gt;.  Delete all of the items in &lt;code&gt;src/routes&lt;/code&gt; and &lt;code&gt;src/lib&lt;/code&gt;, and now we should be left with an empty project.&lt;/p&gt;

&lt;p&gt;Create a new file &lt;code&gt;src/routes/index.svelte&lt;/code&gt;. All files in the &lt;code&gt;src/routes&lt;/code&gt; folder will be mapped to actual routes.  For example, &lt;code&gt;src/routes/example.svelte&lt;/code&gt; will be accessible at &lt;code&gt;/example&lt;/code&gt;, and &lt;code&gt;src/routes/blog/test.svelte&lt;/code&gt; will be accessible at &lt;code&gt;/blog/test&lt;/code&gt;.  &lt;code&gt;index.svelte&lt;/code&gt; is a special file. It maps to the base directory. &lt;code&gt;src/routes/index.svelte&lt;/code&gt; maps to &lt;code&gt;/&lt;/code&gt;, and &lt;code&gt;src/routes/blog/index.svelte&lt;/code&gt; maps to &lt;code&gt;/blog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is how filesystem based routing works in SvelteKit. Later, you'll learn to add routes with dynamic names.&lt;/p&gt;

&lt;p&gt;For now, let's work on the basic UI. Add the following code to &lt;code&gt;index.svelte&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;script lang="ts"&amp;gt;
    &amp;lt;/script&amp;gt;

    &amp;lt;div class="my-4"&amp;gt;
        &amp;lt;h1 class="text-center text-3xl font-bold"&amp;gt;My wonderful blog&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I've elected to use &lt;a href="https://www.typescriptlang.org/"&gt;Typescript&lt;/a&gt;, which is just like Javascript, but with types. You can follow along with javascript, but types and interfaces won't work for you.&lt;br&gt;
Also, you shouldn't put &lt;code&gt;lang="ts"&lt;/code&gt; in your &lt;code&gt;script&lt;/code&gt; tag.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now you'll notice that TailwindCSS is no longer working. This is because we deleted &lt;code&gt;__layout.svelte&lt;/code&gt;, the file importing &lt;code&gt;src/app.postcss&lt;/code&gt;. Let's now learn what this &lt;code&gt;__layout.svelte&lt;/code&gt; file is.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;__layout.svelte&lt;/code&gt; is a special file that adds a layout to every page. &lt;code&gt;__layout.svelte&lt;/code&gt;s can not only exist at the top level &lt;code&gt;routes&lt;/code&gt; folder, but can also exist in subdirectories, applying layouts for that subdirectory.&lt;/p&gt;

&lt;p&gt;Read more about &lt;a href="https://kit.svelte.dev/docs#layouts"&gt;SvelteKit layouts here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For now, all we have to do, is create &lt;code&gt;src/routes/__layout.svelte&lt;/code&gt; and import &lt;code&gt;src/app.postcss&lt;/code&gt; in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;script lang="ts"&amp;gt;
        import '../app.postcss';
    &amp;lt;/script&amp;gt;

    &amp;lt;slot /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;slot /&amp;gt;&lt;/code&gt; element will be the actual content displayed on the page.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now here, in this &lt;code&gt;__layout.svelte&lt;/code&gt; file, we can add whatever content we want, and it'll be displayed on all pages. So, add your Navbars, Headers, Footers, and everything else here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fetch-blog-posts"&gt;
  &lt;/a&gt;
  Fetch blog posts
&lt;/h2&gt;

&lt;p&gt;Now, we can fetch blog posts from Strapi and display them in &lt;code&gt;index.svelte&lt;/code&gt;. We'll utilize &lt;a href="https://kit.svelte.dev/docs#routing-endpoints"&gt;SvelteKit Endpoints&lt;/a&gt; to make API fetching easier. Endpoints in SvelteKit are files ending with &lt;code&gt;.js&lt;/code&gt; (or &lt;code&gt;.ts&lt;/code&gt; for typescript) that export functions corresponding to HTTP methods. These endpoint files become API routes in our application.&lt;/p&gt;

&lt;p&gt;Let's create an endpoint &lt;code&gt;src/routes/posts.ts&lt;/code&gt; (use the &lt;code&gt;.js&lt;/code&gt; extension if you're not using typescript)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    // src/routes/posts.ts

    import type { EndpointOutput } from '@sveltejs/kit';

    export async function get(): Promise&amp;lt;EndpointOutput&amp;gt; {
        const res = await fetch('http://localhost:1337/posts');
        const data = await res.json();

        return { body: data };
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Ignore the typings if you're using &lt;code&gt;javascript&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, when we visit &lt;code&gt;http://localhost:3000/posts&lt;/code&gt;, we'll receive the posts from Strapi. Let's implement this route in our &lt;code&gt;index.svelte&lt;/code&gt; file using &lt;a href="https://kit.svelte.dev/docs#loading"&gt;SvelteKit's Loading functionality&lt;/a&gt;. Loading allows us to fetch APIs before the page is loaded using a particular &lt;code&gt;&amp;lt;script context=" module"&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Add this to the top of &lt;code&gt;src/routes/index.svelte&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    &amp;lt;script lang="ts" context="module"&amp;gt;
        import type { Load } from '@sveltejs/kit';

        export const load: Load = async ({ fetch }) =&amp;gt; {
            const res = await fetch('/posts');
            const data = await res.json();

            return { props: { posts: data } };
        };
    &amp;lt;/script&amp;gt;

    &amp;lt;script lang="ts"&amp;gt;
        export let posts: any;
    &amp;lt;/script&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see that the &lt;code&gt;load&lt;/code&gt; function takes in the &lt;code&gt;fetch&lt;/code&gt; function provided to us by SvelteKit and returns an object containing &lt;code&gt;props&lt;/code&gt;. These props are passed down to our components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    &amp;lt;!-- src/routes/index.svelte --&amp;gt;
    &amp;lt;script lang="ts" context="module"&amp;gt;
        import type { Load } from '@sveltejs/kit';

        export const load: Load = async ({ fetch }) =&amp;gt; {
            const res = await fetch('/posts');
            const data = await res.json();

            return { props: { posts: data } };
        };
    &amp;lt;/script&amp;gt;

    &amp;lt;script lang="ts"&amp;gt;
        import type { Post } from '$lib/types';
      import { goto } from "$app/navigation"

        export let posts: Post[];
    &amp;lt;/script&amp;gt;

    &amp;lt;div class="my-4"&amp;gt;
        &amp;lt;h1 class="text-center text-3xl font-bold"&amp;gt;My wonderful blog&amp;lt;/h1&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;div class="container mx-auto mt-4"&amp;gt;
        {#each posts as post}
            &amp;lt;div class="hover:bg-gray-200 cursor-pointer px-6 py-2 border-b border-gray-500" on:click={() =&amp;gt; goto("/blog/" + post.id)}&amp;gt;
                &amp;lt;h4 class="font-bold"&amp;gt;{post.title}&amp;lt;/h4&amp;gt;
                &amp;lt;p class="mt-2 text-gray-800"&amp;gt;{post.description}&amp;lt;/p&amp;gt;
                &amp;lt;p class="text-gray-500"&amp;gt;By: {post.author.username}&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        {/each}
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I've added a few typings in &lt;code&gt;src/lib/types.ts&lt;/code&gt;. You can check it out in the &lt;a href="https://github.com/arnu515/sveltekit-strapi-blog"&gt;Source Code&lt;/a&gt;&lt;br&gt;
SvelteKit allows us to access any file in &lt;code&gt;src/lib&lt;/code&gt; using the &lt;code&gt;[$lib](https://kit.svelte.dev/docs#modules-$lib)&lt;/code&gt; alias.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I added a test user and a test post in Strapi, and this is how my app looks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xbuud7WL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/vwsIysa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xbuud7WL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/vwsIysa.png" alt="A screenshot of the app so far"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Posts page&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, let's add a route that'll allow us to view a post. Now, you'll learn about &lt;a href="https://kit.svelte.dev/docs#routing-pages"&gt;Dynamic Routes in SvelteKit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we enclose a string in brackets &lt;code&gt;([])&lt;/code&gt; in a filename of a route, that becomes a parameter. So, for example, if I have a route called &lt;code&gt;src/routes/blog/[post].svelte&lt;/code&gt;, the route maps to &lt;code&gt;/blog/ANY_STRING&lt;/code&gt; where &lt;code&gt;ANY_STRING&lt;/code&gt; will be the value of the &lt;code&gt;post&lt;/code&gt; parameter. Let's use this to query posts with Strapi.&lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;load&lt;/code&gt; function we talked about earlier to get the parameters. Create a file called &lt;code&gt;src/routes/blog/[slug].svelte&lt;/code&gt; and add the below code to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    &amp;lt;!-- src/routes/blog/[slug].svelte --&amp;gt;
    &amp;lt;script lang="ts" context="module"&amp;gt;
        import type { Load } from '@sveltejs/kit';

        export const load: Load = async ({ page: { params }, fetch }) =&amp;gt; {
            // The params object will contain all of the parameters in the route.
            const { slug } = params;

            // Now, we'll fetch the blog post from Strapi
            const res = await fetch('http://localhost:1337/posts/' + slug);

            // A 404 status means "NOT FOUND"
            if (res.status === 404) {
                // We can create a custom error and return it.
                // SvelteKit will automatically show us an error page that we'll learn to customise later on.
                const error = new Error(`The post with ID ${slug} was not found`);
                return { status: 404, error };
            } else {
                const data = await res.json();
                return { props: { post: data } };
            }
        };
    &amp;lt;/script&amp;gt;

    &amp;lt;script lang="ts"&amp;gt;
        import type { Post } from '$lib/types';
        import { onMount } from 'svelte';

        export let post: Post;
        let content = post.content;

        onMount(async () =&amp;gt; {
            // Install the marked package first!
            // Run this command: npm i marked

            // We're using this style of importing because "marked" uses require, which won't work when we import it with SvelteKit.
            // Check the "How do I use a client-side only library" in the FAQ: https://kit.svelte.dev/faq
            const marked = (await import('marked')).default;
            content = marked(post.content);
        });
    &amp;lt;/script&amp;gt;

    &amp;lt;h1 class="text-center text-4xl mt-4"&amp;gt;{post.title}&amp;lt;/h1&amp;gt;
    &amp;lt;p class="text-center mt-2"&amp;gt;By: {post.author.username}&amp;lt;/p&amp;gt;

    &amp;lt;div class="border border-gray-500 my-4 mx-8 p-6 rounded"&amp;gt;
        {@html content}
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;We need to use the &lt;code&gt;@html&lt;/code&gt; directive when we want the content to be actually rendered as HTML.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#authentication-and-authorization"&gt;
  &lt;/a&gt;
  Authentication and authorization
&lt;/h2&gt;

&lt;p&gt;Let's get started with authenticating users to our blog. Strapi allows us to configure third-party providers like &lt;a href="https://google.com"&gt;Google&lt;/a&gt;, but we'll stick to the good ol' email and password sign-in.&lt;/p&gt;

&lt;p&gt;We don't want anybody to register to our blog, so we'll manually create a user with Strapi. Then, in the Strapi admin panel, click on the &lt;code&gt;Users&lt;/code&gt; collection type in the sidebar.&lt;/p&gt;

&lt;p&gt;There, click &lt;code&gt;Add new Users&lt;/code&gt; and create your user. Here's mine, for example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--14QvhDCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA96DA0DA80E614292943B12910B0B1DF88DA3403686B8316A5E36523C012B0D_1624968500099_kVM9gHV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--14QvhDCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_EA96DA0DA80E614292943B12910B0B1DF88DA3403686B8316A5E36523C012B0D_1624968500099_kVM9gHV.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;code&gt;Save&lt;/code&gt; when done&lt;/p&gt;

&lt;p&gt;We can test logging in to our user by sending a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;http://localhost:5000/auth/local&lt;/code&gt;. Follow the image below for the correct JSON body.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vAvlVuT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/bct4pi5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vAvlVuT8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/bct4pi5.png" alt="Insomnia screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The REST client I'm using in the above image is &lt;a href="https://insomnia.rest"&gt;Insomnia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The login route&lt;/strong&gt;&lt;br&gt;
Let's create a new route &lt;code&gt;src/routes/login.svelte&lt;/code&gt;. This will of course map to &lt;code&gt;/login&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    &amp;lt;script lang="ts"&amp;gt;
        import type { User } from '$lib/types';
        import { goto } from '$app/navigation';
        import user from '$lib/user';

        let email = '';
        let password = '';

        async function login() {
            const res = await fetch('http://localhost:1337/auth/local', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', Accept: 'application/json' },
                body: JSON.stringify({ identifier: email, password })
            });
            if (res.ok) {
                const data: {user: User, jwt: string} = await res.json();
                localStorage.setItem("token", data.jwt)
                if (data) {
                    $user = data.user;
                    goto('/');
                }
            } else {
                const data: { message: { messages: { message: string }[] }[] } = await res.json();
                if (data?.message?.[0]?.messages?.[0]?.message) {
                    alert(data.message[0].messages[0].message);
                }
            }
        }
    &amp;lt;/script&amp;gt;

    &amp;lt;form on:submit|preventDefault={login} class="container mx-auto my-4"&amp;gt;
        &amp;lt;h1 class="text-center text-2xl font-bold"&amp;gt;Login&amp;lt;/h1&amp;gt;

        &amp;lt;div class="my-1"&amp;gt;
            &amp;lt;label for="email"&amp;gt;Email&amp;lt;/label&amp;gt;
            &amp;lt;input type="email" placeholder="Enter your email" bind:value={email} /&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="my-1"&amp;gt;
            &amp;lt;label for="password"&amp;gt;Password&amp;lt;/label&amp;gt;
            &amp;lt;input type="password" placeholder="Enter your password" bind:value={password} /&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="my-3"&amp;gt;
            &amp;lt;button class="submit" type="submit"&amp;gt;Login&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/form&amp;gt;

    &amp;lt;style lang="postcss"&amp;gt;
        label {
            @apply font-bold block mb-1;
        }

        input {
            @apply bg-white w-full border border-gray-500 rounded outline-none py-2 px-4;
        }

        .submit {
            @apply bg-blue-500 text-white border-transparent rounded px-4 py-2;
        }
    &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've created a store in &lt;code&gt;src/lib/user.ts&lt;/code&gt; that will house the User to access the User in any component.&lt;/p&gt;

&lt;p&gt;Here's the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    // src/lib/user.ts

    import { writable } from 'svelte/store';
    import type { User } from './types';

    const user = writable&amp;lt;User | null&amp;gt;(null);

    export default user;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Persisting auth state&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Great! Our &lt;code&gt;/login&lt;/code&gt; page works flawlessly, but there's one problem - When we refresh the page, the user store gets reset to &lt;code&gt;null&lt;/code&gt;. To fix this, we need to re-fetch the User every time the page reloads. That's right, we need a &lt;code&gt;load&lt;/code&gt; function in &lt;code&gt;__layout.svelte&lt;/code&gt; since it is present on every page.&lt;/p&gt;

&lt;p&gt;Change &lt;code&gt;__layout.svelte&lt;/code&gt; to this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    &amp;lt;!-- src/routes/__layout.svelte --&amp;gt;
    &amp;lt;script lang="ts"&amp;gt;
        import '../app.postcss';
        import userStore from '$lib/user';
        import type { User } from '$lib/types';
        import { onMount } from 'svelte';

        let loading = true;

        onMount(async () =&amp;gt; {
            // Check if 'token' exists in localStorage
            if (!localStorage.getItem('token')) {
          loading = false;
          return { props: { user: null } };
        }

            // Fetch the user from strapi
            const res = await fetch('http://localhost:1337/auth/me', {
                headers: { Authorization: `Bearer ${localStorage.getItem('token')}` }
            });
            const user: User = await res.json();
            loading = false;
            if (res.ok) {
                $userStore = user;
            }
        });
    &amp;lt;/script&amp;gt;

    {#if !loading}
        &amp;lt;slot /&amp;gt;
    {/if}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait a minute! Why are we using &lt;code&gt;onMount&lt;/code&gt; instead of &lt;code&gt;load&lt;/code&gt;? Since &lt;code&gt;load&lt;/code&gt; is executed on the server, we won't have access to &lt;code&gt;localStorage&lt;/code&gt;, which is on the browser. Hence, we have to wait for the app to load before accessing &lt;code&gt;localStorage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you visit your app, you'll get a &lt;code&gt;404&lt;/code&gt; Error when trying to get the User from Strapi. This error is because &lt;code&gt;/auth/me&lt;/code&gt; isn't a valid route. So let's create it ourselves.&lt;/p&gt;

&lt;p&gt;Open the Strapi project in your favorite editor. Strapi allows us to add custom API routes to it. Let's use the &lt;code&gt;strapi&lt;/code&gt; CLI to generate a route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    npx strapi generate:controller Auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll find a new file called &lt;code&gt;/api/auth/controllers/Auth.js&lt;/code&gt;. We need to add our simple controller here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    "use strict";

    /**
     * A set of functions called "actions" for `auth`
     */

    module.exports = {
      async me(ctx) {
        if (ctx.state.user) {
          return ctx.state.user;
        }

        ctx.unauthorized("You're not logged in");
      },
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This simple API route will return the User if it exists or give us a &lt;code&gt;401 UNAUTHORIZED&lt;/code&gt; error. Now, we need to tell Strapi to register this controller at &lt;code&gt;/auth/me&lt;/code&gt;. To do that, create file &lt;code&gt;/api/auth/config/routes.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    {
      "routes": [
        {
          "method": "GET",
          "path": "/auth/me",
          "handler": "Auth.me",
          "config": {
            "policies": []
          }
        }
      ]
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we access &lt;code&gt;/auth/me&lt;/code&gt;, we get &lt;code&gt;403 FORBIDDEN&lt;/code&gt;. Like the &lt;code&gt;post&lt;/code&gt; routes, Strapi doesn't, by default, allow anyone to access this route either. So, let's edit permissions like how we did earlier for the &lt;code&gt;Authenticated&lt;/code&gt; role.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NNy4gqEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zmpcZyZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NNy4gqEj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/zmpcZyZ.png" alt="Users and permissions roles editor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And now, everything should work flawlessly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Navbar&lt;/strong&gt;&lt;br&gt;
Let's add a quick navbar to our app. Create file &lt;code&gt;src/lib/Navbar.svelte&lt;/code&gt; and put the below code in it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    &amp;lt;!-- src/lib/Navbar.svelte --&amp;gt;
    &amp;lt;script lang="ts"&amp;gt;
        import user from './user';
    &amp;lt;/script&amp;gt;

    &amp;lt;nav class="bg-white border-b border-gray-500 py-2 px-4 w-full"&amp;gt;
        &amp;lt;div class="flex items-center justify-between container mx-auto"&amp;gt;
            &amp;lt;a href="/" class="font-bold no-underline"&amp;gt;My blog&amp;lt;/a&amp;gt;
            &amp;lt;section&amp;gt;
                {#if !$user}
                    &amp;lt;a href="/login" class="font-mono no-underline"&amp;gt;Login&amp;lt;/a&amp;gt;
                {:else}
                    &amp;lt;a href="/new" class="font-mono no-underline mr-3"&amp;gt;New&amp;lt;/a&amp;gt;
                    &amp;lt;span class="font-mono text-gray-500"&amp;gt;{$user.username}&amp;lt;/span&amp;gt;
                {/if}
            &amp;lt;/section&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the Navbar to &lt;code&gt;__layout.svelte&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    &amp;lt;!-- src/routes/__layout.svelte --&amp;gt;
    &amp;lt;script lang="ts"&amp;gt;
      // ...
      import Navbar from "$lib/Navbar.svelte";
    &amp;lt;/script&amp;gt;

    &amp;lt;Navbar /&amp;gt;
    &amp;lt;slot /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-and-update-posts"&gt;
  &lt;/a&gt;
  Create and update posts
&lt;/h2&gt;

&lt;p&gt;Now, let's get to the juicy part. Add a file called &lt;code&gt;src/routes/new.svelte&lt;/code&gt;. This file will contain the form used to create a new post on Strapi.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    &amp;lt;!-- src/routes/new.svelte --&amp;gt;
    &amp;lt;script lang="ts" context="module"&amp;gt;
        import type { Load } from '@sveltejs/kit';
        import type { Post } from '$lib/types';

        export const load: Load = async ({ fetch, page: { query } }) =&amp;gt; {
            // edit will be an optional query string parameter that'll contain the ID of the post that needs to be updated.
            // If this is set, the post will be updated instead of being created.
            const edit = query.get('edit');

            if (edit) {
                const res = await fetch('http://localhost:1337/posts/' + edit);

                if (res.status === 404) {
                    const error = new Error(`The post with ID ${edit} was not found`);
                    return { status: 404, error };
                } else {
                    const data: Post = await res.json();
                    return {
                        props: {
                            editId: edit,
                            title: data.title,
                            content: data.content,
                            description: data.description
                        }
                    };
                }
            }

            return { props: {} };
        };
    &amp;lt;/script&amp;gt;

    &amp;lt;script lang="ts"&amp;gt;
        import { onMount } from 'svelte';
        import user from '$lib/user';
        import { goto } from '$app/navigation';

        export let editId: string;
        export let title = '';
        export let description = '';
        export let content = '';

        onMount(() =&amp;gt; {
            if (!$user) goto('/login');
        });

        // To edit the post
        async function editPost() {
            if (!localStorage.getItem('token')) {
                goto('/login');
                return;
            }

            const res = await fetch('http://localhost:1337/posts/' + editId, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + localStorage.getItem('token')
                },
                body: JSON.stringify({ title, description, content })
            });
            if (!res.ok) {
                const data: { message: { messages: { message: string }[] }[] } = await res.json();
                if (data?.message?.[0]?.messages?.[0]?.message) {
                    alert(data.message[0].messages[0].message);
                }
            } else {
                const data: Post = await res.json();
                goto('/blog/' + data.id);
            }
        }

        async function createPost() {
            if (!localStorage.getItem('token')) {
                goto('/login');
                return;
            }

            if (editId) {
                // We're supposed to edit, not create
                editPost();
                return;
            }

            const res = await fetch('http://localhost:1337/posts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    Accept: 'application/json',
                    Authorization: 'Bearer ' + localStorage.getItem('token')
                },
                body: JSON.stringify({ title, description, content })
            });
            if (!res.ok) {
                const data: { message: { messages: { message: string }[] }[] } = await res.json();
                if (data?.message?.[0]?.messages?.[0]?.message) {
                    alert(data.message[0].messages[0].message);
                }
            } else {
                const data: Post = await res.json();
                goto('/blog/' + data.id);
            }
        }
    &amp;lt;/script&amp;gt;

    &amp;lt;form on:submit|preventDefault={createPost} class="my-4 mx-auto container p-4"&amp;gt;
        &amp;lt;div class="my-1"&amp;gt;
            &amp;lt;label for="title"&amp;gt;Title&amp;lt;/label&amp;gt;
            &amp;lt;input type="text" placeholder="Enter title" id="title" bind:value={title} /&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="my-1"&amp;gt;
            &amp;lt;label for="description"&amp;gt;Description&amp;lt;/label&amp;gt;
            &amp;lt;input type="text" placeholder="Enter description" id="description" bind:value={description} /&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="my-1"&amp;gt;
            &amp;lt;label for="title"&amp;gt;Content&amp;lt;/label&amp;gt;
            &amp;lt;textarea rows={5} placeholder="Enter content" id="content" bind:value={content} /&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="my-2"&amp;gt;
            &amp;lt;button class="submit" type="submit"&amp;gt;Submit&amp;lt;/button&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/form&amp;gt;

    &amp;lt;style lang="postcss"&amp;gt;
        label {
            @apply font-bold block mb-1;
        }

        input {
            @apply bg-white w-full border border-gray-500 rounded outline-none py-2 px-4;
        }

        textarea {
            @apply bg-white w-full border border-gray-500 rounded outline-none py-2 px-4 resize-y;
        }

        .submit {
            @apply bg-blue-500 text-white border-transparent rounded px-4 py-2;
        }
    &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't try this out yet, since there's currently no way to determine the Author of the PostPost. We need to code that in Strapi explicitly.&lt;/p&gt;

&lt;p&gt;Let's create custom controllers for the &lt;code&gt;Post&lt;/code&gt; content type. Here, we'll make it so that the Author of a post will be the currently logged-in User.&lt;/p&gt;

&lt;p&gt;Edit &lt;code&gt;api/post/controllers/post.js&lt;/code&gt; in the Strapi project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    "use strict";

    const { parseMultipartData, sanitizeEntity } = require("strapi-utils");

    /**
     * Read the documentation (https://strapi.io/documentation/developer-docs/latest/development/backend-customization.html#core-controllers)
     * to customize this controller
     */

    module.exports = {
      async create(ctx) {
        let entity;

        if (ctx.is("multipart")) {
          const { data, files } = parseMultipartData(ctx);
          data.author = ctx.state.user.id;
          entity = await strapi.services.post.create(data, { files });
        } else {
          ctx.request.body.author = ctx.state.user.id;
          entity = await strapi.services.post.create(ctx.request.body);
        }

        return sanitizeEntity(entity, { model: strapi.models.post });
      },

      async update(ctx) {
        const { id } = ctx.params;

        let entity;

        const [article] = await strapi.services.post.find({
          id: ctx.params.id,
          "author.id": ctx.state.user.id,
        });

        if (!article) {
          return ctx.unauthorized(`You can't update this entry`);
        }

        if (ctx.is("multipart")) {
          const { data, files } = parseMultipartData(ctx);
          entity = await strapi.services.post.update({ id }, data, {
            files,
          });
        } else {
          entity = await strapi.services.post.update({ id }, ctx.request.body);
        }

        return sanitizeEntity(entity, { model: strapi.models.post });
      },
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you get confused, checkout &lt;a href="https://strapi.io/documentation/developer-docs/latest/guides/is-owner.html#introduction"&gt;this&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And now, you should be able to create and update posts all from one route. Let's make the update process easier. Change &lt;code&gt;src/routes/blog/[slug].svelte&lt;/code&gt; to the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    &amp;lt;!-- src/routes/blog/[slug].svelte --&amp;gt;
    &amp;lt;script lang="ts" context="module"&amp;gt;
        import type { Load } from '@sveltejs/kit';

        export const load: Load = async ({ page: { params }, fetch }) =&amp;gt; {
            // The params object will contain all of the parameters in the route.
            const { slug } = params;

            // Now, we'll fetch the blog post from Strapi
            const res = await fetch('http://localhost:1337/posts/' + slug);

            // A 404 status means "NOT FOUND"
            if (res.status === 404) {
                // We can create a custom error and return it.
                // SvelteKit will automatically show us an error page that we'll learn to customise later on.
                const error = new Error(`The post with ID ${slug} was not found`);
                return { status: 404, error };
            } else {
                const data = await res.json();
                return { props: { post: data } };
            }
        };
    &amp;lt;/script&amp;gt;

    &amp;lt;script lang="ts"&amp;gt;
        import type { Post } from '$lib/types';
        import { onMount } from 'svelte';
        import { goto } from '$app/navigation';
        import user from '$lib/user';

        export let post: Post;
        let content = post.content;

        onMount(async () =&amp;gt; {
            // Install the marked package first!
            // Run this command: npm i marked

            // We're using this style of importing because "marked" uses require, which won't work when we import it with SvelteKit.
            // Check the "How do I use a client-side only library" in the FAQ: https://kit.svelte.dev/faq
            const marked = (await import('marked')).default;
            content = marked(post.content);
        });

        async function deletePost() {
            // TODO
        }
    &amp;lt;/script&amp;gt;

    &amp;lt;h1 class="text-center text-4xl mt-4"&amp;gt;{post.title}&amp;lt;/h1&amp;gt;
    &amp;lt;p class="text-center mt-2"&amp;gt;By: {post.author.username}&amp;lt;/p&amp;gt;

    {#if $user &amp;amp;&amp;amp; post.author.id === $user.id}
        &amp;lt;p class="my-2 flex justify-center items-center gap-3"&amp;gt;
            &amp;lt;button
                class="bg-blue-500 text-white font-bold py-2 px-4 rounded border-transparent"
                on:click={() =&amp;gt; goto('/new?edit=' + post.id)}&amp;gt;Update post&amp;lt;/button
            &amp;gt;
            &amp;lt;button
                class="bg-red-500 text-white font-bold py-2 px-4 rounded border-transparent"
                on:click={deletePost}&amp;gt;Delete post&amp;lt;/button
            &amp;gt;
        &amp;lt;/p&amp;gt;
    {/if}

    &amp;lt;div class="border border-gray-500 my-4 mx-8 p-6 rounded"&amp;gt;
        {@html content}
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when the Author visits their PostPost, they'll see two buttons to Update and Delete the PostPost, respectively.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deleting-posts"&gt;
  &lt;/a&gt;
  Deleting posts
&lt;/h2&gt;

&lt;p&gt;Let's add functionality to the &lt;code&gt;Delete Post&lt;/code&gt; button. Edit the &lt;code&gt;deletePost()&lt;/code&gt; function in the file we just modified (&lt;code&gt;src/routes/blog/[slug].svelte&lt;/code&gt;) and change it to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    if (!localStorage.getItem('token')) {
      goto('/login');
      return;
    }

    const res = await fetch('http://localhost:1337/posts/' + post.id, {
      method: 'DELETE',
      headers: { Authorization: 'Bearer ' + localStorage.getItem('token') }
    });
    if (res.ok) {
      goto('/');
    } else {
      const data: { message: { messages: { message: string }[] }[] } = await res.json();
      if (data?.message?.[0]?.messages?.[0]?.message) {
        alert(data.message[0].messages[0].message);
      }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, obviously, we don't want anybody to delete a post by someone else. Let's add another method in &lt;code&gt;api/post/controllers/post.js&lt;/code&gt; in our Strapi App.&lt;/p&gt;

&lt;p&gt;This is how your code should look now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    // api/post/controllers/post.js
    "use strict";

    const { parseMultipartData, sanitizeEntity } = require("strapi-utils");

    /**
     * Read the documentation (https://strapi.io/documentation/developer-docs/latest/development/backend-customization.html#core-controllers)
     * to customize this controller
     */

    module.exports = {
      async create(ctx) {
        let entity;

        if (ctx.is("multipart")) {
          const { data, files } = parseMultipartData(ctx);
          data.author = ctx.state.user.id;
          entity = await strapi.services.post.create(data, { files });
        } else {
          ctx.request.body.author = ctx.state.user.id;
          entity = await strapi.services.post.create(ctx.request.body);
        }

        return sanitizeEntity(entity, { model: strapi.models.post });
      },

      async update(ctx) {
        const { id } = ctx.params;

        let entity;

        const [article] = await strapi.services.post.find({
          id: ctx.params.id,
          "author.id": ctx.state.user.id,
        });

        if (!article) {
          return ctx.unauthorized(`You can't update this entry`);
        }

        if (ctx.is("multipart")) {
          const { data, files } = parseMultipartData(ctx);
          entity = await strapi.services.post.update({ id }, data, {
            files,
          });
        } else {
          entity = await strapi.services.post.update({ id }, ctx.request.body);
        }

        return sanitizeEntity(entity, { model: strapi.models.post });
      },

      async delete(ctx) {
        const { id } = ctx.params;

        let entity;

        const [article] = await strapi.services.post.find({
          id: ctx.params.id,
          "author.id": ctx.state.user.id,
        });

        if (!article) {
          return ctx.unauthorized(`You can't delete this entry`);
        }

        await strapi.services.post.delete({ id });

        return { ok: true };
      },
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, the author should be able to delete posts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-error-page"&gt;
  &lt;/a&gt;
  Custom error page.
&lt;/h2&gt;

&lt;p&gt;You may have noticed that the 404 page looks terrible. It has almost no styling. With SvelteKit, we're allowed to create a &lt;a href="https://kit.svelte.dev/docs#layouts-error-pages"&gt;custom error page&lt;/a&gt;. So we need to name this file &lt;code&gt;__error.svelte&lt;/code&gt; and place it in &lt;code&gt;src/routes&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
    &amp;lt;!-- src/routes/__error.svelte --&amp;gt;
    &amp;lt;script lang="ts" context="module"&amp;gt;
        import type { ErrorLoad } from '@sveltejs/kit';

        export type { ErrorLoad } from '@sveltejs/kit';

        export const load: ErrorLoad = ({ error, status }) =&amp;gt; {
            return { props: { error, status } };
        };
    &amp;lt;/script&amp;gt;

    &amp;lt;script lang="ts"&amp;gt;
        export let error: Error;
        export let status: number;
    &amp;lt;/script&amp;gt;

    &amp;lt;div class="fixed w-full h-full grid place-items-center"&amp;gt;
        &amp;lt;section class="p-8 border-gray-500 rounded"&amp;gt;
            &amp;lt;h1 class="text-center text-4xl font-mono-mt-4"&amp;gt;{status}&amp;lt;/h1&amp;gt;
            &amp;lt;p class="text-center"&amp;gt;{error.message}&amp;lt;/p&amp;gt;
        &amp;lt;/section&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's how our error page will look like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---iCIBhnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/uNbvTNX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---iCIBhnQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/uNbvTNX.png" alt="The new error page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Much better right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;And there you have it! Your blog website is made with SvelteKit and Strapi. If you got stuck anywhere, be sure to check the &lt;a href="https://kit.svelte.dev/docs"&gt;SvelteKit Docs&lt;/a&gt;, the &lt;a href="https://strapi.io/documentation"&gt;Strapi Docs&lt;/a&gt;, and the &lt;a href="https://github.com/arnu515/sveltekit-strapi-blog"&gt;source code on Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>sveltekit</category>
      <category>strapi</category>
      <category>javascript</category>
    </item>
    <item>
      <title>AzureFunBytes Reminder - Intro to @BicepLang with @adotfrank - 7/8/2021</title>
      <author>Jay Gordon</author>
      <pubDate>Wed, 07 Jul 2021 14:50:57 +0000</pubDate>
      <link>https://dev.to/azure/azurefunbytes-reminder-intro-to-biceplang-with-adotfrank-7-8-2021-56i6</link>
      <guid>https://dev.to/azure/azurefunbytes-reminder-intro-to-biceplang-with-adotfrank-7-8-2021-56i6</guid>
      <description>&lt;p&gt;AzureFunBytes is a weekly opportunity to learn more about the fundamentals and foundations that make up Azure. It's a chance for me to understand more about what people across the Azure organization do and how they do it. Every week we get together at 11 AM Pacific on &lt;a href="https://cda.ms/226"&gt;Microsoft LearnTV&lt;/a&gt; and learn more about Azure.&lt;/p&gt;

&lt;p&gt;When: July 8, 2021 11 AM Pacific / 2 PM Eastern&lt;br&gt;
Where: &lt;a href="https://cda.ms/226"&gt;Microsoft LearnTV&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DJzmXQeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z7BxBMz1--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2xzw2g664tj31jij13t.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJzmXQeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z7BxBMz1--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j2xzw2g664tj31jij13t.gif" alt="AzureFunBytes animation"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This week on AzureFunBytes we flex some Azure muscle with &lt;a href="https://cda.ms/2dv"&gt;Bicep&lt;/a&gt;.  Bicep is a language that allows you to use declarative syntax to codify your Azure infrastructure deployments.  Bicep is an Azure native &lt;a href="https://cda.ms/2dm"&gt;Domain-Specific Language (DSL)&lt;/a&gt; that promotes a cleaner syntax, improved type safety, and better support for modularity and re-use of code.  Bicep is a transparent abstraction over &lt;a href="https://cda.ms/2dt"&gt;Azure Resource Manager (ARM) templates&lt;/a&gt; that gives you the ability to create nearly any required resource with in Azure.  &lt;a href="https://bicepdemo.z22.web.core.windows.net/"&gt;Bicep has a playground&lt;/a&gt; that allows you to start using existing ARM Template Quickstarts right away.  Or if you choose to build them from scratch, the snippets with the &lt;a href="https://cda.ms/2df"&gt;VS Code Bicep extension&lt;/a&gt; will be a huge help. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EDfg3JDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/987m8ma7xxtofjt533aj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EDfg3JDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/987m8ma7xxtofjt533aj.png" alt="Bicep to JSON"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was lucky enough to get one of the experts on Bicep to join us this week!  We'll welcome &lt;a href="https://twitter.com/adotfrank"&gt;Microsoft Program Manager Alex Frankel&lt;/a&gt; to the show to give us greater insight into how to use Bicep to create our infrastructure.  I'll ask Alex your questions, we'll look at some Bicep basics, discuss best practices, and even kick off some deployments.  Don't miss this incredible opportunity to learn about building your &lt;a href="https://cda.ms/2dg"&gt;Infrastructure as Code (IAC)&lt;/a&gt; with Bicep!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zIz23oeLzdA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Our Agenda:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why we are investing in bicep in the first place

&lt;ul&gt;
&lt;li&gt;ARM Templates are by far the most popular declarative tool for deploying to Azure, want to improve experience for those customers&lt;/li&gt;
&lt;li&gt;Clarify that Bicep is just one of many great options&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Key differences between Bicep and ARM templates

&lt;ul&gt;
&lt;li&gt;Modules, richer intellisense, auto DependsOn, richer type safety&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;How the language is designed and the importance of tooling

&lt;ul&gt;
&lt;li&gt;In terms of language design (not complexity), Bicep shares more DNA with C# and TypeScript than traditional “scripting” languages like HCL or Chef&lt;/li&gt;
&lt;li&gt;Tooling is built alongside the language, so our syntax decisions are always driven by our ability to build tooling to go with it&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Benefits of being “Azure native”

&lt;ul&gt;
&lt;li&gt;Day zero support for all resource types&lt;/li&gt;
&lt;li&gt;No state management without losing the ability to perform what-if (“tf plan” equivalent) and manage lifecycle (“tf destroy” equivalent)&lt;/li&gt;
&lt;li&gt;Works with other platform capabilities like Template Specs, Azure Marketplace, etc.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Full details of how the Bicep language works can be found in the [Bicep documentation] and there is a rich library of examples to help you get a jumpstart.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Azure/bicep"&gt;&lt;em&gt;From the Bicep GitHub repository docs, how to get started:&lt;/em&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To get going with Bicep:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Start by &lt;a href="https://github.com/Azure/bicep/blob/main/docs/installing.md"&gt;installing the tooling&lt;/a&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complete the &lt;a href="https://github.com/Azure/bicep/blob/main/docs/tutorial/01-simple-template.md"&gt;Bicep tutorial&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Alternatively, you can try the &lt;a href="https://aka.ms/bicepdemo"&gt;Bicep Playground&lt;/a&gt; or use the &lt;a href="https://github.com/Azure/vscode-remote-try-bicep"&gt;VS Code Devcontainer/Codespaces&lt;/a&gt; repo to get a preconfigured environment.&lt;/p&gt;

&lt;p&gt;If you have an existing ARM Template or set of resources that you would like to convert to &lt;code&gt;.bicep&lt;/code&gt; format, see &lt;a href="https://github.com/Azure/bicep/blob/main/docs/decompiling.md"&gt;Decompiling an ARM Template&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Full details of how the bicep language works can be found in the &lt;a href="https://github.com/Azure/bicep/tree/main/docs"&gt;Bicep documentation&lt;/a&gt; and there is a rich library of &lt;a href="https://github.com/Azure/bicep/tree/main/docs/examples"&gt;examples&lt;/a&gt; to help you get a jumpstart.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-bicep-work"&gt;
  &lt;/a&gt;
  How does Bicep work?
&lt;/h2&gt;

&lt;p&gt;First, author your Bicep code using the Bicep language service as part of the &lt;a href="https://github.com/Azure/bicep/blob/main/docs/installing.md#bicep-vs-code-extension"&gt;Bicep VS Code extension&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both &lt;a href="https://cda.ms/2d9"&gt;Az CLI&lt;/a&gt; (2.20.0+) and the &lt;a href="https://cda.ms/2d8"&gt;PowerShell Az module&lt;/a&gt; (v5.6.0+) have Bicep support built-in. This means you can use the standard deployment commands with your &lt;code&gt;*.bicep&lt;/code&gt; files and the tooling will transpile the code and send it to ARM on your behalf. For example, to deploy &lt;code&gt;main.bicep&lt;/code&gt; to a resource group &lt;code&gt;my-rg&lt;/code&gt;, we can use the CLI command we are already used to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;az deployment group create -f ./main.bicep -g my-rg
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more detail on taking advantage of new Bicep constructs that replace an equivalent from ARM Templates, you can read the &lt;a href="https://github.com/Azure/bicep/blob/main/docs/arm2bicep.md"&gt;moving from ARM =&amp;gt; Bicep&lt;/a&gt; doc.&lt;/p&gt;

&lt;p&gt;Here's an example of a Bicep template to create a two subnet Azure VNET:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;resource&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;virtualNetwork&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'Microsoft.Network/virtualNetworks@&lt;/span&gt;&lt;span class="mi"&gt;2019-11-01&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'name'&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;location:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;resourceGroup().location&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="err"&gt;properties:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;addressSpace:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="err"&gt;addressPrefixes:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;subnets:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'Subnet&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;properties:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;addressPrefix:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;name:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'Subnet&lt;/span&gt;&lt;span class="mi"&gt;-2&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;properties:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="err"&gt;addressPrefix:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can add &lt;a href="https://cda.ms/2dp"&gt;parameters&lt;/a&gt;, &lt;a href="https://cda.ms/2dr"&gt;use modules&lt;/a&gt;, &lt;a href="https://cda.ms/2ds"&gt;link templates&lt;/a&gt;, &lt;a href="https://cda.ms/2dq"&gt;set variables&lt;/a&gt;, and set &lt;a href="https://cda.ms/2dn"&gt;outputs&lt;/a&gt; within your template.  You can deploy your Bicep templates using &lt;a href="https://cda.ms/2dh"&gt;Azure CLI&lt;/a&gt;, &lt;a href="https://cda.ms/2dj"&gt;PowerShell&lt;/a&gt;, and even the &lt;a href="https://cda.ms/2dk"&gt;Azure Portal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=3xLLFuWhmdQ"&gt;The Bicep 0.4 community call from June 2, 2021:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3xLLFuWhmdQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Learn about Azure fundamentals with me!&lt;/p&gt;

&lt;p&gt;Live stream is normally found on Twitch, YouTube, and LearnTV at 11 AM PT / 2 PM ET Thursday. You can also find the recordings here as well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitch.tv/azurefunbytes"&gt;AzureFunBytes on Twitch&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aka.ms/jaygordononyoutube"&gt;AzureFunBytes on YouTube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UC-ikyViYMM69joIAv7dlMsA"&gt;Azure DevOps YouTube Channel&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/azurefunbytes"&gt;Follow AzureFunBytes on Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Useful Docs:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://cda.ms/219"&gt;Get $200 in free Azure Credit&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/243"&gt;Microsoft Learn: Introduction to Azure fundamentals&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2dc"&gt;Microsoft Learn: Deploy and manage resources in Azure by using Bicep&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2db"&gt;Bicep Documentation&lt;/a&gt; &lt;br&gt;
&lt;a href="https://cda.ms/2df"&gt;Quickstart: Create Bicep files with Visual Studio Code&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bicepdemo.z22.web.core.windows.net/"&gt;Bicep Playground&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2dt"&gt;ARM template documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/28F"&gt;Tutorial: Create and deploy first Azure Resource Manager Bicep file&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/BicepLang"&gt;Bicep on Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2d9"&gt;Install the Azure CLI&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2dd"&gt;Best practices for Bicep&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2dg"&gt;What is Infrastructure as Code?&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cda.ms/2dm"&gt;About Domain-Specific Languages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sc1kJfcRQgY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>iac</category>
      <category>azure</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Mood Selector Component</title>
      <author>Mads Stoumann</author>
      <pubDate>Wed, 07 Jul 2021 14:33:38 +0000</pubDate>
      <link>https://dev.to/madsstoumann/mood-selector-jhi</link>
      <guid>https://dev.to/madsstoumann/mood-selector-jhi</guid>
      <description>&lt;p&gt;Throughout this week, the “Star (rating) Wars” have run here on dev.to.&lt;/p&gt;

&lt;p&gt;With proposals by &lt;a class="mentioned-user" href="https://dev.to/inhuofficial"&gt;@inhuofficial&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/lapstjup"&gt;@lapstjup&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/link2twenty"&gt;@link2twenty&lt;/a&gt;
 , &lt;a class="mentioned-user" href="https://dev.to/afif"&gt;@afif&lt;/a&gt;
, &lt;a class="mentioned-user" href="https://dev.to/siddharthshyniben"&gt;@siddharthshyniben&lt;/a&gt;
 and possisble others – dev.to has been plastered in “Star Rating” components!&lt;/p&gt;

&lt;p&gt;My proposal was &lt;a href="https://dev.to/madsstoumann/star-rating-using-a-single-input-i0l"&gt;a single input solution&lt;/a&gt;, allowing for any number of stars, also half- and quarter-stars – without adding extra markup.&lt;/p&gt;

&lt;p&gt;All the other solutions use groups of &lt;code&gt;&amp;lt;input type="radio"&amp;gt;&lt;/code&gt;-tags, so I decided to do a component with just that, but not with &lt;strong&gt;stars&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Instead, pick your mood after these dramatic days – no JavaScript required:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/QWvNrwq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading 😁&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Typing React Props in TypeScript</title>
      <author>Benny Neugebauer</author>
      <pubDate>Wed, 07 Jul 2021 14:31:44 +0000</pubDate>
      <link>https://dev.to/typescripttv/typing-react-props-in-typescript-5hal</link>
      <guid>https://dev.to/typescripttv/typing-react-props-in-typescript-5hal</guid>
      <description>&lt;p&gt;One advantage of using React with TypeScript is that you can easily type the props of your (function) components. You don't have to use React's &lt;a href="//ttps://reactjs.org/docs/typechecking-with-proptypes.html"&gt;PropTypes&lt;/a&gt; because TypeScript already has its own typing system.&lt;/p&gt;

&lt;p&gt;In the following, I will show you how to define custom props for a component in connection with already existing props like &lt;code&gt;children&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-example"&gt;
  &lt;/a&gt;
  Starting Example
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;PostPreview.tsx&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, our &lt;code&gt;PostPreview&lt;/code&gt; component has a &lt;code&gt;title&lt;/code&gt; property. The component is supposed to render the &lt;code&gt;title&lt;/code&gt; and other components (&lt;code&gt;children&lt;/code&gt;) below the title. In technical terms this is called &lt;a href="https://reactjs.org/docs/composition-vs-inheritance.html#containment"&gt;Containment&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because our &lt;code&gt;Props&lt;/code&gt; interface only defines the title, the following error shows up:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TS2339: Property 'children' does not exist on type 'Props'.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let me show you three different ways to solve this problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-1-raw-propswithchildren-endraw-"&gt;
  &lt;/a&gt;
  Solution 1: &lt;code&gt;PropsWithChildren&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The easiest way to solve the problem is to use the generic type &lt;code&gt;PropsWithChildren&lt;/code&gt;. It supports a &lt;a href="https://www.typescriptlang.org/docs/handbook/2/generics.html#working-with-generic-type-variables"&gt;generic type variable&lt;/a&gt;, so that we can use our &lt;code&gt;Props&lt;/code&gt; with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;PropsWithChildren&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PropsWithChildren&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The solution is simple, but it doesn't describe our component very well. The compiler knows that our component can have children, but it doesn't know whether our component has other tag-specific properties. We also have to remind ourselves to import React. So let's take a look at a more advanced solution.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-2-raw-reactfc-endraw-"&gt;
  &lt;/a&gt;
  Solution 2: &lt;code&gt;React.FC&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;React.FC&lt;/code&gt; specifies a &lt;a href="https://reactjs.org/docs/components-and-props.html#function-and-class-components"&gt;function component&lt;/a&gt; and lets us also assign a type variable. It uses &lt;code&gt;PropsWithChildren&lt;/code&gt; behind the scenes, so we don't have to worry about connecting our &lt;code&gt;Props&lt;/code&gt; with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thanks to the use of &lt;code&gt;React.FC&lt;/code&gt;, the TypeScript compiler now knows that our &lt;code&gt;PostPreview&lt;/code&gt; constant is a React component. We no longer have to think about importing React ourselves, as the compiler already prompts us to do so. However, the compiler still does not know how our component looks like in detail. It cannot tell whether it is a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element or a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element or something else. Hence we come to solution number three.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution-3-raw-reacthtmlprops-endraw-"&gt;
  &lt;/a&gt;
  Solution 3: &lt;code&gt;React.HTMLProps&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The most specialized version is to extend &lt;code&gt;React.HTMLProps&lt;/code&gt;. The &lt;code&gt;HTMLProps&lt;/code&gt; support a variety of tags (&lt;code&gt;HTMLDivElement&lt;/code&gt;, &lt;code&gt;HTMLFormElement&lt;/code&gt;, &lt;code&gt;HTMLInputElement&lt;/code&gt;, etc.). Make sure that the type variable matches the outmost tag (the first tag, that is mentioned after &lt;code&gt;return&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;HTMLProps&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this variant our component inherits all properties of a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element and extends them with custom props like &lt;code&gt;title&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;PostPreview&lt;/code&gt; component can now be used as follows:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IndexPage.tsx&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PostPreview&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./PostPreview&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PostPreview&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"First Post"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;#1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PostPreview&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PostPreview&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Second Post"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;#2&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;PostPreview&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;IndexPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tested with: React v17.0.2&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-more"&gt;
  &lt;/a&gt;
  Want more? 🍨
&lt;/h2&gt;

&lt;p&gt;Please subscribe to &lt;a href="https://www.youtube.com/c/typescripttv"&gt;TypeScript TV&lt;/a&gt; on YouTube if you liked this post. &lt;/p&gt;

&lt;p&gt;In addition you can follow me on &lt;strong&gt;DEV&lt;/strong&gt; to learn about best practices with TypeScript &amp;amp; JavaScript.&lt;/p&gt;

</description>
      <category>react</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Announcing Appwrite 0.9: The open source Firebase alternative </title>
      <author>Christy Jacob</author>
      <pubDate>Wed, 07 Jul 2021 14:27:41 +0000</pubDate>
      <link>https://dev.to/appwrite/announcing-appwrite-0-9-the-open-source-firebase-alternative-53ho</link>
      <guid>https://dev.to/appwrite/announcing-appwrite-0-9-the-open-source-firebase-alternative-53ho</guid>
      <description>&lt;p&gt;The last month was a crazy one. We've put together over &lt;strong&gt;250 commits&lt;/strong&gt;, &lt;strong&gt;20k lines of code&lt;/strong&gt; and countless hours to bring you the best Appwrite version ever! With that, we're incredibly excited to announce the release of &lt;strong&gt;Appwrite 0.9&lt;/strong&gt;, packed with a ton of cool new features like &lt;strong&gt;Android support&lt;/strong&gt;, &lt;strong&gt;Kotlin Server SDK&lt;/strong&gt;, &lt;strong&gt;Flutter Desktop Support&lt;/strong&gt;, and much more! Without spending any more time, let's dive in! 🤿&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Appwrite is an open-source, self-hosted Backend-as-a-Service that aims to make app development &lt;strong&gt;easier&lt;/strong&gt; with SDKs available in a variety of programming languages. Come hang out with us on &lt;a href="https://appwrite.io/discord"&gt;Discord&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#android-support"&gt;
  &lt;/a&gt;
  🤖 Android Support
&lt;/h2&gt;

&lt;p&gt;It's finally here 📌 Appwrite now has official support for Android! &lt;a href="https://github.com/appwrite/sdk-for-android"&gt;Our SDK&lt;/a&gt; has been out in the wild for over 2 weeks now - we've gathered some amazing feedback from the community, and we're now ready to present it to all of you! We've got all the setup instructions in our new &lt;a href="https://appwrite.io/docs/getting-started-for-android?"&gt;Getting Started Guide&lt;/a&gt;, but here's what you'll need to do, in a nutshell 🥜. &lt;/p&gt;

&lt;p&gt;Include the &lt;strong&gt;mavenCentral()&lt;/strong&gt; repository in your project's &lt;strong&gt;build.gradle(.kts)&lt;/strong&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="n"&gt;repositories&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;      
    &lt;span class="n"&gt;mavenCentral&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add the Android SDK in your app's &lt;strong&gt;build.gradle(.kts)&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"io.appwrite:sdk-for-android:0.0.1"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🤩 Then make your first request using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.appcompat.app.AppCompatActivity&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.os.Bundle&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.GlobalScope&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.coroutines.launch&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.Client&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.services.Account&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activity_main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;applicationContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://[HOSTNAME_OR_IP]/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your API Endpoint&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"5df5acd0d48c2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Your project ID&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;account&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nc"&gt;GlobalScope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;      
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have some example apps to help you get started&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A bare minimum &lt;a href="https://github.com/appwrite/playground-for-android"&gt;Playground App&lt;/a&gt; to help you quickly start building apps.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/appwrite/demo-getstarted-with-android"&gt;Getting Started App&lt;/a&gt; that has interactions with all of Appwrite's endpoints.&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://github.com/appwrite/demo-quiz-with-android"&gt;Simple Quiz App&lt;/a&gt; built with Appwrite.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#kotlin-server-sdk"&gt;
  &lt;/a&gt;
  🦾 Kotlin Server SDK
&lt;/h2&gt;

&lt;p&gt;We also released a brand new &lt;a href="https://github.com/appwrite/sdk-for-kotlin"&gt;Kotlin Server SDK&lt;/a&gt; to go along with the Android one! Setting up the Kotlin SDK is a similar drill. You can check out our &lt;a href="https://appwrite.io/docs/getting-started-for-server"&gt;Getting Started Guide&lt;/a&gt; or follow along for a quick summary.&lt;/p&gt;

&lt;p&gt;Add the dependency to your &lt;strong&gt;pom.xml&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.appwrite&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;sdk-for-kotlin&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or your &lt;strong&gt;build.gradle(.kts)&lt;/strong&gt; file if using &lt;strong&gt;Gradle&lt;/strong&gt; as your build system.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"io.appwrite:sdk-for-kotlin:0.0.1"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;🚀 Then make your first request using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.Client&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;io.appwrite.services.Users&lt;/span&gt;

&lt;span class="k"&gt;suspend&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;client&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setEndpoint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://[HOSTNAME_OR_IP]/v1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setProject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"5df5acd0d48c2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"919c2d18fb5d4...a2ae413da83346ad2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Users&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;response&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"email@example.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also have some example apps to help you get started&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A bare minimum &lt;a href="https://github.com/appwrite/playground-for-kotlin"&gt;Playground App&lt;/a&gt; to help you quickly start building apps.&lt;/li&gt;
&lt;li&gt;We also have some really cool &lt;a href="https://github.com/appwrite/demos-for-functions"&gt;Cloud Function demos&lt;/a&gt; using our Kotlin SDK. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#flutter-desktop-support"&gt;
  &lt;/a&gt;
  🖥️ Flutter Desktop Support
&lt;/h2&gt;

&lt;p&gt;With Appwrite 0.9, we've enabled platform wide support for your Flutter Desktop Apps! You can now register your Linux, Windows and Mac apps from the Dashboard! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N128OSV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cy3kn6js39mr4ebt59f0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N128OSV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cy3kn6js39mr4ebt59f0.png" alt="Flutter Desktop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-cloud-function-runtimes"&gt;
  &lt;/a&gt;
  🏃 New Cloud Function Runtimes
&lt;/h2&gt;

&lt;p&gt;Our Cloud Function runtimes list continues to grow with over 20+ (!) runtimes. This time we've added support for &lt;strong&gt;deno-1.10&lt;/strong&gt;, &lt;strong&gt;deno-1.11&lt;/strong&gt;, &lt;strong&gt;dart 2.13&lt;/strong&gt;, &lt;strong&gt;node-16.0&lt;/strong&gt; , &lt;strong&gt;java-11.0&lt;/strong&gt; and &lt;strong&gt;java-16.0&lt;/strong&gt;. We've got you covered 💪 no matter what your favourite language is! If you're looking for some creative ways to get started with Cloud Functions, feel free to check out &lt;a href="https://github.com/appwrite/demos-for-functions"&gt;our demos&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-changes"&gt;
  &lt;/a&gt;
  ⚒️ Breaking Changes
&lt;/h2&gt;

&lt;p&gt;Breaking changes are hard, but unfortunately, they're a necessary evil! We've kept those nasty breaking changes to a bare minimum with this release and only made changes to our Server SDKs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;env&lt;/code&gt; has been renamed to &lt;code&gt;runtime&lt;/code&gt; in the &lt;code&gt;POST v1/functions&lt;/code&gt; endpoint. If you're using named parameters in your server SDKs, you will need to update them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;deleteUser&lt;/code&gt; has been replaced in favour of the &lt;code&gt;delete&lt;/code&gt; method in all our Server SDKs. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#everything-else"&gt;
  &lt;/a&gt;
  🚀 Everything else
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Our Image Preview 📸 endpoint now let's you specify a gravity giving you much more control when cropping your images!  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;One of our community members &lt;a href="https://github.com/Meldiron"&gt;&lt;strong&gt;@Meldiron&lt;/strong&gt;&lt;/a&gt;, helped speed up our Cloud Function executions by upto a &lt;a href="(https://github.com/appwrite/appwrite/pull/1308)"&gt;&lt;strong&gt;whopping 4s 🤯&lt;/strong&gt;&lt;/a&gt; in some cases. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We revamped our &lt;strong&gt;User Sessions UI&lt;/strong&gt; in the Dashboard to give you more fine grained information about a user's session.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xRqo9FaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wrsalkufc911a78pgjm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xRqo9FaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wrsalkufc911a78pgjm.png" alt="sessions"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We've added some additional metadata in our &lt;strong&gt;File Preview Dialog&lt;/strong&gt; to make it easier to view your file types, file size and the creation date.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iFOShZOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guwnzctwy968b7hjjauc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iFOShZOU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/guwnzctwy968b7hjjauc.png" alt="meta-data"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Internally, we've optimized our database connection pools for overall improved server performance 🤩&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Gone are the days of running multiple migration scripts to upgrade to the latest version of Appwrite! From Appwrite 0.9, it's just a single script! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Based on popular demand, we've added a &lt;a href=""&gt;new endpoint&lt;/a&gt; to delete a session by ID and another endpoint to force update the user verification status from Server Side SDKs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Last but not the least, we've &lt;a href="https://github.com/appwrite/appwrite/pull/1225"&gt;overhauled our Email Templates&lt;/a&gt; in an attempt to offer lot more customization in the future! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's not forget, you also helped us reach a major milestone of &lt;strong&gt;10k Github stars&lt;/strong&gt; ⭐️ making us one of the &lt;strong&gt;top 2000&lt;/strong&gt; projects in Github history! We also crossed a landmark &lt;strong&gt;2.2M Docker pulls&lt;/strong&gt; and &lt;strong&gt;over 40k reads&lt;/strong&gt; on our blog posts! Thank you so much for all your support!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXZpQzqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coo9vs3uxisxd2oubjhd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXZpQzqQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/coo9vs3uxisxd2oubjhd.png" alt="star"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#and-more"&gt;
  &lt;/a&gt;
  😍 And More!
&lt;/h2&gt;

&lt;p&gt;We still haven't covered everything! There's lots more bug fixes and other micro optimizations we made under the hood to make your experience with Appwrite better! To get all the details on Appwrite 0.9, check out all the changes in the &lt;a href="https://github.com/appwrite/appwrite/blob/master/CHANGES.md"&gt;changelog on GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Are you curious about the big ideas we have up next, or have a great idea for Appwrite's future? Check out the &lt;a href="https://github.com/appwrite/rfc"&gt;RFC Repository&lt;/a&gt; for more details. Also, our &lt;a href="https://github.com/appwrite/awesome-appwrite"&gt;awesome-appwrite repository&lt;/a&gt; keeps growing with new tutorials, videos, and demos.&lt;/p&gt;

&lt;p&gt;If you've just discovered Appwrite and would like to get started, check out out our &lt;a href="https://30days.appwrite.io/"&gt;30 Days of Appwrite&lt;/a&gt; series where we explain step-by-step everything you need to know to build awesome Appwrite-powered apps. Follow us on &lt;a href="https://twitter.com/appwrite_io"&gt;Twitter&lt;/a&gt;, &lt;a href="https://dev.to/appwrite"&gt;Dev.to&lt;/a&gt;, or anywhere you find your friendly neighbourhood Appwrite. &lt;/p&gt;

</description>
      <category>flutter</category>
      <category>android</category>
      <category>kotlin</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
