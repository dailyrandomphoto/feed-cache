<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>EA’s Deprecated GAMES LIST</title>
      <author>Allen Joseph</author>
      <pubDate>Thu, 03 Jun 2021 11:42:55 +0000</pubDate>
      <link>https://dev.to/allenaj/ea-s-deprecated-games-list-3mmb</link>
      <guid>https://dev.to/allenaj/ea-s-deprecated-games-list-3mmb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vXVY8VtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq43i7qikdhco9xk1g4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vXVY8VtI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq43i7qikdhco9xk1g4g.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Electronic Arts Inc. is an American video game company headquartered in Redwood City, California. It is the second-largest gaming company in the Americas and Europe by revenue and market capitalization after Activision Blizzard and ahead of Take-Two Interactive and Ubisoft as of March 2018.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#eas-deprecated-games-list"&gt;
  &lt;/a&gt;
  EA’s Deprecated GAMES LIST
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XrRrPtfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8paz297fnkrg0kr7w6r2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XrRrPtfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8paz297fnkrg0kr7w6r2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Sims Social- was a Facebook addition to the Sims series of video games. It was announced during the Electronic Entertainment Expo 2011 press conference. As with the original Sims games, The Sims Social lets the user create their own customizable character. In this version, however, the player uses their character to interact with those of their Facebook friends. The characters can develop likes or dislikes for other Sims, creating relationships that can be publicized on the user’s Facebook page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pzXTJWep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n61y81owpftllditos3p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pzXTJWep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n61y81owpftllditos3p.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wild Ones- Most of you have probably heard of Facebook,Myspaceand Google+ Well you might have also heard that Facebook and Myspace have multiplayer games. Wild ones was one of them. Wild Ones was a multiplayer turn based shooting game which was based on ‘Worms’. You will start the game with a dog and as you continue throughout the game you have the option to get a rabbit, panda, monkey, cat, armadillo, chameleon, bat, hamster and many other Pets. There were also the 10 maps to play on and a bunch of weapons to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--okXQi57i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l64f5hf1mqyv3a4n81jg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--okXQi57i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l64f5hf1mqyv3a4n81jg.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Pet Society- was a social-network game developed by Playfish that could be played on Facebook. The game ranked as one of the most popular Facebook applications. Players could design their pets by choosing genders, names, colors and altering appearances.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-much-did-these-game-make"&gt;
  &lt;/a&gt;
  How much did these game make?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VcRlZstp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otudv5p3bv8x03wjoi7j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VcRlZstp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/otudv5p3bv8x03wjoi7j.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pet Society- The game was launched August 8, 2008 by Playfish and at its “peak had 50 million monthly players, 5 million daily players and made as much as $100,000 a day by selling in-game items.&lt;br&gt;
The Sims Social-”peak had 64 million monthly players, 6.4 million daily players and made as much as $190,000 a day by selling in-game items..&lt;br&gt;
The Sims Social-”peak had 30 million monthly players, 3 million daily players and made as much as $80,000 a day by selling in-game items..&lt;/p&gt;

&lt;p&gt;THAT IS &lt;strong&gt;$370,000(2,62,81,359.00 Indian Rupee)&lt;/strong&gt; a day!!!!!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ea-shuts-down-older-facebook-games"&gt;
  &lt;/a&gt;
  EA shuts down “older” Facebook games
&lt;/h1&gt;

&lt;p&gt;EA has announced its intention to shut down Facebook games The Sims Social, SimCity Social and Pet Society.&lt;/p&gt;

&lt;p&gt;EA said it took the “difficult decision” to “retire” what it described as its “older” Facebook games after witnessing the number of players and amount of activity for each title decrease. “For people who have seen other recent shutdowns of social games, perhaps this is not surprising,” EA said in a statement.&lt;/p&gt;

&lt;p&gt;These games, all made by the EA-owned social developer PlayFish, will go offline on 14th June. In the case of SimCity Social, it won’t make it to a year online — that game launched on 25th June 2012. The Sims Social released on 9th August 2011. Pet Society launched on 8th August 2008.&lt;/p&gt;

&lt;p&gt;EA offered more detailed statements on each title — they’re all the same, but with the name of the game in question swapped in.&lt;br&gt;
On The Sims Social, it said: “We had to make the difficult decision to close down The Sims Social so we can reallocate development resources to other titles that we hope you’ll have just as much fun playing. We hope you have gotten many hours of enjoyment out of the games and we thank you for everything you’ve added to the community.”&lt;/p&gt;

&lt;p&gt;The Sims Social hit the headlines last year when EA accused The Ville, run by bitter social game rival Zynga, of ripping it off. The two companies eventually settled the dispute out of court.&lt;/p&gt;

&lt;p&gt;Players of these games have reacted to the news in anger. Naomi Szwed, from Australia, wrote on Facebook of SimCity Social’s closure: “I only play ONE game on Facebook. and this is it! It is the ONLY GAME I PLAY. You really know how to make customers happy. I will boycott anything EA if you remove this. Sorry.”&lt;/p&gt;

&lt;p&gt;Reacting to the closure of The Sims Social, “patty.switzer.1” wrote on the Playfish forum: “As of now I will not be playing Sims anymore. I would like to be reimbursed for the remaining 92 Sims Cash. My reasons for leaving now is I will not put anymore money, time or effort into playing a game that is ending.”&lt;/p&gt;

&lt;p&gt;EA said it will continue to deliver popular titles for Facebook, and pointed to PopCap games Bejeweled Blitz, Solitaire Blitz and Plants vs. Zombies Adventures.&lt;/p&gt;

&lt;p&gt;It vowed to make a special offer to introduce those who have played the games being taken offline to PopCap games. “You’re a valued fan and we want to make sure you get a smooth transition to PopCap,” EA said.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How I reverse engineered a $10M facebook canvas game</title>
      <author>Allen Joseph</author>
      <pubDate>Thu, 03 Jun 2021 11:36:23 +0000</pubDate>
      <link>https://dev.to/allenaj/how-i-reverse-engineered-a-10m-facebook-canvas-game-eek</link>
      <guid>https://dev.to/allenaj/how-i-reverse-engineered-a-10m-facebook-canvas-game-eek</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PZCpalAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mjejy4m4csden82matr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PZCpalAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2mjejy4m4csden82matr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might be wondering that I would have used a huge setup like the one given above to reverse engineer Facebooks best canvas game of 2013.&lt;br&gt;
Well, no!.&lt;br&gt;
My setup was more of like……&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Goczksq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5300zhjyd8giqm0nlel2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Goczksq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5300zhjyd8giqm0nlel2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-i-did-that"&gt;
  &lt;/a&gt;
  Why I did that:
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;I was a 15-year-old boy who was playing around with Adobe’s Flash software and well to be really honest I was bored.&lt;br&gt;
Reverse Engineering the game allowed me to improve my understanding of client side connections and server-side connections.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#about-the-game"&gt;
  &lt;/a&gt;
  About the game:
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zVF9QdmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wi1pfskhlgvjtbg8mbad.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zVF9QdmX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wi1pfskhlgvjtbg8mbad.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stick Run is a free jump’n’run game that has been playable on the social network Facebook since August 2010 . The game was developed and published by the then 14-year-old German Marc-Emanuel Otto . [2] It reaches a total of 43 million users. [3] Furthermore, it has been available free of charge for the Android operating system since 2013. [4]Marc-Emanuel Otto was even noticed in the American press among the game developers there. The game regularly ranked among the top 10 games on facebook in various areas. As a result, TigMar GmbH was founded, which made it possible in 2013 for Nekki [5] to participate in Stick Run by porting the game software embedded in Facebook to Android and Apple smartphones in cooperation.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#i-have-to-be-honest-that-it-was-a-lot-of-fun-"&gt;
  &lt;/a&gt;
  I have to be honest that it was a lot of fun :)
&lt;/h6&gt;

&lt;h1&gt;
  &lt;a href="#finding-the-right-track"&gt;
  &lt;/a&gt;
  Finding the right track:
&lt;/h1&gt;

&lt;p&gt;To reverse engineer any game the first thing we need to look for was the file but in the case of a flash game, what I needed was it’s source .swf file which would be embedded in any website with the flash plugin.&lt;br&gt;
Finding the .swf file would be a piece of cake considering Google chromes element inspector with a lil bit of HTML knowledge.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bFKegYaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pud8f6vpqjkdy51ne92i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bFKegYaM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pud8f6vpqjkdy51ne92i.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step was to decompile the swf file but for that we need an external software. I used Sothink Swf Decompiler( my personal fav!) to decompile and view the entire code of the game.&lt;/p&gt;

&lt;p&gt;In the below link you can find the code dumped.&lt;br&gt;
&lt;a href="https://pastr.io/view/1nrSZuI0Oci"&gt;https://pastr.io/view/1nrSZuI0Oci&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After analysing the code I reached onto line 3349 with a public function ‘connectOAuth’.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oset3zU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2ifxxzyyxwzeeryh0mf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oset3zU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2ifxxzyyxwzeeryh0mf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above code, I came to realise that Stick Run stores its data onto a BIGDB database online known as “Player.IO” and every database over there has a private key &lt;strong&gt;(stick-run-mdvkubomx0eisctikvcha)&lt;/strong&gt; to connect with it but…. there’s an obvious flaw with this system.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#what-if"&gt;
  &lt;/a&gt;
  What if……
&lt;/h6&gt;

&lt;p&gt;What if someone like me would connect to the database through my custom made flash file and send requests to the server?. There’s no real way to prevent this except to put all the main digital asset code in the server-side code.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#looking-into-the-data"&gt;
  &lt;/a&gt;
  Looking into the data:
&lt;/h1&gt;

&lt;p&gt;After managing to get the private key from the above code, the first thing I did was importing the private key and making another flash file with some very quick and dirty API requests to the server to cross-check for any verification.&lt;/p&gt;

&lt;p&gt;I made some item requests and some coins hack from the swf file. I hacked the coins to somewhere around 999999999 but they had an build-in ban system hence somehow they managed to ban me. xD.&lt;br&gt;
But guess what?. I managed to unban myself with the same API requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zbNnUCKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv4xt5dihwqqtopz6tq2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zbNnUCKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gv4xt5dihwqqtopz6tq2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions:
&lt;/h1&gt;

&lt;p&gt;Yes, even the top notch games can be hacked. Security is obviously a myth.&lt;br&gt;
Maybe if the developer is’nt lazy, he could try to fit the client-side code’s important asset handling in the server-side itself. :]&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading!
&lt;/h1&gt;

</description>
    </item>
    <item>
      <title>Angular 12 in Depth</title>
      <author>Sébastien D.</author>
      <pubDate>Thu, 03 Jun 2021 11:32:35 +0000</pubDate>
      <link>https://dev.to/angular/angular-12-in-depth-1j6m</link>
      <guid>https://dev.to/angular/angular-12-in-depth-1j6m</guid>
      <description>&lt;p&gt;In this article, I’ll go over (almost) everything noteworthy in this brand new release. I’ll also highlight what’s changed around Angular, just like I did with my previous articles about &lt;a href="https://medium.com/swlh/angular-11-in-depth-9a7372b4a600"&gt;Angular 11&lt;/a&gt; and &lt;a href="https://javascript.plainenglish.io/angular-10-in-depth-a48a3a7dd1a7"&gt;Angular 10&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you're just looking for the bird-eye view, then check out the &lt;a href="https://blog.angular.io/angular-v12-is-now-available-32ed51fbfd49"&gt;official release announcement&lt;/a&gt;. Here, I'll dig much deeper into the release notes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-the-ivy-league"&gt;
  &lt;/a&gt;
  Join the Ivy league...
&lt;/h2&gt;

&lt;p&gt;The Angular team has been working on &lt;a href="https://angular.io/guide/ivy"&gt;Ivy&lt;/a&gt; (the new compilation &amp;amp; rendering pipeline) since 2018. It was finally released with Angular 8. Since Angular 9, Ivy has been the default for new projects, and the ecosystem is slowly migrating to it. With Angular 12, &lt;em&gt;the old View Engine is now officially deprecated&lt;/em&gt;. It will be removed in a future major release. Also, it won't be possible to create new applications using View Engine. Finally, Ivy is now the default for new library projects.&lt;/p&gt;

&lt;p&gt;At this point, library authors can still rely on View Engine thanks to &lt;code&gt;ngcc&lt;/code&gt; (the compatibility compiler of Angular), but it's really time for them to evaluate whether they can migrate their libraries to Ivy or not. A few weeks ago, Minko Gechev has published &lt;a href="https://blog.angular.io/upcoming-improvements-to-angular-library-distribution-76c02f782aa4"&gt;an article&lt;/a&gt; to explain that in detail. Also, check out the related &lt;a href="https://github.com/angular/angular/issues/38366"&gt;RFC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In case you didn't know, &lt;code&gt;ngcc&lt;/code&gt; is the small process that runs after you create an Angular project or install dependencies. When you see messages like &lt;code&gt;Compiling ... : es2015 as esm2015&lt;/code&gt;, it's &lt;code&gt;ngcc&lt;/code&gt; doing its job. What &lt;code&gt;ngcc&lt;/code&gt;does is compile libraries that rely on View Engine so that Ivy can consume those.&lt;/p&gt;

&lt;p&gt;Like me, you've probably noticed that &lt;code&gt;ngcc&lt;/code&gt; takes a lot of time to execute, and has a very negative impact on developer experience. This is why it is crucial for the Angular ecosystem to migrate to Ivy as soon as possible. Second, until a majority of the ecosystem has moved on, the Angular team will have to keep View Engine around, which is problematic for a number of reasons. Last but not least, libraries that rely on View Engine can't depend on Ivy ones.&lt;/p&gt;

&lt;p&gt;Library authors probably can't migrate to Ivy too fast, but they should clearly push reluctant users to upgrade. Anyways, the path forward is to migrate all the things to Ivy asap ;-)&lt;/p&gt;

&lt;p&gt;As a side note, if you're not familiar with the internals of Angular, then check out the following videos.&lt;/p&gt;

&lt;p&gt;How Angular works by Kara Erickson:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/S0o-4yc2n-8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Deep Dive into the Angular Compiler by Alex Rickabaugh:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/anphffaCZrQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;There's also an excellent article about Ivy &lt;a href="https://medium.com/angular-in-depth/all-you-need-to-know-about-ivy-the-new-angular-engine-9cde471f42cf"&gt;over there&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bye-protractor"&gt;
  &lt;/a&gt;
  Bye Protractor
&lt;/h2&gt;

&lt;p&gt;In April, the Angular team has announced plans to end the support of &lt;a href="https://www.protractortest.org/"&gt;Protractor&lt;/a&gt; at the end of 2022.&lt;/p&gt;

&lt;p&gt;As of Angular 12, Protractor won't be included by default in new projects. Instead, the Angular CLI will provide options to use other solutions like &lt;a href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt;, &lt;a href="https://webdriver.io/"&gt;WebdriverIO&lt;/a&gt;, or &lt;a href="https://testcafe.io/"&gt;TestCafe&lt;/a&gt;. This means that the &lt;code&gt;ng e2e&lt;/code&gt; command should continue to be supported in the future.&lt;/p&gt;

&lt;p&gt;As explained in &lt;a href="https://github.com/angular/protractor/issues/5502"&gt;the announcement&lt;/a&gt;, back in 2013 when Protractor was created, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/WebDriver"&gt;WebDriver&lt;/a&gt; was not &lt;a href="https://www.w3.org/TR/webdriver/"&gt;a standard&lt;/a&gt;, and end-to-end (e2e) tests were hard to write, and a nightmare to maintain. Protractor brought an innovative solution by wrapping &lt;a href="https://www.npmjs.com/package/selenium-webdriver"&gt;selenium-webdriver&lt;/a&gt;, and provided a way to control the execution flow.&lt;/p&gt;

&lt;p&gt;Of course, a lot of things have evolved since then. We now have the &lt;code&gt;WebDriver&lt;/code&gt; API, &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;await&lt;/code&gt; (even top-level &lt;code&gt;await&lt;/code&gt;, woah). Also, the ecosystem has also evolved. Solutions like &lt;a href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt;, &lt;a href="https://playwright.dev/"&gt;Playwright&lt;/a&gt;, &lt;a href="https://pptr.dev/"&gt;Puppeteer&lt;/a&gt; have gained a lot of (well-deserved) popularity. Tools like Cypress for example provide a much better developer experience than Protractor, leverage the modern standards, and even support cross-browser testing (among other powerful capabilities). Another benefit of the current de-facto e2e testing tools is that they're framework-agnostic, which is very valuable.&lt;/p&gt;

&lt;p&gt;Long story short, maintaining Protractor doesn't make much sense for the Angular team. Evolving Protractor now would require too much effort and induce a ton of breaking changes. You can find more details in the RFC, it's an interesting read.&lt;/p&gt;

&lt;p&gt;The timeline is important for teams/projects that have invested a lot of time and energy writing e2e tests with Protractor. The Angular team is still busy evaluating the feedback collected through the RFC, so we'll probably know more later this year.&lt;/p&gt;

&lt;p&gt;Anyways; give Cypress a try if you haven't already, you won't be disappointed! By the way, I keep recommending everyone to start using &lt;a href="https://nx.dev/"&gt;Nrwl NX&lt;/a&gt;, a wonderful solution that includes support for Angular, React, Next.js, Cypress, and a lot more ;-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nullish-coalescing"&gt;
  &lt;/a&gt;
  Nullish coalescing
&lt;/h2&gt;

&lt;p&gt;Angular 12 includes support for using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"&gt;nullish coalescing operator&lt;/a&gt; in Angular templates. And this is awesome! That operator has been supported in TypeScript &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing"&gt;since version 3.7&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you haven't heard about this operator, then let me give you a quick explanation. The idea is to be able to define a fallback value in case something is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If &lt;code&gt;foo&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, then &lt;code&gt;x&lt;/code&gt; will be set to &lt;code&gt;true&lt;/code&gt; (i.e., the fallback value), and we could set it to anything we like.&lt;/p&gt;

&lt;p&gt;Without this awesome &lt;code&gt;??&lt;/code&gt; operator, we would have to write this instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that Angular supports it too, we can finally write expressions such as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{{ age ?? calculateAge() }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of the old and more verbose alternative. NEAT!&lt;/p&gt;

&lt;p&gt;You can learn more about this change &lt;a href="https://github.com/angular/angular/issues/36528"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find more information about nullish coalescing in the &lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing"&gt;TypeScript handbook&lt;/a&gt; as well as on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator"&gt;MDN&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#typescript-42-support"&gt;
  &lt;/a&gt;
  TypeScript 4.2 support
&lt;/h2&gt;

&lt;p&gt;Angular 12 introduces support for &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-2/"&gt;TypeScript 4.2&lt;/a&gt;, which means that we can now use a &lt;em&gt;ton&lt;/em&gt; of new wonderful language features. Also, support for TypeScript 4.0 and 4.1 has been dropped.&lt;/p&gt;

&lt;p&gt;Here's a quick rundown of what TS 4.2 includes:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Smart Type Alias Preservation&lt;/em&gt;: The expected types are displayed by code editors instead of raw types as it occurred before. You can learn more about that &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-2/#smarter-type-alias-preservation"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Leading/Middle Rest elements in Tuple Types&lt;/em&gt;: We can now include rest elements anywhere within a tuple (with a few caveats). This is pretty cool for those of us who rely on tuples from time to time. Learn more about that &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-2/#non-trailing-rests"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Understanding your project structure&lt;/em&gt;: TS 4.2 includes &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-2/#explain-files"&gt;a new flag&lt;/a&gt; called &lt;code&gt;--explainFiles&lt;/code&gt;, which instructs the TypeScript to output information about why a filed was included in your program. This is very useful for troubleshooting.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Improvements for uncalled function checks&lt;/em&gt;: TypeScript can now detect more cases where functions aren't being called. For instance when writing &lt;code&gt;foo&lt;/code&gt; instead of &lt;code&gt;foo()&lt;/code&gt;. More details and examples can be found &lt;a href="https://github.com/microsoft/TypeScript/issues/40197"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Destructured variables can now be explicitly marked as unused&lt;/em&gt;: &lt;code&gt;let [_first, second] = getValues();&lt;/code&gt;, which is awesome; no more errors when &lt;code&gt;noUnusedLocals&lt;/code&gt; is enabled!&lt;/p&gt;

&lt;p&gt;There's a lot more actually, like stricter checks for the &lt;code&gt;in&lt;/code&gt; operator, and a few breaking changes that might impact you. So make sure to check out the &lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-2"&gt;release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webpack-5-support"&gt;
  &lt;/a&gt;
  Webpack 5 support
&lt;/h2&gt;

&lt;p&gt;Angular 11 brought us &lt;a href="https://medium.com/swlh/angular-11-in-depth-9a7372b4a600"&gt;experimental support for Webpack 5&lt;/a&gt;. With Angular 12, the Webpack 5 support is now production-ready. w00t!&lt;/p&gt;

&lt;p&gt;If you haven't looked at &lt;a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/"&gt;Webpack 5&lt;/a&gt;, you're going to be amazed. Webpack 5 was released back in October 2020, so it's quite stable by now. Webpack is currently at &lt;a href="https://github.com/webpack/webpack/releases/tag/v5.37.0"&gt;version 5.37&lt;/a&gt; (released a few days ago).&lt;/p&gt;

&lt;p&gt;Here's a short explanation about what changed with Webpack 5, and why I'm so glad about this 🤩&lt;/p&gt;

&lt;p&gt;First off, as you know, Webpack is the &lt;em&gt;key&lt;/em&gt; piece of the Angular CLI puzzle, and it plays a big role for bundle size, build performance, etc.&lt;/p&gt;

&lt;p&gt;Second, Webpack 5 is a major release for a reason. It includes a number of breaking changes, which explains why it took a while for Angular and a gazillion utilities/libraries in the ecosystem to upgrade.&lt;/p&gt;

&lt;p&gt;In the release notes, the Webpack team indicated that Webpack 5 focuses on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improving the build performance with &lt;em&gt;persistent&lt;/em&gt; caching&lt;/li&gt;
&lt;li&gt;Improving long-term caching with better algorithms &amp;amp; defaults&lt;/li&gt;
&lt;li&gt;Improving bundle size with better Tree Shaking and code generation&lt;/li&gt;
&lt;li&gt;Improving compatibility with the Web platform&lt;/li&gt;
&lt;li&gt;Cleaning up internal structures&lt;/li&gt;
&lt;li&gt;Introducing breaking changes (haha) now, allowing them to stay on v5 for as long as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The coolest feature of Webpack 5 is its &lt;a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#module-federation"&gt;support for Module Federation&lt;/a&gt;, which provides the foundations necessary to facilitate the &lt;a href="https://levelup.gitconnected.com/micro-frontends-step-by-step-using-react-webpack-5-and-module-federation-e4b9d840ec71"&gt;creation of micro front-ends&lt;/a&gt;. It's a bit out of scope of this article, but in a jiffy, module federation makes it possible for different builds to behave like a huge connected module graph, and allows us to import and use modules from remote builds. Check out &lt;a href="https://webpack.js.org/concepts/module-federation/"&gt;the official documentation&lt;/a&gt; to know more.&lt;/p&gt;

&lt;p&gt;If you're curious, then you should take a look at &lt;a href="https://twitter.com/ManfredSteyer"&gt;Manfred Steyer&lt;/a&gt;'s talk about that subject:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2yo5mxQZ37c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Among the major changes, Webpack 5 has dropped everything that was previously deprecated (e.g., &lt;code&gt;NoEmitOnErrorsPlugin&lt;/code&gt;, &lt;code&gt;ModuleConcatenationPlugin&lt;/code&gt;, &lt;code&gt;NamedModulesPlugin&lt;/code&gt;), as well as &lt;code&gt;IgnorePlugin&lt;/code&gt; and &lt;code&gt;BannerPlugin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, the Node.js polyfills that were previously automatically injected have been removed; and that is one of the biggest changes in that release. Those polyfills initially allowed Webpack to let us use modules made for Node.js in the browser. That was cool, but it had a major downside: larger bundles. In addition, those polyfills were less and less useful, as there were either browser-compatible alternatives of libraries or specific distributions with Browser support. As of Webpack 5, since those polyfills won't be added automagically anymore, we might stumble upon some surprises. For instance in cases where we use modules made for Node.js in the browser without realizing that it previously worked thanks to Webpack. You can learn more about that &lt;a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#automatic-nodejs-polyfills-removed"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Webpack 5 has introduced better support for long-term caching. In production mode, it now includes new algorithms by default:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chunkIds: "deterministic"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;moduleIds: "deterministic"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mangleExports: "deterministic"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the value indicates, those algorithms assign deterministic IDs to chunks and modules, and deterministic names to exports.&lt;/p&gt;

&lt;p&gt;Webpack 5 is able to perform nested tree shaking, by tracking access to nested properties of exports (welcome to the Matrix), which should further improve tree shaking. Also, it can now &lt;a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#inner-module-tree-shaking"&gt;analyze dependencies between the exports and imports of a module&lt;/a&gt;. There are also improvements to &lt;a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#commonjs-tree-shaking"&gt;CommonJS tree shaking&lt;/a&gt;. And there are a ton &lt;a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#major-changes-optimization"&gt;more optimizations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Webpack 5 also includes a number of changes to improve the developer experience. For example, there's a &lt;a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#named-chunk-ids"&gt;new named chunk id algorithm&lt;/a&gt; that is enabled by default in development mode. That new algorithm gives human-readable names to chunks. The &lt;code&gt;target&lt;/code&gt; property has also been vastly &lt;a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#improved-target-option"&gt;improved&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To be honest, I don't have enough space here to cover everything new with Webpack 5, &lt;a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#json-modules"&gt;there&lt;/a&gt;'s &lt;a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#asset-modules"&gt;just&lt;/a&gt; &lt;a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#uris"&gt;way&lt;/a&gt; &lt;a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#async-modules"&gt;too&lt;/a&gt; &lt;a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#resolving"&gt;much&lt;/a&gt;. So I'll stop here ;-)&lt;/p&gt;

&lt;p&gt;If you only use Webpack indirectly through the Angular CLI, then most of this should be "transparent" for you. But if you're using a &lt;a href="https://javascript.plainenglish.io/customizing-your-angular-apps-webpack-configuration-4099144949fc"&gt;custom Webpack build&lt;/a&gt; in your project, then you should probably take a look at the &lt;a href="https://webpack.js.org/migrate/5"&gt;migration guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, if you're curious about what's coming next with Webpack, then check out the &lt;a href="https://webpack.js.org/blog/2020-12-08-roadmap-2021/"&gt;roadmap for 2021&lt;/a&gt; and of course the &lt;a href="https://github.com/webpack/webpack/releases/"&gt;latest release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ie11-support-is-deprecated"&gt;
  &lt;/a&gt;
  IE11 support is deprecated
&lt;/h2&gt;

&lt;p&gt;As sad as it may sound (who am I kidding? 😂), Angular 12 is deprecating support for IE11. Internet Explorer is dead for most of us, but unfortunately, many organizations still use it in production. IE 11 support will thus be removed by Angular 13, which means that those organizations really need to start moving away from IE (which is a good thing anyway). No more excuses! ;-)&lt;/p&gt;

&lt;p&gt;Once the IE support is gone, Angular will be smaller, faster, and thus better for all of us. Also, once the burden of maintaining backwards compatibility with legacy browsers will be gone (IE11 is the last of those!), then Angular will be able to leverage modern APIs (e.g., &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"&gt;CSS variables&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API"&gt;Intersection Observer&lt;/a&gt;, &lt;a href="https://css-tricks.com/snippets/css/complete-guide-grid/"&gt;CSS Grid&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy"&gt;Proxies&lt;/a&gt;, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Animations_API"&gt;Web Animations&lt;/a&gt;, and &lt;a href="https://github.com/angular/angular/issues/41840"&gt;more&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I really can't wait for IE support to be gone!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strict-by-default"&gt;
  &lt;/a&gt;
  Strict by default
&lt;/h2&gt;

&lt;p&gt;YES YES YES 🤩. As of Angular 12, the &lt;a href="https://angular.io/guide/strict-mode"&gt;strict mode of Angular&lt;/a&gt; is enabled by default in the CLI. And this is awesome.&lt;/p&gt;

&lt;p&gt;As you know, I'm a huge fan of TypeScript's strict mode, but also of Angular's strict mode. If you want to know more, then check out &lt;a href="https://javascript.plainenglish.io/angular-template-type-checking-e2c99c50f999"&gt;the article I wrote last year&lt;/a&gt; and Minko Gechev's &lt;a href="https://blog.angular.io/with-best-practices-from-the-start-d64881a16de8"&gt;article explaining the change&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#production-build-by-default"&gt;
  &lt;/a&gt;
  Production build by default
&lt;/h2&gt;

&lt;p&gt;Up until now, running the &lt;code&gt;ng build&lt;/code&gt; command created a development build. As of Angular 12, &lt;code&gt;ng build&lt;/code&gt; will now default to a production build.&lt;/p&gt;

&lt;p&gt;Hopefully, it will help some teams avoid making the mistake of building &amp;amp; deploying development builds to production environments. Although, I fear that teams making that mistake will still have other issues to deal with ;-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sass-support-for-inline-styles"&gt;
  &lt;/a&gt;
  Sass support for inline styles
&lt;/h2&gt;

&lt;p&gt;Angular supports Sass since a very long time but, so far, we could only use Sass in external stylesheets. With Angular 12, it is now possible to use Sass together with inline component styles (i.e., within the &lt;code&gt;styles&lt;/code&gt; property).&lt;/p&gt;

&lt;p&gt;This needs to be enabled by setting the new &lt;code&gt;inlineStyleLanguage&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;angular.json&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-support"&gt;
  &lt;/a&gt;
  Tailwind support
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt; is now officially supported by Angular. Actually, support was introduced in the Angular CLI in v11.2.&lt;/p&gt;

&lt;p&gt;Tailwind is &lt;a href="https://javascript.plainenglish.io/why-tailwind-just-in-time-mode-is-a-game-changer-and-how-to-use-it-right-now-dubois-s%C3%A9bastien-182db2e64e26"&gt;busy taking over the world&lt;/a&gt;, especially now that it has a &lt;a href="https://javascript.plainenglish.io/why-tailwind-just-in-time-mode-is-a-game-changer-and-how-to-use-it-right-now-dubois-s%C3%A9bastien-182db2e64e26"&gt;rad JIT compiler&lt;/a&gt;, and it's wonderful to have built-in support for it in Angular.&lt;/p&gt;

&lt;p&gt;Previously, adding Tailwind to an Angular project required &lt;a href="https://javascript.plainenglish.io/adding-tailwind-support-to-a-nrwl-nx-workspace-with-angular-and-storybook-bf890ea882e"&gt;customizing the Webpack build&lt;/a&gt;. Not anymore! Now, adding Tailwind is as simple as installing the package, creating the &lt;code&gt;tailwind.config.js&lt;/code&gt; file using &lt;code&gt;npx tailwindcss init&lt;/code&gt;, and making sure to enable &lt;a href="https://javascript.plainenglish.io/why-tailwind-just-in-time-mode-is-a-game-changer-and-how-to-use-it-right-now-dubois-s%C3%A9bastien-182db2e64e26"&gt;Tailwind's JIT mode&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#http-improvements"&gt;
  &lt;/a&gt;
  Http improvements
&lt;/h2&gt;

&lt;p&gt;Angular 12 introduces a number of improvements around its HTTP support.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metadata-for-requests-and-interceptors"&gt;
  &lt;/a&gt;
  Metadata for requests and interceptors
&lt;/h3&gt;

&lt;p&gt;First, the &lt;code&gt;HttpClient&lt;/code&gt; can now be used to store and retrieve custom metadata for requests. This is particularly useful for HTTP interceptors. This capability can be used through the new &lt;code&gt;HttpContext&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Previously, it was complicated to provide context to interceptors, but now it will be much more straightforward. Now, the different HTTP methods provided by &lt;code&gt;HttpClient&lt;/code&gt; include a new &lt;code&gt;context: HttpContext&lt;/code&gt; option, which we can used to pass in a map.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/NetanelBasal"&gt;Netanel Basal&lt;/a&gt; has written an article about this, so &lt;a href="https://netbasal.com/new-in-angular-v12-passing-context-to-http-interceptors-308a1ca2f3dd"&gt;check it out if you want to know more&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#appendall-on-httpparams"&gt;
  &lt;/a&gt;
  appendAll on HttpParams
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;HttpParams&lt;/code&gt; class now has a new &lt;code&gt;appendAll&lt;/code&gt; method, which can be used to easily add a set of parameters at once:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;appendAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]}):&lt;/span&gt; &lt;span class="nx"&gt;HttpParams&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#params-can-now-be-passed-as-numbers-and-booleans"&gt;
  &lt;/a&gt;
  Params can now be passed as numbers and booleans
&lt;/h3&gt;

&lt;p&gt;Previously, numbers and booleans could not directly be used as HTTP parameters. We had to transform those into strings. Not anymore!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#httpstatuscode"&gt;
  &lt;/a&gt;
  HttpStatusCode
&lt;/h3&gt;

&lt;p&gt;Angular has introduced its own list of human-readable names for HTTP status codes, in the form of a const enum.&lt;/p&gt;

&lt;p&gt;Previously, we had to introduce our own solution if we wanted to have human-readable names. Thanks to this new feature, we can now instead use &lt;code&gt;HttpStatusCode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (response.status === HttpStatusCode.Ok) {
 ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For those who use TypeScript on both back-end and front-end, this isn't super useful (as we probably all have our own abstraction already), but if your project only uses TypeScript/Angular on the front-end, then it's a nice improvement.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#xhrfactory"&gt;
  &lt;/a&gt;
  XhrFactory
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;XhrFactory&lt;/code&gt; class has been moved to a different package. It is now exposed by &lt;code&gt;angular/common&lt;/code&gt; instead of &lt;code&gt;angular/common/http&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that a migration has been included in the upgrade, so you won't even notice if you run &lt;code&gt;ng update&lt;/code&gt; ;-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#router-changes"&gt;
  &lt;/a&gt;
  Router changes
&lt;/h2&gt;

&lt;p&gt;The Angular router has changed a bit in Angular 12.&lt;/p&gt;

&lt;p&gt;First, the &lt;code&gt;routerLinkActiveOptions&lt;/code&gt; directive has been enhanced. Now, it is possible to specify whether we require an exact match or not for different parts of the URL in order to add a CSS class to a link.&lt;/p&gt;

&lt;p&gt;Previously, we could only require an exact match (or not) for the whole URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
  &lt;span class="na"&gt;routerLink=&lt;/span&gt;&lt;span class="s"&gt;"/products/foo"&lt;/span&gt;
  &lt;span class="na"&gt;routerLinkActive=&lt;/span&gt;&lt;span class="s"&gt;"highlight-product"&lt;/span&gt;
  &lt;span class="na"&gt;[routerLinkActiveOptions]=&lt;/span&gt;&lt;span class="s"&gt;"{ exact: true }"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  foo
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can instead provide fine-grained matching rules for paths, query parameters, matrix parameters, and fragments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
  &lt;span class="na"&gt;routerLink=&lt;/span&gt;&lt;span class="s"&gt;"/products/foo"&lt;/span&gt;
  &lt;span class="na"&gt;routerLinkActive=&lt;/span&gt;&lt;span class="s"&gt;"highlight-product"&lt;/span&gt;
  &lt;span class="na"&gt;[routerLinkActiveOptions]=&lt;/span&gt;&lt;span class="s"&gt;"{ paths: 'exact', queryParams: 'subset', matrixParams: 'ignored', fragment: 'ignored' }"&lt;/span&gt;
&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  foo
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The supported values are &lt;code&gt;exact&lt;/code&gt;, &lt;code&gt;ignored&lt;/code&gt; and &lt;code&gt;subset&lt;/code&gt;, which can be used for &lt;code&gt;queryParams&lt;/code&gt; and &lt;code&gt;matrixParams&lt;/code&gt;. For paths, you can either pass in &lt;code&gt;exact&lt;/code&gt; or &lt;code&gt;subset&lt;/code&gt;, and &lt;code&gt;exact&lt;/code&gt; or &lt;code&gt;ignored&lt;/code&gt; for the &lt;code&gt;fragment&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that the &lt;code&gt;isActive&lt;/code&gt; method of the router also accepts these new options.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fragment-is-nullable"&gt;
  &lt;/a&gt;
  fragment is nullable
&lt;/h3&gt;

&lt;p&gt;Up until now, &lt;code&gt;ActivatedRouteSnapshot.fragment&lt;/code&gt; was not nullable. This has changed with Angular 12. Don't worry too much though; &lt;code&gt;ng update&lt;/code&gt; has got you covered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forms"&gt;
  &lt;/a&gt;
  Forms
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#more-control-over-emitted-events"&gt;
  &lt;/a&gt;
  More control over emitted events
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;emitEvent&lt;/code&gt; option has been added to various methods of &lt;code&gt;FormGroup&lt;/code&gt; and &lt;code&gt;FormArray&lt;/code&gt;. Thanks to this change, it will now be possible to control whether events need to be emitted or not in more cases.&lt;/p&gt;

&lt;p&gt;For instance, previously when a control was removed using the &lt;code&gt;removeControl&lt;/code&gt; method of &lt;code&gt;FormGroup&lt;/code&gt;, then an event was always emitted. With this change, we will now be able to avoid such problems.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;emitEvent&lt;/code&gt; option has been added to the following methods of &lt;code&gt;FormGroup&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;addControl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeControl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setControl&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And to the following methods of &lt;code&gt;FormArray&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;push&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insert&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeAt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setControl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#min-and-max-validators-support-for-templatedriven-forms"&gt;
  &lt;/a&gt;
  min and max validators support for template-driven forms
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; validators of Angular can now be used with template-driven forms:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;[(ngModel)]=&lt;/span&gt;&lt;span class="s"&gt;"foo.bar"&lt;/span&gt; &lt;span class="na"&gt;[min]=&lt;/span&gt;&lt;span class="s"&gt;"min"&lt;/span&gt; &lt;span class="na"&gt;[max]=&lt;/span&gt;&lt;span class="s"&gt;"42"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that this is a breaking change, since those would previously be ignored.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i18n"&gt;
  &lt;/a&gt;
  i18n
&lt;/h2&gt;

&lt;p&gt;The i18n system of Angular has changed with this release.&lt;/p&gt;

&lt;p&gt;As pointed out in the announcement blog post, there are currently a number of legacy message id formats being used. Those are fragile and issues can appear because of whitespace, formatting templates &amp;amp; ICU expressions.&lt;/p&gt;

&lt;p&gt;Angular 12 introduces a new canonical message id format (i.e., one format to rule them all). This format is more resilient and more intuitive.&lt;/p&gt;

&lt;p&gt;This format will reduce the unnecessary translation invalidation and associated retranslation cost in applications where translations do not match due to whitespace changes for example.&lt;/p&gt;

&lt;p&gt;Since v11, new projects are automatically configured to use the new message ids, and now there is tooling in place to migrate existing projects with existing translations. If you're concerned, then you can use the &lt;code&gt;localize-migrate&lt;/code&gt; tool to migrate your message ids:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;ng extract-i18n &lt;span class="nt"&gt;--format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;legacy-migrate
npx localize-migrate &lt;span class="nt"&gt;--files&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;.xlf &lt;span class="nt"&gt;--map-file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;messages.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find more information &lt;a href="https://angular.io/guide/migration-legacy-message-id"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#performance-improvements"&gt;
  &lt;/a&gt;
  Performance improvements
&lt;/h2&gt;

&lt;p&gt;With this release, there are a number of performance improvements. The most obvious one comes along with the upgrade to Webpack 5, but there's more:&lt;/p&gt;

&lt;p&gt;A number of unused methods have been removed from &lt;code&gt;DomAdapter&lt;/code&gt;. It's cool because its methods aren't tree shakeable, and were included in all Angular applications, as explained in the &lt;a href="https://github.com/angular/angular/pull/41102"&gt;corresponding PR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Angular now generates less code for safe property access; for example for template expressions like &lt;code&gt;a?.b&lt;/code&gt; and the newly supported null coalescing: &lt;code&gt;a ?? b&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Angular compiler now supports incremental compilation even in the presence of redirected source files. Previously, work from prior compilation could not be reused when TypeScript deduplicated source files. You can read more about that &lt;a href="https://github.com/angular/angular/issues/41475"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Angular compiler now caches the filesystem path of source files. Previously, it repeatedly called &lt;code&gt;fs.resolve()&lt;/code&gt;, which is time-consuming.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;getDirectives&lt;/code&gt; function has been improved. Along with that change, the &lt;code&gt;ng&lt;/code&gt; namespace has also been expanded to include a new &lt;code&gt;getDirectiveMetadata&lt;/code&gt; utility.&lt;/p&gt;

&lt;p&gt;And there's &lt;a href="https://github.com/angular/angular/blob/master/CHANGELOG.md#performance-improvements"&gt;some more&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ng-api-improvements"&gt;
  &lt;/a&gt;
  ng API improvements
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;ng&lt;/code&gt; &lt;a href="https://juristr.com/blog/2019/09/debugging-angular-ivy-console/"&gt;debugging API&lt;/a&gt; that we can use from the browser dev tools has been improved with Angular 12.&lt;/p&gt;

&lt;p&gt;There's a new function called &lt;code&gt;getDirectiveMetadata&lt;/code&gt;, which can be used to retrieve information about components and directives. I don't think we'll need it often, but future dev tooling improvements will most probably rely on this. You can find out more &lt;a href="https://github.com/angular/angular/pull/41525"&gt;over here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A new profiler function called &lt;code&gt;esetProfiler&lt;/code&gt; has also been implemented, and it is also available in production mode. That new function can be called in a number of scenarios. For instance, it can be used to trace template creation durations, template updates, lifecycle hooks processing, etc. Again, this API will be taken advantage of by upcoming dev tools, giving us a lot more insightful information about how our applications are performing at runtime.&lt;/p&gt;

&lt;p&gt;This is still experimental at this point, but I guess we'll hear more about this later on. I'm curious to see if/when tools like Sentry will integrate support for collecting this kind of information in order to provide us with useful performance dashboards.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-dev-tools"&gt;
  &lt;/a&gt;
  New Dev Tools
&lt;/h2&gt;

&lt;p&gt;A few days after the release of Angular 12, the Angular team has &lt;a href="https://blog.angular.io/introducing-angular-devtools-2d59ff4cf62f"&gt;announced&lt;/a&gt; the availability of brand new Angular Dev Tools for Google Chrome. You can download those &lt;a href="https://chrome.google.com/webstore/detail/angular-devtools/ienfalfjdbdpebioblfackkekamfmbnh/related?hl=en&amp;amp;authuser=0"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Using that brand new browser extension, you can easily inspect your Angular applications during development. It supports:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Visualizing the structure of the application (i.e., inspecting the component tree)&lt;/li&gt;
&lt;li&gt;Exploring and editing components&lt;/li&gt;
&lt;li&gt;Profiling performances&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using the embedded profiler, we can record change detection events, and preview those as they occur. For each change detection cycle, we can look at how long it took, which components took the longest time, whether that cycle caused frame drops.&lt;/p&gt;

&lt;p&gt;Angular previously had semi-official Dev Tools through the &lt;a href="https://augury.rangle.io/"&gt;Augury&lt;/a&gt; project (which are the basis of the new tools!), but those were not compatible with Ivy. So this is great news for the Angular community!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-more"&gt;
  &lt;/a&gt;
  And more...
&lt;/h2&gt;

&lt;p&gt;There's &lt;a href="https://github.com/angular/angular/blob/master/CHANGELOG.md#features"&gt;a ton more&lt;/a&gt; minor changes in this release. Here's a quick overview.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#appinitializer-now-supports-observables"&gt;
  &lt;/a&gt;
  APP_INITIALIZER now supports Observables
&lt;/h3&gt;

&lt;p&gt;Up until now, it wasn't possible to use Observables with &lt;code&gt;APP_INITIALIZER&lt;/code&gt;. As of Angular 12, we can now do so, which is going to allow for cleaner code!&lt;/p&gt;

&lt;p&gt;In case you didn't know about this feature of Angular yet, &lt;code&gt;APP_INITIALIZER&lt;/code&gt; is &lt;a href="https://angular.io/api/core/APP_INITIALIZER"&gt;a token&lt;/a&gt; that we can use to define functions that need to execute during application initialization. If that function is asynchronous, returning a &lt;code&gt;Promise&lt;/code&gt; or an &lt;code&gt;Observable&lt;/code&gt; (new :p), then Angular waits for it to complete before starting the application.&lt;/p&gt;

&lt;p&gt;This change is more than welcome, as it means that we can write even more code using RxJS, instead of having to "fall back" to the &lt;code&gt;Promise&lt;/code&gt; API.&lt;/p&gt;

&lt;p&gt;You can read more about that &lt;a href="https://github.com/angular/angular/issues/15088"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#runtime-control-over-animations"&gt;
  &lt;/a&gt;
  Runtime control over animations
&lt;/h3&gt;

&lt;p&gt;Previously, the only way to disable animations was to provide the &lt;code&gt;NoopAnimationsModule&lt;/code&gt;. As of Angular 12, it is now possible to disable animations based on runtime information, using &lt;code&gt;BrowserAnimationModule.withConfig&lt;/code&gt; method, and passing it the &lt;code&gt;disableAnimations&lt;/code&gt; boolean property.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-historygo-method-on-location-service"&gt;
  &lt;/a&gt;
  New historyGo method on Location service
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;LocationService&lt;/code&gt; of Angular now includes a &lt;code&gt;historyGo&lt;/code&gt; method, which can be used to navigate towards a specific page in the session history, identified by its relative position to the current page. This method corresponds to the native &lt;code&gt;window.history.go&lt;/code&gt; method. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API#moving_to_a_specific_point_in_history"&gt;Check out MDN&lt;/a&gt; for some examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#language-service-improvements"&gt;
  &lt;/a&gt;
  Language service improvements
&lt;/h3&gt;

&lt;p&gt;The language service, which is what provides IDEs all the useful insights about Angular code has also improved with this release.&lt;/p&gt;

&lt;p&gt;With Angular 12, the language service is enabled by default (previously it required us to opt-in).&lt;/p&gt;

&lt;p&gt;As of Angular 12, it will also detect if &lt;a href="https://javascript.plainenglish.io/angular-template-type-checking-e2c99c50f999"&gt;strict template type checking&lt;/a&gt; is not enabled, and &lt;a href="https://github.com/angular/angular/pull/40423"&gt;will advise you to enable those&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The language service now also includes performance tracing capabilities, which can be used to trace performances. This can be enabled in VSCode, &lt;a href="https://github.com/angular/angular/pull/41319"&gt;as explained here&lt;/a&gt; (this is fairly low level though).&lt;/p&gt;

&lt;p&gt;If you don't know about the language service yet, check out &lt;a href="https://angular.io/guide/language-service"&gt;the official docs&lt;/a&gt;, or the nice blog post written by &lt;a href="https://blog.ninja-squad.com/2021/01/19/angular-language-service/"&gt;Ninja Squad&lt;/a&gt;, or this &lt;a href="https://www.youtube.com/watch?v=doVYC32hjIw"&gt;video intro&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#disable-lint-rules-directly-from-html-templates"&gt;
  &lt;/a&gt;
  Disable lint rules directly from HTML templates
&lt;/h3&gt;

&lt;p&gt;The Angular template compiler now keeps track of HTML comments.&lt;/p&gt;

&lt;p&gt;Previously, it wasn't possible to disable linter rules from HTML templates because the Angular template compiler ignored comments. The workaround was to disable those rules for the whole template from the component's controller. Thanks to this change, it will now be possible to do this more precisely from the template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- eslint-disable-next-line @angular-eslint/template/no-any --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;{{ $any(foo).bar }}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yay for cleaner code!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-datepipe-now-supports-icu-standard-stand-alone-day-of-week"&gt;
  &lt;/a&gt;
  The DatePipe now supports ICU standard Stand Alone day of week
&lt;/h3&gt;

&lt;p&gt;Previously, it &lt;a href="https://github.com/angular/angular/issues/26922"&gt;wasn't possible&lt;/a&gt; to format a date to Stand Alone day of week using the DatePipe.&lt;/p&gt;

&lt;p&gt;Thanks to this change, Finnish date formatting is now supported, and I'm sure that it is great news for a fraction of the Angular community 😉&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#support-for-forwardref-in-providedin-fields-of-injectable-decorators"&gt;
  &lt;/a&gt;
  Support for forwardRef in providedIn fields of Injectable decorators
&lt;/h3&gt;

&lt;p&gt;It is now possible to use &lt;code&gt;forwardRef&lt;/code&gt; within the &lt;code&gt;providedIn&lt;/code&gt; field of the &lt;code&gt;@Injectable&lt;/code&gt; decorator.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-transformresource-hook-on-the-resourcehost-interface"&gt;
  &lt;/a&gt;
  New transformResource hook on the ResourceHost interface
&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;transformResource&lt;/code&gt; method has been added to the &lt;code&gt;ResourceHost&lt;/code&gt; interface. Thanks to this, it is now possible for tooling to do things like introducing preprocessor support for inline styles. This is what enables the new support for SASS with inline styles.&lt;/p&gt;

&lt;p&gt;You can learn more about that &lt;a href="https://github.com/angular/angular/pull/41307"&gt;here&lt;/a&gt; and &lt;a href="https://github.com/angular/angular/commit/1de04b124e1e92ea21a070c9d928664f193d220c"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#possible-to-create-custom-router-outlet-implementations"&gt;
  &lt;/a&gt;
  Possible to create custom router outlet implementations
&lt;/h3&gt;

&lt;p&gt;Up until now, creating custom router outlets was possible, but required jumping through some hoops (i.e., registering custom outlets with &lt;code&gt;ChildrenOutletContexts&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Angular 12 provides a &lt;a href="https://github.com/angular/angular/commit/a82fddf1ce6166e0f697e429370eade114094670"&gt;cleaner support for custom router outlets&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug fixes
&lt;/h2&gt;

&lt;p&gt;As usual, there's a gazillion bug fixes included in this release.&lt;/p&gt;

&lt;p&gt;Here's a copy of the release notes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;animations:&lt;/strong&gt; ensure consistent transition namespace ordering (&lt;a href="https://github.com/angular/angular/issues/19854"&gt;#19854&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/01cc99589bc449eaf3b1de2c94636de878843fba"&gt;01cc995&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;animations:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/e918250a0624cff9bbbbdb016a069303a99fb8cc"&gt;e918250&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;animations:&lt;/strong&gt; cleanup DOM elements when the root view is removed (&lt;a href="https://github.com/angular/angular/issues/41059"&gt;#41059&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/c49b28013a6c017c9afc73bbc00bb4fdcf15c70e"&gt;c49b280&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;animations:&lt;/strong&gt; allow animations on elements in the shadow DOM (&lt;a href="https://github.com/angular/angular/issues/40134"&gt;#40134&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/dad42c8cd669357f9c862023abc5f4695863040d"&gt;dad42c8&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/25672"&gt;#25672&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;animations:&lt;/strong&gt; cleanup DOM elements when the root view is removed (&lt;a href="https://github.com/angular/angular/issues/41001"&gt;#41001&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/a31da4850788800ba9735d617e7e3bb621a79c93"&gt;a31da48&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;bazel:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/85032460f133162cc712ab3b9f04d42ff3b6d6d9"&gt;8503246&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;bazel:&lt;/strong&gt; update build tooling for latest changes in rules_nodejs (&lt;a href="https://github.com/angular/angular/issues/40710"&gt;#40710&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/696f7bc"&gt;696f7bc&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;bazel:&lt;/strong&gt; update integration test to use &lt;a href="mailto:rules_nodejs@3.1.0"&gt;rules_nodejs@3.1.0&lt;/a&gt; (&lt;a href="https://github.com/angular/angular/issues/40710"&gt;#40710&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/34de89a"&gt;34de89a&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;bazel:&lt;/strong&gt; update type castings for JSON.parse usage (&lt;a href="https://github.com/angular/angular/issues/40710"&gt;#40710&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/2c90391"&gt;2c90391&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;benchpress:&lt;/strong&gt; update type castings for JSON.parse usage (&lt;a href="https://github.com/angular/angular/issues/40710"&gt;#40710&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/e721a5d"&gt;e721a5d&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;common:&lt;/strong&gt; add right ContentType for boolean values with HttpClient request body(&lt;a href="https://github.com/angular/angular/issues/38924"&gt;#38924&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/issues/41885"&gt;#41885&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/922a60283183c47a268fd084302b2bc87267a73e"&gt;922a602&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;common:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/f2b6fd87056cf3159e8ecc275ce654e47fdfa6f0"&gt;f2b6fd8&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;common:&lt;/strong&gt; viewport scroller not finding elements inside the shadow DOM (&lt;a href="https://github.com/angular/angular/issues/41644"&gt;#41644&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/c0f5ba3d36b2509a71d09c436d247211a58ee80d"&gt;c0f5ba3&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/41470"&gt;#41470&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;common:&lt;/strong&gt; temporarily re-export and deprecate &lt;code&gt;XhrFactory&lt;/code&gt; (&lt;a href="https://github.com/angular/angular/issues/41393"&gt;#41393&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/7dfa446c4ace99f4b64069cf672dcaa3665a1f5b"&gt;7dfa446&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;common:&lt;/strong&gt; cleanup location change listeners when the root view is removed (&lt;a href="https://github.com/angular/angular/issues/40867"&gt;#40867&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/38524c4d29290d3339ad2d7335a0ea84f5701d26"&gt;38524c4&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/31546"&gt;#31546&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;common:&lt;/strong&gt; allow number or boolean as http params (&lt;a href="https://github.com/angular/angular/issues/40663"&gt;#40663&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/91cdc11aa0347d1b71f2f732e00af9c3ff8078fc"&gt;91cdc11&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/23856"&gt;#23856&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;common:&lt;/strong&gt; avoid mutating context object in NgTemplateOutlet (&lt;a href="https://github.com/angular/angular/issues/40360"&gt;#40360&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/d3705b3284113f752ee05e9f0d2f6e75c723ea5b"&gt;d3705b3&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/24515"&gt;#24515&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler:&lt;/strong&gt; preserve @page rules in encapsulated styles (&lt;a href="https://github.com/angular/angular/issues/41915"&gt;#41915&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/3e365ba81e313ee31af7a8e9042e33fc046067e0"&gt;3e365ba&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/26269"&gt;#26269&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler:&lt;/strong&gt; strip scoped selectors from &lt;code&gt;@font-face&lt;/code&gt; rules (&lt;a href="https://github.com/angular/angular/issues/41815"&gt;#41815&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/2a11cdab51a2d8d7f644ceca744568a1617f5242"&gt;2a11cda&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/41751"&gt;#41751&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/bae81269c7461063821be7beb66b516e5a8995ce"&gt;bae8126&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler:&lt;/strong&gt; non-literal inline templates incorrectly processed in partial compilation (&lt;a href="https://github.com/angular/angular/issues/41583"&gt;#41583&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/ab257b370127dce70bd3ee7ad6d64d3a9ad5ae95"&gt;ab257b3&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler:&lt;/strong&gt; not generating update instructions for ng-template inside alternate namespaces (&lt;a href="https://github.com/angular/angular/issues/41669"&gt;#41669&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/2bcbbda78913be014534fde72318ab09795350f9"&gt;2bcbbda&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/41308"&gt;#41308&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler:&lt;/strong&gt; avoid parsing EmptyExpr with a backwards span (&lt;a href="https://github.com/angular/angular/issues/41581"&gt;#41581&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/e1a29308933e99ee3e0d92aae42b33834f20f50a"&gt;e1a2930&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler:&lt;/strong&gt; handle case-sensitive CSS custom properties (&lt;a href="https://github.com/angular/angular/issues/41380"&gt;#41380&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/e112e320bf6c2b60e8ecea46f80bcaec593c65b7"&gt;e112e32&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/41364"&gt;#41364&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler:&lt;/strong&gt; include used components during JIT compilation of partial component declaration (&lt;a href="https://github.com/angular/angular/issues/41353"&gt;#41353&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/ff9470b0a0196a3638f19028bba15e002cb0ff27"&gt;ff9470b&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/41104"&gt;#41104&lt;/a&gt; &lt;a href="https://github.com/angular/angular/issues/41318"&gt;#41318&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler:&lt;/strong&gt; support multiple &lt;code&gt;:host-context()&lt;/code&gt; selectors (&lt;a href="https://github.com/angular/angular/issues/40494"&gt;#40494&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/07b7af3"&gt;07b7af3&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/19199"&gt;#19199&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler:&lt;/strong&gt; update type castings for JSON.parse usage (&lt;a href="https://github.com/angular/angular/issues/40710"&gt;#40710&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/f728490"&gt;f728490&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; use '' for the source map URL of indirect templates (&lt;a href="https://github.com/angular/angular/issues/41973"&gt;#41973&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/7a4d9805ea73d1b6a7659987da77d266d5e01b88"&gt;7a4d980&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/40854"&gt;#40854&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; expose the linker as a Babel plugin (&lt;a href="https://github.com/angular/angular/issues/41918"&gt;#41918&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/8fdac8f4361fd4ac0f20c21c98289c19e8864347"&gt;8fdac8f&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; prefer non-aliased exports in reference emitters (&lt;a href="https://github.com/angular/angular/issues/41866"&gt;#41866&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/75bb931889b946c243161a6ce0503bc7d08a6565"&gt;75bb931&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/41443"&gt;#41443&lt;/a&gt; &lt;a href="https://github.com/angular/angular/issues/41277"&gt;#41277&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; allow linker to process minified booleans (&lt;a href="https://github.com/angular/angular/issues/41747"&gt;#41747&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/1fb6724b1f66c4681ddb201bc9b5441d20f5b920"&gt;1fb6724&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/41655"&gt;#41655&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; match string indexed partial declarations (&lt;a href="https://github.com/angular/angular/issues/41747"&gt;#41747&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/f8857507642f5d12eebf4ef1ca68b63cc51f4f81"&gt;f885750&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/41655"&gt;#41655&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/5b463f4541946c795835c9d9cfd7a21e7b0caffc"&gt;5b463f4&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; autocomplete literal types in templates. (&lt;a href="https://github.com/angular/angular/issues/41456"&gt;#41456&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/issues/41645"&gt;#41645&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/8b2b5ef903a21b599dfc4bfe8b0c64f7c136c3a9"&gt;8b2b5ef&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; do not error with prepocessing if component has no inline styles (&lt;a href="https://github.com/angular/angular/issues/41602"&gt;#41602&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/a5fe8b95893798467c4eea2b3d38d49f6d0ce1b3"&gt;a5fe8b9&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; ensure the compiler tracks &lt;code&gt;ts.Program&lt;/code&gt;s correctly (&lt;a href="https://github.com/angular/angular/issues/41291"&gt;#41291&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/deacc741e0ee41666292d2e2c07812a78daf5d6f"&gt;deacc74&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; prevent eliding default imports in incremental recompilations (&lt;a href="https://github.com/angular/angular/issues/41557"&gt;#41557&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/7f1651574ee95eaaa5f636fc37be7b07d1a808e5"&gt;7f16515&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/41377"&gt;#41377&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; resolve &lt;code&gt;rootDirs&lt;/code&gt; to absolute (&lt;a href="https://github.com/angular/angular/issues/41359"&gt;#41359&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/3e0fda96b827e577cc300f46e8497cb6c810ad61"&gt;3e0fda9&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/36290"&gt;#36290&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; add &lt;code&gt;useInlining&lt;/code&gt; option to type check config (&lt;a href="https://github.com/angular/angular/issues/41043"&gt;#41043&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/09aefd29045db77689f4dc16a6abae09a79cfb81"&gt;09aefd2&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/40963"&gt;#40963&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; &lt;code&gt;readConfiguration&lt;/code&gt; existing options should override options in tsconfig (&lt;a href="https://github.com/angular/angular/issues/40694"&gt;#40694&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/b7c4d07e81277f7aed566e443d1d4e1395c5a2f4"&gt;b7c4d07&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; extend &lt;code&gt;angularCompilerOptions&lt;/code&gt; in tsconfig from node (&lt;a href="https://github.com/angular/angular/issues/40694"&gt;#40694&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/5eb195416bf73f2fa59de52531724d8d19392975"&gt;5eb1954&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/36715"&gt;#36715&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; update ngcc integration tests for latest changes in rules_nodejs (&lt;a href="https://github.com/angular/angular/issues/40710"&gt;#40710&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/d7f5755"&gt;d7f5755&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;compiler-cli:&lt;/strong&gt; update type castings for JSON.parse usage (&lt;a href="https://github.com/angular/angular/issues/40710"&gt;#40710&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/b75d7cb"&gt;b75d7cb&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;core:&lt;/strong&gt; do not retain dynamically compiled components and modules (&lt;a href="https://github.com/angular/angular/issues/42003"&gt;#42003&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/1449c5c8ff3bf706c501130fe261627effe5d212"&gt;1449c5c&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/19997"&gt;#19997&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;core:&lt;/strong&gt; invoke profiler around ngOnDestroy lifecycle hooks (&lt;a href="https://github.com/angular/angular/issues/41969"&gt;#41969&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/e9ddc57f948f0cb18e3e334aeb3084d1b49689b1"&gt;e9ddc57&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;core:&lt;/strong&gt; AsyncPipe now compatible with RxJS 7 (&lt;a href="https://github.com/angular/angular/issues/41590"&gt;#41590&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/9759bca339b44ed78ec6aafab0336d531d285f90"&gt;9759bca&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;core:&lt;/strong&gt; handle multiple i18n attributes with expression bindings (&lt;a href="https://github.com/angular/angular/issues/41882"&gt;#41882&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/73c6c64f82d45c34203d4d18d759ad0c33a6b221"&gt;73c6c64&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/41869"&gt;#41869&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;core:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/f9c1f089573e0158eb5e4443658cfd25aeeeb091"&gt;f9c1f08&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;core:&lt;/strong&gt; detect synthesized constructors that have been downleveled using TS 4.2 (&lt;a href="https://github.com/angular/angular/issues/41305"&gt;#41305&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/274dc15452739e4fab2f647804a64d5b797cfed5"&gt;274dc15&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/41298"&gt;#41298&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;core:&lt;/strong&gt; Switch &lt;code&gt;emitDistinctChangesOnlyDefaultValue&lt;/code&gt; to true (&lt;a href="https://github.com/angular/angular/issues/41121"&gt;#41121&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/70962465b5795f0a192f745016b1c461e7c8790b"&gt;7096246&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;core:&lt;/strong&gt; remove duplicated EMPTY_OBJ constant (&lt;a href="https://github.com/angular/angular/issues/41066"&gt;#41066&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/bf158e7ff0715aabeae3c2c1ac923bf8cc7e4cfd"&gt;bf158e7&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;core:&lt;/strong&gt; remove duplicated EMPTY_ARRAY constant (&lt;a href="https://github.com/angular/angular/issues/40991"&gt;#40991&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/e12d9dec64bc3d02e58f8f85a65a939394fb9531"&gt;e12d9de&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;core:&lt;/strong&gt; allow EmbeddedViewRef context to be updated (&lt;a href="https://github.com/angular/angular/issues/40360"&gt;#40360&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/a3e17190e7e7e0329ed3643299c24d5fd510b7d6"&gt;a3e1719&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/24515"&gt;#24515&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;core:&lt;/strong&gt; make DefaultIterableDiffer keep the order of duplicates (&lt;a href="https://github.com/angular/angular/issues/23941"&gt;#23941&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/a826926"&gt;a826926&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/23815"&gt;#23815&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;core:&lt;/strong&gt; NgZone coaleascing options should trigger onStable correctly (&lt;a href="https://github.com/angular/angular/issues/40540"&gt;#40540&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/22f9e45"&gt;22f9e45&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;elements:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/4f5d094f3a385cdc6d93c7676457484e3d8b6b09"&gt;4f5d094&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;elements:&lt;/strong&gt; update type castings for JSON.parse usage (&lt;a href="https://github.com/angular/angular/issues/40710"&gt;#40710&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/efd4149"&gt;efd4149&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;forms:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/dc975bac93a8087d1f31a31db60ef313147e589f"&gt;dc975ba&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;http:&lt;/strong&gt; complete the request on timeout (&lt;a href="https://github.com/angular/angular/issues/39807"&gt;#39807&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/61a0b6d"&gt;61a0b6d&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/26453"&gt;#26453&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;http:&lt;/strong&gt; emit error on XMLHttpRequest abort event (&lt;a href="https://github.com/angular/angular/issues/40767"&gt;#40767&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/3897265"&gt;3897265&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/22324"&gt;#22324&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;language-service:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/9b6198c16f122dd934ac6a66d2ada21df26839b5"&gt;9b6198c&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;language-service:&lt;/strong&gt; use script versions for incremental compilations (&lt;a href="https://github.com/angular/angular/issues/41475"&gt;#41475&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/78236bfdcaeb66c5846eb0435d727942bb88f7c5"&gt;78236bf&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;language-service:&lt;/strong&gt; Only provide Angular property completions in templates (&lt;a href="https://github.com/angular/angular/issues/41278"&gt;#41278&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/0226a11c185da2d1e6f7833972d3f12205a6ae59"&gt;0226a11&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;language-service:&lt;/strong&gt; Add plugin option to force strictTemplates (&lt;a href="https://github.com/angular/angular/issues/41062"&gt;#41062&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/e9e7c33f3c170648ec8c86d859980c7fe78fba39"&gt;e9e7c33&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;language-service:&lt;/strong&gt; use single entry point for Ivy and View Engine (&lt;a href="https://github.com/angular/angular/issues/40967"&gt;#40967&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/e986a9787b7787c3cffef69d06a2e7e1228e3f40"&gt;e986a97&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;localize:&lt;/strong&gt; relax error to warning for missing target (&lt;a href="https://github.com/angular/angular/issues/41944"&gt;#41944&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/35ceed2061a890a70576dc7afa0b779f3779ae7b"&gt;35ceed2&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/21690"&gt;#21690&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;localize:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/658ed1f904ef0013c3b08e2b2182cf246ef55b2b"&gt;658ed1f&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;localize:&lt;/strong&gt; update type castings for JSON.parse usage (&lt;a href="https://github.com/angular/angular/issues/40710"&gt;#40710&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/4b469c9"&gt;4b469c9&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;ngcc:&lt;/strong&gt; detect synthesized constructors that have been downleveled using TS 4.2 (&lt;a href="https://github.com/angular/angular/issues/41305"&gt;#41305&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/8d3da56eda12070df1fb473c8609f3a94d77bfd6"&gt;8d3da56&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/41298"&gt;#41298&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;platform-browser:&lt;/strong&gt; prevent memory leak of style nodes if shadow DOM encapsulation is used (&lt;a href="https://github.com/angular/angular/issues/42005"&gt;#42005&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/d5555558d00774520dbda40d48721bda2cb9dd1a"&gt;d555555&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/36655"&gt;#36655&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;platform-browser:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/ea05cfd0c5a99840f4522b604c33a5b2f7f25f7d"&gt;ea05cfd&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;platform-browser:&lt;/strong&gt; configure &lt;code&gt;XhrFactory&lt;/code&gt; to use &lt;code&gt;BrowserXhr&lt;/code&gt; (&lt;a href="https://github.com/angular/angular/issues/41313"&gt;#41313&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/e0028e57410281e190caa74e0986320f6591d27b"&gt;e0028e5&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/41311"&gt;#41311&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;platform-browser:&lt;/strong&gt; update type castings for JSON.parse usage (&lt;a href="https://github.com/angular/angular/issues/40710"&gt;#40710&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/7ecfd2d"&gt;7ecfd2d&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;platform-browser-dynamic:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/bc45029a5437bcea45fa00549241685a1a3f32d0"&gt;bc45029&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;platform-server:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/4b9d4fa3e729a3af13fb5b50de3e5c73c1d6923f"&gt;4b9d4fa&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;router:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/0067edd1469a428c11bbe6358fd5650e79abf774"&gt;0067edd&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;router:&lt;/strong&gt; Only retrieve stored route when reuse strategy indicates it should reattach (&lt;a href="https://github.com/angular/angular/issues/30263"&gt;#30263&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/a4ff071e3f08e3de6d4d3f97c747c2f42b827c49"&gt;a4ff071&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/23162"&gt;#23162&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;router:&lt;/strong&gt; recursively merge empty path matches (&lt;a href="https://github.com/angular/angular/issues/41584"&gt;#41584&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/1179dc8cb32c9fc451d2af9215c4740af9d2e291"&gt;1179dc8&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/41481"&gt;#41481&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;router:&lt;/strong&gt; fragment can be null (&lt;a href="https://github.com/angular/angular/issues/37336"&gt;#37336&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/b5551609fe02787641bdfdb0a6edfded413a3b52"&gt;b555160&lt;/a&gt;), closes &lt;a href="https://github.com/angular/angular/issues/23894"&gt;#23894&lt;/a&gt; &lt;a href="https://github.com/angular/angular/issues/34197"&gt;#34197&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;router:&lt;/strong&gt; update type castings for JSON.parse usage (&lt;a href="https://github.com/angular/angular/issues/40710"&gt;#40710&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/350dada"&gt;350dada&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;service-worker:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/6b823d7071d59234ab52bdf7eaa248df6b7d9faa"&gt;6b823d7&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;service-worker:&lt;/strong&gt; update type castings for JSON.parse usage (&lt;a href="https://github.com/angular/angular/issues/40710"&gt;#40710&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/4f7ff96"&gt;4f7ff96&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;upgrade:&lt;/strong&gt; preserve $interval.flush when ngMocks is being used (&lt;a href="https://github.com/angular/angular/issues/30229"&gt;#30229&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/87dc8511ccb9c75d78866ebd2c250ea96fc91bd0"&gt;87dc851&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;upgrade:&lt;/strong&gt; update supported range of node versions to only include LTS versions (&lt;a href="https://github.com/angular/angular/issues/41822"&gt;#41822&lt;/a&gt;) (&lt;a href="https://github.com/angular/angular/commit/10c45239a68e82ea52c1601fae09953aa7843351"&gt;10c4523&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By the way, did you notice that &lt;code&gt;AsyncPipe&lt;/code&gt; has been &lt;a href="https://github.com/angular/angular/commit/9759bca339b44ed78ec6aafab0336d531d285f90"&gt;patched&lt;/a&gt; by Ben Lesh to be compatible with both RxJS 6 and 7? How cool is that? ;-)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-changes"&gt;
  &lt;/a&gt;
  Breaking changes
&lt;/h2&gt;

&lt;p&gt;As usual, there are a number of breaking changes with this release.&lt;/p&gt;

&lt;p&gt;As &lt;a href="https://github.com/angular/angular/blob/master/CHANGELOG.md#breaking-changes"&gt;the official release notes&lt;/a&gt; are pretty clear, I’m just copy/pasting those here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Minified UMD bundles are no longer included in the distributed NPM packages.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;animations&lt;/em&gt;: DOM elements are now correctly removed when the root view is removed. If you are using SSR and use the app's HTML for rendering, you will need to ensure that you save the HTML to a variable before destorying the app. It is also possible that tests could be accidentally relying on the old behavior by trying to find an element that was not removed in a previous test. If this is the case, the failing tests should be updated to ensure they have proper setup code which initializes elements they rely on&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;common&lt;/em&gt;: Methods of the &lt;code&gt;PlatformLocation&lt;/code&gt; class, namely &lt;code&gt;onPopState&lt;/code&gt; and &lt;code&gt;onHashChange&lt;/code&gt;, used to return &lt;code&gt;void&lt;/code&gt;. Now those methods return functions that can be called to remove event handlers&lt;/li&gt;
&lt;li&gt;common: The methods of the &lt;code&gt;HttpParams&lt;/code&gt; class now accept &lt;code&gt;string | number | boolean&lt;/code&gt; instead of &lt;code&gt;string&lt;/code&gt; for the value of a parameter. If you extended this class in your application, you'll have to update the signatures of your methods to reflect these changes&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;compiler-cli&lt;/em&gt;: Linked libraries no longer generate legacy i18n message ids. Any downstream application that provides translations for these messages, will need to migrate their message ids using the &lt;code&gt;localize-migrate&lt;/code&gt; command line tool&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;core&lt;/em&gt;: Angular no longer maintains support for node v10, so if you're still using it for your development environment, it's really time to upgrade!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;core&lt;/em&gt;: Previously the &lt;code&gt;ng.getDirectives&lt;/code&gt; function threw an error in case a given DOM node had no Angular context associated with it (for example if a function was called for a DOM element outside of an Angular app). This behavior was inconsistent with other debugging utilities under &lt;code&gt;ng&lt;/code&gt; namespace, which handled this situation without raising an exception. Now calling the &lt;code&gt;ng.getDirectives&lt;/code&gt; function for such DOM nodes would result in an empty array returned from that function
core: Switching default of &lt;code&gt;emitDistinctChangesOnlyDefaultValue&lt;/code&gt; which changes the default behavior and may cause some applications which rely on the incorrect behavior to fail&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;emitDistinctChangesOnly&lt;/code&gt; flag has also been deprecated and will be removed in a future major release&lt;/p&gt;

&lt;p&gt;The previous implementation would fire changes &lt;code&gt;QueryList.changes.subscribe&lt;/code&gt; whenever the &lt;code&gt;QueryList&lt;/code&gt; was recomputed. This resulted in an artificially high number of change notifications, as it is possible that recomputing &lt;code&gt;QueryList&lt;/code&gt; results in the same list. When the &lt;code&gt;QueryList&lt;/code&gt; gets recomputed is an implementation detail, and it should not be the thing that determines how often change event should fire.&lt;/p&gt;

&lt;p&gt;Unfortunately, fixing the behavior outright caused too many existing applications to fail. For this reason, Angular considers this fix a breaking fix and has introduced a flag in &lt;code&gt;@ContentChildren&lt;/code&gt; and &lt;code&gt;@ViewChildren&lt;/code&gt;, that controls the behavior.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;QueryCompWithStrictChangeEmitParent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ContentChildren&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// This option is the new default with this change.&lt;/span&gt;
    &lt;span class="na"&gt;emitDistinctChangesOnly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;foos&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;QueryList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For backward compatibility before v12&lt;br&gt;
&lt;code&gt;emitDistinctChangesOnlyDefaultValue&lt;/code&gt; was set to &lt;code&gt;false&lt;/code&gt;. This change&lt;br&gt;
changes the default to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;core:&lt;/strong&gt; The type of the &lt;code&gt;APP_INITIALIZER&lt;/code&gt; token has been changed to more accurately
reflect the types of return values that are handled by Angular. Previously,
each initializer callback was typed to return &lt;code&gt;any&lt;/code&gt;, this is now
&lt;code&gt;Promise&amp;lt;unknown&amp;gt; | Observable&amp;lt;unknown&amp;gt; | void&lt;/code&gt;. In the unlikely event that
your application uses the &lt;code&gt;Injector.get&lt;/code&gt; or &lt;code&gt;TestBed.inject&lt;/code&gt; API to inject
the &lt;code&gt;APP_INITIALIZER&lt;/code&gt; token, you may need to update the code to account for
the stricter type.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, TypeScript may report the TS2742 error if the &lt;code&gt;APP_INITIALIZER&lt;/code&gt;&lt;br&gt;
token is used in an expression of which its inferred type has to be emitted&lt;br&gt;
into a .d.ts file. To workaround this, an explicit type annotation is needed,&lt;br&gt;
which would typically be &lt;code&gt;Provider&lt;/code&gt; or &lt;code&gt;Provider[]&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;core:&lt;/strong&gt; Minimum supported &lt;code&gt;zone.js&lt;/code&gt; version is &lt;code&gt;0.11.4&lt;/code&gt;. Thus it means that if you're using an older version, it's also time to upgrade zone.js in your project!&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;forms:&lt;/strong&gt; The &lt;code&gt;emitEvent&lt;/code&gt; option was added to the following &lt;code&gt;FormArray&lt;/code&gt; and &lt;code&gt;FormGroup&lt;/code&gt; methods:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FormGroup.addControl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FormGroup.removeControl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FormGroup.setControl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FormArray.push&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FormArray.insert&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FormArray.removeAt&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FormArray.setControl&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FormArray.clear&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your app has custom classes that extend &lt;code&gt;FormArray&lt;/code&gt; or &lt;code&gt;FormGroup&lt;/code&gt; classes and override the&lt;br&gt;
above-mentioned methods, you may need to update your implementation to take the new options into&lt;br&gt;
account and make sure that overrides are compatible from a types perspective.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;forms:&lt;/strong&gt; Previously &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; attributes defined on the &lt;code&gt;&amp;lt;input type="number"&amp;gt;&lt;/code&gt;
were ignored by Forms module. Now presence of these attributes would
trigger min/max validation logic (in case &lt;code&gt;formControl&lt;/code&gt;, &lt;code&gt;formControlName&lt;/code&gt;
or &lt;code&gt;ngModel&lt;/code&gt; directives are also present on a given input) and
corresponding form control status would reflect that.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;platform-browser:&lt;/strong&gt; &lt;code&gt;XhrFactory&lt;/code&gt; has been moved from &lt;code&gt;@angular/common/http&lt;/code&gt; to &lt;code&gt;@angular/common&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;XhrFactory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/common/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;After&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;XhrFactory&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;router:&lt;/strong&gt; Strict null checks will report on fragment potentially being null.
Migration path: add null check.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;router:&lt;/strong&gt; The type of the &lt;code&gt;RouterLinkActive.routerLinkActiveOptions&lt;/code&gt; input was
expanded to allow more fine-tuned control. Code that previously read
this property may need to be updated to account for the new type.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#updated-roadmap"&gt;
  &lt;/a&gt;
  Updated roadmap
&lt;/h2&gt;

&lt;p&gt;According to the current Angular &lt;a href="https://angular.io/guide/roadmap"&gt;roadmap&lt;/a&gt;, the team is now busy with the following improvements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Improving developer experience while debugging and profiling. This should help us to understand the component structure (I imagine like React Dev Tools allow for React), and change detection&lt;/li&gt;
&lt;li&gt;Improving test times and debugging with automatic tear down: This should improve the isolation between tests and test times. The &lt;a href="https://angular.io/api/core/testing/TestBed"&gt;TestBed&lt;/a&gt; will also be changed to automatically clean up and tear down the test environment after each test is executed&lt;/li&gt;
&lt;li&gt;Using ES2017+ as the default output: They'll identify roadblocks and remove those so that the default output language can be upgraded&lt;/li&gt;
&lt;li&gt;Integrating MDC Web into Angular Material&lt;/li&gt;
&lt;li&gt;Improving the accessibility of Angular Material components&lt;/li&gt;
&lt;li&gt;Publishing guides about advanced concepts such as change detection, performance profiling, interactions with Zone.js, etc&lt;/li&gt;
&lt;li&gt;Updating the e2e testing strategy (cfr above)&lt;/li&gt;
&lt;li&gt;Preparing the upgrade to RxJS v7+. As you might know, RxJS 7 has been &lt;a href="https://medium.com/volosoft/whats-new-in-rxjs-7-a11cc564c6c0"&gt;released recently&lt;/a&gt;. Hopefully we should soon be able to upgrade&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the future, the Angular team plans to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Look into micro frontend architecture: they might introduce means for us to easily create micro frontends using Angular&lt;/li&gt;
&lt;li&gt;Improve developer experience with strict typing for Angular forms (we so desperately need this)&lt;/li&gt;
&lt;li&gt;Make Zone.js optional, which should simplify the framework, improve debugging, reduce bundle sizes and even allow taking advantage of the native async/await syntax&lt;/li&gt;
&lt;li&gt;Improve build performance by integrating the Angular compiler (&lt;code&gt;ngc&lt;/code&gt;) as a TypeScript compiler plugin&lt;/li&gt;
&lt;li&gt;Allow adding directives to host elements. This has been requested by the community for a long time too!&lt;/li&gt;
&lt;li&gt;Make NgModules optional to ease the learning curve&lt;/li&gt;
&lt;li&gt;Provide us with easier means to implement code-splitting at the component-level&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#angular-material-amp-angular-cdk"&gt;
  &lt;/a&gt;
  Angular Material &amp;amp; Angular CDK
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#sass-migration"&gt;
  &lt;/a&gt;
  Sass migration
&lt;/h3&gt;

&lt;p&gt;Internally, both Angular Material and the CDK have migrated to the &lt;a href="https://sass-lang.com/blog/the-module-system-is-launched"&gt;new Sass module system&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If your application uses either of those, then you'll need to make sure that you've replaced &lt;code&gt;node-sass&lt;/code&gt; by &lt;code&gt;sass&lt;/code&gt;: &lt;a href="https://www.npmjs.com/package/sass"&gt;https://www.npmjs.com/package/sass&lt;/a&gt;. The &lt;code&gt;node-sass&lt;/code&gt; package is not maintained anymore!&lt;/p&gt;

&lt;p&gt;With this migration, the Sass theming API has been enhanced, and it now allows us to take advantage of Sass's &lt;code&gt;@use&lt;/code&gt; utility.&lt;/p&gt;

&lt;p&gt;There's now a single entry point for &lt;code&gt;@angular/material&lt;/code&gt; and &lt;code&gt;@angular/cdk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, the APIs have also been changed for clarity. Many functions, mixins and variables have been renamed along the way.&lt;/p&gt;

&lt;p&gt;You can find more information about these changes in the new theming guide: &lt;a href="https://github.com/angular/components/blob/master/guides/theming.md"&gt;https://github.com/angular/components/blob/master/guides/theming.md&lt;/a&gt;. In addition, note that the guides on &lt;a href="https://material.angular.io"&gt;https://material.angular.io&lt;/a&gt; have been rewritten to showcase the new API, and include explanations.&lt;/p&gt;

&lt;p&gt;The upgrade process will automatically migrate code to the new Sass API. You can find before/after examples &lt;a href="https://gist.github.com/MarkTechson/6283b6a3b353f9e38964af0740e29280"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#angular-cdk-changes"&gt;
  &lt;/a&gt;
  Angular CDK changes
&lt;/h3&gt;

&lt;p&gt;Version 12 includes a number of &lt;a href="https://github.com/angular/components/blob/master/CHANGELOG.md#cdk"&gt;changes&lt;/a&gt; to the Angular CDK.&lt;/p&gt;

&lt;p&gt;Here, I'll only list the new features, but you can check out the release notes if you want details about the bug fixes and performance improvements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Drag-drop&lt;/em&gt;: The dropped event now includes a &lt;code&gt;dropPoint&lt;/code&gt; property, determining the exact point where the mouse pointed was when the item was dropped. More info &lt;a href="https://github.com/angular/components/pull/22410"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Drag-drop&lt;/em&gt;: The preview container &lt;a href="https://github.com/angular/components/issues/13288"&gt;can now be customized&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Table&lt;/em&gt;: A new directive allows to &lt;a href="https://github.com/angular/components/pull/21508"&gt;enable the recycle view repeater&lt;/a&gt;, which caches disposed rows and reuses them when the dataset changes. This can help improve performances (reduce latency)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Table&lt;/em&gt;: &lt;a href="https://github.com/angular/components/pull/21886"&gt;Added&lt;/a&gt; the offsets of sticky elements to the &lt;code&gt;StickyUpdate&lt;/code&gt; interface&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Stepper&lt;/em&gt;: When a user tries to move away from a step, an &lt;code&gt;interacted&lt;/code&gt; event will now be &lt;a href="https://github.com/angular/components/issues/19918"&gt;emitted&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Stepper&lt;/em&gt;: The orientation can now be &lt;a href="https://github.com/angular/components/issues/21874"&gt;changed&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Accessibility&lt;/em&gt;: A &lt;code&gt;FocusOptions&lt;/code&gt; object &lt;a href="https://github.com/angular/components/issues/21767"&gt;can now be passed&lt;/a&gt; into the various focus trap methods&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Testing&lt;/em&gt;: New WebDriver harness environment. I haven't dived into this one yet so I can't tell you more. Check out &lt;a href="https://github.com/angular/components/pull/22410"&gt;the PR&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#angular-material-changes"&gt;
  &lt;/a&gt;
  Angular Material changes
&lt;/h3&gt;

&lt;p&gt;There are also a number of &lt;a href="https://github.com/angular/components/blob/master/CHANGELOG.md#material"&gt;changes for Angular Material&lt;/a&gt;. Again, check out the release notes for the full list of bug fixes.&lt;/p&gt;

&lt;p&gt;New features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Date picker&lt;/em&gt;: No longer depends &lt;a href="https://github.com/angular/components/pull/22383"&gt;on dialog&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Stepper&lt;/em&gt;: The orientation can now be changed dynamically (cfr similar change in the CDK)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Stepper&lt;/em&gt;: Allow for content to be &lt;a href="https://github.com/angular/components/issues/12339"&gt;rendered lazily&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Menu&lt;/em&gt;: Allow updating the menu position &lt;a href="https://github.com/angular/components/pull/22046"&gt;programmatically&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Mat error&lt;/em&gt;: Now uses &lt;code&gt;aria-live="polite"&lt;/code&gt; instead of &lt;code&gt;role="alert"&lt;/code&gt;. More details &lt;a href="https://github.com/angular/components/issues/21781"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Tabs&lt;/em&gt;: Add method to &lt;a href="https://github.com/angular/components/pull/15228"&gt;programmatically set focus on a specific tab&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;List&lt;/em&gt;: Now returns an array with changed options from the &lt;code&gt;selectAll&lt;/code&gt; and &lt;code&gt;deselectAll&lt;/code&gt; methods. Check out &lt;a href="https://github.com/angular/components/pull/21358/files"&gt;the PR&lt;/a&gt; for details&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Slide toggle&lt;/em&gt;: Allow to &lt;a href="https://github.com/angular/components/pull/22047"&gt;globally configure a default color&lt;/a&gt; through a provider&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Tooltip&lt;/em&gt;: Now exposes the effective position of the tooltip through a class on the component&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Radio&lt;/em&gt;, &lt;em&gt;Checkbox&lt;/em&gt; and &lt;em&gt;Slider&lt;/em&gt;: Include the background color of those components in the &lt;a href="https://github.com/angular/components/issues/22298"&gt;print stylesheets&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also a number of changes on the experimental version: &lt;a href="https://github.com/angular/components/blob/master/CHANGELOG.md#material-experimental"&gt;https://github.com/angular/components/blob/master/CHANGELOG.md#material-experimental&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#angular-universal"&gt;
  &lt;/a&gt;
  Angular Universal
&lt;/h2&gt;

&lt;p&gt;Angular Universal 12 is also &lt;a href="https://github.com/angular/universal/releases/tag/v12.0.0"&gt;fresh out of the oven&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With this release, Universal now &lt;a href="https://github.com/angular/universal/commit/3dddb758fa6e89ca1b857b7a7a17a21bc474618c"&gt;inlines critical CSS by default&lt;/a&gt;, which is pretty cool.&lt;/p&gt;

&lt;p&gt;Universal now includes a new &lt;code&gt;proxyConfig&lt;/code&gt; option to provide custom proxy configurations to the &lt;code&gt;ssr-dev-server&lt;/code&gt; builder.&lt;/p&gt;

&lt;p&gt;In this version, there's a new (experimental) SSR engine called &lt;em&gt;Clover&lt;/em&gt; (reminds me of a quality tool in the Java ecosystem). This new engine seems promising. It aims to simplify things, get us rid of the &lt;code&gt;Window is undefined&lt;/code&gt; error, remove the need for multiple builds for SSR/prerender, generate application shells without an extra build, and more. We'll probably hear more about it later on. If you're curious, then check out &lt;a href="https://github.com/angular/universal/commit/c4b7be3bbdbc7334f5cf7049c644e185cf15d0bb"&gt;the PR&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This version includes a &lt;a href="https://github.com/angular/universal/commit/2066f18a23eecce6dd485c19bc1ed10a4c3be497"&gt;builder&lt;/a&gt; that can be used to generate static pages (i.e., pre-rendering) using the new Universal Clover approach.&lt;/p&gt;

&lt;p&gt;Finally, this version also includes &lt;a href="https://github.com/angular/universal/issues/1633"&gt;TLS support&lt;/a&gt; for the dev-server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#google-maps"&gt;
  &lt;/a&gt;
  Google Maps
&lt;/h2&gt;

&lt;p&gt;As you know, Angular includes components for Google Maps and Youtube. Version 12 brings a few improvements for the Google Maps component:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Now includes an &lt;code&gt;icon&lt;/code&gt; input to easily customize the marker&lt;/li&gt;
&lt;li&gt;Now emits a &lt;code&gt;clusterClick&lt;/code&gt; event when a cluster &lt;a href="https://github.com/angular/components/issues/22020"&gt;has been clicked&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Includes &lt;a href="https://github.com/angular/components/issues/21665"&gt;a wrapper&lt;/a&gt; around the Google Maps Geocoder API, and exports &lt;code&gt;MapDirectionsResponse&lt;/code&gt;, which was not exposed before&lt;/li&gt;
&lt;li&gt;Introduces support for &lt;a href="https://github.com/angular/components/pull/21489"&gt;rendering heatmaps&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;MapDirectionsRenderer&lt;/code&gt;, allowing to render directions on a map, and &lt;code&gt;MapDirectionsService&lt;/code&gt;, which wraps &lt;code&gt;google.maps.DirectionsService&lt;/code&gt; to calculate &lt;a href="https://github.com/angular/components/pull/21736"&gt;routes between two points&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;New &lt;code&gt;options&lt;/code&gt; input on the &lt;a href="https://github.com/angular/components/pull/21861"&gt;marker clusterer&lt;/a&gt;, similar to the other directives&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#upgrading"&gt;
  &lt;/a&gt;
  Upgrading
&lt;/h2&gt;

&lt;p&gt;As usual, there's a complete upgrade guide available, and &lt;code&gt;ng update&lt;/code&gt; will help you out: &lt;a href="https://update.angular.io/?l=3&amp;amp;v=11.0-12.0"&gt;https://update.angular.io/?l=3&amp;amp;v=11.0-12.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're using &lt;a href="https://nx.dev/"&gt;Nrwl NX&lt;/a&gt; (you really should), note that Nx 12.3 includes support for Angular 12 already! Learn more about that &lt;a href="https://blog.nrwl.io/incremental-build-improvements-angular-12-distributed-task-execution-and-more-in-nx-12-3-48b5e4722056"&gt;here&lt;/a&gt;. As an added benefit, Nx will also help you migrate from TSLint to ESLint (and it's time!)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, I've explored the new features of Angular 12.&lt;/p&gt;

&lt;p&gt;As usual, this is release is &lt;em&gt;heroic&lt;/em&gt; (what else could it be?! 😎).&lt;/p&gt;

&lt;p&gt;Ivy is moving forward, and hopefully, we'll "soon" be less annoyed by &lt;code&gt;ngcc&lt;/code&gt;, as the ecosystem migrates. There are a number of awesome changes with this release, so check it out and upgrade now!.&lt;/p&gt;

&lt;p&gt;That’s it for today!&lt;/p&gt;

&lt;p&gt;PS: If you want to learn tons of other cool things about product/software/Web development, then &lt;a href="https://dev-concepts.dev/"&gt;check out the Dev Concepts series&lt;/a&gt;, &lt;a href="https://mailchi.mp/fb661753d54a/developassion-newsletter"&gt;subscribe to my newsletter&lt;/a&gt;, and &lt;a href="https://twitter.com/dSebastien"&gt;come say hi on Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>angular</category>
      <category>programming</category>
    </item>
    <item>
      <title>Refactoring the Pomodoro Timer: Components</title>
      <author>Nat Ravenhill</author>
      <pubDate>Thu, 03 Jun 2021 10:52:04 +0000</pubDate>
      <link>https://dev.to/natravenhill/refactoring-the-pomodoro-timer-components-1ag9</link>
      <guid>https://dev.to/natravenhill/refactoring-the-pomodoro-timer-components-1ag9</guid>
      <description>&lt;p&gt;Previously I wrote a Pomodoro timer app. The code is contained in &lt;a href="https://github.com/NatRavenhill/PomodoroTimer/blob/original/src/Session.jsx"&gt;a single React component.&lt;/a&gt; This is generally bad practice - we want components to each be responsible for a single bit of functionality and be reusable, so we will we split out functionality into smaller components.&lt;/p&gt;

&lt;p&gt;First I made a folder called "components", which will house the sub components and their styles.&lt;/p&gt;

&lt;p&gt;There are 3 elements we can immediately split out:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The main timer and button ("Tomato" element)&lt;/li&gt;
&lt;li&gt;The Break length controls&lt;/li&gt;
&lt;li&gt;The Session length controls&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y2rGlf4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj1sv14gz0onp5dmvko2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y2rGlf4n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fj1sv14gz0onp5dmvko2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#break-length"&gt;
  &lt;/a&gt;
  Break Length
&lt;/h2&gt;

&lt;p&gt;This section has a &lt;code&gt;breakLength&lt;/code&gt; value contained in the state and two button handler methods to increase/decrease this value.&lt;/p&gt;

&lt;p&gt;First, we create a new component called &lt;code&gt;BreakLength&lt;/code&gt; and paste the JSX into the render method. As we are now in a child component, and React has unidirectional data flow, we cannot update the &lt;code&gt;breakLength&lt;/code&gt; value in the parent component from the &lt;code&gt;BreakLength&lt;/code&gt; component. &lt;/p&gt;

&lt;p&gt;Therefore, we pass a reference to the method into the &lt;code&gt;BreakLength&lt;/code&gt; component as a property and call this in a new &lt;code&gt;onClick&lt;/code&gt; handler. This will call the parent method and update its state.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;breakLength&lt;/code&gt; value is passed to the new component as a child property. When the state is changed in the parent, this will change the property value and re-render the &lt;code&gt;BreakLength&lt;/code&gt; component.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#session-length"&gt;
  &lt;/a&gt;
  Session Length
&lt;/h2&gt;

&lt;p&gt;This is refactored in the same way:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#tomato"&gt;
  &lt;/a&gt;
  Tomato
&lt;/h2&gt;

&lt;p&gt;The Tomato has 2 functions - &lt;code&gt;handleStartStop&lt;/code&gt; and &lt;code&gt;handleReset&lt;/code&gt;. Again, we pass references to these as properties and call them in the &lt;code&gt;onClick&lt;/code&gt; handlers in the child Tomato component. The minutes and second properties are passed as props to the Tomato component.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now our main component is much smaller and we have a better separation of concerns. We can also extract some of the styles in &lt;code&gt;Session.css&lt;/code&gt; that only apply to the Tomato into a new CSS file and include it just in this component.&lt;/p&gt;

</description>
      <category>react</category>
      <category>refactorit</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why not to "Abandon React!!1"</title>
      <author>Vesa Piittinen</author>
      <pubDate>Thu, 03 Jun 2021 10:09:37 +0000</pubDate>
      <link>https://dev.to/merri/why-not-to-abandon-react-1-3nai</link>
      <guid>https://dev.to/merri/why-not-to-abandon-react-1-3nai</guid>
      <description>&lt;p&gt;The past two years there has been a growing dissatisfaction towards React. You can find people trying to find arguments against choosing React. I've done that too, because there are some severe issues in how we use (or don't use) React. Mostly the issues have to do with stuff like performance, search engine optimization, accessibility. It is easy to point your finger to what appears to be the "root of all evil", React.&lt;/p&gt;

&lt;p&gt;So what are the problems with React and are there any ways we could deal with them?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-becomes-messy-in-large-applications"&gt;
  &lt;/a&gt;
  "React becomes messy in large applications"
&lt;/h2&gt;

&lt;p&gt;The above is one of the statements which I could agree on, but not without conditions. Because the real problem here is not really React in itself!&lt;/p&gt;

&lt;p&gt;The biggest thing one can argue against React is how it puts HTML and DOM away from sight. When looking at JSX you don't really see that much of clean HTML structure by looking at all the combinations of components. This means that to have good HTML you really have to have good component level abstraction which would allow pretty much any developer to produce mostly good semantic HTML with minimal effort. Or you'd have to setup tooling that validates HTML, and aggresively encourage using browser devtools with focus on the HTML.&lt;/p&gt;

&lt;p&gt;And these things are a problem. First one requires there to be at least one developer who builds good component abstractions so other could just focus on building a good app. Second one means you need somebody to be aware of the need in the first place, and the time to do that and actively advocate.&lt;/p&gt;

&lt;p&gt;To me it seems neither of the above really happens. Instead you have a lot of projects where people have chosen React because that is what everybody is using, yet the teams consist more of generalist programmers rather than many who have high HTML, CSS, web standards knowledge.&lt;/p&gt;

&lt;p&gt;And once we have this kind of a team: how likely you think it is that they choose the best additional libraries to use? I'll throw one example that probably shouldn't have caught as much popularity as it has: CSS-in-JS.&lt;/p&gt;

&lt;p&gt;Why I say this? Well, it limits even further the visibility and knowledge of web standards, in this case CSS. You're unlikely to learn much of CSS selector usage with CSS-in-JS, mostly you deal with just pretty basic styling. CSS-in-JS also encourages "duct tape" type of components, so when discipline is missing instead of having a good set of base components you end up with lots of style utility components.&lt;/p&gt;

&lt;p&gt;This kind of embracing React and JavaScript, and sort of an "elimination of web standards" from direct visibility is likely a reason why many new front-end developers working at companies have quite a challenge creating good usable, accessible components with semantic HTML, and robust CSS. The written code doesn't embrace them and the only way you gain the knowledge is by knowing to research, likely requiring one to spend their free time to learn, or by having a mentor who knows the web well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-is-bad-for-thing-x"&gt;
  &lt;/a&gt;
  "React is bad for thing X"
&lt;/h2&gt;

&lt;p&gt;You have HTML mostly out of sight because JSX, and focus being on components. You have CSS mostly out of sight because CSS-in-JS. You have everything controlled via JavaScript.&lt;/p&gt;

&lt;p&gt;A truly wonderful thing about HTML is how fast browsers can process it. And the same goes for CSS. The traditional wisdom has been to have as little JavaScript as possible. We used to only enrich HTML progressively with JS.&lt;/p&gt;

&lt;p&gt;With React this has turned upside down. One of the reasons for this is how we use React. We probably render the entire page with React on server side. Then we also take control of the whole client DOM tree with React. This means the whole page is being taken over by JavaScript.&lt;/p&gt;

&lt;p&gt;To workaround performance issues we have thought to do intelligent code splitting, so bundles per page could be smaller. The typical end result to this is pages with something like 20+ JS bundles being loaded on first page load. Because we also thought prefetching improves performance for the next page load.&lt;/p&gt;

&lt;p&gt;We now have tools like Lighthouse and Web Vitals to measure how this kind of setup performs, and well, it ain't pretty. It is very hard to optimize when React takes over the entire DOM.&lt;/p&gt;

&lt;p&gt;There are also other issues with React taking over the entire DOM. A typical example is growth hacking. While I don't really like the whole concept and the current way it is being done with A/B testing that needs months of time to see any results, it is still a thing that exists and companies seem to like to do it. And the challenge here is that you need to provide places for external scripts to hook into your page. This easily gets into conflict with React having made to have the entire DOM for itself!&lt;/p&gt;

&lt;p&gt;Growth hacking is not the only case. People may use Google Translate, or other localization tools. React controlled sites tend to break pretty bad and become unusable. For a business this can mean lost sales.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fixing-the-process"&gt;
  &lt;/a&gt;
  Fixing the process
&lt;/h2&gt;

&lt;p&gt;For companies with a continuous project there are a couple of things they can do to help avoid these issues from piling up. One possibility is to hire more of your own developers, and aim for having people working on your projects for longer. Give them time to learn alongside work, maybe arrange mentorship, ensure you have some devs with longer experience, and especially people who are passionate specifically about the web. Prioritize your business needs so that there aren't too many big features needing to be done at the same time.&lt;/p&gt;

&lt;p&gt;I think all of these are very hard and not many companies can confidently cross all the boxes. Of course consultants can work fine as well, but it is harder to guarantee their longevity in a project. Many consultancy companies seem to favor rotation to ensure satisfaction with new challenges every now and then.&lt;/p&gt;

&lt;p&gt;As for developer level one of the things is to reconsider the way React apps are written: maybe you don't need to wrap the entire HTML everywhere. Maybe you can have "widgets" instead: load React miniapp for specific feature as needed. So even if you render the whole page with React on server side, you could abandon most of universality, as that will guarantee you don't need to hydrate the entire DOM tree with React in one go. This is a very possible scenario for sites that have content focus.&lt;/p&gt;

&lt;p&gt;Of course this kind of change is hard to accomplish. Some of you may use React frameworks like Gatsby or Next.js. So far I haven't had a look whether these frameworks can be customized this much; probably not. Luckily there is a new player on town that lets you have only as much JS as you need: &lt;a href="https://remix.run/"&gt;Remix&lt;/a&gt;. It is still in beta, but it encourages existing web standards a lot more than other solutions. In the other hand it does cost money, so that can be a blocker for new devs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-the-web-standards"&gt;
  &lt;/a&gt;
  Use the web standards
&lt;/h2&gt;

&lt;p&gt;As conclusion React is a valuable tool and we get stuff done with it. The problems we may have with it is in the way we use it, often due to ignoring cost of hydrating and controlling the entire DOM tree on client browser, and in the other hand by encouraging coding where JavaScript is made to control everything.&lt;/p&gt;

&lt;p&gt;To cure this: embrace HTML and CSS over JS (when it makes sense). Front-end facing code should reflect more that you're working with HTML and CSS. Accomplishing this is not an easy task, and I don't yet know how to actually successfully shift code so that even though you'd be using React, you would also bring HTML and CSS in as first-class citizens. So that even the new devs working with the code would get the idea of what is important on the browser side, that it wouldn't get lost in all the code even on a larger project.&lt;/p&gt;

&lt;p&gt;A possible issue here is that we're breaking the "universality" of having the exact same code executing on client and server. &lt;br&gt;
I guess splitting to two parts may feel like we might be doing "double the work", but I think that might be an illusion. Often the features we do for browser side are very front-end only. Some things like checkouts might not even make much sense to have with server side rendering.&lt;/p&gt;

&lt;p&gt;But I don't know. How do you feel about React codebases that you face every day? Does it seem like HTML and CSS is obvious to you, or is it out of your face? If someone with less experience had a look at the code would web standards be obvious to them? Do your tests reflect that, indeed, you are really outputting HTML? Do the tests include accessibility checks? HTML validation? Is the code rich on a variety of HTML elements, or do you only have a bunch of divs and spans? Does the JavaScript code rely on native browser features, or are existing browser features rather mimicked by JS?&lt;/p&gt;

&lt;p&gt;At least I miss many of these on my everyday project at work.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to use ControlValueAccessor to enhance date input with automatic conversion and validation</title>
      <author>Dharmen Shah</author>
      <pubDate>Thu, 03 Jun 2021 09:26:56 +0000</pubDate>
      <link>https://dev.to/shhdharmen/how-to-use-controlvalueaccessor-to-enhance-date-input-with-automatic-conversion-and-validation-3lo4</link>
      <guid>https://dev.to/shhdharmen/how-to-use-controlvalueaccessor-to-enhance-date-input-with-automatic-conversion-and-validation-3lo4</guid>
      <description>&lt;p&gt;Overall idea behind this article to explain and demonstrate the usage of &lt;code&gt;ControlValueAccessor&lt;/code&gt; and &lt;code&gt;Validator&lt;/code&gt; interfaces . The former is used to bind together a FormControl from Forms package and native DOM elements. The latter is used to implement validation logic. They can exist independently of each other, but in this article we’ll implement both using a single directive. Our directive will add the following functionality to the application:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Conversion between input value and control value&lt;/li&gt;
&lt;li&gt;Validation for invalid date&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you’re using &lt;code&gt;ControlValueAccessor&lt;/code&gt; for the first time, I would recommend going through this article first: &lt;a href="https://indepth.dev/posts/1055/never-again-be-confused-when-implementing-controlvalueaccessor-in-angular-forms"&gt;Never again be confused when implementing ControlValueAccessor in Angular forms&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conversion-of-values"&gt;
  &lt;/a&gt;
  Conversion of values
&lt;/h2&gt;

&lt;p&gt;We will first create a directive and handle conversion between UI and control value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app/directives/date-input.directive.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Directive&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;NG_VALUE_ACCESSOR&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/forms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input[type=date]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NG_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useExisting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DateInputDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DateInputDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;writeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;registerOnTouched&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We mainly did 3 things for directive:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Set the selector to &lt;code&gt;input[type=date]&lt;/code&gt; - This will add the conversion mechanism and validations to all date-inputs without any extra effort.&lt;/li&gt;
&lt;li&gt;Defined &lt;code&gt;DateInputDirective&lt;/code&gt; class as Value Accessor through the &lt;code&gt;NG_VALUE_ACCESSOR&lt;/code&gt; token. Our directive will be used by Angular to set-up synchronisation with &lt;code&gt;FormControl&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;implement&lt;/code&gt;ed the &lt;code&gt;ControlValueAccessor&lt;/code&gt; interface&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For this example, we are only concerned with two methods on the interface:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;writeValue&lt;/code&gt; - this method is used to write a value to the native DOM element. Simply put, this can be utilised to convert &lt;code&gt;FormControl&lt;/code&gt; value to UI value.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;registerOnChange&lt;/code&gt; - This method will help us to store a function, which will be called by value-changes on the UI. In simpler terms, with this we can convert UI value to &lt;code&gt;FormControl&lt;/code&gt; value.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This illustration from the linked article above demonstrates this mechanism:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j5Kg5IBr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622711830989/ScvpcAtnV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j5Kg5IBr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622711830989/ScvpcAtnV.png" alt="This illustration from the linked article above demonstrates this mechanism"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-value-to-the-native-dom-element-with-raw-writevalue-endraw-"&gt;
  &lt;/a&gt;
  Writing value to the native DOM element with &lt;code&gt;writeValue&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;We want to show the correct and formatted date on the UI when it gets updated through &lt;code&gt;FormControl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For example, let’s assume that we are getting &lt;a href="https://www.w3.org/TR/NOTE-datetime"&gt;ISO string of date&lt;/a&gt; from our API, which looks something like this: &lt;code&gt;1994-11-05T08:15:30-05:00&lt;/code&gt;, and when we set the value for &lt;code&gt;FormControl&lt;/code&gt; bound to the date input, we want the &lt;code&gt;input[type=date]&lt;/code&gt; to display date in correct format.&lt;/p&gt;

&lt;p&gt;The code below demonstrates how we convert the ISO string into &lt;code&gt;YYYY-MM-DD&lt;/code&gt; before we set the resulting value for the native &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date"&gt;HTML date input&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app/directives/date-input.directive.ts&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;formatDate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/common&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DateInputDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;writeValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateISOString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;UIValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formatDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateISOString&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YYYY-MM-dd&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;en-IN&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_elementRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;UIValue&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s what’s going on above:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We are creating a string called &lt;code&gt;UIValue&lt;/code&gt;, which will hold the date in &lt;code&gt;YYYY-MM-DD&lt;/code&gt; format. As you can see, we have used the &lt;a href="https://angular.io/api/common/formatDate"&gt;&lt;code&gt;formatDate&lt;/code&gt;&lt;/a&gt; function from &lt;code&gt;@angular/common&lt;/code&gt; to get the formatted date.&lt;/li&gt;
&lt;li&gt;And then, we are setting &lt;code&gt;input&lt;/code&gt;’s &lt;code&gt;value&lt;/code&gt; attribute using &lt;code&gt;Renderer2&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s quickly try out the above changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app/app.component.ts&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./app.component.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AppComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;fg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormGroup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;FormControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note 2 things in above code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We set the current date’s ISO string in &lt;code&gt;date&lt;/code&gt; &lt;code&gt;FormControl&lt;/code&gt;, ideally you would get it from API.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We created a &lt;code&gt;date&lt;/code&gt; getter to get the &lt;code&gt;FormControl&lt;/code&gt;. In a reactive form, you can always access any form control through the &lt;code&gt;get&lt;/code&gt; method on its parent group, but sometimes it's useful to define getters as shorthand for the template.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- src/app/app.component.html --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;code&amp;gt;
    &amp;lt;b&amp;gt;Control Value: &amp;lt;/b&amp;gt;{{ date.value }}
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;


If you look at the output now, it is setting the correct date in input:

![Output after setting writeValue](https://cdn.hashnode.com/res/hashnode/image/upload/v1622711924429/MLYhqFPtG.png)

## Getting value from the native DOM element with `registerOnChange`

The DOM element holds the value as formatted date. When the user updates the value, we'll need to convert it to a valid ISO string.

Let’s add a `HostListener` first:



```typescript
// src/app/directives/date-input.directive.ts

// …

export class DateInputDirective implements ControlValueAccessor {

  // …

  @HostListener('input', ['$event.target.valueAsNumber'])
  onInput = (_: any) =&amp;gt; {};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are using &lt;code&gt;valueAsNumber&lt;/code&gt; to read the value. &lt;code&gt;valueAsNumber&lt;/code&gt; returns the timestamp in milliseconds, the reason we are using it is because it will help us directly get date using &lt;code&gt;new Date(valueAsNumber)&lt;/code&gt;. Also notice the &lt;code&gt;onInput&lt;/code&gt; function above, it’s just a skeleton for now.&lt;/p&gt;

&lt;p&gt;It’s time to implement the conversion logic in &lt;code&gt;registerOnChange&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app/directives/date-input.directive.ts&lt;/span&gt;

&lt;span class="c1"&gt;// …&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DateInputDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// …&lt;/span&gt;

  &lt;span class="nx"&gt;registerOnChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;registerOnChange&lt;/code&gt; is called just once by Angular, passing us the callback named &lt;code&gt;fn&lt;/code&gt; in the code above. We can use this callback to update the &lt;code&gt;FormControl&lt;/code&gt; value as a reaction to DOM element update. And we are calling it on the &lt;code&gt;input&lt;/code&gt; event of date-input through &lt;code&gt;onInput&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;We also need to create a couple of helper functions, you can change them as per your need:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dateObj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValidDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dateObj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;dateObj&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;toISOString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;isValidDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;isNaN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s look at the output now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0O21nZyL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622712049749/CTIkd2cUv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0O21nZyL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622712049749/CTIkd2cUv.gif" alt="Output after setting registerOnChange"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it’s updating the control's value with a valid ISO string.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validation"&gt;
  &lt;/a&gt;
  Validation
&lt;/h2&gt;

&lt;p&gt;Now we will add the validation part so that date-input supports validation out-of-the box.&lt;/p&gt;

&lt;p&gt;We will first add &lt;code&gt;NG_VALIDATORS&lt;/code&gt; in providers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/app/directives/date-input.directive.ts&lt;/span&gt;

&lt;span class="c1"&gt;// …&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input[type=date]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NG_VALUE_ACCESSOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useExisting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DateInputDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NG_VALIDATORS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;useExisting&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;DateInputDirective&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will implement the &lt;code&gt;Validator&lt;/code&gt; interface and add &lt;code&gt;validate&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DateInputDirective&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;ControlValueAccessor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Validator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;

  &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AbstractControl&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ValidationErrors&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;control&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isValidDate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Angular will call the &lt;code&gt;validate&lt;/code&gt; method whenever the value of the control changes.&lt;/p&gt;

&lt;p&gt;Let’s modify the template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;[formGroup]=&lt;/span&gt;&lt;span class="s"&gt;"fg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
        &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;
        &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"birthDate"&lt;/span&gt;
        &lt;span class="na"&gt;formControlName=&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;
      &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"invalid-feedback"&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"(date?.touched || date?.dirty) &amp;amp;&amp;amp; date?.invalid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Invalid Date
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we added a &lt;code&gt;div&lt;/code&gt; to show a validation message. It uses the &lt;code&gt;date&lt;/code&gt; getter defined in the component class.&lt;/p&gt;

&lt;p&gt;Let’s understand the &lt;code&gt;*ngIf&lt;/code&gt; expression:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;ngIf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(date?.touched || date?.dirty) &amp;amp;&amp;amp; date?.invalid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;We don’t want to show validation message if user has not interacted with the input, so we have added &lt;code&gt;date?.touched || date?.dirty&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;We also don’t want to show if &lt;code&gt;date&lt;/code&gt; is valid, so we added &lt;code&gt;date?.invalid&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can read more about &lt;a href="https://angular.io/guide/form-validation#validating-form-input"&gt;Validating form input on Angular docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s look at the output now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ECMerjgk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622712111240/8bzSQUJnv.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ECMerjgk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622712111240/8bzSQUJnv.gif" alt="Output after implementing Validator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;We learned below:&lt;/p&gt;

&lt;p&gt;✅  How to use &lt;code&gt;ControlValueAccessor&lt;/code&gt; to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Convert UI value to valid ISO string and attach it to form-control’s value&lt;/li&gt;
&lt;li&gt;  Convert form-control’s ISO string value to &lt;code&gt;YYYY-MM-DD&lt;/code&gt; format and update the same on UI&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;✅  How to use &lt;code&gt;Validator&lt;/code&gt; to validate user input for date&lt;/p&gt;

&lt;p&gt;You can find the code on &lt;a href="https://stackblitz.com/edit/angular-ivy-khuzec?file=src/app/date-input.directive.ts"&gt;Stackblitz&lt;/a&gt; and &lt;a href="https://github.com/shhdharmen/angular-date-input-directive"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>angular</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Guidance of how React works</title>
      <author>nabilhusniros</author>
      <pubDate>Thu, 03 Jun 2021 09:25:03 +0000</pubDate>
      <link>https://dev.to/nabilhusniros/guidance-of-how-react-works-2lb7</link>
      <guid>https://dev.to/nabilhusniros/guidance-of-how-react-works-2lb7</guid>
      <description>&lt;p&gt;Hi Guys, I am new to this programming language and i have the basic of HTML &amp;amp; CSS. Currently i am learning about javascript and reactjs because i have an assessment of creating a movie app using reactjs and API. My concern is right now that im scared that i won’t be able to do the assessment. Can someone guide for me to understand better about it? #react #javascript #movieapp #programming #webdeveloper&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>vscode</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Why `hsl` is better</title>
      <author>Siddharth</author>
      <pubDate>Thu, 03 Jun 2021 09:16:39 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/why-hsl-is-better-3inl</link>
      <guid>https://dev.to/siddharthshyniben/why-hsl-is-better-3inl</guid>
      <description>&lt;p&gt;I prefer &lt;code&gt;hsl&lt;/code&gt; over &lt;code&gt;rgb&lt;/code&gt;. It's really impossible to get colors manually using &lt;code&gt;rgb&lt;/code&gt; (unless you have some paint and a palette near you). &lt;code&gt;hsl(h, s, l)&lt;/code&gt;/&lt;code&gt;hsla(h, s, l, a)&lt;/code&gt; is really easy to understand.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;h&lt;/code&gt; - &lt;strong&gt;Hue:&lt;/strong&gt; The hue. It's the only thing you actually need to know. Think of it like a color wheel. Around 0&lt;sup&gt;o&lt;/sup&gt; and 360&lt;sup&gt;o&lt;/sup&gt; are reds. 120&lt;sup&gt;o&lt;/sup&gt; is where greens are and 240&lt;sup&gt;o&lt;/sup&gt; are blues. Use anything in between 0-360. Values above and below will be modulus 360.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;s&lt;/code&gt; - &lt;strong&gt;Saturation:&lt;/strong&gt; 0% is completely desaturated (grayscale). 100% is fully saturated (full color).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;l&lt;/code&gt; - &lt;strong&gt;Lightness:&lt;/strong&gt; 0% is completely dark (black). 100% is completely light (white). 50% is average lightness.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;a&lt;/code&gt; - &lt;strong&gt;Alpha:&lt;/strong&gt; Opacity/Transparency value. 0 is fully transparent. 1 is fully opaque. 0.5 is 50% transparent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can hand-manipulate any of those four values and have a decent idea of what's going to take place. Change the hue to take a journey around the color wheel. Change the saturation to get deeper or more muted hues. Change the lightness to essentially mix in black or white.&lt;/p&gt;

&lt;p&gt;You may know what &lt;code&gt;rgb(0, 0, 0)&lt;/code&gt; and &lt;code&gt;rgb(255, 0, 0)&lt;/code&gt; is, but creating a sea blue and going a bit darker or getting a deep yellow isn't exactly math.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hsl&lt;/code&gt; is also easy to manipulate with JavaScript. You could create a color scheme from a hue by adjusting the saturation and lightness.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What is Encapsulation in Java?</title>
      <author>Keshav Kumar</author>
      <pubDate>Thu, 03 Jun 2021 09:02:51 +0000</pubDate>
      <link>https://dev.to/keshavcodex/what-is-encapsulation-in-java-4583</link>
      <guid>https://dev.to/keshavcodex/what-is-encapsulation-in-java-4583</guid>
      <description>&lt;p&gt;Encapsulation is one of the fundamental units of object-oriented programming. It simply means that putting all the data at one place, Binding And Wrapping of data and methods together is called Encapsulation.&lt;/p&gt;

&lt;p&gt;Through encapsulation we can achieve data hiding, if you are familiar with any object oriented programming language then you must be familiar with getters and setters method. When we try hide the data then we use "private" access modifier to stop the any kind of modification of attributes. Now the question arises if we have stopped any modification then how will we change or get the value of elements, so for that only getters and setters methods are used.&lt;br&gt;
Getter method is used to return the value of that element and setter method is used to put the value in that element.&lt;/p&gt;

&lt;p&gt;Now lets understand it with an example:&lt;br&gt;
private int price;&lt;br&gt;
Here the price will not be accessible outside of the class, but we can set the data through set method,&lt;/p&gt;

&lt;p&gt;public void setPrice(int price){&lt;br&gt;
  this.price=price;&lt;br&gt;
}&lt;br&gt;
and now we can get the data through get method,&lt;/p&gt;

&lt;p&gt;public int getPrice(){&lt;br&gt;
   return price;&lt;br&gt;
}&lt;/p&gt;

</description>
      <category>encapsulation</category>
      <category>java</category>
      <category>getter</category>
      <category>setters</category>
    </item>
    <item>
      <title>How I Got Selected into Google Summer of Code</title>
      <author>Rohan Lekhwani</author>
      <pubDate>Thu, 03 Jun 2021 08:55:25 +0000</pubDate>
      <link>https://dev.to/rohanlekhwani/how-i-got-selected-into-google-summer-of-code-27</link>
      <guid>https://dev.to/rohanlekhwani/how-i-got-selected-into-google-summer-of-code-27</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;More than 50,000 students around the world register for GSoC every year and of those who submit a proposal only 1200 are accepted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Organizations at GSoC work within Operating Systems to Web to Cloud and even applications within Science and Medicine thereby covering almost the entire spectrum of Computer Science.&lt;/p&gt;

&lt;p&gt;I got selected by Rocket.Chat.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UTLpnVzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sag594vzwpfylfeai52d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UTLpnVzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sag594vzwpfylfeai52d.jpg" alt="GSoC Acceptance Mail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rocket.chat"&gt;Rocket.Chat&lt;/a&gt; is the ultimate communication platform for teams — say an open-sourced Slack with a different business model.&lt;/p&gt;

&lt;p&gt;It offers web and phone based communication platforms, integrated omnichannel features and even has an &lt;a href="https://rocket.chat/marketplace/"&gt;App Store&lt;/a&gt; of its own where you can publish and monetize apps that run on Rocket.Chat!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-i-did-before-applying-to-gsoc"&gt;
  &lt;/a&gt;
  What I did before applying to GSoC
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Selecting Organizations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Around December, I started going through organizations that got selected into GSoC the past year and shortlisting them based on a few &lt;strong&gt;criteria&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The last word is super-important here — to set out a criteria before selecting an organization.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My plan was to select 3 organizations and then shortlist one or two out of them further as time progressed. Here is what I set my org criteria to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. Work related to Web and Javascript.
2. Multiple projects awarded consistently.
3. Org selected every year at GSoC.
4. Repository remains active on GitHub.
5. A bigger org.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After about a week, I had shortlisted CircuitVerse, CloudCV and of course Rocket.Chat. Out of these three, Rocket.Chat fitted all of my criteria.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Open-source Contribution Leaderboard&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rocket.Chat has this amazing &lt;a href="https://gsoc.rocket.chat/"&gt;GSoC contribution leaderboard&lt;/a&gt; (started by a past GSoCer at Rocket.Chat) that counts how many contributions every student is making across all Rocket.Chat repositories. The top-10 contributors get a chance for a one-on-one with Gabriel Engel, the Founder and CEO of Rocket.Chat.&lt;/p&gt;

&lt;p&gt;I joined the &lt;a href="https://open.rocket.chat/channel/gsoc2021"&gt;#gsoc2021&lt;/a&gt; channel within Rocket.Chat and started making smaller contributions to the Rocket.Chat main repository at first. Communicating with Rocketeers led me to start working on the &lt;a href="https://github.com/RocketChat/Opensource-Contribution-Leaderboard"&gt;GSoC contribution leaderboard&lt;/a&gt; repository in a team of four.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m1Zf1Ohx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9e9a9kp455g5ts7i14m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m1Zf1Ohx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9e9a9kp455g5ts7i14m.jpg" alt="GSoC Contribution Leaderboard. I’m at number 5 :P"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I worked on filtering contributors by time, building an inclusion/exclusion list where the admin would be able to select which Rocket.Chat repositories to consider when counting contributions, dockerizing the application and fixing bugs. &lt;/p&gt;

&lt;p&gt;My contributions to this repository can be found &lt;a href="https://github.com/search?q=author:RonLek+repo:RocketChat/Opensource-Contribution-Leaderboard&amp;amp;type=issues"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RC4Community&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After deploying the GSoC Contribution Leaderboard, we started working on a more ambitious project in January — RC4Community!&lt;/p&gt;

&lt;p&gt;RC4Community, a project we built from scratch, was set to be a one-stop collaboration platform for teams using Git, in other words, Rocket.Chat’s own Gitter. Our power-team (as we called ourselves :P) worked super-hard for the next 3 months to give life to RC4Community.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kJSdzEsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0lvs2a4vuywlc3bdwqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kJSdzEsG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0lvs2a4vuywlc3bdwqg.png" alt="RC4Community in action at [https://community.rocket.chat/](https://community.rocket.chat/)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I worked specifically on the frontend and backend for creating channels and communities on a Rocket.Chat server from the RC4Community client, providing real-time user statistics — that is real-time updation of when users were online or away, repository information for every channel linked to a repository, CRUD operations for custom GitHub webhooks for repositories, embed badges for direct links to RC4Community rooms, dockerizing the application and a demo mode within RC4Community that set the path for what was to come.&lt;/p&gt;

&lt;p&gt;My contributions to RC4Community can be found &lt;a href="https://github.com/search?q=author:RonLek+repo:RocketChat/RC4Community&amp;amp;type=issues"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MemeBuddy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Around the end of March, I started developing an interest within Rocket.Chat Apps. These were Typescript coded (which I was unfamiliar with back then) and worked within the Rocket.Chat ecosystem.&lt;/p&gt;

&lt;p&gt;I had an idea that I thought was really cool. What if there was an app bot that could fetch memes from Reddit and post it directly within a Rocket.Chat room? The idea for MemeBuddy was born. It is Discord’s equivalent to DankMemer (installed on 5 million Discord servers) for Rocket.Chat.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fCm8IJfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rd3e7bsflnr2nnt6pzjy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fCm8IJfW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rd3e7bsflnr2nnt6pzjy.gif" alt="MemeBuddy triggered by /meme serving within Rocket.Chat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I extended MemeBuddy to not only work within the Rocket.Chat team collaboration platform but also within their LiveChat Widget used by millions of users on a daily basis. Find MemeBuddy on the &lt;a href="https://rocket.chat/marketplace?category=Social+%26+Fun"&gt;Rocket.Chat Apps Marketplace&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The repository for MemeBuddy can be found &lt;a href="https://github.com/RonLek/Rocket.Chat.MemeBuddy"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you found this cool. I even wrote a Medium &lt;a href="https://rohanlekhwani.medium.com/making-a-rocket-chat-app-8eaaa0263e39"&gt;blog&lt;/a&gt; over how you can make your own Rocket.Chat App.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-i-did-while-applying-to-gsoc"&gt;
  &lt;/a&gt;
  What I did while applying to GSoC
&lt;/h3&gt;

&lt;p&gt;Every year Rocket.Chat publishes its &lt;a href="https://docs.rocket.chat/contributors/google-summer-of-code/google-summer-of-code-2021"&gt;ideas list&lt;/a&gt; for GSoC. I was particularly interested in the Poll App Mega Extensions project (since I was fascinated with apps) and the Community Collaboration Platform: Improvements project (this is RC4Community in case you’re wondering :P).&lt;/p&gt;

&lt;p&gt;I got in touch with mentors of both the projects through Rocket.Chat rooms made specifically for discussion about each individual project idea. Mentors at Rocket.Chat were truly welcoming and made every effort to resolve doubts and confusions regarding ideas.&lt;/p&gt;

&lt;p&gt;I made sure to reciprocate mentors’ efforts by building sort of an MVP for a few features within the project ideas and got feedback over it. I followed a similar approach while writing my proposal. I read through the proposals of past GSoCers at Rocket.Chat and gleaned the important stuff I could use in mine. I made sure to get feedback after my first and final drafts from my mentors.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Getting feedback from mentors is of utmost importance. Make sure you leave enough time for them to review your proposal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I included Figma designs and code snippets for implementation details. I tried making my proposal as detailed and substance-driven as possible. In the timeline section I made sure to give a week-by-week estimate of what I would do.&lt;/p&gt;

&lt;p&gt;By the end of the application period I had submitted two proposals — one for the Poll App (31 pages!) and the other for the RC4Community project (18 pages). I’ll be sure to share links to both of my proposals along with Figma files later in this blog series.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The Project
&lt;/h3&gt;

&lt;p&gt;My Poll App Mega Extensions proposal got accepted! (good observation if you already saw that coming in the acceptance mail)&lt;/p&gt;

&lt;p&gt;The Poll App is the &lt;a href="https://rocket.chat/blog/product/top-8-the-most-popular-rocket-chat-apps/"&gt;numero uno&lt;/a&gt; among the most popular Rocket.Chat Apps. My mission during GSoC is to revamp the App to match it with its competitors (Polly.ai, Mentimeter, Kahoot!) by providing a truck-load of features.&lt;/p&gt;

&lt;p&gt;I’ll be working with my mentor during the GSoC period to extend the Poll App both through improved visualizations and additional functionalities.&lt;/p&gt;

&lt;p&gt;I’ll be writing biweekly blogs about my GSoC journey at Rocket.Chat. Follow my voyage on &lt;a href="https://rohanlekhwani.medium.com/about"&gt;Medium&lt;/a&gt;. ⭐&lt;/p&gt;




&lt;p&gt;Like what I do? Help me pull my next all-nighter. Consider &lt;a href="https://www.buymeacoffee.com/rohanlekhwani"&gt;buying me a coffee&lt;/a&gt;.🥤&lt;/p&gt;

&lt;p&gt;Rohan Lekhwani is an open source contributor and enthusiast. You can connect with him on &lt;a href="https://www.linkedin.com/in/rohanlekhwani/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="http://github.com/RonLek"&gt;GitHub&lt;/a&gt;, &lt;a href="https://twitter.com/Rohanlekhwani"&gt;Twitter&lt;/a&gt;, and his &lt;a href="https://ronlek.github.io/"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>career</category>
    </item>
    <item>
      <title>Future of CSS - Container Query</title>
      <author>Suprabha</author>
      <pubDate>Thu, 03 Jun 2021 08:37:07 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/future-of-css-container-query-4ma4</link>
      <guid>https://dev.to/suprabhasupi/future-of-css-container-query-4ma4</guid>
      <description>&lt;p&gt;&lt;span&gt;A&lt;/span&gt; web page consists of different sections and components, and we make them responsive by using CSS media queries. There is nothing wrong with that, but it has limitations.&lt;/p&gt;

&lt;p&gt;To use container queries we have to tell the container (the parent of the element we want to apply the query to) that we care about its dimensions, we do this with the new contain property.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-containment"&gt;
  &lt;/a&gt;
  CSS Containment 🔥
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;My blog&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Heading of a nice section&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Content here.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Another heading of another section&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;More content here.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;none&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Indicates the element renders as normal, with no containment applied.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;strict&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Indicates that all containment rules except style are applied to the element. This is equivalent to &lt;code&gt;contain: size layout paint&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;content&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we give each &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; the contain property with a value of content, when new elements are inserted the browser understands it does not need to relayout or repaint any area outside of the containing element's subtree, although if the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; is styled such that its size depends on its contents (e.g. with height: auto), then the browser may need to account for its size changing).&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;content&lt;/code&gt; value is shorthand for &lt;code&gt;contain: layout paint&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;It tells the browser that the internal layout of the element is totally separate from the rest of the page, and that everything about the element is painted inside its bounds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;size&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It does not offer much in the way of performance optimizations when used on its own.&lt;/p&gt;

&lt;p&gt;If you turn on contain: size you need to also specify the size of the element you have applied this to. It will end up being zero-sized in most cases, if you don't manually give it a size.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;layout&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Indicates that nothing outside the element may affect its internal layout and vice versa.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;style&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Indicates that, for properties that can have effects on more than just an element and its descendants, those effects don't escape the containing element. Note that this value is marked "at-risk" in the spec and may not be supported everywhere.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;paint&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Indicates that descendants of the element don't display outside its bounds. If the containing box is offscreen, the browser does not need to paint its contained elements — these must also be offscreen as they are contained completely by that box. And if a descendant overflows the containing element's bounds, then that descendant will be clipped to the containing element's border-box.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When we use media queries, most of the time we care about the available width (or &lt;strong&gt;inline-size&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You can  which will update as the spec is formed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-problem-do-container-queries-solve"&gt;
  &lt;/a&gt;
  What problem do container queries solve? 🤔
&lt;/h3&gt;

&lt;p&gt;When creating a responsive design you often use a media query to change the document layout based on the size of the viewport. Media queries give us the ability to size things based on ranges.&lt;/p&gt;

&lt;p&gt;Instead of looking at the viewport size, we can look at the container size and make our layout adjustments according to the space in the container.&lt;/p&gt;

&lt;p&gt;You need to install &lt;a href="https://www.google.com/intl/en/chrome/canary/"&gt;Google Chrome Canary&lt;/a&gt; to run this feature. Once you’ve activated the feature in chrome://flags and enable it. Then a restart chrome canary will be needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3F9osX-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/N6OOX7G.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3F9osX-w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/N6OOX7G.png" alt="CSS Google chrome canary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you can then begin to write code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;contain&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="n"&gt;inline-size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@container&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Checkout this Codepen for how it works 👇&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/suprabhasupi/embed/QWpQrqP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser Support 🌐
&lt;/h2&gt;

&lt;p&gt;Support for &lt;code&gt;container query&lt;/code&gt; is not good at this moment!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ougXgQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KtAW5hg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ougXgQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/KtAW5hg.png" alt="CSS container query browser support"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community-input"&gt;
  &lt;/a&gt;
  Community Input 👭
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ishadeed.com/article/say-hello-to-css-container-queries/"&gt;Container Query By Ahmad Shadeed&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference 🧐
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Containment"&gt;CSS Containment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries"&gt;CSS Container Query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://caniuse.com/css-container-queries"&gt;Can I Use CSS Container Queries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suprabhasupi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDe0OdcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4t25pJE.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        👩🏻‍💻 &lt;a href="https://www.suprabha.me/"&gt; suprabha.me&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Solution: Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts</title>
      <author>seanpgallivan</author>
      <pubDate>Thu, 03 Jun 2021 08:16:36 +0000</pubDate>
      <link>https://dev.to/seanpgallivan/solution-maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts-45p8</link>
      <guid>https://dev.to/seanpgallivan/solution-maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts-45p8</guid>
      <description>&lt;p&gt;&lt;em&gt;This is part of a series of Leetcode solution explanations (&lt;a href="https://dev.to/seanpgallivan/leetcode-solutions-index-57fl"&gt;index&lt;/a&gt;). If you liked this solution or found it useful,&lt;/em&gt; &lt;strong&gt;&lt;em&gt;please like&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;this post and/or&lt;/em&gt; &lt;strong&gt;&lt;em&gt;upvote&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;&lt;a href="https://leetcode.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts/discuss/1248591"&gt;my solution post on Leetcode's forums&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#leetcode-problem-1465-medium-maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts"&gt;
  &lt;/a&gt;
  &lt;a href="https://leetcode.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts/"&gt;Leetcode Problem #1465 (&lt;em&gt;Medium&lt;/em&gt;): Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts&lt;/a&gt;
&lt;/h4&gt;




&lt;h4&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Description:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a rectangular cake with height &lt;code&gt;h&lt;/code&gt; and width &lt;code&gt;w&lt;/code&gt;, and two arrays of integers &lt;code&gt;horizontalCuts&lt;/code&gt; and &lt;code&gt;verticalCuts&lt;/code&gt; where &lt;code&gt;horizontalCuts[i]&lt;/code&gt; is the distance from the top of the rectangular cake to the &lt;code&gt;i&lt;/code&gt;th horizontal cut and similarly, &lt;code&gt;verticalCuts[j]&lt;/code&gt; is the distance from the left of the rectangular cake to the &lt;code&gt;j&lt;/code&gt;th vertical cut.&lt;/p&gt;

&lt;p&gt;Return &lt;em&gt;the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays &lt;code&gt;horizontalCuts&lt;/code&gt; and &lt;code&gt;verticalCuts&lt;/code&gt;&lt;/em&gt;. Since the answer can be a huge number, return this modulo &lt;code&gt;10^9 + 7&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 1:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual:&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1PSJApys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.leetcode.com/uploads/2020/05/14/leetcode_max_area_2.png" alt="Example 1 Visual"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 2:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Explanation:&lt;/td&gt;
&lt;td&gt;The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Visual:&lt;/td&gt;
&lt;td&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U0D2UBHP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.leetcode.com/uploads/2020/05/14/leetcode_max_area_3.png" alt="Example 2 Visual"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Example 3:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Input:&lt;/td&gt;
&lt;td&gt;h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Output:&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#constraints"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2 &amp;lt;= h, w &amp;lt;= 10^9&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= horizontalCuts.length &amp;lt; min(h, 10^5)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= verticalCuts.length &amp;lt; min(w, 10^5)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= horizontalCuts[i] &amp;lt; h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1 &amp;lt;= verticalCuts[i] &amp;lt; w&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;It is guaranteed that all elements in &lt;code&gt;horizontalCuts&lt;/code&gt; are distinct.&lt;/li&gt;
&lt;li&gt;It is guaranteed that all elements in &lt;code&gt;verticalCuts&lt;/code&gt; are distinct.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h4&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Idea:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;em&gt;Code&lt;/em&gt;: &lt;a href="#javascript-code"&gt;&lt;em&gt;JavaScript&lt;/em&gt;&lt;/a&gt; | &lt;a href="#python-code"&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; | &lt;a href="#java-code"&gt;&lt;em&gt;Java&lt;/em&gt;&lt;/a&gt; | &lt;a href="#c-code"&gt;&lt;em&gt;C++&lt;/em&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;The trick to this problem is realizing that if the horizontal slices and vertical slices are perpendicular, then all vertical slices cross all horizontal slices. This means that we just need to find the largest of each, and the cross-section should be the largest slice.&lt;/p&gt;

&lt;p&gt;To find the largest slice of each, we need to first &lt;strong&gt;sort&lt;/strong&gt; the horizontal cuts (&lt;strong&gt;hc&lt;/strong&gt;) and vertical cuts (&lt;strong&gt;vc&lt;/strong&gt;), then iterate through both sets and keep track of the maximum difference found between two consecutive cuts (&lt;strong&gt;maxh&lt;/strong&gt;, &lt;strong&gt;maxv&lt;/strong&gt;). We need to not forget to include the two end cuts, which are found using &lt;strong&gt;0&lt;/strong&gt; and &lt;strong&gt;h&lt;/strong&gt;/&lt;strong&gt;w&lt;/strong&gt;, as well.&lt;/p&gt;

&lt;p&gt;Once we have the largest difference for both, we can just &lt;strong&gt;return&lt;/strong&gt; the product of these two numbers, &lt;strong&gt;modulo 1e9+7&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Time Complexity: O(N * log(N) + M * log(M))&lt;/strong&gt;  where &lt;strong&gt;N&lt;/strong&gt; is the length of &lt;strong&gt;hc&lt;/strong&gt; and &lt;strong&gt;M&lt;/strong&gt; is the length of &lt;strong&gt;vc&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Space Complexity: O(1)&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Javascript Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;maxArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;maxh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="nx"&gt;maxv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;w&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;maxh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maxh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;maxv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maxv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;maxh&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;maxv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#python-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Python Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;maxArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;maxh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;maxh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;maxv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxh&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;maxv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#java-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;Java Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;maxArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]),&lt;/span&gt;
            &lt;span class="n"&gt;maxv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
            &lt;span class="n"&gt;maxh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxh&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
            &lt;span class="n"&gt;maxv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxv&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)((&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;maxh&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;maxv&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;C++ Code:&lt;/em&gt;&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;(&lt;em&gt;Jump to&lt;/em&gt;: &lt;a href="#description"&gt;&lt;em&gt;Problem Description&lt;/em&gt;&lt;/a&gt; || &lt;a href="#idea"&gt;&lt;em&gt;Solution Idea&lt;/em&gt;&lt;/a&gt;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxArea&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
            &lt;span class="n"&gt;maxv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;maxh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;hc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;maxv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;vc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)((&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;maxh&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;maxv&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;1000000007&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>java</category>
      <category>python</category>
    </item>
  </channel>
</rss>
