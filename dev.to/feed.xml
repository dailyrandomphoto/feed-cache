<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Some of New ES12(ES2021) JavaScript Features.</title>
      <author>EswaraPrakash Vaithiyanathan</author>
      <pubDate>Mon, 20 Sep 2021 03:21:15 +0000</pubDate>
      <link>https://dev.to/eswaraprakash/some-of-new-es12-es2021-javascript-features-3pmo</link>
      <guid>https://dev.to/eswaraprakash/some-of-new-es12-es2021-javascript-features-3pmo</guid>
      <description>&lt;p&gt;&lt;strong&gt;Changes released in ES2021&lt;/strong&gt;&lt;br&gt;
The changes released in ES2021 are as follows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;String.prototype.replaceAll()&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Perform string replacement for all applicable parts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Existing replace()methods are valid only for the first part to be replaced, so if you wanted to replace everything you had to use a regular expression&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With this method, you can prevent replacement omissions due to regular expression mistakes, and it is easy to understand what you want to do at a glance.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let str = "I like programming. I like my job."
str.replaceAll ( "like" , "love" ) 
// Output result: "I love programming. I love my job." 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It is not yet supported by TypeScript by default, but you can  use it by changing the setting in tsconfig.json as follows. (Other changes to ES2021 will also be available)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ "compilerOptions" : { "lib" : [ "ES2021" ],    }, }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Promise.any()&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When any one of the promises running at the same time is processed resolved, that promise will be returned.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If all promises are reject, then AggregateError(the type when one operation needs to return multiple errors) is returned.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you want to know that the process was successful but you don't need to know which one, using any seems to be useful.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is also not yet supported by default in TypeScript. tsconfig.json It can be used by changing the settings as described above .&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise .any ([ new Promise ( ( resolve, reject ) =&amp;gt; 
setTimeout (reject, 100 , '1st' )), 
new Promise (( resolve, reject ) =&amp;gt; setTimeout (resolve, 200, '2nd')) ]) 
.then ( value =&amp;gt; console .log ( `first completed process: $ {value} `)) 
.catch (err =&amp;gt; console .log (err))
// Output result 
// First completed process: 2nd 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;WeakRefs&lt;/strong&gt;&lt;br&gt;
Makes the following feasible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Creating a "weak reference" to an object&lt;br&gt;
User-defined finalizer execution after objects are garbage collected.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A "weak reference" is a reference to an object that does not interfere with the execution of garbage collection.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Normally, when an object is created, it is kept in memory (a "strong reference"), but a "weak reference" is subject to garbage collection collection when memory needs to be freed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you use these two well, you can prevent memory leaks of data that is no longer referenced, such as deleted objects.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, the functionality of garbage collection is complex (when and how garbage collection occurs depends on the implementation of the JavaScript engine you are using ) and should be carefully considered for proper use. Officially, there is a note that it is better to avoid using it if possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It wasn't mentioned in the official TypeScript documentation, but according to this issue , it's available in version 4.1 and later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I tried to execute the following code in PlayGround, but it was certainly able to compile with 4.1 or later version.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const obj = new  Map (); 
const cache = new WeakRef (obj); 
// Output result 
// v4.0.5 
// Cannot find name'WeakRef'. 
// v4.1.5 
// None
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Logical Assignment Operators&lt;/strong&gt;&lt;br&gt;
You will be able to write as follows&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No extra branching is required when entering the initial value, and the implementation is refreshing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Available from version 4.0 on TypeScript&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// a || (a = b);
 a || = b;

// a &amp;amp;&amp;amp; (a = b);
 a &amp;amp;&amp;amp; = b;

// a ?? (a = b);
 a ?? = b;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Numeric separators&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;_Can be inserted between the numbers. (Even if you enter it, it will be recognized as a numerical value)&lt;/li&gt;
&lt;li&gt;This is possible with all numeric literals, not just decimal numbers. This makes the numbers easier to read&lt;/li&gt;
&lt;li&gt;Available from version 2.7 in TypeScript.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1_000_000_000            // 1.0101_475_938.38 // 
1.01           million, decimal point can also be used
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>es12</category>
      <category>es2021</category>
      <category>ecmascript</category>
    </item>
    <item>
      <title>Things I Wish I Knew Before My First Full-Time Job.</title>
      <author>Ankur Tyagi</author>
      <pubDate>Mon, 20 Sep 2021 02:54:01 +0000</pubDate>
      <link>https://dev.to/tyaga001/things-i-wish-i-knew-before-my-first-full-time-job-3878</link>
      <guid>https://dev.to/tyaga001/things-i-wish-i-knew-before-my-first-full-time-job-3878</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m9xxYaSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632105105720/8y4MS-mQA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m9xxYaSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632105105720/8y4MS-mQA.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-20s-could-be-your-most-defining-decade"&gt;
  &lt;/a&gt;
  Your 20s could be your most defining decade.
&lt;/h3&gt;

&lt;p&gt;You’ll have more freedoms &amp;amp; more choices than you’ve ever had in the past or will ever have in the future.&lt;/p&gt;

&lt;p&gt;It’s going to be a great adventure.&lt;/p&gt;

&lt;p&gt;The “real tech world” that everyone tries to scare you about is actually really awesome.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-you-know-here-are-things-i-wish-i-knew-before-my-first-fulltime-job"&gt;
  &lt;/a&gt;
  But you know, Here are things I wish I knew before my first full-time job.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Don’t be afraid to learn on the job.&lt;/li&gt;
&lt;li&gt;Don’t pretend to know more than you actually do&lt;/li&gt;
&lt;li&gt;You're responsible for your career, not your employer&lt;/li&gt;
&lt;li&gt;Everything is negotiable&lt;/li&gt;
&lt;li&gt;Live to work, but the right Way&lt;/li&gt;
&lt;li&gt;Working late is overrated&lt;/li&gt;
&lt;li&gt;The grass will always be greener&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-dont-be-afraid-to-learn-on-the-job"&gt;
  &lt;/a&gt;
  1. Don’t be afraid to learn on the job:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You’re not going to learn much if you just do what you’re assigned tasks in the office. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You also won’t move forward if you ask for more work and get grunt work. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Slow down and do things right and read up on the fundamentals.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-dont-pretend-to-know-more-than-you-actually-do"&gt;
  &lt;/a&gt;
  2. Don’t pretend to know more than you actually do:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you do this, the team will smell a rat very quickly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your co-workers will lose respect for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t feel bad about asking questions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nothing will sound too silly, in fact, your team will respect you more.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-youre-responsible-for-your-career-not-your-employer"&gt;
  &lt;/a&gt;
  3. You're responsible for your career, not your employer:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We spend most of our time at work But know that you're certainly not obligated to tell your employer that you're job hunting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Respect your work-life balance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Never let your boss micromanage you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find a mentor&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-almost-everything-is-negotiable-in-life"&gt;
  &lt;/a&gt;
  4. (Almost) everything is negotiable in life:
&lt;/h2&gt;

&lt;p&gt;Maybe the 1st offer you receive is exactly in line with your desired path, but often that isn't the case. &lt;/p&gt;

&lt;p&gt;It's easy to assume when you are just starting out, you may not have much leverage when it comes to jobs offered.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The most dangerous negotiation is the one you don't know you're in.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Never let your salary control your career.&lt;/p&gt;

&lt;p&gt;You get in career what you have the courage to ask for.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-live-to-work-but-the-right-way"&gt;
  &lt;/a&gt;
  5. Live to work, but the right Way:
&lt;/h2&gt;

&lt;p&gt;"Should I work to live or live to work? "&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Work isn’t a curse, but a gift God gave us.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Work stands at the center of your life. &lt;br&gt;
You never feel like you have done enough work.&lt;/p&gt;

&lt;p&gt;Finding a balance is the key in long term.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-working-late-is-overrated"&gt;
  &lt;/a&gt;
  6. Working late is overrated:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Your job is about long-term value creation, not about how many hours you work today.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re overloaded, don’t be afraid to take something off your plate.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create an env where work can be done in a rewarding, satisfying, &amp;amp; productive way.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-the-grass-will-always-be-greener"&gt;
  &lt;/a&gt;
  7. The grass will always be greener:
&lt;/h2&gt;

&lt;p&gt;One of the biggest temptations you will face in your career is the  ➡ “What’s next?”&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There will always be a better job out there.&lt;/li&gt;
&lt;li&gt;Some discomfort is part of every job.&lt;/li&gt;
&lt;li&gt;You learn to appreciate things that you have right now.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I started my career, I was looking for a mentor for my career growth. &lt;/p&gt;

&lt;p&gt;Initial few years I didn't get a mentor &amp;amp; I struggled a lot. &lt;/p&gt;

&lt;p&gt;This was the pain but not now, I have shared all my experience with you to start in my book &amp;amp; grow like a champ dev.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FJzNkMHH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632105456570/IIzaHvFCp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FJzNkMHH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632105456570/IIzaHvFCp.png" alt="book.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome feedback I received from the community. Check out the book below.&lt;/p&gt;

&lt;p&gt;Grab the book now… &lt;a href="https://theankurtyagi.gumroad.com/l/nextgendev"&gt;ThePrimeGuide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;If you’re a regular reader, thank you, you’re a big part of the reason I’ve been able to share my life/career experiences with you.&lt;/p&gt;

&lt;p&gt;Connect with me on &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;Twitter &lt;/a&gt; &lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>To Comment or Not To Comment</title>
      <author>Robin</author>
      <pubDate>Mon, 20 Sep 2021 02:27:59 +0000</pubDate>
      <link>https://dev.to/bastianrob/to-comment-or-not-to-comment-55i3</link>
      <guid>https://dev.to/bastianrob/to-comment-or-not-to-comment-55i3</guid>
      <description>&lt;p&gt;Sometimes I feel like writing comment is a controversial topic in programming. Some will take the stance of:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Code is like humor. When you have to explain it, it’s bad.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Of which, I don't 100% agree with.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#misinterpretation"&gt;
  &lt;/a&gt;
  Mis-interpretation
&lt;/h2&gt;

&lt;p&gt;Let's take a bit of a bad example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At a glance, the code is quite obvious: Apply discount to a number, pass on the rate and the function will return the final result.&lt;/p&gt;

&lt;p&gt;Two months goes by and somebody else wanted to use this function and at a glance they use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;finalPrice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;expecting the &lt;code&gt;finalPrice = 90&lt;/code&gt; but instead got &lt;code&gt;finalPrice = -900&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this case, there's an illusion where the code is already self-documenting and self explanatory, but interpretation of a word between each developer might be different! What &lt;code&gt;rate&lt;/code&gt; means for the original coder is the rate of discount after it is divided by 100. But the next coder who tried to use it interpreted it as a percentage number.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Naming things is always regarded as one of the hardest thing in programming. Mis-interpretation will always happen when glossary of words between developers are different.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#too-much-focus-on-what-but-not-why"&gt;
  &lt;/a&gt;
  Too Much Focus on What but not Why
&lt;/h2&gt;

&lt;p&gt;Consider this bad and exaggerated example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;submitOrder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Oder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setFinalPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;applyDiscount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;order&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subTotal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sure now the code is obvious, every order will be given 10% discount. But it's now missing an important context on:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why should every order be applied 10% discount?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most of the time we can easily understand the code on what it does by tracing it line by line. But when things gets complicated, only focusing on what the code does loses the context where we need to know&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why the code is written as it is?&lt;br&gt;
Or, why there's a branching condition?&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#comment-your-intent"&gt;
  &lt;/a&gt;
  Comment your intent
&lt;/h2&gt;

&lt;p&gt;Most of the times, comment should never explain what the code does. But rather what the intention is.&lt;/p&gt;

&lt;p&gt;Let's again take a look of this simple example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doPayment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cardNumber&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isVisa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cardNumber&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;processPaymentOnlyForVisa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cardNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sure we know how to read that there's a special treatment for payment using Visa. But after maybe 1-2 months or when the original coder leave, the context of why Visa payment should be different is lost. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It might be business decision, it might be caused by some technical hurdles.&lt;br&gt;
But as long as the intention was not documented, the cause is lost for the next person who touched the code.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;a href="https://unsplash.com/photos/Gll-v69L8iA?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditShareLink"&gt;Cover image credits to: Artur Shamsutdinov&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Domain Driven Design Aggregates in Laravel</title>
      <author>Benjamin Delespierre</author>
      <pubDate>Mon, 20 Sep 2021 02:07:18 +0000</pubDate>
      <link>https://dev.to/bdelespierre/domain-driven-design-aggregates-in-laravel-5ei8</link>
      <guid>https://dev.to/bdelespierre/domain-driven-design-aggregates-in-laravel-5ei8</guid>
      <description>&lt;p&gt;Lately, I've been focusing on finding ways to bring &lt;a href="https://laravel.com/docs/8.x"&gt;Laravel&lt;/a&gt; and &lt;a href="https://martinfowler.com/bliki/DomainDrivenDesign.html"&gt;Domain Driven Design&lt;/a&gt; closer together. Because I love 😍 Laravel, but its architecture sucks 🤮&lt;/p&gt;

&lt;p&gt;So today, we're going to look at &lt;strong&gt;how to implement &lt;a href="https://martinfowler.com/bliki/DDD_Aggregate.html"&gt;aggregates&lt;/a&gt; using Laravel &amp;amp; &lt;a href="https://laravel.com/docs/8.x/eloquent"&gt;Eloquent&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-an-aggregate"&gt;
  &lt;/a&gt;
  What IS an aggregate?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A DDD aggregate is a cluster of domain objects that can be treated as a single unit. An example may be an &lt;strong&gt;order&lt;/strong&gt; and its &lt;strong&gt;line-items&lt;/strong&gt;, these will be separate objects, but it's useful to treat the &lt;strong&gt;order&lt;/strong&gt; (together with its &lt;strong&gt;line items&lt;/strong&gt;) as a single aggregate.&lt;br&gt;
— Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, an aggregate is a &lt;em&gt;bag&lt;/em&gt; of domain objects that represents something meaningful. Let's consider Fowler's order example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Domain\Model&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Models\Order&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;App\Models\LineItem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderAggregate&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;Order&lt;/span&gt; &lt;span class="nv"&gt;$root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cd"&gt;/** @var LineItem* */&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$lineItems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Order&lt;/span&gt; &lt;span class="nv"&gt;$root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt; &lt;span class="nv"&gt;$lineItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$root&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lineItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$lineItems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getRoot&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;Order&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cd"&gt;/** @return LineItem* */&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getLineItems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lineItems&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this aggregate, the domain objects are our Eloquent models &lt;code&gt;Order&lt;/code&gt; and &lt;code&gt;LineItem&lt;/code&gt;. It also embodies the following business rule: &lt;em&gt;"An order consists of an identifier, a creation date, and zero or more line items."&lt;/em&gt; (That business rule is sometimes referred to as an &lt;em&gt;invariant&lt;/em&gt;.)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-we-put-in-an-aggregate"&gt;
  &lt;/a&gt;
  What can we put in an aggregate?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;An aggregate will have one of its component objects be the aggregate root. Any references from outside the aggregate should only go to the aggregate root. The root can thus ensure the integrity of the aggregate as a whole.&lt;br&gt;
— Martin Fowler&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Beyond that, they may contain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Entities&lt;/li&gt;
&lt;li&gt;Collections, Lists, Sets, etc.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/bdelespierre/using-value-objects-in-laravel-models-44la"&gt;Value objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Value-typed properties (integers, strings, booleans etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You may think of it as a &lt;em&gt;document&lt;/em&gt; holding &lt;strong&gt;ALL&lt;/strong&gt; the data necessary to a given transaction (or use case.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Eloquent makes it easy to implement lazy-loading in your aggregates. In the above example, we could restructure the &lt;code&gt;getLineItems&lt;/code&gt; method so that it loads when it's used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;getLineItems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;array&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRoot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#can-they-have-commands"&gt;
  &lt;/a&gt;
  Can they have commands?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Yes.&lt;/strong&gt; And they should.&lt;/p&gt;

&lt;p&gt;You are not supposed to do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$car&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getEngine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But rather:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$car&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Forcing the exposure of aggregate's internal structure is &lt;em&gt;bad design&lt;/em&gt; 👎&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-persistretrieve-them"&gt;
  &lt;/a&gt;
  How do I persist/retrieve them?
&lt;/h2&gt;

&lt;p&gt;You're going to use the &lt;a href="https://martinfowler.com/eaaCatalog/repository.html"&gt;Repository Pattern&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Repositories&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OrderRepository&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;OrderAggregate&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$orderEntity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Order&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'items'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;findOrFail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;OrderAggregate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nv"&gt;$orderEntity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nv"&gt;$orderEntity&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;toArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;OrderAggregate&lt;/span&gt; &lt;span class="nv"&gt;$order&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="no"&gt;DB&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$order&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRoot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$order&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getLineItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nv"&gt;$item&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;order&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;associate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$order&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getRoot&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#rules-for-making-your-aggregates-pretty"&gt;
  &lt;/a&gt;
  Rules for making your aggregates pretty 💅
&lt;/h2&gt;

&lt;p&gt;From the awesome &lt;a href="https://www.dddcommunity.org/wp-content/uploads/files/pdf_articles/Vernon_2011_1.pdf"&gt;article series by Vaughn Vernon&lt;/a&gt; 🤩&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule #1: Keep them small.&lt;/strong&gt; It is tempting to cram one giant aggregate with anything every use case present and future might need. But it's a terrible design. You're going to run into performances and concurrency issues (when several people are working on the same aggregate at the same time).&lt;/p&gt;

&lt;p&gt;It's better to have several representations of order, depending on the broader context, than one. For instance, an order from a cart display page's point-of-view is not the same as from a billing system.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If we are going to design small aggregates, what does “small” mean? The extreme would be an aggregate with only its globally unique identity and one additional attribute, which is not what's being recommended [...].&lt;br&gt;
Rather, limit the aggregate to just the root entity and a minimal number of attributes and/or value-typed properties. The correct minimum is the ones necessary, and no more.&lt;br&gt;
Smaller aggregates not only perform and scale better, they are also biased toward transactional success, meaning that conflicts preventing [an update] are rare. This makes a system more usable.&lt;br&gt;
— Vaughn Vernon&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Rule #2: Model true invariants in consistency boundaries.&lt;/strong&gt; It sounds barbaric, but it's pretty simple; it means that, within a single transaction, there is no way one could &lt;em&gt;break&lt;/em&gt; the aggregate consistency (its compliance to business rules.)&lt;/p&gt;

&lt;p&gt;In other words, it should be impossible to create a bugged version of an aggregate from calling its methods.&lt;/p&gt;

&lt;p&gt;One implication of this rule is that a transaction should only commit a &lt;em&gt;single aggregate&lt;/em&gt;, since it's not possible by design to guarantee the consistency of several aggregates at once.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A properly designed aggregate is one that can be modified in any way required by the business with its invariants completely consistent within a single transaction.&lt;br&gt;
And a properly designed bounded context modifies only one aggregate instance per transaction in all cases. What is more, we cannot correctly reason on aggregate design without applying transactional analysis.&lt;br&gt;
Limiting the modification of one aggregate instance per transaction may sound overly strict. However, it is a rule of thumb and should be the goal in most cases. It addresses the very reason to use aggregates.&lt;br&gt;
— Vaughn Vernon&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Rule #3: Don't Trust Every Use Case.&lt;/strong&gt; Don't blindly assemble your aggregates based on what the use case specification dictates. They may contain elements that contradict the existing model or force you into committing several aggregates in a single transaction or worse, to model a giant aggregate that fits in a single transaction.&lt;/p&gt;

&lt;p&gt;Apply your judgment here and keep in mind that sometimes, the business goal can be achieved using &lt;a href="https://en.wikipedia.org/wiki/Eventual_consistency"&gt;&lt;em&gt;eventual consistency&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The team should critically examine the use cases and challenge their assumptions, especially when following them as written would lead to unwieldy designs.&lt;br&gt;
The team may have to rewrite the use case (or at least re-imagine it if they face an uncooperative business analyst).&lt;br&gt;
The new use case would specify eventual consistency and the acceptable update delay.&lt;br&gt;
— Vaughn Vernon&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Murphy's law states:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Anything that can possibly go wrong, does.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Properly designed aggregates guarantees that, within its boundaries, nothing can go wrong (well, if you write them according to the rules above, of course.) You can say goodbye to those &lt;code&gt;ifs&lt;/code&gt; laying around in your code, handling those cases &lt;em&gt;that are not supposed to happen but happen anyway.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Don't allow your model to grow beyond your control. Stop using raw data, &lt;a href="https://stackoverflow.com/questions/41188002/what-does-the-term-plain-old-php-object-popo-exactly-mean"&gt;POPOs&lt;/a&gt;, and unguarded models whose state is uncertain everywhere in your Laravel application. Use aggregates instead 👍 and connect your model to the actual business your app is supposed to carry.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h2&gt;

&lt;p&gt;I hope you enjoyed reading this article! If so, please leave a ❤️ or a 🦄 and &lt;a href="https://dev.to/bdelespierre"&gt;consider subscribing!&lt;/a&gt; I write posts on PHP, architecture, and Laravel on a monthly basis.&lt;/p&gt;

&lt;p&gt;A huge thanks to &lt;a href="https://vaughnvernon.com/"&gt;Vaughn Vernon&lt;/a&gt; for his articles on &lt;a href="https://martinfowler.com/bliki/DomainDrivenDesign.html"&gt;DDD&lt;/a&gt; 🙏&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>If we're talking about learning... I'm Batman!</title>
      <author>Bruno Noriller</author>
      <pubDate>Mon, 20 Sep 2021 01:35:24 +0000</pubDate>
      <link>https://dev.to/noriller/if-we-re-talking-about-learning-i-m-batman-1f00</link>
      <guid>https://dev.to/noriller/if-we-re-talking-about-learning-i-m-batman-1f00</guid>
      <description>&lt;p&gt;2021-09-18 was Batman's Day, and should you have to deal with a nasty bug or with a clown in make up... you have to be prepared!&lt;/p&gt;

&lt;p&gt;My question for you today is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you prepare yourself? How do you learn?&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Little Disclaimer&lt;/em&gt;: &lt;/p&gt;

&lt;p&gt;This is what works for me. It maybe won't work for you, and that's ok.&lt;/p&gt;

&lt;p&gt;Maybe you're the learning Superman or Wonderwoman...&lt;/p&gt;




&lt;p&gt;When I started I did the whole shebang of watching while copying everything... as is... with the bare minimum thought.&lt;/p&gt;

&lt;p&gt;I did ended up learning, but I could go only as far as whatever I was watching, and as we know, that's usually not enough.&lt;/p&gt;

&lt;p&gt;As I said last week &lt;a href="https://dev.to/noriller/if-you-have-this-three-things-you-can-be-a-programmer-too-28b8"&gt;here&lt;/a&gt;, we programmers thrive on problems. We need a problem to be able to find some solution... and to find a solution? We need to learn first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-then-comes-your-inner-batman"&gt;
  &lt;/a&gt;
  And then comes your inner Batman!
&lt;/h2&gt;

&lt;p&gt;While I could speak all about how Batman trains everyday. That's just the minimum of what you should be doing. &lt;/p&gt;

&lt;p&gt;And if you're facing problems, then you're probably been having enough training.&lt;/p&gt;

&lt;p&gt;But that's not enough! Not in the least... what you need is...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-utility-belt"&gt;
  &lt;/a&gt;
  The utility belt!
&lt;/h3&gt;

&lt;p&gt;If you're a Batman of learning, then you have your own utility belt. And what's so great about it? &lt;/p&gt;

&lt;p&gt;You don't need to know by heart how to reverse a binary tree, you just need to know how/where to start!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filling-your-belt"&gt;
  &lt;/a&gt;
  Filling your belt
&lt;/h3&gt;

&lt;p&gt;Sometimes you have a nasty bug, how did you solve it?&lt;/p&gt;

&lt;p&gt;You've seen a video where they did something cool? What did they do?&lt;/p&gt;

&lt;p&gt;That's when you fill your belt! And I mean quite literally... &lt;/p&gt;

&lt;p&gt;Although I don't recommend you to keep everything in memory, you can do it... but I would really recommend you using something like &lt;a href="http://notion.so"&gt;Notion&lt;/a&gt; to keep your notes organized.&lt;/p&gt;

&lt;p&gt;Keep a brief summary of what was done, where you've seen it, links, tags... anything to help you later find by one word or phrase.&lt;/p&gt;

&lt;p&gt;And when you need it... you just just save Gotham using the tools you've gathered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-joker-of-your-batman-learning"&gt;
  &lt;/a&gt;
  The Joker of your Batman Learning
&lt;/h2&gt;

&lt;p&gt;But be careful of one thing: Tutorial Hell! &lt;/p&gt;

&lt;p&gt;(That's when you keep on learning without ever using... and that's bad.)&lt;/p&gt;

&lt;p&gt;You need to never stop learning, but you also need practice. Too much of one without the other and Gotham will be in dang&lt;/p&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1BJM5F4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwvjemxwcoh1a0i0ieca.png" alt="Buy me a Coffee Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@sajjadahmadi?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Sajjad Ahmadi&lt;/a&gt; on &lt;a href="https://unsplash.com/@sajjadahmadi?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>learning</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Programming languages are overrated!</title>
      <author>Hargunbeer Singh</author>
      <pubDate>Mon, 20 Sep 2021 01:31:12 +0000</pubDate>
      <link>https://dev.to/hamiecod/programming-languages-are-overrated-1aba</link>
      <guid>https://dev.to/hamiecod/programming-languages-are-overrated-1aba</guid>
      <description>&lt;p&gt;“Most People” go on to learn  to use programming languages and frameworks rather than learning the core concepts of how a particular platform (say the web) works. “They” do not go on to learn how code gets executed in a programming language they rather pay more attention to learn how to code.&lt;/p&gt;

&lt;p&gt;I’ll support my opinion with an analogy to convince you - if you teach a person how to catch fish using a spear, the person would catch the fish and use the fish for nutrition but if you teach a person how exactly a spear works, or in other words, teach them the craft to use any weapon, the person would be able to feed himself for his whole life; even id the fish disappear, the person would be able to hunt other animals for food.&lt;/p&gt;

&lt;p&gt;Such is programming you teach a person how to write a timer in JavaScript, he will be able to sell that timer code for some money once; but if you teach the person how does programming and problem solving work at its core, the person will be able to feed himself for life. What I wanted to express via this short article is that - don’t go after learning more and more “programming languages”, go after learning how a particular niche works IN DEPTH.&lt;/p&gt;

&lt;p&gt;If you know the concepts well you can easily implement the system design easily in code. As very less people learn these concepts, it is an opportunity for you to become one of the top programmers in a niche.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>computerscience</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Bomberland: a competitive sandbox for practising machine learning</title>
      <author>Joy</author>
      <pubDate>Mon, 20 Sep 2021 00:48:51 +0000</pubDate>
      <link>https://dev.to/joooyz/bomberland-a-new-artificial-intelligence-competition-2i1k</link>
      <guid>https://dev.to/joooyz/bomberland-a-new-artificial-intelligence-competition-2i1k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-to-bomberland"&gt;
  &lt;/a&gt;
  Welcome to Bomberland
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.gocoder.one/bomberland?s=devto-blog"&gt;Bomberland&lt;/a&gt; is a new 1v1 AI competition developed by &lt;a href="https://www.gocoder.one?s=devto-blog"&gt;Coder One&lt;/a&gt;. It features a multi-agent adversarial environment inspired by the classic console game, Bomberman. &lt;/p&gt;

&lt;p&gt;Your task is to program an intelligent agent navigating a 2D grid world. Your agent controls a team of units collecting powerups and placing explosives, with the ultimate goal of taking your opponent down.&lt;/p&gt;

&lt;p&gt;Bomberland is a challenging problem for out-of-the-box machine learning algorithms. Be prepared to manage real-time decision making, planning, game theory, and both adversarial and cooperative play.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qDXeEEi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ybvj1iq76d3vpf87558.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qDXeEEi1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ybvj1iq76d3vpf87558.gif" alt="Bomberland preview" title="In Bomberland, each agent controls several units with the ultimate goal of taking down the opposing team."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-open-bomberland-arena"&gt;
  &lt;/a&gt;
  An open Bomberland arena
&lt;/h2&gt;

&lt;p&gt;Bomberland will feature an ongoing, always-on arena with an active leaderboard. Participants can get direct feedback on their strategies in 1v1 matches against other players.&lt;/p&gt;

&lt;p&gt;From time to time, we'll hold tournaments featuring live streams and prizes. Check out our previous &lt;a href="https://twitch.tv/CoderOneHQ"&gt;AI Sports Challenge streams&lt;/a&gt; for a sneak peek of what's ahead.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wcVVVTCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yum6w3j7mjotdaudjnux.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wcVVVTCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yum6w3j7mjotdaudjnux.jpg" alt="AI Sports Challenge Live Stream" title="AI Sports Challenge 2021 live stream on Twitch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-bomberland"&gt;
  &lt;/a&gt;
  Why Bomberland?
&lt;/h2&gt;

&lt;p&gt;We're creating Bomberland as a place for the community to explore and experiment with the latest cutting edge technologies from tree search algorithms to deep reinforcement learning.&lt;/p&gt;

&lt;p&gt;You'll want to check it out if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You're looking for a challenging hands-on ML project&lt;/li&gt;
&lt;li&gt;You're looking for a place to try out new libraries, frameworks, or research papers&lt;/li&gt;
&lt;li&gt;You've been fascinated by the work of companies like DeepMind and OpenAI&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-future"&gt;
  &lt;/a&gt;
  The future
&lt;/h2&gt;

&lt;p&gt;We envision Bomberland to evolve over time with new metas and challenges.&lt;/p&gt;

&lt;p&gt;Bomberland is part of our larger goal at Coder One to make cutting-edge ML accessible. We're focused on building out the right tools and infrastructure to support the community in progressively pushing the boundaries of what's possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-us-for-bomberland"&gt;
  &lt;/a&gt;
  Join us for Bomberland!
&lt;/h2&gt;

&lt;p&gt;The Bomberland competition is now live 🎉&lt;/p&gt;

&lt;p&gt;We have starter kits in Python and TypeScript to help you get started (and encourage any community contributions to the &lt;a href="https://github.com/CoderOneHQ/bomberland"&gt;starter kit repo&lt;/a&gt;).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.gocoder.one/bomberlands=devto-blog"&gt;Join Bomberland&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://discord.gg/DXpTKWQSpP"&gt;Join Discord&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>machinelearning</category>
      <category>programming</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Ngrx Entity and Selectors. The why and how</title>
      <author>Muhammad Muhktar Musa</author>
      <pubDate>Sun, 19 Sep 2021 22:40:59 +0000</pubDate>
      <link>https://dev.to/mcube25/ngrx-entity-and-selectors-the-why-and-how-27e2</link>
      <guid>https://dev.to/mcube25/ngrx-entity-and-selectors-the-why-and-how-27e2</guid>
      <description>&lt;p&gt;When using Ngrx to build an application, the problem of deciding the format of storing data inside the store is always there. The problem of handling the business data in a centralized store is something that will need to be done in the application. This process could be repetitive and time consuming. It could lead to handwriting the same reducer logic and selectors for different data types. This can be error prone and slows down the development process. We would cover how to solve this problems using the Ngrx Entity and selectors to improve an application.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#entity"&gt;
  &lt;/a&gt;
  Entity
&lt;/h4&gt;

&lt;p&gt;Ngrx Entity helps in handling business data in a store. It represents some sort of business data or user interface state. An entity is defined as typescript custom object type like in the example below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export interface EarlyconfigState &amp;lt;earlyConfig&amp;gt; {
  // additional entities state properties
  selectedId: number;
  loading: boolean;
  error: string;
  query: EarlyconfigSearchQuery;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As can be seen, the entity has a unique identifier field called selectedId. This unique id can be either a string or a number. It is a technical identifier that is unique to a given instance of the entity. Most data stored in a store are entities.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#entitystate-entityadapter-createentityadapter"&gt;
  &lt;/a&gt;
  EntityState, EntityAdapter, createEntityAdapter
&lt;/h4&gt;

&lt;p&gt;Ngrx Entity is a small library that helps keep entities in an ideal entity state format. It is designed to be used in conjunction with the Ngrx store and it is a key part of Ngrx ecosystem. Let us take a deeper look to see how entity helps in writing an Ngrx application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export interface EarlyconfigState extends EntityState&amp;lt;earlyConfig&amp;gt; {
  // additional entities state properties
  selectedId: number;
  loading: boolean;
  error: string;
  query: EarlyconfigSearchQuery;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the example code above we inherit our properties from EntityState. It is imported from the &lt;code&gt;@ngrx/store&lt;/code&gt;. The EntityState makes it easier to manipulate entities. &lt;br&gt;
 In order to be able to use the EntityState and other features of Ngrx Entity, an EntityAdapter needs to be created. This adapter is a utility class that provides a series of utility functions that are designed to make it really simple to manipulate entity state. The adapter allows all initial entity state to be written. Let us take a look at it in action&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const EarlyconfigAdapter: EntityAdapter&amp;lt;earlyConfig&amp;gt; = createEntityAdapter&amp;lt;earlyConfig&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The adapter can now be taken and used to define the initial state that will be needed for the reducers. This reducers will be implemented like in the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const initialEarlyconfigState: EarlyconfigState = EarlyconfigAdapter.getInitialState({
  // additional earlyconfig state properties
  selectedId: null,
  loading: false,
  error: '',
  query: {
    filter: '',
    sorting: '',
    limit: 999,
    page: 1
  }
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The adapter in turn can be used to write reducer functions and logic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export function EarlyconfigReducer(state = initialEarlyconfigState, action: EarlyconfigActions): EarlyconfigState {
  switch (action.type) {
    case EarlyconfigActionTypes.CreateEarlyconfig:
      return {
        ...state,
        loading: true,
        error: ''
      };

    case EarlyconfigActionTypes.CreateEarlyconfigSuccess:
      return {
        ...EarlyconfigAdapter.addOne(action.payload.result, state),
        loading: false,
        error: ''
      };

    default:
      return state;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#benefits-of-entity-adapter"&gt;
  &lt;/a&gt;
  Benefits of Entity Adapter
&lt;/h4&gt;

&lt;p&gt;Using adapters to write reducers spares a lot of work and helps in avoiding common reducer logic bugs. Using the adapter prevents the problem of accidentally mutating the store state and reduces the amount as well as reducing the amount of code needed to write reducers to the barest minimum.&lt;br&gt;
 Ngrx Entity helps with the commonly needed selectors. This selectors are then ready to be used directly in a component or as a starting point for building other selectors. Though the ngrx Entity allows the writing of state, reducer and selector logic to be easier, the reducer function itself still has to be written. Using the Ngrx Entity does not avoid having to write reducer logic for each entity. It makes it simpler. The convention to be followed is to pull all the closely related code that uses the adapter directly into the same file where the entity reducer function is defined.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export function EarlyconfigReducer(state = initialEarlyconfigState, action: EarlyconfigActions): EarlyconfigState {
  switch (action.type) {
    case EarlyconfigActionTypes.CreateEarlyconfig:
      return {
        ...state,
        loading: true,
        error: ''
      };

    case EarlyconfigActionTypes.CreateEarlyconfigSuccess:
      return {
        ...EarlyconfigAdapter.addOne(action.payload.result, state),
        loading: false,
        error: ''
      };

case EarlyconfigActionTypes.SearchAllEarlyconfigEntities:
      return {
        ...EarlyconfigAdapter.removeAll(state),
        loading: true,
        error: ''
      };

    case EarlyconfigActionTypes.SearchAllEarlyconfigEntitiesSuccess:
      return {
        ...EarlyconfigAdapter.setAll(action.payload.result, state),
        loading: false,
        error: ''
      };

    case EarlyconfigActionTypes.SearchAllEarlyconfigEntitiesFail:
      return {
        ...state,
        loading: false,
        error: 'Earlyyearsconfig search failed: ' + action.payload.error
      };
    default:
      return state;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In practice each entity has slightly different reducer logic so &lt;br&gt;
that there would be no code repetition between reducer functions.&lt;br&gt;
In conclusion, Ngrx Entity is an extremely useful package. In order to understand it, it is essential to first be familiar with the base store concepts like Actions, Reducers and effects. You can find lessons using the link below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://https://dev.to/mcube25/understanding-ngrx-actions-reducers-and-effects-j9e"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ngrx Entity is specifically designed to handle only the business entities in a store making it simple to the such entities in memory in a convenient way.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#selectors"&gt;
  &lt;/a&gt;
  Selectors
&lt;/h4&gt;

&lt;p&gt;Selectors are pure functions used for obtaining slices of store state. Ngrx store provides some helper functions for optimizing this selection. When selecting slices of state, selectors provide many features like &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Portability&lt;/li&gt;
&lt;li&gt;Memoization&lt;/li&gt;
&lt;li&gt;Composition&lt;/li&gt;
&lt;li&gt;Testability&lt;/li&gt;
&lt;li&gt;Type safety&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;
  &lt;a href="#createselector-function"&gt;
  &lt;/a&gt;
  createSelector function
&lt;/h5&gt;

&lt;p&gt;When using the createSelector function, the Ngrx store keeps track of the latest arguments in which a selector function was invoked. The last result can be returned when the arguments match without revoking a selector function. This is possible because of the nature of selectors which are pure functions.&lt;br&gt;
This provides performance benefits especially with functions that perform expensive computation.&lt;br&gt;
 The createSelector function can be used to select some data from the same state based on several slices of the same state. let us take a look an example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const getSelectedId = (state: EarlyconfigState) =&amp;gt; state.selectedId;
export const getLoading = (state: EarlyconfigState) =&amp;gt; state.loading;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are getting our state from the reducer file. We have a getSelectedId and getLoading objects that. The createSelector method creates a result that filters some of the state by another section of the state and brings the state up to date.&lt;br&gt;
The selector looks like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const {
  selectIds: EarlyconfigIds,
  selectEntities: EarlyconfigEntities,
} = EarlyconfigAdapter.getSelectors(getEarlyConfigState);


export const currentEarlyconfigId = createSelector(
    getEarlyConfigState,
  getSelectedId
);

export const currentEarlyconfigIds = createSelector(
  getEarlyConfigState,
  EarlyconfigIds
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The selector function returned by calling createSelector initially has a memoized value of null. After a selector is invoked the first time its value is stored in memory. If the selector is subsequently invoked with the same arguments, it will re-compute and update its memoized value. A selectors memoized value stays in memory indefinately. If the memoized value is a large dataset that is no longer needed, it is then possible to reset the memoized value to null so that the large dataset can be removed from memory. This is achieved by invoking the release method on the selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;currentEarlyConfigId.release();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>angular</category>
      <category>ngrx</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>LEVEL UP with JavaScript! LVL 7</title>
      <author>DevCronin</author>
      <pubDate>Sun, 19 Sep 2021 20:22:55 +0000</pubDate>
      <link>https://dev.to/devcronin/level-up-with-javascript-lvl-7-d73</link>
      <guid>https://dev.to/devcronin/level-up-with-javascript-lvl-7-d73</guid>
      <description>&lt;h3&gt;
  &lt;a href="#in-this-blog-series-tutorial-i-will-be-covering-some-of-the-basic-javascript-programming-concepts"&gt;
  &lt;/a&gt;
  In this blog series tutorial, I will be covering some of the basic JavaScript programming concepts.
&lt;/h3&gt;

&lt;p&gt;This is geared toward beginners and anyone looking to refresh their knowledge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#see-the-previous-level-here"&gt;
  &lt;/a&gt;
  See the &lt;a href="https://dev.to/devcronin/level-up-with-javascript-lvl-6-17ff"&gt;&lt;strong&gt;Previous Level Here&lt;/strong&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Level 7 will cover: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Store Multiple Values in One Variable Using JavaScript Arrays&lt;/li&gt;
&lt;li&gt;Nest One Array Within Another Array&lt;/li&gt;
&lt;li&gt;Access Array Data With Indexes&lt;/li&gt;
&lt;li&gt;Modify Array Data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#store-multiple-values-in-one-variable-using-javascript-arrays"&gt;
  &lt;/a&gt;
  Store Multiple Values in One Variable Using JavaScript Arrays
&lt;/h2&gt;

&lt;p&gt;Multiple values can be stored together by enclosing them with brackets []. &lt;br&gt;
These can be any combination of strings and/or numbers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Natural&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#nest-one-array-within-another-array"&gt;
  &lt;/a&gt;
  Nest One Array Within Another Array
&lt;/h2&gt;

&lt;p&gt;Nesting arrays within another array is also possible by using brackets inside of brackets. &lt;br&gt;
This is referred to as multi-dimensional array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;multiDimensionalArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hit points&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Damage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#access-array-data-with-indexes"&gt;
  &lt;/a&gt;
  Access Array Data With Indexes
&lt;/h2&gt;

&lt;p&gt;Indexes are a way to reference and then access data inside of an array.&lt;br&gt;
They use brackets and specify an entry in an array. &lt;br&gt;
Arrays use Zero-based indexing (starts the count from zero).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;diceArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;diceArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// 4&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#modify-array-data"&gt;
  &lt;/a&gt;
  Modify Array Data
&lt;/h2&gt;

&lt;p&gt;The entries of arrays are able to be changed, and this is referred to as mutable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;diceArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;diceArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;diceArray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// 4&lt;/span&gt;

&lt;span class="c1"&gt;// Now the 2 in our array is 4&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-my-blog-this-is-the-seventh-of-my-series-on-javascript-so-if-you-would-like-to-read-more-please-follow"&gt;
  &lt;/a&gt;
  Thank you for reading my blog! This is the seventh of my series on JavaScript so if you would like to read more, please follow!
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#see-the-next-level-here"&gt;
  &lt;/a&gt;
  See the &lt;a href="https://dev.to/devcronin/level-up-with-javascript-lvl-8-2egc-temp-slug-1226361"&gt;&lt;strong&gt;Next Level Here&lt;/strong&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#support-and-buy-me-a-coffee"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.buymeacoffee.com/ZachCronin"&gt;&lt;strong&gt;Support and Buy me a Coffee&lt;/strong&gt;&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>5 Things I've Learned in 6 Weeks on the Job</title>
      <author>Ash</author>
      <pubDate>Sun, 19 Sep 2021 19:46:01 +0000</pubDate>
      <link>https://dev.to/ash_bergs/5-things-i-ve-learned-in-6-weeks-on-the-job-1dc8</link>
      <guid>https://dev.to/ash_bergs/5-things-i-ve-learned-in-6-weeks-on-the-job-1dc8</guid>
      <description>&lt;p&gt;It's been 6 weeks since my first day as a real-deal, steadily employed frontend engineer. In those 6 weeks, I've made mistakes, felt stupid, learned a lot about living, production-level code, and myself. I've also seen that becoming a developer, no matter the path you take to get there, can only teach you so much about actually entering the industry and stepping into large projects built by multiple teams of knowledgeable individuals over several years. &lt;/p&gt;

&lt;p&gt;If I could go back and give me from 6 weeks ago any advice, as a new engineer embarking on her first journey with an official title, I'd have a few things to tell her, aside from the reminder to pick up extra coffee. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-try-not-to-call-attention-to-or-apologize-for-your-lack-of-experience"&gt;
  &lt;/a&gt;
  1. Try not to call attention to, or apologize for, your lack of experience.
&lt;/h3&gt;

&lt;p&gt;On my second day, after completing the nails-on-a-chalkboard process of setting up a laptop, the associated SSO/SAML accounts, and configuring my IDE and VPN, I happily cloned down the first repo I was to work in. Opening it I was immediately intimidated by the number of directories and files, and a tech stack comprised of many packages and libraries that were new to me.&lt;/p&gt;

&lt;p&gt;For a time I let that intimidation get the best of me, apologizing about a half dozen times to one teammate or another for my lack of prior knowledge, and I hesitated to pick up tickets and jump into working. Then I remembered I'm human - I can't possibly know everything there is to know about every library that hits npm, and navigating living code you had no hand in writing is difficult.&lt;/p&gt;

&lt;p&gt;It's like reading a multi-volume series, with all the fan-fic, the canon side-stories, the limited release collaborations - and then trying to figure out how you can not only add to that but make it better. There's a lot, and there's definitely a learning curve. Give yourself understanding, and if you need to reach out for guidance, try to remove the extra noise from your messages. Leave out the explanations and just ask your question as directly as possible, chances are your coworkers already know you're a junior without you reminding them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-your-coworkers-are-a-resource-but-a-limited-one"&gt;
  &lt;/a&gt;
  2. Your coworkers are a resource - but a limited one.
&lt;/h3&gt;

&lt;p&gt;This point stands no matter what level of developer you are - coworkers are there to give pointers, discuss sticking points, troubleshoot, and share the load, but there are only so many hours, and so much energy, in a day. Thankfully, Google doesn't rely on a squishy, gray, biological CPU - we can ask it questions, and endless variations of those questions, until the cows come home.&lt;/p&gt;

&lt;p&gt;In boot camp, I learned that it's almost always better to do your homework and brute force a solution that needs refinement than to implement nothing at all and ask someone else how to do it. Go forth and Google. Try things out, break stuff, figure out why it broke, and fix it - pull the problem apart.&lt;/p&gt;

&lt;p&gt;If you're still at an impasse, get in the habit of giving others context - a screenshot is only a &lt;code&gt;prt sc&lt;/code&gt; and &lt;code&gt;ctrl + v&lt;/code&gt; press away - and draft your questions. You'll be surprised how often this practice will lead you to an answer without ever pressing send. While you shouldn't be afraid to ask your coworkers questions and to learn from them, you should be respectful of their time and mindful of their mental energy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-document-document-document"&gt;
  &lt;/a&gt;
  3. Document, document, document
&lt;/h3&gt;

&lt;p&gt;Developers know the value of good documentation, which is why it's ironic that so many of us struggle with it on a personal level. Being in the habit of documenting your process and your day, especially as a junior developer, will do loads for recall and concentration, and make it look like you have your stuff together.&lt;/p&gt;

&lt;p&gt;There are numerous ways to go about documenting the day, but keep in mind that the best documentation is shareable and &lt;em&gt;&lt;code&gt;ctrl + f&lt;/code&gt;-able&lt;/em&gt; - unlike the barrage of sticky notes collecting on your desk, or abbreviated, barely legible scribbles in the margins of a notebook. Using a planning app like Trello you can create cards and easily drop in screenshots, attach notes and checklists, and if needed, share all of it with a peer.&lt;/p&gt;

&lt;p&gt;This approach helps me keep track of what was discussed and decided in meetings throughout the week, and creates a running log of the tasks I've completed. Once done with a card, it can be archived, creating a very handy backlog in the case that another developer has questions on code you implemented, removed, or changed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-dont-take-anything-personally"&gt;
  &lt;/a&gt;
  4. Don't take anything personally.
&lt;/h3&gt;

&lt;p&gt;Rarely in life is anything really about us as individuals, and this is doubly true come code review time. Your code will be scrutinized, and you shouldn't be surprised or upset when parts of it don't hold up to the magnifying glass. Chances are your coworkers didn't open your PR with the intent to destroy your self-esteem, so take these moments as a learning experience. Make suggested changes and try to understand why they were suggested in the first place. Keep your ego out of it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-dont-stop-learning"&gt;
  &lt;/a&gt;
  5. Don't stop learning.
&lt;/h3&gt;

&lt;p&gt;I identify as a completionist. There's something about checking things off a list that gives me a sense of accomplishment. But this personality trait is a double-edged sword that comes with a competitive streak, and a predisposition to tunnel vision. I wasn't on the job long before I caught myself logging several more hours than the expected 8 am to 5 pm in an attempt to get more done, but the effort wasn't yielding the expected result.&lt;/p&gt;

&lt;p&gt;For starters, I couldn't reach out for hints and pointers because my coworkers were logged off, attending to their mental well-being and personal lives. Furthermore, I was neglecting my own and wasting time spinning my tires trying to understand a tech stack from inside a legacy project, instead of building my own.&lt;/p&gt;

&lt;p&gt;Our coworkers simply don't have the time to teach us everything we have to know about the projects we're stepping into - no matter how intimately they might know themselves. If you're struggling to reason about your company's tech stack, try to find a Udemy or YouTube course that utilizes a similar one. When the working day is over, and your coworkers have called it a night, consider spending that hour or two of extra work there.&lt;/p&gt;

&lt;p&gt;Don't forget that part of being a developer is a commitment to being a lifelong student, and understand that nothing you learn is useless or single scope. So keep reading articles, stay up to date on what's making waves, support and utilize the community of remote educators this industry has built, and keep hacking on your passion projects.&lt;/p&gt;




&lt;p&gt;Breaking into a new industry is hard work. Once you succeed in landing a job it's easy to get swept up in the tide of new information, self-doubt, and confusion that comes with it. Keep in mind that all the things you did while job hunting, like building hobby projects, learning new frameworks and fundamentals, and updating your resume, all still apply - they've just shifted from the main burner.&lt;/p&gt;

&lt;p&gt;While you're at it, don't forget to enjoy the here-and-now. When you first started on this journey, perhaps struggling to write a for-loop or understand recursion, you probably imagined how great it would be once you got to where you are &lt;em&gt;right now&lt;/em&gt;, getting paid to code. So while you stress about the holes in your knowledge and how long it will take to get to the next benchmark, know that it's all a part of the process - and all you have to do is keep going.&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Weekly Digest 37/2021</title>
      <author>Marco Biedermann</author>
      <pubDate>Sun, 19 Sep 2021 19:43:42 +0000</pubDate>
      <link>https://dev.to/marcobiedermann/weekly-digest-37-2021-3lam</link>
      <guid>https://dev.to/marcobiedermann/weekly-digest-37-2021-3lam</guid>
      <description>&lt;p&gt;Welcome to my Weekly Digest #37 of this year.&lt;/p&gt;

&lt;p&gt;This weekly digest contains a lot of interesting and inspiring articles, videos, tweets, podcasts, and designs I consumed during this week.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interesting-articles-to-read"&gt;
  &lt;/a&gt;
  Interesting articles to read
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#designing-beautiful-shadows-in-css"&gt;
  &lt;/a&gt;
  Designing Beautiful Shadows in CSS
&lt;/h3&gt;

&lt;p&gt;Most of the shadows are fuzzy grey boxes. It doesn't have to be this way, though! CSS gives us the tools to create rich, lush, lifelike shadows. In this tutorial, Josh will show you how.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.joshwcomeau.com/css/designing-shadows/"&gt;Designing Beautiful Shadows in CSS&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-future-of-css-cascade-layers"&gt;
  &lt;/a&gt;
  The Future of CSS: Cascade Layers
&lt;/h3&gt;

&lt;p&gt;There’s a new CSS Language Feature coming to help us: Cascade Layers (CSS &lt;code&gt;@layer&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.bram.us/2021/09/15/the-future-of-css-cascade-layers-css-at-layer/"&gt;The Future of CSS: Cascade Layers (CSS @layer)&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#less-absolute-positioning-with-modern-css"&gt;
  &lt;/a&gt;
  Less Absolute Positioning with Modern CSS
&lt;/h3&gt;

&lt;p&gt;How to use use position:absolute less by leveraging modern CSS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ishadeed.com/article/less-absolute-positioning-modern-css/"&gt;Less Absolute Positioning With Modern CSS - Ahmad Shadeed&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#some-great-videos-i-watched-this-week"&gt;
  &lt;/a&gt;
  Some great videos I watched this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#react-storybook-crash-course"&gt;
  &lt;/a&gt;
  React Storybook Crash Course
&lt;/h3&gt;

&lt;p&gt;Designing and testing components are crucial to every application, but it can be difficult to view components in isolation. This makes it hard to design and test components, but with Storybook this is no longer an issue. Storybook makes developing, testing and working with a component library so much easier. You can test complex actions and ensure your components are always working as expected.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FUKpWgRyPlU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/DevSimplified"&gt;Web Dev Simplified&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-accentcolor"&gt;
  &lt;/a&gt;
  CSS accent-color
&lt;/h3&gt;

&lt;p&gt;It's a fun little thing. Or is it not really "little"? Dave says this is a massive improvement for design systems work where NOT having to re-create form components just for size and color changes is a big time saver.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/F17DzJYysWM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/chriscoyier"&gt;Chris Coyier&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stop-using-import-with-sass"&gt;
  &lt;/a&gt;
  Stop using @import with Sass
&lt;/h3&gt;

&lt;p&gt;The use of &lt;code&gt;@import&lt;/code&gt; has been deprecated in Sass for quite a while now, but a &lt;em&gt;lot&lt;/em&gt; of people still use it. In this video, I take a quick look at the replacements you should be using instead, &lt;code&gt;@use&lt;/code&gt; and &lt;code&gt;@forward&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CR-a8upNjJ0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/KevinJPowell"&gt;Kevin Powell&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#springy-animated-modals"&gt;
  &lt;/a&gt;
  Springy Animated Modals
&lt;/h3&gt;

&lt;p&gt;Create amazing animations in React with Framer Motion. In this tutorial, we build an interactive modal window from scratch and customize its spring animations&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/SuqU904ZHA4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/fireship_dev"&gt;Fireship&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#chrome-94-whats-new-in-devtools"&gt;
  &lt;/a&gt;
  Chrome 94 - What’s New in DevTools
&lt;/h3&gt;

&lt;p&gt;Use DevTools in your preferred language, new Nest Hub devices, new CSS container queries badge and more.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/N9Jiou61WH4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/ChromiumDev"&gt;Google Chrome Developers&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useful-github-repositories"&gt;
  &lt;/a&gt;
  Useful GitHub repositories
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#spotify-tui"&gt;
  &lt;/a&gt;
  Spotify TUI
&lt;/h3&gt;

&lt;p&gt;A Spotify client for the terminal written in Rust.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Rigellute"&gt;
        Rigellute
      &lt;/a&gt; / &lt;a href="https://github.com/Rigellute/spotify-tui"&gt;
        spotify-tui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Spotify for the terminal written in Rust 🚀
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Spotify TUI&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/Rigellute/spotify-tui/workflows/Continuous%20Integration/badge.svg?branch=master&amp;amp;event=push"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KaZbAirj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Rigellute/spotify-tui/workflows/Continuous%2520Integration/badge.svg%3Fbranch%3Dmaster%26event%3Dpush" alt="Continuous Integration"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0fb6d6fd68a7f1aaf3fef2395ab988e131dc9ab8ce362dc7495a995b9a7c9280/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c756576696f6c65742e737667"&gt;&lt;img src="https://camo.githubusercontent.com/0fb6d6fd68a7f1aaf3fef2395ab988e131dc9ab8ce362dc7495a995b9a7c9280/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c756576696f6c65742e737667" alt=""&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4f2dd37b98864707f081135aa1f0a010c88298012de47079e5d62116332a9b77/68747470733a2f2f746f6b65692e72732f62312f6769746875622f526967656c6c7574652f73706f746966792d7475693f63617465676f72793d636f6465"&gt;&lt;img src="https://camo.githubusercontent.com/4f2dd37b98864707f081135aa1f0a010c88298012de47079e5d62116332a9b77/68747470733a2f2f746f6b65692e72732f62312f6769746875622f526967656c6c7574652f73706f746966792d7475693f63617465676f72793d636f6465" alt=""&gt;&lt;/a&gt;
&lt;a href="https://crates.io/crates/spotify-tui" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0726d393cbc6a66f607c59a6344e8f020056c5fb8c2506fa5adcdfc3a91d952f/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f762f73706f746966792d7475692e737667" alt="Crates.io"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7ad65961355cafacd0ee544178e0b7bf8105ac0c8501fc53ae20033188da9aa5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f526967656c6c7574652f73706f746966792d7475693f636f6c6f723d253233633639346666"&gt;&lt;img src="https://camo.githubusercontent.com/7ad65961355cafacd0ee544178e0b7bf8105ac0c8501fc53ae20033188da9aa5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f526967656c6c7574652f73706f746966792d7475693f636f6c6f723d253233633639346666" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#contributors-"&gt;&lt;img src="https://camo.githubusercontent.com/5423e63b555735e528f7662c0f3ede6466802476a3decaeb6d840e5b3394e756/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d39312d6f72616e67652e7376673f7374796c653d666c61742d737175617265" alt="All Contributors"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://twitter.com/intent/follow?screen_name=AlexKeliris" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6d0650b8cd6e32bd099d8135f0eb137ac2af81bc8e213fe4ebd96eb0db6a6afd/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f416c65784b656c697269733f6c6162656c3d466f6c6c6f77253230416c6578616e6465722532304b656c69726973253230253238526967656c6c757465253239267374796c653d736f6369616c" alt="Follow Alexander Keliris (Rigellute)"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A Spotify client for the terminal written in Rust.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/12150276/75177190-91d4ab00-572d-11ea-80bd-c5e28c7b17ad.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MwBoGaIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/12150276/75177190-91d4ab00-572d-11ea-80bd-c5e28c7b17ad.gif" alt="Demo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The terminal in the demo above is using the &lt;a href="https://rigel.netlify.com/" rel="nofollow"&gt;Rigel theme&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Rigellute/spotify-tui#spotify-tui"&gt;Spotify TUI&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Rigellute/spotify-tui#installation"&gt;Installation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#homebrew"&gt;Homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#snap"&gt;Snap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#aur"&gt;AUR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#nix"&gt;Nix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#void-linux"&gt;Void Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#fedora-centos"&gt;Fedora/CentOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Rigellute/spotify-tui#cargo"&gt;Cargo&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#note-on-linux"&gt;Note on Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Rigellute/spotify-tui#windows-10"&gt;Windows&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#scoop-installer"&gt;Scoop installer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#manual"&gt;Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#connecting-to-spotifys-api"&gt;Connecting to Spotify’s API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Rigellute/spotify-tui#configuration"&gt;Configuration&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#limitations"&gt;Limitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#using-with-spotifyd"&gt;Using with spotifyd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#libraries-used"&gt;Libraries used&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Rigellute/spotify-tui#development"&gt;Development&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#windows-subsystem-for-linux"&gt;Windows Subsystem for Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#contributors"&gt;Contributors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Rigellute/spotify-tui#roadmap"&gt;Roadmap&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Rigellute/spotify-tui#high-level-requirements-yet-to-be-implemented"&gt;High-level requirements yet to be implemented&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;The binary executable is &lt;code&gt;spt&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
Homebrew&lt;/h3&gt;
&lt;p&gt;For both macOS and Linux&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;brew install spotify-tui&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;To update, run&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;brew upgrade spotify-tui&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Snap&lt;/h3&gt;
&lt;p&gt;For a system with Snap installed, run&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;snap install spt&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;The stable version will be installed for you automatically.&lt;/p&gt;
&lt;p&gt;If you want to install the nightly build, run&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;snap install spt --edge&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
AUR&lt;/h3&gt;
&lt;p&gt;For those on Arch Linux you can find the package on AUR &lt;a href="https://aur.archlinux.org/packages/spotify-tui/" rel="nofollow"&gt;here&lt;/a&gt;. If however you're using an AUR helper you can install directly from that, for…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Rigellute/spotify-tui"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#stargazer"&gt;
  &lt;/a&gt;
  Stargazer
&lt;/h3&gt;

&lt;p&gt;Your repo reached a stars milestone? Celebrate with a video of your stargazers!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pomber"&gt;
        pomber
      &lt;/a&gt; / &lt;a href="https://github.com/pomber/stargazer"&gt;
        stargazer
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Your repo reached a stars milestone? Celebrate with a video of your stargazers!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;Your repo reached a stars milestone? Celebrate with a video of your stargazers!&lt;/p&gt;
&lt;h2&gt;
Example&lt;/h2&gt;

  
    
    

    &lt;span class="m-1"&gt;out.mp4&lt;/span&gt;
    
  

  

  


&lt;h2&gt;
Make your own video&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1911623/121809008-75fe5c80-cc31-11eb-8f44-5df6183deca5.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_D0AKgfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1911623/121809008-75fe5c80-cc31-11eb-8f44-5df6183deca5.png" width="720"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1911623/121809050-ae059f80-cc31-11eb-9af9-2aa05a24bc7f.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D2BsZuIn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1911623/121809050-ae059f80-cc31-11eb-9af9-2aa05a24bc7f.png" width="720"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1911623/121809098-e1482e80-cc31-11eb-9ffc-e4d34f419fb1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ss9HSW4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1911623/121809098-e1482e80-cc31-11eb-9ffc-e4d34f419fb1.png" width="720"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1911623/121809174-1e142580-cc32-11eb-84cc-c5aa19698fc1.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ojCkt7x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1911623/121809174-1e142580-cc32-11eb-84cc-c5aa19698fc1.png" width="720"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1911623/121809216-54ea3b80-cc32-11eb-8b22-7d74306adb9e.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kdT8qXZ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1911623/121809216-54ea3b80-cc32-11eb-8b22-7d74306adb9e.png" width="720"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1911623/121809344-cf1ac000-cc32-11eb-93c3-cc6e58ff7988.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xZfkM20J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1911623/121809344-cf1ac000-cc32-11eb-93c3-cc6e58ff7988.png" width="720"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/1911623/121809394-fb364100-cc32-11eb-8a82-e9a6d25f37cf.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lr17zAoV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/1911623/121809394-fb364100-cc32-11eb-8a82-e9a6d25f37cf.png" width="720"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Dev&lt;/h2&gt;
&lt;p&gt;To run it locally you need a &lt;code&gt;.env&lt;/code&gt; file with a github token var &lt;code&gt;REMOTION_GITHUB_TOKEN&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
Credits&lt;/h2&gt;
&lt;p&gt;Made with &lt;a href="https://www.remotion.dev/" rel="nofollow"&gt;Remotion&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pomber/stargazer"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#restyle"&gt;
  &lt;/a&gt;
  Restyle
&lt;/h3&gt;

&lt;p&gt;A type-enforced system for building UI components in React Native with TypeScript.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Shopify"&gt;
        Shopify
      &lt;/a&gt; / &lt;a href="https://github.com/Shopify/restyle"&gt;
        restyle
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A type-enforced system for building UI components in React Native with TypeScript.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
&lt;code&gt;@shopify/restyle&lt;/code&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/688415/75268245-91084b80-57f7-11ea-905b-2a9046aa5ca3.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b92QY_Zy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://user-images.githubusercontent.com/688415/75268245-91084b80-57f7-11ea-905b-2a9046aa5ca3.gif" alt="RestyleTheme 2020-02-25 17_43_51"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Restyle library provides a type-enforced system for building UI components in React Native with TypeScript. It's a library for building UI libraries, with themability as the core focus.&lt;/p&gt;
&lt;p&gt;This library assumes that the UI is built upon a design system that (at the very least) defines a set of colors and spacing constants that lays as a foundation. While the library acknowledges that there can be exceptions to the system by allowing any style to be overridden, it keeps the developer most productive when one-off values are kept to a minimum.&lt;/p&gt;
&lt;p&gt;Here's an example of how a view built with Restyle components could look:&lt;/p&gt;
&lt;div class="highlight highlight-source-tsx position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-smi"&gt;ThemeProvider&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-s1"&gt;createBox&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-s1"&gt;createText&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-s1"&gt;createRestyleComponent&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-s1"&gt;createVariant&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-smi"&gt;VariantProps&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'@shopify/restyle'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-c"&gt;// See the "Defining Your Theme" readme section below&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-s1"&gt;theme&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;&lt;span class="pl-smi"&gt;Theme&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'./theme'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-smi"&gt;Box&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;createBox&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-smi"&gt;Theme&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Shopify/restyle"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#swc"&gt;
  &lt;/a&gt;
  swc
&lt;/h3&gt;

&lt;p&gt;swc is a super-fast compiler written in rust; producing widely-supported javascript from modern standards and typescript.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/swc-project"&gt;
        swc-project
      &lt;/a&gt; / &lt;a href="https://github.com/swc-project/swc"&gt;
        swc
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      swc is a super-fast compiler written in rust; producing widely-supported javascript from modern standards and typescript.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://swc.rs/" rel="nofollow"&gt;
    &lt;img alt="babel" src="https://res.cloudinary.com/practicaldev/image/fetch/s--u5vNwLC0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/swc-project/logo/master/swc.png" width="546"&gt;
  &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   Make the web (development) faster
&lt;/p&gt;

&lt;p&gt;
   &lt;a href="https://www.npmjs.com/package/@swc/core" rel="nofollow"&gt;
      &lt;img alt="npm Downloads" src="https://camo.githubusercontent.com/91e00ffa161fb5b8ec2e905fa0823bfa9136fa41f0f2dc9a13096bfb3214e307/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64772f407377632f636f7265"&gt;
   &lt;/a&gt;
    &lt;a href="https://crates.io/crates/swc_ecma_parser" rel="nofollow"&gt;
      &lt;img alt="undefined" src="https://camo.githubusercontent.com/dc1728d68d6ac27362d5e0471b8561743aae9a5ed577531339f086bcf17b7594/68747470733a2f2f696d672e736869656c64732e696f2f6372617465732f642f7377635f65636d615f7061727365722e7376673f6c6162656c3d6372617465732e696f253230646f776e6c6f616473"&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
   &lt;a href="https://github.com/swc-project/swc/actions/workflows/cargo.yml"&gt;
      &lt;img alt="CI Status" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vP8X8_J6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/swc-project/swc/actions/workflows/cargo.yml/badge.svg%3Fevent%3Dpush"&gt;
   &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;swc is a super-fast typescript / javascript compiler written in rust. It's a library for rust and javascript at the same time. If you are using swc from rust, see &lt;a href="https://rustdoc.swc.rs/swc/" rel="nofollow"&gt;rustdoc&lt;/a&gt; and for most users, your entrypoint for using library will be &lt;a href="https://rustdoc.swc.rs/swc_ecma_parser/" rel="nofollow"&gt;parser&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are using swc from javascript, please refer to &lt;a href="https://swc.rs/docs/installation/" rel="nofollow"&gt;docs on the website&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
Documentation&lt;/h1&gt;

&lt;p&gt;Check out the documentation &lt;a href="https://swc.rs/docs/installation/" rel="nofollow"&gt;in the website&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
Features&lt;/h1&gt;

&lt;p&gt;Please see &lt;a href="https://swc.rs/docs/comparison-babel" rel="nofollow"&gt;comparison with babel&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
Performance&lt;/h1&gt;

&lt;p&gt;Please see &lt;a href="https://swc.rs/docs/benchmark-transform" rel="nofollow"&gt;benchmark results&lt;/a&gt; on the website.&lt;/p&gt;

&lt;h2&gt;
Supporting swc&lt;/h2&gt;
&lt;p&gt;
   &lt;a href="https://github.com/swc-project/swc#backers"&gt;
      &lt;img alt="Backers on Open Collective" src="https://camo.githubusercontent.com/f240802efd7b4b4b50f088ae37b4a9d441a232292b3049e5cddcfbc5ee789e8e/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7377632f74696572732f6261636b65722f62616467652e7376673f6c6162656c3d6261636b657226636f6c6f723d627269676874677265656e"&gt;
   &lt;/a&gt;
   &lt;a href="https://github.com/swc-project/swc#gold-sponsors"&gt;
      &lt;img alt="Gold sponsors on Open Collective" src="https://camo.githubusercontent.com/1173651a01c306c016b5d2cb0cdaea2f8274d6aee441b410ac8b4d2dbbf9105c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7377632f74696572732f676f6c642d73706f6e736f72732f62616467652e7376673f6c6162656c3d476f6c6425323073706f6e736f727326636f6c6f723d627269676874677265656e"&gt;
   &lt;/a&gt;
   &lt;a href="https://github.com/swc-project/swc#silver-sponsors"&gt;
      &lt;img alt="Silver sponsors on Open Collective" src="https://camo.githubusercontent.com/a283bd354137b20d8f7da82b4fe6208e40da700311a979a32cc328c4fdd6a8dd/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7377632f74696572732f73696c7665722d73706f6e736f72732f62616467652e7376673f6c6162656c3d53696c76657225323073706f6e736f727326636f6c6f723d627269676874677265656e"&gt;
   &lt;/a&gt;
   &lt;a href="https://github.com/swc-project/swc#bronze-sponsors"&gt;
      &lt;img alt="Bronze sponsors on Open Collective" src="https://camo.githubusercontent.com/5244f0b3200456c160f4968035681e93d7ab6382b073bec11ae48179d6c4287c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7377632f74696572732f62726f6e7a652d73706f6e736f72732f62616467652e7376673f6c6162656c3d42726f6e7a6525323073706f6e736f727326636f6c6f723d627269676874677265656e"&gt;
   &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;swc is a community-driven project, and is maintained by a group of &lt;a href="https://opencollective.com/swc#team" rel="nofollow"&gt;volunteers&lt;/a&gt;. If you'd like to help support the future of the project, please consider:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Giving developer time on the project. (Message us on &lt;a href="https://github.com/swc-project/swc/discussions"&gt;Github discussions&lt;/a&gt; (preferred) or &lt;a href="https://swc-org.slack.com/" rel="nofollow"&gt;Slack&lt;/a&gt; for guidance!)&lt;/li&gt;
&lt;li&gt;Giving funds by becoming a sponsor (see &lt;a href="https://opencollective.com/swc" rel="nofollow"&gt;https://opencollective.com/swc&lt;/a&gt;)!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Contributing&lt;/h2&gt;
&lt;p&gt;See &lt;a href="https://github.com/swc-project/swcCONTRIBUTING.md"&gt;CONTRIBUTING.md&lt;/a&gt;. You may also find…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/swc-project/swc"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dribbble-shots"&gt;
  &lt;/a&gt;
  dribbble shots
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#surfing-app-concept"&gt;
  &lt;/a&gt;
  Surfing app concept
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4WlQW6hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/6337227/screenshots/16476321/media/ead508e57919ee3a27a0786175820a6f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4WlQW6hI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/6337227/screenshots/16476321/media/ead508e57919ee3a27a0786175820a6f.png" alt="https://cdn.dribbble.com/users/6337227/screenshots/16476321/media/ead508e57919ee3a27a0786175820a6f.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16476321-Surfing-app-concept"&gt;Sadhin Saleem&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bit-coin-crypto-currency-app"&gt;
  &lt;/a&gt;
  Bit Coin - Crypto Currency App
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cBD3v2er--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2969830/screenshots/16478674/media/27924e920befe7ae4ce37b48e6e7b20c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cBD3v2er--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2969830/screenshots/16478674/media/27924e920befe7ae4ce37b48e6e7b20c.jpg" alt="https://cdn.dribbble.com/users/2969830/screenshots/16478674/media/27924e920befe7ae4ce37b48e6e7b20c.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16478674-Bit-Coin-Crypto-Currency-App"&gt;Syful Islam&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#banking-app-mobile-design-concept"&gt;
  &lt;/a&gt;
  Banking App - Mobile Design Concept
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nNG2a7Bi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/7514969/screenshots/16477023/media/3f6e3dc3a7158fbf29d4e3dc2a645243.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nNG2a7Bi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/7514969/screenshots/16477023/media/3f6e3dc3a7158fbf29d4e3dc2a645243.png" alt="https://cdn.dribbble.com/users/7514969/screenshots/16477023/media/3f6e3dc3a7158fbf29d4e3dc2a645243.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16477023-Banking-App-Mobile-Design-Concept"&gt;Julius Branding&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tweets"&gt;
  &lt;/a&gt;
  Tweets
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--kkIzey0b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/619677584805208064/RwwbnNpi_normal.jpg" alt="David K. 🎹 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        David K. 🎹
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/davidkpiano"&gt;@davidkpiano&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Some useful tricks I use to help me remember when to use certain TypeScript types:&lt;br&gt;&lt;br&gt;unknown = "don't know"&lt;br&gt;any = "don't care"&lt;br&gt;never = "don't want"&lt;br&gt;void = "don't return"
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:29 PM - 13 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1437393026180079621" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1437393026180079621" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1437393026180079621" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zER9VnOb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/E_W6Ba2XIAIFeRG.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--02vzbmjG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1260536812419809285/Kj2L2S4v_normal.jpg" alt="FrontEnd Dude | JavaScript profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        FrontEnd Dude | JavaScript
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/frontenddude"&gt;@frontenddude&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Working with CSS 😅 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      21:55 PM - 15 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438260259471122436" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438260259471122436" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438260259471122436" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--HtAuZn5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1188024416313196546/zGxQhsWI_normal.jpg" alt="Stefan Judis profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Stefan Judis
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/stefanjudis"&gt;@stefanjudis&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Oh wow, I didn't realize that the `rgb()` CSS color function accepts alpha values these days. 😲&lt;br&gt;&lt;br&gt;Comma-separated:&lt;br&gt;✅ rgb(200, 125, 50)&lt;br&gt;✅ rgb(200, 125, 50, 0.5) /* 50% opacity */&lt;br&gt;&lt;br&gt;Space-separated:&lt;br&gt;✅ rgb(200 125 50)&lt;br&gt;✅ rgb(200 125 50 / 0.5) /* 50% opacity */
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:19 AM - 16 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438417319831777283" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438417319831777283" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438417319831777283" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XvgNjaaq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1438204494156734467/pu/img/veOwfdvc_NZ8oDe0.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TTZOvLCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1332018227942019073/Jh666gw3_normal.jpg" alt="Adam Argyle profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Adam Argyle
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/argyleink"&gt;@argyleink&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      media-queries-4 making confusing queries much simpler  😍&lt;br&gt;&lt;br&gt;caniuse (Firefox only atm) &lt;a href="https://t.co/6JWGI4A9RQ"&gt;caniuse.com/mdn-css_at-rul…&lt;/a&gt;&lt;br&gt;CSS spec &lt;a href="https://t.co/YeKFLAjrCS"&gt;w3.org/TR/mediaquerie…&lt;/a&gt;&lt;br&gt;PostCSS plugin &lt;a href="https://t.co/m66y81ZO2S"&gt;github.com/postcss/postcs…&lt;/a&gt;&lt;br&gt;⭐️ to show Chromium you want it &lt;a href="https://t.co/vo2E04lTiS"&gt;bugs.chromium.org/p/chromium/iss…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:21 PM - 16 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438493119457103875" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438493119457103875" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438493119457103875" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CO9iIN9U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_d7XCJXsAQQ53c.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--SuK45xU8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/707504523678523392/Uasvv2C4_normal.jpg" alt="Manuel Matuzović profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Manuel Matuzović
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/mmatuzo"&gt;@mmatuzo&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      TIL that you can control how virtual keyboards capitalize characters and words by default.&lt;br&gt;&lt;br&gt;Learn more on &lt;a href="https://twitter.com/htm_hell"&gt;@htm_hell&lt;/a&gt;: &lt;a href="https://t.co/GhNTyUielS"&gt;htmhell.dev/tips/autocapit…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      06:39 AM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438754409979207685" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438754409979207685" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438754409979207685" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3OH6-Xd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_dmcF1XIAIeTUG.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--iIjdmdRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1120618937253793793/xb6_9WMl_normal.jpg" alt="Ian Miell profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ian Miell
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @ianmiell
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Source unknown... 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      05:07 AM - 17 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1438731403529703424" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1438731403529703424" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1438731403529703424" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#picked-pens"&gt;
  &lt;/a&gt;
  Picked Pens
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#focusss"&gt;
  &lt;/a&gt;
  Focusss
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/hakimel/embed/zYzdJvK?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/hakimel"&gt;Hakim El Hattab&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pok%C3%A9dex"&gt;
  &lt;/a&gt;
  Pokédex
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/marcobiedermann/embed/ZEyxRmb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/BiedermannMarco"&gt;Marco Biedermann&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#podcasts-worth-listening"&gt;
  &lt;/a&gt;
  Podcasts worth listening
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ladybug-getting-started-with-java"&gt;
  &lt;/a&gt;
  Ladybug – Getting Started With Java
&lt;/h3&gt;

&lt;p&gt;Java is a high-level, class-based, object-oriented programming language. It’s a general-purpose programming language designed to let app developers: write once, run anywhere. Today we’re diving into the world of Java.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/13r6mzN0gn0BGbwKZSgOB3"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-changelog-coding-in-the-cloud-with-codespaces"&gt;
  &lt;/a&gt;
  The Changelog – Coding in the cloud with Codespaces
&lt;/h3&gt;

&lt;p&gt;On this special edition of The Changelog, we’re talking with Cory Wilkerson, Senior Director of Engineering at GitHub, about GitHub Codespaces. For years now, the possibility of coding in the cloud seemed so close, yet so far away for a number of reasons. According to Cory, the raw ingredients to make coding in the cloud a reality has been there for years.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5iuVLJ52VTPWnIQE0LY7E6"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-new-to-javascript-es2022"&gt;
  &lt;/a&gt;
  Syntax – New to JavaScript — ES2022
&lt;/h3&gt;

&lt;p&gt;In this episode of Syntax, Scott and Wes talk about all the new stuff in ES2022 — what it is, why you might need it, and how to use it.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5D5AB0sANzSIHEWjk4gRi2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Thank you for reading, talk to you next week, and stay safe! 👋&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>ES6 Handbook: Everything You Need to Know</title>
      <author>Shreya Purohit</author>
      <pubDate>Sun, 19 Sep 2021 19:32:46 +0000</pubDate>
      <link>https://dev.to/shreya/es6-handbook-everything-you-need-to-know-1ea7</link>
      <guid>https://dev.to/shreya/es6-handbook-everything-you-need-to-know-1ea7</guid>
      <description>&lt;p&gt;Hey readers! This blog is all about ES6. It includes all the topics related with examples. Before reading further, I want to specify that this was not a blog post initially, these are just my personal notes that I use as a reference guide, so I apologize for any misspells here :)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="#notes"&gt;let/const&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#objects"&gt;objects&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#this"&gt;this&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#arrow-functions"&gt;arrow functions&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#destructuring"&gt;destructuring&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#spread"&gt;spread&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#classes"&gt;classes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="#modules"&gt;modules&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#letconst"&gt;
  &lt;/a&gt;
  let/const
&lt;/h2&gt;

&lt;p&gt;Before moving to the point, let us understand two concepts here:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Global Scope&lt;/strong&gt; - Variable is declared outside the function. This variable is accessible inside every function present in the code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Function Scope&lt;/strong&gt; - Variable is declared inside (within) a function, outside that it is not accessible anywhere.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Block Scope&lt;/strong&gt; - In short, block scope means variables which are declared in a { } block are not accessible outside it.
This block can be an &lt;code&gt;if&lt;/code&gt; statement, &lt;code&gt;for&lt;/code&gt;/&lt;code&gt;while&lt;/code&gt; loop, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#-raw-var-endraw-function-global-scoped-eg"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;var&lt;/code&gt;&lt;/strong&gt;: function/ global scoped. Eg:
&lt;/h3&gt;

&lt;p&gt;→ as you can see, var is both global and function scoped, which often creates a confusion. So avoid using it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var name = 'Jack';              // global scope

function message() {
    var msg = 'Hey Jack!'       //function scope
}

console.log(msg);               // ERROR

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above line of code will throw an error as there's no variable &lt;code&gt;msg&lt;/code&gt; outside the function &lt;code&gt;message&lt;/code&gt; (where we have logged the variable). So it will show as &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-let-endraw-block-scoped-eg"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;let&lt;/code&gt;&lt;/strong&gt;: block scoped. Eg:
&lt;/h3&gt;

&lt;p&gt;→ &lt;code&gt;let&lt;/code&gt; keyword can't be redeclared:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let x = 1;
let x = 3;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;result: SyntaxError - redeclaration of let x&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But when we use &lt;code&gt;let&lt;/code&gt; inside a function, it works like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let size = "big";

function box() {
    for (let x = 0; x &amp;lt; 7; x++) {
        console.log(size);

        //Output: ReferenceError - `size` is not defined

        let size = "small";
        console.log(size);
    }
}

box();                          // small
console.log(size);              //big


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the function &lt;code&gt;box()&lt;/code&gt; when we log the value of size, it shows a reference error. That is because, &lt;code&gt;let&lt;/code&gt; is block scoped. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anything inside curly braces { } is block scoped.&lt;/strong&gt; In the above scenario, the function &lt;code&gt;box()&lt;/code&gt; is a block.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-const-endraw-block-scoped-eg"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;const&lt;/code&gt;&lt;/strong&gt;: block scoped. Eg:
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;const&lt;/code&gt; are very similar to &lt;code&gt;let&lt;/code&gt; except that they can't be changed and redeclared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const m = 8;
console.log(m);             //m = 8

m = 5;                     // 🚫 this will throw an error 
console.log(m);

// Uncaught TypeError: invalid assignment to const 'm'.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;→ therefore &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; are preferred over &lt;code&gt;var&lt;/code&gt; keyword for declaring variables.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;objects are written within curly braces &lt;code&gt;{ }&lt;/code&gt; as collection of key:value pairs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;key&lt;/code&gt;: property name&lt;/p&gt;

&lt;p&gt;&lt;code&gt;value&lt;/code&gt;: value of that property&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating an empty object:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const car = {
    model: 'Tesla',
    color: 'black',
    price: 800
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Talking specifically about ES6, before ES6 we had to specify both (key, value) even if both are of same names.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Boy(name, age) {
    return(
        name: name,
        age: age
    );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ES6 help us to get rid of duplication when we have same key:value names. So now our code will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Boy(name, age) {
    return(name, age);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#this"&gt;
  &lt;/a&gt;
  this
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is a keyword. It basically returns a reference to the object it is placed within&lt;/p&gt;

&lt;p&gt;💡 &lt;strong&gt;NOTE&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When we call a function as a method in an object, the &lt;code&gt;this&lt;/code&gt; keyword returns a reference to that object. 👇
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
    name: 'Mike';
    call() {
        console.log(this);
    }
}
user.call();

// ⚙️ Output: {name: 'Mike, call: f} 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;But when we call the function alone, outside the object &lt;code&gt;this&lt;/code&gt; returns the global object (browser window) and hence we get the result as &lt;strong&gt;&lt;em&gt;undefined&lt;/em&gt;&lt;/strong&gt; 👇
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const user = {
    name: 'Mike';
    call() {
        console.log(this);
    }
}

const myCall = user.call;

myCall();

// ⚙️ Output: undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow Functions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Normally, before ES6:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const square = function(num) {
    return num * num;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  In ES6:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const square = num =&amp;gt; num * num;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arraymap"&gt;
  &lt;/a&gt;
  array.map()
&lt;/h3&gt;

&lt;p&gt;If we have an array -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const colors = ["red", "green", "blue"];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We want to map the objects. Now there are two methods, &lt;code&gt;es6&lt;/code&gt; one is shorter and easier.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  normal case:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const items1 = colors.map(function (color) {
    return "&amp;lt;li&amp;gt;" + color + "&amp;lt;/li&amp;gt;";
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  es6:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const items2 = colors.map((color) =&amp;gt; `&amp;lt;li&amp;gt; ${color}  &amp;lt;/li&amp;gt;`);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#object-destructuring"&gt;
  &lt;/a&gt;
  Object Destructuring
&lt;/h2&gt;

&lt;p&gt;Let's say we have an object called &lt;code&gt;girl&lt;/code&gt; such that it has 3 keys as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const girl = {
    name: "",
    age: "",
    country: "",
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Normally, we would do something like this to get the values:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = girl.name;
const age = girl.age;
const country = girl.country;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  here, as you can see we have to repeat the object name &lt;code&gt;girl&lt;/code&gt; everytime we want to get a value. This problem can be solved by object destructuring:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;const { name, age, country } = girl;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;this one line code works same as the previous code. So destructuring made our code shorter and easier to understand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;  In case you want to use an alias (a different variable name) for your work:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;const {country: ctry} = girl;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This above line of code means we've defined a new variable called &lt;code&gt;ctry&lt;/code&gt; and set that equals to &lt;code&gt;country&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#spread-operator"&gt;
  &lt;/a&gt;
  Spread Operator
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;CASE I - COMBINING ARRAYS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;  If we want to combine these two arrays:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const one = [1, 2, 3];
const two = [4, 5, 6];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  without ES6:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;const combined = one.concat(two);&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  With ES6:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;const combined = [...one, ...two];&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If we want to add things in-between:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;const combined = [...one, '9', '7', ...two ];&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If we want to clone an array:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;const myDupli = [...two];&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CASE II - COMBINING OBJECTS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;  If we want to combine these two objects:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const alpha = { name: 'Shreya' };
const beta = { age: 19 };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  In ES6:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;const combined = {...alpha, ...beta};&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If we want to add more properties in b/w:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;const gamma = { ...alpha, surName:'Purohit', ...beta, country: 'India'}&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  cloning an object:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;const betaV2 = {...beta};&lt;/code&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Let us take an example of an object &lt;code&gt;boy&lt;/code&gt; here. We have a function called &lt;code&gt;run&lt;/code&gt; inside it. Now if we've some bug in the future or we've to modify our function for a different object, it would be a long way.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const boy = {
    name: "Sam",
    run() {
        console.log("running...");
    },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  To overcome this and make our work easier, we use classes:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Boy {
    constructor(name) {
        this.name = name;
    }

    run() {
        console.log("running...");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Now that we've created a class, let's try building our object again -&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;const boy = new Boy("Samridh");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;with this above class, we've implemented the run method in a single line of code. If someday we find a bug here, we've to modify it in just a single place {inside class Boy}. So this is the advantage of using classes in JS.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  If we have a class Boy such that -
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Boy {
    constructor(name) {
        this.name = name;
    }

    run() {
        console.log("running");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  and we want to create another class (having similar properties + some specific properties of its own). We can do this using the keyword &lt;code&gt;extends&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Girl extends Boy {
    eat() {
        console.log("eating");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  we just created the class &lt;code&gt;Girl&lt;/code&gt; here. Let us now create a const using this -&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;const myGirl = new Girl("Shreya");&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  and we're done. This code basically means that now the const &lt;code&gt;myGirl&lt;/code&gt; will have the functions &lt;code&gt;eat&lt;/code&gt; + &lt;code&gt;run&lt;/code&gt; + &lt;code&gt;constructor&lt;/code&gt; property of &lt;code&gt;Boy&lt;/code&gt; class. So we can use it like -
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;myGirl.eat();
myGirl.run();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Now let's say we want to create another constructor inside the &lt;code&gt;Girl&lt;/code&gt; class {which is extended from &lt;code&gt;Boy&lt;/code&gt; class, So the constructor inside this &lt;code&gt;Girl&lt;/code&gt; class is called &lt;strong&gt;derived class constructor.&lt;/strong&gt;}.&lt;/li&gt;
&lt;li&gt;  We MUST HAVE TO call &lt;code&gt;super()&lt;/code&gt; constructor inside the new constructor, otherwise we'll get an error (as using &lt;code&gt;this&lt;/code&gt; in derived class constructor requires &lt;code&gt;super()&lt;/code&gt; class). Now this must be looking confusing, let's look at the example below -
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Girl extends Boy {
    constructor(age) {
        this.age = age;
    }
    eat() {
        console.log("eating");
    }
}

// *result - Uncaught ReferenceError: must call super constructor before using 'this' in derived class constructor*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  calling &lt;code&gt;super()&lt;/code&gt; constructor:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Girl extends Boy {
    constructor(name, age) {
        super(name);
        this.age = age;
    }
    eat() {
        console.log("eating");
    }
}
const myGirl = new Girl("Shreya");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  In a child class constructor, &lt;code&gt;this&lt;/code&gt; cannot be used until &lt;code&gt;super&lt;/code&gt; is called.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules
&lt;/h2&gt;

&lt;p&gt;Sometimes we have many no. of classes declared in a single file. This makes the code long, confusing and messy. To avoid this, we separate these classes into different files and import them as a &lt;code&gt;module&lt;/code&gt; into the main file. This is called modularity.&lt;/p&gt;

&lt;p&gt;Let's look it in action. Here's what our folder &lt;code&gt;src&lt;/code&gt; will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
// src/boy.js

export class Boy {
    constructor(name) {
        this.name = name;
    }

    run() {
        console.log("running");
    }
}


// src/girl.js

import { Boy } from './src/boy';

export class Girl extends Boy {
    constructor(name, age) {
        super(name);
        this.age = age;
    }
    eat() {
        console.log("eating");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;both Boy and Girl classes are private in the folder, in order to use them we made them public using the &lt;code&gt;export&lt;/code&gt; keyword.&lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;import&lt;/code&gt; keyword in line 1 of girl.js as it is an extended version of the &lt;code&gt;Boy&lt;/code&gt; class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now half of the work is done. For now, these classes are not accessible in our main &lt;code&gt;app.js&lt;/code&gt; file. For that we've to import them in our &lt;code&gt;app.js&lt;/code&gt; file. We can do that by using -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Boy } from './src/boy';

import { Girl } from './src/girl';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#default-and-named-exports"&gt;
  &lt;/a&gt;
  Default and Named Exports
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#named-exports"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Named Exports&lt;/strong&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  We can export more than one objects from a specific module. This is called named export. Eg:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export class Car {
    constructor(model) {
        this.model = model;
    }
}

export function add(a, b){
    return a + b;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;  Here we exported a class &lt;code&gt;Car&lt;/code&gt; and a function &lt;code&gt;add&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#default-exports"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Default Exports&lt;/strong&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;  It is basically the main object that is exported from the module. It is generally used in case we've only a single object to export. Let's see how it is -
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default class Car {
    constructor(model) {
        this.model = model;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;💡 Now we don't need the &lt;code&gt;import { Car } from "./car";&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Instead, we use &lt;code&gt;import Car from "./car";&lt;/code&gt; in case of default exports.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Default exports -&amp;gt; import Car from "./car";
Named exports -&amp;gt; import { Car } from "./car";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;👋 Woosh! You've made it to the end. Hope I've helped you somehow. I write articles like this whenever I've some spare time. Besides this, I share content related to web development daily on Twitter. Let's connect there! &lt;a href="https://www.twitter.com/eyeshreya"&gt;@eyeshreya&lt;/a&gt;&lt;/p&gt;

</description>
      <category>es6</category>
      <category>javascript</category>
      <category>guide</category>
    </item>
  </channel>
</rss>
