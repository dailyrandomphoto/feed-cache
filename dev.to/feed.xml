<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>I can't believe you're not adding observability</title>
      <author>Noƒçnica Fee</author>
      <pubDate>Wed, 27 Oct 2021 23:29:08 +0000</pubDate>
      <link>https://dev.to/newrelic/i-cant-believe-youre-not-adding-observability-1fah</link>
      <guid>https://dev.to/newrelic/i-cant-believe-youre-not-adding-observability-1fah</guid>
      <description>&lt;p&gt;&lt;em&gt;cover image by &lt;a href="https://www.flickr.com/photos/141665267@N08/27491358331/"&gt;uppsa uppsa&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I want to talk to you about observability, the art of understanding errors and performance of your technology stack by implementing monitoring and some kind of tool to view that monitoring.&lt;/p&gt;

&lt;p&gt;Listen, if you're making money as an engineer in the tech industry, you're doing a good job. Functional? Object-oriented? Microservices? One big scary monolith? &lt;/p&gt;

&lt;p&gt;If what you do is paying for groceries and keeping a roof over your head then it's good code, good architecture, and you have nothing to apologize for.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rc5W04pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phl5ezf20jt1drgmdrp5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rc5W04pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phl5ezf20jt1drgmdrp5.jpg" alt="a monolith" width="880" height="494"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;if this thing pays the bills it's good technology&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So when I say 'I can't believe you're not doing observability' it's not about whether your technology is good in any absolute, Manichean sense. I completely understand how observability can seem like a reach goal, a nice-to-have, something that might be useful in other shops but not here, always moved to the next sprint.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-i-dont-know-how-youre-not-stressed-out-all-the-time-without-observability"&gt;
  &lt;/a&gt;
  But I don't know how you're not &lt;em&gt;stressed out all the time&lt;/em&gt; without observability.
&lt;/h3&gt;

&lt;p&gt;Like, what happens when the site goes down late at night? I've been on teams without any kind of standardized monitoring so I know what happens: the best operations person you have gets woken up. If she's unavailable or can't figure it out then &lt;em&gt;everybody&lt;/em&gt; gets woken up until someone finds the problem from scouring logs, reverting changes, or testing the system by brute force.&lt;/p&gt;

&lt;p&gt;And I've also been in teams where performance trends were invisible, so it was impossible to explain to our PM's why we needed 2 weeks to handle tech debt.&lt;/p&gt;

&lt;p&gt;So I think observability is something everyone should be doing. DevOps in its purest form. A concern shared across all technical roles and appreciated by management.&lt;/p&gt;

&lt;p&gt;I cannot bring you to this promised land of restful nights and pretty charts, but I can show you how to get there. New Relic can monitor dozens of services using a free tier account, and our free conference next week can show you how to monitor everything from front-end React to Kubernetes clusters.&lt;/p&gt;

&lt;p&gt;Register for &lt;a href="https://hopin.com/events/data-nerd-days-2-0?utm_source=Dev.to&amp;amp;utm_campaign=Community"&gt;Data Nerd Days November 3rd&lt;/a&gt;, I'll be talking about monitoring serverless. As of the time of writing this article, the next few hundred registrants will get sweatshirts.&lt;/p&gt;

&lt;p&gt;If you don't use New Relic use another tool, but for all love do add some observability to your stack soon.&lt;/p&gt;

</description>
      <category>observability</category>
      <category>kubernetes</category>
      <category>newrelic</category>
      <category>devops</category>
    </item>
    <item>
      <title>Why you should be continually interviewing</title>
      <author>Antonio Villagra De La Cruz</author>
      <pubDate>Wed, 27 Oct 2021 22:23:39 +0000</pubDate>
      <link>https://dev.to/antoniovdlc/why-you-should-be-continually-interviewing-1l83</link>
      <guid>https://dev.to/antoniovdlc/why-you-should-be-continually-interviewing-1l83</guid>
      <description>&lt;p&gt;I usually don't share pieces of advice I haven't applied myself, but in this case, the epiphany came before the practice: you should be always interviewing!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interviewing-is-a-skill"&gt;
  &lt;/a&gt;
  Interviewing is a skill
&lt;/h2&gt;

&lt;p&gt;This is particularly true in software engineering, but might be very relevant regardless of your position: interviewing is a skill. Nothing in your day-to-day occupancy, nor in your studies really prepares you for interviewing. And as with every other skill, it needs practice to improve over time. Similarly to how you might play 2 hours of chess every week to improve your game, you should be having the same outlook about interviewing.&lt;/p&gt;

&lt;p&gt;By continually interviewing, not only will you improve your interviewing skills over time, but you will also gain confidence in your pitch and your answers. Instead of waiting to need a new job, you can always be interviewing and try different approaches on how you write your CV, how you present yourself, how you answer common interview questions and how those resonate with your interviewers.&lt;/p&gt;

&lt;p&gt;A/B testing different approaches in low-stress situations will help you hone your discourse, and you will be a lot more prepared when you indeed need to find a new job. Compared to someone who might only interview every 2-3 years, your continuous practice puts you at a clear unfair advantage!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interviewing-allows-you-to-better-understand-the-market-and-know-your-worth"&gt;
  &lt;/a&gt;
  Interviewing allows you to better understand the market and know your worth
&lt;/h2&gt;

&lt;p&gt;This is again particularly true in software engineering, but the job market is constantly evolving (and happens to be pretty hot right now!). Putting yourself out there, even if you are satisfied with your current position, will help you keep up to date with the market. What new technologies are coming up? How are salaries and compensation packages evolving in the market? Which cool new companies are hiring right now? Information is power, and having an up-to-date notion of the market and of your worth is priceless. And the easiest way to achieve that is by continually interviewing.&lt;/p&gt;

&lt;p&gt;Interviewing sometimes feels like being mainly luck. If you only interview when changing jobs (which might be on average every 2-3 years), you are limiting your range of options to the companies currently hiring when you are scooting for opportunities. Instead, if you are continually interviewing, you are always on top of any opportunity. And who knows, maybe you will find a unique opportunity that you might have missed have you not being interviewing in that precise moment!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interviewing-is-an-easy-way-to-build-connections"&gt;
  &lt;/a&gt;
  Interviewing is an easy way to build connections
&lt;/h2&gt;

&lt;p&gt;In an environment that is probably going to be a lot more remote than it used to be, building connections might become more complicated. Something I particularly enjoy about interviews (both giving and taking them), is that you have a chance to create a connection with fellow engineers. You get to see what other people are working on, and how they are thinking about solving some common challenges.&lt;/p&gt;

&lt;p&gt;You basically get to network for free when interviewing. And if eventually you might not be ready to jump ships, the connections you've made throughout the process might prove valuable down the line. Similarly, if you don't go all the way through an interview process, you might still learn from the experience and come out with a few new connections!&lt;/p&gt;




&lt;p&gt;Finally, I wanted to quickly touch on a topic that does come up with such advice: aren't you just wasting other people's time by interviewing "for practice"? My main counter-argument here is that it is the company's job to ensure they are spending their time wisely with regards to hiring. For all you know, you might end up changing jobs if the final offer is attractive enough.&lt;/p&gt;

&lt;p&gt;And with that, let me dust off my resume and start applying!&lt;/p&gt;

</description>
      <category>career</category>
    </item>
    <item>
      <title>Micro-Frontends FAQs</title>
      <author>Ruben Casas</author>
      <pubDate>Wed, 27 Oct 2021 22:13:17 +0000</pubDate>
      <link>https://dev.to/infoxicator/micro-frontends-faqs-3pij</link>
      <guid>https://dev.to/infoxicator/micro-frontends-faqs-3pij</guid>
      <description>&lt;p&gt;These are some of the questions I received after my presentation "Micro-Frontends Performance and Centralised Data Caching" at React Advanced London 2021.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#are-microfrontends-mainly-used-for-large-organisations-and-when-you-have-multiple-teams-working-on-the-same-pagesite-or-are-there-any-benefits-for-small-teams-and-solo-devs"&gt;
  &lt;/a&gt;
  Are Micro-Frontends mainly used for large organisations and when you have multiple teams working on the same page/site or are there any benefits for small teams and solo devs?
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;That's correct, &lt;strong&gt;Micro-Frontends are the answer to an organisational problem&lt;/strong&gt;, if you don't have that problem then you probably don't need Micro-Frontends. They are useful when you encounter scaling issues and your teams have grown to the point where you start getting friction and your deployments to production have become painful and slow.&lt;/p&gt;

&lt;p&gt;There could be some benefits for small teams, for example, if you arrange your application so each developer owns a certain part of the UI and they deploy that independently. I don't think there are any benefits for Solo Devs because &lt;strong&gt;it will add unnecessary complexity&lt;/strong&gt; to a small project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#how-do-you-share-global-state"&gt;
  &lt;/a&gt;
  How do you share global state?
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The answer is you don't&lt;/strong&gt;. Global state could cause coupling between Micro-Frontends and add a central dependency that could block or stop independent deployments. The best recommendation when working Micro-Frontends is to avoid coupling at all costs because if you don't you might end up with a distributed monolith and none of the benefits of Micro-Frontends.&lt;/p&gt;

&lt;p&gt;Now, how do you communicate between them? &lt;strong&gt;The key is to keep the messages small and to a minimum&lt;/strong&gt;, respect the system boundaries and have strong contracts that guarantee the encapsulation of your Micro-Frontends. A good example of this is using the Pub/Sub model and the &lt;code&gt;postMessage()&lt;/code&gt; API.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#how-do-you-maintain-coding-style-and-conventions-over-multiple-microfrontends-and-teams-working-on-them"&gt;
  &lt;/a&gt;
  How do you maintain coding style and conventions over multiple Micro-Frontends and teams working on them?
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;People think Micro-Frontends are bad for consistency, however, this is not an issue related to this architectural pattern; &lt;strong&gt;this is an organisational issue&lt;/strong&gt; and as such, your company and teams are responsible for keeping coding standards and maintaining style consistency by implementing something like a Design System. &lt;strong&gt;Micro-Frontends could be good for consistency by allowing you to reuse certain parts of the application&lt;/strong&gt; like the header and the footer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#how-do-you-share-common-components-do-you-create-them-as-microfrontends-or-do-you-create-a-component-libary-and-consume-it-as-a-normal-npm-dependency"&gt;
  &lt;/a&gt;
  How do you share common components? Do you create them as Micro-Frontends or do you create a component libary and consume it as a normal npm dependency?
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;I would recommend a component library, however, the key to making it work well with Micro-Frontends is to have &lt;strong&gt;well defined atomic components&lt;/strong&gt; instead of large pieces of UI. Also, it is important that the library is stable (not in active development) to avoid coupling. If you are constantly making changes to the base components, all your Micro-Frontends will need consume those updates which can create a bottleneck and slows down independent deployments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#how-do-you-ensure-all-teams-update-to-the-latest-version-of-a-shared-dependency-at-the-same-time"&gt;
  &lt;/a&gt;
  How do you ensure all teams update to the latest version of a shared dependency at the same time?
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;If this is a dependency, then you just follow the normal process of communicating the update to your consumers and they will have to install and deploy their codebases to reflect the latest changes. &lt;/p&gt;

&lt;p&gt;If you want to update a Micro-Frontend and you want all your users to consume the same version, for example, if you want them to consume the same version of the header or footer then you can use two different approaches.&lt;/p&gt;

&lt;p&gt;The first one is the &lt;strong&gt;"evergreen"&lt;/strong&gt; approach, where all your consumers always point to the latest version as soon as it is published. &lt;/p&gt;

&lt;p&gt;The second approach is the &lt;strong&gt;"managed"&lt;/strong&gt; approach, where you publish your Micro-Frontend and follow the rules of Semantic Versioning so consumers can choose what version to use; the difference of this approach from a standard npm dependency is that you can start consuming the new version at runtime without the need to install and deploy a new version of the application that is consuming it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>architecture</category>
    </item>
    <item>
      <title>SOLID Principles of Software Architectures</title>
      <author>Pramuda Liyanage</author>
      <pubDate>Wed, 27 Oct 2021 22:09:18 +0000</pubDate>
      <link>https://dev.to/pramudaliyanage/solid-principles-of-software-architectures-3nmd</link>
      <guid>https://dev.to/pramudaliyanage/solid-principles-of-software-architectures-3nmd</guid>
      <description>&lt;p&gt;SOLID design principles are five software design principles that enable you to write effective object-oriented code.&lt;br&gt;
The SOLID name is a mnemonic acronym where each letter represents a software design principle, as follows:&lt;/p&gt;

&lt;p&gt;01) S for Single Responsibility Principle&lt;br&gt;
02) O for Open/Closed Principle&lt;br&gt;
03) L for Liskov Substitution Principle&lt;br&gt;
04) I for Interface Segregation Principle&lt;br&gt;
05) D for Dependency Inversion Principle&lt;/p&gt;

&lt;p&gt;The five principles overlap here and there, and programmers use them broadly. SOLID principles lead to more flexible and stable software architecture that‚Äôs easier to maintain and extend, and less likely to break.&lt;/p&gt;

&lt;p&gt;Let's us consider each of the principles&lt;/p&gt;

&lt;p&gt;Single Responsibility Principle ==&amp;gt;&lt;/p&gt;

&lt;p&gt;Each of the services in the microservices architecture should be designed to adhere to a single objective. Simply put, they should have a unique responsibility and be the sole reason behind the change.&lt;/p&gt;

&lt;p&gt;Open/Closed Principle ==&amp;gt;&lt;/p&gt;

&lt;p&gt;It should be easy to expand the functionality of independent software modules. That is, the expandability of a specific service should not impact the original behavior of the software.&lt;/p&gt;

&lt;p&gt;Liskov Substitution Principle ==&amp;gt;&lt;/p&gt;

&lt;p&gt;Any two independent services should be able to communicate with each other whenever required through an API call. Also, two services having the same contract should be able to act as a substitute between each other, without altering the overall system.&lt;/p&gt;

&lt;p&gt;Interface Segregation Principle ==&amp;gt;&lt;/p&gt;

&lt;p&gt;The software should be divided into microservices in a way that there are no redundancies present. That is, the smaller modules should be loosely coupled to satisfy the client‚Äôs needs, along with minimizing the anti-patterns present in the code.&lt;/p&gt;

&lt;p&gt;Dependency Inversion Principle ==&amp;gt;&lt;/p&gt;

&lt;p&gt;The high-levels modules should not be depending on low-lower-level modules. Instead, they both should lean on abstractions. Following the same principle, abstractions should rely on details, while the vice-versa holds true. This principle ensures that changes to the higher-level modules will not affect the lower-level modules.&lt;/p&gt;

&lt;p&gt;Thank you..........&lt;/p&gt;

</description>
      <category>softwaredevelopment</category>
      <category>softwarearchitectures</category>
      <category>solidprinciples</category>
      <category>softwareprinciples</category>
    </item>
    <item>
      <title>When does a pointer become dangling in C/C++? | Why isn't this example dangling?</title>
      <author>Calin Baenen</author>
      <pubDate>Wed, 27 Oct 2021 22:01:54 +0000</pubDate>
      <link>https://dev.to/baenencalin/when-does-a-pointer-become-dangling-in-cc-why-isnt-this-example-dangling-4p1p</link>
      <guid>https://dev.to/baenencalin/when-does-a-pointer-become-dangling-in-cc-why-isnt-this-example-dangling-4p1p</guid>
      <description>&lt;p&gt;&lt;sup&gt;All testing has been done on &lt;a href="https://www.sololearn.com/"&gt;SoloLearn&lt;/a&gt;'s &lt;a href="https://code.sololearn.com/cpp"&gt;C++ playground&lt;/a&gt;.&lt;/sup&gt;&lt;br&gt;&lt;br&gt;
So, I was planning on making a post on a custom pointer datatype, and I was playing around with (raw-)pointers, and I wanted to test something, to see if I could (purposefully) get a pointer to dangle, so I tried something I was certain would work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and I was baffled when I saw &lt;code&gt;10&lt;/code&gt; in the output box.&lt;br&gt;
So, I tried (virtually) the same thing in C:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and I got &lt;code&gt;10&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;I thought the conditions for a pointer to become dangling was for the referenced value to leave the current scope. But as it's apparent, even though &lt;code&gt;i&lt;/code&gt; (and its value) leaves the scope.&lt;sup&gt;&lt;small&gt; (Yes, it is leaving the scope, for anyone who wants to object. This is called a guard-scope, and allows temporary variables to exist.)&lt;/small&gt;&lt;/sup&gt;&lt;br&gt;
So, what are the actual conditions for a pointer to become dangling? And&lt;sup&gt;/or&lt;/sup&gt; why is my example NOT dangling?  &lt;/p&gt;

&lt;h1&gt;&lt;b&gt;Thanks!&lt;br&gt;Cheers!&lt;/b&gt;&lt;/h1&gt;

</description>
      <category>c</category>
      <category>cpp</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>I'm here to tell you about¬†AutoIdle</title>
      <author>Mike Mwanje</author>
      <pubDate>Wed, 27 Oct 2021 21:56:22 +0000</pubDate>
      <link>https://dev.to/mwanjemike/im-here-to-tell-you-about-autoidle-25no</link>
      <guid>https://dev.to/mwanjemike/im-here-to-tell-you-about-autoidle-25no</guid>
      <description>&lt;p&gt;From simple to complex applications, Heroku stands out a deployment choice for many developers. This is because with Heroku, getting an application up and running is a very simple procedure that abstracts the underlying infrastructure and its scaling needs. However, with more applications running on Heroku is a growing bill even when no traffic is being served. &lt;a href="https://medium.com/r/?url=https%3A%2F%2Fautoidle.com%2F"&gt;AutoIdle&lt;/a&gt; is a Heroku add-on  that helps cut your Heroku bill by automatically putting your staging and review apps to sleep when you don't need them. In this article, we shall see how we can install &lt;a href="https://medium.com/r/?url=https%3A%2F%2Fautoidle.com%2F"&gt;AutoIdle&lt;/a&gt; on a Heroku app and review apps in a pipeline and observe how much we save.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-autoidle%C2%A0work"&gt;
  &lt;/a&gt;
  How does AutoIdle¬†work?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://medium.com/r/?url=https%3A%2F%2Fautoidle.com%2F"&gt;AutoIdle&lt;/a&gt; typically puts your apps to sleep after 30mins of inactivity and gets it them and running in under 10seconds of a new request. This way, you are not charged for the time the your apps are up but idle. With that stated‚Ä¶&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-get-our-hands%C2%A0dirty"&gt;
  &lt;/a&gt;
  ‚Ä¶let's get our hands¬†dirty.
&lt;/h3&gt;

&lt;p&gt;Let's create an app called &lt;em&gt;autoidle-saving&lt;/em&gt; in a  Heroku pipeline. Starting from the &lt;em&gt;start&lt;/em&gt; branch of &lt;a href="https://medium.com/r/?url=https%3A%2F%2Fgithub.com%2F123MwanjeMike%2Fautoidle-saving"&gt;this repository&lt;/a&gt;, we shall incrementally build our application to the state in the &lt;em&gt;main&lt;/em&gt; branch; so fork the repository and go &lt;a href="https://medium.com/r/?url=https%3A%2F%2Fdashboard.heroku.com%2Fpipelines%2Fnew"&gt;here&lt;/a&gt; to create a Heroku pipeline. You will be presented with the screen below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9IFQPzXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AzVr3QoIecTGiUX7iOHV29Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9IFQPzXy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AzVr3QoIecTGiUX7iOHV29Q.png" alt="The newly created Heroku pipeline. It's name is saving0with-autoidle" width="800" height="271"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now select the &lt;em&gt;Settings&lt;/em&gt; tab and under the &lt;em&gt;Connect to GitHub&lt;/em&gt; option, search for the forked repository and connect it to the pipeline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EaF8vWmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Airsce7gKFmVc03YLq-ZtEg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EaF8vWmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Airsce7gKFmVc03YLq-ZtEg.png" alt="Connecting the pipeline to a GitHub repository" width="800" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After connecting the repository, the &lt;em&gt;Review apps&lt;/em&gt; option should now be available. Click &lt;em&gt;Enable&lt;/em&gt; to have review apps for Pull Requests.&lt;br&gt;
&lt;strong&gt;Note:&lt;/strong&gt; Check the &lt;em&gt;Wait for CI to pass&lt;/em&gt; option if you want HerokuCI to run your tests before deploying to the review app. There is a detailed article on Heroku CI and how to use it &lt;a href="https://medium.com/r/?url=https%3A%2F%2Fdev.to%2Fmwanjemike%2Fbuild-a-ci-cd-pipeline-with-heroku-ci-3de9"&gt;here&lt;/a&gt; that you can check out if you want to learn more about HerokuCI specifically.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oWXXs0BZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AqkPWiSZi0E_vbRdViutv9A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oWXXs0BZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AqkPWiSZi0E_vbRdViutv9A.png" alt="Enabling review apps for the pipeline" width="510" height="649"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Return to the pipeline tab now and for each of staging and production sections, click &lt;strong&gt;&lt;em&gt;Add app&lt;/em&gt;&lt;/strong&gt;, and click &lt;strong&gt;&lt;em&gt;Create new app‚Ä¶&lt;/em&gt;&lt;/strong&gt; to create a staging and production app respectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TQDnIUJ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AN_Eo7l8z9VLP00BShvluEg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TQDnIUJ5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AN_Eo7l8z9VLP00BShvluEg.png" alt="Creating the staging app for autoidle-saving" width="800" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your pipeline now looks like so&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I-itnDlj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AHhNG6iwUMQM2fd_EDzOhMw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I-itnDlj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AHhNG6iwUMQM2fd_EDzOhMw.png" alt="The pipeline after adding a staging and production app" width="800" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let us make one additional tweak on our two apps. We want the staging app to automatically deploy code in the develop branch and the production app that in main branch on every push to the respective branches of the connected GitHub repository.  So, starting with the staging app, click the &lt;em&gt;Configure automatic deploys‚Ä¶&lt;/em&gt; option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X4u0uTKa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A83a0HXDy2QAgvHleLDEc3g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X4u0uTKa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A83a0HXDy2QAgvHleLDEc3g.png" alt="autoidle-saving-staging app options" width="520" height="357"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be presented with a screen such as below. Select the develop branch and click &lt;strong&gt;&lt;em&gt;Enable Automatic Deploys&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pb_5nlXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ABiqjRVqlQTcQYeEJQ-_7Jw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pb_5nlXo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ABiqjRVqlQTcQYeEJQ-_7Jw.png" alt="Enabling automatic deploys on the staging app" width="635" height="439"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same goes for the production application, only that for it we shall deploy the main branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rfIsoXO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ABnAcQQWwp9zNK7q9a7kECQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rfIsoXO8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ABnAcQQWwp9zNK7q9a7kECQ.png" alt="Enabling automatic deploys on the production app" width="627" height="437"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The pipeline is now ready and we can make an addition to our app so as to set everything in motion.&lt;br&gt;
Run the commands below to clone the forked repository and install the dependencies of the application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone https://github.com/123MwanjeMike/autoidle-saving.git
$ cd autoidle-saving
$ npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to confirm that all is okay, run &lt;strong&gt;npm start&lt;/strong&gt; in the terminal and you should have the output below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KNE3bqfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A5JSFY6TiB3OoJZDnDt4n_g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KNE3bqfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A5JSFY6TiB3OoJZDnDt4n_g.png" alt="Terminal output after running npm start" width="424" height="120"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aFUexBRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AnoOrrDcf7ttqaEJjMBovkQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aFUexBRd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AnoOrrDcf7ttqaEJjMBovkQ.png" alt="Accessing our application through the browser at 127.0.0.1:3000" width="460" height="131"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let us deploy to our staging app. So back to the staging section of the pipeline, and  under the app options, click &lt;strong&gt;&lt;em&gt;Deploy a branch‚Ä¶&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1i951yI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AjM4QUNCsBe4LDIm-56Ncsg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1i951yI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AjM4QUNCsBe4LDIm-56Ncsg.png" alt="staging app options" width="415" height="344"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶and deploy the develop branch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4vrndjdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AC5lE02a-8J0F5vY63QkyVA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4vrndjdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AC5lE02a-8J0F5vY63QkyVA.png" alt="Manually deploying the develop branch to staging app" width="645" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let us try to access our staging app in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iROjaXPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ARqtcs3d5itu6GiNBvEPjQA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iROjaXPN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ARqtcs3d5itu6GiNBvEPjQA.png" alt="Develop branch successfully deployed" width="506" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are now going to install &lt;a href="https://medium.com/r/?url=https%3A%2F%2Fautoidle.com%2F"&gt;AutoIdle&lt;/a&gt; on the staging app so that it is automatically put to sleep. So if you already &lt;a href="https://medium.com/r/?url=https%3A%2F%2Fdevcenter.heroku.com%2Farticles%2Fheroku-cli%23download-and-install"&gt;downloaded and installed&lt;/a&gt; Heroku CLI on your computer, go to your terminal and login.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heroku login
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we shall add our staging app's git repository to the local repository. To get a Heroku app's git URL, select the app and go to its Settings tab. You should see the &lt;strong&gt;&lt;em&gt;Heroku git URL&lt;/em&gt;&lt;/strong&gt; listed under the app's information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--asviZr5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ApSYClvs9TCjVvBer-MGs2w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--asviZr5C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ApSYClvs9TCjVvBer-MGs2w.png" alt="Getting the git url of a  Heroku app" width="800" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy the link and add it as a remote repository&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git remote add staging-app https://git.heroku.com/autoidle-saving-staging.git
$ git remote -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see a list of your remote repositories in the terminal.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IBrByU6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Aq4JG0GvZCGfZsGbEYBwBDQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IBrByU6L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Aq4JG0GvZCGfZsGbEYBwBDQ.png" alt="Output after running git remote -v" width="604" height="66"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we shall add &lt;a href="https://medium.com/r/?url=https%3A%2F%2Fautoidle.com%2F"&gt;AutoIdle&lt;/a&gt; to our application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heroku addons:create autoidle
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_YAD8lJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AusuyAm3F35Y0hiRkerFFdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_YAD8lJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AusuyAm3F35Y0hiRkerFFdg.png" alt="AutoIdle successfully added to the staging app" width="652" height="78"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We shall also add &lt;a href="https://medium.com/r/?url=https%3A%2F%2Fautoidle.com%2F"&gt;AutoIdle&lt;/a&gt; to our review apps. So, create a new branch &lt;em&gt;heroku-config&lt;/em&gt; and add  an &lt;strong&gt;&lt;em&gt;app.json&lt;/em&gt;&lt;/strong&gt; file, a manifest format for describing Heroku  web apps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git checkout -b heroku-config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the &lt;em&gt;app.json&lt;/em&gt; has the content below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
   "environments": {
      "review": {
         "addons": ["autoidle:hobby"]
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now commit and push your changes to the GitHub repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git add app.json
$ git commit -m "AutoIdle configs for review apps"
$ git push -u origin heroku-config
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open a PR for the &lt;em&gt;heroku-config&lt;/em&gt; branch against develop and merge it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--76f84EHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AsBPW5g7DANkSOOwoSRTiGg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--76f84EHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AsBPW5g7DANkSOOwoSRTiGg.png" alt="Our pipeline after merging our PR" width="800" height="265"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets make a final addition to our app to have a review app and we compare the saving with &lt;a href="https://medium.com/r/?url=https%3A%2F%2Fautoidle.com%2F"&gt;AutoIdle&lt;/a&gt;. The endpoint is for the 'Hello World, happy saving!' message.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Welcome!, let's save with AutoIdle üéä`&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/salutation/:name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Happy saving &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World, happy saving!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sorry, resource not found.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Listening on port &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Commit and push your changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git commit -am "hello-world"
$ git push -u origin hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open a PR for hello-world against develop and we should have a new review app for that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AtWJNyeo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ASR5LlC71cDkSSj7-9-bgYg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AtWJNyeo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ASR5LlC71cDkSSj7-9-bgYg.png" alt="Hello-world review app running" width="580" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's observe the saving on the &lt;a href="https://app.autoidle.com/"&gt;AutoIdle&lt;/a&gt; dashboard. In your terminal, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ heroku addons:open autoidle
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be taken to the browser and presented with the screen below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--736ciuSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AhHwfmE4ot7VU2CTeSwPyZw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--736ciuSm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AhHwfmE4ot7VU2CTeSwPyZw.png" alt="AutoIdle dashboard with the staging and review apps running" width="800" height="508"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see that all our apps are running and we  don't have any available saving data, so shall check again after some time has passed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J5EWM5vB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AxlAqVmOYpzKsob4YE5-T6A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J5EWM5vB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AxlAqVmOYpzKsob4YE5-T6A.png" alt="AutoIdle dashboard with available apps stopped" width="800" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see that both our staging and review applications were automatically stopped without us having to click any button.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;With cloud computing, every extra second your application is running counts and you want to be as lean as possible. In this tutorial, we only used &lt;a href="https://medium.com/r/?url=https%3A%2F%2Fautoidle.com%2F"&gt;AutoIdle&lt;/a&gt; on two applications, but imagine how much you could save with a large application with multiple contributors and new PRs created by the minute, each with a new review app. The cost of having apps running while not actively in use can be unnecessarily large and overwhelming. I hope &lt;a href="https://medium.com/r/?url=https%3A%2F%2Fautoidle.com%2F"&gt;AutoIdle&lt;/a&gt; is a tool you and your organization can leverage to reduce costs.&lt;/p&gt;

&lt;p&gt;Till next time,&lt;br&gt;
&lt;em&gt;Happy saving!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>autoidle</category>
      <category>heroku</category>
      <category>cicd</category>
      <category>devops</category>
    </item>
    <item>
      <title>Happy Hacktoberfest üéÉ! - Part 3</title>
      <author>Luke Nguyen</author>
      <pubDate>Wed, 27 Oct 2021 21:32:47 +0000</pubDate>
      <link>https://dev.to/mqnguyen/happy-hacktoberfest-part-3-4deb</link>
      <guid>https://dev.to/mqnguyen/happy-hacktoberfest-part-3-4deb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Continuing from my latest post about Hacktoberfest, I decided to work on another &lt;a href="https://github.com/medusajs/medusa/issues/474"&gt;issue&lt;/a&gt; from Medusa's repo. However, the difficulty level this time far exceeded what I had expected.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-issue-and-challenges"&gt;
  &lt;/a&gt;
  The issue and challenges
&lt;/h2&gt;

&lt;p&gt;The task was to generate an API fixture for the data model returned by Medusa's API. To my surprise, setting up the dev environment was surprisingly challenging compared to the linting issue. I kept running into crashes while running the installation command and didn't know what I was missing. To make it worse, I was overwhelmed by the massive error logs and couldn't go over them to see what I was missing. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requesting-assistance"&gt;
  &lt;/a&gt;
  Requesting assistance
&lt;/h2&gt;

&lt;p&gt;Realizing that I couldn't do this on my own, I hopped on Medusa Discord's channel and began asking for help. I was surprised by the friendliness of the community and how active everyone was, including the developers. I managed to get in touch with one in just a few hours and, thanks to his help, identified the missing packages and finished the installation.&lt;/p&gt;

&lt;p&gt;Working on the code was also quite hard. Despite having the instruction, I had to also rely on other people's pull requests to understand what I should do. I spent hours reading through issues with similar tasks and studied the code very carefully, taking advantage of the Discord channel as much as I could to clear up any confusion. In the end, I managed to merged my &lt;a href="https://github.com/medusajs/medusa/pull/545#event-5458875103"&gt;pull request&lt;/a&gt; with the help of the developers and a classmate who recently finished a similar issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Working on such a challenging issue was quite an experience. I realized that I still have a long way to go to be more confident in JavaScript, and this issue was a great starting point. With one more issue left to do before Hacktoberfest ends this weekend, I'm excited to see where I will be next.&lt;/p&gt;

&lt;p&gt;Cheers!üçª&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>hacktoberfest</category>
      <category>github</category>
    </item>
    <item>
      <title>Twitch Streaming Graph Analysis - Part 2</title>
      <author>Katarina Supe</author>
      <pubDate>Wed, 27 Oct 2021 20:35:19 +0000</pubDate>
      <link>https://dev.to/katelatte/twitch-streaming-graph-analysis-part-2-3d3d</link>
      <guid>https://dev.to/katelatte/twitch-streaming-graph-analysis-part-2-3d3d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;This blog is divided into three parts, depending on the part of the application we are building:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Part 1&lt;/strong&gt;: data source and backend implementation&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Part 2&lt;/strong&gt;: frontend implementation&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;Part 3&lt;/strong&gt;: streaming data from Kafka cluster&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you still haven't, you can read already published &lt;a href="https://memgraph.com/blog/twitch-streaming-graph-analysis"&gt;Part 1&lt;/a&gt; and then continue reading this part. Otherwise, use already implemented  &lt;a href="https://github.com/memgraph/twitch-analytics-demo/tree/main/backend"&gt;backend&lt;/a&gt;. In this part, we are going to create React application and visualize general statistics and some interesting insights from &lt;strong&gt;Twitch&lt;/strong&gt; dataset. All implementation that will be mentioned in this part of the blog you can find in &lt;a href="https://github.com/memgraph/twitch-analytics-demo/tree/main/frontend"&gt;frontend&lt;/a&gt; folder of the project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-react-app"&gt;
  &lt;/a&gt;
  Create React App
&lt;/h2&gt;

&lt;p&gt;Let's figure out how we‚Äôre going to visualize all the data we have managed to collect. First we have to create &lt;strong&gt;React&lt;/strong&gt; app which will work with our &lt;strong&gt;Flask&lt;/strong&gt; application. We will install &lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt; which will give us &lt;code&gt;npx&lt;/code&gt; command for creating a React app. Place yourself in project root folder and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g create-react-app@3.4.1
npm init react-app frontend --use-npm
cd frontend
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now at &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; you can see simple React app. We will configure our React app to work well with Flask server. In &lt;code&gt;package.json&lt;/code&gt; from frontend folder add a line at the end of the file:&lt;br&gt;
&lt;code&gt;"proxy": "http://localhost:5000"&lt;/code&gt;&lt;br&gt;
This will tell React app to redirect any requests it receives on its port 3000 to port 5000, where our backend is implemented. We will use &lt;strong&gt;Semantic UI&lt;/strong&gt; to build our webpage, so we have to do a few more things before dockerizing our React app. Run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm uninstall semantic-ui semantic-ui-css
npm install @craco/craco @semantic-ui-react/craco-less semantic-ui-less --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, update your &lt;code&gt;package.json&lt;/code&gt; with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "scripts": {
    "start": "craco start",
    "build": "craco build",
    "test": "craco test",
    "eject": "craco eject"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create &lt;code&gt;craco.config.js&lt;/code&gt; in fronted folder and paste following content in it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {
  plugins: [{ plugin: require('@semantic-ui-react/craco-less') }],
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create &lt;code&gt;semantic-ui/site&lt;/code&gt; folder in &lt;code&gt;src&lt;/code&gt; folder and then Copy the entire &lt;code&gt;node_modules/semantic-ui-less/_site folder&lt;/code&gt; content to &lt;code&gt;src/semantic-ui/site&lt;/code&gt;. Also create &lt;code&gt;theme.config&lt;/code&gt; file in &lt;code&gt;src/semantic-ui/&lt;/code&gt; folder and then copy file &lt;code&gt;node_modules/semantic-ui-less/theme.config.example&lt;/code&gt; to &lt;code&gt;src/semantic-ui/theme.config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Change &lt;code&gt;theme.config&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/*******************************
            Folders
*******************************/

@themesFolder : 'themes';
@siteFolder  : '../../src/semantic-ui/site';

@import (multiple) "~semantic-ui-less/theme.less";
@fontPath : '../../../themes/@{theme}/assets/fonts';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it's not already installed, run:&lt;br&gt;
&lt;code&gt;npm install semantic-ui-react --save-dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you can use Semantic UI components, such as Button (don‚Äôt forget to paste all imports):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import logo from "./logo.svg";
import "./App.css";
import "semantic-ui-less/semantic.less";
import { Button } from "semantic-ui-react";

function App() {
  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;header className="App-header"&amp;gt;
        &amp;lt;img src={logo} className="App-logo" alt="logo" /&amp;gt;
        &amp;lt;p&amp;gt;
          Edit &amp;lt;code&amp;gt;src/App.js&amp;lt;/code&amp;gt; and save to reload.
        &amp;lt;/p&amp;gt;
        &amp;lt;Button&amp;gt;Click me&amp;lt;/Button&amp;gt;
      &amp;lt;/header&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dockerizing-react-app"&gt;
  &lt;/a&gt;
  Dockerizing React App
&lt;/h2&gt;

&lt;p&gt;We will be adding few new lines in our previously created project's &lt;code&gt;docker-compose.yml&lt;/code&gt; &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/docker-compose.yml"&gt;file&lt;/a&gt;. At the end of the file add:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;react-app:
    build: ./frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - twitch-app
    networks:
      - app-tier
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should also create &lt;code&gt;Dockerfile&lt;/code&gt; in frontend folder like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# pull official base image
FROM node:14.17.5-alpine

# set working directory
WORKDIR /app

# add `/app/node_modules/.bin` to $PATH
ENV PATH /app/node_modules/.bin:$PATH

# install app dependencies
COPY package.json ./
COPY package-lock.json ./
RUN npm install --silent
RUN npm install react-scripts@3.4.1 -g --silent

# add app
COPY . ./

# start app
CMD ["npm", "start"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see we are copying &lt;code&gt;package.json&lt;/code&gt; into the container. The best way to have all dependencies installed is to copy &lt;code&gt;package.json&lt;/code&gt; file from &lt;a href="https://github.com/katarinasupe/twitch-analytics-demo/blob/main/frontend/package.json"&gt;here&lt;/a&gt;. All node modules will then be correctly installed in the container and &lt;code&gt;npm start&lt;/code&gt; will run your React app. Node modules volume was added so that all packages don't have to be installed each time you build your project.&lt;/p&gt;

&lt;p&gt;All that is left to do is to create &lt;code&gt;.dockerignore&lt;/code&gt; file in frontend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node_modules
build
.dockerignore
Dockerfile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and make a little change in &lt;code&gt;package.json&lt;/code&gt; in proxy settings:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"proxy": "http://twitch-app:5000"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This change is made because we are running the backend as docker service on port 5000 called &lt;code&gt;twitch-app&lt;/code&gt;. Our project structure now looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|   docker-compose.yml
|   
+---backend
|       app.py
|       Dockerfile
|       requirements.txt
|
+---frontend
|   |   .dockerignore
|   |   craco.config.js
|   |   Dockerfile
|   |   package.json
|   |   package-lock.json
|   +---node_modules
|   +---public
|   +---src
|
+---memgraph
|   |   
|   +---import-data
|   |       chatters.csv
|   |       moderators.csv
|   |       streamers.csv
|   |       teams.csv
|   |       vips.csv
|   +---mg_log
|   +---mg_lib
|   +---mg_etc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you can hit &lt;code&gt;docker-compose build&lt;/code&gt; from your root project folder and &lt;code&gt;docker-compose up&lt;/code&gt; after that. First &lt;code&gt;memgraph-mage&lt;/code&gt; will run and then &lt;code&gt;twitch-app&lt;/code&gt;. After that &lt;code&gt;react-app&lt;/code&gt; will be run. Now you can make requests from your frontend. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend-implementation"&gt;
  &lt;/a&gt;
  Frontend Implementation
&lt;/h2&gt;

&lt;p&gt;Create folder &lt;code&gt;components&lt;/code&gt; in your src file. Here you will make your components which you‚Äôll use as puzzles for your web application. Let's make a little part of the puzzle, where we‚Äôll show the fetching of data from &lt;strong&gt;Memgraph&lt;/strong&gt;. We will add node and edge counters to our webpage by making fetch requests in &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/frontend/src/components/Counter.js"&gt;&lt;code&gt;Counter.js&lt;/code&gt;&lt;/a&gt;. In the code below you can see that we are making a request depending on the props forwarded from the parent component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  fetch() {
    fetch("/" + this.props.count)
      .then((res) =&amp;gt; res.json())
      .then(
        (result) =&amp;gt; {
          this.setState({
            isLoaded: true,
            counter: result[this.props.count],
          });
        },
        (error) =&amp;gt; {
          this.setState({
            isLoaded: true,
            error,
          });
        }
      );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the left you can see the number of nodes, and on the right the number of edges in your database.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fTjX3AMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-header.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fTjX3AMp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-header.png" alt="memgraph-tutorial-twitch-header" width="880" height="204"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For games statistics we are fetching top games from backend:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  fetchData(number) {
    fetch("/top-games/" + number)
      .then((res) =&amp;gt; res.json())
      .then(
        (result) =&amp;gt; {
          this.setState({
            isLoaded: true,
            games: result.games,
            players: result.players,
          });
        },
        (error) =&amp;gt; {
          this.setState({
            isLoaded: true,
            error,
          });
        }
      );
    this.setState({
      numOfGames: number,
      header: "Top " + number + " games",
    });
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the right you can see the table showing you the names of the games and number of players that are playing that game (in our dataset).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n2U8yRQ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-stats.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n2U8yRQ2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-stats.png" alt="memgraph-tutorial-twitch-stats" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the similar way we are fetching top teams, vips and moderators. For streamers, we are ranking them by number of followers or number of views. Because of that, you have a dropdown menu from where you can choose the way of ranking.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ymb0iyZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-streamers.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ymb0iyZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-streamers.png" alt="memgraph-tutorial-twitch-streamers" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs talk about graph visualization a bit more. Here, we‚Äôre going to use &lt;code&gt;D3.js&lt;/code&gt;. This is a package which we still cannot use. We need to set everything up so that we can draw our graphs using &lt;code&gt;D3.js&lt;/code&gt;. Create a folder &lt;code&gt;hooks&lt;/code&gt; in &lt;code&gt;src&lt;/code&gt; folder and create &lt;code&gt;useD3.js&lt;/code&gt; file (hooks are usually named with prefix "use").&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";

import * as d3 from "d3";

export const useD3 = (renderGraph) =&amp;gt; {
  const ref = React.useRef();

  React.useEffect(() =&amp;gt; {
    renderGraph(d3.select(ref.current));

    return () =&amp;gt; {};
  });

  return ref;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will be your custom hook to allow &lt;code&gt;D3.js&lt;/code&gt; to interact directly with the DOM. You can take advantage of the &lt;code&gt;useRef&lt;/code&gt; and &lt;code&gt;useEffect&lt;/code&gt; hook to link &lt;code&gt;D3.js&lt;/code&gt; with the &lt;code&gt;svg&lt;/code&gt; element that has been created, and specify when your &lt;code&gt;D3.js&lt;/code&gt; function should be executed. Don‚Äôt forget to import &lt;code&gt;d3&lt;/code&gt;. Now we can render our graph using custom hook &lt;code&gt;useD3.js&lt;/code&gt;. Check the &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/frontend/src/components/Graph.js"&gt;Graph.js&lt;/a&gt; component to see how the graph can be drawn. Using that component we can get information about your favorite streamer - its teams, games and languages, like on the image below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G9LNal0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-favstreamer.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G9LNal0O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-favstreamer.png" alt="memgraph-tutorial-twitch-favstreamer" width="880" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is also possible to search all streamers who are playing some game in certain language. Using the same &lt;code&gt;Graph.js&lt;/code&gt; component, you get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7J3YWBI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-game-lang.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7J3YWBI_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-game-lang.png" alt="memgraph-tutorial-twitch-game-lang" width="880" height="373"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to play with nodes and their forces by dragging them around. In the end, we will use powerful &lt;a href="https://memgraph.com/docs/mage"&gt;MAGE&lt;/a&gt; query modules - &lt;strong&gt;PageRank&lt;/strong&gt; and &lt;strong&gt;Betweenness Centrality&lt;/strong&gt;, to showcase how you can visualize your data in a pretty cool way with &lt;code&gt;D3.js&lt;/code&gt;. For PageRank we have API get request in &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/backend/app.py"&gt;backend&lt;/a&gt; and in frontend we're fetching that data from the &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/frontend/src/components/PageRank.js"&gt;&lt;code&gt;PageRank.js&lt;/code&gt;&lt;/a&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  fetchData(){
    fetch("/page-rank")
      .then((res) =&amp;gt; res.json())
      .then(
        (result) =&amp;gt; {
          this.setState({
            isLoaded: true,
            nodes: result.page_rank,
          });
        },
        (error) =&amp;gt; {
          this.setState({
            isLoaded: true,
            error,
          });
        }
      );
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While PageRank results are being calculated, you will see your results loading. After the results are loaded, they are drawn with graph component &lt;a href="https://github.com/memgraph/twitch-analytics-demo/blob/main/frontend/src/components/GraphPR.js"&gt;&lt;code&gt;GraphPR.js&lt;/code&gt;&lt;/a&gt; which uses &lt;code&gt;D3.js&lt;/code&gt;. Next to the graph you can see the table of results with the names of the streamers and their calculated rank.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JMSRt3QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-page-rank.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JMSRt3QA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-page-rank.png" alt="memgraph-tutorial-twitch-page-rank" width="880" height="541"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the refresh button above the drawn graph. It will be used later on, in the &lt;strong&gt;Part 3&lt;/strong&gt; of the blog, when we'll show how you can stream your data using &lt;strong&gt;Kafka&lt;/strong&gt;. We will stream new chatters of user &lt;em&gt;BadBoyHalo&lt;/em&gt; and see how his rank improves with larger number of chatters in his network.&lt;br&gt;
Similarly, we calculated the Betweenness Centrality and showed the results below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9fwtfYm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-bc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9fwtfYm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://public-assets.memgraph.com/twitch-streaming-graph-analysis/memgraph-tutorial-twitch-bc.png" alt="memgraph-tutorial-twitch-bc" width="880" height="558"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;And that's it for now! You can see all necessary code for this part of the blog post &lt;a href="https://github.com/memgraph/twitch-analytics-demo/tree/main/frontend"&gt;here&lt;/a&gt;. Hope you got everything right, but if you have any questions or want to give some feedback, feel free to join our &lt;a href="https://discord.gg/memgraph"&gt;Discord&lt;/a&gt; Community Server. Make sure to follow up on the last part of this blog, where you can learn how to tackle with your streaming data.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Deploy a Flask Application - Manually (Simple Steps)</title>
      <author>Senichi</author>
      <pubDate>Wed, 27 Oct 2021 20:16:34 +0000</pubDate>
      <link>https://dev.to/senichimaro/deploy-a-flask-application-manually-simple-steps-iph</link>
      <guid>https://dev.to/senichimaro/deploy-a-flask-application-manually-simple-steps-iph</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-create-a-named-kubernetes-cluster"&gt;
  &lt;/a&gt;
  1. Create a named Kubernetes cluster
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;eksctl create cluster --name [cluster-name]  --profile [profile-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-image-registry-get-or-create"&gt;
  &lt;/a&gt;
  2. Image registry (get or create)
&lt;/h2&gt;

&lt;p&gt;Create/Build a Docker Image and push it to their Docker Hub repository.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker images are loaded from the container registry into Kubernetes pods. Access to the pods are exposed to consumers through a service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#3-deployment"&gt;
  &lt;/a&gt;
  3. Deployment
&lt;/h2&gt;

&lt;p&gt;The manual &lt;strong&gt;deployment needs a YAML file&lt;/strong&gt; that will describe things like number of replicas, deployment strategy, Docker image name, and port on which the application can be accessed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#1-deployment-mockup-yaml-file"&gt;
  &lt;/a&gt;
  1. Deployment mockup yaml file
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-flask-deployment
  labels:
    app: simple-flask
spec:
  replicas: 3
  selector:
    matchLabels:
      app: simple-flask
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 2
      maxSurge: 2
  template:
    metadata:
      labels:
        app: simple-flask
    spec:
      containers:
      - name: simple-flask
        image: [docker-username]/[image-name]
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
        ports:
          - containerPort: 8080
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#2-in-your-terminal"&gt;
  &lt;/a&gt;
  2. In your terminal
&lt;/h4&gt;

&lt;p&gt;Navigate to &lt;a href="//deployment.yaml%20for%20short"&gt;deployment-mockup-yaml-file&lt;/a&gt;, and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kubectl apply -f deployment.yml

# It will show the message as :
# deployment.apps/simple-flask-deployment created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#3-other-useful-commands-are"&gt;
  &lt;/a&gt;
  3. Other useful commands are:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Verify the deployment
kubectl get deployments

# Check the rollout status
kubectl rollout status deployment/simple-flask-deployment

# Show the pods in the cluster
kubectl get pods

# Show the services in the cluster
kubectl describe services

# Display information about the cluster
kubectl cluster-info
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#4-troubleshoot"&gt;
  &lt;/a&gt;
  4. Troubleshoot:
&lt;/h4&gt;

&lt;p&gt;If your pods do not show up as "Ready" while running the &lt;code&gt;kubectl get nodes1&lt;/code&gt; command, use the following troubleshooting tips:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# List all namespaces, all pods
kubectl get all -A

# Show all events
kubectl get events -w

# Show component status
kubectl get componentstatuses
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#5-clean-up"&gt;
  &lt;/a&gt;
  5. Clean up
&lt;/h4&gt;

&lt;p&gt;Let's delete the deployment as well the Kubernetes cluster:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Delete your deployment
kubectl delete deployments/simple-flask-deployment

# Tear down your cluster
eksctl delete cluster eksctl-demo --profile &amp;lt;profile-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://kubernetes.io/docs/reference/kubectl/cheatsheet/"&gt;Kubernetes Cheatsheet&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>aws</category>
      <category>kubernetes</category>
      <category>docker</category>
    </item>
    <item>
      <title>Conditional Rendering in React: A Quick Introduction</title>
      <author>Alex Wentz</author>
      <pubDate>Wed, 27 Oct 2021 20:15:02 +0000</pubDate>
      <link>https://dev.to/fromwentzitcame/conditional-rendering-in-react-a-quick-introduction-38i3</link>
      <guid>https://dev.to/fromwentzitcame/conditional-rendering-in-react-a-quick-introduction-38i3</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-conditional-rendering"&gt;
  &lt;/a&gt;
  What is Conditional Rendering?
&lt;/h3&gt;

&lt;p&gt;Many websites want users to create an account that requires you to sign in when using the site. Any social media, blogging platform, or e-commerce site will often even require you to have that account.&lt;/p&gt;

&lt;p&gt;When you go to sign in, you will often click on a button that says something like 'Login' but what happens to that button after you're logged in? It usually changes to 'Logout' until you sign out, after which is says 'Login' again. This is a common example of conditional rendering.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conditional rendering&lt;/strong&gt; is when you set conditions in your code that impacts what gets displayed for a user. Some examples could be single html elements on the page (like a login/logout button) or even entire React components (like navigating to a Contact Us form for customers). Some defined condition must be met for a certain kind of display to present for the user.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-implement-conditional-rendering-in-your-react-app"&gt;
  &lt;/a&gt;
  How to Implement Conditional Rendering in Your React App
&lt;/h3&gt;

&lt;p&gt;While there are several ways to implement conditional rendering, today I'm only going to talk through my go-to method: ternary operators. They rely on requiring only two possible displays, but other methods could give more than two possible paths; switch allows for three or more conditions.&lt;/p&gt;

&lt;p&gt;We'll talk through a like button, which is a common use case, and use that as the base of our example.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ternary-operator-a-like-button"&gt;
  &lt;/a&gt;
  Ternary Operator - A Like Button
&lt;/h4&gt;

&lt;p&gt;As a reminder, a ternary operator takes three arguments. The first will return a Boolean value of either true or false. If true, the ternary will implicitly return the second argument; if false, it will return the third.&lt;/p&gt;

&lt;p&gt;In the code below, we have some Boolean value 'liked' associated with a certain post in some social media platform for a particular user. If they haven't liked it yet, the button will display "Like"; if they have, the button will display "Liked". While not included here, typically there would also be click events located in the button tag to allow the user to toggle between displaying "Like" and "Liked" in the browser.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example #1&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;liked&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Liked&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Like&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Example #2&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;liked&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Liked&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Like&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Either example above will produce the same display.&lt;/p&gt;

&lt;p&gt;In example #1, we have a single ternary located inside the button tag. When the element itself doesn't change and either display will use the same click events, this can be a clean and efficient way to structure the code.&lt;/p&gt;

&lt;p&gt;In example #2, you are returning two separate elements. While the example we're working with doesn't appear to require writing out that much code, it can be very useful if you are choosing between two different html elements or whether or not to be able to hide/show that element on the page.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#toggle-between-showinghiding-elements"&gt;
  &lt;/a&gt;
  Toggle Between Showing/Hiding Elements
&lt;/h4&gt;

&lt;p&gt;Say we are scrolling through a catalog of images with any details hidden on load, but a user can click a "Show Details" button below any image to display them. In React, we could create a separate component for those details.&lt;/p&gt;

&lt;p&gt;This might require code that looks something closer to the following (albeit with some details like click events and state missing - more on that below):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ItemDetails&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ItemDetails.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ItemContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showDetails&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hide Details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Show Details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showDetails&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemDetails&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An image displays along with a button that allows you to show/hide details. When showDetails is false, nothing will display. When it is true, you'll display the ItemDetails component along with the image right there on the page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-leverage-state"&gt;
  &lt;/a&gt;
  When to Leverage State
&lt;/h3&gt;

&lt;p&gt;The previous example is a great segue into how state can be leveraged in conditional rendering. Showing and hiding details does not rely on static data, but rather on the behavior of the user in that particular instance.&lt;/p&gt;

&lt;p&gt;Using state is a very easy way to accomplish what we need. Building upon our example, we can do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ItemDetails&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ItemDetails.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// don't forget to import!&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ItemContainer&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// set state you'll use in click event&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;showDetails&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setShowDetails&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//define your click event function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setShowDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;setShowDetails&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// toggle between true/false on click&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showDetails&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hide Details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Show Details&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;showDetails&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ItemDetails&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h3&gt;

&lt;p&gt;This post is only a brief introduction to conditional rendering and how we use ternary operators to implement them. There are many other methods to explore that may be more useful in different contexts. We also touched on how state can be a useful tool in conditional rendering.&lt;/p&gt;

&lt;p&gt;If you found this tutorial helpful, like and follow for more posts to come!&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>1 line of code: How to get lowest numeric element of an Array</title>
      <author>martin krause</author>
      <pubDate>Wed, 27 Oct 2021 20:05:49 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-get-lowest-numeric-element-of-an-array-49cc</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-get-lowest-numeric-element-of-an-array-49cc</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const lowestNumber = arr =&amp;gt; Math.min(...arr); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Returns the lowest numerical item of the array.&lt;/p&gt;




&lt;p&gt;Happy coding and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Two Symbol Turing Machine</title>
      <author>Dinesh Kumar Gnanasekaran</author>
      <pubDate>Wed, 27 Oct 2021 19:47:57 +0000</pubDate>
      <link>https://dev.to/dineshgdk/two-symbol-turing-machine-33a</link>
      <guid>https://dev.to/dineshgdk/two-symbol-turing-machine-33a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;A Turing machine is a mathematical model used for computation by using infinitely long tape with symbols and a set of instructions. It was proposed by Alan Turing (remember, The Imitation Game) in 1936.&lt;/p&gt;

&lt;p&gt;All the programming languages are Turing complete and all the computer hardware (well almost) are Turing complete, meaning that they can do everything that a Turing machine can do. A two symbol Turing machine is a Turing machine that uses only two symbols (eg. 0‚Äôs and 1‚Äôs) for computation.&lt;/p&gt;

&lt;p&gt;Well!, let's get straight to the point and see what‚Äôs a two symbol Turing machine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-components"&gt;
  &lt;/a&gt;
  The Components
&lt;/h2&gt;

&lt;p&gt;A Turing machine has three components&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Infinitely long tape&lt;/li&gt;
&lt;li&gt;Read/write head&lt;/li&gt;
&lt;li&gt;Set of instructions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Turing machine uses infinite tape, to read and write symbols using the head on the tape by following a set of instructions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;Let us see the working of our Turing machine through an example of unary addition.&lt;/p&gt;

&lt;p&gt;Unary addition is simple stroke addition, say we add three strokes with two strokes we get five strokes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;||| + || = |||||
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, let's assume that our Turing machine uses two symbols 0 and 1.&lt;/p&gt;

&lt;p&gt;The initial tape is given below, where * represents the read/write head of the machine.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      * 
0 0 0 1 1 1 0 1 1 0 0 0 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The instructions are in three cards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ala17Vsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbns0orm4tqujewcc1dp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ala17Vsq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cbns0orm4tqujewcc1dp.png" alt="Image description" width="700" height="84"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The machine works as follows,&lt;/li&gt;
&lt;li&gt;The machine begins with an initial card&lt;/li&gt;
&lt;li&gt;The head reads the symbol on the tape&lt;/li&gt;
&lt;li&gt;The head erases and writes the new symbol on the tape according to the symbol read&lt;/li&gt;
&lt;li&gt;The head shifts in the direction (left or right) according to the symbol read&lt;/li&gt;
&lt;li&gt;The machine follows the next cards according to the symbol read&lt;/li&gt;
&lt;li&gt;The machine repeats the steps 2 to 5 until the halt card (CARD -0)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#walk-through"&gt;
  &lt;/a&gt;
  Walk Through
&lt;/h2&gt;

&lt;p&gt;Our machine starts initially with CARD -1, with the initial tape.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INITIAL STATE
      * 
0 0 0 1 1 1 0 1 1 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The head encounters symbol 1, so it writes 1 shift to the right and follows the instructions from the next card, CARD -1 itself. The same happens two more times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;STEP 1
        * 
0 0 0 1 1 1 0 1 1 0 0 0

STEP 2
          * 
0 0 0 1 1 1 0 1 1 0 0 0

STEP 3
            * 
0 0 0 1 1 1 0 1 1 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At STEP 3 the machine stills follow CARD -1. The head reads the symbol 0, now the head erases 0 and writes 1, shifts to the right, and goes to CARD -2 for the next instructions. Then, the head reads 1, writes 1, and shifts to the right. This repeats again for another step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;STEP 4
              * 
0 0 0 1 1 1 1 1 1 0 0 0

STEP 5
                * 
0 0 0 1 1 1 1 1 1 0 0 0

STEP 6
                  * 
0 0 0 1 1 1 1 1 1 0 0 0

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the head reads symbol 0, following the instructions from CARD -2, it writes 0, shifts left and gets the next instructions from CARD-3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;STEP 7
                * 
0 0 0 1 1 1 1 1 1 0 0 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the head reads symbol 1, it erases and writes 0, shift to the right, and the next card is CARD -0 (HALT)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article, we had a brief discussion on what is a Turing machine, especially a two symbol Turing machine. We went through the working of two symbols Turing machine through an example of unary addition.&lt;/p&gt;

&lt;p&gt;I have implemented the two-state Turing machine in C and you can access through this &lt;a href="https://github.com/dinesh-GDK/turing_machine"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can create your own Turing machine with the flexibility of adding custom instructions and tape, with step-by-step visualization. I have added some interesting tapes and cards for you to implement.&lt;/p&gt;

&lt;p&gt;We have just touched the tip of the iceberg. There are very interesting puzzles which we can play with the Turing machine. One such puzzle is the Busy Beaver problem, a truly fascinating one. If interested just take a peek at it. The GitHub link contains some busy beaver cards and tapes as well.&lt;/p&gt;

</description>
      <category>turingmachine</category>
      <category>programming</category>
      <category>c</category>
    </item>
  </channel>
</rss>
