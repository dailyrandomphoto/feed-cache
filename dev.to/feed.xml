<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to deploy Node.js Socket.IO server with load balancing &amp; reverse proxy using pm2 &amp; Nginx?</title>
      <author>Amr Elmohamady</author>
      <pubDate>Mon, 06 Sep 2021 22:05:41 +0000</pubDate>
      <link>https://dev.to/amrelmohamady/how-to-deploy-node-js-socket-io-server-with-load-balancing-reverse-proxy-using-pm2-nginx-7k0</link>
      <guid>https://dev.to/amrelmohamady/how-to-deploy-node-js-socket-io-server-with-load-balancing-reverse-proxy-using-pm2-nginx-7k0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#imagine-that-you-are-building-an-app-with-chat-rooms-and-it-will-have-thousands-of-users-how-do-you-think-a-server-could-handle-this-load-"&gt;
  &lt;/a&gt;
  Imagine that you are building an app with chat rooms and it will have thousands of users how do you think a server could handle this load ?!
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#with-two-concepts"&gt;
  &lt;/a&gt;
  With Two concepts:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Reverse Proxy&lt;/strong&gt;&lt;br&gt;
A reverse proxy server provides an additional level of abstraction and control to ensure the smooth flow of network traffic between clients and servers.&lt;/p&gt;

&lt;p&gt;Examples of Web Servers are Nginx and Apache.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Load Balancing&lt;/strong&gt;&lt;br&gt;
A reverse proxy server can act as a “traffic cop,” sitting in front of your backend servers and distributing client requests across a group of servers in a manner that maximizes speed and capacity utilization while ensuring no one server is overloaded, which can degrade performance. If a server goes down, the load balancer redirects traffic to the remaining online servers.&lt;/p&gt;



&lt;p&gt;This tutorial assumes that you are able to deploy a normal nodejs app with nginx.&lt;/p&gt;

&lt;p&gt;First, we won't be starting our app normally like &lt;code&gt;node index.js&lt;/code&gt;, but we'll install a package called &lt;a href="https://pm2.keymetrics.io/"&gt;pm2&lt;/a&gt;:&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;npm i pm2&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;pm2 is an Advanced process manager and Load Balancer for production Node.js applications.&lt;/p&gt;

&lt;p&gt;we'll run the app in the &lt;a href="https://pm2.keymetrics.io/docs/usage/cluster-mode/"&gt;cluster mode&lt;/a&gt; (The cluster mode allows networked Node.js applications to be scaled across all CPUs available)&lt;/p&gt;

&lt;p&gt;So set the start command to be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pm2 start index.js -i max
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;-i&lt;/code&gt; for number of instances and &lt;code&gt;max&lt;/code&gt; to be scaled across all CPUs available&lt;/p&gt;

&lt;p&gt;To stop the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pm2 stop index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To Inspect Logs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pm2 logs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To restart the app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pm2 restart index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Normally, the code that start the server looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;listening on *:8000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But for socket.Io we need more than one server or Port to run multiple node instances so we use something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;800&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_APP_INSTANCE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`listening on *:&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="mi"&gt;800&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_APP_INSTANCE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The NODE_APP_INSTANCE environment variable is set by the app instance index so if we have four instances then we'll have &lt;code&gt;localhost:8000&lt;/code&gt;, &lt;code&gt;localhost:8001&lt;/code&gt;, &lt;code&gt;localhost:8002&lt;/code&gt;, &lt;code&gt;localhost:8003&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This was the part of load balancing.&lt;/p&gt;

&lt;p&gt;Now, let's go to do reverse proxy with nginx.&lt;/p&gt;

&lt;p&gt;In nginx main config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# 80 for http, 443 for https&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;example.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;http://nodes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kn"&gt;proxy_http_version&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Upgrade&lt;/span&gt; &lt;span class="nv"&gt;$http_upgrade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Connection&lt;/span&gt; &lt;span class="s"&gt;"upgrade"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


  &lt;span class="kn"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;nodes&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# enable sticky session with either "hash" (uses the complete IP address)&lt;/span&gt;
    &lt;span class="kn"&gt;hash&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt; &lt;span class="s"&gt;consistent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;# or "ip_hash" (uses the first three octets of the client IPv4 address, or the entire IPv6 address)&lt;/span&gt;
    &lt;span class="c1"&gt;# ip_hash;&lt;/span&gt;
    &lt;span class="c1"&gt;# or "sticky" (needs commercial subscription)&lt;/span&gt;
    &lt;span class="c1"&gt;# sticky cookie srv_id expires=1h domain=.example.com path=/;&lt;/span&gt;

    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;example.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;example.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8001&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;example.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8002&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="nf"&gt;example.com&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8003&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, let's understand this file line by line:&lt;/p&gt;

&lt;p&gt;First, In the server config we listen to the default port of http which is 80, 443 for https.&lt;/p&gt;

&lt;p&gt;Then, the server name = site's domain name&lt;/p&gt;

&lt;p&gt;Then, at the root location we set couple of headers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The X-Forwarded-For (XFF) header is a de-facto standard header for identifying the originating IP address of a client connecting to a web server through an HTTP proxy or a load balancer. When traffic is intercepted between clients and servers, server access logs contain the IP address of the proxy or load balancer only. To see the original IP address of the client, the X-Forwarded-For request header is used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Host header to determine which server the request should be routed to.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;we'll pass proxy_pass for now&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;http version to be 1.1 the version that supports WebSockets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTTP Upgrade is used to indicate a preference or requirement to switch to a different version of HTTP or to another protocol, if possible, so here in socket.IO implementation we need to upgrade to a websocket connection&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don't know how Socket.IO work under the hood I suggest you read &lt;a href="https://socket.io/docs/v4/how-it-works/"&gt;this page&lt;/a&gt; from the Socket.IO Documentation.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upstream nodes block is used to enable sticky session so Socket.IO could work and to set the servers that our load balancer will use, so we set proxy_pass in the location block to be the upstream "nodes" so it can do its reverse proxy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, Finally, Go Run &lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;I hope you found this article useful and please share your thoughts below :-)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/amrelmohamady"&gt;For more Useful Articles don't forget to FOllOW ;-)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://mobile.twitter.com/Amr__Elmohamady"&gt;@Amr__Elmohamady&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LinkedIn: &lt;a href="https://www.linkedin.com/in/amr-elmohamady-06342a1ba"&gt;Amr Elmohamady&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>nginx</category>
      <category>devops</category>
    </item>
    <item>
      <title>Master objects in JS 🍨 (Part 2)</title>
      <author>Ben Matt, Jr.</author>
      <pubDate>Mon, 06 Sep 2021 21:23:10 +0000</pubDate>
      <link>https://dev.to/jrmatanda/master-objects-in-js-part-2-2fnn</link>
      <guid>https://dev.to/jrmatanda/master-objects-in-js-part-2-2fnn</guid>
      <description>&lt;h2&gt;
  &lt;a href="#objects-and-prototypes"&gt;
  &lt;/a&gt;
  Objects and Prototypes
&lt;/h2&gt;

&lt;p&gt;Like many &lt;strong&gt;object-oriented&lt;/strong&gt; languages, JavaScript provides support for implementation inheritance: the reuse of code or data through a dynamic delegation mechanism. But unlike many conventional languages, &lt;strong&gt;JavaScript&lt;/strong&gt;’s inheritance mechanism is based on prototypes rather than classes. For many programmers, &lt;strong&gt;JavaScript&lt;/strong&gt; is the first object-oriented language they encounter without classes.&lt;/p&gt;

&lt;p&gt;In many languages, every object is an instance of an associated class, which provides code shared between all its instances. &lt;strong&gt;JavaScript&lt;/strong&gt;, by contrast, has no built-in notion of classes. Instead, objects inherit from other objects. Every object is associated with some other object, known as its prototype. Working with prototypes can be different from classes, although many concepts from traditional object-oriented languages still carry over.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#understand-the-difference-between-raw-prototype-endraw-raw-getprototypeof-endraw-and-raw-proto-endraw-"&gt;
  &lt;/a&gt;
  Understand the difference between &lt;code&gt;prototype&lt;/code&gt;, &lt;code&gt;getPrototypeOf&lt;/code&gt; and &lt;code&gt;__proto__&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Prototypes involve three separate but related accessors, all of which are named with some variation on the word prototype. This unfortunate overlap naturally leads to quite a bit of confusion. Let’s get straight to the point.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;C.prototype&lt;/code&gt; is used to establish the &lt;strong&gt;prototype&lt;/strong&gt; of &lt;strong&gt;objects&lt;/strong&gt; created by new C().&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Object.getPrototypeOf(obj)&lt;/code&gt; is the standard &lt;strong&gt;ES5&lt;/strong&gt; mechanism for retrieving &lt;code&gt;obj&lt;/code&gt;’s prototype object.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;obj.__proto__&lt;/code&gt; is a nonstandard mechanism for retrieving &lt;code&gt;obj&lt;/code&gt;’s &lt;strong&gt;prototype&lt;/strong&gt; object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To understand each of these, consider a typical definition of a JavaScript datatype. The User constructor expects to be called with the new operator and takes a name and the hash of a password string and&lt;br&gt;
stores them on its created object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;passwordHash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passwordHash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;passwordHash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[User &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;checkPassword&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passwordHash&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sfalken&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0ef33ae791068ec64b502d6cb0191387&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The User &lt;strong&gt;function&lt;/strong&gt; comes with a default &lt;strong&gt;prototype&lt;/strong&gt; property, containing an &lt;strong&gt;object&lt;/strong&gt; that starts out more or less empty. In this example, we add two methods to the &lt;code&gt;User.prototype&lt;/code&gt; object: &lt;code&gt;toString&lt;/code&gt; and &lt;code&gt;checkPassword.&lt;/code&gt; When we create an instance of User with the new operator, the resultant object u gets the object stored at &lt;code&gt;User.prototype&lt;/code&gt;&lt;br&gt;
automatically assigned as its &lt;strong&gt;prototype object&lt;/strong&gt;. The image below shows a diagram of these objects&lt;/p&gt;

&lt;p&gt;Notice the arrow linking the instance object u to the prototype object&lt;br&gt;
&lt;code&gt;User.prototype&lt;/code&gt;. This link describes the inheritance relationship.&lt;br&gt;
Property lookups start by searching the &lt;code&gt;object&lt;/code&gt;’s &lt;code&gt;own properties&lt;/code&gt;; for example, u.name and &lt;code&gt;u.passwordHash&lt;/code&gt; return the current values of immediate properties of u. Properties not found directly on u are looked up in u’s prototype. Accessing &lt;code&gt;u.checkPassword&lt;/code&gt;, for example, retrieves a method stored in &lt;code&gt;User.prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This leads us to the next item in our list. Whereas the &lt;strong&gt;prototype&lt;/strong&gt; property of a constructor function is used to set up the &lt;strong&gt;prototype&lt;/strong&gt; relationship of new instances, the ES5 function &lt;code&gt;Object.getPrototypeOf()&lt;/code&gt; can&lt;br&gt;
be used to retrieve the prototype of an existing object. So, for example, after we create the object u in the example above, we can test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://firebasestorage.googleapis.com/v0/b/code-rainbow.appspot.com/o/blog-posts%2Fjs%20objects%2FDiagram.png?alt=media&amp;amp;token=80eceac8-d133-4bdd-a776-fb0be71f5525"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n1Sx-mEa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/code-rainbow.appspot.com/o/blog-posts%252Fjs%2520objects%252FDiagram.png%3Falt%3Dmedia%26token%3D80eceac8-d133-4bdd-a776-fb0be71f5525" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This illustrates the &lt;strong&gt;prototype&lt;/strong&gt; relationships for the User &lt;strong&gt;constructor&lt;/strong&gt; and&lt;br&gt;
&lt;strong&gt;instance&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some environments produce a nonstandard mechanism for retrieving&lt;br&gt;
the &lt;strong&gt;prototype&lt;/strong&gt; of an &lt;strong&gt;object&lt;/strong&gt; via a special &lt;code&gt;__proto__&lt;/code&gt; property. This can&lt;br&gt;
be useful as a stopgap for environments that do not support &lt;strong&gt;ES5&lt;/strong&gt;’s &lt;code&gt;Object.getPrototypeOf&lt;/code&gt;. In such environments, we can similarly test:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A final note about &lt;strong&gt;prototype&lt;/strong&gt; relationships: &lt;strong&gt;JavaScript&lt;/strong&gt; programmers will often describe User as a class, even though it consists of little more than a function. Classes in JavaScript are essentially the combination of a constructor function (User) and a &lt;strong&gt;prototype&lt;/strong&gt; &lt;strong&gt;object&lt;/strong&gt; used to share methods between instances of the &lt;strong&gt;class&lt;/strong&gt; (&lt;code&gt;User.prototype&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://firebasestorage.googleapis.com/v0/b/code-rainbow.appspot.com/o/blog-posts%2Fjs%20objects%2Fdiagram2.png?alt=media&amp;amp;token=1b38b56a-86c4-4583-acd3-5377f453690c"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6dWA26F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/code-rainbow.appspot.com/o/blog-posts%252Fjs%2520objects%252Fdiagram2.png%3Falt%3Dmedia%26token%3D1b38b56a-86c4-4583-acd3-5377f453690c" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a conceptual view of the User “class”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The image above provides a good way to think about the User &lt;strong&gt;class&lt;/strong&gt; conceptually. The User &lt;strong&gt;function&lt;/strong&gt; provides a &lt;strong&gt;public constructor&lt;/strong&gt; for the class, and &lt;code&gt;User.prototype&lt;/code&gt; is an internal implementation of the methods shared between instances. Ordinary uses of User and u have no need to access the &lt;strong&gt;prototype&lt;/strong&gt; &lt;strong&gt;object&lt;/strong&gt; directly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-to-remember"&gt;
  &lt;/a&gt;
  Things to Remember 🧠
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;C.prototype&lt;/code&gt; determines the prototype of objects created by new &lt;code&gt;C()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Object.getPrototypeOf(obj)&lt;/code&gt; is the standard ES5 function for retrieving the &lt;strong&gt;prototype&lt;/strong&gt; of an &lt;strong&gt;object&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;obj.__proto__&lt;/code&gt; is a nonstandard mechanism for retrieving the &lt;strong&gt;prototype&lt;/strong&gt; of an &lt;strong&gt;object&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;A class is a &lt;strong&gt;design pattern&lt;/strong&gt; consisting of a &lt;strong&gt;constructor&lt;/strong&gt; &lt;strong&gt;function&lt;/strong&gt; and
an associated &lt;strong&gt;prototype&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#prefer-raw-objectgetprototypeof-endraw-to-raw-proto-endraw-"&gt;
  &lt;/a&gt;
  Prefer &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; to &lt;code&gt;__proto__&lt;/code&gt; 🦄
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;ES5&lt;/strong&gt; introduced &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; as the standard &lt;strong&gt;API&lt;/strong&gt; for retrieving an object’s prototype, but only after a number of &lt;strong&gt;JavaScript&lt;/strong&gt; engines had long provided the special &lt;code&gt;__proto__&lt;/code&gt; property for the same purpose. Not all &lt;strong&gt;JavaScript&lt;/strong&gt; environments support this extension, however, and those that do are not entirely compatible. Environments differ, for example, on the treatment of objects with a null prototype. In some environments, &lt;strong&gt;proto&lt;/strong&gt; is inherited from &lt;code&gt;Object.prototype&lt;/code&gt;, so an object with a null prototype has no special &lt;strong&gt;proto&lt;/strong&gt; property:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// object with no prototype&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;__proto__&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// false (in some environments)&lt;/span&gt;
&lt;span class="c1"&gt;// In  others,  __proto__  is  always  handled  specially,  regardless  of  an object’s state:&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// object with no prototype&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;__proto__&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true (in some environments&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wherever &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; is available, it is the more standard and portable approach to extracting prototypes. Moreover, the &lt;code&gt;__proto__&lt;/code&gt; property leads to a number of bugs due to its pollution of&lt;br&gt;
all objects. JavaScript engines that currently support the extension may choose in the future to allow programs to disable it in order to avoid these bugs. Preferring &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; ensures that code will continue to work even if &lt;code&gt;__proto__&lt;/code&gt; is disabled.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;JavaScript&lt;/strong&gt; environments that do not provide the &lt;strong&gt;ES5&lt;/strong&gt; API, it is easy to implement in terms of &lt;code&gt;__proto__&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;undefined&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPrototypeOf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;not an object&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;__proto__&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This implementation is safe to include in ES5 environments, because it avoids installing the function if &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; already exists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#things-to-remember"&gt;
  &lt;/a&gt;
  Things to Remember 🧠
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Prefer the standards-compliant &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; to the non-&lt;br&gt;
standard &lt;code&gt;__proto__&lt;/code&gt; property.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implement &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; in non-ES5 environments that&lt;br&gt;&lt;br&gt;
support &lt;code&gt;__proto__&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#never-modify-raw-proto-endraw-"&gt;
  &lt;/a&gt;
  Never modify &lt;code&gt;__proto__&lt;/code&gt; 🍕
&lt;/h2&gt;

&lt;p&gt;The special &lt;strong&gt;proto&lt;/strong&gt; property provides an additional power that &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; does not: the ability to modify an &lt;strong&gt;object&lt;/strong&gt;’s &lt;strong&gt;prototype&lt;/strong&gt; link. While this power may seem innocuous (after all, it’s just another property, right?), it actually has serious implications and should be avoided. The most obvious reason to avoid modifying&lt;br&gt;
&lt;code&gt;__proto__&lt;/code&gt; is portability: Since not all platforms support the ability to&lt;br&gt;
change an &lt;strong&gt;object&lt;/strong&gt;’s &lt;strong&gt;prototype&lt;/strong&gt; you simply can’t write portable code that does it.&lt;/p&gt;

&lt;p&gt;Another reason to avoid modifying &lt;code&gt;__proto__&lt;/code&gt; is performance. All modern &lt;strong&gt;JavaScript&lt;/strong&gt; engines heavily optimize the act of getting and setting &lt;strong&gt;object&lt;/strong&gt; &lt;strong&gt;properties&lt;/strong&gt;, since these are some of the most common operations that JavaScript programs perform. These optimizations are built on the engine’s knowledge of the structure of an object. When you change the object’s internal structure, say, by adding or removing properties to the object or an object in its prototype chain, some of these optimizations are invalidated. Modifying &lt;code&gt;__proto__&lt;/code&gt; actually changes the inheritance structure itself, which is the most destructive change possible. This can invalidate many more optimizations than modifications to ordinary properties.&lt;/p&gt;

&lt;p&gt;But the biggest reason to avoid modifying &lt;code&gt;__proto__&lt;/code&gt; is for maintaining predictable behavior. An object’s prototype chain defines its behavior by determining its set of properties and property values. Modifying an object’s prototype link is like giving it a brain transplant: It swaps the object’s entire inheritance hierarchy. It may be possible to imagine exceptional situations where such an operation could be helpful, but as a matter of basic sanity, an inheritance hierarchy should remain stable.&lt;/p&gt;

&lt;p&gt;For creating new objects with a custom prototype link, you can use &lt;strong&gt;ES5&lt;/strong&gt;’s &lt;code&gt;Object.create&lt;/code&gt;. For environments that do not implement ES5, Item 33 provides a portable implementation of &lt;code&gt;Object.create&lt;/code&gt; that does not rely on &lt;code&gt;__proto__&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#things-to-remember"&gt;
  &lt;/a&gt;
  Things to Remember 🧠
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Never modify an object’s &lt;code&gt;__proto__&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;Object.create&lt;/code&gt; to provide a custom &lt;strong&gt;prototype&lt;/strong&gt; for new objects.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading-the-second-part-this-article"&gt;
  &lt;/a&gt;
  🎉🎉🎉 Thank you for reading the second part this article! 🎉🎉🎉
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#dont-forget-to-checkout-the-third-part-of-this-serie-make-your-constructors-newagnostic"&gt;
  &lt;/a&gt;
  Don't forget to checkout the third part of this serie! 🥳 &lt;a href="https://code-rainbow.web.app/blog/Master%20Objects%20in%20JS%20%F0%9F%8D%A8%20(Part%203).html"&gt;Make your Constructors new-Agnostic&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;And if you want more in depth knowledge about your favorite programming languages checkout my personal &lt;a href="https://code-rainbow.web.app"&gt;blog&lt;/a&gt; to become an on demand developer 😉, and you can find me on &lt;a href="https://twitter.com/JrMatanda"&gt;twitter&lt;/a&gt; as well😃.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Video preview on hover with HTML and JavaScript</title>
      <author>Juan Belieni</author>
      <pubDate>Mon, 06 Sep 2021 21:13:24 +0000</pubDate>
      <link>https://dev.to/juanbelieni/video-preview-on-hover-with-html-and-javascript-1b00</link>
      <guid>https://dev.to/juanbelieni/video-preview-on-hover-with-html-and-javascript-1b00</guid>
      <description>&lt;p&gt;In this post, I will be showing how to add a preview feature for the videos inside your HTML page.&lt;/p&gt;

&lt;p&gt;First, I will be using this simple HTML code as the base to create the preview feature:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;video&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; 
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.webm"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, to start, we should create the &lt;code&gt;startPreview&lt;/code&gt; and &lt;code&gt;stopPreview&lt;/code&gt; functions. To contextualize, the preview will be played during 4 seconds, starting after the first second at a playback rate of 50%.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;startPreview&lt;/code&gt; will set the values so that the preview will be played as mentioned, and &lt;code&gt;stopPreview&lt;/code&gt; will reset the values to the default ones.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startPreview&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;muted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;playbackRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;stopPreview&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;playbackRate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After it, we should create the event listeners so that the preview can be played on hover. To accomplish this, a timeout will be used to stop the preview after 4 seconds.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;previewTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mouseenter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;startPreview&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;previewTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stopPreview&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mouseleave&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;clearTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;previewTimeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;previewTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;stopPreview&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's important to clear the timeout every time the user leaves the video area, because it can happen that a previous timeout stops the video when the user enters the video area for a second time before the 4 seconds.&lt;/p&gt;




&lt;p&gt;Here is the result:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/juanbelieni/embed/jOwMaaG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How I got into Computer Engineering?</title>
      <author>Muhammad</author>
      <pubDate>Mon, 06 Sep 2021 20:45:02 +0000</pubDate>
      <link>https://dev.to/midnqp/how-i-got-into-computer-engineering-58gb</link>
      <guid>https://dev.to/midnqp/how-i-got-into-computer-engineering-58gb</guid>
      <description>&lt;p&gt;It all started in the age of 12.&lt;/p&gt;

&lt;p&gt;Smartphones were pretty rare then. But I had one. The other thing I had was Broadband Internet. One day I woke up from sleep and said, why not combine both. And then I tried to do it. And I failed. &lt;/p&gt;

&lt;p&gt;Kept failing until I succeeded to turn on the &lt;code&gt;hosted network&lt;/code&gt; at my Windows 10 laptop, and share bandwidth. That's how I could use Internet on my tiny smartphone as Wi-Fi, without using a Network Router. &lt;/p&gt;

&lt;p&gt;That was a victory! And victories feel good. &lt;strong&gt;Really good.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instantly got interested in computers. Started learning to code the same day. Started with learning &lt;code&gt;C&lt;/code&gt;, and started respecting Denis Ritchie.&lt;/p&gt;

&lt;p&gt;To the 12-years-old me, &lt;code&gt;C&lt;/code&gt; wasn't easy. But to my unquenching curiosity, it wasn't hard. I even learnt &lt;code&gt;pointers&lt;/code&gt;!!! Kept learning it, until I realized Python is a better one to start with.&lt;/p&gt;

&lt;p&gt;Fast forward and now, I'm a &lt;strong&gt;Web Systems Engineer&lt;/strong&gt; at a Dubai-based startup. And I got my first paycheck before all of my friends and peers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#lesson-of-the-day"&gt;
  &lt;/a&gt;
  Lesson of the Day
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you have a dream that you believe in, keep chasing that dream.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>motivation</category>
    </item>
    <item>
      <title>WHAT IS SQL INJECTION? TYPES, EXAMPLES, PREVENTION</title>
      <author>Sudip Sengupta</author>
      <pubDate>Mon, 06 Sep 2021 20:07:09 +0000</pubDate>
      <link>https://dev.to/sudip_sg/what-is-sql-injection-types-examples-prevention-541e</link>
      <guid>https://dev.to/sudip_sg/what-is-sql-injection-types-examples-prevention-541e</guid>
      <description>&lt;p&gt;Code injections are the oldest known web application attack vectors, with successful hacks leading to a &lt;strong&gt;denial of service, loss of data integrity, data loss,&lt;/strong&gt; and the &lt;strong&gt;compromise of entire networks.&lt;/strong&gt; As a result, &lt;a href="https://crashtest-security.com/what-are-the-different-types-of-injection-attacks/"&gt;injection-based security vulnerabilities&lt;/a&gt; rank number one on the &lt;a href="https://crashtest-security.com/owasp/"&gt;OWASP Top 10 Security Risks&lt;/a&gt;. They allow attackers to apply malicious code into information systems through user input interfaces. One such mechanism is a &lt;strong&gt;SQL Injection&lt;/strong&gt; attack that involves the insertion of SQL queries to client input to access and manage backend databases. SQL Injection attacks are mostly carried out on web applications that rely on dynamic databases but lack sufficient input validation.&lt;/p&gt;

&lt;p&gt;This article delves into SQL Injection based security risks and the various best practices and tools to prevent such attacks.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#sqlinjectiondeepdive"&gt;A Deep Dive into SQL Injection Vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#sqlinjectionassessment"&gt;SQLi Security Assessment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#sqlinjectionattacktypes"&gt;Types of SQL Injection Attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#sqlinjectionperformattack"&gt;How Attackers Perform SQLi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#sqlinjectionattackexamples"&gt;Commonly Known SQLi Attack Examples &amp;amp; Technique&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#sqlinjectionprevention"&gt;How to Prevent SQL injection Attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#sqlinjectiontools"&gt;Tools to Prevent, Detect and Remediate SQLi Vulnerabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crashtest-security.com/sql-injections/#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ul65TZoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezcpw19830jmp1kiujm7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ul65TZoP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ezcpw19830jmp1kiujm7.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-deep-dive-into-sql-injection-vulnerabilities"&gt;
  &lt;/a&gt;
  A DEEP DIVE INTO SQL INJECTION VULNERABILITIES
&lt;/h2&gt;

&lt;p&gt;When a malicious user performs an SQL Injection (SQLi) attack, they typically intend to control the web application’s database server using malicious SQL statements. This allows them to bypass authentication controls required to access and retrieve the contents of the database. This usually is initiated by hackers scouting the application firewall for vulnerable user input points. Once identified, the attacker creates input content known as a &lt;strong&gt;malicious payload,&lt;/strong&gt; executing unauthorized SQL injection commands at the back-end database. &lt;/p&gt;

&lt;p&gt;Attackers commonly develop SQL injection commands to perform a wide variety of malicious acts, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieving user credentials within the database&lt;/li&gt;
&lt;li&gt;Selecting and outputting crucial system data&lt;/li&gt;
&lt;li&gt;Appending or adding new data to a database&lt;/li&gt;
&lt;li&gt;Deleting tables and records from the database&lt;/li&gt;
&lt;li&gt;Using the back-end database server to access the Operating System&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sqli-security-assessment"&gt;
  &lt;/a&gt;
  SQLI SECURITY ASSESSMENT
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lS0l4wSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p4edng48sf9i7cogfqe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lS0l4wSg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p4edng48sf9i7cogfqe.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CVSS Vector: &lt;a href="https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N"&gt;AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-sql-injection-attacks"&gt;
  &lt;/a&gt;
  TYPES OF SQL INJECTION ATTACKS
&lt;/h2&gt;

&lt;p&gt;SQLi is a common and well-documented attack strategy whose success has far-reaching business consequences such as unauthorized viewing of credentials and gaining administrative access to the application’s database. SQLi attacks are categorized based on the following methods used to gain database access:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inband-sqli"&gt;
  &lt;/a&gt;
  IN-BAND SQLI
&lt;/h3&gt;

&lt;p&gt;The attacker gathers their results using the same communication channel they use to launch attacks. This code injection technique is common since it offers a simple, efficient way to access the database server. There are several types of in-band SQLi, including:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#errorbased-sqli"&gt;
  &lt;/a&gt;
  ERROR-BASED SQLI
&lt;/h3&gt;

&lt;p&gt;The attacker relies on error messages relayed by the database server to learn about the database structure. Sometimes the error messages can provide sufficient data to enumerate the entire database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unionbased-sqli"&gt;
  &lt;/a&gt;
  UNION-BASED SQLI
&lt;/h3&gt;

&lt;p&gt;In this case, the malicious payload uses SQLs UNION operator to combine the results of several SELECT statements to one output, which is returned along with the HTTP response. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blind-sql-injectioninferential-sqli"&gt;
  &lt;/a&gt;
  BLIND SQL INJECTION/INFERENTIAL SQLI
&lt;/h3&gt;

&lt;p&gt;In a Blind SQL injection technique, the hacker sends malicious data payloads, then reconstructs the database server’s structure using the web application’s response. In Blind SQLi, data is not actually retrieved by the web application, so the attacker cannot view the results of an attack using the same communication channel they used to launch this type of attack. Blind SQL Injection, also commonly referred to as the Inferential method, is of several types:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contentbased-sqli"&gt;
  &lt;/a&gt;
  CONTENT-BASED SQLI
&lt;/h3&gt;

&lt;p&gt;Content/Boolean-based SQLi attacks force the web application to return different results depending on whether the malicious SQL query returns a TRUE or FALSE result. The query result determines whether the content in the HTTP response stays the same or changes. As a result, the attacker can determine whether the malicious payload returns a true or false result even though the query returns no data from the database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#timebased-sqli"&gt;
  &lt;/a&gt;
  TIME-BASED SQLI
&lt;/h3&gt;

&lt;p&gt;The attacker sends a query that forces the application to wait for a specific duration before returning a response. The attacker uses the response time to determine whether the result of a query is TRUE or FALSE. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#outofband-sqli"&gt;
  &lt;/a&gt;
  OUT-OF-BAND SQLI
&lt;/h3&gt;

&lt;p&gt;The attacker uses the same channel to launch the attack and gather results. While this attack is uncommon since it relies on certain  database server features being enabled, it offers an alternative for orchestrating injection attacks if the server responses are unstable. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-attackers-perform-sqli"&gt;
  &lt;/a&gt;
  HOW ATTACKERS PERFORM SQLI
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#webpage-sqli"&gt;
  &lt;/a&gt;
  WEB-PAGE SQLI
&lt;/h3&gt;

&lt;p&gt;When a web application asks for user input, some attackers supply SQL statements that are run unknowingly on the database. This section explores ways in which attackers create payloads that generate valid SQL statements at the user input.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sqli-based-on-11-is-always-true"&gt;
  &lt;/a&gt;
  SQLI BASED ON 1=1 IS ALWAYS TRUE
&lt;/h3&gt;

&lt;p&gt;The attacker uses an OR statement to access all records in a table. When prompted for a User ID, the attacker inputs 105 OR 1=1. If the web application lacks sufficient input validation, this statement is accepted the generates a SQL command of the form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM Users WHERE UserId = 105 OR 1=1;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This query accesses and displays all records in the Users table since 1=1 is always TRUE.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sqli-based-on-is-always-true"&gt;
  &lt;/a&gt;
  SQLI BASED ON “=” IS ALWAYS TRUE
&lt;/h3&gt;

&lt;p&gt;Attackers use an OR statement to get combinations of related data. When prompted for a Username and Password, they key in ” or ” “=” on both fields. The database server then executes a command of the form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM Users WHERE Name =”” or “”=”” AND Pass =”” or “”=””
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command returns every row in the Users table since OR “=” is always true for Usernames and Passwords.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sqli-based-on-batched-statements"&gt;
  &lt;/a&gt;
  SQLI BASED ON BATCHED STATEMENTS
&lt;/h3&gt;

&lt;p&gt;Modern database servers accept batch statements, which hackers may exploit to target particular records or tables. For instance, when prompted for their User ID, they input 105; DROP TABLE Suppliers. This executes a valid statement of the form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM Users WHERE UserId = 105; DROP TABLE Suppliers;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This deletes the table Suppliers from User records.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#commonly-known-sqli-attack-examples-amp-technique"&gt;
  &lt;/a&gt;
  COMMONLY KNOWN SQLI ATTACK EXAMPLES &amp;amp; TECHNIQUE
&lt;/h2&gt;

&lt;p&gt;Successful SQLi attacks can be used to tamper with existing data, disclose crucial information, gain administrative rights to networks and cause repudiation issues. Examples of SQLi attacks on enterprise systems include:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-2019-bulgarian-national-revenue-agency-data-breach"&gt;
  &lt;/a&gt;
  THE 2019 BULGARIAN NATIONAL REVENUE AGENCY DATA BREACH
&lt;/h3&gt;

&lt;p&gt;On 15th July 2019, an anonymous hacker announced that they successfully deployed an SQL injection on the national tax authority’s servers. The hacker extracted 11 GB of data in 57 folders of .csv files that contained names and identification information of over 6 million people. The files also included citizens’ social security payments, taxes, online betting data, debts, company activities, and revenues collected for over 12 years.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-20202021-accellion-data-breach"&gt;
  &lt;/a&gt;
  THE 2020/2021 ACCELLION DATA BREACH
&lt;/h3&gt;

&lt;p&gt;Attackers used an SQL injection vulnerability to gain initial access to the Accellion File Transfer Appliance (FTA) and cause a massive data breach affecting multiple companies in different sectors and multiple countries. The victims’ data began to appear on CLOP LEAKS, a ransomware forum. The zero-day vulnerabilities that enabled a successful attack are yet to be fixed as more companies keep reporting compromises of user data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-prevent-sql-injection-attacks"&gt;
  &lt;/a&gt;
  HOW TO PREVENT SQL INJECTION ATTACKS
&lt;/h2&gt;

&lt;p&gt;Preventing SQLi attacks is a complex and rigorous process since prevention techniques vary according to the programming language used, the SQL database engine, and the SQLi subtype being addressed. This section explores the tools and best practices to prevent SQL Injection vulnerabilities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-practices-to-prevent-sqli-vulnerabilities"&gt;
  &lt;/a&gt;
  BEST PRACTICES TO PREVENT SQLI VULNERABILITIES
&lt;/h3&gt;

&lt;p&gt;Some strategic principles and practices to keep web applications safe from SQLi attacks include:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#training-amp-awareness"&gt;
  &lt;/a&gt;
  TRAINING &amp;amp; AWARENESS
&lt;/h4&gt;

&lt;p&gt;Everyone involved in developing and managing the application should understand the risk and impacts of SQL injections. Training should also be extended to users to understand why it is important only to include valid inputs when prompted.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#filter-user-input"&gt;
  &lt;/a&gt;
  FILTER USER INPUT
&lt;/h4&gt;

&lt;p&gt;A database administrator should never trust user input. Internal and public user inputs should all be filtered and validated before being exposed to the database server.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-whitelistbased-filters"&gt;
  &lt;/a&gt;
  USE WHITELIST-BASED FILTERS
&lt;/h4&gt;

&lt;p&gt;Attackers will always develop clever methods to circumvent blacklists. Whitelisting prevents attacks using a list that only allows certain users to access the protected system. In addition, malicious payloads deployed by SQLi injections cannot execute when they don’t exist in the whitelist.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#use-updated-web-technologies"&gt;
  &lt;/a&gt;
  USE UPDATED WEB TECHNOLOGIES
&lt;/h4&gt;

&lt;p&gt;Software updates often include patches for discovered vulnerabilities. Hackers typically rely on these vulnerabilities to deploy malicious payloads. Using the latest patched versions of development environments and frameworks will meet compliance standards and keep the web application safe from exploits as most software organizations try to stay ahead of hackers. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#regular-scanning"&gt;
  &lt;/a&gt;
  REGULAR SCANNING
&lt;/h4&gt;

&lt;p&gt;Attackers inject malicious input through vulnerabilities they discover in the system code. Therefore, security teams should undertake a SQL vulnerability assessment using the right tools to find any possible vulnerabilities before attackers can take advantage of them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sql-injection-practical-prevention-tips"&gt;
  &lt;/a&gt;
  SQL INJECTION PRACTICAL PREVENTION TIPS
&lt;/h3&gt;

&lt;p&gt;To prevent SQL injection attacks, treat all user input as potentially malicious and follow some programming guidelines:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#filter-user-input"&gt;
  &lt;/a&gt;
  FILTER USER INPUT
&lt;/h4&gt;

&lt;p&gt;For an attacker to successfully execute an SQL injection, he needs to plant some code run by the web application’s database. Therefore all user input should be validated first and limited to the needed characters. E.g., you may ask a user to input a username, password, and e-mail address in a registration form. You can limit the allowed characters of these input fields to characters that do not interfere with the database. The following example filters out user input for the three values in PHP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (preg_match("/[^A-Za-z0-9]/", $username) ||
  (preg_match("/[^A-Za-z0-9\!_-]/", $password) ||
  (preg_match("/[^A-Za-z0-9_-@]/", $email)) {
    echo "Invalid Characters!";
} else {
    # Run Database Command
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#database-mappers"&gt;
  &lt;/a&gt;
  DATABASE MAPPERS
&lt;/h4&gt;

&lt;p&gt;Most modern web frameworks provide some abstraction of database handling. E.g., Laravel provides Eloquent queries. Created objects are automatically converted and stored or retrieved from the database. In the example of the user registration form, one could create the user object in the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$user = new User;
$user-&amp;gt;username = $request-&amp;gt;username;
$user-&amp;gt;password = $request-&amp;gt;password;
$user-&amp;gt;email = $request-&amp;gt;email;
$user-&amp;gt;save();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The resulting SQL statement is automatically sanitized and will prevent SQL injections.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sanitize-user-input-prepared-statements"&gt;
  &lt;/a&gt;
  SANITIZE USER INPUT / PREPARED STATEMENTS
&lt;/h4&gt;

&lt;p&gt;It may not always be possible to use a database mapper. In these cases, use prepared statements to create your SQL queries. These forms of statements validate and sanitize the user-provided values and therefore prevent SQL injections. E.g., in PHP, you can create a prepared statement the following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$stmt = $mysqli-&amp;gt;prepare("INSERT INTO users(username, password, email) VALUES (?, ?, ?)");
$stmt-&amp;gt;bind_param("sss", $username, $password, $email) # "sss" here states, that three strings are expected.
$username = $request-&amp;gt;username;
$password = $request-&amp;gt;password;
$email = $request-&amp;gt;email;
$stmt-&amp;gt;execute();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tools-to-prevent-detect-and-remediate-sqli-vulnerabilities"&gt;
  &lt;/a&gt;
  TOOLS TO PREVENT, DETECT AND REMEDIATE SQLI VULNERABILITIES
&lt;/h2&gt;

&lt;p&gt;Regular SQL vulnerability assessment scan is the first actionable remediation to keeping web applications safe from SQLi vulnerabilities. Here is a list of popular vulnerability scanners that can help security teams identify and resolve SQLi vulnerabilities:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#crashtest-security"&gt;
  &lt;/a&gt;
  &lt;a href="https://crashtest-security.com/"&gt;CRASHTEST SECURITY&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Crashtest Security&lt;/strong&gt; is an end-to-end security testing suite that simplifies vulnerability scanning through quick security assessments, risk reduction, and rich vulnerability reports. In addition, Crashtest integrates with multiple layers of the development stack, thereby allowing teams to establish a continuous testing process and eliminate attack surfaces on APIs and web applications.&lt;/p&gt;

&lt;p&gt;The security platform also automates vulnerability scanning and seamlessly delivers security information on the web application, allowing development teams to focus on clean code. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#acunetix"&gt;
  &lt;/a&gt;
  ACUNETIX
&lt;/h3&gt;

&lt;p&gt;A complete security testing solution that can be used for both distributed and standalone systems. &lt;a href="https://www.acunetix.com/"&gt;Acunetix&lt;/a&gt; integrates seamlessly with market-leading development frameworks and comes with in-built vulnerability scanning and management functions. Acunetix also interfaces with third-party issue trackers to help with end-to-end vulnerability management.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#burp-suite"&gt;
  &lt;/a&gt;
  BURP SUITE
&lt;/h3&gt;

&lt;p&gt;A Web Application Security Testing solution developed by &lt;a href="https://www.imperva.com/"&gt;PortSwigger&lt;/a&gt; to help organizations fight zero-day threats through automated scanning. The suite also includes penetration testing functions that can be used to identify the impact of SQLi attacks on web servers. The suite comes in an Enterprise and Professional Edition that offers different vulnerability management tools for web application security. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imperva-database-security"&gt;
  &lt;/a&gt;
  IMPERVA DATABASE SECURITY
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.imperva.com/"&gt;Imperva&lt;/a&gt; is a database risk &amp;amp; compliance management platform that delivers analytics, response, and protection for organizational data assets. The platform integrates with any database so organizations can use its global preconfigured reports, policies, and templates as soon as Imperva is deployed. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  SUMMARY
&lt;/h2&gt;

&lt;p&gt;Despite extensive efforts to remediate issues, SQLi vulnerabilities are still popular. It is estimated that &lt;strong&gt;8% of websites and web applications&lt;/strong&gt; have at least one vulnerability. In addition, attackers leverage SQLi vulnerabilities in many ways to compromise a web application through unauthorized database access. &lt;/p&gt;

&lt;p&gt;To help with this, the &lt;a href="https://crashtest-security.com/vulnerability-scanner/"&gt;Crashtest Security Suite&lt;/a&gt; helps organizations protect their web applications and APIs from injection attacks through continuous vulnerability scans and testing. In addition, the security platform fits seamlessly in the DevOps toolchain, enabling organizations to develop and deploy safer javascript, web applications, and APIs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://crashtest.cloud/registration?utm_source=blog&amp;amp;utm_medium=referral&amp;amp;utm_campaign=blog_reg&amp;amp;_ga=2.249044103.1096107355.1630931897-1082379764.1630931897"&gt;Sign up for free here&lt;/a&gt; to know how Crashtest Security can help with a rapid vulnerability assessment scan to achieve a robust security model. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article has already been published on &lt;a href="https://crashtest-security.com/sql-injections/"&gt;https://crashtest-security.com/sql-injections/&lt;/a&gt; and has been authorized by Crashtest Security for a republish.&lt;/em&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Configure HTTP security response headers for Azure Static Web Apps
</title>
      <author>Rebin</author>
      <pubDate>Mon, 06 Sep 2021 19:48:08 +0000</pubDate>
      <link>https://dev.to/rebin/configure-http-security-response-headers-for-azure-static-web-apps-2b81</link>
      <guid>https://dev.to/rebin/configure-http-security-response-headers-for-azure-static-web-apps-2b81</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;HTTP security headers is the most crucial part of the web applications that helps to protect against some variety of attacks most likely cross-site scripting, clickjacking and other script attacks, configure HTTP security headers is frequently forgotten by Developers! So, I recently checked my blog on &lt;a href="https://securityheaders.com"&gt;securityheaders.com&lt;/a&gt; and results indicated that HTTP security headers are not configured so I decided to put some HTTP security headers for my Azure Static Web Apps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recommended-http-security-headers"&gt;
  &lt;/a&gt;
  Recommended HTTP security headers
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Strict-Transport-Security&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Content-Security-Policy&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;X-Frame-Options&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;X-Permitted-Cross-Domain-Policies&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;X-Content-Type-Options&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Permissions-Policy&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#configure-http-security-headers"&gt;
  &lt;/a&gt;
  Configure HTTP security headers
&lt;/h3&gt;

&lt;p&gt;You can create a json file called ( staticwebapp.config.json ) in the root of the web site and put the configuration like below then deploy it to your Azure Static Web App host.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"globalHeaders"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"content-security-policy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"frame-ancestors 'self'; 
         upgrade-insecure-requests"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"X-Frame-Options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SAMEORIGIN"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"X-Permitted-Cross-Domain-Policies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"none"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"Referrer-Policy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"no-referrer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"X-Content-Type-Options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"nosniff"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"Permissions-Policy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"autoplay=()"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>azure</category>
      <category>security</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Coding Games</title>
      <author>Ronaldo Peres</author>
      <pubDate>Mon, 06 Sep 2021 19:26:13 +0000</pubDate>
      <link>https://dev.to/ronaldoperes/coding-games-581f</link>
      <guid>https://dev.to/ronaldoperes/coding-games-581f</guid>
      <description>&lt;p&gt;Hi everyone,&lt;/p&gt;

&lt;p&gt;I just read this post below on FreeCodeCamp:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/12-free-coding-games-to-learn-programming-for-beginners/#codingame"&gt;FreeCodeCamp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I am just sharing to beginners programmers!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sites"&gt;
  &lt;/a&gt;
  Sites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.codingame.com/start"&gt;Codingame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flukeout.github.io/"&gt;CSS Diner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flexboxfroggy.com/"&gt;Flexbox Froggy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.flexboxdefense.com/"&gt;Flexbox Defense&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cssgridgarden.com/"&gt;CSS Grid Garden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codecombat.com/"&gt;Code Combat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scratch.mit.edu/"&gt;Scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.tynker.com/"&gt;Tynker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mystery.knightlab.com/"&gt;SQL Murder Mystery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexnisnevich.github.io/untrusted/"&gt;Unstrusted&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://play.elevatorsaga.com/"&gt;Elevator saga&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://checkio.org/"&gt;CheckiO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I already knew some of these sites, others didn't&lt;/p&gt;

&lt;p&gt;I recommend Codingame, if anyone wanna follow me there:&lt;br&gt;
&lt;a href="https://www.codingame.com/servlet/urlinvite?u=1638407"&gt;Peres at Codingame&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>The Lazy Automated React Portfolio</title>
      <author>poboisvert</author>
      <pubDate>Mon, 06 Sep 2021 19:18:59 +0000</pubDate>
      <link>https://dev.to/poboisvert/the-lazy-github-portfolio-587k</link>
      <guid>https://dev.to/poboisvert/the-lazy-github-portfolio-587k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hearnoevil-introduction"&gt;
  &lt;/a&gt;
  🙉 Introduction
&lt;/h2&gt;

&lt;p&gt;As lazy as you may be. I always wanted to see if a topic may interest me before investing 200 hours. For this project, my goal was to explore API, fetching data and React container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rocket-live-demo-amp-repository"&gt;
  &lt;/a&gt;
  🚀 Live Demo &amp;amp; repository
&lt;/h2&gt;

&lt;p&gt;Demo: &lt;a href="https://portfolio-a541e.web.app/"&gt;https://portfolio-a541e.web.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/poboisvert/PortfolioReact"&gt;https://github.com/poboisvert/PortfolioReact&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vulcansalute-still-interested"&gt;
  &lt;/a&gt;
  🖖 Still Interested?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Change with you favorite URL in the top menu to fetch your repository&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;client/src/components/Header/Header.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Kindly adjust the file to your repository and projects to highlight.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;client/src/api/GithubAPI.js 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Also edit the articles that you feel are important to share&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;client/src/components/Articles/FetchArticle.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#moneywithwings-will-it-pay-off"&gt;
  &lt;/a&gt;
  💸 Will it pay off?
&lt;/h2&gt;

&lt;p&gt;I would say yes because I use effective deployment technology (Firebase, React and CI/CD of Firebase) that are well democratized and people will connect with your portfolio.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pill-summary"&gt;
  &lt;/a&gt;
  💊 Summary
&lt;/h2&gt;

&lt;p&gt;In the than 5 minutes you can locally run a portfolio and highlights your favorite repositories and articles.&lt;/p&gt;

</description>
      <category>react</category>
      <category>portfolio</category>
      <category>tutorial</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Setting up a Next.js storefront for your Medusa project</title>
      <author>Vadim Smirnov</author>
      <pubDate>Mon, 06 Sep 2021 18:35:52 +0000</pubDate>
      <link>https://dev.to/medusajs/setting-up-a-next-js-storefront-for-your-medusa-project-3j3k</link>
      <guid>https://dev.to/medusajs/setting-up-a-next-js-storefront-for-your-medusa-project-3j3k</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gWOJRa_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1repyme0xw6h3yj1ibw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gWOJRa_E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1repyme0xw6h3yj1ibw.gif" alt="Medusa storefront"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/medusajs/medusa"&gt;Medusa&lt;/a&gt; is a headless open source commerce platform giving engineers the foundation for building unique and scaleable digital commerce projects through our API-first engine. &lt;/p&gt;

&lt;p&gt;Being headless, our starters serve as a good foundation for you to get coupled with a frontend in a matter of minutes.&lt;/p&gt;

&lt;p&gt;This article assumes you already have the Medusa project created and ready to be linked to your Next.js starter.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;In order to get started let's open the terminal and use the following command to create an instance of your storefront:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app &lt;span class="nt"&gt;-e&lt;/span&gt; https://github.com/medusajs/nextjs-starter-medusa my-medusa-storefront
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have a storefront codebase that is ready to be used with our Medusa server.&lt;/p&gt;

&lt;p&gt;Next, we have to complete two steps to make our new shiny storefront to speak with our server: &lt;strong&gt;link storefront to a server&lt;/strong&gt; and &lt;strong&gt;update the &lt;code&gt;STORE_CORS&lt;/code&gt; variable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's jump to these two.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#link-storefront-to-a-server"&gt;
  &lt;/a&gt;
  Link storefront to a server
&lt;/h2&gt;

&lt;p&gt;For this part, we should navigate to a &lt;code&gt;client.js&lt;/code&gt; file which you can find in the utils folder.&lt;/p&gt;

&lt;p&gt;We don't need to do much in here, but to make sure that our storefront is pointing to the port, where the server is running&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Medusa&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@medusajs/medusa-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BACKEND_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GATSBY_STORE_URL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://localhost:9000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;--- That is the line we are looking for&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;createClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Medusa&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;baseUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BACKEND_URL&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default the Medusa server is running at port 9000, so if you didn't change that we are good to go to our next step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-the-raw-storecors-endraw-variable"&gt;
  &lt;/a&gt;
  Update the &lt;code&gt;STORE_CORS&lt;/code&gt; variable
&lt;/h2&gt;

&lt;p&gt;Here let's navigate to your Medusa server and open &lt;code&gt;medusa-config.js&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Let's locate the &lt;code&gt;STORE_CORS&lt;/code&gt; variable and make sure it's the right port (which is 3000 by default for Next.js projects)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* 
 * CORS to avoid issues when consuming Medusa from a client.
 * Should be pointing to the port where the storefront is running.
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;STORE_CORS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;STORE_CORS&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:3000&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have a storefront that interacts with our Medusa server and with that we have a sweet and complete e-commerce setup with a Next.js storefront.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more"&gt;
  &lt;/a&gt;
  Learn more
&lt;/h2&gt;

&lt;p&gt;If you want to discover the endless possibilities of Medusa's ecosystem you can find a lot more useful resources on &lt;a href="https://docs.medusa-commerce.com/"&gt;our docs page&lt;/a&gt; which can help you to build your awesome commerce project!&lt;/p&gt;

&lt;p&gt;If you need help or have questions about how to use Medusa feel free to join our &lt;a href="https://discord.gg/H6naACAK"&gt;Discord&lt;/a&gt; to get direct access to our engineering team.&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>nextjs</category>
      <category>javascript</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Javascript With Loop</title>
      <author>Mahin Tazuar </author>
      <pubDate>Mon, 06 Sep 2021 18:29:21 +0000</pubDate>
      <link>https://dev.to/mahin678/javascript-with-loop-mh</link>
      <guid>https://dev.to/mahin678/javascript-with-loop-mh</guid>
      <description>&lt;p&gt;Loop is a very important thing in every programming language. When we need to do something again and again and also need to control the infinite process. At this time we are use Loop. &lt;/p&gt;

&lt;p&gt;Today we apply this in Javascript Language. Javascript have 5 kinds of loop. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;for &lt;/li&gt;
&lt;li&gt;for in &lt;/li&gt;
&lt;li&gt;for of&lt;/li&gt;
&lt;li&gt;While &lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do while&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for loop : &lt;br&gt;
for loop have a simple syntax, as usually, we need to use define some statement after for loop keyword. normally for loop working with array.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for in loop working with an object. If we need to get object element then we are using this loop.  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mahin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tazuar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// mahin ,tazuar&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;for loop working with an array, It's a simple return array element.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mahin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;// mahin , 34&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;That is simple and like for loop&lt;/li&gt;
&lt;li&gt;Do while loop, when we need to do something after we are starting our loop in this time we are using do-while loop.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;343&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5345&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4656&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;56&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>Yancy: The Next Model</title>
      <author>Doug Bell</author>
      <pubDate>Mon, 06 Sep 2021 18:15:36 +0000</pubDate>
      <link>https://dev.to/preaction/yancy-the-next-model-ndi</link>
      <guid>https://dev.to/preaction/yancy-the-next-model-ndi</guid>
      <description>&lt;p&gt;&lt;a href="http://preaction.me/yancy"&gt;Yancy&lt;/a&gt; is a &lt;a href="https://en.wikipedia.org/wiki/Content_management_system"&gt;content management system&lt;/a&gt; and application framework for the &lt;a href="https://mojolicious.org"&gt;Mojolicious&lt;/a&gt; web framework. For the last year, I've been using it to develop &lt;a href="https://metacpan.org/pod/Zapp"&gt;Zapp, my workflow automation webapp&lt;/a&gt;. Over that time, it became harder and harder to organize all the code needed to manipulate Zapp's data. To solve this problem, I wrote &lt;a href="http://preaction.me/yancy/perldoc/Yancy/Guides/Model"&gt;Yancy::Model&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mojolicious is a &lt;a href="https://docs.mojolicious.org/Mojolicious/Guides/Growing#Model-View-Controller"&gt;Model-View-Controller (MVC) web framework&lt;/a&gt;. The model layer is where the data manipulation happens: Reading and writing records in the database. It is also where business logic happens: Sending e-mail for transactions, or periodic data cleanup. The goal of a model layer is to provide an API on to the application's data so that it can be used not only by the web application, but by other tools as well.&lt;/p&gt;

&lt;p&gt;Because &lt;a href="https://docs.mojolicious.org/Mojolicious/Guides/Growing#Model"&gt;Mojolicious does not provide its own model layer&lt;/a&gt;, most people usually turn to the &lt;a href="https://metacpan.org/pod/DBIx::Class"&gt;DBIx::Class ORM&lt;/a&gt;. But, this has always felt too complex and heavy for my needs: By the time I &lt;em&gt;know&lt;/em&gt; my project needs something like DBIx::Class, it's usually too late to migrate easily. I wanted something lighter and more agile that could grow from a rapidly-developed proof-of-concept app to the final, maintainable production version.&lt;/p&gt;

&lt;p&gt;Yancy provides a generic API on to multiple database systems, which it calls &lt;a href="http://preaction.me/yancy/perldoc/Yancy/Backend"&gt;Backends&lt;/a&gt;. Backends handle basic database operations with a common API. Using this common API, I built a lightweight class system for accessing data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://preaction.me/yancy/perldoc/Yancy/Model"&gt;Yancy::Model&lt;/a&gt; wraps the backend object and manages the classes.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://preaction.me/yancy/perldoc/Yancy/Model/Schema"&gt;Yancy::Model::Schema&lt;/a&gt; provides methods to create and search a database table.&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://preaction.me/yancy/perldoc/Yancy/Model/Item"&gt;Yancy::Model::Item&lt;/a&gt; represents a single row in a table and provides methods to update and delete it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using these basic classes provides a more fluent interface to the database than using the backend API directly. But, the power of a model layer is in writing custom code to make managing the data easy and safe. For this, Yancy::Model allows you to add your own classes for schemas (tables) and items (rows).&lt;/p&gt;

&lt;p&gt;Writing custom model classes makes organizing your data management code easy. For example, Zapp has a table for workflows (called "plans") with a related table containing tasks ("plan_tasks") and another related table containing workflow input ("plan_inputs"). Whenever a user looks at a plan, they need to also see the plan's tasks and inputs. So, I can create a schema class that fetches this information automatically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Zapp::Schema::&lt;/span&gt;&lt;span class="nv"&gt;Plans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Yancy::Model::Schema&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;( $self, $id, %opt ) {&lt;/span&gt;
    &lt;span class="c1"&gt;# I could use two JOINs here instead, but joining &lt;/span&gt;
    &lt;span class="c1"&gt;# two 1:* relationships could result in a lot&lt;/span&gt;
    &lt;span class="c1"&gt;# of data to fetch and discard...&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nn"&gt;SUPER::&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%opt&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$inputs_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;plan_inputs&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$plan&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$inputs_schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s"&gt;plan_id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;order_by&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$tasks_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;plan_tasks&lt;/span&gt;&lt;span class="p"&gt;"&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$plan&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$tasks_schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s"&gt;plan_id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;order_by&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;task_id&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$plan&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Zapp also has a table for recording every time a plan is run, called "runs". This table also records the tasks and inputs the plan had when it was run in "run_tasks" and "run_inputs" respectively (along with some additional fields to record the status of the tasks and the user's actual input). In a way, a run &lt;em&gt;is&lt;/em&gt; a plan. As above, when a user looks at a run, they need to also see the run's tasks and inputs. Since Yancy::Model uses plain Perl objects, I can refactor the plans class to also handle runs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Zapp::Schema::&lt;/span&gt;&lt;span class="nv"&gt;Plans&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Yancy::Model::Schema&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;tasks_table&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;plan_tasks&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;inputs_table&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;plan_inputs&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="k"&gt;sub &lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;( $self, $id, %opt ) {&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$plan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nn"&gt;SUPER::&lt;/span&gt;&lt;span class="nv"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;%opt&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$inputs_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;inputs_schema&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$plan&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$inputs_schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s"&gt;plan_id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;order_by&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$tasks_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;model&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$self&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;tasks_schema&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$plan&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$tasks_schema&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s"&gt;plan_id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$id&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;order_by&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;task_id&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$plan&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;Zapp::Schema::&lt;/span&gt;&lt;span class="nv"&gt;Runs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="nn"&gt;Mojo::&lt;/span&gt;&lt;span class="nv"&gt;Base&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Zapp::Schema::Plans&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;signatures&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;tasks_table&lt;/span&gt;  &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;run_tasks&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="s"&gt;inputs_table&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;run_inputs&lt;/span&gt;&lt;span class="p"&gt;';&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now plans and runs both fetch their related data automatically. I can add similar functionality to &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt; to make dealing with the related data seamless. Further, I can create completely custom methods like &lt;code&gt;enqueue&lt;/code&gt; which will add the plan (or the run) to the &lt;a href="https://docs.mojolicious.org/Minion"&gt;Minion job queue&lt;/a&gt; to be executed.&lt;/p&gt;

&lt;p&gt;With &lt;a href="http://preaction.me/yancy/perldoc/Yancy/Guides/Model/"&gt;Yancy::Model&lt;/a&gt; I can quickly build an API for my application's data. As my application develops, I can keep my data logic separate from my web frontend logic. Since they're separate, I can use my data logic in other applications and tools. This is the biggest benefit of using an MVC pattern with a framework like &lt;a href="http://mojolicious.org"&gt;Mojolicious&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>perl</category>
      <category>mojolicious</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How show PDF in vanilla JavaScript in Browser🤯</title>
      <author>Patrick</author>
      <pubDate>Mon, 06 Sep 2021 18:13:07 +0000</pubDate>
      <link>https://dev.to/patik123/how-show-pdf-in-vanilla-javascript-in-browser-2o10</link>
      <guid>https://dev.to/patik123/how-show-pdf-in-vanilla-javascript-in-browser-2o10</guid>
      <description>&lt;p&gt;Yesterday I wondered how to display a PDF document on a website.&lt;/p&gt;

&lt;p&gt;I tried with &lt;code&gt;iframe&lt;/code&gt; to display the document but it didn't work on mobile devices😔.&lt;/p&gt;

&lt;p&gt;After some time of searching, I found a solution using the Mozilla PDF.js library😏.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pdf-display-in-plain-js.vercel.app"&gt;Live demo&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/patik123/pdf_display_in_plain_js"&gt;GitHub repo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#mozilla-pdfjs"&gt;
  &lt;/a&gt;
  Mozilla PDF.js
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A general-purpose, web standards-based platform for parsing and rendering PDFs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mozilla's PDF.js project is an open-source project licensed under the Apache 2 license, so it can be used in almost any application.&lt;/p&gt;

&lt;p&gt;The library basically only allows us PDF files in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--slFIq6p3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vehfh2agmhdng3hp7pg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--slFIq6p3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8vehfh2agmhdng3hp7pg.gif" alt="Interface if we open the file in browser"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you look in detail at the UI of the browser you will find that it is the same as in Mozilla Firefox, if you open the PDF in the browser.&lt;/p&gt;

&lt;p&gt;A demo version of the browser is available at &lt;a href="https://mozilla.github.io/pdf.js/web/viewer.html"&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, if you do not need all these features in your application then there is the option of using the PDF.js API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mozilla.github.io/pdf.js/"&gt;More about PDF.js&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-build-pdf-renderer"&gt;
  &lt;/a&gt;
  How to build PDF renderer
&lt;/h2&gt;

&lt;p&gt;First, we need to add the PDF.js library to our website, we do it with a simple line.&lt;/p&gt;

&lt;p&gt;I am using PDF.js version 2.0.943. In other versions, changes to the API may occur.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.0.943/pdf.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our app will consist of navigation keys with which we will be able to go to the next, previous page and enlarge or reduce the document.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"pdf-toolbar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"navigation_controls"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"pdf-toolbar-button"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"previous"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Previous&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"pdf-input"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"current_page"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"number"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"pdf-toolbar-button"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Next&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"zoom_controls"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
     &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"pdf-toolbar-button"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"zoom_in"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;+&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"pdf-toolbar-button"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"zoom_out"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;-&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our PDF document is displayed in a canvas element, so we need to embed it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id = &lt;/span&gt;&lt;span class="s"&gt;"canvas_container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id = &lt;/span&gt;&lt;span class="s"&gt;"pdf_renderer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add some JavaScript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;defaultState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;currentPage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// GET OUR PDF FILE&lt;/span&gt;
&lt;span class="nx"&gt;pdfjsLib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDocument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;file.pdf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// RENDER PDF DOCUMENT&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPage&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pdf_renderer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;viewport&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getViewport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zoom&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;canvasContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;viewport&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;viewport&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// FUNCTION GO TO PREVIOUS SITE&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;previous&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPage&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPage&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;current_page&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// FUNCTION GO TO PREVIOUS NEXT&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPage&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_pdfInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numPages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPage&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;current_page&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// FUNCTION GO TO CUSTUM SITE&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current_page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keypress&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyCode&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyCode&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;which&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// ON CLICK ENTER GO TO SITE TYPED IN TEXT-BOX&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;desiredPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current_page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;valueAsNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;desiredPage&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;desiredPage&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_pdfInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;numPages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentPage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;desiredPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;current_page&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;desiredPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// FUNCTION FOR ZOOM IN&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zoom_in&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zoom&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// FUNCTION FOR ZOOM OUT&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zoom_out&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pdf&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;defaultState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;zoom&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have now created a page where we can display any PDF on any device, without downloading.&lt;/p&gt;

&lt;p&gt;Here is the look of the final version.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j-ef56ye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slxim6750ymfa82m4ljm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j-ef56ye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/slxim6750ymfa82m4ljm.gif" alt="Final version of app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have a CV in PDF on your portfolio, you can now view it in your browser.&lt;/p&gt;

&lt;p&gt;I hope this guide helped you, for even more content you can follow me on my &lt;a href="https://twitter.com/Patik123_"&gt;Twitter profile&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
