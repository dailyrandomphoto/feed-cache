<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Mailing a Postcard with JavaScript Part 1</title>
      <author>Lob</author>
      <pubDate>Thu, 18 Nov 2021 16:57:50 +0000</pubDate>
      <link>https://dev.to/lob/mailing-a-postcard-with-javascript-part-1-175h</link>
      <guid>https://dev.to/lob/mailing-a-postcard-with-javascript-part-1-175h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#creating-a-postcard-with-lob-and-nodejs"&gt;
  &lt;/a&gt;
  Creating a Postcard with Lob and Node.js
&lt;/h2&gt;

&lt;p&gt;Lob’s Print &amp;amp; Mail and Address Verification APIs enable developers to interact with Lob’s services programmatically. You can mail a postcard or letter to your customers at critical points in their journey as easily as you might send an email. These physical reminders help you keep in touch with clients, and encourage clients to keep purchasing your products and services.   &lt;/p&gt;

&lt;p&gt;In this three-part tutorial, we’ll create a postcard template, verify our recipient’s address, send a postcard, and track it along its journey. We’ll create a Javascript application to do all this, so our users can access everything they need in one place. &lt;/p&gt;

&lt;p&gt;Complete code for tutorial &lt;a href="https://github.com/lob/lob-node-examples/tree/main/sending-postcard-with-js-part1"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To follow along, you’ll need your own Lob account. You can &lt;a href="https://dashboard.lob.com/#/register?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=devrel_tutorial_postcard"&gt;sign up&lt;/a&gt; here and find your API keys in your settings. Take a note of the secret and the publishable API keys. We’ll use the publishable key any time we interact with Lob from the frontend and the secret key anywhere we access the Lob API from the backend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l0Kgn4Bp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xa2seq57cd450b4tt9iu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l0Kgn4Bp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xa2seq57cd450b4tt9iu.png" alt="Image description" width="880" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lob’s APIs are well documented, and we can &lt;a href="https://www.github.com/lob/"&gt;choose from SDKs&lt;/a&gt; in various languages. We’ll focus on Node.js in this series, but the overall approach will work in whichever language you choose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-template-creation-app"&gt;
  &lt;/a&gt;
  Our template creation app
&lt;/h2&gt;

&lt;p&gt;Our app comprises two parts: a Vue frontend and a Node backend. In this part of our tutorial, we’ll enable our users to create postcard templates that they can later use to send physical postcards to their customers.&lt;/p&gt;

&lt;p&gt;Our users will create the template with HTML and CSS then store it on the Lob server. This template has the layout and text ready to send to all our user’s customers. Once we submit these templates to Lob, we can use them as many times as we’d like. We could send hundreds — or even thousands — of postcards from a single template.&lt;/p&gt;

&lt;p&gt;Let’s start creating our application by giving our users the ability to build and submit their own templates. In this tutorial, we’ll use one of &lt;a href="https://www.lob.com/template-gallery#postcards"&gt;Lob’s example postcard templates&lt;/a&gt; and allow our users to change the background picture and text.&lt;/p&gt;

&lt;p&gt;Creating the application’s Vue front end&lt;br&gt;
First, let’s instantiate a new Vue application using Vite:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Let’s name our project and select Vue. We won’t use TypeScript.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0GyMpjWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84eigxqwy9q5v5rhb4si.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0GyMpjWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84eigxqwy9q5v5rhb4si.png" alt="Image description" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We follow the instructions Vite displays on our screen to install the dependencies and get the starter site up and running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lwa7bAEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9tkgyhjq3mi21beywim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lwa7bAEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9tkgyhjq3mi21beywim.png" alt="Image description" width="880" height="396"&gt;&lt;/a&gt;         &lt;/p&gt;

&lt;p&gt;Point your browser to localhost:3000 to see the boilerplate app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FqyfSlZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8lc6xws70hhjjd60h19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FqyfSlZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8lc6xws70hhjjd60h19.png" alt="Image description" width="728" height="774"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we start making our application, create a file called .env to save our environment variables. The Vite framework exposes environment variables that have a “VITE_” prefix. For more information on this, read the Vite documentation. As a developer, you never want to make a commit to Github that contains sensitive login information. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#save-your-env-file-in-the-root-folder"&gt;
  &lt;/a&gt;
  Save your .env file in the root folder.
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, let’s create a new component for our front template, Front.vue, and add the template and styling based on one of Lob’s examples. Specifically, we look at the front of the Product Promotion postcard. We will replace the default HelloWorld component with the new Front component in the App.vue file. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#srcappvue"&gt;
  &lt;/a&gt;
  src/App.vue
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#srccomponentsfrontvue"&gt;
  &lt;/a&gt;
  src/components/Front.vue
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f3MYjQ_f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn4qws5epugp1hmlg7y1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f3MYjQ_f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn4qws5epugp1hmlg7y1.png" alt="Image description" width="789" height="643"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We want to allow our users to change each of these elements. We’ll use the Vue composition API to help us do that.&lt;/p&gt;

&lt;p&gt;We add a &amp;lt;script setup&amp;gt; tag to our component and set up some reactive variables. We then set the default values to those the template already uses, so nothing changes on the frontend when we update the template.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now that we have reactive values, we need to give our users some way to interact with those values. We use the v-model to create a two-way binding between the input and the reactive value for the header and logo text. As we type into these fields, we’ll be able to see the form updating.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TrnFL2Ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/275lloa0ovzxvammcp60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TrnFL2Ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/275lloa0ovzxvammcp60.png" alt="Image description" width="791" height="881"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We then upload the image to a third-party service, like Cloudinary. Cloudinary has a helpful library that provides the upload modal, handles the cloud storage, and provides a URL we can pass into our template.&lt;/p&gt;

&lt;p&gt;We first need to add the script import for Cloudinary to our main index.html file right above the “main.js” script tag that holds our Vue app:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;When we instantiate the Cloudinary script, it adds a cloudinary library with an openUploadWidget to our window object. &lt;/p&gt;

&lt;p&gt;Let’s create a handler function to open the widget and update our state when the widget completes. To follow along, sign up for &lt;a href="https://cloudinary.com/users/register/free"&gt;Cloudinary&lt;/a&gt; to get your cloud name and &lt;a href="https://cloudinary.com/documentation/upload_presets"&gt;upload preset&lt;/a&gt;. Put these values in the .env file we created earlier. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, we add a button to our template that will trigger this widget when the user clicks.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The next tasks we need to tackle is to bring some routing to our Vue app. After saving the postcard template, we want the app to redirect to another page that will list all of the templates that we have saved.   &lt;/p&gt;

&lt;p&gt;Add the vue-router package to our project by running the following command: “npm install --save vue-router@4”. Create a new file under src/router/index.js and add the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Since we are missing the ListTemplates component, let’s create a stub of this for this time being.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The last step we need to do is put a reference to the router in the main.js file and update the App.vue component to use the router.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#srcmainjs"&gt;
  &lt;/a&gt;
  src/main.js
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#srcappvue"&gt;
  &lt;/a&gt;
  src/App.vue
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, we add our template name. Then, we send the template information to our backend.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let’s next hop over to the backend and get our route ready to receive this information.       &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-applications-node-backend"&gt;
  &lt;/a&gt;
  Creating the application’s Node backend
&lt;/h2&gt;

&lt;p&gt;To create our back end, we will create a new folder called “backend.” After changing into this directory, we will create a package.json file with the following contents:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This package.json file lists our dependencies --  express web framework to structure our app; dotenv to keep our environment variables secret; cors to handle data sent to our front end; and nodemon to restart our server every time we save. We added "type": "module" to our package.json to use esm import and export. Run the command “npm install” to install all of our dependencies.&lt;/p&gt;

&lt;p&gt;Let’s next create an index.js file and add a basic web server setup. We also make and import router.js to organize our routes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indexjs"&gt;
  &lt;/a&gt;
  index.js
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#routerjs"&gt;
  &lt;/a&gt;
  router.js
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After we set this up, we will need to create a .env file that will hold our Lob API test key. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We’ll be sending the variables as query parameters from Vue to our backend. We have the replicated template on the back end and populate it with the user’s front-end data.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We’re effectively adding dynamic values to a large template literal. We’ll use node-fetch, a Node implementation of the browser fetch API, to send our data to Lob. We need to encode the data and identify ourselves with the API correctly. Let’s modify the createTemplateHandler function to add the call to Lob API. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To keep the third-party packages to a minimum, we use Node’s UrlSearchParams rather than a package such as form-data. UrlSearchParams also sets the headers we need automatically.&lt;br&gt;&lt;br&gt;
We append our description and HTML parameters to the data we send to Lob, then prepare our headers. We use a basic username and password to authenticate ourselves with the Lob API. The username should be our API key, which we get from the environment variable LOB_SECRET_API_KEY, and the password should be blank. This configuration is the same as setting an Authorization header, as the code above shows.&lt;/p&gt;

&lt;p&gt;Once our authentication is successful, we send a message back to our Vue application to let it know we’re done.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now that we’ve created the template, we make a route to list our templates and consume the route on the frontend. In Node, we use a straightforward GET request using node-fetch:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now that we have the functionality to grab our saved templates from the Lob API, let’s add that endpoint to the Express app. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We authenticate ourselves in the same way, then pass that data on to our clients. We want to get that data in Vue and display it to our users. We fetch and process the data using the onMounted function. We then update our reactive value, which triggers our template to rerender. So let’s update the ListTemplates component that we stubbed out earlier.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Using the v-for directive, we iterate over the templates and destructure the more relevant values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h0-DnDml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlyae2anynt04wa17xyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h0-DnDml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlyae2anynt04wa17xyh.png" alt="Image description" width="832" height="712"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;In this part of the tutorial, we’ve built our application to enable users to create and view templates in Lob. We have the &lt;a href="https://github.com/lob/lob-node-examples/tree/main/sending-postcard-with-js-part1"&gt;project code saved here&lt;/a&gt; for you to review as you carry on to the next part of this tutorial. Next time, we’ll use these templates to send our real-life postcards, changing bits to atoms.&lt;/p&gt;

&lt;p&gt;A well-designed postcard can enhance the relationship between your customers and your brand. &lt;a href="https://www.lob.com/print-mail"&gt;Try Lob’s Print &amp;amp; Mail API&lt;/a&gt; yourself now, or continue to the second part of this tutorial to learn how to verify an address before sending a postcard.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Prepare for AWS Developer Associate exam (for free?)</title>
      <author>Natalia Marek</author>
      <pubDate>Thu, 18 Nov 2021 16:51:39 +0000</pubDate>
      <link>https://dev.to/aws-builders/prepare-for-aws-developer-associate-exam-for-free-3fnh</link>
      <guid>https://dev.to/aws-builders/prepare-for-aws-developer-associate-exam-for-free-3fnh</guid>
      <description>&lt;p&gt;I have decided to write up a guide on what resources I have used when preparing for the AWS exam, because I have gone through a variety of them before finding the right ones. Additionally, as AWS Developer Associate was my first AWS exam to take, I will write this post from that perspective. Last but certainly not list, I would also like to make this guide as accessible from economic perspective as possible, so majority of resources mentioned here are completely free to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RuNeOa6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fx79qrtbx7t9m6mlyr6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RuNeOa6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fx79qrtbx7t9m6mlyr6.png" alt="download" width="512" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-long-should-i-prepare"&gt;
  &lt;/a&gt;
  How long should I prepare?
&lt;/h3&gt;

&lt;p&gt;The answer to that is - of course - it depends! I have started using AWS in September and sat down to take the exam in July, which makes it around 10 months, but this can easily be done in around 2-3 months - it all depends on the amount of time you have available for learning, and how often you get to work using AWS, and whether you have taken any AWS exams before. &lt;/p&gt;

&lt;p&gt;Especially with the last in mind - if this is not your first AWS exam, you would have gotten used to the way exam questions are phrased, and you would have covered some of the material if you have passed the AWS Solutions Architect Associate exam.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-available-for-free"&gt;
  &lt;/a&gt;
  Resources available for free
&lt;/h3&gt;

&lt;p&gt;I would like to start with and mainly focus on resources available, because in my opinion they are absolutely enough to prepare you well for the exam, especially if combined with practical usage of AWS tools and technologies in your everyday work.&lt;/p&gt;

&lt;p&gt;*&lt;a href="https://www.youtube.com/watch?v=RrKRN9zRBWs"&gt;AWS Certified Developer - Associate 2020 from FreeCodeCamp and created by Andrew Brown&lt;/a&gt; - this is a very comprehensive 16 hours course, in my opinion better than some paid courses. &lt;a href="https://dev.to/andrewbrown"&gt;Andrew Brown&lt;/a&gt; goes through and covers all the services in detail and at the end of each section there is a cheat sheet/summary available, that I found extremely helpful for the revision just before the exam.&lt;/p&gt;

&lt;p&gt;*&lt;a href="https://cloudacademy.com/webinars/"&gt;Cloud Academy webinars&lt;/a&gt; - this is a free webinar, hosted monthly by Cloud Academy instructors and it goes through each domain and exam questions. Some of the past webinars are available on &lt;a href="https://www.youtube.com/channel/UCeRY0LppLWdxWAymRANTb0g"&gt;Cloud Academy YouTube channel&lt;/a&gt;, so you can access them without having to sign up, but I definitely recommend attending live webinar, as you do get a chance to ask questions. This is a great resource to go through before you sit the exam, it highlights what are the things you should look out for, what do you need to focus on in your revision and what resources are useful to look at.&lt;/p&gt;

&lt;p&gt;*&lt;a href="https://go.aws/3kKYUbs"&gt;Exam Certification Readiness Webinar&lt;/a&gt; from AWS - official and very thorough live 3=4 hour walk through all of the domains and exam questions. Worth mentioning that they are available for most certification exams and take place live in different time zones, so it makes it easy to find one that fits your schedule.&lt;/p&gt;

&lt;p&gt;*&lt;a href="https://d1.awsstatic.com/training-and-certification/ramp-up_guides/Ramp-Up_Guide_Developer.pdf"&gt;AWS Ramp-Up Guide: Developer&lt;/a&gt; - this is by far the best resource, that was recommended during one of the AWS exam prep webinars. Whilst it is not specifically targeted at Developer Associate Exam, it contains links to labs, courses, whitepapers, and many more resources for developers, engineers and DevOps engineers.&lt;br&gt;
*&lt;a href="https://explore.skillbuilder.aws/learn/course/external/view/elearning/9153/aws-certification-official-practice-question-sets-english"&gt;Official Practice Question Set with AWS skills builder &lt;/a&gt;. AWS SkillsBuilder is a new AWS learning center offering free digital courses and learning paths, and this is where you can now find Practice Question Set to get used to the way questions are phrased before you sit the exam.&lt;/p&gt;

&lt;p&gt;*&lt;a href="https://explore.skillbuilder.aws/learn/learning_plan/view/84/developer-learning-plan"&gt;Developer Learning Plan with AWS Skill Builder&lt;/a&gt;- AWS designed this to help anyone, who wants to learn how to develop modern applications on AWS. It will help you learn your ways with serverless solutions, containers and DevOps on AWS. TThis Learning Plan can also help prepare you for the AWS Developer Associate certification eExam.&lt;/p&gt;

&lt;p&gt;*&lt;a href="https://d1.awsstatic.com/training-and-certification/docs-dev-associate/AWS-Certified-Developer-Associate_Exam-Guide.pdf"&gt;AWS Certified Developer – Associate Exam Guide&lt;/a&gt;- this documents covers all you need to know about the preparation for your exam, discussing scope of the exam, content, exam domains, technology and tools that might be covered in the exam and services that are out of scope for the exam.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paid-courses-and-resources"&gt;
  &lt;/a&gt;
  Paid courses and resources
&lt;/h3&gt;

&lt;p&gt;When researching on how to best approach preparation for AWS Developer Associate exam I came across a vast amount of paid courses, however after reading plenty of reviews I have found these courses/resources are the most useful and comprehensive: &lt;/p&gt;

&lt;p&gt;*&lt;a href="https://www.udemy.com/course/aws-certified-developer-associate-dva-c01/"&gt;Ultimate AWS Certified Developer Associate 2021&lt;/a&gt; - this is a 32 hours course that will&lt;br&gt;
thoroughly prepare you to sit the exam. in addition to the course itself you also receive slides that were used in the course, which I used to review the material before the exam day. It also comes with 1 full practice exam.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3x0NGVj"&gt;AWS Certified Developer Associate Practice Tests [2021]: 390 AWS Practice Exam Questions with Answers &amp;amp; detailed Explanations&lt;/a&gt; - this ebook not only offers you more than enough practice tests, but comes with very detailed explanations to both correct and incorrect answers and walking through each one of them in great details. If there is one resource you are willing to pay for to prepare for the exam - in my opinion that is the one!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next?
&lt;/h3&gt;

&lt;p&gt;The first thing you should do when starting your exam preparation is book your exam - you probably heard that from other people many times, but it does help with your learning plan, and if anything comes up, you can always reschedule your exam up to two times or cancel it all together for a full refund as long it's more than 24 hours before the exam start date.&lt;a href="https://www.aws.training/Certification"&gt;Book your exam here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, if English is not your first language you can request an extra 30 minutes to be added to your exam.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>awscertified</category>
    </item>
    <item>
      <title>Working with NFT Metadata, IPFS, and Pinata</title>
      <author>Rounak Banik</author>
      <pubDate>Thu, 18 Nov 2021 16:50:54 +0000</pubDate>
      <link>https://dev.to/rounakbanik/working-with-nft-metadata-ipfs-and-pinata-3ieh</link>
      <guid>https://dev.to/rounakbanik/working-with-nft-metadata-ipfs-and-pinata-3ieh</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NFca0Jal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1378sjgjblut105ikbpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NFca0Jal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1378sjgjblut105ikbpm.png" alt="Pinata" width="700" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article serves as a sequel to my tutorial on &lt;a href="https://dev.to/rounakbanik/create-generative-nft-art-with-rarities-1n6f"&gt;creating generative NFT art&lt;/a&gt;. If you haven’t read it, I suggest you do so. I assume your system is already set up (with Python and required packages), and you have used the &lt;a href="https://github.com/rounakbanik/generative-art-nft"&gt;generative-art-nft&lt;/a&gt; library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnoaF9fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xohh1lzo9bgbm7nj4b4l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnoaF9fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xohh1lzo9bgbm7nj4b4l.png" alt="Mekaverse NFTs" width="700" height="233"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous tutorial, you learned how to create a generative art collection with custom rarities. If you followed along with your custom artwork (or used my samples), you should now have a collection of PNG images, and a metadata CSV file that contains information on traits for each image. &lt;/p&gt;

&lt;p&gt;This is a great first step towards creating an NFT collection but we still have a long way to go. The images that we generated exist on our local systems and are not really accessible to anyone. The metadata we generated is ideal for analyzing on Excel but is not in a format that adheres to standards (and by extension, cannot be used by an NFT marketplace platform like OpenSea).&lt;/p&gt;

&lt;p&gt;I will be addressing these issues in this article. More specifically, we will show you how to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Upload Images to IPFS&lt;/li&gt;
&lt;li&gt;Generate compliant JSON NFT metadata&lt;/li&gt;
&lt;li&gt;Upload metadata files to IPFS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Don’t worry if some of these words don’t make sense right now. I will be explaining them as and when required.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-nft-minting-works"&gt;
  &lt;/a&gt;
  How NFT Minting Works
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8qWwR412--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2jufo45pbfcn96agssz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8qWwR412--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2jufo45pbfcn96agssz.png" alt="Mekaverse NFTs" width="700" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To understand why we’re doing what we’re doing, we need to understand how NFT minting works. If you know this already, feel free to skip this section.&lt;/p&gt;

&lt;p&gt;Let’s say you want to mint a collection of 10,000 NFTs. What does that really mean?&lt;/p&gt;

&lt;p&gt;This means that you’re writing some code (called a smart contract) that tells the blockchain to initialize a table for you. This table stores ownership and metadata information about your NFTs. More specifically, each row of the table consists of the following information:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Token Identifier (or ID)&lt;/li&gt;
&lt;li&gt;The Owner of the Token&lt;/li&gt;
&lt;li&gt;The Metadata associated with the token &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is an example table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Yw_TaOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irah15b0q4na6os3h1au.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Yw_TaOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irah15b0q4na6os3h1au.png" alt="Table" width="349" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see here that the &lt;code&gt;ID&lt;/code&gt; is nothing but a unique positive integer that identifies a particular NFT. The &lt;code&gt;Owner&lt;/code&gt; column stores the addresses associated with each NFT’s holder. Finally, the &lt;code&gt;Metadata&lt;/code&gt; is a column that may contain data &lt;em&gt;of&lt;/em&gt; the NFT or &lt;em&gt;about&lt;/em&gt; the NFT. &lt;/p&gt;

&lt;p&gt;It is possible to store the entire image in the &lt;code&gt;Metadata&lt;/code&gt; column of the table. However, &lt;strong&gt;storing data on a blockchain is expensive&lt;/strong&gt;. To give you some context, our collection of 10,000 squirrels occupies a disk space of 600 MB. If we wanted to store 600 MB worth of data on the Ethereum blockchain, it would cost us &lt;strong&gt;$1 million dollars.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is clearly not a great option. Therefore, in most cases, instead of storing data &lt;em&gt;of&lt;/em&gt; the NFT, we instead simply store data &lt;em&gt;about&lt;/em&gt; the NFT. This data (or metadata) is stored in a format called JSON. If you don’t know what JSON is, don’t worry about it. For our purposes, think of them like Python dictionaries (encapsulated in {}) that you encountered in the previous article to define layers.&lt;/p&gt;

&lt;p&gt;This JSON file needs to have information about the NFT such as its name, description, image URL, attributes, etc. In order to make sure that everyone in the ecosystem (including NFT marketplaces like OpenSea) understands what’s in our JSON files, we need to format them in a way that is compliant with the standards. In our case, we will use the &lt;a href="https://docs.opensea.io/docs/metadata-standards"&gt;standards recommended by OpenSea&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a JSON metadata file for a sample NFT.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my-nft.json

{   
   "description": "Friendly OpenSea Creature",      
   "image": "https://opensea-prod.appspot.com/puffs/3.png",  
   "name": "Dave Starbelly",   
   "attributes": [
       { "trait_type": "Base", "value": "Starfish" },      
       { "trait_type": "Eyes", "value": "Big" },      
       { "trait_type": "Mouth","value": "Surprised" },
   ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Storing metadata in this format on the blockchain is still very expensive. Hence, we add an additional layer of abstraction, and upload this JSON to the cloud as well and simply store a URL pointing to the JSON file.&lt;/p&gt;

&lt;p&gt;Therefore, at the end of the data, all you’re storing on the blockchain is &lt;em&gt;&lt;a href="https://mywebsite.com/my-nft.json"&gt;https://mywebsite.com/my-nft.json&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To summarize, here is what we need to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Upload all our images online and get a URL associated with each image. (This URL will go into our metadata).&lt;/li&gt;
&lt;li&gt;Generate a separate JSON file for each image containing metadata in the standard shown above (Image URL, attributes/traits, name, etc.)&lt;/li&gt;
&lt;li&gt;Upload all the JSON files to the cloud and get a URL associated with each JSON file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#uploading-images-to-ipfs"&gt;
  &lt;/a&gt;
  Uploading Images to IPFS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ilB5dBv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qlnglbcvo70cugw0ukx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ilB5dBv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qlnglbcvo70cugw0ukx.png" alt="Uploads" width="700" height="334"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uploading images to the internet is pretty simple. We’re sure you must have used a service like Google Drive, GitHub, or AWS to upload folders to the cloud.&lt;/p&gt;

&lt;p&gt;While uploading images to such centralized services (AWS, Google Drive, your own server, etc.) would work, &lt;strong&gt;it would not be a very good idea.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why not? For two reasons, mainly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#centralized-storage-tends-to-be-location-based"&gt;
  &lt;/a&gt;
  Centralized Storage tends to be location based
&lt;/h3&gt;

&lt;p&gt;Imagine you upload an image of a dog (called dog.jpeg) to a centralized storage service. Your dog image would then be available by accessing a URL (something like &lt;em&gt;&lt;a href="https://mystorage.com/dog.jpeg"&gt;https://mystorage.com/dog.jpeg&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;However, it is very easy to swap this image for another. I could upload another image with the same name (dog.jpeg) that replaces the original image.&lt;/p&gt;

&lt;p&gt;Now, if I visited the same URL as before (&lt;em&gt;&lt;a href="https://mystorage.com/dog.jpeg"&gt;https://mystorage.com/dog.jpeg&lt;/a&gt;&lt;/em&gt;), I will see a different image. You can see why this is not ideal in NFT world. People spend thousands of dollars on NFTs and they would be pissed if you simply replaced an avatar with extremely rare traits with something else.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#centralized-storage-can-be-taken-down"&gt;
  &lt;/a&gt;
  Centralized Storage can be taken down
&lt;/h3&gt;

&lt;p&gt;Let’s say you upload an image to a Google Drive or AWS. If you removed the image from these services or the services themselves shut down, the URL pointing to the image would break. Therefore, it is very easy to pull the rug if your images and data exist on a centralized storage service.&lt;/p&gt;

&lt;p&gt;For these reasons, almost every serious NFT project uses a service called &lt;strong&gt;IPFS (or Interplanetary File System).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IPFS is a peer-to-peer filesharing system that is decentralized, uses content-based addressing, and is secure.&lt;/p&gt;

&lt;p&gt;If none of the words above make sense, don’t worry. All you need to know is this:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ipfs-used-contentbased-addressing"&gt;
  &lt;/a&gt;
  IPFS used content-based addressing
&lt;/h3&gt;

&lt;p&gt;On the IPFS network, the address (URL) of a file will be dependent on the content of the file. If you change the contents of a file, then the address of the file on the IPFS will also change.&lt;/p&gt;

&lt;p&gt;Therefore, on the IPFS network, it is impossible to make one URL point to two different images.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ipfs-never-goes-down"&gt;
  &lt;/a&gt;
  IPFS never goes down
&lt;/h3&gt;

&lt;p&gt;Like most decentralized systems (like blockchains), IPFS never goes down. This means that once you’ve uploaded a file (or image) to IPFS, it will always be available as long as at least one node in the network has the file. This means that you cannot pull the rug at will. Nor is there a threat that the system will be shut down.&lt;/p&gt;

&lt;p&gt;We’re not going to go into the nitty-gritties of how IPFS works. If you’re interested, we suggest you give the following two articles a read:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/a-beginners-guide-to-ipfs-20673fedd3f"&gt;https://hackernoon.com/a-beginners-guide-to-ipfs-20673fedd3f&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.ipfs.io/how-to/mint-nfts-with-ipfs/#a-short-introduction-to-nfts"&gt;https://docs.ipfs.io/how-to/mint-nfts-with-ipfs/#a-short-introduction-to-nfts&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Uploading to IPFS is as easy as uploading to Google Drive, thanks to a service called &lt;a href="https://www.pinata.cloud/"&gt;Pinata&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.pinata.cloud/signin"&gt;Go to the Pinata website and create an account&lt;/a&gt;. It’s free if you’re uploading up to 1 GB of data.&lt;/p&gt;

&lt;p&gt;Once you have signed up, you will be taken to the Pin Manager window. Upload your folder using the interface. Once you’ve uploaded your folder, you will get a CID associated with it. It should look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--up7NmPiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1lodkdedmqpiuqthu4f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--up7NmPiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1lodkdedmqpiuqthu4f.png" alt="Pinata screen" width="700" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This CID was generated based on the contents of the folder. If the contents of the folder change (an image removed, an image swapped with another of the same name, etc.), the CID will also change.&lt;/p&gt;

&lt;p&gt;For my folder, the CID is QmRvSoppQ5MKfsT4p5Snheae1DG3Af2NhYXWpKNZBvz2Eo.&lt;/p&gt;

&lt;p&gt;Therefore, the IPFS URL for this folder is ipfs://QmRvSoppQ5MKfsT4p5Snheae1DG3Af2NhYXWpKNZBvz2Eo.&lt;/p&gt;

&lt;p&gt;This URL will not open in a browser. In order to do that, you can use a HTTP URL of an IPFS gateway. Try visiting this link: &lt;a href="https://ipfs.io/ipfs/QmRvSoppQ5MKfsT4p5Snheae1DG3Af2NhYXWpKNZBvz2Eo/00001.png"&gt;https://ipfs.io/ipfs/QmRvSoppQ5MKfsT4p5Snheae1DG3Af2NhYXWpKNZBvz2Eo/00001.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will display an image that I named 00001.png and uploaded to my folder.&lt;/p&gt;

&lt;p&gt;Congratulations! That is all there is to uploading images on IPFS using Pinata. For the next step, you will need the CID. Keep that handy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-compliant-nft-json-metadata"&gt;
  &lt;/a&gt;
  Generate compliant NFT JSON metadata
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5VL8Mzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89zlcoejff2kcjb3dis0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5VL8Mzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89zlcoejff2kcjb3dis0.png" alt="Opensea" width="700" height="384"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we uploaded our images to IPFS, we now have IPFS URLs for each and every image.&lt;/p&gt;

&lt;p&gt;Our next task is to create a JSON file for each image and populate it with data (including the image URL) in a format that is compliant and understandable by platforms like NFT marketplaces.&lt;/p&gt;

&lt;p&gt;Fortunately, the &lt;a href="https://github.com/rounakbanik/generative-art-nft"&gt;generative-art-nft library&lt;/a&gt; does all the heavy lifting for you.&lt;/p&gt;

&lt;p&gt;Check that the &lt;code&gt;metadata.py&lt;/code&gt; file exists in the repository. If not, clone the latest version of the repository and transfer the &lt;em&gt;assets&lt;/em&gt; and &lt;em&gt;output&lt;/em&gt; folders into the new repo.&lt;/p&gt;

&lt;p&gt;Open the metadata.py file in a text editor. Don’t worry if you don’t understand the code here. The only things you need to fill are &lt;code&gt;BASE_NAME&lt;/code&gt;, &lt;code&gt;BASE_URL&lt;/code&gt;, and &lt;code&gt;BASE_JSON&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In line 17, replace &lt;code&gt;←Your CID Code →&lt;/code&gt; with the CID code of the image folder you uploaded to Pinata.&lt;/p&gt;

&lt;p&gt;In line 18, add a base name for your NFTs. This is strictly optional. If you do not add a base name, your NFTs will be named 0, 1, 2, and so on. If you put a base name like &lt;em&gt;“Scrappy Squirrel #”&lt;/em&gt;, your NFTs will be named &lt;em&gt;Scrappy Squirrel #0&lt;/em&gt;, &lt;em&gt;Scrappy Squirrel #1&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;Finally, in line 22, add a description for your collection. Like the base name, this is optional.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adZPT9-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64qehqbu8v11zfi5hdcp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adZPT9-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64qehqbu8v11zfi5hdcp.png" alt="Sample inputs" width="670" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, open a Terminal in this folder and run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python metadata.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The program will ask you the edition to generate metadata for. In our case, it was &lt;strong&gt;v2&lt;/strong&gt;, so that’s what we enter.&lt;/p&gt;

&lt;p&gt;It should take less than 15 seconds to generate 10,000+ JSON files. All these files will be conveniently available in a json folder within your edition folder.&lt;/p&gt;

&lt;p&gt;That’s it for step 2!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upload-json-metadata-files-to-ipfs"&gt;
  &lt;/a&gt;
  Upload JSON metadata files to IPFS
&lt;/h2&gt;

&lt;p&gt;The third step is probably the simplest. Just like you did with the images, upload your &lt;code&gt;json&lt;/code&gt; folder to Pinata.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations! You now have a very good setup for your NFT metadata. The last and most important step is to write a smart contract that can use this metadata and assign ownership to various holders. That is, however, a topic of a future article. Stay tuned!&lt;/p&gt;

&lt;p&gt;If you have any questions or would like us to add additional features to this library, please reach out to us on our Discord server, or drop them in the comments below. We will try to address as many of them as possible.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-scrappy-squirrels"&gt;
  &lt;/a&gt;
  &lt;em&gt;About Scrappy Squirrels&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Scrappy Squirrels is a collection of 10,000+ randomly generated NFTs. Scrappy Squirrels are meant for buyers, creators, and developers who are completely new to the NFT ecosystem.&lt;/p&gt;

&lt;p&gt;The community is built around learning about the NFT revolution, exploring its current use cases, discovering new applications, and finding members to collaborate on exciting projects with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Join our community here:&lt;/strong&gt; &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;https://discord.gg/8UqJXTX7Kd&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>blockchain</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Playing With Tuya API: An API for Pythonistas</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Thu, 18 Nov 2021 16:50:43 +0000</pubDate>
      <link>https://dev.to/unitybuddy/playing-with-tuya-api-an-api-for-pythonistas-2f8c</link>
      <guid>https://dev.to/unitybuddy/playing-with-tuya-api-an-api-for-pythonistas-2f8c</guid>
      <description>&lt;p&gt;Hello, buddies! Recently, I found an interesting API to play with. It's Tuya! Even though Tuya is known for IoT development, there's a hidden side: the Tuya Cloud Development platform, which can help developers in many ways—  especially in marketing your product or whatever.&lt;/p&gt;

&lt;p&gt;Tuya APIs has many services including Email service and SMS service which can be used effectively for marketing and many things. So today we're going to explore how we can use them with Python easily with a few lines of code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tuya-exactly"&gt;
  &lt;/a&gt;
  What is Tuya, exactly?
&lt;/h2&gt;

&lt;p&gt;Tuya Smart is a global IoT development platform that builds interconnectivity standards to bridge the intelligent needs of brands, OEMs, developers, and retail chains across a broad range of smart devices and industries.&lt;/p&gt;

&lt;p&gt;Based on the global public cloud, Tuya connects different intelligent scenarios and smart devices by providing hardware development tools, &lt;strong&gt;integrating public cloud services&lt;/strong&gt;, and offering an intelligent business development platform. &lt;/p&gt;

&lt;p&gt;Great, let's go ahead!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tuya Developer Account. Get it here - &lt;a href="https://developer.tuya.com/en/?_source=b0137273d9769517af96e1f625818fe3"&gt;https://developer.tuya.com/en/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;TuyaOpenAPI. To install,
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;pip install tuya-iot-py-sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Some basic Python knowledge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-tuya"&gt;
  &lt;/a&gt;
  Setting Up Tuya
&lt;/h2&gt;

&lt;p&gt;After signing up, you will head over to the dashboard. From there, go to 'Cloud' and create a project inserting the following information.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Toq23T4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635854853118/WcUmOaNkZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Toq23T4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635854853118/WcUmOaNkZ.png" alt="image.png" width="877" height="562"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Use your Data Center Correctly or it will give bugs as a gift!&lt;/p&gt;

&lt;p&gt;Next, you will be asked to Authorize APIs. They give some APIs by default but we don't need them. So you will have to remove most of them and keep only these five. (You should add the Email service and Short Message Service from the other part)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w1AdfRiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636025698700/NzKhjS9nw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w1AdfRiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636025698700/NzKhjS9nw.png" alt="image.png" width="880" height="698"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, it will be a configuration wizard. Follow the given instructions and fill in that too!&lt;/p&gt;

&lt;p&gt;Done, next, it is,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-time"&gt;
  &lt;/a&gt;
  Coding Time!
&lt;/h2&gt;

&lt;p&gt;Great! Now we have set up everything. First, we have to import &lt;code&gt;TuyaOpenAPI&lt;/code&gt; from Tuya Connecter that we installed before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tuya_connector&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="n"&gt;TuyaOpenAPI&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we have to authorize.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;ACCESS_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"*************123"&lt;/span&gt;
&lt;span class="n"&gt;ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"*************56565"&lt;/span&gt;
&lt;span class="n"&gt;API_ENDPOINT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://openapi.tuyain.com"&lt;/span&gt;
&lt;span class="n"&gt;MQ_ENDPOINT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"wss://mqe.tuyacn.com:8285/"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait, you can give stars as Input! Your &lt;code&gt;ACCESS_ID&lt;/code&gt; and &lt;code&gt;ACCESS_KEY&lt;/code&gt; are on your Tuya project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AnmRZUnv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635956265616/nTfQyv0yZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AnmRZUnv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635956265616/nTfQyv0yZ.png" alt="image.png" width="880" height="306"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3rGz-ZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634213930030/UHXxHnCUR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3rGz-ZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634213930030/UHXxHnCUR.png" alt="image.png" width="670" height="374"&gt;&lt;/a&gt;&lt;br&gt;
Access Secret = Access Key&lt;/p&gt;

&lt;p&gt;Also, make sure that your &lt;code&gt;API_ENDPOINT&lt;/code&gt; is set to your location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wuu3_Lb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634214091378/wkNf_Kk_l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wuu3_Lb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634214091378/wkNf_Kk_l.png" alt="image.png" width="560" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Now we have Init OpenAPI and connect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;openapi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TuyaOpenAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;API_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACCESS_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACCESS_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's the foundation for all 3 services. Now let's play with them one by one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#send-emails"&gt;
  &lt;/a&gt;
  Send Emails 📧
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/messages/mails/actions/push"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;  &lt;span class="s"&gt;"to_address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hello@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"template_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"MAIL_1624531323"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"reply_to_address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hi@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't get confused, lemme explain this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First line of this code is the Request Parameter. Request parameters are used in API operations of the Cloud Development Platform. Tuya supports the following request methods.

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;POST&lt;/code&gt;: Requires the server to perform specified operations.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GET&lt;/code&gt;: Requests the server to return specified resources.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUT&lt;/code&gt;: Requests the server to update specified resources.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DELETE&lt;/code&gt;: Requires the server to delete specified resources.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every action has its specific Request parameters. When sending emails, we use the above.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next, we give the email address we need to send the email to. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;template_id&lt;/code&gt; is the ID of an email template. You can make them yourself(I will show you later) or use a public one. Tuya gives 2 public default templates,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MAIL_1624531323&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MAIL_1624531338&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;reply_to_address&lt;/code&gt; means the address that the user will send replies to.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then you will just have to run the program. If it is a success, the result would be,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{'result': {'send_status': True}, 'success': True, 't': 1634215134788}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to be sure, check your inbox(If you add your email address to the program).&lt;/p&gt;

&lt;p&gt;But it's not possible to use Tuya's default email templates, we should create one for ourselves too. This code will do it, for sure!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/msg-templates/mails"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Here's your code!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"sender_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Booba"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hey! You're so pretty btw"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"remark"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Isn't it?"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the first line is the request parameter. &lt;code&gt;name&lt;/code&gt; stands for the template name. And the &lt;code&gt;title&lt;/code&gt; is the template title. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;sender_name&lt;/code&gt; is the sender name with 1 to 30 characters. For example, if you set the sender to Buddy, and the sender’s email address to &lt;a href="mailto:yo@example.com"&gt;yo@example.com&lt;/a&gt;. The receiver will see the sender’s address as “Buddy” &lt;a href="mailto:yo@example.com"&gt;yo@example.com&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;content&lt;/code&gt; is the content, which means the HTML format and Text!&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;type&lt;/code&gt; stands for email type. It will handle whether the email should be in the 'Primary' tab or 'Promotions'. There are 3 valid email types,

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt; : verification code. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;1&lt;/code&gt; : email notification.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;2&lt;/code&gt; : promotional email.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;remark&lt;/code&gt; is remarks of the application for the email template. Describe your application scenario here!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And yeah, now you can run this code and see the result as well. If it is successful, the result is gonna be like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{'result': {'template_id': 'MAIL_0769019106'}, 'success': True, 't': 1634216025543}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GXAeMzRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636878381161/cH6uW6zvl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXAeMzRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636878381161/cH6uW6zvl.gif" alt="Screen Recording (11-9-2021 12-42-25 PM).gif" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#send-short-messages"&gt;
  &lt;/a&gt;
  Send Short Messages 📱
&lt;/h2&gt;

&lt;p&gt;Tuya's SMS service allows you to deploy the messaging service for application-to-user communication worldwide. There are 3 types of SMS you can send to users by Tuya,  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt;: Verification code.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;1&lt;/code&gt;: Notification
-&lt;code&gt;2&lt;/code&gt;: Promotional messages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not like in Emails, first, we have to create an SMS template as below as Tuya doesn't have any default SMS templates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/msg-templates/sms"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"The template of the message verification code"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"You are registering with your phone number. The verification code is: ${code}, valid for 5 minutes."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the same as we created the Email template. the first string is a request parameter. And the dict is for content. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt; is the name of your template.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;content&lt;/code&gt; stands for the message content.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;type&lt;/code&gt; is for the type of the message— verification code, notification, or promotional.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end, we print the result and it would be something like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{'result': {'template_id': 'SMS_6195054734'}, 'success': True, 't': 1635956558065}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not the ned, we just created a template. Kindly note that you won't be able to use this template until it is reviewed and allowed. Don't worry, that process will only take 2 days. After that, you can query the details of the SMS template with the below request parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/msg-templates/sms/{template_id}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, you can continue the process!&lt;/p&gt;

&lt;p&gt;So now we have to send messages by this code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/messages/sms/actions/push"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s"&gt;"country_code"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"94"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"phone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"945555555"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"template_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"SMS_3746838509"&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break this. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;country_code&lt;/code&gt; is for your country code and don't use the &lt;code&gt;+&lt;/code&gt; mark in that.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;phone&lt;/code&gt; stands for the phone number(s) that you need to send messages. The same rule, &lt;em&gt;no symbols&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;template_id&lt;/code&gt; is the Template ID that you made before, which has been approved.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{'result': 'send_status': True, 'success': True, 't': 1634216025543}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-else-to-do-with-tuyaapi"&gt;
  &lt;/a&gt;
  What else to do with TuyaAPI?
&lt;/h2&gt;

&lt;p&gt;Many things! Tuya is for Smart home applications. But we can do a lot with Tuya's cloud development platform as well! Just like,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.tuya.com/en/docs/cloud/voice-message-service?id=Kaiuye86cq53b"&gt;Voice Message Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.tuya.com/en/docs/cloud/app-push?id=Kaiuye3tb3yho"&gt;App Push Notification Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.tuya.com/en/docs/cloud/weather-service?id=Kaiuyesukz1v3"&gt;Weather Service&lt;/a&gt; and many!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Discover more &lt;a href="https://developer.tuya.com/en/docs/cloud"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Almost all of these APIs are used in almost the same manner. Request Parameter and the dict containing everything required. 🕺🕺&lt;/p&gt;

&lt;p&gt;What I love about Tuya is its documentation. They are really clear and easy to understand. Besides, it provides examples and explanations which helps everyone to use it easily! Remember to check them out whenever you're stuck &lt;/p&gt;

&lt;p&gt;So, buddies, that's it! Thanks for reading and Happy Pythoneering!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.tuya.com/en/docs/iot/api-request?id=Ka4a8uuo1j4t4"&gt;https://developer.tuya.com/en/docs/iot/api-request?id=Ka4a8uuo1j4t4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iot.tuya.com/?_source=f117b85de6f7ea6e51c321337da12972"&gt;https://iot.tuya.com/?_source=f117b85de6f7ea6e51c321337da12972&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iot.tuya.com/cloud/?_source=dcc7e84a3e88f1dc506e812dcff2f781"&gt;https://iot.tuya.com/cloud/?_source=dcc7e84a3e88f1dc506e812dcff2f781&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RVf25NdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636878863029/IaRFgaE7T.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVf25NdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636878863029/IaRFgaE7T.png" alt="Copy of STRINGS.png" width="880" height="96"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Add Keywords and Meta Descriptions in WordPress</title>
      <author>Muhammad Rauf</author>
      <pubDate>Thu, 18 Nov 2021 16:47:06 +0000</pubDate>
      <link>https://dev.to/softcodeon/how-to-add-keywords-and-meta-descriptions-in-wordpress-2h9m</link>
      <guid>https://dev.to/softcodeon/how-to-add-keywords-and-meta-descriptions-in-wordpress-2h9m</guid>
      <description>&lt;p&gt;Meta information regarding your blog is an important part of both search engine optimization and engaging visitors. It’s this information that is shown when searching for specific information online. While it’s still possible to get a handful of people reading your posts, keywords and meta descriptions are a valuable asset.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CJ3OvPSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t52xhxeizobiy3v68hx6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CJ3OvPSe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t52xhxeizobiy3v68hx6.jpg" alt="Image description" width="600" height="300"&gt;&lt;/a&gt;&lt;br&gt;
Now, meta keywords are not nearly as prominent as they were before. In fact, changes to Google’s algorithm have directly affected how meta keywords work. It’s to the point that many developers don’t utilize the meta information for specific words today.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong, keywords will always be relevant. If you’re searching for lemon pepper trout recipes, you need to find “lemon pepper trout recipes.” However, search engines spend more time crawling the site for relevant content and contextual use.&lt;/p&gt;

&lt;p&gt;With that being said, there is nothing wrong with adding meta keywords. They just don’t play as prominent of a role as they did in the past.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-add-keywords-and-meta-descriptions-in-wordpress"&gt;
  &lt;/a&gt;
  Why Add Keywords and Meta Descriptions in WordPress?
&lt;/h2&gt;

&lt;p&gt;Keywords and descriptions allow you to tell search engines more about the content of your posts and pages.&lt;/p&gt;

&lt;p&gt;Keywords are important words or phrases that people are likely to search to find your content. A meta description is a brief description of what your page or post is about.&lt;/p&gt;

&lt;p&gt;It’s your meta title, description, and keywords that shows up in Google search results:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iI7AgdXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zades3bxbx5v2n6jmael.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iI7AgdXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zades3bxbx5v2n6jmael.png" alt="Image description" width="638" height="119"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, I am going to show you how to add descriptions in WordPress as well as keywords in case you want to use this feature.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#were-using-latest-and-best-seo-plugin-to-do-this-job-done"&gt;
  &lt;/a&gt;
  We're using Latest and Best SEO Plugin to do this job done.
&lt;/h3&gt;

&lt;p&gt;One of my favorite plugins for WordPress is RankMath SEO. This tool makes a lot of functions easy to manage for optimization. Among its many features is that of managing meta keywords and descriptions.&lt;/p&gt;

&lt;p&gt;Let’s start by installing the free version of RankMath SEO. Go to the Plugins section of WordPress and click the &lt;strong&gt;“Add New”&lt;/strong&gt; button.&lt;/p&gt;

&lt;p&gt;Search for the plugin, “RankMath SEO” in the text box on the right.&lt;br&gt;
Install and Activate this plugin. Now you just need to edit your website post from the top right corner you will see tool bar score, Click on that scroll down and click on Edit Snippets.&lt;br&gt;
Here you can put Meta Keyword and Description as shown in image.&lt;/p&gt;

&lt;p&gt;Meta Description:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R406KuDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhj9ovf9hqjpmmbokk4t.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R406KuDh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hhj9ovf9hqjpmmbokk4t.jpg" alt="Image description" width="464" height="549"&gt;&lt;/a&gt;&lt;br&gt;
Meta Keyword&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qn2ztqof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52kfnjpalr41bge6culi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qn2ztqof--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/52kfnjpalr41bge6culi.png" alt="Image description" width="328" height="554"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any WordPress web hosted site benefits from a strong SEO strategy. RankMath SEO is just one of those tools that makes the process easier to manage. Its simple color system lets you know when there are changes you need and whether your content is primed for search engines. From blogs to eCommerce, it’s worth the effort to make sure your keywords and meta descriptions are good to go. If you have any question regarding SEO discuss below.&lt;/p&gt;

&lt;p&gt;What kind of systems do you use to find keywords for your content? What kind of SEO tools do you have in your WordPress website?&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>wordpress</category>
      <category>beginners</category>
      <category>seo</category>
    </item>
    <item>
      <title>API Prototyping for Salesforce with Postman</title>
      <author>Michael Bogan</author>
      <pubDate>Thu, 18 Nov 2021 16:34:34 +0000</pubDate>
      <link>https://dev.to/salesforcedevs/api-prototyping-for-salesforce-with-postman-2m6f</link>
      <guid>https://dev.to/salesforcedevs/api-prototyping-for-salesforce-with-postman-2m6f</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Whether you’re a longtime Salesforce developer, new to the platform, or just need to integrate your system of choice to Salesforce, Postman brings you all the tools you need to make the process easier, faster, and more streamlined.&lt;/p&gt;

&lt;p&gt;In this article, we’ll show how Postman can help you start building the core of your API-driven integration on &lt;strong&gt;both&lt;/strong&gt; sides of the API—either as the provider or the consumer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developing-salesforce-apis"&gt;
  &lt;/a&gt;
  Developing Salesforce APIs
&lt;/h2&gt;

&lt;p&gt;While Salesforce has several pre-built applications for key business tasks such as Sales, Service, and Marketing, in this post we’ll focus on the capability of Salesforce as a development platform, with its own programming language: Apex.&lt;/p&gt;

&lt;p&gt;Salesforce can expose custom-coded services to third party applications, either as SOAP web services or REST APIs. In our demo, we will develop a very lightweight REST API and demonstrate how Postman can speed up that process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-postman-accelerates-development"&gt;
  &lt;/a&gt;
  How Postman accelerates development
&lt;/h2&gt;

&lt;p&gt;One of the most popular use cases for Postman is to explore the API of third-party apps, to better understand how to submit requests, and what to expect for responses. By seeing the requests and responses, developing your own code for handling these APIs becomes much easier. We can also develop a mock server implementation of our own API, one that generates expected responses. In this way, we don’t need to wait for a “real” implementation of the API before we can start developing for it. By using Postman’s tools for API development, we can rapidly prototype a Salesforce REST API &lt;em&gt;before&lt;/em&gt; the API—and the code that uses it—has completed development.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bringing-it-together"&gt;
  &lt;/a&gt;
  Bringing it together
&lt;/h2&gt;

&lt;p&gt;As our first step, we'll use one of Postman’s most powerful features: mock servers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mock-servers"&gt;
  &lt;/a&gt;
  Mock servers
&lt;/h3&gt;

&lt;p&gt;A mock server is a lightweight server interface that responds to your API requests realistically, allowing you to quickly and easily get a valid response without worrying too much about the details. With Postman, you can start a mock server that responds to HTTP requests of your design in a very short time, with no coding required. By pointing your code at this mock server, you can write and test your API consumer code.&lt;/p&gt;

&lt;p&gt;We’ll be using the Desktop client for our examples, but everything here should be equally applicable with Postman’s web client. Mock Servers can be found within your Workspace in Postman.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-and-configuring-the-mock-server"&gt;
  &lt;/a&gt;
  Creating and configuring the mock server
&lt;/h3&gt;

&lt;p&gt;Click on &lt;em&gt;Create Mock Server&lt;/em&gt; to get started.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UFlFMDOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eglbquqjtl48fvd3xoja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UFlFMDOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eglbquqjtl48fvd3xoja.png" alt="" width="564" height="621"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, we can start defining the HTTP requests we’d like to mock. By specifying the HTTP request method, URL, response code, and response body, we can tell Postman how to respond to requests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IC5erwR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/miiziwjtuml2zfw3omdo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IC5erwR_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/miiziwjtuml2zfw3omdo.png" alt="" width="880" height="371"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, we’re mocking a request for a Salesforce Account record. Rather than hardcoding a Salesforce account &lt;code&gt;id&lt;/code&gt;, we’re using Postman’s ability to use variables. By matching the variable in both the request and the response, we can return whatever value was supplied in the request. We’ll use this feature in more detail later.&lt;/p&gt;

&lt;p&gt;For now, we will just mock that one request and click the &lt;em&gt;Next&lt;/em&gt; button to finalize our Mock Server setup with a few more parameters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sWrQnP_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glc9xrxhwaa2k1o51mn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sWrQnP_S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/glc9xrxhwaa2k1o51mn7.png" alt="" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Besides naming the mock server, we’ll just stick to the defaults and click the &lt;em&gt;Create Mock Server&lt;/em&gt; button. This will create our mock server instance with a unique URL for receiving requests, as illustrated below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aUKoX04q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzj6d7l8sidujfkw4buc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aUKoX04q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzj6d7l8sidujfkw4buc.png" alt="" width="880" height="542"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we selected the option to save the mock server URL as an environment variable, however, there is an easier way to reference this. If we expand the environment dropdown in the top-right of Postman, we will see that an environment was automatically created for us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Us-lkrJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzgvzntaiv9o5bq2dcc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Us-lkrJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzgvzntaiv9o5bq2dcc2.png" alt="" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we select this environment, the mock server URL is automatically populated for us in a parameter called &lt;code&gt;{{url}}&lt;/code&gt;. The process of creating a new mock server also created a new Postman collection for us. That collection has our request, and the request is ready for us to populate with parameters where applicable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Us-lkrJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzgvzntaiv9o5bq2dcc2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Us-lkrJw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzgvzntaiv9o5bq2dcc2.png" alt="" width="880" height="509"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we select this request, we see the user interface for building our request. By replacing the &lt;code&gt;{{accountId}}&lt;/code&gt; variable in the request with an example &lt;code&gt;id&lt;/code&gt; and sending the request, we should receive a response from our Mock Server that repeats that &lt;code&gt;id&lt;/code&gt; back to us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tKjrsHyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqn6mkmnh6vs4git1o50.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tKjrsHyO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqn6mkmnh6vs4git1o50.png" alt="" width="880" height="707"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#extending-the-mock-response"&gt;
  &lt;/a&gt;
  Extending the mock response
&lt;/h3&gt;

&lt;p&gt;Now that we have our basic mock server working, we can extend the responses to be more meaningful and realistic. Expand the example request in our collection from the Workspace tree view, and click on the example (currently called “Default”).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IAoXwAhh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqdc5zwqv04vosahexbe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IAoXwAhh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqdc5zwqv04vosahexbe.png" alt="" width="880" height="609"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’re going to make some changes to how the mock server responds to this request. The &lt;code&gt;attributes&lt;/code&gt; field is not essential. We’re just simulating how Salesforce would respond.&lt;/p&gt;

&lt;p&gt;In the response body tab in the bottom section, replace the contents with the following JSON:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "attributes" : 
    {
      "type" : "Account",
      "url" : "/services/data/v53.0/sobjects/Account/accountId"
    },
  "Id" : "{{accountId}}",
  "Name" : "{{$randomCompanyName}}"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how we made use of Postman’s convenient &lt;code&gt;$randomCompanyName&lt;/code&gt; variable. Many useful variables can be used to generate example data, documented &lt;a href="https://learning.postman.com/docs/writing-scripts/script-references/variables-list/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the response headers tab in the bottom section, add a &lt;code&gt;Content-Type&lt;/code&gt; key with the value &lt;code&gt;application/json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Click &lt;em&gt;Save&lt;/em&gt; to update the example response. The mock server will now respond with the updated response to the request we made earlier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d4xU4TKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0x860gw5capzi8csivjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d4xU4TKK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0x860gw5capzi8csivjq.png" alt="" width="880" height="639"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, we can add additional requests and examples to our collection. Click the ellipsis (&lt;code&gt;...&lt;/code&gt;) icon next to our collection name and select &lt;em&gt;Add request&lt;/em&gt; to generate a new one. Then, click the ellipsis icon next to the new request and select &lt;em&gt;Add example&lt;/em&gt;. This adds a new example response that the mock server will serve to your request. You can build a new mock server response in the same way as previously—by specifying new paths, HTTP verbs, and responses—until you’ve drafted your API.  At this point, we can even test the API from outside of Postman - one of the quickest ways to do this is via Postman’s code snippet functionality.  This allows for equally rapid development of code to consume the API.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#snippets"&gt;
  &lt;/a&gt;
  Snippets
&lt;/h3&gt;

&lt;p&gt;Postman provides example code for calling your APIs, mock or otherwise, in several languages and libraries. With a request selected in your workspace, click the &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; icon on the right to expand the code snippet menu. From here, you can select a suitable language/library combination and see the example code to call your API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"&gt;CORS&lt;/a&gt; is enabled for Postman mock servers. As a result, you can stub your web apps with mocked data using the mock endpoints. Development or production web apps can then make requests to your Postman mock endpoint and receive example responses.&lt;/p&gt;

&lt;p&gt;The code snippet will resolve variables where it can. In our example, where we use the &lt;code&gt;{{url}}&lt;/code&gt; variable to reference our Mock Server, this is expanded for us. This is shown in the JavaScript Fetch code example below&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iUQtkXpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2agksw5m336dzlti424u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iUQtkXpz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2agksw5m336dzlti424u.png" alt="" width="682" height="528"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important note:&lt;/strong&gt; this code snippet, as generated from Postman, has a small error.  HTTP GET requests sent via Fetch should &lt;strong&gt;not&lt;/strong&gt; set a body in the request.  For our testing, we will need to remove line 5 in the example above.  Below is the updated code, wrapped in a lightweight HTML page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;script&amp;gt;
            var raw = "";

            var requestOptions = {
            method: 'GET',
            redirect: 'follow'
            };

            fetch("https://768bb73c-2824-49fa-8787-3967ce6ea0c1.mock.pstmn.io//Account/001000000WCFB8", requestOptions)
            .then(response =&amp;gt; response.text())
            .then(result =&amp;gt; console.log(result))
            .catch(error =&amp;gt; console.log('error', error));
        &amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;p&amp;gt;Check the browser console to see the output from our mock server.&amp;lt;/p&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p6FxAVCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9edy2qo268p9i73yxa5s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p6FxAVCJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9edy2qo268p9i73yxa5s.png" alt="" width="880" height="622"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;In this article, we’ve looked at the basics of setting up a Mock Server in Postman—from creating the mock server and a sample response to extending it with more meaningful JSON data and adding additional responses. We’ve also seen how simple it is to generate code snippets that show how to consume the API in the language/platform of your choice. Code snippets greatly aid the development of your own tools that utilize your API.&lt;/p&gt;

&lt;p&gt;With the tools that Postman provides, we can provide a technical requirement to both our Salesforce developers implementing the API and our developers on other platforms communicating with Salesforce as part of an integration.&lt;/p&gt;

&lt;p&gt;There is a wealth of further resources available for working with both Postman and Salesforce. Some of the ones relevant to what we’ve covered here can be found below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/kZOwHyCl9sY"&gt;Building a mock API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/n_7UUghLpco"&gt;Mock Servers: The Exploratory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/7NA-7TGqsNc"&gt;Integrating With a Custom Salesforce App in Postman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_rest.htm"&gt;Exposing Apex Classes as REST WebServices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://trailhead.salesforce.com/en/content/learn/modules/postman-api-client"&gt;Salesforce Trailhead: Postman API Client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Aumentar la productividad con extensiones en Gnome</title>
      <author>Luis Moreno</author>
      <pubDate>Thu, 18 Nov 2021 16:15:42 +0000</pubDate>
      <link>https://dev.to/luismorenomx/aumentar-la-productividad-con-extensiones-en-gnome-4b9e</link>
      <guid>https://dev.to/luismorenomx/aumentar-la-productividad-con-extensiones-en-gnome-4b9e</guid>
      <description>&lt;p&gt;Hay muchas extensiones en Gnome que son de mi agrado y creo que las de este listado son mis favoritas.&lt;/p&gt;

&lt;p&gt;Compartir estos recursos es porque tengo intensión en todo momento de incrementar la productividad a la hora de estar desarrollando software.&lt;/p&gt;

&lt;p&gt;No sé si en otros entornos de escritorio se pueda mejorar la productividad, lo que sí sé es que en Gnome ha ido mejorando todo poco a poco y se agradece.&lt;br&gt;
Y por eso acá dejo los plugins que les recomiendo bajar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Caffeine&lt;/strong&gt;- Disable the screensaver and auto suspend&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/3997/app-grid-tweaks/"&gt;https://extensions.gnome.org/extension/3997/app-grid-tweaks/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desktop Icons&lt;/strong&gt;- Add icons to the desktop&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/779/clipboard-indicator/"&gt;https://extensions.gnome.org/extension/779/clipboard-indicator/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multi Monitors AddOn&lt;/strong&gt;- Add multiple monitors overview and panel for gnome-shell.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/921/multi-monitors-add-on/"&gt;https://extensions.gnome.org/extension/921/multi-monitors-add-on/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tilix Dropdown&lt;/strong&gt;- Launch Tilix in Quake mode.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/1185/tilix-dropdown/"&gt;https://extensions.gnome.org/extension/1185/tilix-dropdown/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dash to dock&lt;/strong&gt;- Moves the dash out of the overview transforming it in a dock.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/307/dash-to-dock/"&gt;https://extensions.gnome.org/extension/307/dash-to-dock/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenWeather&lt;/strong&gt;- Display weather information from &lt;a href="https://openweathermap.org/"&gt;https://openweathermap.org/&lt;/a&gt;&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/750/openweather/"&gt;https://extensions.gnome.org/extension/750/openweather/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;App Grid Tweaks&lt;/strong&gt;- Customize the application grid view.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/3997/app-grid-tweaks/"&gt;https://extensions.gnome.org/extension/3997/app-grid-tweaks/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clipboard Indicator&lt;/strong&gt;- Adds a clipboard indicator to the top panel, and caches clipboard history.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/779/clipboard-indicator/"&gt;https://extensions.gnome.org/extension/779/clipboard-indicator/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Custom Hot Corners&lt;/strong&gt;- Customizable hot corners.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/1362/custom-hot-corners/"&gt;https://extensions.gnome.org/extension/1362/custom-hot-corners/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desktop Scroller&lt;/strong&gt;- Switch between desktops scrolling at the upper edge of the screen, including in overview.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/3709/desktop-scroller-gnome-338/"&gt;https://extensions.gnome.org/extension/3709/desktop-scroller-gnome-338/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;gTile&lt;/strong&gt;- Tile windows on a grid.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/28/gtile/"&gt;https://extensions.gnome.org/extension/28/gtile/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Screenshot Tool&lt;/strong&gt;- Conveniently create, copy, store and upload screenshots.&lt;br&gt;
(&lt;a href="https://extensions.gnome.org/extension/1112/screenshot-tool/"&gt;https://extensions.gnome.org/extension/1112/screenshot-tool/&lt;/a&gt;)&lt;/p&gt;

</description>
      <category>linux</category>
      <category>gnome</category>
      <category>productivity</category>
    </item>
    <item>
      <title>40+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs [Beginners - Advance] </title>
      <author>Jarvis</author>
      <pubDate>Thu, 18 Nov 2021 16:09:12 +0000</pubDate>
      <link>https://dev.to/jvs/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-fd0</link>
      <guid>https://dev.to/jvs/40-nodejs-projects-for-beginners-easy-ideas-to-get-started-coding-nodejs-beginners-advance-fd0</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable &lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1" rel="noreferrer noopener"&gt;web applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers. &lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/nodejs-project-for-beginners/&amp;amp;ved=2ahUKEwiOlt_I6e7zAhXXb30KHRuwBEIQFnoECAUQAQ&amp;amp;usg=AOvVaw1LC_Y25wyupI6_tdH89kg1"&gt;40+ Nodejs Projects for Beginners – Easy Ideas to Get Started Coding Nodejs &lt;/a&gt;&lt;/b&gt; &lt;/p&gt;






</description>
    </item>
    <item>
      <title>CodeCom 2021: A Creative Coding Competition</title>
      <author>Hudson Gouge</author>
      <pubDate>Thu, 18 Nov 2021 16:01:00 +0000</pubDate>
      <link>https://dev.to/hg0428/codecom-2021-a-creative-coding-competition-pi8</link>
      <guid>https://dev.to/hg0428/codecom-2021-a-creative-coding-competition-pi8</guid>
      <description>&lt;h1&gt;
  &lt;a href="#codecom-2021"&gt;
  &lt;/a&gt;
  🎉  CodeCom 2021  🖥️
&lt;/h1&gt;

&lt;h1&gt;
  &lt;a href="#%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81%E2%94%81"&gt;
  &lt;/a&gt;
  ━━━━━━━━━━━━━━━━
&lt;/h1&gt;

&lt;p&gt;Join us for our 2nd annual CodeCom, December 1st – 14th. &lt;br&gt;
You can submit on our Discord Server or on Repl.it using &lt;strong&gt;# codecom&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1st Place: $20 + choice of Discord Nitro OR Replit Hacker Plan + More&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;🥏    &lt;strong&gt;CodeCom&lt;/strong&gt;    ⌚️&lt;br&gt;
&lt;strong&gt;━━━━━━━━━━━━━━━━&lt;/strong&gt;&lt;br&gt;
Every year we host a large coding competition. Each year the theme is different, but the magic stays the same. The competition is very open-ended, so creativity is front and center. We try to make it accessible to all yet fun for even the most advanced. We try to make things, that most people would never think about making.     🍃      The prizes are great too, a gift card of your choice, for 1st, 2nd, and 3rd places. And it is free to enter!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We hope to see you soon!&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://eps.hg0428.repl.co/CodeCom"&gt;https://eps.hg0428.repl.co/CodeCom&lt;/a&gt;&lt;br&gt;
&lt;a href="https://discord.gg/KqhqnHrrZJ"&gt;https://discord.gg/KqhqnHrrZJ&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>contest</category>
      <category>creativity</category>
      <category>fun</category>
    </item>
    <item>
      <title>AppSync Lambda authorizers via new Amplify Custom Resources</title>
      <author>Antonio Lagrotteria</author>
      <pubDate>Thu, 18 Nov 2021 15:56:36 +0000</pubDate>
      <link>https://dev.to/aws-builders/appsync-lambda-authorizers-via-new-amplify-custom-resources-28gf</link>
      <guid>https://dev.to/aws-builders/appsync-lambda-authorizers-via-new-amplify-custom-resources-28gf</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/amplify/"&gt;Amplify&lt;/a&gt; and &lt;a href="https://aws.amazon.com/appsync/"&gt;AppSync&lt;/a&gt; allow customers to consume a fully managed GraphQL API endpoint in minutes and gracefully handle authorization. This article shows how you can leverage the newly recently introduced &lt;a href="https://docs.amplify.aws/cli/custom/cdk/"&gt;AWS Custom Resources&lt;/a&gt; to add the new &lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/07/aws-appsync-supports-custom-authorization-with-aws-lambda-graphsql-apis/"&gt;AWS Lambda&lt;/a&gt; authorization mode via CDK. We will integrate this endpoint with a very simple React web-app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pZ-dJv4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AX8wJfgMbeIaItSJM_uMzhg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pZ-dJv4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AX8wJfgMbeIaItSJM_uMzhg.png" alt="" width="703" height="261"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fun-fact"&gt;
  &lt;/a&gt;
  Fun fact
&lt;/h2&gt;

&lt;p&gt;The first version of this article was based on independently provision the needed AWS resources via CDK, on its own folder/project. Nevertheless  in the &lt;a href="https://aws.amazon.com/developer/community/community-builders/"&gt;AWS Community Builders&lt;/a&gt; Slack channel, I came to know that &lt;a href="https://docs.amplify.aws/cli/custom/cdk/#reference-amplify-environment-name"&gt;a related feature&lt;/a&gt; was being released by the AWS Amplify team which brought me to revisit the article with slightly different but cleaner implementation. This synthetizes the awesomeness of the program. You can find the &lt;a href="https://github.com/aladevlearning/appsync-lambda-authorizers/tree/before-custom-resources"&gt;before&lt;/a&gt; and &lt;a href="https://github.com/aladevlearning/appsync-lambda-authorizers/tree/after-custom-resources"&gt;after&lt;/a&gt; custom resources implementation in GitHub.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-custom-resources"&gt;
  &lt;/a&gt;
  Add Custom resources
&lt;/h2&gt;

&lt;p&gt;With latest Amplify now you can &lt;a href="https://docs.amplify.aws/cli/custom/cdk"&gt;add custom resources&lt;/a&gt; by defining CDK stacks. A typical approach before this was to separate your CDK into a &lt;em&gt;cdk&lt;/em&gt; or &lt;em&gt;infra&lt;/em&gt; folder within your project. Now you can have it within the Amplify backend. Issues the below commands:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -g @aws-amplify/cli
amplify add custom
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Currently you can define custom resources by either &lt;em&gt;CDK&lt;/em&gt; or &lt;em&gt;CloudFormation&lt;/em&gt; templates, we will opt for the first choice and provide a name for the custom Resource e.g. &lt;em&gt;lambdaAuthorizerCustomResource&lt;/em&gt;. This generates a skeleton CDK stack under the &lt;em&gt;amplify/backend/custom/&lt;/em&gt; path.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XWtIxs_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AWM50WFpUMqOsI11bYsVs6Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XWtIxs_R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AWM50WFpUMqOsI11bYsVs6Q.png" alt="" width="353" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we modify the pre-generated &lt;em&gt;cdk-stack.ts file&lt;/em&gt; and create a &lt;em&gt;cdk.ts&lt;/em&gt;, let’s look at the content of the CDK stack in the next section.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#provision-graphql-via-cdk"&gt;
  &lt;/a&gt;
  Provision GraphQL via CDK
&lt;/h2&gt;

&lt;p&gt;Being a huge fan of &lt;a href="https://docs.aws.amazon.com/whitepapers/latest/introduction-devops-aws/infrastructure-as-code.html"&gt;Infrastructure as Code&lt;/a&gt; principle, I decided to create the GraphQL endpoint by using AWS CDK for Typescript language. Essentially, CDK abstracts CloudFormation stacks in a programmatic way. Below stack will provision:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;an AppSync GraphQL endpoint based on a &lt;a href="https://github.com/aladevlearning/appsync-lambda-authorizers/blob/main/cdk/graphql/schema.graphql"&gt;schema.graphql&lt;/a&gt; defining the model and a Lambda authorizer configuration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An &lt;em&gt;Authorizer&lt;/em&gt; Lambda function with its necessary IAM policies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A business-related &lt;em&gt;Payments&lt;/em&gt; Lambda function containing CRUD operation on as on a defined model (here the &lt;em&gt;Payment&lt;/em&gt; model) via its &lt;a href="https://graphql.org/learn/execution/"&gt;GraphQL resolvers&lt;/a&gt;. This Lambda is attached as a &lt;a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-datasource.html"&gt;datasource to AppSync&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A DynamoDB table to persist the models.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Full code, outputting the GraphQL endpoint, can be found &lt;a href="https://github.com/aladevlearning/appsync-lambda-authorizers/blob/after-custom-resources/authorizer-app/client/amplify/backend/custom/lambdaAuthorizerCustomResource/cdk-stack.ts"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
It is important to note that now you can use Amplify project metadata such as &lt;strong&gt;&lt;em&gt;project&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;environment&lt;/em&gt;&lt;/strong&gt; name  to define your resources at run-time.&lt;/p&gt;

&lt;p&gt;At the time of the writing I had to create a &lt;em&gt;cdk.ts&lt;/em&gt; file in order to initialize the stack and associate it with the app:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Finally, let’s build and deploy the changes:
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;amplify build
cdk deploy --app "npx ts-node cdk.ts" --parameters env=dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Above steps could be manually performed AWS Console, but just with more steps and error-prone risk. Here below we show the visual output of the CDK:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v-amFT8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ASbWdB8ooe3YRocDetuPbcw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v-amFT8_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ASbWdB8ooe3YRocDetuPbcw.gif" alt="" width="800" height="366"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lens-on-lambdas"&gt;
  &lt;/a&gt;
  Lens on Lambdas
&lt;/h2&gt;

&lt;p&gt;We have provisioned two Lambda functions: one  “&lt;em&gt;glueing&lt;/em&gt;” AppSync with DynamoDB as &lt;em&gt;datasource&lt;/em&gt; and one performing authorization checks. &lt;strong&gt;IMPORTANT:&lt;/strong&gt; Notice they have been prefixed with the data coming from our CDK stack: &lt;strong&gt;authorizerappdev.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#datasource-lambda"&gt;
  &lt;/a&gt;
  Datasource Lambda
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;Datasource&lt;/em&gt; Lambda leverages AWS SDK to perform CRUD actions on DynamoDB table. Below snippet showcases listing of payments, the rest can be looked at &lt;a href="https://github.com/aladevlearning/appsync-lambda-authorizers/tree/main/cdk/resources/payments"&gt;Github repo&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#authorizer-lambda"&gt;
  &lt;/a&gt;
  Authorizer Lambda
&lt;/h3&gt;

&lt;p&gt;AppSync forwards any client requests to this function, by providing an authentication token. For this PoC, I leverage an RSA key pair to verify the payload of an incoming JWT token and its signing via a public key previously generated. This is done by using the &lt;a href="https://github.com/auth0/node-jsonwebtoken"&gt;jsonwebtoken&lt;/a&gt; package.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
At this stage we just need a client consuming the GraphQL endpoint, so let’s look at it in details in the next section.
&lt;h2&gt;
  &lt;a href="#integration-with-amplify"&gt;
  &lt;/a&gt;
  Integration with Amplify
&lt;/h2&gt;

&lt;p&gt;At the time of the writing (November 2021), the new Lambda authorizer is not yet available via Amplify CLI. This entails that we need to setup a manual integration with AppSync, which though is very simple.&lt;/p&gt;

&lt;p&gt;Assuming you have &lt;a href="https://docs.amplify.aws/cli/start/install/"&gt;&lt;em&gt;configured&lt;/em&gt; and &lt;em&gt;initiated&lt;/em&gt; Amplify&lt;/a&gt; in your project, All you need to do is to manually add this snippet as part of the Amplify &lt;em&gt;configure&lt;/em&gt; method, usually located in your App.js/ts file — if using React.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
To demonstrate the JWT verification, I have created a very dumb &lt;a href="https://github.com/aladevlearning/appsync-lambda-authorizers/blob/main/authorizer-app/client/src/App.js"&gt;React UI&lt;/a&gt;.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eICURaQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AQm1WWMtV3ShqYazZV8LgvQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eICURaQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AQm1WWMtV3ShqYazZV8LgvQ.gif" alt="" width="800" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A JWT token gets generated by calling a local &lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt;NodeJs server exposing a &lt;em&gt;generate-token&lt;/em&gt; endpoint. Details can be found &lt;a href="https://github.com/aladevlearning/appsync-lambda-authorizers/blob/after-custom-resources/authorizer-app/backend/server.js"&gt;here&lt;/a&gt;. The endpoint uses a private key in order to sign the generated JWT token, which then will be verified, as shown earlier, by the Lambda Authorizer function. In this case we just send a naïve foo/bar payload, but in real life must be much more complex and following &lt;a href="https://tools.ietf.org/id/draft-spencer-oauth-claims-00.html"&gt;Oauth claims&lt;/a&gt; more strictly. The call is performed by calling the API endpoint and providing a GraphQL query and the JWT token.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Lambda authorizers and Custom Resources are yet another weapon to the Amplify and AppSync arsenal, opening for a myriad of use cases and combinations of single and multiple authorizers and third-party integrations. This article is intended as a starting point for customers to start using the Lambda Authorizer feature and just showed a very simple implementation which can then be extended for more further refinement.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/about-aws/whats-new/2021/07/aws-appsync-supports-custom-authorization-with-aws-lambda-graphsql-apis/"&gt;&lt;strong&gt;AWS AppSync now supports custom authorization with AWS Lambda for GraphQL APIs&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aws.amazon.com/blogs/mobile/building-scalable-graphql-apis-on-aws-with-cdk-and-aws-appsync/"&gt;&lt;strong&gt;Building Scalable GraphQL APIs on AWS with CDK, TypeScript, AWS AppSync, Amazon DynamoDB, and AWS…&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Building Open-Source Metrics Stores with Cube</title>
      <author>Igor Lukanin</author>
      <pubDate>Thu, 18 Nov 2021 15:51:30 +0000</pubDate>
      <link>https://dev.to/cubejs/building-open-source-metrics-stores-with-cube-3fpj</link>
      <guid>https://dev.to/cubejs/building-open-source-metrics-stores-with-cube-3fpj</guid>
      <description>&lt;p&gt;&lt;em&gt;TL;DR: You can build a consistent and reusable metrics layer and connect it to a front-end app and a BI tool like Superset or Tableau at the same time.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today, &lt;a href="http://github.com/cube-js/cube.js"&gt;Cube&lt;/a&gt; powers analytics features inside thousands of applications where developers have leveraged Cube’s data schema as a &lt;strong&gt;metrics layer&lt;/strong&gt;—a consistent, single source of truth. By powering a single repository of metrics, Cube helps developers quickly and reliably ship embedded analytics features and other data-powered applications with the peace of mind that their metrics definitions remain consistent.&lt;/p&gt;

&lt;p&gt;Cube solves this problem very well for application developers, but it’s been unsolved for users of dashboards and business intelligence tools, and the data engineering teams that support them.&lt;/p&gt;

&lt;p&gt;In most modern organizations, there are multiple tools that consume data from the same single warehouse but perform their own downstream metrics calculations. This leads to inconsistent calculations and disagreements between teams: &lt;strong&gt;How do we calculate revenue? Does it include revenue from X cohort? How do monthly payments affect annual projections?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The more tools an organization uses, the more inconsistencies and conflicts arise, and the harder it is for a business to make decisions using accurate data. To avoid this, they need a centralized, upstream location in which to build and maintain their metrics, so that every tool works from the same source of metric truth.&lt;/p&gt;

&lt;p&gt;Today, I’m excited to share a way for Cube to function as a metrics store for any data consumer: we’re proud to announce the new &lt;a href="https://cube.dev/docs/backend/sql/?ref=introducing-cube-sql"&gt;Cube SQL API&lt;/a&gt;. With the addition of this API, Cube now functions as a headless BI layer to provide consistent metrics to any querying and visualization tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5AB6Qx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/ebff03e0-fbcd-4941-9a3c-cc71b6142561.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5AB6Qx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/ebff03e0-fbcd-4941-9a3c-cc71b6142561.png" alt="data-flow-diagram" width="880" height="222"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;In the modern data stack, Cube acts as a proxy for data warehouses and translates every incoming query, whether it is JSON, GraphQL, or SQL, into native queries to the underlying data storage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dTC6QK8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/e47e56c8-07ee-4330-8b6a-e899244cbac1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dTC6QK8J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/e47e56c8-07ee-4330-8b6a-e899244cbac1.png" alt="sql-generation" width="880" height="376"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cube translates queries by using a JSON-based data modeling layer consisting of cubes. Think of these as database views, backed by either a reference to an existing database table or a new table created by SELECT statement. Cubes contain defined measures and dimensions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Measures&lt;/strong&gt; are quantitative data, such as the number of units sold, unique visits, profit, and so forth. &lt;strong&gt;Dimensions&lt;/strong&gt; are categorical data, such as state, gender, product name, or units of time. (You can learn more about Cube’s &lt;a href="https://cube.dev/docs/schema/getting-started?ref=introducing-cube-sql"&gt;data schema&lt;/a&gt; in the docs.)&lt;/p&gt;

&lt;p&gt;Below is an example of the cube we can use to describe metrics about leads for a sales organization.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;cube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Leads`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`
    SELECT
      persons.id,
      persons.created_date,
      deals.id as deal_id
    FROM persons
      LEFT JOIN deals ON deals.person_id = persons.id
  `&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Leads`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`Leads for Insides Sales`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

  &lt;span class="na"&gt;measures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`count`&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;converted_to_deal_count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`count`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;filters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;is_converted_to_deal&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;) = true`&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;to_deal_conversion_rate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`number`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`ROUND(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;converted_to_deal_count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; / NULLIF(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, 0) * 100, 2)`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`percent`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;dimensions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`created`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`time`&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;is_converted_to_deal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`boolean`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;sql&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`deal_id IS NOT NULL`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With the above definitions of our metrics we can ask questions like &lt;strong&gt;"What is our monthly lead-to-deal conversion rate over the last year?"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When we query Cube’s metrics layer via the SQL API, cubes will be presented as tables and measures and dimensions as columns. To answer the above question with SQL we need to write the following query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;DATE_TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'month'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
       &lt;span class="n"&gt;to_deal_conversion_rate&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;leads&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="s1"&gt;'2021-01-01'&lt;/span&gt;
  &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="s1"&gt;'2021-12-31'&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cube will translate this query into the query for the underlying database.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
  &lt;span class="n"&gt;DATETIME_TRUNC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nb"&gt;DATETIME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;created_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'America/Los_Angeles'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;MONTH&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;`leads__time_month`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;ROUND&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;CASE&lt;/span&gt; &lt;span class="k"&gt;WHEN&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;deal_id&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;THEN&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;END&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;NULLIF&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;`leads__to_deal_conversion_rate`&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
      &lt;span class="n"&gt;persons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;persons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;deals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;deal_id&lt;/span&gt;
     &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt;
      &lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;deals&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;deals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;person_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;persons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="nv"&gt;`leads`&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;created_date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2021-01-01T00:00:00.000Z'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;AND&lt;/span&gt; &lt;span class="n"&gt;created_date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'2021-12-31T23:59:99.999Z'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
&lt;span class="k"&gt;LIMIT&lt;/span&gt;
  &lt;span class="mi"&gt;10000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can query Cube with SQL from your favorite programming language, such as Python.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sXMGIGQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/2b0d23c8-37fa-4550-8c99-53196c832a26.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sXMGIGQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/2b0d23c8-37fa-4550-8c99-53196c832a26.gif" alt="jupiter" width="880" height="575"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most powerfully, because the Cube SQL API speaks MySQL-compatible SQL, you also can connect your favorite BI tool—like Superset, Metabase, or Tableau—directly to Cube, and let Cube generate SQL to fetch and display data. Here’s an example of using Superset with the Cube SQL API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ivv2odPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/a775a871-8e89-451c-afb1-671b6dd22e3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ivv2odPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cubedev-blog-images.s3.us-east-2.amazonaws.com/a775a871-8e89-451c-afb1-671b6dd22e3f.png" alt="superset" width="880" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check our documentation for the full &lt;a href="https://cube.dev/docs/recipes/using-apache-superset-with-cube-sql?ref=introducing-cube-sql"&gt;Superset integration tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#builtin-relational-cache"&gt;
  &lt;/a&gt;
  Built-in relational cache
&lt;/h2&gt;

&lt;p&gt;Every query can leverage Cube’s pre-aggregations layer—a database-agnostic materialization engine—in order to make dashboards and reports load in milliseconds instead of minutes.&lt;/p&gt;

&lt;p&gt;While defining metrics, developers can specify which metrics they want to pre-aggregate. Cube will run complex calculations beforehand in the background and will create a cache table with the results. All queries will be served from this cache table, dramatically increasing dashboards’ performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-we-go-next"&gt;
  &lt;/a&gt;
  Where we go next
&lt;/h2&gt;

&lt;p&gt;We’re excited about today’s launch, but it is only the beginning of the journey!  We’re committed to supporting all the major SQL operations, and improving error handling to provide more useful tips to users. Please let us know in our Slack channel if you see something that is not working as you expected.&lt;/p&gt;

&lt;p&gt;Everything described here is available in Cube’s OSS offering, licensed under Apache 2.0. In addition, we're working on cataloguing and collaboration tools for the Cube metrics layer in Cube Cloud, our fully-managed Cube service. Watch this space.&lt;/p&gt;

&lt;p&gt;If you’re interested in learning more, &lt;a href="https://cube.dev?ref=introducing-cube-sql"&gt;please give Cube a try&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Prisma Data Platform's PlanetScale Integration </title>
      <author>etnoctua</author>
      <pubDate>Thu, 18 Nov 2021 15:30:09 +0000</pubDate>
      <link>https://dev.to/planetscale/prisma-data-platforms-planetscale-integration-j3d</link>
      <guid>https://dev.to/planetscale/prisma-data-platforms-planetscale-integration-j3d</guid>
      <description>&lt;p&gt;As developers, we often want to build faster, but that comes with tradeoffs that we have to deal with in the long run. At PlanetScale, we want to empower developers to be able to build without having to worry about issues of database scalability as their application grows. Similarly, Prisma wants to empower developers to efficiently work with data while making fewer errors. &lt;/p&gt;

&lt;p&gt;PlanetScale and Prisma have partnered up to allow developers to create PlanetScale databases in the new &lt;a href="https://www.prisma.io/dataplatform"&gt;Prisma Data Platform&lt;/a&gt;. You can have a starter database schema and a live PlanetScale database ready to accept thousands of new database connections with a few clicks.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://www.prisma.io/dataplatform"&gt;Prisma Data Platform&lt;/a&gt; provides you with application templates with Prisma data schemas, so you don't even have to think about a data model to get started. Once set up, you can deploy to Vercel immediately or use the Prisma Data Explorer and Query Builder to explore your PlanetScale database.&lt;/p&gt;

&lt;p&gt;Try out creating your first &lt;a href="https://auth.planetscale.com/sign-up"&gt;PlanetScale&lt;/a&gt; database with one of the application templates and experience the power of &lt;a href="https://www.prisma.io/dataplatform"&gt;Prisma&lt;/a&gt; with PlanetScale for yourself.&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>programming</category>
      <category>devops</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
