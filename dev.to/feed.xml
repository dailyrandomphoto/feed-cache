<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to quickly build a website using Tailwindcss and Tailblocks</title>
      <author>Siddharth Chaudhary</author>
      <pubDate>Sat, 19 Dec 2020 14:21:01 +0000</pubDate>
      <link>https://dev.to/sidchaudhary04/how-to-quickly-build-a-website-using-tailwindcss-and-tailblocks-k22</link>
      <guid>https://dev.to/sidchaudhary04/how-to-quickly-build-a-website-using-tailwindcss-and-tailblocks-k22</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4AMukO51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://refactoringui.nyc3.cdn.digitaloceanspaces.com/tailwind-logo.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4AMukO51--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://refactoringui.nyc3.cdn.digitaloceanspaces.com/tailwind-logo.svg" alt="Tailwindcss Logo"&gt;&lt;/a&gt;&lt;br&gt;
I recently discovered this tool that allowed me to rapidly build my own &lt;a href="https://siddharth.one"&gt;website&lt;/a&gt;. Hope it might be useful.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tailwindcss" class="anchor"&gt;
  &lt;/a&gt;
  What is Tailwindcss
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://tailwindcss.com"&gt;Tailwindcss&lt;/a&gt; is a utility based css framework for rapid development and is very useful in some cases. My own &lt;a href="https://siddharth.one"&gt;website&lt;/a&gt; is built entirely on tailwindcss, so I definitely would recommend it to you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailblocks" class="anchor"&gt;
  &lt;/a&gt;
  Tailblocks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mertjf.github.io/tailblocks/"&gt;Tailblocks&lt;/a&gt; is a very easy tool that provides you with readymade Tailwindcss blocks. It includes most of the blocks that you would need to build a great website, including navbars, hero sections and footers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use" class="anchor"&gt;
  &lt;/a&gt;
  How to use
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Setup your html document like below
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;iDOCTYPE&lt;/span&gt; &lt;span class="na"&gt;html&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt;  &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Your title&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/tailwindcss@^2/dist/tailwind.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://mertjf.github.io/tailblocks/"&gt;tailblocks&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Pick out a block you like.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FB60bPEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/qczillga8zemwyvot7zm.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Click the '&amp;lt;&amp;gt;View Code' button.&lt;/li&gt;
&lt;li&gt;Copy the code.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Paste it into the html document and voila ü§Ø&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Repeat the process with as many blocks as you like üëç.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Introduction to Guild - The free self-hosted team management solution </title>
      <author>Guild</author>
      <pubDate>Sat, 19 Dec 2020 13:58:24 +0000</pubDate>
      <link>https://dev.to/guild/introduction-to-guild-the-free-self-hosted-team-management-solution-933</link>
      <guid>https://dev.to/guild/introduction-to-guild-the-free-self-hosted-team-management-solution-933</guid>
      <description>&lt;h1&gt;
  &lt;a href="#idea" class="anchor"&gt;
  &lt;/a&gt;
  üí° Idea
&lt;/h1&gt;

&lt;p&gt;With Covid and so many people working remotely, managing your team could be a challenging task. Keeping an eye on what your team is working on is going to be crucial. &lt;/p&gt;

&lt;p&gt;There are many management apps out there, but so many of them are really complex or very expensive. If there was an app where a manager could take one look at a single page and see who's on shift at the moment and what they‚Äôre working on, it could be really cool!&lt;/p&gt;

&lt;p&gt;This is why we decided to create Guilds! &lt;strong&gt;An open-source App for managing teams&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A guild is a group of people who are on a mission to complete a common goal. Your team is your guild, and this self-hosted solution will put the simplicity back into organizing a team. It's a simple dashboard of company announcements, team member availability, and team member status. Keeping it simple because managing your "management system" shouldn't be a task in itself.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#landing-page" class="anchor"&gt;
  &lt;/a&gt;
  üìÉ Landing Page
&lt;/h1&gt;

&lt;p&gt;As of the time being, you can find the landing page of the Guild project here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://guild.so"&gt;https://guild.so&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#screenshot" class="anchor"&gt;
  &lt;/a&gt;
  üì∏ Screenshot
&lt;/h1&gt;

&lt;p&gt;Landing Page: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ydij2_tV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/c3EiOXH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ydij2_tV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/c3EiOXH.png" alt="Guild - The free self-hosted team management solution"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Login Form:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7GBLojvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/uhutJJ8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7GBLojvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/uhutJJ8.png" alt="Guild login form"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;User Profile&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5SfwLKU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/8XHLh4E.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5SfwLKU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/8XHLh4E.png" alt="Guild User Profile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Team management:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zvxtLV8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MChYo3p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zvxtLV8Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/MChYo3p.png" alt="Guild Teams"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;User status dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--658Fy9zg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/dLBUvc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--658Fy9zg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/dLBUvc0.png" alt="User status dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#current-status" class="anchor"&gt;
  &lt;/a&gt;
  ‚úÖ Current Status
&lt;/h1&gt;

&lt;p&gt;We've taken the first steps in getting ready with the project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Domain name: &lt;a href="https://guild.so"&gt;https://guild.so&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Landing page&lt;/li&gt;
&lt;li&gt;Initial Laravel and Jetstream Setup&lt;/li&gt;
&lt;li&gt;Different Teams and roles (Developers, Managers, etc.)&lt;/li&gt;
&lt;li&gt;Registration and User Profile Management&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#things-to-do" class="anchor"&gt;
  &lt;/a&gt;
  ‚ùì Things To Do
&lt;/h1&gt;

&lt;p&gt;We've got the initial idea and setup done however there is still a lot to do!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CRUD for new tasks with validation&lt;/li&gt;
&lt;li&gt;Discord &amp;amp; Slack notifications for common actions (Add/Delete/Update Task, start/end shift and etc)&lt;/li&gt;
&lt;li&gt;Simple Time Tracking&lt;/li&gt;
&lt;li&gt;Badges for specific accomplishments (e.g. closed 10 tasks, worked for a total of 100 hours, etc.)&lt;/li&gt;
&lt;li&gt;Redesign Laravel Jetstream components&lt;/li&gt;
&lt;li&gt;Deploy to DO button&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#tools" class="anchor"&gt;
  &lt;/a&gt;
  üîß Tools
&lt;/h1&gt;

&lt;p&gt;The tools which we've used so far are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design Tool: &lt;a href="https://devdojo.com/tails"&gt;Tails&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Backend: &lt;a href="https://laravel.com"&gt;Laravel&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Scaffolding: &lt;a href="https://jetstream.laravel.com"&gt;Laravel Jetstream&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Frontend Stack: &lt;a href="https://tailwindcss.com"&gt;TailwindCSS&lt;/a&gt; &amp;amp; [Laravel Livewire]&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>dohackathon</category>
      <category>laravel</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>How I Easily Code For 8+ Hours Without Feeling Tired (My Productivity System)</title>
      <author>Nick Bull</author>
      <pubDate>Sat, 19 Dec 2020 12:15:59 +0000</pubDate>
      <link>https://dev.to/nickbulljs/how-i-easily-code-for-8-hours-without-feeling-tired-my-productivity-system-23i8</link>
      <guid>https://dev.to/nickbulljs/how-i-easily-code-for-8-hours-without-feeling-tired-my-productivity-system-23i8</guid>
      <description>&lt;p&gt;I've been coding wrong my whole life.&lt;/p&gt;

&lt;p&gt;I thought it was okay to just sit down at my desk, open my laptop, take a task from my to-do list, and code it until I felt tired.&lt;/p&gt;

&lt;p&gt;But in reality, this style of work always killed my productivity levels after 2-4 hours of coding. I felt so tired that I didn't want to do anything except different low energy tasks (&lt;em&gt;like code review&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Today I can code 8+ hours without feeling like crap after.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What has changed?&lt;/p&gt;

&lt;p&gt;My approach to work.&lt;/p&gt;

&lt;p&gt;After 62+ self-development books, dozens of articles and studies about productivity, and my trials and errors, I have created a productivity system that helps me to code, write, create, and live at my maximum capabilities without procrastination, tiredness, and brain fog.&lt;/p&gt;

&lt;p&gt;Here it is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-productivity-system" class="anchor"&gt;
  &lt;/a&gt;
  My Productivity System
&lt;/h2&gt;

&lt;p&gt;My productivity system stays on 3 main pillars:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Schedule.&lt;/li&gt;
&lt;li&gt;To-do for tomorrow.&lt;/li&gt;
&lt;li&gt;System 69 (!)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's look closer at each of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#schedule" class="anchor"&gt;
  &lt;/a&gt;
  Schedule
&lt;/h2&gt;

&lt;p&gt;Everything starts with a schedule. What, where, and when I do.&lt;/p&gt;

&lt;p&gt;My schedule looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3gf4lxc7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608378643183/3ZswRiq7N.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3gf4lxc7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608378643183/3ZswRiq7N.jpeg" alt="sheduled.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I‚Äôm using a whiteboard to constantly remind myself of what I should do at the exact moment.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I always neglected to create a schedule.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚ÄúI know what and when I should do!‚Äù&lt;/em&gt; I told myself.&lt;/p&gt;

&lt;p&gt;But in reality, I always forget to do or overdo my daily activities (&lt;em&gt;even with a habit to do them&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;For example, when I woke up at 7:00 in the morning I knew that I had 1 free hour before my work. In that hour I wanted to have time to do a morning ritual (eating, stretching, showering, breathing) and to read for 30 minutes. But many times I could have breakfast in the morning for an hour, forgetting to take the time to read. Even if I kept in mind that I have to read for 30 minutes every morning. I &lt;em&gt;overdone&lt;/em&gt; my activity (breakfast) and stole my time from another activity (reading).&lt;/p&gt;

&lt;p&gt;I have also noticed that without a schedule it takes a lot of time to decide what I should do next. I could finish the workout in the afternoon, take shower, sit at my desk, open laptop and then decide which task I should pick next within 10 minutes. If we count how much the same decisions I made during the day, 10 minutes becomes 60 minutes. &lt;strong&gt;One hour!&lt;/strong&gt; It‚Äôs a lot of time.&lt;/p&gt;

&lt;p&gt;The other thing is that in the process of deciding what I should do next, there is always an angel and a demon sitting on my shoulders and "helping" me decide whether I should work on the essential things to me or do some light work, or even take a break to relax. I often had to use willpower to force myself to do the "right" things without a schedule.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;‚ÄúIf you waste resources trying to decide when or where to work, you‚Äôll impede your capacity to do the work.‚Äù ‚Äì &lt;a href="https://www.theguardian.com/science/2013/oct/05/daily-rituals-creative-minds-mason-currey"&gt;Guardian&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I made the schedule, these problems disappeared.&lt;/p&gt;

&lt;p&gt;Now, I always have time to do what I have planned.&lt;/p&gt;

&lt;p&gt;I always know what I should do next.&lt;/p&gt;

&lt;p&gt;I don‚Äôt need to use willpower to force myself to do essential things.&lt;/p&gt;

&lt;p&gt;Schedule puts my decision-making process on autopilot.&lt;/p&gt;

&lt;p&gt;If you want to create your schedule I recommend using Google calendar for it, so you can easily edit or share your schedule with someone else. Also, I recommend having a schedule on some piece of paper or whiteboard, to always remind yourself of what, where, and when you should do.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todo-for-tomorrow" class="anchor"&gt;
  &lt;/a&gt;
  To-Do For Tomorrow
&lt;/h2&gt;

&lt;p&gt;If the schedule helps me decide what, where and when I should do, the to-do list helps me decide &lt;strong&gt;exactly&lt;/strong&gt; &lt;strong&gt;what&lt;/strong&gt; I should do next.&lt;/p&gt;

&lt;p&gt;I could spend the "perfectly planned" day, but not do what is essential to me.&lt;/p&gt;

&lt;p&gt;For example, when I opened my schedule and saw a ‚ÄúDeep Work‚Äù block from 08.00 to 09.30, I could do deep work, but it didn‚Äôt guarantee that I would be doing important things during it and not some light work.&lt;/p&gt;

&lt;p&gt;Our brain is always trying to spend less energy and will do everything to convince you not to waste energy.&lt;/p&gt;

&lt;p&gt;That's where the to-do list comes in.&lt;/p&gt;

&lt;p&gt;It helps me &lt;strong&gt;even more&lt;/strong&gt; to put the decision-making process on autopilot and spend less time and cognitive resources on it.&lt;/p&gt;

&lt;p&gt;It guarantees that I will do only essential things (&lt;em&gt;most of the time&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;My to-do list is simple, I use a plain paper notebook to make it and &lt;a href="https://www.notion.so/"&gt;Notion&lt;/a&gt; as a digital copy (&lt;em&gt;I use Notion for everything, but that's for another article&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e5d6d6_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608378601645/oaEOZMMy4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e5d6d6_d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608378601645/oaEOZMMy4.jpeg" alt="todo.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S2kyWdRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608378595485/nFdvJ9q3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S2kyWdRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1608378595485/nFdvJ9q3s.png" alt="to do 2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When I create my to-do list I create it in the evening for tomorrow day.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;When you plan your day in the morning, you are thinking about every task that needs to be done today. It is good when the task is clear and simple and you know what to do (like &lt;em&gt;‚Äúcode review last commit by John‚Äù&lt;/em&gt;). But when you don‚Äôt know what exactly needs to be done, it will take time to figure it out. Like when you know that you need to write an article, but don‚Äôt know about what. It will take time to research your ideas and choose the right topic to write about.&lt;/p&gt;

&lt;p&gt;And in addition to the fact that such tasks take time to research, there is a chance that you will fall into the trap of your thinking process (&lt;em&gt;when you start imagining results, details, processes, and other various things related to the task, and you spend 5, 10, 15, or even more minutes on it&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;The process of creating a to-do list in the morning wastes your productive morning time, your cognitive resources, and has a chance to distract you.&lt;/p&gt;

&lt;p&gt;That‚Äôs why I create a to-do list for tomorrow and not in the morning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#system-69" class="anchor"&gt;
  &lt;/a&gt;
  System 69
&lt;/h2&gt;

&lt;p&gt;When I started coding I did it like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open laptop.&lt;/li&gt;
&lt;li&gt;Open Code editor (&lt;em&gt;VSCode&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;Pick a task.&lt;/li&gt;
&lt;li&gt;Code until I feel tired.&lt;/li&gt;
&lt;li&gt;Take a break (&lt;em&gt;spending time on social media&lt;/em&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Looks normal?&lt;/p&gt;

&lt;p&gt;Yeah.&lt;/p&gt;

&lt;p&gt;Until I read about &lt;a href="https://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;Pomodoro&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Pomodoro Technique is a time management method when you break down work into intervals, traditionally 25 minutes in length, separated by short breaks. For example, 25-minute coding and a 5-minute break after. And divide the entire workday into such breaks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;25 minute coding.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;5 minute break.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;25 minute coding.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;5 minute break.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;25 minute coding.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;etc. until the end of the working day.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I tried it and it worked, but not as great as I imagined. I definitely became more productive, but for an additional hour. And I found the 25-minute work intervals are too short for me &lt;em&gt;(It took me 5-10 minutes to activate the &lt;a href="https://en.wikipedia.org/wiki/Flow_%28psychology%29"&gt;flow state&lt;/a&gt;, so I couldn‚Äôt perform a "deep work" for more than 15 minutes with such intervals).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So I went further.&lt;/p&gt;

&lt;p&gt;I found the 52 + 17 rule.&lt;/p&gt;

&lt;p&gt;What‚Äôs this?&lt;/p&gt;

&lt;p&gt;52-minute of work and a 17-minute break. Similar to the Pomodoro Technique.&lt;/p&gt;

&lt;p&gt;I tested it and it worked better for me than 25+5 intervals. Now I could work productively for two more hours, but I still felt like crap after a workday.&lt;/p&gt;

&lt;p&gt;So I didn‚Äôt stop on the 52 + 17 rule.&lt;/p&gt;

&lt;p&gt;I started researching more about productivity and motivation and learned about effective breaks.&lt;/p&gt;

&lt;p&gt;When most people hear the word ‚Äúbreak‚Äù the first association is ‚Äúdoing anything except work.‚Äù Like scrolling Instagram feed, chatting with friends, or watching Youtube.&lt;/p&gt;

&lt;p&gt;Technically these are all breaks, but not effective ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The main sign of an effective break is that it gives you energy, not takes it away.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Example of my effective breaks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Stretching.&lt;/li&gt;
&lt;li&gt;  Hydrating.&lt;/li&gt;
&lt;li&gt;  Light workout.&lt;/li&gt;
&lt;li&gt;  Walking (&lt;em&gt;without the headphones&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;  Breathing (&lt;em&gt;box breathing, Wim Hof method&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After I learned about effective breaks, my workday became almost perfect - 52 minutes of work (&lt;em&gt;45 minutes often in a flow state, because I need 10 minutes to reach it&lt;/em&gt;) and 17 minutes of an effective break that gives me energy.&lt;/p&gt;

&lt;p&gt;Everything worked perfectly, and I have to stop there‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But I went further.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was obsessed with the idea to make every hour of my work the most productive hour on earth.&lt;/p&gt;

&lt;p&gt;And I think I did it.&lt;/p&gt;

&lt;p&gt;One thing that kept me from being in a flow state all the time was distraction.&lt;/p&gt;

&lt;p&gt;For years I didn't pay attention to it. To all the notifications that pop-up on my phone, the noise of people around me, the hundreds of open tabs and windows on my laptop, all those distractions.&lt;/p&gt;

&lt;p&gt;I set a timer for 52 minutes, started to work, got in a flow state, and then BAM! A new notification pops up. And I like, &lt;em&gt;‚ÄúWhat‚Äôs in there?‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The flow state is gone.&lt;/p&gt;

&lt;p&gt;Focus on the task is gone.&lt;/p&gt;

&lt;p&gt;Productivity is gone.&lt;/p&gt;

&lt;p&gt;One tiny notification instantly ruined my productivity.&lt;/p&gt;

&lt;p&gt;I never paid attention to it until I started to deep dive into the personal development field (&lt;em&gt;I wish I started earlier&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Now, when I work I turn off all notifications, tell people to not bother me, put on my headphones (&lt;em&gt;if I work in a noisy environment&lt;/em&gt;), close all the browser tabs that are not related to the task, and &lt;strong&gt;do everything I can to avoid distractions during my working hours.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So far so good, my system seemed perfect.&lt;/p&gt;

&lt;p&gt;But can we go further?&lt;/p&gt;

&lt;p&gt;Of course.&lt;/p&gt;

&lt;p&gt;The last piece of the puzzle is &lt;strong&gt;NO multitasking.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I hear today that someone can do multitasking, I smile.&lt;/p&gt;

&lt;p&gt;Multitasking is &lt;a href="https://www.theladders.com/career-advice/why-multitasking-is-a-myth-backed-by-science"&gt;not working&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://health.clevelandclinic.org/science-clear-multitasking-doesnt-work/"&gt;It‚Äôs a myth.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is only &lt;a href="https://www.researchgate.net/publication/45629771_Supertaskers_Profiles_in_extraordinary_multitasking_ability"&gt;one study&lt;/a&gt; that shows that 2.5% of subjects can do multitasking with the same efficiency levels as performing one task at a time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Other 97.5% are not.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So when I pick some task and start doing it, I focus only on it.&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;One task per time. *&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Not two.&lt;/p&gt;

&lt;p&gt;Not three.&lt;/p&gt;

&lt;p&gt;Only one.&lt;/p&gt;

&lt;p&gt;This is a rule I follow during my working hours.&lt;/p&gt;

&lt;p&gt;Always.&lt;/p&gt;

&lt;p&gt;Okay, now we have all the pieces of System 69.&lt;/p&gt;

&lt;p&gt;Let's glue them together and see what we get:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;52-minute of work.&lt;/li&gt;
&lt;li&gt;17-minute of an effective break.&lt;/li&gt;
&lt;li&gt;Remove all distractions.&lt;/li&gt;
&lt;li&gt;Focus on one task at a time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Awesome!&lt;/p&gt;

&lt;p&gt;This is my System 69.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-the-end" class="anchor"&gt;
  &lt;/a&gt;
  In the end‚Ä¶
&lt;/h2&gt;

&lt;p&gt;These are the three pillars of my productivity system.&lt;/p&gt;

&lt;p&gt;Today I successfully use this system to operate as a content creator. Every day I write in &lt;a href="https://blog.nickbulljs.com/"&gt;my blog&lt;/a&gt;, build the &lt;a href="https://javascriptcoursethatworks.com/"&gt;most practical JavaScript course&lt;/a&gt; ever, create &lt;a href="https://twitter.com/nickbulljs"&gt;social media content&lt;/a&gt;, write a book on &lt;a href="https://nailthetechnicalinterview.com/"&gt;how to Nail The Technical Interview and Land a High-Paying Job&lt;/a&gt;, and do many more tasks easily without effort and tiredness.&lt;/p&gt;

&lt;p&gt;Literally, you can use my productivity system to successfully do any kind of job, not just coding. &lt;em&gt;But use it wisely.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Have a great one!&lt;/p&gt;

&lt;p&gt;‚Äì Nick Bull&lt;/p&gt;

&lt;p&gt;And also &lt;em&gt;before I forget&lt;/em&gt;, every week I send out a "3‚Äì2‚Äì1" newsletter with 3 tech news, 2 articles, and 1 piece of advice for you.&lt;/p&gt;

&lt;p&gt;üî• &lt;a href="https://nickbulljs.com/"&gt;Get the latest Frontend news here.&lt;/a&gt; üî•&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Introduction to Event delegation in JavaScript.</title>
      <author>Abhishek Jain</author>
      <pubDate>Sat, 19 Dec 2020 11:14:12 +0000</pubDate>
      <link>https://dev.to/abhishekjain35/introduction-to-event-delegation-in-javascript-3p7p</link>
      <guid>https://dev.to/abhishekjain35/introduction-to-event-delegation-in-javascript-3p7p</guid>
      <description>&lt;p&gt;Hello devs, let's understand event delegation.üòÅ&lt;/p&gt;

&lt;p&gt;To understand event delegation, firstly, we'll need to get a hold of how the event listeners work.&lt;/p&gt;

&lt;p&gt;Look at the code below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sampleDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sampleDiv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;sampleDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sample Div clicked&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Woohooo, We've added an event listener.&lt;br&gt;
Things to note in the above code - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Browser always provides the event object as a parameter for the callback function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Event object provides many properties, But we're going to focus on the &lt;code&gt;event.target&lt;/code&gt; and &lt;code&gt;event.currentTarget&lt;/code&gt; properties.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#lets-assume-a-situation" class="anchor"&gt;
  &lt;/a&gt;
  Let's assume a situation
&lt;/h4&gt;

&lt;p&gt;Suppose a simple todo app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//HTML&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sampleDiv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AddBtn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Add&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="c1"&gt;//NOTE: some basic CSS is applied on these elements.&lt;/span&gt;

&lt;span class="c1"&gt;//JavaScript&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sampleDiv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sampleDiv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;AddButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;AddBtn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;AddButton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;todo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todoToRemove&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Click me to remove&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;sampleDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;todo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And the code above does this - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ZSifZ5G2qOjiOrwwuj/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ZSifZ5G2qOjiOrwwuj/giphy.gif" alt="Todo gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We want to click on the &lt;code&gt;todo(the paragraph)&lt;/code&gt; to remove the todo. so, I think that we can attach event listeners to each todo and remove todo when it is clicked like this-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Todos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByClassName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;todoToRemove&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;But, It doesn't work.&lt;br&gt;
Since we are adding the todo dynamically through our javascript, the above code runs firstly, but there are no todos so that listeners are attached to any of them.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#so-how-can-we-fix-this" class="anchor"&gt;
  &lt;/a&gt;
  So, How can we fix this?
&lt;/h3&gt;

&lt;p&gt;Here comes the concept of event delegation. Theoretically, what happens in event delegation is we attach the event listener to a parent element. We check for the &lt;code&gt;event.target&lt;/code&gt; property, which results in the actual element on which the event has triggered.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So, the key takeaway is &lt;code&gt;event.currentTarget&lt;/code&gt; is the actual element on which the event listener is attached. And, &lt;code&gt;event.target&lt;/code&gt; is the element on which the actual event happened.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#fixing-the-problem-with-event-delegation" class="anchor"&gt;
  &lt;/a&gt;
  Fixing the problem with event delegation
&lt;/h3&gt;

&lt;p&gt;We can fix the todo removing problem with this simple code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;sampleDiv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;//NOTE: the remove function have less support on legacy browsers. so, you can also use this line inside if statement - &lt;/span&gt;
&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentTarget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And this works perfectly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/rSw1ENoaCJgxLNoerE/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/rSw1ENoaCJgxLNoerE/giphy.gif" alt="Working Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We added an event listener to the parent and checked if &lt;code&gt;event.target&lt;/code&gt; is a &lt;code&gt;p&lt;/code&gt; tag. If true, then we call the remove function on it to remove it from the dom tree.&lt;/p&gt;

&lt;p&gt;This whole concept of adding an event listener to a parent is called event delegation.&lt;/p&gt;

&lt;p&gt;That's it from my side. Till then üëãüëã&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/7DzlajZNY5D0I/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/7DzlajZNY5D0I/giphy.gif" alt="BYE BYE"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>5 Podcasts every Dev must listen</title>
      <author>Rishabh Singh</author>
      <pubDate>Sat, 19 Dec 2020 08:50:41 +0000</pubDate>
      <link>https://dev.to/mindninjax/top-5-podcasts-every-dev-should-start-listening-1cmd</link>
      <guid>https://dev.to/mindninjax/top-5-podcasts-every-dev-should-start-listening-1cmd</guid>
      <description>&lt;p&gt;As a Dev, it's very important for us to stay updated with the latest and greatest in the industry. One of the easiest &amp;amp;  fun ways to do that is listening to Podcasts. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--njJhFTbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7jx6pks25uwbu20tcs20.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--njJhFTbZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/7jx6pks25uwbu20tcs20.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#here-is-a-list-of-the-amazing-podcast-you-should-start-listening-as-a-dev-in-2021" class="anchor"&gt;
  &lt;/a&gt;
  Here is a list of the amazing podcast you should start listening as a DEV in 2021:
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#talks-at-google" class="anchor"&gt;
  &lt;/a&gt;
  Talks at Google
&lt;/h2&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HBXN8_o---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hrv656fqt4dx8ms1pnvk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HBXN8_o---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hrv656fqt4dx8ms1pnvk.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are a fan of TED Talks then this one's for you. Talks at Google can be said as Google's own version of TED Talks. Talks at Google brings the world‚Äôs most influential thinkers, creators, makers, and doers all to one place. This Bi-weekly Podcast brings you new Episode every Tuesdays &amp;amp; Fridays. This podcast covers a variety of topics with impact and change in mind by some of the most influential people on our planet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Available on &lt;a href="https://goo.gl/Eidbk4"&gt;Spotify&lt;/a&gt;, &lt;a href="https://www.youtube.com/redirect?redir_token=QUFFLUhqa2NGcDdqQzVsLTN4OEh3UXRWa24wbFdKUDVIZ3xBQ3Jtc0ttTnFla3BlOXBtMFRHZjBwdF9rcXFkMVRPTW12Nk45aFRFZ2plMEI2cUhTcUZQYVBLZU9zXzdHQUlPQVFPT1BWTUNTblVVSm1HVFVVTzg3SkZELVV4MHRJN1FwRjF5eFNLUUpKdlpjOWZpSGdxekhjdw%3D%3D&amp;amp;v=RmrWdl35eKo&amp;amp;q=http%3A%2F%2Fg.co%2FTalksAtGoogle%2FiTunes&amp;amp;event=video_description"&gt;Apple Podcasts&lt;/a&gt; &amp;amp; &lt;a href="https://www.youtube.com/c/talksatgoogle"&gt;YouTube&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#darknet-diaries" class="anchor"&gt;
  &lt;/a&gt;
  Darknet Diaries
&lt;/h2&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Alr5govq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://darknetdiaries.com/imgs/darknet-diaries-sm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Alr5govq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://darknetdiaries.com/imgs/darknet-diaries-sm.jpg" alt="https://darknetdiaries.com/imgs/darknet-diaries-sm.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Darknet Diaries is all about true creepy dark &amp;amp; twisted things that happen on the darknet. Scary enough to give you nightmares. Combined with the immersive storytelling of Jack Rhysider you will instantly fell in love with this Podcast as you explore the secrets and dangers of being on the dark side of the internet. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Available on &lt;a href="https://open.spotify.com/show/4XPl3uEEL9hvqMkoZrzbx5?si=eKrU1IJcQGGT5IePPHCIrQ"&gt;Spotify&lt;/a&gt;, &lt;a href="https://apple.co/DarknetDiaries"&gt;Apple Podcast&lt;/a&gt; &amp;amp; &lt;a href="https://podcasts.google.com/?feed=aHR0cHM6Ly9mZWVkcy5tZWdhcGhvbmUuZm0vZGFya25ldGRpYXJpZXM%3D"&gt;Google Podcasts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#command-line-heroes" class="anchor"&gt;
  &lt;/a&gt;
  Command Line Heroes
&lt;/h2&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rVzgjUou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/riuk9babryyx0s46xkjf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVzgjUou--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/riuk9babryyx0s46xkjf.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Command Line Heroes Podcast brings us the stories of developers, programmers, hackers and tech enthusiasts who are revolutionizing our present and shaping our future. Overall this is a must-listen podcast produced Red Hat organization.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Available on &lt;a href="https://open.spotify.com/show/4Jgtgr4mHXNDyLldHkfEMz"&gt;Spotify&lt;/a&gt;, &lt;a href="https://geo.itunes.apple.com/podcast/us/id1319947289?mt=2&amp;amp;at=1010lbVy&amp;amp;ct=redhatclh_website"&gt;Apple Podcasts&lt;/a&gt; &amp;amp; &lt;a href="https://www.google.com/podcasts?feed=aHR0cHM6Ly9mZWVkcy5wYWNpZmljLWNvbnRlbnQuY29tL2NvbW1hbmRsaW5laGVyb2Vz"&gt;Google Podcasts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#gradient-dissent" class="anchor"&gt;
  &lt;/a&gt;
  Gradient Dissent
&lt;/h2&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WFgK_9lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yqofayg9ebj3tgxvat9h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WFgK_9lq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/yqofayg9ebj3tgxvat9h.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are a machine learning enthusiast then you are going to love &lt;strong&gt;Gradient Dissent&lt;/strong&gt; Podcast which, as the name suggests, is all about machine learning. Tune into this Podcast to see how experts from all around the world are thinking and using the power of Machine Learning and similar technologies to solve real-world problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Available on &lt;a href="http://media.blubrry.com/gradient_dissent/open.spotify.com/show/7o9r3fFig3MhTJwehXDbXm"&gt;Spotify&lt;/a&gt;, &lt;a href="http://media.blubrry.com/gradient_dissent/podcasts.apple.com/us/podcast/gradient-dissent-weights-biases/id1504567418"&gt;Apple Podcasts&lt;/a&gt;, &lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5zb3VuZGNsb3VkLmNvbS91c2Vycy9zb3VuZGNsb3VkOnVzZXJzOjc5MjEzOTQyOS9zb3VuZHMucnNz"&gt;Google Podcasts&lt;/a&gt; &amp;amp; &lt;a href="https://www.youtube.com/playlist?list=PLD80i8An1OEEb1jP0sjEyiLG8ULRXFob_"&gt;YouTube&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#soft-skills-engineering" class="anchor"&gt;
  &lt;/a&gt;
  Soft Skills Engineering
&lt;/h2&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F8rr9ihG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8tncndx68gjlu9g8pxjd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F8rr9ihG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8tncndx68gjlu9g8pxjd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It takes more than great code to be a great engineer. Last but not the least we have, &lt;strong&gt;Soft Skills Engineering&lt;/strong&gt; Podcast which is a weekly advice podcast for software developers about the non-technical stuff that goes into being a great software developer. It's also one of the highest-rated podcasts by Developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Available on &lt;a href="https://open.spotify.com/show/59I1XnvAB9fQzSj9SIKCoI?si=9dasZvgFRDyrIcU9yPCgkQ"&gt;Spotify&lt;/a&gt;, &lt;a href="https://itunes.apple.com/us/podcast/soft-skills-engineering/id1091341048?mt=2"&gt;Apple Podcasts&lt;/a&gt; &amp;amp; &lt;a href="https://www.google.com/podcasts?feed=aHR0cHM6Ly9zb2Z0c2tpbGxzLmF1ZGlvL2ZlZWQueG1s"&gt;Google Podcasts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus" class="anchor"&gt;
  &lt;/a&gt;
  BONUS:
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#here-are-2-of-my-favourite-podcast-as-a-bonus-for-you" class="anchor"&gt;
  &lt;/a&gt;
  Here are 2 of my favourite Podcast as a Bonus for you:
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#dev-discuss" class="anchor"&gt;
  &lt;/a&gt;
  Dev Discuss
&lt;/h2&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zDWzA_vl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/64oj6n56aq3cl56bld1l.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zDWzA_vl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/64oj6n56aq3cl56bld1l.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Officially produced by &lt;strong&gt;The DEV Team&lt;/strong&gt;, &lt;strong&gt;DevDiscuss&lt;/strong&gt; is one of the best Podcasts on the web. This weekly Podcast brings in amazing developers around the globe as they answer and discuss the hottest questions and topics, trending on the internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Available on &lt;a href="https://open.spotify.com/show/4Jae2mPUqx0XnGychucsE4?"&gt;Spotify&lt;/a&gt;, &lt;a href="https://podcasts.apple.com/us/podcast/devdiscuss/id1513053883"&gt;Apple Podcasts&lt;/a&gt; &amp;amp; &lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s?ep=14"&gt;Google Podcasts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dev-news" class="anchor"&gt;
  &lt;/a&gt;
  Dev News
&lt;/h2&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0qHxBsxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.listennotes.com/podcasts/devnews-dev-FwglQdEHyvR-fH8hvsClkWp.1400x1400.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0qHxBsxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.listennotes.com/podcasts/devnews-dev-FwglQdEHyvR-fH8hvsClkWp.1400x1400.jpg" alt="https://cdn-images-1.listennotes.com/podcasts/devnews-dev-FwglQdEHyvR-fH8hvsClkWp.1400x1400.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another great Podcast from The DEV Team, Dev News is a weekly Podcast which brings you the latest and greatest tech news from all around the world. Hosted by Developers for developers, this Podcast is gonna be a great addition to your weekly playlist.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Available on &lt;a href="https://open.spotify.com/episode/2hMB006ZcD3E8DSDRQZUev"&gt;Spotify&lt;/a&gt; &amp;amp; &lt;a href="https://podcasts.apple.com/us/podcast/devnews/id1525581923"&gt;Apple Podcasts&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-note" class="anchor"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;




&lt;p&gt;Do you know any other great Podcasts for Devs, then please feel free to share it in the discussions/comments. Thank you for reading my Blog Post.&lt;/p&gt;

</description>
      <category>podcast</category>
      <category>watercooler</category>
      <category>discuss</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Tailwind CSS full-screen video header</title>
      <author>Chris Bongers</author>
      <pubDate>Sat, 19 Dec 2020 03:41:15 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/tailwind-css-full-screen-video-header-5539</link>
      <guid>https://dev.to/dailydevtips1/tailwind-css-full-screen-video-header-5539</guid>
      <description>&lt;p&gt;Call me old-school, but I love to see video headers. Hardly do I have a use for them on my personal website, but I love to implement a video header for clients with stunning videos.&lt;/p&gt;

&lt;p&gt;Today I wanted to see how easy this could be done with no custom CSS. We are only going to use the classes &lt;a href="https://daily-dev-tips.com/posts/my-first-experiences-with-tailwind-css/"&gt;Tailwind CSS&lt;/a&gt; gives us.&lt;/p&gt;

&lt;p&gt;The end result is this stunning full-screen video header using only Tailwind CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PEHtb52j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607940108457/esNeCkquB.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PEHtb52j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1607940108457/esNeCkquB.gif" alt="video-header.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-fullscreen-video-header" class="anchor"&gt;
  &lt;/a&gt;
  Tailwind CSS full-screen video header
&lt;/h2&gt;

&lt;p&gt;To create this header, we are leveraging yesterday's &lt;a href="https://daily-dev-tips.com/posts/tailwind-css-parallax-effect/"&gt;Tailwind parallax header&lt;/a&gt;. It has a very similar setup, only now we don't make it parallax scroll.&lt;/p&gt;

&lt;p&gt;The basic &lt;code&gt;HTML&lt;/code&gt; structure will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    Welcome to my site!
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;autoplay&lt;/span&gt; &lt;span class="na"&gt;loop&lt;/span&gt; &lt;span class="na"&gt;muted&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"video.mp4"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"video/mp4"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    Your browser does not support the video tag.
  &lt;span class="nt"&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can see we used a header tag. In there, we have a div that will hold a block that will sit on top of the video.&lt;br&gt;
Then we have a video tag, which can hold one or multiple sources.&lt;/p&gt;

&lt;p&gt;I will now write down the end &lt;code&gt;HTML&lt;/code&gt; structure and then go through the importance of each class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative flex items-center justify-center h-screen mb-12 overflow-hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative z-30 p-5 text-2xl text-white bg-purple-300 bg-opacity-50 rounded-xl"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Welcome to my site!
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt;
    &lt;span class="na"&gt;autoplay&lt;/span&gt;
    &lt;span class="na"&gt;loop&lt;/span&gt;
    &lt;span class="na"&gt;muted&lt;/span&gt;
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute z-10 w-auto min-w-full min-h-full max-w-none"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;
      &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://assets.mixkit.co/videos/preview/mixkit-set-of-plateaus-seen-from-the-heights-in-a-sunset-26070-large.mp4"&lt;/span&gt;
      &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"video/mp4"&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    Your browser does not support the video tag.
  &lt;span class="nt"&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The classes used for the header:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;relative&lt;/code&gt;: Makes the header relative. We will make the video absolute to position it.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;flex&lt;/code&gt;: Adds a display flex so we can align the text block inside&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;items-center&lt;/code&gt;: Aligns the text-block vertically&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;justify-center&lt;/code&gt;: Aligns the text-block horizontally&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;h-screen&lt;/code&gt;: This adds a 100vh height, so it's 100% of the viewport.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mb-12&lt;/code&gt;: We add quite a big margin-bottom with this (3rem)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;overflow-hidden&lt;/code&gt;: The video will be slightly bigger than our header, so we don't want to show the overflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then for our overlay text block, we use the following classes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;relative&lt;/code&gt;: We need to make this relative, to place it on top of the video&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;z-30&lt;/code&gt;: This needs to be higher than the z-index on the video&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;p-5&lt;/code&gt;: Adds equal padding on each side (1.25rem)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text-2xl&lt;/code&gt;: Makes the text nice and big (1.5rem)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;text-white&lt;/code&gt;: Make the text white&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bg-purple-300&lt;/code&gt;: A nice cool purple color&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;bg-opacity-50&lt;/code&gt;: This one makes sure the background has an opacity of 50%.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rounded-xl&lt;/code&gt;: Adds the nice rounder borders&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And last but not least, we can add the classes for our video element:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;absolute&lt;/code&gt;: The video is an absolute positioned element&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;z-10&lt;/code&gt;: We give it a lower z-index than our text-block&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;w-auto&lt;/code&gt;: The width can be auto, so it will adjust&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;min-w-full&lt;/code&gt;: We need to make the min-width 100%&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;min-h-full&lt;/code&gt;: The same goes for the min-height&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;max-w-none&lt;/code&gt;: Unset the default max-width&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this, we have all our classes in place. This will give us a very nice full-screen video header using only Tailwind CSS classes.&lt;/p&gt;

&lt;p&gt;The end result can be found on this Codepen.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/dypNrog?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect" class="anchor"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
    </item>
    <item>
      <title>Doing a frontend technical interview with¬†ReactJS</title>
      <author>Kristijan Pajtasev</author>
      <pubDate>Sat, 19 Dec 2020 00:47:30 +0000</pubDate>
      <link>https://dev.to/chriss/doing-a-frontend-technical-interview-with-reactjs-2p0</link>
      <guid>https://dev.to/chriss/doing-a-frontend-technical-interview-with-reactjs-2p0</guid>
      <description>&lt;p&gt;There are many ways to conduct a technical interview, and they depend from company to company. You might get whiteboard designing of architecture system, writing an algorithm, or some coding challenge. After working with multiple companies and going through many interviews from both sides, I prefer coding ones. More specifically, making something like a to-do application. By doing it, in an hour, I can assess if a person is junior, mid-level, senior, or architect. In this text, I cover how I do it and what knowledge I expect for which experience level.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-to%C2%A0build" class="anchor"&gt;
  &lt;/a&gt;
  Application to¬†build
&lt;/h2&gt;

&lt;p&gt;I prefer a to-do application. The model for an item of it is straightforward. All you need is a text, a unique identifier, and some flag indicating its status. All to-do applications display the list of all items, enable input of a new item, toggle the item's status, and delete them. I don't expect to spend more than 45 minutes up to an hour. That is not a long time, so I don't expect candidates to do everything, just enough to show how they think and what they know.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup" class="anchor"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#ide" class="anchor"&gt;
  &lt;/a&gt;
  IDE
&lt;/h3&gt;

&lt;p&gt;There are many ways you can conduct this kind of technical interview, but I like &lt;a href="https://codesandbox.io/"&gt;codesandbox&lt;/a&gt;. There you can create an initial React application, and you can easily install other npm packages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data" class="anchor"&gt;
  &lt;/a&gt;
  Data
&lt;/h3&gt;

&lt;p&gt;I provide candidates with initial data. It is just a JSON file with few items located in the public folder. In React, every file located in that folder is available, and this one you can request by making a get request to /todo.json.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#google" class="anchor"&gt;
  &lt;/a&gt;
  Google
&lt;/h3&gt;

&lt;p&gt;I am okay with googling for documentation, and I make it clear at the beginning of the interview. And this is also an indicator of candidate experience level. If the candidate checks documentation for some API, that is fine. But if the candidate googles everything, there is probably a significant lack of experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview" class="anchor"&gt;
  &lt;/a&gt;
  Interview
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#task-1-load-data-and-display" class="anchor"&gt;
  &lt;/a&gt;
  Task 1: Load data and display
&lt;/h3&gt;

&lt;p&gt;I do give a walkthrough of all the setup, where data is, how it is available, and the end goal of the application. As a first task, I request to display all the items from my data file. In this step, I expect candidates to load data using fetch API in the effect hook. After they do this, they should store them in the state and display them in a list. Often, I hear from candidates they want to use some third party request library like Axios and are free to do so. Another variation is also how they are displaying it. Sometimes it is a list of divs, and sometimes, it is an HTML list element. I prefer an HTML list, but any other solution can be acceptable as long as the candidate explains. It is an excellent opportunity for discussion.&lt;/p&gt;

&lt;p&gt;Senior vs. Junior&lt;/p&gt;

&lt;p&gt;What separates senior and junior is looking ahead. Often less experienced developers set incorrect initial state data. They don't check if data already exists before rendering, and they do everything in a single component. Sometimes, senior developers can also make everything in one component, but what they do is they are evident in explaining what and why they are doing. In this case, they would say it is all in a single component for the sake of simplicity and that they are intending to split it once they have the display working. They have an approach to first make it work, then improve it.&lt;/p&gt;

&lt;p&gt;Another thing in this task that separates junior and senior developers is fetching data. The experienced developer does it every day and should not have a problem working with fetch API and asynchronous code. A less experienced developer might struggle with it a bit. Struggling too much, or not being able to do it at all, might be a deal-breaker.&lt;/p&gt;

&lt;p&gt;This task gives a lot of side questions opportunities. One of them is a key prop. In React, when you are displaying items in a loop, they need to have a key prop. Candidates with less experience won't pass it. Pointing at this error gives a great indicator of how much experience with React do they have, and it is an excellent opportunity to ask what it does. In this section, other questions that you might want to ask are about hooks and lifestyle methods, the difference between HTML lists, and the components' organization.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task-2-styling" class="anchor"&gt;
  &lt;/a&gt;
  Task 2: Styling
&lt;/h3&gt;

&lt;p&gt;There are many ways to do styling. There are CSS, LESS, SASS, bootstrap, and many other solutions. But I think that you need to know CSS. At this stage, I do not expect anything overly complicated. But I would ask to play around with margins and paddings, to remove list bulleting and maybe so some text styling. Junior might struggle because they are used to simple stuff or using a third-party library. But senior developer should be able to do it without any problem. It is also a perfect moment to ask for some comparison of different solutions and when to use which. Things like the difference between padding and margin.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-updating-status-or-adding-a-new-item" class="anchor"&gt;
  &lt;/a&gt;
  Step 3: Updating status or adding a new item
&lt;/h3&gt;

&lt;p&gt;If a candidate got to this part in under 30 minutes, it already does indicate good knowledge. Another task is to test more of their forward-thinking. The file is read-only, and they obviously can't update it. But they can work with the state. Here you can test the updating state in a parent component. It does show how deep is their understanding of components lifecycle‚Ää-‚Ääupdating of status especially.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-questions" class="anchor"&gt;
  &lt;/a&gt;
  Step 4: Questions
&lt;/h3&gt;

&lt;p&gt;After the coding part, it is always good to leave 5‚Äì10 minutes for theoretical questions. Juniors do get more straightforward questions, focused on their experience: tasks they had, and details on how they solved them. I like to do more comprehensive solutions for seniors, and I expect them to have questions as part of their answers. To consider requirements.&lt;/p&gt;




&lt;p&gt;For more, you can follow me on &lt;a href="https://twitter.com/hi_iam_chris_"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/kpajtasev/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/kristijan-pajtasev/"&gt;GitHub&lt;/a&gt;, or &lt;a href="https://www.instagram.com/hi_iam_chris_/"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>career</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>JS Objects, Prototypes, and Classes Simplified</title>
      <author>Waseem Mansour</author>
      <pubDate>Sat, 19 Dec 2020 00:22:13 +0000</pubDate>
      <link>https://dev.to/waseemmansour/js-objects-prototypes-and-classes-simplified-4poa</link>
      <guid>https://dev.to/waseemmansour/js-objects-prototypes-and-classes-simplified-4poa</guid>
      <description>&lt;p&gt;In this series, you will know what Objects are, how to create and use them, understand Prototypes and Inheritance, and finally working with Classes.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#objects" class="anchor"&gt;
  &lt;/a&gt;
  Objects
&lt;/h1&gt;

&lt;p&gt;Let's begin with an intro about objects from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects"&gt;MDN Docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JavaScript is designed on a simple object-based paradigm. An object is a collection of properties, and a property is an association between a name (or key) and a value. A property's value can be a function, in which case the property is known as a method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A car is a simple example of an object, it has properties like brand name, model, color, condition, and methods like move forward, move backward, etc.&lt;br&gt;
All of these properties are what define car characteristics as an object.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-objects" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creating Objects&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Objects can be created in different ways using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Object literal.&lt;/li&gt;
&lt;li&gt;Constructor function.&lt;/li&gt;
&lt;li&gt;Class&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#object-literal" class="anchor"&gt;
  &lt;/a&gt;
  Object Literal
&lt;/h3&gt;

&lt;p&gt;Simply declare a variable and assign its value to {}, and between these curly braces we add the properties in a key value pairs where key must be a string and value can be of any type e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Waseem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mansour&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isMarried&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now you can access any of the object's properties by its key name, using Dot Notation or Bracket Notation, in some cases with bracket notation only. Let's see how&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Dot Notation: &lt;/span&gt;
&lt;span class="c1"&gt;// Object name followed by DOT followed by property name.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; Waseem&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; Waseem Mansour&lt;/span&gt;

&lt;span class="c1"&gt;// Bracket Notation: &lt;/span&gt;
&lt;span class="c1"&gt;// Object name followed by [] and property name passed between&lt;/span&gt;
&lt;span class="c1"&gt;// brackets wrapped with single or double quotes&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; Waseem &lt;/span&gt;

&lt;span class="c1"&gt;// We can use a variable that holds value of property name&lt;/span&gt;
&lt;span class="c1"&gt;// Only Bracket notation valid when passing variables&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userAge&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;userAge&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 36 &lt;/span&gt;

&lt;span class="c1"&gt;// Property name string that includes space, can't be accessed&lt;/span&gt;
&lt;span class="c1"&gt;// using Dot notation, so we use Bracket notation instead.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;brand&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Throw Error =&amp;gt; Uncaught SyntaxError&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;brand name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; BMW&lt;/span&gt;

&lt;span class="c1"&gt;// Accessing nested properties&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;persons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; Alexandria&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;person&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;address&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; Alexandria&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Due to the dynamic nature of JavaScript, we can add properties to object after creation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;movieStar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tom Hanks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;movieStar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;movieStar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now let's assume we have another person e.g. Sara, and we will create another object to hold its information as we did before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;personTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sara&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Badr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;isMarried&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You must have noticed that there's a repetition in both object's structure, and we only have two objects, what if we have 50 or maybe 1000 person objects more to be created. There's must be a way to optimize our code, and apply &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;DRY principle&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#constructor-functions" class="anchor"&gt;
  &lt;/a&gt;
  Constructor Functions
&lt;/h3&gt;

&lt;p&gt;The constructor Function's syntax is like any regular function, but with tiny differences, let's take a look at how to make a constructor function to help us create Person Objects that shares the same properties and methods:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1- Function name convention is to Capitalize first letter&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// properties to be assigned here. will leave it empty for now&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 2- Function execution must be preceded by "new" keyword&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;waseem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// What Happens under the hood:&lt;/span&gt;
&lt;span class="c1"&gt;// - "new" creates an empty object {}&lt;/span&gt;
&lt;span class="c1"&gt;// - "this" generated for us from function execution context&lt;/span&gt;
&lt;span class="c1"&gt;//   changed what it points to, to the new empty object created.&lt;/span&gt;
&lt;span class="c1"&gt;// - This function should not have a return statement&lt;/span&gt;
&lt;span class="c1"&gt;//   because it implicitly returns that object created&lt;/span&gt;
&lt;span class="c1"&gt;//   with all properties it may be attached to in function body.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;waseem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; Person {}&lt;/span&gt;

&lt;span class="c1"&gt;// Let's create the Person object properly now.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isMarried&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isMarried&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isMarried&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create our person objects using Person constructor function&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;waseem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Waseem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mansour&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sara&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sara&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Badr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;waseem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//=&amp;gt; Person¬†{firstName: "Waseem", lastName: "Mansour",&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 36, isMarried: true}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sara&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//=&amp;gt; Person¬†{firstName: "Sara", lastName: "Badr",&lt;/span&gt;
&lt;span class="c1"&gt;//   age: 22, isMarried: false}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;You may have noticed that I didn't add the fullName method to the Person constructor function, this was on purpose, I'll explain why in my next post of this series.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hopefully, you should have learned a lot about Objects so far.&lt;br&gt;
This is my first post on DEV.to, hope you found it informative and to the point.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>See how much you coded in the past year with git!</title>
      <author>Austin Blade</author>
      <pubDate>Fri, 18 Dec 2020 23:14:01 +0000</pubDate>
      <link>https://dev.to/austinblade/see-how-much-you-coded-in-the-past-year-with-git-85l</link>
      <guid>https://dev.to/austinblade/see-how-much-you-coded-in-the-past-year-with-git-85l</guid>
      <description>&lt;p&gt;2020 is almost over. (INSERT JOKE ABOUT HOW CRAPPY 2020 WAS FOR MOST PEOPLE HERE). Regardless of the year, I like to give myself an "annual review" every year. Part of that review is to see how much I coded in the past year. Not only is this just fun, but it could also give you some weight in your argument for a promotion or pay raise at your next review. ü§ë&lt;/p&gt;

&lt;p&gt;If you've used GitHub, you've probably seen their contribution calendar that looks something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8OaISAyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h12np12sglzok815vno9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8OaISAyl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/h12np12sglzok815vno9.png" alt="GitHub Contributions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's fine and dandy, but what if you aren't using GitHub? What if you want more info that could compare your performance to a team? All that and more will be discussed right after this quick commercial break!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PSqSJ87j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/jPgEkqIWTmYLK/giphy.gif%3Fcid%3Decf05e47cec969c5ef960d7a6ef68208ed8c5459d191e612%26rid%3Dgiphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PSqSJ87j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media4.giphy.com/media/jPgEkqIWTmYLK/giphy.gif%3Fcid%3Decf05e47cec969c5ef960d7a6ef68208ed8c5459d191e612%26rid%3Dgiphy.gif" alt="Old Phone Commercial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alright, let's get to business. This walk-through will work for ANY codebase that uses git for version control. My company uses Azure, so I don't get the nifty contribution calendar by default.&lt;/p&gt;

&lt;p&gt;We will be using an npm package called "git-stats".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/81e598418a780d07b9e23fd717200fca0f18dee49d78507f03f7eea1c1d23fbb/687474703a2f2f692e696d6775722e636f6d2f513754515948782e706e67" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/81e598418a780d07b9e23fd717200fca0f18dee49d78507f03f7eea1c1d23fbb/687474703a2f2f692e696d6775722e636f6d2f513754515948782e706e67" alt="git status logo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, open up your terminal and install git-stats globally using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i -g git-stats
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Git stats will now keep track of your commits for future reference, but there's currently no data for it to work with. We need to install another tool to import all of our commits from the repository into git-stats.&lt;/p&gt;

&lt;p&gt;The tool we need is called "git-stats-importer". We can install it globally using:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g git-stats-importer
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After "git-stats-importer" is installed, cd into the repository you want stats for.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd path/to/my-repository
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git-stats-importer
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you get an error that says "Cannot find any emails", like this &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hRQwHBet--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xk1t3w8f8tbvvajhs6sw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hRQwHBet--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xk1t3w8f8tbvvajhs6sw.png" alt="Can't Find Emails Error"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;you will need to run the command again followed by a "-e" and the email you use to access the repository like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git-stats-importer -e youremail@joinhandshake.com
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;After running that command you should see a bunch of import lines followed by an "info Done."&lt;/p&gt;

&lt;p&gt;At this point, we have everything we need to check out our stats!&lt;/p&gt;

&lt;p&gt;To see a contribution calendar (similar to GitHub's) in your terminal, type this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git-stats
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You'll see all of your contributions from the past year in the same format!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8vltp1aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8jm5zu8e8xru098i0hy9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vltp1aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/8jm5zu8e8xru098i0hy9.png" alt="git stats results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you wanted to see all of the contributions for your entire team (instead of those from just yourself) you can run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git-stats -g
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;And finally, to see how you stand compared to the rest of your team with contributions, you can generate a pie chart in your terminal with the percentages of contributions by each author in the repository by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git-stats --authors
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The result should be something similar to this!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VnDTRGfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aq0jwoei4ptt2m2q0h4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VnDTRGfM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/aq0jwoei4ptt2m2q0h4g.png" alt="git status pie chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How cool is that?! I like to keep track of how I'm doing and compare it year to year. Hopefully this can help you measure your goals and progress over the past year. üôÇ&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>git</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Redux 101</title>
      <author>Rawan Eltobgy</author>
      <pubDate>Fri, 18 Dec 2020 22:17:40 +0000</pubDate>
      <link>https://dev.to/rawaneltobgy/redux-101-a5e</link>
      <guid>https://dev.to/rawaneltobgy/redux-101-a5e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#whats-redux" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What's Redux?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Redux is a predictable state management library designed to help you write JavaScript apps that behave consistently across client, server, and native environments and are easy to test.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-think-about-using-redux" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why should you think about using Redux?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;According to Redux official docs:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Redux helps you manage "global" state - state that is needed across many parts of your application.&lt;/p&gt;

&lt;p&gt;The patterns and tools provided by Redux make it easier to understand when, where, why, and how the state in your application is being updated, and how your application logic will behave when those changes occur. Redux guides you towards writing code that is predictable and testable, which helps give you confidence that your application will work as expected."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-problem-redux-trying-to-solve" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is the problem Redux trying to solve?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;The problem Redux wanted to solve is &lt;strong&gt;predictable state updates&lt;/strong&gt; as knowing where and why the state changes and having a "single source of truth" can be an advantage.&lt;/p&gt;

&lt;p&gt;Redux allows you to debug the application easily, how? &lt;br&gt;
by separating the UI layer away from the data, that helps you to be able to understand what is going with the application at all times.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-are-redux-main-principles" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are Redux main principles?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;We can summarize the intent behind Redux's design in three core concepts:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eHkkRggE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i9xda1s5bhi0z42ebu7f.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eHkkRggE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/i9xda1s5bhi0z42ebu7f.jpeg" alt="One-Truth"&gt;&lt;/a&gt;&lt;br&gt;
1.&lt;strong&gt;Single Source of Truth&lt;/strong&gt;&lt;br&gt;
Everything that changes in the app (data, UI)state is contained in a single object (*state tree/store *)&lt;/p&gt;

&lt;p&gt;The initial state of the store is up to you but it's typically an &lt;strong&gt;Object&lt;/strong&gt; -like a model- and it doesn't need a setter in order to set it initially.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#store" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Store:&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;An object that holds the whole state tree of the app, it has a few methods on it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getState()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatch(action)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subscribe(listener)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;replaceReducer(nextReducer)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will talk more about the store and its methods in later on.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-create-your-redux-store" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;How to create your redux store?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Pass your root reducer function to createStore, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const userReducer = function(state = [], action) {
  if (action.type === 'ADD_USER') {
    var newState = state.concat([action.user]);
    return newState;
  }
  return state;
}
const store = createStore(users, ['Use Redux'])
store.dispatch({
  type: 'ADD_USER',
  user: {name: 'Rawan', language: 'EN'}
})
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;





&lt;p&gt;&lt;code&gt;createStore(reducer, [preloadedState], [enhancer])&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;We would only now talk about the "preloadedState" and we would explain the reducer later on.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;[preloadedState]:&lt;/em&gt;&lt;/em&gt; the application's initial state.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----BTdy-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hxcyw1mmcl8b0v9fik5b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----BTdy-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/hxcyw1mmcl8b0v9fik5b.jpg" alt="Read-only"&gt;&lt;/a&gt;&lt;br&gt;
2.&lt;strong&gt;State is read-only&lt;/strong&gt;&lt;br&gt;
State-Tree is read-only and the only way to change the state (&lt;em&gt;send data from your application to your Redux store&lt;/em&gt;) is to &lt;em&gt;dispatch&lt;/em&gt; an &lt;strong&gt;&lt;em&gt;action&lt;/em&gt;&lt;/strong&gt;, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const action = {
  type: 'ADD_USER',
  user: {name: 'Rawan', language: 'EN'}
};

store.dispatch(action);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-does-it-mean-to-dispatch-an-action" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What does it mean to dispatch an action?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;You can think of dispatching actions as "triggering an event" in the application. Something happened, and we want the store to know about it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#action" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Action:&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Is a plain JS object describing the change, with a type field to indicate the type of action to be performed.&lt;br&gt;
The type field should be a descriptive string, in the format of "domain/eventName" like &lt;em&gt;" users/userLogin"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;An action object can have other fields with additional information about what happened. We call that a "payload".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const userLoginAction = {
  type: 'users/USER_LOGIN',
   payload: {
    username: "Adam",
    password: "pass1234"
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see we declared the action as an object that has a type and payload.&lt;/p&gt;

&lt;p&gt;3.&lt;strong&gt;Changes are made with pure functions (Reducers)&lt;/strong&gt;&lt;br&gt;
To specify how the state tree is transformed by dispatched action, we write pure functions called &lt;strong&gt;Reducers&lt;/strong&gt; to do so.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pure-function" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Pure function:&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Is a function which, given the same input, will always return the same output (state) and Its return value depends solely on the values of its parameters. &lt;br&gt;
&lt;em&gt;for example:&lt;/em&gt; If you pass 1 and 4 to a summation function, you‚Äôll always get 5.&lt;/p&gt;

&lt;p&gt;Also, the pure function should have no side-effects like: &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#mutating-your-input-network-calls-changing-the-filesystem-fs-querying-the-dom-setting-an-async-timer-modifying-some-state-that-exists-outside-of-a-function-or-mutating-arguments-to-a-function-generating-random-numbers-or-unique-random-ids-such-as-mathrandom-or-datenow-etc" class="anchor"&gt;
  &lt;/a&gt;
  &lt;em&gt;Mutating your input, Network calls, Changing the filesystem (fs), Querying the DOM, Setting an async timer, Modifying some state that exists outside of a function, or mutating arguments to a function, generating random numbers or unique random IDs (such as Math.random() or Date.now()) ...etc&lt;/em&gt;
&lt;/h5&gt;

&lt;h4&gt;
  &lt;a href="#reducer" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Reducer:&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;A reducer takes in the &lt;strong&gt;current state&lt;/strong&gt; and an &lt;strong&gt;action&lt;/strong&gt; object as arguments and can only modify the state by returning a new state.&lt;/p&gt;

&lt;p&gt;and as redux docs state:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can think of a reducer as an event listener that handles events based on the received action (event) type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Reducers have 3 important rules:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Should only calculate the new state value based on the state and action arguments.&lt;/li&gt;
&lt;li&gt;They are not allowed to modify the existing state. &lt;/li&gt;
&lt;li&gt;They can only make immutable updates, by copying the existing state and making changes to the copied values.
They must not do any asynchronous logic, calculate random values, or cause other "side effects".&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As you can see, the rules of reducer match those of a pure function, but why should we follow these rules? &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Code predictability, when a function's output is only calculated from the input arguments, it's easier to understand how that code works and to test it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a function modifies other values, including its arguments(( the current state, action )), that can change the way the application works unexpectedly. This can be a common source of bugs, such as "I updated my state, but now my UI isn't updating when it should!"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some of the Redux DevTools capabilities depend on having your reducers follow these rules correctly.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#in-conclusion" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;In Conclusion,&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Redux stores all the app state in one place which is a single source of truth called "store", in order to change the state, components can "dispatch"  an action  to  change the store change, then the components that need to be aware of state changes can ‚Äúsubscribe‚Äù to the store to get the state change, as shown:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oe7bIZhb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iet8xz2spiegjjndxz4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oe7bIZhb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/iet8xz2spiegjjndxz4g.png" alt="Redux-StateManagment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Finally, here's a brief summary of what happens using redux:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wmgj5KaK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wpspfkmdzz7wvimro2zu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wmgj5KaK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wpspfkmdzz7wvimro2zu.png" alt="Redux-Flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it for this article, this is just an intro to redux main concepts, I hope you learned something :)&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://redux.js.org/"&gt;https://redux.js.org/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Backup Your Dotfiles With Version Control</title>
      <author>Felix Swinkels</author>
      <pubDate>Fri, 18 Dec 2020 22:01:46 +0000</pubDate>
      <link>https://dev.to/tgifelix/backup-your-dotfiles-with-version-control-239f</link>
      <guid>https://dev.to/tgifelix/backup-your-dotfiles-with-version-control-239f</guid>
      <description>&lt;p&gt;I came across a &lt;code&gt;dotfiles&lt;/code&gt; repository on GitHub the other day and it instantly made me realize I've been backing up mine wrong! Let‚Äôs set up our own GitHub repo and start doing it the right way, today.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dotfiles are text-based configuration files for Unix tools. By backing them up to GitHub we make sure all our favorite configurations, hacks, and tweaks don‚Äôt get lost in case of a system crash. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#lets-go" class="anchor"&gt;
  &lt;/a&gt;
  Let‚Äôs go!
&lt;/h2&gt;

&lt;p&gt;Create a folder called dotfiles and copy the files we want to back up.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-the-folder" class="anchor"&gt;
  &lt;/a&gt;
  Create the folder
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;dotfiles
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#copy-the-files-you-want-to-backup" class="anchor"&gt;
  &lt;/a&gt;
  Copy the files you want to backup
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cp&lt;/span&gt; ~/.&amp;lt;filename&amp;gt; ~/dotfiles/.&amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;For example, I‚Äôve added my &lt;code&gt;.zshrc&lt;/code&gt; and &lt;code&gt;.vimrc&lt;/code&gt; files&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cp&lt;/span&gt; ~/.zshrc ~/dotfiles/.zshrc
&lt;span class="nb"&gt;cp&lt;/span&gt; ~/.vimrc ~/dotfiles/.vimrc
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#first-commit" class="anchor"&gt;
  &lt;/a&gt;
  First commit
&lt;/h2&gt;

&lt;p&gt;Create a new repository called &lt;code&gt;dotfiles&lt;/code&gt; on GitHub or use the &lt;a href="https://cli.github.com"&gt;GitHub CLI tool&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#initialize-and-add-the-files" class="anchor"&gt;
  &lt;/a&gt;
  Initialize and add the files
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;dotfiles
git init
git add &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#commit-and-push" class="anchor"&gt;
  &lt;/a&gt;
  Commit and push
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; ‚Äúfirst commit‚Äù
git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#automate-it" class="anchor"&gt;
  &lt;/a&gt;
  Automate it!
&lt;/h2&gt;

&lt;p&gt;Let‚Äôs create a simple bash script and add it to &lt;code&gt;crontabs&lt;/code&gt; to run automatically.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#create-the-script" class="anchor"&gt;
  &lt;/a&gt;
  create the script
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"#!/bin/bash/"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; backup_dotfiles.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#open-the-file-in-your-favorite-editor-and-add-the-following" class="anchor"&gt;
  &lt;/a&gt;
  Open the file in your favorite editor and add the following
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# create a timestamp alias for the commit message&lt;/span&gt;
timestamp&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;date&lt;/span&gt; +&lt;span class="s2"&gt;"%d-%m-%Y @ %T"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# files to backup&lt;/span&gt;
&lt;span class="nb"&gt;cp&lt;/span&gt; ~/.zshrc ~/dotfiles/.zshrc
&lt;span class="nb"&gt;cp&lt;/span&gt; ~/.vimrc ~/dotfiles/.vimrc

&lt;span class="c"&gt;# pull &amp;amp; push&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;git status &lt;span class="nt"&gt;--porcelain&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;git pull origin master
    git add &lt;span class="nb"&gt;.&lt;/span&gt;
    git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Update: &lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;timestamp&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    git push origin master
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As you can see I‚Äôve added the &lt;code&gt;.zshrc&lt;/code&gt; and &lt;code&gt;.vimrc&lt;/code&gt; files again. You can add any (config)files you want here!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#to-add-the-job-to-cron-type" class="anchor"&gt;
  &lt;/a&gt;
  To add the job to cron, type
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;crontab &lt;span class="nt"&gt;-e&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;You can use &lt;a href="https://crontab.guru"&gt;crontab.guru&lt;/a&gt; to generate how frequent you want the backup script to run. Let‚Äôs do every Monday at 10:00 by adding the following line to the cron file and save it&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;0 10 &lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt; 1 bash backup_dotfiles.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#thats-it" class="anchor"&gt;
  &lt;/a&gt;
  That‚Äôs it!
&lt;/h3&gt;

&lt;p&gt;We‚Äôve created a &lt;a href="https://github.com/tgifelix/dotfiles"&gt;GitHub repo&lt;/a&gt; to back up dotfiles to, and automated the process with a bash script that runs periodically with cron. As always, drop your feedback in the comments! ‚úåÔ∏è&lt;/p&gt;

</description>
      <category>dotfiles</category>
      <category>bash</category>
      <category>github</category>
    </item>
    <item>
      <title>High reusability with high order components!</title>
      <author>Christian Ipanaque</author>
      <pubDate>Fri, 18 Dec 2020 21:54:12 +0000</pubDate>
      <link>https://dev.to/chrisipanaque/high-reusability-with-high-order-components-j0k</link>
      <guid>https://dev.to/chrisipanaque/high-reusability-with-high-order-components-j0k</guid>
      <description>&lt;p&gt;You have launched the best React application in the world, your users love it, but as the skilled software engineer that you are, you notice that you have created too many components that have similar functionality, resulting in a lot of duplicate code. It is now time to use one of the most powerful patterns in React, HOCs (high order components).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/glmRyiSI3v5E4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/glmRyiSI3v5E4/giphy.gif" alt="what?"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The purpose of a HOC is to enhance a given component with shared functionality and then returns a new component. This reusable HOC component is used to avoid creating too many similar components with that same enhanced functionality. It also improves the code of your application to become more extendable as you hire new engineers for your team to add new features for your users.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/2aAcLrYtiX8YM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/2aAcLrYtiX8YM/giphy.gif" alt="yay!"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To help you identify opportunities to remove duplicate code in your application, we'll create an example HOC that will enhance its input components with a common shared functionality, toggling. The toggling functionality is useful in the following scenarios:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Displaying/hiding a component&lt;/li&gt;
&lt;li&gt;Collapsing/expanding a list of components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this post we will using the toggling functionality to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Toggle between a text and an input field. This will allow the user to toggle between editing and displaying a post title&lt;/li&gt;
&lt;li&gt;Toggle between collapsed/expanded list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both of these cases need the same toggling functionality. We first implement the logic of toggling once when creating the HOC, and reuse this new HOC as many times as we want to create new components that will take advantage of using that same logic.&lt;/p&gt;




&lt;p&gt;Lets start by creating the new HOC with the name &lt;code&gt;withToggle&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// withToggle.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withToggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggleStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggleStatus&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setToggleStatus&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevToggleStatus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;prevToggleStatus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="nx"&gt;toggleStatus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleStatus&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;withToggle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;What this HOC does is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It accepts a Component as an input&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It returns a component that has a toggleStatus state with an initial value of false, and toggle function that is used to update the toggleStatus state&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It returns the given Component input with two additional props&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;toggleStatus&lt;/li&gt;
&lt;li&gt;toggle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and a deconstructured props that enables us to pass any additional props from the user.&lt;/p&gt;

&lt;p&gt;Overall this simple HOC returns the same component input but with two additional props, a boolean and a function to update that boolean.&lt;/p&gt;




&lt;p&gt;Lets now use this HOC to implement our first use case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ViewEditToggle.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;withToggle&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./withToggle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ViewEditToggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;toggleStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleStatus&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt; : &amp;lt;p&amp;gt;{title}&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleStatus&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Cancel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Edit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;withToggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ViewEditToggle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;When the toggleStatus state is updated to true, we display an input field and if false we display a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag containing the title prop.&lt;/p&gt;

&lt;p&gt;The toggle prop is passed in to the onClick handler of the button, which allows us to toggle the toggleStatus state when we click the button.&lt;/p&gt;

&lt;p&gt;This example can be used to update the value of a post title. The user would click the toggle button and write a new value for the post title. The functionality to handle the change of the input and to submit a new value, can be achieved by creating an additional HOC.&lt;/p&gt;

&lt;p&gt;Also, notice that we are exporting the &lt;code&gt;withToggle&lt;/code&gt; function with the &lt;code&gt;ViewEditToggle&lt;/code&gt; component as its input, and when we render &lt;code&gt;ViewEditToggle&lt;/code&gt; it will get its initial toggling props from the &lt;code&gt;withToggle&lt;/code&gt; HOC.&lt;/p&gt;

&lt;p&gt;We can now use this component anywhere within our codebase with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ViewEditToggle&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My first post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;p&gt;Lets now use this HOC again to implement our second use case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// CollapseExpand.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;withToggle&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./withToggle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CollapseExpand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;toggleStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;List&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleStatus&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Collapse&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Expand&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleStatus&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;))}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)}&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;withToggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CollapseExpand&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As with the first use case, the CollapseExpand component gets enhanced with the toggleStatus prop and the toggle function to achieve the toggling functionality.&lt;/p&gt;

&lt;p&gt;We can now use this component anywhere within our codebase with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Angular&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CollapseExpand&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#control-props" class="anchor"&gt;
  &lt;/a&gt;
  Control props
&lt;/h2&gt;

&lt;p&gt;Lets add a controller prop &lt;code&gt;initialToggleStatus&lt;/code&gt; to control the initialization of the toggleStatus state if a user needs to have the list initially expanded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// withToggle.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withToggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;initialToggleStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;toggleStatus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setToggleStatus&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;initialToggleStatus&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setToggleStatus&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevToggleStatus&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;prevToggleStatus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="nx"&gt;toggleStatus&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleStatus&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If we pass the initialToggleStatus prop to the CollapseExpand component, we can now set the initial value of toggleStatus:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Angular&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;React&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CollapseExpand&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;initialToggleStatus&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/3oxHQwe86QN6TMOEEw/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3oxHQwe86QN6TMOEEw/giphy.gif" alt="done!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>hoc</category>
      <category>reusability</category>
    </item>
  </channel>
</rss>
