<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>VueJs/Nuxt Components Library You should be using</title>
      <author>Jenuel Oras Ganawed</author>
      <pubDate>Mon, 07 Jun 2021 11:24:25 +0000</pubDate>
      <link>https://dev.to/brojenuel/vuejs-nuxt-components-library-you-should-be-using-1oae</link>
      <guid>https://dev.to/brojenuel/vuejs-nuxt-components-library-you-should-be-using-1oae</guid>
      <description>&lt;p&gt;As a developer that uses VueJs in most projects. I actually  been searching component library to make my life easier when developing the UI for my web projects.&lt;/p&gt;

&lt;p&gt;I will only list the components libraries that I like and I believe it has a very good and useful components.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;This list is not in order.&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-vuetify"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://vuetifyjs.com/en/getting-started/installation/"&gt;Vuetify&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Vuetify is one of the most popular component library for VueJs, and support for vue 3 is on the way. &lt;a href="https://vuetifyjs.com/en/introduction/roadmap/#v30-titan"&gt;Check it Here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This library provides probably most components that you needed to build a website, from landing pages to admin platform sites. But this library might might make your web page load slower (Checking it in web.dev or developer tool lighthouse).&lt;/p&gt;

&lt;p&gt;This uses the google material like designs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-buefy"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://buefy.org/"&gt;Buefy&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;My second favorite component library is Buefy, its a library made on top of &lt;a href="https://bulma.io/"&gt;bulma&lt;/a&gt; which is one popular css library that creates beautiful website.&lt;/p&gt;

&lt;p&gt;This also provides most of the components, what I like about buefy is its lite and fast.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-ant-design-vue"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://2x.antdv.com/components/overview/"&gt;Ant Design Vue&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Third is the andDesignVue, which is also a beautiful ui for your front end.&lt;/p&gt;

&lt;p&gt;The design is also beautiful, If your creating ecommerce website this might be a good choice or admin websites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-iview"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.iviewui.com/docs/introduce-en"&gt;iView&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is also a beautiful component library, and its really awesome for creating e-commerce and admin pages.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-vuesax"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://vuesax.com/"&gt;Vuesax&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;When you visit this component library its really beautiful, it was built by a designer so its really awesome.&lt;/p&gt;

&lt;p&gt;My problem with this one is that, its not being maintained in the moment and I don't know if they will continue maintaining this library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-equal"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://quatrochan.github.io/Equal/"&gt;Equal&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;open-source Vue 3 components system for your next project based on TypeScript.&lt;/p&gt;

&lt;p&gt;This is the components libraries that I am using. Try and check them out. :)&lt;/p&gt;

</description>
      <category>vue</category>
    </item>
    <item>
      <title>How To: Deploy Next.js Apps with Docker Containers (Efficiently!)</title>
      <author>Zack Sheppard</author>
      <pubDate>Mon, 07 Jun 2021 10:54:16 +0000</pubDate>
      <link>https://dev.to/zackdotcomputer/how-to-deploy-next-js-apps-with-docker-containers-efficiently-48e6</link>
      <guid>https://dev.to/zackdotcomputer/how-to-deploy-next-js-apps-with-docker-containers-efficiently-48e6</guid>
      <description>&lt;p&gt;So let's say you've written an awesome app in Next.js and you want to deploy it to a nifty containerized platform like &lt;a href="https://m.do.co/c/44917aecbb0c"&gt;Digital Ocean&lt;/a&gt; or &lt;a href="https://fly.io"&gt;Fly.io&lt;/a&gt;. But let's say that you, like me at the start of last week, have never containerized a Node app before and need a crash course in how to do that? &lt;/p&gt;

&lt;p&gt;Here's what I learned going through this process to deploy &lt;a href="https://tweetsweep.app"&gt;Tweet Sweep&lt;/a&gt; to fly.io - both the naive first steps for making a container work at all and then also some &lt;strong&gt;necessary&lt;/strong&gt; optimizations for it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#basics"&gt;Starter Instructions - How to Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#optimized"&gt;Optimize It - Make it Production Ready&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-dockerfile"&gt;Just give me a Dockerfile I can blindly copy paste&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#follow-along"&gt;
  &lt;/a&gt;
  Follow Along
&lt;/h2&gt;

&lt;p&gt;If you want to follow along, you will need &lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker Desktop&lt;/a&gt; and  &lt;a href="https://yarnpkg.com"&gt;Yarn&lt;/a&gt;  installed. To keep things replicable, I'm using the &lt;a href="https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript"&gt;Next.js Blog-Starter-Typescript example&lt;/a&gt; in these instructions. You can set that up locally with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn create next-app &lt;span class="nt"&gt;--example&lt;/span&gt; blog-starter-typescript blog-starter-typescript-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a side note, the tips and tricks in here are generic for all containerized Node apps, but the Dockerfiles themselves will only work as an untweaked copy-paste if you're using Next.js. So, if you're using a different platform you might have to tweak which files get retained in your final container.&lt;/p&gt;

&lt;p&gt;&lt;a id="basics"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-basics-just-make-it-work"&gt;
  &lt;/a&gt;
  The Basics - Just make it work
&lt;/h2&gt;

&lt;p&gt;So let's start with the 101 - what is Docker and why you want to use it. At its core, Docker Containers are tiny virtual computers serialized to disk in a standardized format. To make them, you need three ingredients:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;A starter image to build upon - usually this is a full operating system image with some pre-installed software from &lt;a href="https://hub.docker.com"&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New files to add - in this case the code for your app.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The steps to combine those first two components. This is what is stored in a &lt;code&gt;Dockerfile&lt;/code&gt; and a &lt;code&gt;.dockerignore&lt;/code&gt; file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using these three components you can wrap up your software into a standardized container that can be run on any machine that has the Docker software installed. (Note that this has a big "in theory" caveat attached - if you are doing complex, advanced operations then you might run into the limits of Docker's capabilities. However, for a straight-forward Next.js app like the one I'm using here, it works very well.)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-naive-dockerfile"&gt;
  &lt;/a&gt;
  The Naive Dockerfile
&lt;/h3&gt;

&lt;p&gt;So what do these instructions look like for our Next.js application?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Naively Simple Node Dockerfile&lt;/span&gt;

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14.17-alpine&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /home/app/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; node:node /home/app
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /home/app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --chown=node:node . .&lt;/span&gt;

&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; node&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--frozen-lockfile&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn build

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "yarn", "start" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Put these in a file named &lt;code&gt;Dockerfile&lt;/code&gt; in the root folder of your app.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#understanding-the-dockerfile"&gt;
  &lt;/a&gt;
  Understanding the Dockerfile
&lt;/h4&gt;

&lt;p&gt;So what does this do? Well, Docker will step through these instructions one by one and do the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14.17-alpine&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells Docker that your app is building on &lt;a href="https://hub.docker.com/_/node"&gt;a container&lt;/a&gt; that has Alpine Linux and Node 14.17 (with &lt;code&gt;npm&lt;/code&gt; and &lt;code&gt;yarn&lt;/code&gt;) preinstalled.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /home/app/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;chown&lt;/span&gt; &lt;span class="nt"&gt;-R&lt;/span&gt; node:node /home/app
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /home/app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --chown=node:node . .&lt;/span&gt;

&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; node&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are our first real instructions - we make a directory called /home/app, give ownership of it to a user named &lt;code&gt;node&lt;/code&gt;, make it the "working directory" for our container (where Docker expects our main program files to live), and copy the files in the directory where we ran &lt;code&gt;docker build&lt;/code&gt; into the container. Remember the container is basically a virtual little computer, so we have to copy our files in there to access them!&lt;/p&gt;

&lt;p&gt;We then become that &lt;code&gt;node&lt;/code&gt; user. By default Docker runs as &lt;code&gt;root&lt;/code&gt; on the contained machine. But that is pretty dangerous since it gives root privileges to whatever code we run, meaning a little security flaw in Node or one of our NPM dependencies could potentially give access to our whole server. So, to avoid that, we switch to a non-root user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--frozen-lockfile&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We install our NPM dependencies and build our Next.js server in production mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "yarn", "start" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally these two commands give Docker instructions it will use when it tries to run this software. The first tells Docker that this container expects connections on port 3000, so it should expose that leaving the container (we'll wire it up in a moment with the &lt;code&gt;-p&lt;/code&gt; flag). The second tells Docker that the command to run to start this container is &lt;code&gt;yarn start&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#build-and-run"&gt;
  &lt;/a&gt;
  Build and Run!
&lt;/h4&gt;

&lt;p&gt;Now it's time to execute those steps and make your container. Run the following command in a terminal in your project directory (you can replace &lt;code&gt;some-name&lt;/code&gt; with a personal tag like &lt;code&gt;zacks-blog-1.0&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker build &lt;span class="nt"&gt;-t&lt;/span&gt; some-name &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your built image, containing the virtual machine ready to run your web app, will now show up locally if you check &lt;code&gt;docker image ls&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker image ls
REPOSITORY    TAG       IMAGE ID       CREATED          SIZE
some-name     latest    4c73a8c8d35c   2 minutes ago    622MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's start it up:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker run &lt;span class="nt"&gt;-p&lt;/span&gt; 3000:3000 some-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(You can add the &lt;code&gt;-d&lt;/code&gt; flag after &lt;code&gt;run&lt;/code&gt; to run the server in the background instead.)&lt;/p&gt;

&lt;p&gt;You'll see logs same as if you'd run &lt;code&gt;yarn start&lt;/code&gt; normally. And, due to the &lt;code&gt;-p 3000:3000&lt;/code&gt; flag, your container will now be connected to your local port 3000, so if you visit &lt;code&gt;http://localhost:3000&lt;/code&gt; you'll see your blog template:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---GE7MgdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622987457269/SykIBi-7S.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---GE7MgdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1622987457269/SykIBi-7S.jpeg" alt="It worked"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a id="optimized"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#optimize-it-getting-this-production-ready"&gt;
  &lt;/a&gt;
  Optimize it - Getting this production ready
&lt;/h2&gt;

&lt;p&gt;Great! You have now containerized your app. But before you go deploying it to your favorite hosting platform, there are a few things we need to do.&lt;/p&gt;

&lt;p&gt;You might have noticed above that the size of our built image is over 600MB - that's over 4x the size of our project on disk outside of the container! This problem only compounds as your apps get more complex - the built versions of the &lt;a href="https://use.tweetsweep.app"&gt;Tweet Sweep Frontend&lt;/a&gt; container were more almost 5GB at this point! That's a lot of data to upload to your servers!&lt;/p&gt;

&lt;p&gt;Almost all of this size issue is related to one particular quirk of Docker - almost every line in the &lt;code&gt;Dockerfile&lt;/code&gt; creates a new "layer" in your final Docker image. Each layer captures the changes made to the virtual machine after that line runs. This is a powerful optimization tool because it allows Docker to reuse work it's already done - for example if you have some setup that never changes like our &lt;code&gt;mkdir&lt;/code&gt; line, Docker can compute that layer once and reuse it for all subsequent builds. However, it can also lead to image size issues (since lots of unneeded files might wind up being stored in those layers) and security issues (since you might capture secret values in those layers that could be siphoned off by someone who gets access to your final image).&lt;/p&gt;

&lt;p&gt;You can see the layers and their respective sizes using this command (credit to  &lt;a href="https://medium.com/trendyol-tech/how-we-reduce-node-docker-image-size-in-3-steps-ff2762b51d5a"&gt;this post&lt;/a&gt; where I got it from):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker &lt;span class="nb"&gt;history&lt;/span&gt; &lt;span class="nt"&gt;--human&lt;/span&gt; &lt;span class="nt"&gt;--format&lt;/span&gt; &lt;span class="s2"&gt;"{{.CreatedBy}}: {{.Size}}"&lt;/span&gt; some-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"yarn"&lt;/span&gt; &lt;span class="s2"&gt;"start"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: 0B
EXPOSE map[3000/tcp:&lt;span class="o"&gt;{}]&lt;/span&gt;: 0B
RUN /bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; yarn build &lt;span class="c"&gt;# buildkit: 10.6MB&lt;/span&gt;
RUN /bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--frozen-lockfil&lt;/span&gt;…: 340MB
USER node: 0B
COPY &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt; &lt;span class="c"&gt;# buildkit: 155MB&lt;/span&gt;
WORKDIR /home/app: 0B
RUN /bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /home/app/ &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;chown&lt;/span&gt; …: 0B
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;#(nop)  CMD ["node"]: 0B&lt;/span&gt;
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;#(nop)  ENTRYPOINT ["docker-entry…: 0B&lt;/span&gt;
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;#(nop) COPY file:238737301d473041…: 116B&lt;/span&gt;
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; &lt;span class="nt"&gt;--virtual&lt;/span&gt; .bui…: 7.62MB
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;#(nop)  ENV YARN_VERSION=1.22.5: 0B&lt;/span&gt;
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; addgroup &lt;span class="nt"&gt;-g&lt;/span&gt; 1000 node     &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; addu…: 104MB
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;#(nop)  ENV NODE_VERSION=14.17.0: 0B&lt;/span&gt;
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;#(nop)  CMD ["/bin/sh"]: 0B&lt;/span&gt;
/bin/sh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="c"&gt;#(nop) ADD file:282b9d56236cae296…: 5.62MB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From this we can see that about 117MB of the image size happen before our first command - this the base size of the Alpine-Node image we're building on so there isn't much we can do about that. But let's focus on the two main optimizations we can do &lt;em&gt;after&lt;/em&gt; that point:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-ignore-stuff"&gt;
  &lt;/a&gt;
  Easy: Ignore Stuff
&lt;/h3&gt;

&lt;p&gt;In our naive Dockerfile we run the command &lt;code&gt;COPY --chown=node:node . .&lt;/code&gt;. This copies &lt;strong&gt;all&lt;/strong&gt; the files in our current directory into the Docker container. This is almost always &lt;strong&gt;not&lt;/strong&gt; what you want! For example, you might have an .env file with secrets in it that will wind up in plain-text in the final Docker image. (You should use the env secrets feature on your hosting platform instead.)&lt;/p&gt;

&lt;p&gt;In this app's case this unnecessarily copies the &lt;code&gt;node_modules&lt;/code&gt; folder (since we then yarn install it again) and &lt;code&gt;.next&lt;/code&gt; folder (since we rebuild the app inside the container). We can fix this with a &lt;code&gt;.dockerignore&lt;/code&gt; file. This file, in the root of our project, tells Docker to skip certain files and folders when running &lt;code&gt;COPY&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# .dockerignore file
.DS_Store
.next
node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#advanced-get-your-container-a-container"&gt;
  &lt;/a&gt;
  Advanced: Get your Container a Container
&lt;/h3&gt;

&lt;p&gt;Now the galaxy brain move here is to use two containers. We're going to create one that is used &lt;em&gt;only&lt;/em&gt; to build the application separate from the one that's uploaded to the server. This saves us from having to upload the layers containing all the files used or created en route to that destination. Here's the Dockerfile for that (with comments explaining along the way what each block does):&lt;/p&gt;

&lt;p&gt;&lt;a id="final-dockerfile"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# Double-container Dockerfile for separated build process.&lt;/span&gt;
&lt;span class="c"&gt;# If you're just copy-pasting this, don't forget a .dockerignore!&lt;/span&gt;

&lt;span class="c"&gt;# We're starting with the same base image, but we're declaring&lt;/span&gt;
&lt;span class="c"&gt;# that this block outputs an image called BUILD_IMAGE that we&lt;/span&gt;
&lt;span class="c"&gt;# won't be deploying&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14.17-alpine AS BUILD_IMAGE&lt;/span&gt;

&lt;span class="c"&gt;# Set up our work directory again&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /home/app/
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /home/app&lt;/span&gt;

&lt;span class="c"&gt;# Copy over ONLY the package.json and yarn.lock&lt;/span&gt;
&lt;span class="c"&gt;# so that this `yarn install` layer is only recomputed&lt;/span&gt;
&lt;span class="c"&gt;# if these dependency files change. Nice speed hack!&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json yarn.lock ./&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--frozen-lockfile&lt;/span&gt;

&lt;span class="c"&gt;# NOW bring over the rest of the source code and build&lt;/span&gt;
&lt;span class="c"&gt;# the Next server for production&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn build

&lt;span class="c"&gt;# Remove all the development dependencies since we don't&lt;/span&gt;
&lt;span class="c"&gt;# need them to run the actual server.&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; node_modules
&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--production&lt;/span&gt; &lt;span class="nt"&gt;--frozen-lockfile&lt;/span&gt;

&lt;span class="c"&gt;# END OF BUILD_IMAGE&lt;/span&gt;

&lt;span class="c"&gt;# This starts our application's final output image.&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14.17-alpine&lt;/span&gt;

&lt;span class="c"&gt;# Pull the built files out of BUILD_IMAGE - we need:&lt;/span&gt;
&lt;span class="c"&gt;# 1. the package.json and yarn.lock&lt;/span&gt;
&lt;span class="c"&gt;# 2. the Next build output and static files&lt;/span&gt;
&lt;span class="c"&gt;# 3. the node_modules.&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /home/app&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --chown=node:node --from=BUILD_IMAGE /home/app/package.json /home/app/yarn.lock ./&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --chown=node:node --from=BUILD_IMAGE /home/app/public ./public&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --chown=node:node --from=BUILD_IMAGE /home/app/.next ./.next&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --chown=node:node --from=BUILD_IMAGE /home/app/node_modules ./node_modules&lt;/span&gt;

&lt;span class="c"&gt;# Switch to our not-root user&lt;/span&gt;
&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; node&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "yarn", "start" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-results"&gt;
  &lt;/a&gt;
  The Results
&lt;/h3&gt;

&lt;p&gt;Now if you build that (again with &lt;code&gt;docker build -t some-name-optimized .&lt;/code&gt;) and run it (&lt;code&gt;docker run -p 3000:3000 some-name-optimized&lt;/code&gt;) you'll be able to connect to it on localhost:3000 same as before. &lt;/p&gt;

&lt;p&gt;What has changed, then? Well, if we list our images:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker image &lt;span class="nb"&gt;ls                      
&lt;/span&gt;REPOSITORY           TAG      IMAGE ID       CREATED       SIZE
some-name-optimized  latest   518ed80eae02   1 hour ago    243MB
some-name            latest   4c73a8c8d35c   2 hours ago   622MB
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see we've reduce our final build image's size by almost a factor of 3! That's a &lt;strong&gt;lot&lt;/strong&gt; less data we'll need to upload to our server with every deploy! I saw similar results when I employed this strategy on Tweet Sweep's containers, saving me &lt;em&gt;gigabytes&lt;/em&gt; of upload bandwidth with every deploy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-actual-deploy"&gt;
  &lt;/a&gt;
  The Actual Deploy
&lt;/h2&gt;

&lt;p&gt;Ok, so now that we have our app containerizing successfully, how do we actually deploy? For this, I've been using &lt;a href="https://fly.io"&gt;fly.io&lt;/a&gt; because their support for Docker is strong and their service has a generous free tier. But if you'd rather use &lt;a href="https://devcenter.heroku.com/categories/deploying-with-docker"&gt;Heroku&lt;/a&gt; or  &lt;a href="https://m.do.co/c/44917aecbb0c"&gt;Digital Ocean&lt;/a&gt; they have strong support for Docker as well.&lt;/p&gt;

&lt;p&gt;With Fly, I'd recommend just following their &lt;a href="https://fly.io/docs/app-guides/run-a-global-image-service/#deploying-docker-images-to-fly"&gt;step by step instructions&lt;/a&gt; for deploying Docker. TLDR; you have to create an app on your account and a corresponding &lt;code&gt;fly.toml&lt;/code&gt; file locally, then the command &lt;code&gt;flyctl deploy&lt;/code&gt; will automatically run your Dockerfile build, upload all the resulting layers to their service (this is why it's important to optimize their size!), and then start them on a VM server. After that, deploys really are as easy as running &lt;code&gt;flyctl deploy&lt;/code&gt; again thanks to the compartmentalization of containers!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-optimizations"&gt;
  &lt;/a&gt;
  More Optimizations?
&lt;/h2&gt;

&lt;p&gt;I'm still learning Docker so these optimizations are just the first I've come across. If you've played around with it and know some more ins-and-outs one should include while containerizing a NodeJS app, please do let me know down in the comments.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>webdev</category>
      <category>node</category>
      <category>docker</category>
    </item>
    <item>
      <title>Useful Tips &amp; Tricks In JavaScript</title>
      <author>Anshu</author>
      <pubDate>Mon, 07 Jun 2021 10:32:22 +0000</pubDate>
      <link>https://dev.to/ansh20/useful-tips-tricks-in-javascript-2ok3</link>
      <guid>https://dev.to/ansh20/useful-tips-tricks-in-javascript-2ok3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#useful-tips-amp-tricks-in-javascript"&gt;
  &lt;/a&gt;
  useful tips &amp;amp; tricks in javascript
&lt;/h2&gt;

&lt;p&gt;JavaScript is the most popular language and this language that you can learn easily by yourself. it's front-hand language. And it's one of the languages used by coders, developers, and programmers. Not to be confused with JScript, Java, or Javanese script that all are similar languages.&lt;/p&gt;

&lt;p&gt;We all know that javascript is now more updated than before. There are so many new features added in Javascript 2021(Check out some of the best features in JavaScript). That makes our work easier and faster. programmer, developers, and coders always have some goal to complete it, for them, there are some short and simple useful tips &amp;amp; tricks in javascript they must use it to makes them work easy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-way-to-using-slice-and-es8-padstart-method"&gt;
  &lt;/a&gt;
  Quick way to using slice and ES8 PadStart method
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const accountnum = "204910110001957";
const lastFourDigits = accountnum.slice(-4);
// print last four digit of account number
const maskedNumber = lastFourDigits.padStart(accountnum.length, '*');
console.log(lastFourDigits); // output will be 1957
console.log(maskedNumber); // ***********1957
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run-an-event-handler-only-one-time-"&gt;
  &lt;/a&gt;
  Run an event handler only one time ##
&lt;/h2&gt;

&lt;p&gt;If you want to run the addEventListener method you have to pass {once: true} as the third argument then the event handler method will run only one time. That's one of the useful tips &amp;amp; tricks in javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;document.getElementById("btn").addEventListener("click",
function () {
console.log("Button is Clicked..");
},
{ once: true }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#update-an-objects-properties-by-spread-operator"&gt;
  &lt;/a&gt;
  Update an object's properties by spread operator
&lt;/h2&gt;

&lt;p&gt;The spread syntax can be used when all elements from an object or array need to be included in a list of some kind. By using this operator you can update any types of object properties. This is one of the most useful javascript tips.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const object = {
  name: "Anshuman",
  age: 29,
  city: "Surat",
};

const newAge = 49;

const updatedObject = {
  ...object,
  age: newAge
};

console.log(object); // { name:"Rahul", age:29, city:"Surat"}
console.log(updatedObject); // { name:"Rahul", age:49, city:"Surat"} 
Find the length of properties in an object
What's the fastest way to find the length of properties, you can find the length by using 
[objectLength = Object.keys(exampleObject).length]
this syntax. That's one of the most useful tips in javascript.

 Const Object = {
            id: 1,
            name: 'Arun',
            age: 30
        }
console.log(Object.keys(object).length);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#print-the-last-elements-of-an-array"&gt;
  &lt;/a&gt;
  Print the last elements of an array
&lt;/h2&gt;

&lt;p&gt;generally, Array is a collection of the same variables. That is one of the most useful tips in javascript is given here, if you want to print only the last number from the array you must use the syntax given below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const elements = [5,6,7,8,9,10];
const last = elements.slice(-1);
console.log(last); // Output will be 10

const secondLast = elements.slice(-2);
console.log(secondLast); // Output will be 9,10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#check-array"&gt;
  &lt;/a&gt;
  Check Array
&lt;/h2&gt;

&lt;p&gt;In Javascript, There are three ways to check an array is in proper syntax or not. An array is an object, so obviously it has proper syntax. That's one of the useful tips in javascript to check an array is actually an array or not.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const array = [2,4,6,8,10];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#print-current-timestamp"&gt;
  &lt;/a&gt;
  Print current timestamp
&lt;/h2&gt;

&lt;p&gt;A unary operator like plus triggers the valueOf method in the Date object and it returns the timestamp. It means it converts the current time in a string with different types of time zones. That's one of the useful tips &amp;amp; tricks in javascript and it's most useful.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (!Date.now) {
    Date.now = function() { return new Date().getTime(); }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#provide-dynamic-key-for-an-object"&gt;
  &lt;/a&gt;
  Provide dynamic key for an object
&lt;/h2&gt;

&lt;p&gt;Moving on to computed keys, the value of object keys can be computed directly in the object literal using the same bracket notation in the literal. In a new feature of javascript, we can provide a dynamic key for an object that's the better javascript than the old one. That one of the best tips &amp;amp; tricks in javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function obj(key, value) {
  const dyn = {
    [key]: value
  };
  return dyn;
}

console.log(obj('name', 'Rahul')); // Output will be name: Rahul
console.log(obj('age', '29')); // Output will be age: 29 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destructuring-array"&gt;
  &lt;/a&gt;
  Destructuring Array
&lt;/h2&gt;

&lt;p&gt;The destructuring syntax is a JavaScript expression that makes it possible to take out values from arrays, or properties from objects, into distinct variables. It's one of the best tips &amp;amp; tricks in javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const names = ["yash", "mayur", "krushil", "kenil", "ansh", "raju", "rahul"];

const [firstName, secondNmae] = names;

console.log(thirdName);  // Output will be krushil
console.log(secondName); // Output will be mayur
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#execute-number-variable-to-function"&gt;
  &lt;/a&gt;
  Execute number variable to function
&lt;/h2&gt;

&lt;p&gt;ES6 is the very advanced operator that converts commas to separate values in an array. So, when you enter the number variable to add it becomes an array. This is one of the most useful tips &amp;amp; tricks in javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function add(...numbers) {
 return numbers.reduce((var, value) =&amp;gt; {
   return var + value;
 }, 0);
}

const sum = add(2,4,6,8,10); 
console.log(sum); // Output will be 30
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#create-an-array-by-spread-operator"&gt;
  &lt;/a&gt;
  Create an array by spread operator
&lt;/h2&gt;

&lt;p&gt;The spread operator allows an iterable to expand in places where more than zero arguments are expected. It mostly uses when an array has more than one value. That's one of the most useful tips &amp;amp; tricks in javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const s1 = ["1", "2", "3"];
const s2 = [ "5", "6", "8"];

const combined = ["4", ...s1, "7", ...s2]
console.log(combined); // Output will be ["1", "2", "3", "4", "5", "6" , "7", "8"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fill-array-with-specific-values"&gt;
  &lt;/a&gt;
  Fill array with specific values
&lt;/h2&gt;

&lt;p&gt;The fill() method fills the specified elements in an array with a static value. You can specify the position of where to start and end the filling. If you don't specify the position then all elements will be filled. This is one of the most useful tips &amp;amp; tricks in javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var fruits = ["Banana", "Orange", "mango", "kiwi"];
fruits.fill("strawberry", 2, 4); // Output will be Banana,Orange,strawberry,strawberry
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#remove-duplicates-values-from-array"&gt;
  &lt;/a&gt;
  Remove duplicates values from array
&lt;/h2&gt;

&lt;p&gt;There are so many duplicate values in an array. So, the programmer can remove them easily by using the console.log(var); syntax. That makes work easier and faster. This is one of the most useful tips &amp;amp; tricks in javascript. There are two types available to remove the duplicate values which are given below:&lt;br&gt;
By array filter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dup = [10, 10, 20, 50, 30, 30, 50];
const arr = dup.filter((value, index) =&amp;gt; {
    return dup.indexOf(value) === index;
});
console.log(arr); // Output Will be [10, 20, 30, 50]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By set&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dup = [10, 10, 20, 50, 30, 30, 50];
const arr = [...new Set(dup)];
console.log(arr); // [10, 10, 20, 50, 30, 30, 50];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-scroll-button-to-the-top-of-the-page"&gt;
  &lt;/a&gt;
  Add scroll button to the top of the page
&lt;/h2&gt;

&lt;p&gt;Many times pages are so lengthy to scroll. That is the top scroll button available by using the below syntax:  (And this is one of the most useful tips &amp;amp; tricks in javascript)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;window.scrollTo({ top: 0, left: 0, behavior: "smooth" });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#convert-any-type-of-value-to-boolean"&gt;
  &lt;/a&gt;
  Convert any type of value to boolean
&lt;/h2&gt;

&lt;p&gt;In JavaScript, there are two types of boolean values true and false. You can use the Boolean() function to find out if a variable is true or not. That's one of the most useful tips &amp;amp; tricks in javascript.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let num1;
console.log(!!num1); // false

const num2 = 10;
console.log(!!num2); // true


const n1 = 'Tim';
console.log(!!n1); // true

const n2 = '';
console.log(!!n2); // false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>design</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>10 Best JavaScript Animation Libraries 🔥</title>
      <author>TANMOY MANDAL</author>
      <pubDate>Mon, 07 Jun 2021 10:32:03 +0000</pubDate>
      <link>https://dev.to/tantanmoy/10-best-javascript-animation-libraries-3dhc</link>
      <guid>https://dev.to/tantanmoy/10-best-javascript-animation-libraries-3dhc</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;a href="https://animejs.com/"&gt;1. Anime.js&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--og24b6Fp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twjju4snmf7hv6305t67.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--og24b6Fp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twjju4snmf7hv6305t67.PNG" alt="anime.js"&gt;&lt;/a&gt;&lt;br&gt;
Anime.js is a lightweight JavaScript animation library with a simple, yet powerful API.The library has a small file size and supports all modern browsers.You can use it to animate HTML, CSS, JS, SVG and DOM attributes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://greensock.com/"&gt;2. GSAP&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VVoijax3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5j4tbc4jb7xfplc4jz6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VVoijax3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5j4tbc4jb7xfplc4jz6.png" alt="GSAP"&gt;&lt;/a&gt;&lt;br&gt;
GSAP is a robust JavaScript toolset that turns developers into animation superheroes.GSAP animates anything JavaScript can touch (CSS properties, SVG, React, canvas, generic objects, whatever). It's up to 20x faster than jQuery! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://threejs.org/"&gt;3. Three.js&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_6Tj1LpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14pk3cixtq2r8rqlrlvs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_6Tj1LpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/14pk3cixtq2r8rqlrlvs.png" alt="three.js"&gt;&lt;/a&gt;&lt;br&gt;
Three.js is a lightweight and user-friendly JavaScript 3D animation library.Three.js have 70K+ stars on GitHub. It’s dependent on WebGL to create and render 3D animations in the browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://mojs.github.io/"&gt;4. Mo.js&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jb1kZ7mD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3fu8aelt2zwkwajf887.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jb1kZ7mD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3fu8aelt2zwkwajf887.png" alt="mo.js"&gt;&lt;/a&gt;&lt;br&gt;
Mo.js is a javascript motion graphics library.It's fast, retina-ready, modular, and open source library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://popmotion.io/"&gt;5. Popmotion&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yMACal77--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8cqi02rd2xcvm4fcg0ow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yMACal77--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8cqi02rd2xcvm4fcg0ow.png" alt="popmotion"&gt;&lt;/a&gt;&lt;br&gt;
Popmotion gives the power of JavaScript merged with the simplicity of CSS to make declarative animations easily on your HTML, SVG, and React projects.It features animations like keyframes, decay, timeline for synchronizing multiple instances and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://anijs.github.io/"&gt;6. AniJS&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t4A82hKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zczslgxwp25v7rx2web1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t4A82hKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zczslgxwp25v7rx2web1.png" alt="anijs"&gt;&lt;/a&gt;&lt;br&gt;
AniJS lets you create animated styling for your website without any JavaScript or CSS coding! You can specify all your animations with HTML using a simple If-On-Do-To syntax.It allows you to add animations to elements in a simple way.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://thednp.github.io/kute.js/"&gt;7. KUTE.js&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--53bDl8cP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rxm4639hmutdhd40o21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--53bDl8cP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rxm4639hmutdhd40o21.png" alt="kutejs"&gt;&lt;/a&gt;&lt;br&gt;
KUTE.js is a feature-rich JavaScript animation library.KUTE.js is now a fully featured animation engine you can use to create complex animations, with properties or elements that cannot be animated with CSS3 transitions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://velocityjs.org/"&gt;8. Velocity.js&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TlZZWBDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atmtp57cj22puqksqfaa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TlZZWBDX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atmtp57cj22puqksqfaa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Velocity.js is a JavaScript animation library for fast performing animations.It works with and without jQuery. It's incredibly fast, and it features color animation, transforms, loops, easings, SVG support, and scrolling. It is the best of jQuery and CSS transitions combined.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://maxwellito.github.io/vivus/"&gt;9. Vivus.js&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--doBSrYCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pv33mqmja7id358lalb4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--doBSrYCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pv33mqmja7id358lalb4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Vivus is a lightweight JavaScript class (with no dependencies) that allows you to animate SVGs, giving them the appearance of being drawn.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://scrollrevealjs.org/"&gt;10. ScrollReveal JS&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--htOcdVku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dfd1ooadwkmesrocf8i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--htOcdVku--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2dfd1ooadwkmesrocf8i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
ScrollReveal is a JavaScript library for easily animating elements as they scroll into view.It was designed to be robust and flexible.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Five classic SQL &amp; database posts - June 2021</title>
      <author>Helen Anderson</author>
      <pubDate>Mon, 07 Jun 2021 10:27:34 +0000</pubDate>
      <link>https://dev.to/helenanders26/five-classic-sql-database-posts-june-2021-3f16</link>
      <guid>https://dev.to/helenanders26/five-classic-sql-database-posts-june-2021-3f16</guid>
      <description>&lt;p&gt;Hi! I'm Helen, one of &lt;a href="https://dev.to/t/sql/top/infinity"&gt;#SQL&lt;/a&gt; and &lt;a href="https://dev.to/t/database/top/infinity"&gt;#database&lt;/a&gt; tag moderators.&lt;/p&gt;

&lt;p&gt;Each month I'll be taking a trip down memory lane and showcasing some classic data posts. Some of these might be your 'go-to' resources already, others may offer some new insight or ideas.&lt;/p&gt;

&lt;p&gt;Let's jump into the posts!&lt;/p&gt;




&lt;p&gt;First up &lt;a href="https://dev.to/adipolak"&gt;Adi&lt;/a&gt; writes about the building blocks that open a whole new world of workload management, various types of files, log systems, and architectures specifically designed to handle scale.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/adipolak" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vg7A62LZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--avq4G3A2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/121127/0af4a894-56eb-4e81-890a-12e5ba022027.jpg" alt="adipolak image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/adipolak/big-data-from-the-ground-up-28im" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Big Data from the Ground up&lt;/h2&gt;
      &lt;h3&gt;Adi Polak ・ Feb 16 '20 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;This classic post from &lt;a href="https://dev.to/jenc"&gt;jen&lt;/a&gt; dives into PostgreSQL and what you can do with the SELECT clause. Check out the post and the comments for more.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/jenc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hXSJ3UoF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--RAGRTia7--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/20372/ed620018-f748-4d1a-a8a3-59e45a64939c.gif" alt="jenc image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jenc/what-i-learned-from-only-using-select-in-postgresql-3na" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What I learned from only using Select in PostgreSQL&lt;/h2&gt;
      &lt;h3&gt;jen chan ・ Apr 9 '18 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#debugging&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next up is a post from &lt;a href="https://dev.to/wendisha"&gt;Wendy&lt;/a&gt; and a post tackling outer joins with useful examples and images to make them easier to understand.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/wendisha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uRoYsIXW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uD8JNGnU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/148279/07c98e4f-1c12-4bdb-98fc-62fa1c670d73.jpeg" alt="wendisha image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/wendisha/sql-outer-joins-2cj7" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;SQL: Outer Joins&lt;/h2&gt;
      &lt;h3&gt;Wendy Calderon ・ Nov 30 '19 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#postgres&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;This classic post from &lt;a href="https://dev.to/integerman"&gt;Matt&lt;/a&gt; discusses what deadlocks are, how to interpret deadlock graphs, and some options for handling deadlocks.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/integerman" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WGd58flt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Qt_Qagmc--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/71302/ee7df1f0-de6b-4899-8ff2-d5cb43f9efc9.png" alt="integerman image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/techelevator/understanding-sql-server-deadlocks-2ej6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Understanding SQL Server Deadlocks&lt;/h2&gt;
      &lt;h3&gt;Matt Eland ・ Sep 11 '19 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sqlserver&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#performance&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Our last post is from &lt;a href="https://dev.to/jillianntish"&gt;Jill&lt;/a&gt; and covers the differences between relational and non-relational databases. Check out the post for more on how to plan your next data project.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/jillianntish" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BpqpQ79s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--NbUI5O_u--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/211186/c5aee48d-c1cb-4b38-ac75-35701fa3dc72.jpeg" alt="jillianntish image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jillianntish/data-royale-sql-vs-nosql-5002" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Data Royale: [SQL] vs noSQL &lt;/h2&gt;
      &lt;h3&gt;Jill Poole ・ Mar 21 '20 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sql&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#firstyearincode&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;








&lt;p&gt;That's all for this month! For more from the Data Community check out the #sql, #postgres, #mysql, and #database tags, and follow &lt;a href="https://twitter.com/TheDatabaseDev"&gt;@TheDatabaseDev on Twitter&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jJnjqEMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6m19oidtq78smktb9haq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJnjqEMK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/6m19oidtq78smktb9haq.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>sql</category>
      <category>database</category>
      <category>bestofdev</category>
      <category>classicdev</category>
    </item>
    <item>
      <title>C help. (Possible volunteer work.)</title>
      <author>Calin Baenen</author>
      <pubDate>Mon, 07 Jun 2021 10:17:15 +0000</pubDate>
      <link>https://dev.to/baenencalin/c-help-possible-volunteer-work-54g6</link>
      <guid>https://dev.to/baenencalin/c-help-possible-volunteer-work-54g6</guid>
      <description>&lt;p&gt;&lt;a href="https://twitter.com/BaenenCalin/status/1401844245720412162"&gt;Original Tweet&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#gtgt-i-want-some-kind-of-free-program-that-takes-in-all-my-source-c-code-including-libraries-asks-me-for-the-target-os-and-gives-me-an-output-thats-all-i-really-want-thats-what-it-comes-down-to-if-you-know-anything-that-meets-this-criteria-feel-free-to-comment-about-it-ltlt"&gt;
  &lt;/a&gt;
  &amp;gt;&amp;gt; I want some kind of free program that takes in all my source C code (including libraries), asks me for the target OS, and gives me an output. That's all I really want. That's what it comes down to. If you know anything that meets this criteria, feel free to comment about it. &amp;lt;&amp;lt;
&lt;/h4&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
VOLUNTEER WORK WANTED: Since I can't afford a fancy IDE (e.g. CLion), which has the ability to compile my C-code with minimum effort, I need someone to compile my code for me (since I can't figure out how to build).&lt;/p&gt;

&lt;p&gt;It would be a big help, as I'm still trying to learn C, and want to experiment, but there's almost no good free tools.&lt;br&gt;
There's VS (Visual Studio), but that seems... less than ideal, and anything that is good costs money.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thankscheers"&gt;
  &lt;/a&gt;
  &lt;center&gt;Thanks&lt;br&gt;Cheers!&lt;/center&gt;
&lt;/h1&gt;

</description>
      <category>c</category>
      <category>help</category>
      <category>gamedev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to add elements to an array in PHP?</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 07 Jun 2021 10:16:06 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/how-to-add-elements-to-an-array-in-php-1hgd</link>
      <guid>https://dev.to/hrishikesh1990/how-to-add-elements-to-an-array-in-php-1hgd</guid>
      <description>&lt;p&gt;In this short tutorial, we look at how to add to array in PHP, we look at the different methods and use-cases and weigh them against each other.&lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at &lt;a href="https://flexiple.com/"&gt;Flexiple&lt;/a&gt;, to write short curated tutorials around often used or interesting concepts. However, in case you are here only for the solution use this &lt;a href="#code-and-explanation"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#php-add-to-array-or-append-to-array"&gt;PHP: Add to array or append to array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#add-to-array-using-square-brackets"&gt;Add to array using square brackets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-arraypush-method"&gt;Using the array_push method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitations-and-caveats"&gt;Limitations and Caveats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#php-add-to-array-or-append-to-array"&gt;
  &lt;/a&gt;
  PHP: Add to array or append to array:
&lt;/h2&gt;

&lt;p&gt;Appending an element into an array or add to array, is a commonly used method not only in PHP but in other programming languages as well. However, adding elements to an array in PHP can be done with a handful of methods and they differ based on their use-cases.&lt;/p&gt;

&lt;p&gt;In case you are looking to add to array, but want the element to be appended at the end of the array, you can look at the two methods. if you are looking to add to the beginning of the array the array_unshift does exactly that for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-to-array-using-square-brackets"&gt;
  &lt;/a&gt;
  Add to array using square brackets:
&lt;/h2&gt;

&lt;p&gt;The square bracket method to add to array is one of the most commonly used methods. Most articles on the topic recommend the use of this method because of its efficiency.  In comparison to the other methods, it adds to array without the overhead of calling a function. But the downside is that it can only add one argument at a time. The syntax is as follows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-square-bracket-method"&gt;
  &lt;/a&gt;
  Syntax of Square Bracket method
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here &lt;code&gt;array&lt;/code&gt; refers to the array you are adding to. And &lt;code&gt;element&lt;/code&gt; is the element you are looking to add to array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
         &lt;span class="s1"&gt;'JavaScript'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;'Python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;'C++'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Now, let's add to the array&lt;/span&gt;

&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'PHP'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//Output&lt;/span&gt;
&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"Javascript"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"Python"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"C++"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"PHP"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, &lt;code&gt;PHP&lt;/code&gt; was added to the end of the array. This method can be used to add to array in PHP. But although it is efficient, adding more than one element would be a hassle while using this method.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-arraypush-method"&gt;
  &lt;/a&gt;
  Using the array_push method:
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;array_push&lt;/code&gt; is an inbuilt function in PHP that can be used to add to array as well. Where this method stands out from the previous method is that it can be used to add multiple elements to an array at once. The syntax is as follows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax-of-arraypush"&gt;
  &lt;/a&gt;
  Syntax of array_push
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nb"&gt;array_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#parameters"&gt;
  &lt;/a&gt;
  Parameters
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;array&lt;/code&gt; - Required, this parameter specifies the array you are looking to append&lt;/p&gt;

&lt;p&gt;&lt;code&gt;value1&lt;/code&gt; - The value that you are looking to add to array&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#return-values"&gt;
  &lt;/a&gt;
  Return Values
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;array_push&lt;/code&gt; returns the number of elements in the array.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-and-explanation"&gt;
  &lt;/a&gt;
  Code and Explanation:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="s1"&gt;'JavaScript'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;'Python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s1"&gt;'C++'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Now, let's add to the array&lt;/span&gt;

&lt;span class="nb"&gt;array_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'PHP'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'HTML'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CSS'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;var_dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"Javascript"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"Python"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"C++"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"PHP"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"HTML"&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s2"&gt;"CSS"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see the &lt;code&gt;array_push&lt;/code&gt; in PHP adds to array the passed elements.&lt;/p&gt;

&lt;p&gt;However, It is important to remember that the function returns the length and not the appended array after you have used it to add to array in PHP. This is important because assigning the function to a variable and printing it would not return your desired output. The below code explains the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
         &lt;span class="s1"&gt;'JavaScript'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;'Python'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="s1"&gt;'C++'&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//Now, let's add to the array&lt;/span&gt;

&lt;span class="nv"&gt;$new_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$skillset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'PHP'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'HTML'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'CSS'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$new_array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code outputs &lt;code&gt;6&lt;/code&gt; which is the length of the updated array that you desired.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations-and-caveats"&gt;
  &lt;/a&gt;
  Limitations and Caveats
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Remember the square bracket is more efficient and should always be chosen when you are looking to add one or two elements to an array in PHP.&lt;/li&gt;
&lt;li&gt;While using square brackets to add to array, ensure that the name of the existing array is entered correctly because if the name passed is wrong a new array would be created.&lt;/li&gt;
&lt;li&gt;The array_push returns a warning when the array you are looking to add to does not exist.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>php</category>
      <category>beginners</category>
      <category>tut</category>
    </item>
    <item>
      <title>Five classic AWS posts - June 2021</title>
      <author>Helen Anderson</author>
      <pubDate>Mon, 07 Jun 2021 10:13:10 +0000</pubDate>
      <link>https://dev.to/aws-heroes/five-classic-aws-posts-june-2021-17o5</link>
      <guid>https://dev.to/aws-heroes/five-classic-aws-posts-june-2021-17o5</guid>
      <description>&lt;p&gt;Hi! I'm Helen, one of your AWS Heroes! &lt;/p&gt;

&lt;p&gt;Each month I'll be taking a trip down memory lane and showcasing some classic AWS posts. Some of these might be your 'go-to' resources already, others may offer some new insight or ideas.&lt;/p&gt;

&lt;p&gt;Let's jump into the posts!&lt;/p&gt;




&lt;p&gt;To get us started we have &lt;a href="https://dev.to/swyx"&gt;swyx&lt;/a&gt; with a review of Alex DeBrie's book tackling DynamoDB. Check it out for accessible technical writing of a very abstract and complex subject.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/swyx" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ojA0BfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HuQ70Dya--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/47766/26fbd2bf-c352-447c-9b4f-f66652dc4899.jpg" alt="swyx image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/swyx/5-things-i-learned-from-the-dynamodb-book-ljc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Things I Learned from The DynamoDB Book&lt;/h2&gt;
      &lt;h3&gt;swyx ・ Apr 7 '20 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#books&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#dynamodb&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#database&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Next, we have &lt;a href="https://dev.to/nideveloper"&gt;Matt&lt;/a&gt; and the 20 fully deployable serverless architecture patterns at cdkpatterns.com, all built with AWS CDK TypeScript/Python and all including the vanilla CloudFormation Template.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/nideveloper" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mIs0j92M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DxTcaqtz--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/344151/981e1051-b576-4a48-955f-3b6bcf891f58.png" alt="nideveloper image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nideveloper/cdk-patterns-at-20-let-s-walk-through-all-20-serverless-patterns-for-aws-d1n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;CDK Patterns at 20! Let's Walk Through all 20 Serverless Patterns for AWS&lt;/h2&gt;
      &lt;h3&gt;Matt Coulter ・ Jul 14 '20 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#cdk&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;&lt;a href="https://dev.to/rakannimer"&gt;Rakan&lt;/a&gt; then shares how to build an SEO friendly server-rendered realtime collaborative todo list app with Next.js and AWS Amplify&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/rakannimer" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZH9UkAxB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--mcvsp3Nn--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/82967/4f782d95-92d5-4bf2-8b94-a73f94a33d5c.jpeg" alt="rakannimer image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/rakannimer/server-side-rendered-real-time-web-app-with-next-js-aws-amplify-graphql-2j49" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Server-Side Rendered Real-time Web App with Next.js, AWS Amplify &amp;amp; GraphQL&lt;/h2&gt;
      &lt;h3&gt;Rakan Nimer ・ Jul 25 '19 ・ 12 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#amplify&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Moving on to another classic tutorial, this time from &lt;a href="https://dev.to/grahamlyons"&gt;Graham&lt;/a&gt; with a run down of everything they've learnt from building and using network infrastructure on AWS.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/grahamlyons" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CHgrQnRg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2C8vTXAR--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/10761/1Cq-82wm.jpg" alt="grahamlyons image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/grahamlyons/everything-you-need-to-know-about-networking-on-aws-4bkf" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Everything You Need To Know About Networking On AWS&lt;/h2&gt;
      &lt;h3&gt;Graham Lyons ・ Jan 28 '18 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#networking&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;Our last classic post this month is from &lt;a href=""&gt;Kevin&lt;/a&gt; with a great analogy for how AWS works. If you understand how a brewery works, then you can get started with AWS.&lt;/p&gt;





&lt;div class="ltag__link"&gt;
  &lt;a href="/kbk0125" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G0_bYCr---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--T4Q21CnI--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/55456/42269bac-3e2b-41f6-a1c5-7a84edd26e6b.jpg" alt="kbk0125 image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/kbk0125/amazon-web-services-aws-explained-by-operating-abrewery-2j0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Amazon Web Services (AWS) Explained by Operating a Brewery&lt;/h2&gt;
      &lt;h3&gt;Kevin Kononenko ・ Aug 30 '18 ・ 8 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;








&lt;p&gt;That's all for this month! For more great posts check out the &lt;a href="https://dev.to/t/aws"&gt;#aws tag&lt;/a&gt; and the &lt;a href="https://dev.to/aws-heroes"&gt;AWS Heroes&lt;/a&gt;.&lt;/p&gt;




</description>
      <category>aws</category>
      <category>bestofdev</category>
      <category>classicdev</category>
    </item>
    <item>
      <title>Mark Down for Newbies</title>
      <author>Abayomi Ogunnusi</author>
      <pubDate>Mon, 07 Jun 2021 10:06:31 +0000</pubDate>
      <link>https://dev.to/drsimplegraffiti/mark-down-for-newbies-ab7</link>
      <guid>https://dev.to/drsimplegraffiti/mark-down-for-newbies-ab7</guid>
      <description>&lt;p&gt;Written by: Abayomi Ogunnusi&lt;/p&gt;

&lt;p&gt;According to the official site definition. Markdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. Created by John Gruber in 2004, Markdown is now one of the world’s most popular markup languages.&lt;/p&gt;

&lt;p&gt;This is the basics of clear communication used in most version control and collaborative platforms such as Github. &lt;/p&gt;

&lt;p&gt;In this post I will be giving a summary of the commonly used markdown syntax. For clarity sake, the raw format are written above and the output of the markdown are written below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#headings-are-written-with-hashtags-one-is-equivalent-to-the-h1-in-html-syntax-and-so-on"&gt;
  &lt;/a&gt;
  Headings are written with hashtags. One '#' is equivalent to the 'h1' in HTML syntax and so on.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# h1
## h2
### h3
#### h4
##### h5
###### h6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#h1"&gt;
  &lt;/a&gt;
  h1
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#h2"&gt;
  &lt;/a&gt;
  h2
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#h3"&gt;
  &lt;/a&gt;
  h3
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#h4"&gt;
  &lt;/a&gt;
  h4
&lt;/h4&gt;
&lt;h5&gt;
  &lt;a href="#h5"&gt;
  &lt;/a&gt;
  h5
&lt;/h5&gt;
&lt;h6&gt;
  &lt;a href="#h6"&gt;
  &lt;/a&gt;
  h6
&lt;/h6&gt;
&lt;h2&gt;
  &lt;a href="#lists"&gt;
  &lt;/a&gt;
  Lists
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;lists can be written with - or * or + sign symbols. 
## Unordered list 
- first time
- first time
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#unordered-list"&gt;
  &lt;/a&gt;
  Unordered list
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;first time&lt;/li&gt;
&lt;li&gt;first time
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;or use: 
* item 1
* item 2
* item 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;item 1&lt;/li&gt;
&lt;li&gt;item 2&lt;/li&gt;
&lt;li&gt;item 3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#nested-list-using-hyphen-always-ensure-you-put-space-after-the-hyphen"&gt;
  &lt;/a&gt;
  Nested list using hyphen. Always ensure you put space after the hyphen
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- first time
- first time
  - second time
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;first time&lt;/li&gt;
&lt;li&gt;first time

&lt;ul&gt;
&lt;li&gt;second time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#progress-list"&gt;
  &lt;/a&gt;
  Progress list
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- [ ] item 1
- [ ] item 2
- [ ] item 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;[ ] item 1&lt;/li&gt;
&lt;li&gt;[ ] item 2&lt;/li&gt;
&lt;li&gt;[ ] item &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#check-list-or-task-list"&gt;
  &lt;/a&gt;
  check list or task list
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- [x] item 1
- [x] item 2
- [x] item 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;[x] item 1&lt;/li&gt;
&lt;li&gt;[x] item 2&lt;/li&gt;
&lt;li&gt;[x] item 3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#the-above-list-could-also-be-written-as"&gt;
  &lt;/a&gt;
  The above list could also be written as
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* [x] item 1
* [x] item 2
* [x] item 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;[x] item 1&lt;/li&gt;
&lt;li&gt;[x] item 2&lt;/li&gt;
&lt;li&gt;[x] item 3&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#ordered-list"&gt;
  &lt;/a&gt;
  Ordered list
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. item 1
2. item 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;item 1&lt;/li&gt;
&lt;li&gt;item 2&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#github-list-reordering-occurs-automatically"&gt;
  &lt;/a&gt;
  GitHub list: Reordering occurs automatically
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1. item 1
1. item 2
1. item 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;item 1&lt;/li&gt;
&lt;li&gt;item 2&lt;/li&gt;
&lt;li&gt;item 3&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[this contain the link description](this contains the actual link)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="http://localhost:3000"&gt;HOMEPAGE&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#links-with-title"&gt;
  &lt;/a&gt;
  Links with title
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[this contain the link description](this contains the actual link "this contains the link alt text")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="http://webglance.com"&gt;web glance&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#inline-code-using-the-backtick"&gt;
  &lt;/a&gt;
  Inline code using the backtick
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this is an inline `code`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;this is an inline &lt;code&gt;code&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#block-of-codes-use-three-surrounding-back-ticks-used-in-writing-specific-language-syntax-ensure-to-put-the-language-immediately-after-the-backtick-as-shown-below"&gt;
  &lt;/a&gt;
  Block of codes use three surrounding back ticks used in writing specific language syntax. Ensure to put the language immediately after the backtick as shown below.
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; a paragraph example&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; a paragraph example&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#before-and-after-results-using-block-quotes"&gt;
  &lt;/a&gt;
  Before and after results using block quotes
&lt;/h2&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log('test')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;after&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log('new test')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;the above code block can be re-written as :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-console.log('test`)
&lt;/span&gt;&lt;span class="gi"&gt;+console.log('new test`)
&lt;/span&gt;&lt;span class="p"&gt;console.log('neutral')
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;diff&lt;br&gt;
-console.log('test&lt;code&gt;)&lt;br&gt;
+console.log('new test&lt;/code&gt;)&lt;br&gt;
console.log('neutral')&lt;/p&gt;

&lt;p&gt;Block quotes&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; this is a block quote
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;this is a block quote&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#adding-pictures"&gt;
  &lt;/a&gt;
  Adding pictures
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;![image](http://picsum.photos/200/200)
![purple markdown icon](http://markdown-here.com/img/icon256.png)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AbUqIQdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://picsum.photos/200/200" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbUqIQdR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://picsum.photos/200/200" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xJu7jekc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://markdown-here.com/img/icon256.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xJu7jekc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://markdown-here.com/img/icon256.png" alt="purple markdown icon"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#emphasis-strong"&gt;
  &lt;/a&gt;
  Emphasis (strong)
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this is a bold **text**
or __bold__
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;this is a bold &lt;strong&gt;text&lt;/strong&gt;&lt;br&gt;
or &lt;strong&gt;bold&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#emphasis-italics"&gt;
  &lt;/a&gt;
  Emphasis (italics)
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;This is an *italics*
or 
_italics_
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is an &lt;em&gt;italics&lt;/em&gt;&lt;br&gt;
or &lt;br&gt;
&lt;em&gt;italics&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#writing-language-syntax-using-markdown"&gt;
  &lt;/a&gt;
  Writing language syntax using markdown
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#tables"&gt;
  &lt;/a&gt;
  Tables
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;| User | Email  |
| --- | --- |
| abayomi | abayomiogunnusi@gmail.com |
| isreal | isreal@gmail.com |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;User&lt;/th&gt;
&lt;th&gt;Email&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;abayomi&lt;/td&gt;
&lt;td&gt;&lt;a href="mailto:abayomiogunnusi@gmail.com"&gt;abayomiogunnusi@gmail.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isreal&lt;/td&gt;
&lt;td&gt;&lt;a href="mailto:isreal@gmail.com"&gt;isreal@gmail.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#tables"&gt;
  &lt;/a&gt;
  Tables
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Frond-End&lt;/th&gt;
&lt;th&gt;Back-End&lt;/th&gt;
&lt;th&gt;Full Stack&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HTML, CSS, JS&lt;/td&gt;
&lt;td&gt;NODE JS, MONGODB&lt;/td&gt;
&lt;td&gt;HTML, MONGODB,...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;REACT, BOOTSTRAP&lt;/td&gt;
&lt;td&gt;EXPRESS, MONGOOSE&lt;/td&gt;
&lt;td&gt;DOCKER&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#strike-through-is-achieved-using-"&gt;
  &lt;/a&gt;
  strike through is achieved using ~~ ~~
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~~strike~~
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;del&gt;strike&lt;/del&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#checklist"&gt;
  &lt;/a&gt;
  Checklist
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- [ ] abayomi
- [ ] abayomi
- [ ] abayomi
- [ ] abayomi
- [x] abayomi
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;[ ] abayomi&lt;/li&gt;
&lt;li&gt;[ ] abayomi&lt;/li&gt;
&lt;li&gt;[ ] abayomi&lt;/li&gt;
&lt;li&gt;[ ] abayomi&lt;/li&gt;
&lt;li&gt;[x] abayomi&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#tag-people-use-the-symbol"&gt;
  &lt;/a&gt;
  Tag people use the '@' symbol
&lt;/h2&gt;

&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/wowzone"&gt;@wowzone&lt;/a&gt;
&lt;br&gt;&lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/deenn"&gt;@deenn&lt;/a&gt;
 &lt;br&gt;
&lt;a class="mentioned-user" href="https://dev.to/drsimplegraffiti"&gt;@drsimplegraffiti&lt;/a&gt;
 &lt;/p&gt;


&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CNFfRqkAPcd/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/drsimplegraffiti"&gt;
        drsimplegraffiti
      &lt;/a&gt; / &lt;a href="https://github.com/drsimplegraffiti/drsimplegraffiti"&gt;
        drsimplegraffiti
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Config files for my GitHub profile.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Hi 👋, I'm Abayomi&lt;/h1&gt;
&lt;h3&gt;
A passionate developer from Nigeria&lt;/h3&gt;
&lt;p&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0221f07f12f1c558b0bb19eb613b97fb328311347f96c85e1e3e0d5abbef3c16/68747470733a2f2f6b6f6d617265762e636f6d2f67687076632f3f757365726e616d653d647273696d706c656772616666697469266c6162656c3d50726f66696c65253230766965777326636f6c6f723d306537356236267374796c653d666c6174"&gt;&lt;img src="https://camo.githubusercontent.com/0221f07f12f1c558b0bb19eb613b97fb328311347f96c85e1e3e0d5abbef3c16/68747470733a2f2f6b6f6d617265762e636f6d2f67687076632f3f757365726e616d653d647273696d706c656772616666697469266c6162656c3d50726f66696c65253230766965777326636f6c6f723d306537356236267374796c653d666c6174" alt="drsimplegraffiti"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt; &lt;a href="https://github.com/ryo-ma/github-profile-trophy"&gt;&lt;img src="https://camo.githubusercontent.com/5b0425119d718a2d7a29a18c91a874bf87d18b05bf7565b62eb133731bffe04d/68747470733a2f2f6769746875622d70726f66696c652d74726f7068792e76657263656c2e6170702f3f757365726e616d653d647273696d706c656772616666697469" alt="drsimplegraffiti"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt; &lt;a href="https://twitter.com/drsimplegraffi1" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0d465f23af0c86fcbd93694bafaed3eb69691738e2fbdcfaa4aa0dbe1d559962/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f647273696d706c65677261666669313f6c6f676f3d74776974746572267374796c653d666f722d7468652d6261646765" alt="drsimplegraffi1"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;👨‍💻 All of my projects are available at &lt;a href="https://raw.githubusercontent.com/drsimplegraffiti/drsimplegraffiti/main/drsimplegraffiti.github.io"&gt;drsimplegraffiti.github.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;📫 How to reach me &lt;strong&gt;&lt;a href="https://raw.githubusercontent.com/drsimplegraffiti/drsimplegraffiti/main/mailto:abayomiogunnusi@gmail.com"&gt;abayomiogunnusi@gmail.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;⚡ Fun fact &lt;strong&gt;I'm an alien&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Connect with me:&lt;/h3&gt;
&lt;p&gt;
&lt;a href="https://codepen.io/drsimplegraffiti" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EQi-OpH8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/neutral-icons/src/images/icons/Social/codepen.svg" alt="drsimplegraffiti" height="30" width="40"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/drsimplegraffi1" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A1jjnQT0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/neutral-icons/src/images/icons/Social/twitter.svg" alt="drsimplegraffi1" height="30" width="40"&gt;&lt;/a&gt;
&lt;a href="https://stackoverflow.com/users/15661401" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aKnwUnJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/neutral-icons/src/images/icons/Social/stack-overflow.svg" alt="15661401" height="30" width="40"&gt;&lt;/a&gt;
&lt;a href="https://instagram.com/drsimplegraffiti" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---3kWSyoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/neutral-icons/src/images/icons/Social/instagram.svg" alt="drsimplegraffiti" height="30" width="40"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h3&gt;
Languages and Tools:&lt;/h3&gt;
&lt;p&gt; &lt;a href="https://getbootstrap.com" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38b8DYFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/bootstrap/bootstrap-plain-wordmark.svg" alt="bootstrap" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.w3schools.com/css/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mHD1LdvX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/css3/css3-original-wordmark.svg" alt="css3" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://expressjs.com" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Np3l8NWm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/express/express-original-wordmark.svg" alt="express" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://git-scm.com/" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/fbfcb9e3dc648adc93bef37c718db16c52f617ad055a26de6dc3c21865c3321d/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f6769742d73636d2f6769742d73636d2d69636f6e2e737667" alt="git" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.w3.org/html/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QXRvq6Ke--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/html5/html5-original-wordmark.svg" alt="html5" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.adobe.com/in/products/illustrator.html" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/9e245893108b5ca27e7ac3d4a802d513f657b32aa7b5765bd92df7fb55d0ed54/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f61646f62655f696c6c7573747261746f722f61646f62655f696c6c7573747261746f722d69636f6e2e737667" alt="illustrator" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QG_b2spU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg" alt="javascript" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.mongodb.com/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V-ExagyZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/mongodb/mongodb-original-wordmark.svg" alt="mongodb" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://nodejs.org" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Zw8Pc0Q8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/nodejs/nodejs-original-wordmark.svg" alt="nodejs" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.photoshop.com/en" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sf0HeNaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/photoshop/photoshop-line.svg" alt="photoshop" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://postman.com" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/93b32389bf746009ca2370de7fe06c3b5146f4c99d99df65994f9ced0ba41685/68747470733a2f2f7777772e766563746f726c6f676f2e7a6f6e652f6c6f676f732f676574706f73746d616e2f676574706f73746d616e2d69636f6e2e737667" alt="postman" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://reactjs.org/" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q7e3Gep6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/react/react-original-wordmark.svg" alt="react" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://sass-lang.com" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZefvAmh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/sass/sass-original.svg" alt="sass" width="40" height="40"&gt; &lt;/a&gt; &lt;a href="https://www.adobe.com/products/xd.html" rel="nofollow"&gt; &lt;img src="https://camo.githubusercontent.com/c205ecbe12500177d102169d97bc1c17c545155fdf5ec78c08d54ac53e5b38c1/68747470733a2f2f63646e2e776f726c64766563746f726c6f676f2e636f6d2f6c6f676f732f61646f62652d78642e737667" alt="xd" width="40" height="40"&gt; &lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/600a51e3614bad11537732d6a182b66ea04748f5225d2db4123a154d315c469a/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f746f702d6c616e67733f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e266c61796f75743d636f6d70616374"&gt;&lt;img src="https://camo.githubusercontent.com/600a51e3614bad11537732d6a182b66ea04748f5225d2db4123a154d315c469a/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f746f702d6c616e67733f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e266c61796f75743d636f6d70616374" alt="drsimplegraffiti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4b87d0951cc2628ad9b0c95e00dd0c10dcb4d4c85bfd2e662ecef3f64069bab6/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e"&gt;&lt;img src="https://camo.githubusercontent.com/4b87d0951cc2628ad9b0c95e00dd0c10dcb4d4c85bfd2e662ecef3f64069bab6/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d647273696d706c6567726166666974692673686f775f69636f6e733d74727565266c6f63616c653d656e" alt="drsimplegraffiti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/452232592ebf9c9a7800f859a1ddbc83e6798e063daa551312e6689ef899e54d/68747470733a2f2f6769746875622d726561646d652d73747265616b2d73746174732e6865726f6b756170702e636f6d2f3f757365723d647273696d706c65677261666669746926"&gt;&lt;img src="https://camo.githubusercontent.com/452232592ebf9c9a7800f859a1ddbc83e6798e063daa551312e6689ef899e54d/68747470733a2f2f6769746875622d726561646d652d73747265616b2d73746174732e6865726f6b756170702e636f6d2f3f757365723d647273696d706c65677261666669746926" alt="drsimplegraffiti"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/drsimplegraffiti/drsimplegraffiti"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>markdown</category>
      <category>readme</category>
      <category>github</category>
      <category>syntax</category>
    </item>
    <item>
      <title>Help with JavaScript Learning Roadmap</title>
      <author>JoelBonetR</author>
      <pubDate>Mon, 07 Jun 2021 10:01:58 +0000</pubDate>
      <link>https://dev.to/joelbonetr/help-with-javascript-learning-roadmap-3m85</link>
      <guid>https://dev.to/joelbonetr/help-with-javascript-learning-roadmap-3m85</guid>
      <description>&lt;p&gt;Hi community, I need help and I believe that it can also help tones of people so i'll go straight to the point with the Use case: &lt;/p&gt;

&lt;p&gt;A friend of mine wants to enter the project development world and he wants to be a JS full stack dev.&lt;/p&gt;

&lt;p&gt;The end requirements would be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Javascript (^ES6)&lt;/li&gt;
&lt;li&gt; Services and Microservices &lt;/li&gt;
&lt;li&gt;React
&lt;ul&gt;
&lt;li&gt; Redux&lt;/li&gt;
&lt;li&gt; Hooks&lt;/li&gt;
&lt;/ul&gt;




&lt;/li&gt;

&lt;li&gt; Node.js

&lt;ul&gt;
&lt;li&gt; Express&lt;/li&gt;
&lt;li&gt; PostgreSQL &lt;/li&gt;
&lt;li&gt; Sequelize &lt;/li&gt;
&lt;li&gt; Mongo DB &lt;/li&gt;
&lt;li&gt; Mongoose &lt;/li&gt;
&lt;li&gt; Apollo (after GraphQL) &lt;/li&gt;
&lt;ul&gt;&lt;/ul&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt; GraphQL &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm always hands on tones of things and &lt;strong&gt;I would like to specialise myself on JS too &lt;/strong&gt; because i'm coding since 10+ years ago but worked with java, php, asp, html, css, Sass, bootstrap, js, C++, react, preact, angular and other languages and libs, so I also need that (I feel kinda frustrated and I want to keep a main language and the overall environment), plus I love JS.&lt;/p&gt;

&lt;p&gt;So here I am asking for your experience on this questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Should I add (or remove) other stuff in the requirements? Which ones and Why?&lt;/li&gt;
&lt;li&gt;The learning roadmap I set (in order) would be fine and suffice or it lacks something? &lt;/li&gt;
&lt;li&gt;Do you think the roadmap would be the same for me (10+ years of coding experience) than for my friend (a complete begginer that knows something about HTML and CSS only)?&lt;/li&gt;
&lt;li&gt; Feel free to comment whatever you feel like about the topic &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>learning</category>
      <category>career</category>
      <category>help</category>
    </item>
    <item>
      <title>Conway's Game of Life 🎮 on JavaScript</title>
      <author>vladimirschneider</author>
      <pubDate>Mon, 07 Jun 2021 09:43:14 +0000</pubDate>
      <link>https://dev.to/vladimirschneider/conway-s-game-of-life-on-javascript-212o</link>
      <guid>https://dev.to/vladimirschneider/conway-s-game-of-life-on-javascript-212o</guid>
      <description>&lt;p&gt;Hi, last night I was watching video on YouTube with title &lt;em&gt;"Math Has a Fatal Flaw"&lt;/em&gt;. I saw Conway's Game of Life there.&lt;/p&gt;

&lt;p&gt;I think every programmer should write the game, but for 4 years of programming experience I have never written this 😔.&lt;/p&gt;

&lt;p&gt;The Post about How did I write Conway's Game of Life on JavaScript.&lt;/p&gt;

&lt;p&gt;I know that this code is &lt;strong&gt;NOT&lt;/strong&gt; a best practice, actually I think that this code is terrible. &lt;strong&gt;DO NOT WRITE&lt;/strong&gt; like that.&lt;/p&gt;

&lt;p&gt;Last night I thought that I cannot write this game and It was sad 😵‍💫 but I was able.&lt;/p&gt;

&lt;p&gt;For start I define constants.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;START_NUMBERS_OF_CELL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2000&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CELL_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LIFE_WIDTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetWidth&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LIFE_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;offsetHeight&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;GAME_BOARD_BACKGROUND_COLOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am using the screen size of the user's device for the size of the game board. I defined &lt;code&gt;START_NUMBERS_OF_CELL&lt;/code&gt;, &lt;code&gt;CELL_SIZE&lt;/code&gt; and &lt;code&gt;GAME_BOARD_BACKGROUND_COLOR&lt;/code&gt; too so I can to configuration my game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cells-class"&gt;
  &lt;/a&gt;
  Cell's Class
&lt;/h2&gt;

&lt;p&gt;I am using ECMAScript classes in my JavaScript code and canvas for drawing game for users.&lt;/p&gt;

&lt;p&gt;I wanna start for Cell's class because this class is very simple class.&lt;/p&gt;

&lt;p&gt;In order to draw Cell on canvas I need canvas context and &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; coordinates&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Cell&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know that I should kill cell If cell has not 2 or 3 neighbors so I need draw and dead methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Cell&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;

    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;CELL_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;CELL_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;CELL_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;CELL_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ffffff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;dead&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;GAME_BOARD_BACKGROUND_COLOR&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I defined neighbors variable like privet variable and did setter and getter methods for work with it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Cell&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;neighbors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="c1"&gt;//...&lt;/span&gt;

    &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;neighbors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;neighbors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;neighbors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;neighbors&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;neighbors&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;neighbors&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lifes-class"&gt;
  &lt;/a&gt;
  Life's Class
&lt;/h2&gt;

&lt;p&gt;Let's start Life class.&lt;/p&gt;

&lt;p&gt;In Life class' constructor I passed &lt;code&gt;HTMLCanvasElement&lt;/code&gt; and define canvas context, draw background and define array of cell. I have array of arrays so that I filled &lt;code&gt;this.cells&lt;/code&gt; a empty items.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Life&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvasWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;LIFE_WIDTH&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;CELL_SIZE&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvasHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;LIFE_HEIGHT&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;CELL_SIZE&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;LIFE_WIDTH&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;LIFE_HEIGHT&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;GAME_BOARD_BACKGROUND_COLOR&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvasWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvasHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that I did cycle from 0 to our START_NUMBERS_OF_CELL constant so that I fill of cells the game board. I generate random random position for cells and check If the cell is not in &lt;code&gt;this.cells&lt;/code&gt; I create new a cell and drawing it. After that I need run the game. I am using &lt;code&gt;requestAnimationFrame&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Life&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//...&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;START_NUMBERS_OF_CELL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cellXPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvasWidth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cellYPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvasHeight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cellXPosition&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;cellYPosition&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cellXPosition&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;cellYPosition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cellXPosition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cellYPosition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cellXPosition&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;cellYPosition&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deadWave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deadWave&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nx"&gt;requestAnimationFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;deadWave&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;deadWave&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After initialization the game board I have left write &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules"&gt;rules of the game&lt;/a&gt; in &lt;code&gt;deadWave&lt;/code&gt; method:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Any live cell with fewer than two live neighbours dies, as if by underpopulation.&lt;/li&gt;
&lt;li&gt;Any live cell with two or three live neighbours lives on to the next generation.&lt;/li&gt;
&lt;li&gt;Any live cell with more than three live neighbours dies, as if by overpopulation.&lt;/li&gt;
&lt;li&gt;Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In &lt;code&gt;deadWave&lt;/code&gt; method I have cycle for check cell neighbor and boring new cells using rules and cycle for dead cells&lt;/p&gt;

&lt;p&gt;Cycles start like that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//...&lt;/span&gt;

&lt;span class="nx"&gt;deadWave&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvasWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvasHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//...&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvasWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvasHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//...&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In first cycle in start of iteration I check that cell by &lt;code&gt;i, j&lt;/code&gt; address is exist and if it is I set &lt;code&gt;neighbor&lt;/code&gt; of cell is 0.&lt;/p&gt;

&lt;p&gt;Next I check every neighbor cell (in total is 8) and If neighbor cell is exist I count it.&lt;/p&gt;

&lt;p&gt;In the end of cycle I check that cell is exist and if it is I set count of neighbors to cell If cell is not exist I do boring of cell and set neighbor is 2 because next cycle If cell have not neighbor cell will be dead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//...&lt;/span&gt;

&lt;span class="nx"&gt;deadWave&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvasWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvasHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;neighbors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;countAroundCells&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

            &lt;span class="c1"&gt;//...&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;neighbors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;countAroundCells&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;countAroundCells&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Cell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;draw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;randomColor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next cycle if a cell is exist I check that the cell is newborn and if is it I set newborn &lt;code&gt;false&lt;/code&gt; value. If the cell is not newborn I kill the cell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//...&lt;/span&gt;

&lt;span class="nx"&gt;deadWave&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvasWidth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvasHeight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;newborn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;newborn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;neighbors&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;neighbors&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;dead&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cells&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally I should call deadWave method again and again so that I call &lt;code&gt;requestAnimationFrame(this.deadWave)&lt;/code&gt; in the end of the method.&lt;/p&gt;

&lt;p&gt;Thank you for reading the post ☺️&lt;/p&gt;

&lt;p&gt;Full code you can see in &lt;a href="https://github.com/vladimirschneider/the-game-of-life"&gt;GitHub repository&lt;/a&gt; or live demo &lt;a href="https://vladimirschneider.github.io/the-game-of-life/"&gt;right now&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>gamedev</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The whole community around Open Source is extremely valuable, says Veed.io’s Stefan Feješ</title>
      <author>GitNation</author>
      <pubDate>Mon, 07 Jun 2021 07:53:30 +0000</pubDate>
      <link>https://dev.to/gitnation/the-whole-community-around-open-source-is-extremely-valuable-says-veed-io-s-stefan-fejes-2bbi</link>
      <guid>https://dev.to/gitnation/the-whole-community-around-open-source-is-extremely-valuable-says-veed-io-s-stefan-fejes-2bbi</guid>
      <description>&lt;p&gt;&lt;em&gt;Five years ago, open source was predicted to have a murky future. Fortunately, none of these prophecies came true: open source is not only thriving, it’s also commercially successful. The community is becoming ever more global, and projects are becoming more complex and interesting. That is why &lt;a href="https://gitnation.org"&gt;GitNation&lt;/a&gt; organizes an awards ceremony for the whole OSS scene – &lt;a href="https://osawards.com/javascript/"&gt;Open Source Awards&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We’ve talked to &lt;a href="https://twitter.com/fejes713"&gt;Stefan Feješ&lt;/a&gt;, a software engineer who created the 6th fastest growing open source project of 2018. Stefan was featured as a speaker at some of the most prominent conferences around the world, and he has also organized and hosted multiple editions of Open Source Awards.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jWxBtR6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8z2m4alysntgxui0udwf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jWxBtR6b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8z2m4alysntgxui0udwf.jpg" alt="JavaScript Open Source Awards trophies at JSNation Amsterdam 2019"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stefan-57-years-ago-it-was-popular-to-predict-the-end-of-open-source-there-was-an-endless-number-of-headlines-like-why-open-source-is-going-to-die-or-why-open-source-will-never-beat-paid-software"&gt;
  &lt;/a&gt;
  Stefan, 5-7 years ago it was popular to predict the end of open source. There was an endless number of headlines like "Why open source is going to die" or "Why open source will never beat paid software".
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#today-we-see-the-total-opposite-with-open-source-evolving-and-being-in-demand-more-than-ever-what-are-the-trends-driving-the-development-of-modern-open-source-today"&gt;
  &lt;/a&gt;
  Today we see the total opposite, with open source evolving and being in demand more than ever. What are the trends driving the development of modern open source today?
&lt;/h3&gt;

&lt;p&gt;— I got into open source about five years ago when the whole "open source is going to die" era was over. The most significant buzz around open source back then was about creators not being able to do it for a living due to the nature of open source software (hint: it's free). &lt;/p&gt;

&lt;p&gt;I think few factors contributed to the much healthier open source environment that we have today.&lt;/p&gt;

&lt;p&gt;The dev community got larger; companies started supporting open source by involving their talent in open source projects (think about React.js) and investing financial resources to make it sustainable. We also saw hundreds of conferences that celebrated open source success and connected communities worldwide.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OVqUfG0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi04ds6gnfyw64u4p8et.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OVqUfG0E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi04ds6gnfyw64u4p8et.png" alt="Max Stoiber and Stefan Feješ MCing the React Open Source Awards 2021"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-companies-and-customers-benefit-from-open-source"&gt;
  &lt;/a&gt;
  How can companies and customers benefit from open source?
&lt;/h3&gt;

&lt;p&gt;— I think companies benefit quite a lot from open source. When we talk about big companies with their projects, such as Google, Microsoft, Facebook, and others, the benefits are obvious. They can run massive projects with the help of others, build a community around their product (think about VSCode), or easily attract talent passionate about working with them.&lt;/p&gt;

&lt;p&gt;Smaller companies with limited resources also rely on open source to get their project to market much faster. Shipping MVPs with all open source frameworks and libraries got much faster and easier than running a company in the old days. &lt;/p&gt;

&lt;p&gt;On the other hand, the end customer doesn't care about the tech stack behind the software they are using - all they care is about “jobs to be done”. Still, open source pushes the boundaries of available technologies, which helps with overall speed, user experience, and user satisfaction. So I'd say that everyone in the ecosystem benefits from open source quite a lot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-it-true-that-open-source-applications-are-less-prone-to-bugs-and-other-issues"&gt;
  &lt;/a&gt;
  Is it true that open source applications are less prone to bugs and other issues?
&lt;/h3&gt;

&lt;p&gt;— I think it depends from project to project. Larger projects with the bigger community around them tend to be used by many companies out there, so naturally, since more eyes are looking for bugs, there are fewer bugs in such projects. In small projects built by a single maintainer, it's expected to see more bugs, but the beauty of open source is that you can quickly fix them yourself, help the maintainer, and not rely on a 3rd party to do it for you. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-not-make-the-picture-onesided-lets-talk-about-the-disadvantages-of-open-source"&gt;
  &lt;/a&gt;
  To not make the picture one-sided, let's talk about the disadvantages of open source.
&lt;/h3&gt;

&lt;p&gt;The community benefits quite a lot from open source, but a specific group of people expects everything to be served to them for free without investing any effort. In case of a bug, missing documentation, or required feature, you'll sometimes see lots of toxicity among certain members - they want a solution to their problem and treat open source like the product they bought - not something that community made for everyone. This toxicity puts a lot of pressure on project creators who want to make sure everyone has a great experience with the software they created.&lt;/p&gt;

&lt;p&gt;Luckily those are just minority and with an overall fantastic community the general situation is much brighter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cwqgOLzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkj2dx4p8mll3bvn5320.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cwqgOLzo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkj2dx4p8mll3bvn5320.jpg" alt="JavaScript Open Source Awards ceremony at JSNation Amsterdam 2019" title="JavaScript Open Source Awards ceremony at JSNation Amsterdam 2019"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#opensource-was-once-thought-to-be-less-secure-than-proprietary-products-however-numerous-independent-studies-have-shown-that-its-now-on-average-safer-than-its-proprietary-counterpart-what-do-you-think-about-that"&gt;
  &lt;/a&gt;
  Open-source was once thought to be less secure than proprietary products. However, numerous independent studies have shown that it’s now, on average, safer than its proprietary counterpart. What do you think about that?
&lt;/h3&gt;

&lt;p&gt;— Again it's hard to come up with a general comparison, but one clear benefit of open source software is that code is available to everyone. More eyes will look for security flaws in projects with many users, and more developers would fix such issues.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#if-you-start-working-on-an-open-source-project-you-immediately-make-friends-with-the-people-involved-in-it-you-can-learn-from-them-and-exchange-ideas"&gt;
  &lt;/a&gt;
  If you start working on an open source project, you immediately make friends with the people involved in it. You can learn from them and exchange ideas.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#do-you-consider-the-open-source-awards-a-good-way-to-show-appreciation-for-the-community"&gt;
  &lt;/a&gt;
  Do you consider the &lt;a href="https://osawards.com/javascript/"&gt;Open Source Awards&lt;/a&gt; a good way to show appreciation for the community?
&lt;/h3&gt;

&lt;p&gt;— Since I got involved with open source, I met many amazing people from around the world working on the same projects. At one point, I even flew to few countries to speak at their conferences, attend meetups and get to know them better.&lt;/p&gt;

&lt;p&gt;You'll rarely find somebody with the same interests who lives across the street, but there's a high chance that somebody out there is super passionate about the same tech stack, open source project, and technology behind it - and you're just a few clicks away from collaborating with them on such ideas! I think that's one huge advantage of the internet and open source software in general.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JAxzASFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d51rc31ptiwuhvh3nkxa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JAxzASFT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d51rc31ptiwuhvh3nkxa.png" alt="Open Source Awards remote ceremony"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-you-tell-us-a-bit-more-about-why-you-think-open-source-workers-need-their-own-awards"&gt;
  &lt;/a&gt;
  Can you tell us a bit more about why you think open source workers need their own awards?
&lt;/h3&gt;

&lt;p&gt;— There has never been a dedicated place in the community to see top-growing projects with strong future potential. We have GitHub's trending page, but it does not receive much love, so we thought there is enough space to create something new to celebrate open source success and the community behind it. We want to make contributors feel appreciated for their work and kindly thank them for all the hours they put in to make open source an awesome opportunity to learn and grow!  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-would-you-recommend-the-javascript-developers-attending-the-jsnation-live-conference-2021-what-should-they-pay-attention-to"&gt;
  &lt;/a&gt;
  What would you recommend the JavaScript developers attending the &lt;a href="https://live.jsnation.com"&gt;JSNation Live Conference 2021&lt;/a&gt;? What should they pay attention to?
&lt;/h3&gt;

&lt;p&gt;I would say to all participants to have a great time, connect with new people, make new friends, discover some fantastic new open source projects, or get inspired to create new ones themselves.&lt;/p&gt;

&lt;p&gt;There isn't anything specific about making a project more successful at &lt;a href="https://osawards.com/javascript/"&gt;Open Source Awards&lt;/a&gt;. There is a very diverse set of projects, each with a unique approach that was nominated by the community in the months before the event. Considering the number of nominations we have each year, it's safe to say that everyone who made it to the finals is a winner! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c1lx96FS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2y9kgmfhi599o608x24.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c1lx96FS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2y9kgmfhi599o608x24.jpg" alt="React Amsterdam 2019 Open Source Awards Ceremony"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://live.jsnation.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EWmp-ykq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3abm7s98tamstt0gpo6x.png" alt="JSNation Live"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>opensource</category>
      <category>event</category>
      <category>conference</category>
    </item>
  </channel>
</rss>
