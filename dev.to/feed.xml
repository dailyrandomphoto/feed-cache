<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>AWS EKS vs. ECS vs. Fargate: Where to manage your Kubernetes?</title>
      <author>CAST AI</author>
      <pubDate>Fri, 23 Apr 2021 13:19:10 +0000</pubDate>
      <link>https://dev.to/castai/aws-eks-vs-ecs-vs-fargate-where-to-manage-your-kubernetes-5392</link>
      <guid>https://dev.to/castai/aws-eks-vs-ecs-vs-fargate-where-to-manage-your-kubernetes-5392</guid>
      <description>&lt;p&gt;We all love containers for their scalability. But it might easily become your overhead if you end up managing a large cluster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is where container orchestration comes in.&lt;/strong&gt; When operating at scale, you need a platform that automates all the tasks related to the management, deployment and scaling of container clusters. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There’s a reason why almost 90% of containers are orchestrated today.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’re using Kubernetes on AWS, there are several options you can choose from: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elastic Container Service (ECS), &lt;/li&gt;
&lt;li&gt;Elastic Kubernetes Service (EKS), &lt;/li&gt;
&lt;li&gt;AWS Fargate.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read on to find out which one is &lt;strong&gt;a better match&lt;/strong&gt; for your workloads.  &lt;/p&gt;

&lt;p&gt;And if you know what’s what in the world of AWS Kubernetes, you could still probably use a few &lt;a href="https://cast.ai/blog/8-best-practices-to-reduce-your-aws-bill-for-kubernetes/"&gt;best practices to reduce your cloud bill.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you’ll find inside:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is Elastic Container Service (ECS)?&lt;/li&gt;
&lt;li&gt;What is Elastic Kubernetes Service (EKS)?&lt;/li&gt;
&lt;li&gt;What is AWS Fargate?&lt;/li&gt;
&lt;li&gt;AWS EKS vs. ECS – Similarities&lt;/li&gt;
&lt;li&gt;AWS EKS vs. ECS – Differences&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Pricing&lt;/li&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;Multi cloud portability&lt;/li&gt;
&lt;li&gt;Networking&lt;/li&gt;
&lt;li&gt;Community&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;When to choose EKS?&lt;/li&gt;
&lt;li&gt;When to go for ECS?&lt;/li&gt;
&lt;li&gt;Wrap up&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-elastic-container-service-ecs"&gt;
  &lt;/a&gt;
  What is Elastic Container Service (ECS)?
&lt;/h2&gt;

&lt;p&gt;AWS ECS stands for AWS Elastic Container Service. It’s a scalable container orchestration platform owned by AWS. It was designed to run, stop, and manage containers in a cluster. The containers themselves are defined here as part of task definitions and driven by ECS in the cloud. &lt;/p&gt;

&lt;p&gt;You can use ECS with EC2 instances (best for long-running tasks) or AWS Fargate (good for serverless tasks). Let’s take a closer look at these two options:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ecs-with-ec2-instances"&gt;
  &lt;/a&gt;
  ECS with EC2 instances
&lt;/h3&gt;

&lt;p&gt;In this model, containers are deployed to EC2 instances (VMs) created for the cluster. ECS managed them together with tasks that are part of the task definition. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h4&gt;

&lt;p&gt;You have full control over the type of EC2 instance used here. For example, you can use a GPU-optimized instance type if you need to run training for a machine learning model that comes with unique GPU requirements.&lt;br&gt;
You can take advantage of Spot instances that &lt;a href="https://cast.ai/blog/how-to-reduce-cloud-costs-by-90-spot-instances-and-how-to-use-them/"&gt;reduce cloud costs by up to 90%&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h4&gt;

&lt;p&gt;You’re the one responsible for security patches and network security of the instances, as well as their scalability in the cluster (but thankfully, you can use &lt;a href="https://cast.ai/blog/guide-to-kubernetes-autoscaling-for-cloud-cost-optimization/"&gt;Kubernetes autoscaling&lt;/a&gt; for that). &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cost-youre-charged-for-the-ec2-instances-run-within-your-cluster-and-vpc-networking"&gt;
  &lt;/a&gt;
  Cost: You’re charged for the EC2 instances run within your cluster and VPC networking.
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#ecs-with-aws-fargate"&gt;
  &lt;/a&gt;
  ECS with AWS Fargate
&lt;/h3&gt;

&lt;p&gt;In this variant, you don’t need to worry about EC2 instances or servers anymore. Just choose the CPU and memory combo you need and your containers will be deployed there. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros:
&lt;/h4&gt;

&lt;p&gt;No servers to manage.&lt;br&gt;
AWS is in charge of container availability and scalability. Still, better select the right CPU and memory – otherwise, you risk that your application becomes unavailable.&lt;br&gt;
You can use Fargate Spot, a new capability that can run interruption-tolerant ECS Tasks at up to a 70% discount off the Fargate price&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons:
&lt;/h4&gt;

&lt;p&gt;ECS + Fargate supports only one networking mode – awsvpc – which &lt;a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html#task-networking-considerations"&gt;limits your control&lt;/a&gt; over the networking layer (and you might need that in some scenarios).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cost-youre-charged-based-on-the-cpu-and-memory-you-select-the-amount-of-cpu-cores-and-gb-determines-the-cost-of-running-your-cluster"&gt;
  &lt;/a&gt;
  Cost: You’re charged based on the CPU and memory you select. The amount of CPU cores and GB determines the cost of running your cluster.
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jc3kJjbN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyh2gkbexfxozh3kcv3j.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jc3kJjbN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyh2gkbexfxozh3kcv3j.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-elastic-kubernetes-service-eks"&gt;
  &lt;/a&gt;
  What is Elastic Kubernetes Service (EKS)?
&lt;/h2&gt;

&lt;p&gt;EKS is a service that provides and manages a Kubernetes control plane on its own. You have no access to the master nodes on EKS since they’re under a special AWS account.&lt;/p&gt;

&lt;p&gt;To run a Kubernetes workload, EKS establishes the control plane and Kubernetes API in your managed AWS infrastructure and you’re good to go.&lt;/p&gt;

&lt;p&gt;At this point, you can deploy workloads using native K8s tools like kubectl, Kubernetes Dashboard, Helm, and Terraform.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#advantages-of-aws-eks"&gt;
  &lt;/a&gt;
  Advantages of AWS EKS
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You &lt;strong&gt;don’t have to install, operate, and maintain&lt;/strong&gt; your own Kubernetes control plane.&lt;/li&gt;
&lt;li&gt;EKS allows you to &lt;strong&gt;easily run tooling and plugins&lt;/strong&gt; developed by the Kubernetes open-source community. &lt;/li&gt;
&lt;li&gt;EKS &lt;strong&gt;automates load distribution and parallel processing&lt;/strong&gt; better than any DevOps engineer could.&lt;/li&gt;
&lt;li&gt;Your Kubernetes assets integrate seamlessly with AWS services if you use EKS.&lt;/li&gt;
&lt;li&gt;EKS uses VPC networking.&lt;/li&gt;
&lt;li&gt;Any application running on EKS is compatible with one running in your existing Kubernetes environment. You can migrate to EKS without applying any changes to code.&lt;/li&gt;
&lt;li&gt;Supports &lt;strong&gt;EC2 spot instances&lt;/strong&gt; using managed node groups that follow spot best practices and allow some pretty great costs savings. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hw5jE3Gd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ag4vxqwjvm978rgyien.jpeg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-aws-fargate"&gt;
  &lt;/a&gt;
  What is AWS Fargate?
&lt;/h2&gt;

&lt;p&gt;Usually, a container management platform reworks a server’s CPU and memory to allocate them to your workloads better. But the underlying server is still there – just divided in a different way. And it might become a burden in managing your systems.&lt;/p&gt;

&lt;p&gt;AWS solves this problem with Fargate, by taking over the management of that underlying server. &lt;/p&gt;

&lt;p&gt;Instead of doing all the tasks yourself – from booting a server and installing the agent to making sure that it’s up-to-date – you can simply create a cluster and add your workload to it. AWS will add pre-configured servers to the “pool” automatically to support your requirements.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Today, 32% of AWS container environments run on Fargate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here are a few things you should know about Fargate before jumping on the Fargate-managed bandwagon:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It’s &lt;strong&gt;not a good fit for highly regulated environments&lt;/strong&gt; where companies use dedicated tenancy hosting.&lt;/li&gt;
&lt;li&gt;The combination of ECS and Fargate &lt;strong&gt;supports only one networking mode (awsvpc)&lt;/strong&gt; that comes with limitations if you need to have deep control over the networking layer.&lt;/li&gt;
&lt;li&gt;Fargate allocates resources automatically, but &lt;strong&gt;you can set few controls over how it works.&lt;/strong&gt; This can easily lead to uncontrolled cost rise if you fail in close monitoring (for example, in R&amp;amp;D environments). One way to deal with that is through self-hosting and creating limited-capacity clusters. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_26n71cS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q68miz7wpadwqdjj57n.jpeg" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aws-eks-vs-ecs-similarities"&gt;
  &lt;/a&gt;
  AWS EKS vs. ECS – Similarities
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-they-both-have-a-layer-of-abstraction"&gt;
  &lt;/a&gt;
  1. They both have a layer of abstraction
&lt;/h3&gt;

&lt;p&gt;EKS and ECS come with a layer of abstraction for containers called deployments (EKS) or tasks (ECS). &lt;/p&gt;

&lt;p&gt;Their functionalities are quite similar. Both ECS and EKS have an abstraction called cluster – a combination of all the working components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-they-allow-a-mix-of-aws-compute-platforms"&gt;
  &lt;/a&gt;
  2. They allow a mix of AWS compute platforms
&lt;/h3&gt;

&lt;p&gt;Whether you’re running your containers with ECS and EKS, you can choose one or more AWS compute options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;EC2 Instances&lt;/strong&gt; – virtual machines that offer a wide range of options and capacities.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AWS Fargate&lt;/strong&gt; – for serverless applications.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AWS Outposts&lt;/strong&gt; – a fully managed service that offers the same AWS infrastructure, services, APIs, and tools to data centers or on-premises facilities to make hybrid setups consistent. Great for workloads that need low latency access to on-premises systems or local data processing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;AWS Local Zones&lt;/strong&gt; – a kind of AWS infrastructure deployment that locates compute, storage, database, and other services closer to a specific population, industry, or IT centers. Perfect for applications that you want running closer to the end-users.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;AWS Wavelength&lt;/strong&gt; – this infrastructure is optimized for mobile edge computing applications that help to avoid the latency resulting from application traffic having to go through multiple hops across the Internet to reach the destination. A great pick for low-latency, mobile edge applications.&lt;br&gt;
How to choose &lt;a href="https://cast.ai/blog/how-to-choose-the-best-vm-for-the-job/"&gt;the best VM type&lt;/a&gt;? Consider your selection across these four dimensions:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;performance, &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;cost,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;availability, &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;reliability. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Understanding the differences between all these options essential because they come with different financial commitments and complexity in management.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YJ7cuzbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qiq0f0f8l19h5ngqq97k.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YJ7cuzbr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qiq0f0f8l19h5ngqq97k.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-you-dont-need-to-monitor-or-operate-them"&gt;
  &lt;/a&gt;
  3. You don’t need to monitor or operate them
&lt;/h3&gt;

&lt;p&gt;These managed services eliminate the effort in operating services and allow your teams to focus on core applications. &lt;/p&gt;

&lt;p&gt;You can easily assume that they’re reliable and highly available at all times. The Kubernetes control plane and API will be up and running no matter what – even when updating to the latest release (naturally, this happens automatically as well). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-they-share-the-approach-to-security"&gt;
  &lt;/a&gt;
  4. They share the approach to security
&lt;/h3&gt;

&lt;p&gt;To access services and resources securely, AWS provides the Identity and Access Management (IAM) solution. You can create users (and user groups) – and then assign permissions to them. &lt;/p&gt;

&lt;p&gt;This control system is available in both ECS and EKS. For example, you can use IAM to limit who can access ECS tasks or Kubernetes workloads.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-eks-vs-ecs-differences"&gt;
  &lt;/a&gt;
  AWS EKS vs. ECS – Differences
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-IW8QmY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz8xbovxqcxpz1r8s0sy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-IW8QmY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iz8xbovxqcxpz1r8s0sy.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-pricing"&gt;
  &lt;/a&gt;
  1. Pricing
&lt;/h3&gt;

&lt;p&gt;In general, if you run ECS and EKS clusters on EC2 instances, you’ll be paying on compute costs that depend on the instance type you pick and its running time.&lt;/p&gt;

&lt;p&gt;ECS doesn’t come with any additional charges, but EKS does.&lt;/p&gt;

&lt;p&gt;EKS will charge you $0.1 per hour per Kubernetes cluster. This amounts to c. $74 per month, which doesn’t seem like a lot. But the costs might add up quickly depending on your setup.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you’re just exploring microservices and containers, ECS is a better option. And if you’re ready to handle the scalability level of Kubernetes, the $74 extra on your bill isn’t going to make much difference against your overall compute costs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Check this out too: &lt;a href="https://cast.ai/blog/kubernetes-cost-estimation-4-problems-and-how-to-solve-them/"&gt;Kubernetes cost estimation: 4 problems and how to solve them&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2DLwHkLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brgw3yo54n7s8rhhhq4l.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-deployment"&gt;
  &lt;/a&gt;
  2. Deployment
&lt;/h3&gt;

&lt;p&gt;You can set up both EKS and ECS from the AWS management console. But then things start looking different.&lt;/p&gt;

&lt;p&gt;ECS is really simple to deploy. After all, it was designed to be a simple API for creating containerized workloads without any complex abstractions. You get no control plane, so once your cluster is set up, you can configure and deploy tasks directly from the AWS management console. &lt;/p&gt;

&lt;p&gt;Deploying clusters on EKS is a bit more complex and requires expert configuration. You need to configure and deploy pods via Kubernetes first because EKS is just another layer for creating K8s clusters on AWS. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So, you need more expertise and operational knowledge to deploy and manage applications on EKS when compared to ECS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#3-multi-cloud-portability"&gt;
  &lt;/a&gt;
  3. Multi cloud portability
&lt;/h3&gt;

&lt;p&gt;The ideal scenario is when you can move your workloads from one cloud provider to another with minimal disruption. This is what portability is all about. To achieve it, you need interoperability among cloud services. &lt;/p&gt;

&lt;p&gt;While ECS is an AWS proprietary technology, EKS is based on Kubernetes which is open-source.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Kubernetes in EKS allows you to package your containers and move them to another platform quickly. ECS might lock you in.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So if you build an application in ECS, you’re likely to encounter a vendor lock-in issue in the long run. And if you choose to design your application on Kubernetes, you can basically run it on any other Kubernetes cluster – from clouds to on-premises. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-networking"&gt;
  &lt;/a&gt;
  4. Networking
&lt;/h3&gt;

&lt;p&gt;When using ECS, you use the awsvpc network that receives an elastic network interface (ENI) attached to the container instance hosting it. You’ll be looking at default limits to the number of network interfaces that can be attached to an EC2 instance (the primary network interface counts as one). Just to give you an idea, a c5.large instance may have up to 4 ENIs attached to it by default.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In ECS, the maximum number of ENIs you can assign varies by EC2 type. Even though AWS increased the limits, this might not be enough to support all the containers you want running on that particular instance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that ECS supports launching container instances with larger ENI density using specific EC2 instance types. When you pick such an instance type and opt in to the awsvpcTrunking account setting, you’ll get some additional ENIs on newly launched container instances. So, you can place more tasks using the awsvpc network mode on every container instance. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With EKS, you can assign a dedicated network interface to a pod to improve security. All the containers inside that pod will share the internal network and public IP.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can share an ENI between multiple pods, which allows you to place more pods per instance. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-community-support"&gt;
  &lt;/a&gt;
  5. Community support
&lt;/h3&gt;

&lt;p&gt;The open-source Kubernetes rules over proprietary ECS here. The latter offers limited community assistance, so you can only count on the corporate support of AWS.&lt;/p&gt;

&lt;p&gt;When running Kubernetes in EKS, you get:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;community support (Stack Overflow, Github issues), &lt;/li&gt;
&lt;li&gt;resources (from official training to online courses), &lt;/li&gt;
&lt;li&gt;community-maintained tools like kubectl extensions, Helm Charts, or Kubernetes Operators.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#when-to-choose-eks"&gt;
  &lt;/a&gt;
  When to choose EKS?
&lt;/h2&gt;

&lt;p&gt;For some teams, ECS proves to be too simple and comes with limitations that EKS doesn’t have. So, when should you select EKS?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;When you need granular control over container placement&lt;/strong&gt; – ECS doesn’t have a concept similar to pods. So, if you need fine-grained control over container placement better go somewhere else. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;When you need more networking modes&lt;/strong&gt; – ECS has only one networking mode available in Fargate. If your serverless app needs something else, EKS is a better choice.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;When you want more control over your tooling&lt;/strong&gt; – ECS comes with a set of default tools. For example, you can use only Web Console, CLI, and SDKs for management. Logging and performance monitoring is carried out using CloudWatch, service discovery through Route 53, and deployments via ECS itself. If you don’t like any of these tools, go for EKS. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WxAJYIDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15eiuj1caro3zr2i6tyq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WxAJYIDa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15eiuj1caro3zr2i6tyq.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#when-to-go-for-ecs"&gt;
  &lt;/a&gt;
  When to go for ECS?
&lt;/h2&gt;

&lt;p&gt;Some teams might benefit from ECS more than EKS thanks to its simplicity. Here’s when selecting ECS makes the most sense:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;When you have limited DevOps resources&lt;/strong&gt; – ECS comes with a gentle learning curve so if you’re not prepared to re-architect your applications around Kubernetes concepts, ECS will be easier to adopt.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;When you don’t have time or resources to pick and choose add-ons&lt;/strong&gt; – Kubernetes and EKS by extension is a far more flexible tool. You can choose from many different add-ons available in the system. But each of them requires time, resources, and maintenance to make the most of it. ECS has only one option in each category – if it works for you, you’re good to go.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;When Kubernetes is too much&lt;/strong&gt; – If adopting K8s all at once is a little too much for you, ECS could be a good first step. It allows you to try your hand at containerization and move your workloads into a managed service without huge upfront investment. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;If flexibility of moving across different cloud vendors isn’t that important to you and you’re happy to put all of your eggs in the (AWS) basket), ECS makes sense. &lt;/p&gt;

&lt;p&gt;But if you’d like to have the freedom to integrate with the open-source Kubernetes community, putting in the energy and time to make EKS is worth it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Whichever tool you choose, you still need to find a way to analyze and optimize cloud costs. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’re looking to make your journey with EKS smoother, we might have something for you. Use our &lt;a href="https://cast.ai"&gt;EKS cost analyzer&lt;/a&gt; to check your cluster costs for free, set cost policies, and reduce your cloud bill. Try &lt;a href="https://cast.ai"&gt;CAST AI&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>aws</category>
      <category>devops</category>
    </item>
    <item>
      <title>10 GitHub Repositories every Developer should know</title>
      <author>Pawel</author>
      <pubDate>Fri, 23 Apr 2021 13:11:37 +0000</pubDate>
      <link>https://dev.to/pb/10-github-repositories-every-developer-should-know-ngm</link>
      <guid>https://dev.to/pb/10-github-repositories-every-developer-should-know-ngm</guid>
      <description>&lt;p&gt;Other than being the home for some of the most interesting Open Source Projects on the internet, GitHub is also a great place for sharing resources of all kinds, from free books to APIs, from roadmaps to project ideas and to the projects.&lt;br&gt;
But with sheer mass it becomes difficult to find the most useful repositories which you may think doesn't exists.&lt;br&gt;
So I have curated this list of fifteen fabulous repositories that provide a great value for all web and software developers.&lt;/p&gt;

&lt;p&gt;All of them will add value to you and help you to become a better web or software developer or both.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-free-programming-books"&gt;
  &lt;/a&gt;
  1. Free Programming Books
&lt;/h1&gt;

&lt;p&gt;GitHub🌟: 183K+ &lt;/p&gt;

&lt;p&gt;Offered in a variety of different languages &lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; is no doubt one of the most popular and starred repositories on GitHub. Even though it has "Books" in its name, it offers a lot more than that. It contains sections of free online courses, interactive programming resources, problem sets and competitive programming, programming playgrounds and podcasts and cheat sheets almost every programming language. &lt;/p&gt;

&lt;p&gt;But has a major collection of programming books which makes it an "Awesome" collection.'&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-developer-roadmap"&gt;
  &lt;/a&gt;
  2. Developer Roadmap
&lt;/h1&gt;

&lt;p&gt;GitHub🌟: 155K+&lt;/p&gt;

&lt;p&gt;Got stuck? or need some advice for getting started to your developer journey? then this &lt;a href="https://github.com/kamranahmedse/developer-roadmap"&gt;repository&lt;/a&gt; will guide you through. It has all the technologies you need to know if you want to become a Frontend or Backend or DevOps Engineer. It has all the alternative technologies from which can choose whatever suits your need or comfort.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-ossu-computer-science"&gt;
  &lt;/a&gt;
  3. OSSU Computer Science
&lt;/h1&gt;

&lt;p&gt;GitHub🌟:81K+&lt;/p&gt;

&lt;p&gt;If you don't have a computer science background or degree and want the equivalent knowledge same as a Computer Science degree then this &lt;a href="https://github.com/ossu/computer-science"&gt;repository&lt;/a&gt; is for you. It's for those who want a proper, well-rounded grounding in concepts fundamental to all computing disciplines. It offers all the resources to help you become a self-taught computer science graduate equivalent and has a worldwide community of learners.&lt;/p&gt;

&lt;p&gt;It is designed according to the degree requirements of undergraduate computer science majors, minus general education (non-CS) requirements, as it is assumed most of the people following this curriculum are already educated outside the field of CS. The courses themselves are among the very best in the world, often coming from Harvard, Princeton, MIT, etc., but specifically chosen to meet the following criteria.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-awesome"&gt;
  &lt;/a&gt;
  4. Awesome
&lt;/h1&gt;

&lt;p&gt;GitHub🌟: 158K+&lt;/p&gt;

&lt;p&gt;As the name describes it has an &lt;a href="https://github.com/sindresorhus/awesome"&gt;Awesome&lt;/a&gt; lists of all kinds of interesting topics ranging from computer science to media, from gaming to business and the list goes on.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-build-your-own-x"&gt;
  &lt;/a&gt;
  5. Build your own X
&lt;/h1&gt;

&lt;p&gt;GitHub🌟: 103K+&lt;/p&gt;

&lt;p&gt;If you are a person who believes in the principle of "Learning by doing" then this &lt;a href="https://github.com/danistefanovic/build-your-own-x"&gt;repository&lt;/a&gt; has the potential of becoming your daily stop at GitHub. It has links to the resources which help you build your own Cryptocurrency, Database, Bots, BitTorrent Clients, and many more.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-coding-interview-university"&gt;
  &lt;/a&gt;
  6. Coding Interview University
&lt;/h1&gt;

&lt;p&gt;Github 🌟: 165K+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jwasham/coding-interview-university"&gt;Coding Interview University&lt;/a&gt; has a multi-month study plan to become a software engineer for a large tech company like Google, Amazon, Facebook, Apple, or any other software company. It offers advice on how to study to become a reliability engineer or operations engineer. It also has links to the flashcards for quickly brushing up your knowledge and stay updated originally created by the author of the repository who landed a job at Amazon. And there are much more success stories like that.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-public-apis"&gt;
  &lt;/a&gt;
  7. Public Apis
&lt;/h1&gt;

&lt;p&gt;GitHub🌟: 118K+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/public-apis/public-apis"&gt;Public Apis&lt;/a&gt; has a collective list of all the free APIs available on the internet to use in your personal or professional projects. It offers a wide range of Application Programming interfaces (APIs) such as business, anime, animals, news, finance, games, and more.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-tech-interview-handbook"&gt;
  &lt;/a&gt;
  8. Tech Interview Handbook
&lt;/h1&gt;

&lt;p&gt;GitHub🌟:51K+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/yangshun/tech-interview-handbook"&gt;Tech Interview Handbook&lt;/a&gt; has all the materials that you need to crack a Tech Interview. It has a variety of material regarding How to prepare for coding interviews, Good questions to ask your interviewer, Helpful tips on resume, and many more.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-system-design-primer"&gt;
  &lt;/a&gt;
  9. System Design Primer
&lt;/h1&gt;

&lt;p&gt;GitHub🌟:127K+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/donnemartin/system-design-primer"&gt;System Design Primer&lt;/a&gt; is a great repository for software engineers that will help you learn how to design large-scale systems. That will then help you become a better engineer. The repo provides an organized collection of resources for this broad topic.&lt;br&gt;
Because system design often is a required component of the technical interview process at many companies, this repository can also help you to prepare for those interviews with a study guide, advice on how to approach an interview, interview questions with solutions, Anki flashcard sets for interactive learning, and interactive coding challenges.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-design-resources-for-developers"&gt;
  &lt;/a&gt;
  10. Design Resources for Developers
&lt;/h1&gt;

&lt;p&gt;GitHub🌟:25K+&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bradtraversy/design-resources-for-developers"&gt;This repository&lt;/a&gt; has a curated list of design and UI resources from stock photos, web templates, CSS frameworks, UI libraries, tools and much more, available for free to use in your projects and applications. It offers all the template stuff you need to get started with your web development projects.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;Bonus&lt;/em&gt;: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#awesome-repos"&gt;
  &lt;/a&gt;
  Awesome Repos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/pawelborkar/awesome-repos"&gt;Awesome Repos&lt;/a&gt; is just a few weeks old but the way it's including all the fantastic repositories on GitHub is mindblowing. It has a number of resourceful repositories packed in just one place. All you have to do is just visit this repository that's it. The repository is still growing and welcomes PRs.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
I hope you find these repositories as useful as I do and can use them to become better software engineers. Thanks for reading!&lt;/p&gt;

&lt;p&gt;If you like my work please follow me on &lt;a href="https://linkedin.com/in/pawelborkar"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Technical writer</title>
      <author>Natalia Eksarova</author>
      <pubDate>Fri, 23 Apr 2021 13:03:07 +0000</pubDate>
      <link>https://dev.to/neocles/technical-writer-77c</link>
      <guid>https://dev.to/neocles/technical-writer-77c</guid>
      <description>&lt;p&gt;Dear all,&lt;/p&gt;

&lt;p&gt;we need a content technical writer for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;checking the existent tech articles (in the future)&lt;/li&gt;
&lt;li&gt;writing FE, BE, QA tech articles&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a freelance opportunity.&lt;br&gt;
Apply here or here: &lt;a href="mailto:natalia.eksarova@neocles.io"&gt;natalia.eksarova@neocles.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>technnicalwriting</category>
      <category>contentwriters</category>
    </item>
    <item>
      <title>Reinventing myself</title>
      <author>Lea Rosema (she/her)</author>
      <pubDate>Fri, 23 Apr 2021 12:54:58 +0000</pubDate>
      <link>https://dev.to/terabaud/reinventing-myself-4oin</link>
      <guid>https://dev.to/terabaud/reinventing-myself-4oin</guid>
      <description>&lt;p&gt;So, it's time to reinvent myself and look for another challenge. But I don't know yet where my journey goes. &lt;/p&gt;

&lt;p&gt;My last employer took quite a big effort in supporting me shaping me into the developer I'm expected to be. They offer assistance and coaching, but nothing really seems to work for me.&lt;/p&gt;

&lt;p&gt;I need to take a step back and think about my next steps.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Help us democratize our open-source technology</title>
      <author>Emanuel Allely</author>
      <pubDate>Fri, 23 Apr 2021 12:52:55 +0000</pubDate>
      <link>https://dev.to/emanuel_allely/help-us-democratize-our-open-source-technology-32kc</link>
      <guid>https://dev.to/emanuel_allely/help-us-democratize-our-open-source-technology-32kc</guid>
      <description>&lt;p&gt;🙏 Please help us democratize our open-source technology by starring our Github repository ⭐ Open source community is awesome 😍 -&amp;gt; you can star our repo here: &lt;a href="https://github.com/Luos-io/Luos"&gt;https://github.com/Luos-io/Luos&lt;/a&gt; ❤️&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>help</category>
      <category>startup</category>
      <category>embedded</category>
    </item>
    <item>
      <title>Using Hotwire Turbo in Rails with legacy JavaScript</title>
      <author>Matouš Borák</author>
      <pubDate>Fri, 23 Apr 2021 12:49:53 +0000</pubDate>
      <link>https://dev.to/nejremeslnici/using-hotwire-turbo-in-rails-with-legacy-javascript-17g1</link>
      <guid>https://dev.to/nejremeslnici/using-hotwire-turbo-in-rails-with-legacy-javascript-17g1</guid>
      <description>&lt;p&gt;When &lt;a href="https://turbo.hotwire.dev/"&gt;Hotwire Turbo&lt;/a&gt; got released around Christmas 2020, it was exciting news for many of us. One of its main appeals is that it helps you create highly reactive web pages in Rails while having to write &lt;a href="https://twitter.com/dhh/status/1266057500547141633"&gt;almost no custom JavaScript&lt;/a&gt;. Turbo also seems very easy to use, it just ”invites“ you to try and play with your pages. Let’s take a look if Turbo can be used in a long-developed project with a lot of old JavaScript code, too (spoiler: with a little tweak, it very much can!).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-road-to-legacy-javascript-in-a-longtime-rails-project"&gt;
  &lt;/a&gt;
  The road to legacy JavaScript in a long-time Rails project
&lt;/h2&gt;

&lt;p&gt;After all the years that we watched the JavaScript community boost its ecosystem to tremendous heights and after trying (and often failing) to keep up with the pace of language enhancements, new frameworks and build systems, this &lt;strong&gt;intended simplicity&lt;/strong&gt; of Turbo is a very welcome turnaround. To be clear, we &lt;em&gt;do&lt;/em&gt; like JavaScript, it’s a fine language, especially since ES6, but in our opinion its strengths stand out and are sustainable only if you have enough sufficiently specialized JavaScript devs in a team. In other words, for a small Rails team, long-term management of complex JavaScript can be very difficult. &lt;/p&gt;

&lt;p&gt;That’s why we have always been cautious about bringing too much JavaScript to the project, especially for things that could be done in other ways. Still, there's always been a kingdom where JavaScript absolutely ruled and that was &lt;strong&gt;page reactivity&lt;/strong&gt;. Most people love reactive pages and we do, too! So, in the end, still a lot of JavaScript managed to get into our codebase.&lt;/p&gt;

&lt;p&gt;Over the years, the ”official“ support and default conventions for building reactive JavaScript-enabled pages in Rails took &lt;strong&gt;many different forms&lt;/strong&gt;. Let’s just run through some of the options for working with JavaScript that we had in our pretty much standard Rails project during the course of its existence, i.e. during the last ~12 years:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;there was the old and rusty inline vanilla JavaScript since forever,&lt;/li&gt;
&lt;li&gt;there was the &lt;a href="https://github.com/rails/prototype-rails"&gt;Prototype&lt;/a&gt; library since who knows when but it was &lt;a href="https://github.com/rails/prototype_legacy_helper"&gt;phased out&lt;/a&gt; gradually (~2010),&lt;/li&gt;
&lt;li&gt;and in Rails 3.1, it was &lt;a href="https://guides.rubyonrails.org/3_1_release_notes.html#default-js-library-is-now-jquery"&gt;replaced&lt;/a&gt; by &lt;a href="https://github.com/rails/jquery-rails"&gt;jQuery&lt;/a&gt; (~2011),&lt;/li&gt;
&lt;li&gt;Rails 3.1 also brought &lt;a href="https://github.com/rails/ruby-coffee-script"&gt;CoffeeScript&lt;/a&gt; as a new and encouraged way of ”writing JavaScript“ (~2011),&lt;/li&gt;
&lt;li&gt;there was &lt;a href="https://guides.rubyonrails.org/working_with_javascript_in_rails.html#unobtrusive-javascript"&gt;Unobtrusive JavaScript&lt;/a&gt; to replace the inline style; it was pushed further by the &lt;a href="https://github.com/rails/jquery-ujs"&gt;jquery-ujs library&lt;/a&gt; (~2010), later superseded by the &lt;a href="https://dev.to/nejremeslnici/migrating-from-jquery-ujs-to-rails-ujs-k9m"&gt;somewhat compatible&lt;/a&gt; &lt;a href="https://github.com/rails/rails/tree/main/actionview/app/assets/javascripts"&gt;Rails UJS&lt;/a&gt; (2016),&lt;/li&gt;
&lt;li&gt;there were &lt;a href="https://signalvnoise.com/posts/3697-server-generated-javascript-responses"&gt;Server-generated JavaScript Responses&lt;/a&gt; (SJR) allowing the server to update pages via JavaScript (~2011),&lt;/li&gt;
&lt;li&gt;since Rails 4, the &lt;a href="https://github.com/turbolinks/turbolinks"&gt;Turbolinks library&lt;/a&gt; has been included but had a &lt;a href="https://youtu.be/ktZLpjCanvg?t=2898"&gt;bunch of problems&lt;/a&gt; at that time (2013), so&lt;/li&gt;
&lt;li&gt;Rails 5 came with a major and largely incompatible rewrite of Turbolinks (Turbolinks 5), the previous versions of which were renamed to &lt;a href="https://github.com/turbolinks/turbolinks-classic"&gt;Turbolinks Classic&lt;/a&gt; (2016),&lt;/li&gt;
&lt;li&gt;Rails 5.1 &lt;a href="https://github.com/rails/webpacker"&gt;optionally adopted&lt;/a&gt; the &lt;a href="https://webpack.js.org/"&gt;webpack bundler&lt;/a&gt; and the &lt;a href="https://yarnpkg.com/"&gt;yarn package manager&lt;/a&gt; (2017), the two became the preferred way of handling JavaScript in Rails,&lt;/li&gt;
&lt;li&gt;Rails 5.1 also &lt;a href="https://github.com/rails/rails/pull/27113"&gt;removed jQuery&lt;/a&gt; from default dependencies (2017)&lt;/li&gt;
&lt;li&gt;the &lt;a href="https://m.signalvnoise.com/stimulus-1-0--a-modest-javascript-framework-for-the-html-you-already-have/"&gt;Stimulus JS&lt;/a&gt; framework was released (2018),&lt;/li&gt;
&lt;li&gt;CoffeeScript, although still soft-supported via &lt;a href="https://github.com/rails/ruby-coffee-script"&gt;a gem&lt;/a&gt;, is &lt;a href="https://github.com/rails/ruby-coffee-script/issues/22#issuecomment-355821741"&gt;discouraged&lt;/a&gt; in favor of vanilla ES6 JavaScript or Typescript compiled via webpack (~2018),&lt;/li&gt;
&lt;li&gt;after being in beta for 3 years, &lt;a href="https://github.com/rails/sprockets#upgrading-to-sprockets-4x"&gt;Sprockets 4&lt;/a&gt; was released, with support for ES6 and source maps in the asset pipeline (2019), to serve people still hesitant with webpack,&lt;/li&gt;
&lt;li&gt;and finally &lt;a href="https://turbo.hotwire.dev/"&gt;Turbo&lt;/a&gt; which should become a part of Rails 7 (late 2020),&lt;/li&gt;
&lt;li&gt;oh and by the way, DHH &lt;a href="https://twitter.com/dhh/status/1334428951180173313"&gt;nowadays explores&lt;/a&gt; native ES6 modules which could allow ditching webpacker and returning to Sprockets for handling JavaScript again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What a ride! In retrospect, to us it really looks as if DHH and others struggled hard to make the JavaScript ecosystem and its goodies available in Rails but not until they were able to come up with a &lt;strong&gt;sufficiently elegant way&lt;/strong&gt; to do that (and if so, thanks for that 🙏). Each iteration made sense and each newly adopted technique was a step forward but still, &lt;strong&gt;the overall churn of JavaScript styles has been tremendous&lt;/strong&gt;. While, in our experience, upgrading Rails itself &lt;a href="https://twitter.com/boramacz/status/1149590543485173760"&gt;got easier with each version&lt;/a&gt;, the same cannot be said about our JavaScript code. JavaScript in Rails from only a few years ago is &lt;em&gt;quite different&lt;/em&gt; from how it looks today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#turbo-changes-everything"&gt;
  &lt;/a&gt;
  Turbo changes everything
&lt;/h2&gt;

&lt;p&gt;And here comes &lt;strong&gt;&lt;a href="https://turbo.hotwire.dev/"&gt;Hotwire Turbo&lt;/a&gt;&lt;/strong&gt; to change the situation again but this time with truly good promises. The reasoning for high hopes is simple: Turbo lets you create many of the reactive page patterns &lt;strong&gt;without having to write a single line of JavaScript&lt;/strong&gt;. JavaScript is now pushed behind the scenes and the main focus, even for describing reactive behavior, &lt;strong&gt;is on HTML&lt;/strong&gt; which is easy to author via Rails templates (or anything else). Custom JavaScript code, now preferably written as &lt;a href="https://stimulus.hotwire.dev/"&gt;Stimulus JS&lt;/a&gt; controllers, becomes just an icing on the cake if you need some more special interactions with a page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The new Basecamp’s flagship – the &lt;a href="https://hey.com/"&gt;HEY.com&lt;/a&gt; service – currently uses a total of ~60kB of JavaScript (zipped) while, in terms of reactivity, it feels like a real SPA. In contrast, our web uses twice as much JavaScript while mostly being  an ordinary click-and-wait-for-the-whole-page web, oh well…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So again, with Turbo, the problem with JavaScript code patterns becoming obsolete is &lt;strong&gt;effectively gone because in the future there will simply be no custom JavaScript code to upgrade&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;If it all looks that great, why were we hesitant so far about just adding the &lt;code&gt;turbo-rails&lt;/code&gt; gem and hitting the shiny new road? Before we actually tried to dive in, we had the following big concern: &lt;strong&gt;will Turbo work with Turbo Drive disabled?&lt;/strong&gt; &lt;a href="https://turbo.hotwire.dev/handbook/drive"&gt;Turbo Drive&lt;/a&gt;, the successor of Turbolinks, is a member of the Turbo family. This library is cool but &lt;strong&gt;&lt;a href="https://turbo.hotwire.dev/handbook/building"&gt;requires&lt;/a&gt; the JavaScript code to be structured in a certain way&lt;/strong&gt; which is often quite hard to achieve in an older project with a lot of legacy JavaScript. We haven’t really tried to bite the refactoring bullet yet, although we’re getting near. Until then, we need to be sure that our web will work OK without Turbo Drive.&lt;/p&gt;

&lt;p&gt;And we are happy to find out that the brief answer to this question is a &lt;strong&gt;big bold YES!&lt;/strong&gt; Read on if you’d like to know more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-turbo"&gt;
  &lt;/a&gt;
  Installing Turbo
&lt;/h2&gt;

&lt;p&gt;We won’t go into much detail here, the &lt;a href="https://turbo.hotwire.dev/handbook/installing"&gt;official procedure&lt;/a&gt; just worked for us. If you’re still using the Asset Pipeline for your JavaScript files, make sure it supports ES6 syntax (i.e., you’ll need to upgrade to &lt;a href="https://github.com/rails/sprockets/blob/master/UPGRADING.md"&gt;Sprockets 4&lt;/a&gt;). You also need a recent-enough Rails version (Rails 6, it &lt;a href="https://github.com/hotwired/turbo-rails/blob/main/turbo-rails.gemspec#L13"&gt;seems&lt;/a&gt;). Otherwise, all should be good.&lt;/p&gt;

&lt;p&gt;One small catch though: if you have &lt;em&gt;both&lt;/em&gt; the Asset Pipeline &lt;em&gt;and&lt;/em&gt; webpack enabled (as we do) and if you only want Turbo to be included in the webpack-managed bundles, you’ll notice that &lt;code&gt;turbo.js&lt;/code&gt; gets precompiled also in the Asset Pipeline if you use the &lt;a href="https://github.com/hotwired/turbo-rails"&gt;&lt;code&gt;turbo-rails&lt;/code&gt; gem&lt;/a&gt;. It turns out that the gem automatically adds this file into the pipeline upon initialization. To prevent this (and save a bit of hassle with enabling ES6 in Sprockets), you can remove it again during the start of your Rails app:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# config/application.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Rails&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="c1"&gt;# remove Turbo from Asset Pipeline precompilation&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;after_initialize&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;assets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;precompile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"turbo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#disabling-turbo-by-default"&gt;
  &lt;/a&gt;
  Disabling Turbo by default
&lt;/h2&gt;

&lt;p&gt;If you try browsing your site now, after some time you’ll likely notice various glitches and unexpected behavior – that’s Turbo Drive (Turbolinks) kicking our legacy JavaScript butt. What we need to do now is &lt;strong&gt;disable Turbo by default and enable it selectively&lt;/strong&gt; only in places where we’ll use Turbo Frames or Streams.&lt;/p&gt;

&lt;p&gt;We’ll do the disabling part in a little conditional way that will help us when we try to make our JavaScript code Turbo Drive-ready later. To disable Turbo completely in all pages in Rails, you can put the following instructions in your layout files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;%# app/views/layouts/application.html.erb %&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vi"&gt;@turbo&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"turbo-visit-control"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"reload"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"turbo-cache-control"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"no-cache"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;data-turbo=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@turbo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;present?&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ...
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The instructions here are all controlled by the &lt;strong&gt;&lt;code&gt;@turbo&lt;/code&gt; variable&lt;/strong&gt;. If you do nothing else, this variable will be equal to &lt;code&gt;nil&lt;/code&gt; and will render the page with Turbo disabled. If, some bright day later, you manage to get your JavaScript to a better shape on a group of pages, you can selectively switch on Turbo (and thus Turbo Drive) for them using &lt;code&gt;@turbo = true&lt;/code&gt; in the corresponding controllers. We are about to explore this migration path ourselves soon.&lt;/p&gt;

&lt;p&gt;In particular, what the instructions mean is this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The most important one is the &lt;strong&gt;&lt;code&gt;data-turbo="false"&lt;/code&gt;&lt;/strong&gt; attribute in the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag. It tells Turbo to &lt;strong&gt;&lt;a href="https://turbo.hotwire.dev/handbook/drive#disabling-turbo-drive-on-specific-links-or-forms"&gt;ignore&lt;/a&gt; all links and forms on the page&lt;/strong&gt; and leave them for standard processing by the browser. When Turbo decides whether it should handle a link click or form submit, it &lt;a href="https://github.com/hotwired/turbo/blob/22cbc4fca58ecf07e82d8a66e3afdd632dc45ab8/src/core/session.ts#L262"&gt;searches&lt;/a&gt; the target element and all its parents for the &lt;code&gt;data-turbo&lt;/code&gt; attribute and if it finds a &lt;code&gt;"false"&lt;/code&gt; value, it just backs off. This tree traversal is a great feature that will later allow us to selectively switch Turbo on, see below.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The other two meta tags are not strictly necessary, they serve as a kind of backup in case Turbo control ”leaks in“ somewhere unexpectedly. The &lt;code&gt;turbo-visit-control&lt;/code&gt; meta tag &lt;a href="https://turbo.hotwire.dev/handbook/drive#ensuring-specific-pages-trigger-a-full-reload"&gt;forces&lt;/a&gt; Turbo to make a full page reload if it encounters an AJAX response (initiated outside of a Turbo Frame). Finally, the &lt;code&gt;turbo-cache-control&lt;/code&gt; meta tag &lt;a href="https://turbo.hotwire.dev/handbook/building#opting-out-of-caching"&gt;ensures&lt;/a&gt; that the page will never be stored in Turbo’s cache.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK, so when you browse your site &lt;em&gt;now&lt;/em&gt;, it should behave exactly the same as you’re used to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-turbo-frames"&gt;
  &lt;/a&gt;
  Using Turbo Frames
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://turbo.hotwire.dev/handbook/frames"&gt;Turbo Frames&lt;/a&gt; act like self-replaceable blocks on a page: they capture link clicks and form submits, issue an AJAX request to the server and replace themselves with the same-named Turbo Frame extracted from the response. &lt;/p&gt;

&lt;p&gt;As we have Turbo globally disabled, we need to &lt;strong&gt;selectively enable it for each Turbo Frame&lt;/strong&gt;, again using a &lt;code&gt;data-turbo&lt;/code&gt; attribute, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;%# app/views/comments/show.html.erb %&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_frame_tag&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;data: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;turbo: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s2"&gt;"Edit"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edit_comment_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
...
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s2"&gt;"Homepage"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root_path&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Setting the &lt;code&gt;data-turbo&lt;/code&gt; attribute to &lt;code&gt;"true"&lt;/code&gt; will make Turbo process all links and forms inside the Turbo Frame block, &lt;strong&gt;while still ignoring them anywhere outside the frame&lt;/strong&gt;. So, in our example above, the "Edit" link will be handled by Turbo (and clicking on it will render an inline edit form), whereas the "Homepage" link will still be processed normally by the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-turbo-streams-responses"&gt;
  &lt;/a&gt;
  Using Turbo Streams responses
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://turbo.hotwire.dev/handbook/streams"&gt;Turbo Streams&lt;/a&gt; allow the back-end to explicitly declare changes to be made on the client. Whenever the response from the server contains one or more &lt;code&gt;&amp;lt;turbo-stream&amp;gt;&lt;/code&gt; elements, Turbo automatically executes the actions within them, updating the given fragments of the page.&lt;/p&gt;

&lt;p&gt;Similarly to Turbo Frames, links or forms that expect a Turbo Stream response must be &lt;strong&gt;rendered in a Turbo-enabled context&lt;/strong&gt;, so again the only change needed to make Streams work is setting the &lt;code&gt;data-turbo&lt;/code&gt; attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;%# app/views/comments/show.html.erb %&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;data-turbo=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;button_to&lt;/span&gt; &lt;span class="s2"&gt;"Approve"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;approve_comment_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the server responds with a Turbo Stream response, e.g. via a &lt;code&gt;respond_to&lt;/code&gt; block, Turbo will execute the page update commands, as in this somewhat ugly example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/controllers/comments_controller.rb&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;approve&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;approve!&lt;/span&gt;

  &lt;span class="n"&gt;respond_to&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;turbo_stream&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="ss"&gt;turbo_stream: &lt;/span&gt;&lt;span class="n"&gt;turbo_stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dom_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@comment&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                                &lt;span class="s2"&gt;"&amp;lt;p&amp;gt;approved!&amp;lt;p&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clicking on the "Approve" link will trigger Turbo (because it is enabled in that context), Turbo will make an AJAX request to the server, the server will respond with a &lt;code&gt;&amp;lt;turbo-stream&amp;gt;&lt;/code&gt; element containing a "prepend" action with the target of the given comment. Turbo will intercept this response and execute the action, effectively prepending the "approved!" text inside the comment div.&lt;/p&gt;

&lt;p&gt;This is all just normal Turbo Streams handling, all we had to do above that is enable Turbo for the particular page fragment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-turbo-streams-broadcasting"&gt;
  &lt;/a&gt;
  Using Turbo Streams broadcasting
&lt;/h2&gt;

&lt;p&gt;Turbo Streams don’t even need to respond to user interactions, they can also be used for broadcasting page updates asynchronously from the back-end.&lt;/p&gt;

&lt;p&gt;And, you know what? &lt;strong&gt;It just works, you don’t need to do anything special here.&lt;/strong&gt; For a simple example, add a broadcast command to your model:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# app/models/comment.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Comment&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;after_create_commit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;broadcast_prepend_to&lt;/span&gt; &lt;span class="s2"&gt;"comments"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;…and structure your index template accordingly and a newly created comment will be automatically prepended to a list of comments on the index page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight erb"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;%# app/views/comments/index.html.erb %&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;turbo_stream_from&lt;/span&gt; &lt;span class="s2"&gt;"comments"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"comments"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt; &lt;span class="vi"&gt;@comments&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How cool is that…?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mind-the-collision-with-rails-ujs"&gt;
  &lt;/a&gt;
  Mind the collision with Rails UJS
&lt;/h2&gt;

&lt;p&gt;If you used to render links with non-GET methods or ”AJAXified“ links with a &lt;code&gt;remote: true&lt;/code&gt; attribute, you need to know that these won’t work any more inside Turbo-enabled contexts. These functions are handled by &lt;a href="https://github.com/rails/rails/tree/main/actionview/app/assets/javascripts"&gt;Rails UJS&lt;/a&gt; and are &lt;a href="https://github.com/hotwired/turbo-rails#compatibility-with-rails-ujs"&gt;not compatible with Turbo&lt;/a&gt;. Non-GET links should be converted to inline forms using &lt;strong&gt;&lt;code&gt;button_to&lt;/code&gt;&lt;/strong&gt; and remote links should be refactored to normal links handled by Turbo.&lt;/p&gt;

&lt;p&gt;Other UJS features, such as disabling buttons or confirm dialogs continue to work normally.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;To sum this all up, Turbo seems to be perfectly usable even if your legacy JavaScript code does not allow you to switch on Turbo Drive (Turbolinks) right away. This is such a great news! Turbo enables us to &lt;strong&gt;gradually rewrite&lt;/strong&gt; (and effectively &lt;strong&gt;&lt;em&gt;remove&lt;/em&gt;&lt;/strong&gt;, for the most part) our old hand-written JavaScript. We can bring modern, highly reactive behavior to our newly built and updated pages without having to refactor all that rusty JavaScript prior to that.  &lt;/p&gt;

&lt;p&gt;Once the amount of JavaScript lowers substantially, we can take care of the remaining bits and switch on Turbo Drive globally to speed up the web experience even more.&lt;/p&gt;

&lt;p&gt;Overall we think this begins a new era in our front-end development and we are very excited about it! 💛&lt;/p&gt;

</description>
      <category>rails</category>
      <category>javascript</category>
      <category>hotwire</category>
      <category>turbo</category>
    </item>
    <item>
      <title>Blank spaces : how to deal with nothing in API design</title>
      <author>craignicol</author>
      <pubDate>Fri, 23 Apr 2021 12:22:00 +0000</pubDate>
      <link>https://dev.to/craignicol/blank-spaces-how-to-deal-with-nothing-in-api-design-185n</link>
      <guid>https://dev.to/craignicol/blank-spaces-how-to-deal-with-nothing-in-api-design-185n</guid>
      <description>&lt;p&gt;Consider the following HTTP endpoint:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GET /{user}/appointments&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;How do we deal with nothing?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nothingman"&gt;
  &lt;/a&gt;
  Nothingman
&lt;/h2&gt;

&lt;p&gt;🚫 If the user doesn’t currently exist, return 404 – this informs the caller that nothing can be done with this resource until it is created or recreated.&lt;/p&gt;

&lt;p&gt;🙈  If the user exists, but we want to protect against username enumeration, return 404 – this removes a route for malicious agents to identify actual users, perhaps prior to a password brute force. They may decide this endpoint is less likely to have the full protections afforded to the login endpoint. This endpoint should also avoid indirect enumeration, for example, returning immediately for “user doesn’t exist” and delayed for “user exists but we’re pretending because security”&lt;/p&gt;

&lt;p&gt;🔒 If the user exists but the caller doesn’t have permission to see their appointments, return 403 – the caller will have to log in or ask someone who has access.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#empty-time"&gt;
  &lt;/a&gt;
  Empty time
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Given&lt;/em&gt; the selected user exists&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;🔐 If this user does not support appointments, return 404 – these resources can’t be found.&lt;/p&gt;

&lt;p&gt;🗓 If this user does support appointments, but there are none, return an empty list.&lt;/p&gt;

&lt;p&gt;_ &lt;strong&gt;note&lt;/strong&gt; : some APIs will return &lt;code&gt;204 No Content&lt;/code&gt; in this scenario. 204 should only be used for POST or PUT requests to indicate server action was a success, and there’s no data to send back_&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#empty-space"&gt;
  &lt;/a&gt;
  Empty space
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Given&lt;/em&gt; the selected user exists&lt;br&gt;&lt;br&gt;
&lt;em&gt;And&lt;/em&gt; they have at least 1 valid appointment (see the business rules for what “valid” means)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;📺 If the appointment has no location (because online conference links are saved elsewhere in the appointment body) then no location property should be returned&lt;/p&gt;

&lt;p&gt;❔ If the appointment has no location (because it is unknown) then the location property should be returned with no data (the empty string)&lt;/p&gt;

</description>
      <category>code</category>
      <category>development</category>
      <category>ux</category>
      <category>api</category>
    </item>
    <item>
      <title>Turn your phone into a "cloud phone" with Raspberry Pi, is it possible?</title>
      <author>Toby Chui</author>
      <pubDate>Fri, 23 Apr 2021 12:20:28 +0000</pubDate>
      <link>https://dev.to/tobychui/turn-your-phone-into-a-cloud-phone-with-raspberry-pi-is-it-possible-4i4d</link>
      <guid>https://dev.to/tobychui/turn-your-phone-into-a-cloud-phone-with-raspberry-pi-is-it-possible-4i4d</guid>
      <description>&lt;p&gt;In recent years, I have been experimenting with a concept that I called the "Device independent cloud computing with cloud first approach". This might sounds like a title of a academic paper (maybe I will write a paper about it one day) and this concept might be new to everyone except those in the &lt;a href="https://github.com/tobychui/arozos"&gt;ArozOS&lt;/a&gt; development group. It actually boils down to two really simple concepts.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Everything is done on the cloud platform, independent on the device connecting to it&lt;/li&gt;
&lt;li&gt;No local storage should be used unless it is strictly necessary (aka the "cloud first approach" part)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Spoiler alert: This is not a technical post. This post investigate and discuss the concept of full cloud powered ecosystem and comparing it with the cloud assists model that we are currently using.&lt;/strong&gt;&lt;br&gt;
&lt;sup&gt;No worry, I will put in a bunch of diagrams so it is not that boring to read :P&lt;/sup&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#current-cloud-service"&gt;
  &lt;/a&gt;
  Current Cloud Service
&lt;/h2&gt;

&lt;p&gt;Lets talk about cloud phone. The first things come up to your mind maybe a phone with Google Cloud Services (Drive / Photo etc) or connected to your own NAS through NAS supplier's apps. If you are really into Android phones, you might have heard about a "cloud phone" named "Nextbit Robin". These are the examples what I called the "Cloud Assisted Model". In simple words, they work like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gn6Ztv99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxufsbkl5obszhkdctcb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gn6Ztv99--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxufsbkl5obszhkdctcb.png" alt="current model"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They assists the main device that require additional storage or computation power. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-has-changed"&gt;
  &lt;/a&gt;
  What has changed?
&lt;/h2&gt;

&lt;p&gt;The current environment is actually best fitted for such a cloud integrated system to exists. The most critical reasons are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Many people have now access to acceptably fast internet at home, at work, at university or even outdoor with 5G networks.&lt;/li&gt;
&lt;li&gt;WebApp integration on native OS / devices are getting better (e.g. Progress Web Apps, mediaSession API)&lt;/li&gt;
&lt;li&gt;All major platforms already have web browser built-in (Linux, Windows, MacOS, Android, iOS)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So in theory, you can run web application anywhere on any modern devices now, even the device is not owned by you, you can still run / login to your account and do personalized stuffs on it. (Like logging into your Google Drive on your friend's laptop to edit your document)&lt;/p&gt;

&lt;p&gt;This is also what happens to the "cloud era" as more and more users started to shift their workload to cloud. However, they still keep part of the works in local device.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fYzMXjEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4b7pvme7tuen6jedhzs3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fYzMXjEm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4b7pvme7tuen6jedhzs3.png" alt="native vs cloud"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#wait-isnt-this-already-exists"&gt;
  &lt;/a&gt;
  Wait, isn't this already exists?
&lt;/h2&gt;

&lt;p&gt;Yes, remote file access protocol exists for ages. I guess most of the user who used a NAS before should know about either SMB, WebDAV or FTP. These are the traditional methods for editing a file on a remote server. These are great but all of them have their own limitation. Furthermore, you still need to have the application installed on your machine in order to access or open the file transferred using that protocol. (e.g. You need an FTP client to access a remote file, or you need a video player to play a remote file serve by smb protocol)&lt;/p&gt;

&lt;p&gt;Instead of requiring a specific software on your native machine, pushing the software to the cloud server can further save you some space and dependencies on your local machine. Making your file more accessible on wider range of platforms. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uhlF0Jfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71zyjv6mozl2xs9sfb25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uhlF0Jfb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71zyjv6mozl2xs9sfb25.png" alt="ftp vs cloud"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-cloud-first-approach-could-be-implemented"&gt;
  &lt;/a&gt;
  How "Cloud First" approach could be implemented?
&lt;/h2&gt;

&lt;p&gt;Since 2016, I have been working on a project called "ArozOS". &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tobychui"&gt;
        tobychui
      &lt;/a&gt; / &lt;a href="https://github.com/tobychui/arozos"&gt;
        arozos
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      General purposed Web Desktop Operating Platform / OS for Raspberry Pis, Now written in Go!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/tobychui/arozos/master/img/banner.png?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yH5pg9U5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/tobychui/arozos/master/img/banner.png%3Fraw%3Dtrue" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e5d1b6c63a98b2f7c7c7aae6a731644b9d29f5f3e204a59f718b582d74e383a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4f70656e253230536f757263652d626c7565"&gt;&lt;img src="https://camo.githubusercontent.com/e5d1b6c63a98b2f7c7c7aae6a731644b9d29f5f3e204a59f718b582d74e383a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4f70656e253230536f757263652d626c7565"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4f4c275eb64cbe0e2b8420400805bb0427e832e7270bcc497924e82278691de7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4465766963652d5261737062657272792532305069253230334225324225323025324625323034422d726564"&gt;&lt;img src="https://camo.githubusercontent.com/4f4c275eb64cbe0e2b8420400805bb0427e832e7270bcc497924e82278691de7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4465766963652d5261737062657272792532305069253230334225324225323025324625323034422d726564"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/69366188f79ae03c7ff41b134a02cf48b9f73d23ba59e4335fd20a153318c201/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d616465253230496e253230486f6e672532304b6f6e672de9a699e6b8afe9968be799bc2d626c756576696f6c6574"&gt;&lt;img src="https://camo.githubusercontent.com/69366188f79ae03c7ff41b134a02cf48b9f73d23ba59e4335fd20a153318c201/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d616465253230496e253230486f6e672532304b6f6e672de9a699e6b8afe9968be799bc2d626c756576696f6c6574"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
IMPORTANT NOTES&lt;/h2&gt;
&lt;p&gt;The current arozos is still under intense development. System structure might change at any time. Please only develop on the current existing ArOZ Gateway Interface (AGI) JavaScript Interface or standard HTML webapps with ao_module.js endpoints.&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;h3&gt;
User Interface&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Web Desktop Interface (Better than Synology DSM)&lt;/li&gt;
&lt;li&gt;Ubuntu remix Windows style startup menu and task bars&lt;/li&gt;
&lt;li&gt;Clean and easy to use File Manager (Support drag drop, upload etc)&lt;/li&gt;
&lt;li&gt;Simplistic System Setting Menu&lt;/li&gt;
&lt;li&gt;No-bull-shit module naming scheme&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Networking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FTP Server&lt;/li&gt;
&lt;li&gt;WebDAV Server&lt;/li&gt;
&lt;li&gt;UPnP Port Forwarding&lt;/li&gt;
&lt;li&gt;Samba (Supported via 3rd party sub-services)&lt;/li&gt;
&lt;li&gt;WiFi Management (Support wpa_supplicant for Rpi or nmcli for Armbian)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
File / Disk Management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mount / Format Disk Utilities (support NTFS, EXT4 and more!)&lt;/li&gt;
&lt;li&gt;Virtual File System Architecture&lt;/li&gt;
&lt;li&gt;File Sharing (Similar to Google Drive)&lt;/li&gt;
&lt;li&gt;Basic File Operations with Real-time Progress (Copy / Cut / Paste / New File or Folder etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Others&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Require as little as 512MB system memory and…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tobychui/arozos"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;It is a tiny cloud system that can run on top of a Raspberry Pi and offer full web desktop experience on any modern portable computational devices. I have written another post for this system. If you haven't read about it, you can take a look at &lt;a href="https://dev.to/tobychui/i-write-my-own-web-desktop-os-for-3-years-and-this-is-what-it-looks-like-now-2903"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this system, I have implemented two of the most important WebApps to testify this concept: The Music and Video module.&lt;/p&gt;

&lt;p&gt;To try out the Raspberry Pi powered "cloud phone", I got myself a used Sony XZ1 Compact for testing. It has little RAM and storage, and it was sold really cheap online for less then 50USD. I only install the cloud enabled apps on it and use it for media consumption purpose. &lt;/p&gt;

&lt;p&gt;Using Chrome, I can add both of the application to home screen as an PWA WebApp. The icons and starting path can all be defined in the mainfest.json file. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6T4fYPFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2twxm8rmd8tulnli067.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6T4fYPFY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2twxm8rmd8tulnli067.png" alt="2021-04-23_19-01-21"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Music WebApp running in fullscreen PWA mode&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vwDBMsx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psk0l90w614e2as9ijbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vwDBMsx6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/psk0l90w614e2as9ijbf.png" alt="DSC_2429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video WebApp running in standalone PWA mode&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3qt3cO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyg7aiorp0ctv2gegxv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3qt3cO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyg7aiorp0ctv2gegxv2.png" alt="DSC_2431"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here are two screenshots directly captured on the Android phone for reference&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kk6MaIXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt7my6qewb9c1j2wjref.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kk6MaIXI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nt7my6qewb9c1j2wjref.png" alt="Screenshot_20210423-185919"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nZl2FcTx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vpywbzuvpw5w71ziy0b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nZl2FcTx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vpywbzuvpw5w71ziy0b.png" alt="Screenshot_20210423-185942"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks like a native Android App right?&lt;/p&gt;

&lt;p&gt;So you might wonder, how is the experience of using this system compare to some native audio player on Android? For me, there is not much difference between using this player compare to the build in Music player offer by Sony mobile as well as the VLC media player. Powered by the ArozOS file system, everything can be accessed via its File Manager on my desktop's browser so it is very easy to upload new music to the Raspberry Pi (and the "cloud phone") when I got a few new CDs. Compare to the traditional way of using Cloud which require a download and a native application for opening the file, this seems to make my life easier.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HFlYm_q---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er6862z2z4sunctjo4h1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HFlYm_q---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/er6862z2z4sunctjo4h1.png" alt="file open process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method of file storage also prevented the creation of duplicated files. Let say you own a few devices and you work on the same file on different devices at different time period. Then this will create a file synchronization problem. (Something like git merge conflict?)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tondso_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wq0q0r38r4vqhieyfsz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tondso_o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4wq0q0r38r4vqhieyfsz.png" alt="sync and delay"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I do understand modern synchronization is complex and most likely it can handle something like this. But why make it complex if you can just host the file on a network location that allow editing? &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-cons-of-using-cloud-first-approach"&gt;
  &lt;/a&gt;
  The Cons of using cloud first approach
&lt;/h2&gt;

&lt;p&gt;Of course, everything has its pros and cons. The problem with this method of media consumption is &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Power hungry, it use up the battery relatively faster than local storage, specially on mobile network. &lt;/li&gt;
&lt;li&gt;Large files are loading slow. But with new implementation of the media server in ArozOS, streaming is much faster now then the previous test I have done last month&lt;/li&gt;
&lt;li&gt;Browser support a less broad types of files. Some files might be unable to play on specific platforms.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In summary, as internet are getting cheaper (at least in Asia), and with a growing number of devices owned per person, I think this might be the future of how cloud will evolve into. Instead of backing up files and photos to cloud storage, people will just move all their whole workload to the cloud if they started to have many devices to deal with. We are already seeing trends of people using cloud notebooks, office tool sets, cloud video editing / rendering and more services that used to be desktop only.&lt;/p&gt;

&lt;p&gt;Finally, if you are interested to try out the PWA experience of Music playback and Video streaming, feel free to get a copy of ArozOS over here.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tobychui"&gt;
        tobychui
      &lt;/a&gt; / &lt;a href="https://github.com/tobychui/arozos"&gt;
        arozos
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      General purposed Web Desktop Operating Platform / OS for Raspberry Pis, Now written in Go!
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/tobychui/arozos/master/img/banner.png?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yH5pg9U5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/tobychui/arozos/master/img/banner.png%3Fraw%3Dtrue" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e5d1b6c63a98b2f7c7c7aae6a731644b9d29f5f3e204a59f718b582d74e383a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4f70656e253230536f757263652d626c7565"&gt;&lt;img src="https://camo.githubusercontent.com/e5d1b6c63a98b2f7c7c7aae6a731644b9d29f5f3e204a59f718b582d74e383a4/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4f70656e253230536f757263652d626c7565"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/4f4c275eb64cbe0e2b8420400805bb0427e832e7270bcc497924e82278691de7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4465766963652d5261737062657272792532305069253230334225324225323025324625323034422d726564"&gt;&lt;img src="https://camo.githubusercontent.com/4f4c275eb64cbe0e2b8420400805bb0427e832e7270bcc497924e82278691de7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4465766963652d5261737062657272792532305069253230334225324225323025324625323034422d726564"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/69366188f79ae03c7ff41b134a02cf48b9f73d23ba59e4335fd20a153318c201/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d616465253230496e253230486f6e672532304b6f6e672de9a699e6b8afe9968be799bc2d626c756576696f6c6574"&gt;&lt;img src="https://camo.githubusercontent.com/69366188f79ae03c7ff41b134a02cf48b9f73d23ba59e4335fd20a153318c201/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d616465253230496e253230486f6e672532304b6f6e672de9a699e6b8afe9968be799bc2d626c756576696f6c6574"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
IMPORTANT NOTES&lt;/h2&gt;
&lt;p&gt;The current arozos is still under intense development. System structure might change at any time. Please only develop on the current existing ArOZ Gateway Interface (AGI) JavaScript Interface or standard HTML webapps with ao_module.js endpoints.&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;h3&gt;
User Interface&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Web Desktop Interface (Better than Synology DSM)&lt;/li&gt;
&lt;li&gt;Ubuntu remix Windows style startup menu and task bars&lt;/li&gt;
&lt;li&gt;Clean and easy to use File Manager (Support drag drop, upload etc)&lt;/li&gt;
&lt;li&gt;Simplistic System Setting Menu&lt;/li&gt;
&lt;li&gt;No-bull-shit module naming scheme&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Networking&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FTP Server&lt;/li&gt;
&lt;li&gt;WebDAV Server&lt;/li&gt;
&lt;li&gt;UPnP Port Forwarding&lt;/li&gt;
&lt;li&gt;Samba (Supported via 3rd party sub-services)&lt;/li&gt;
&lt;li&gt;WiFi Management (Support wpa_supplicant for Rpi or nmcli for Armbian)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
File / Disk Management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Mount / Format Disk Utilities (support NTFS, EXT4 and more!)&lt;/li&gt;
&lt;li&gt;Virtual File System Architecture&lt;/li&gt;
&lt;li&gt;File Sharing (Similar to Google Drive)&lt;/li&gt;
&lt;li&gt;Basic File Operations with Real-time Progress (Copy / Cut / Paste / New File or Folder etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Others&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Require as little as 512MB system memory and…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tobychui/arozos"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Let me know what you thought. Will PWA be the future of cloud and mobile application? If "cloud phone" reappear on the market in the near future, will you give it a try?&lt;/p&gt;

</description>
      <category>android</category>
      <category>webdev</category>
      <category>pwa</category>
      <category>ux</category>
    </item>
    <item>
      <title>TLDR - Basic search field with Ruby on Rails </title>
      <author>Yaroslav Shmarov</author>
      <pubDate>Fri, 23 Apr 2021 12:08:43 +0000</pubDate>
      <link>https://dev.to/yarotheslav/search-field-without-gems-2g94</link>
      <guid>https://dev.to/yarotheslav/search-field-without-gems-2g94</guid>
      <description>&lt;h3&gt;
  &lt;a href="#mission-field-to-search-for-user-email-that-contains-characters-example"&gt;
  &lt;/a&gt;
  MISSION: field to search for user email that &lt;strong&gt;contains&lt;/strong&gt; characters. Example:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y0Di9eN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.corsego.com/assets/ruby-on-rails-search-field-without-gems/search-field.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0Di9eN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.corsego.com/assets/ruby-on-rails-search-field-without-gems/search-field.png" alt="search-field.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;users_controller.rb&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  def index
    if params[:email]
      @users = User.where('email ILIKE ?', "%#{params[:email]}%").order(created_at: :desc) #case-insensitive
    else
      @users = User.all.order(created_at: :desc)
    end
  end

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;any view (users/index.html.erb or in a &lt;strong&gt;bootstrap&lt;/strong&gt; navbar)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.form-inline.my-2.my-lg-0
  = form_tag(courses_path, method: :get) do
    .input-group
      = text_field_tag :title, params[:title], autocomplete: 'off', placeholder: "Find a course", class: 'form-control-sm'
      %span.input-group-append
        %button.btn.btn-primary.btn-sm{:type =&amp;gt; "submit"}
          %span.fa.fa-search{"aria-hidden" =&amp;gt; "true"}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;without bootstrap&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;%= form_tag(users_path, method: :get) do %&amp;gt;
  &amp;lt;%= text_field_tag :email, params[:email], autocomplete: 'off', placeholder: "user email" %&amp;gt;
  &amp;lt;%= submit_tag "Search" %&amp;gt;
&amp;lt;% end %&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Looks nice, doesn't it?&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
    </item>
    <item>
      <title>15+ Awesome Color Resources For Your Next Web Project</title>
      <author>Kiran Raj R</author>
      <pubDate>Fri, 23 Apr 2021 11:45:49 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/15-awesome-color-resources-for-your-next-web-project-48je</link>
      <guid>https://dev.to/kiranrajvjd/15-awesome-color-resources-for-your-next-web-project-48je</guid>
      <description>&lt;p&gt;When we design a website one of the most important element to consider is color scheme, we cannot remember all the colors or shades available, it will be helpful if we have a good resource about colors. I have listed some resources which will help you to get a good color scheme for your next project. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://colorpalettes.net/"&gt;ColorPalettes&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H4CRZQ9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/br43olifwnuwjnzve97l.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://colorhunt.co/"&gt;ColorHunt&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6xdEKcjc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hw4bzns5c4zl29a13af.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.0to255.com/"&gt;0 To 255&lt;/a&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PTc9t4wT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbrxakifv963y296cqaf.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://color.hailpixel.com/"&gt;Hailpixel&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--58Xryula--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tnguvcbgetca1bh2wtw6.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://clrs.cc/"&gt;Clrs.cc&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N0twijhR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/atvloro88gdk6xroa4v4.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://htmlcolorcodes.com/"&gt;HTMLColorCodes&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5pLHVGW2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nv0lmxxszsid620u53h.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://coolors.co/"&gt;Coolors&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LahqxWHM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10dd21jgze3kb6zqrruu.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://colormind.io/"&gt;ColorMind&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sIYST-0o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbe8cuc3nde2pfpsx2k4.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://colors.muz.li/"&gt;Muzil&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K5CUc3u6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1197s087gifkol3e1m6.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.canva.com/colors/color-palette-generator/"&gt;Canva&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--41rCmzLL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3q1xp4c0nmq0l4t6icp0.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://mycolor.space/"&gt;Mycolor.space&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yApPUykH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z2d8jc3pvd9eujjmnhmc.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://color.adobe.com/create/color-wheel/"&gt;AdobeColorWheel&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vqL1OzTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i677jzsog1mvofkd7xsf.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.huesnap.com/"&gt;Huesnap&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dxXpX3ru--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3yquscpm8nc9qjycbpao.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.materialpalette.com/"&gt;MaterialPalette&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qW7a1egT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5wk9d8bojvzwhdi6atlm.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.colorexplorer.com/colorpicker.aspx"&gt;ColorExplorer&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dFnsYjUn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6v6e3otcdp0osilnzjs.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://paletton.com/#uid=14j0u0kllllaFw0g0qFqFg0w0aF"&gt;Paletton&lt;/a&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H3L_3J0k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6960n90xns9xpmeb79r4.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://www.colorsontheweb.com/Color-Tools/Color-Wizard"&gt;ColorsOnTheWeb&lt;/a&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Evk8A7nn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o486hdoszehf0r84qyb0.PNG" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you are interested you can check for some more resources here. &lt;br&gt;
1.&lt;a href="https://dev.to/kiranrajvjd/20-awesome-css-code-generators-27gp"&gt;20+ Awesome CSS Code Generator Resources&lt;/a&gt;&lt;br&gt;
2.&lt;a href="https://dev.to/kiranrajvjd/awesome-35-svg-resources-for-your-next-web-project-5c15"&gt;40+ Awesome SVG Resources for Web Developers&lt;/a&gt;&lt;br&gt;
3.&lt;a href="https://dev.to/kiranrajvjd/4-awesome-tools-that-help-you-to-manage-you-css-code-better-39b6"&gt;4 Awesome Tools that Help You To Manage Your CSS&lt;/a&gt;&lt;br&gt;
4.&lt;a href="https://dev.to/kiranrajvjd/10-awesome-css-resources-14mh"&gt;10 Awesome CSS Resorces&lt;/a&gt;&lt;br&gt;
5.&lt;a href="https://dev.to/kiranrajvjd/awesome-css-layout-resources-for-beginners-508a"&gt;Awesome CSS Layout Resources&lt;/a&gt;&lt;br&gt;
6.&lt;a href="https://dev.to/kiranrajvjd/15-awesome-css-animation-resources-4mhi"&gt;Awesome CSS Animation Resources&lt;/a&gt;&lt;br&gt;
7.&lt;a href="https://dev.to/kiranrajvjd/25-awesome-fonts-from-google-fonts-40im"&gt;25 Awesome Google Fonts For Your Website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🎉 It's my birthday 🎂</title>
      <author>mrwolferinc</author>
      <pubDate>Fri, 23 Apr 2021 11:39:41 +0000</pubDate>
      <link>https://dev.to/mrwolferinc/it-s-my-birthday-gm5</link>
      <guid>https://dev.to/mrwolferinc/it-s-my-birthday-gm5</guid>
      <description>&lt;p&gt;So today is technically my birthday. Yes, I was born on the day that comes after Earth Day.&lt;/p&gt;

&lt;p&gt;I have planned to get 5 items on this special day, which were a 3D printer, some noise-canceling headphones, a &lt;a href="https://www.google.com/books/edition/_/f7wGeA71_eUC?hl=en"&gt;Python book&lt;/a&gt;, a new mousepad, and a new glasses case (I lost mine). I sent the list too late, so I will probably get some of the items after my birthday.&lt;/p&gt;

&lt;p&gt;I am also planning to go to Chili's for dinner. This is a family tradition, as we also do this on anniversaries. I usually get their classic bacon burger because I like bacon 😐&lt;/p&gt;




&lt;p&gt;Anyways, that's really much it for what I'll be doing today, none other than relaxing and having a good time.&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>birthday</category>
      <category>cakeday</category>
      <category>offtopic</category>
    </item>
    <item>
      <title>Same Time, Same Desk: Rails Conference and React Summit</title>
      <author>Jason Fleetwood-Boldt</author>
      <pubDate>Fri, 23 Apr 2021 11:25:19 +0000</pubDate>
      <link>https://dev.to/jasonfb/same-time-same-desk-rails-conference-and-react-summit-55c0</link>
      <guid>https://dev.to/jasonfb/same-time-same-desk-rails-conference-and-react-summit-55c0</guid>
      <description>&lt;p&gt;Last week in a virtual chat room at the React Summit Kent C. Dodds was asked an interesting question: What does he think of Rails? “I hesitate sometimes with frameworks that abstract a lot. It certainly worked out well for Rails. If you fit within the rails, pun intended, then everything’s gonna be fine. React has a totally different approach. We’re just gonna let you do this one thing really well and let you build around it.” Within that freedom greater innovation is born, he suggested. “I’ve never used Rails,” he qualified his statement.&lt;/p&gt;

&lt;p&gt;It stands in contrast to the other industry cult-leader, David Heinemeier-Hanson (who goes by DHH), giving the keynote to the Rails Conference on the same week.&lt;/p&gt;

&lt;p&gt;DHH was on-brand: he delivered a fire-and-brimstone polemic railing against Big Tech monopolies. He begins by throwing a Molotov cocktail at the JavaScript industry: Gmail ships with 3.5MB of JavaScript, and that Hey.com (an email platform he launched last year) ships with a mere 40 KB. Translated to laymen-speak: Hey.com has shipped a product 14 years after Gmail was first introduced to the public in 2007 with dramatically less frontend code, it loads and operates faster on modern devices and on older devices, and is easier to maintain and ship.&lt;/p&gt;

&lt;p&gt;DHH claims that Rails 7 (the next version) will mean Rails “now has a grand unifying answer for front-end.” In one section of his talk, his anti-Node sentiments flew out like bats from a closet door one rarely opens: “Is there an opening here where developing modern web applications do not require transpiling or bundling?” He continued later, “I don’t want to F around with Node.”&lt;/p&gt;

&lt;p&gt;The implicit assertion by DHH is that the JavaScript world (and React) has become overly complex: its patterns create huge, unmaintainable intertwined codebases. JavaScript-heavy apps and apps written in React are unnecessarily weighed down with layers that, at best, turn off new entrants into programming, and at worst, help further the monopolistic practices of Big Tech.&lt;/p&gt;

&lt;p&gt;“Ruby had been such a bring light for me, such a revelation, such a different path…I took on a role — in a highly antagonistic fashion ([I’ll] cop to it as it is) — to evangelize Ruby in a confrontational manner. Not just: Hey this is just another church you can join. No, I was like: Hey Java programmers, look at this sh*t! Look at this! It’s all this [little] code! And, like boom! Then it’s just this much code! Then what! Then what!” Although he proclaims this like a little kid, he does have the self-awareness of a man who has led Rails for nearly two decades, sheepishly admitting this attitude was a phase of his life he had to grow out of.&lt;/p&gt;

&lt;p&gt;On the React side of things — I was attending both conferences concurrently at my desk — things sounded quite a bit different. The ideology was less anti-capitalist, sponsored ads were broadcast on periodic schedules between talks, and the whole program seemed less focused on cult leaders. The React community moves fast. It’s more of a hodge-podge of competing ideas and everyone — like Gen Z itself — is enamored with the idea that democracy lifts up the winner among a field of competing technologies.&lt;/p&gt;

&lt;p&gt;Years ago class-based components were how React JavaScript was written, (we’re talking about object orientation, not capitalism), but last year the React world officially changed both its syntax, implementation details, and made a major shift away from object-oriented patterns towards functional programming (FP) using what is called the “hooks pattern” or just “hooks.”&lt;/p&gt;

&lt;p&gt;The React world sees ‘closed’ ecosystems like Rails — perhaps even DHH himself — as the oligarchy precluding innovation. Ironically, DHH sees himself as the opposite: He is the David in David vs. the Goliath of the fight against tech monopolies. Apple, Google, and their corporate power to control who codes and who does not are the true enemy.&lt;/p&gt;

&lt;p&gt;View Post&lt;/p&gt;

&lt;p&gt;He said, “This is the titanic fight of the century. The fight against concentrated power and money. The biggest companies, not just in the US but in the world, are tech monopolies. They are slowly squeezing the life out of people at the edges while still providing products that people enjoy. This is why this is not the same clear-cut case that you can imagine, like railroads or tobacco [were monopolies], but I think it’s going to be that.”&lt;/p&gt;

&lt;p&gt;For myself, my career advanced during the golden age of startups (2008–2014) but was dramatically usurped by age of platformization in tech. The eight years I spent building e-commerce were rendered no longer necessary by Shopify. In short, my career was replaced by a robot.&lt;/p&gt;

&lt;p&gt;As a 42-year-old seasoned developer on the job market, it’s challenging to make a switch. I generally think most hiring in React probably see me as too old to even be relevant. (Mr. Heinemeier-Hanson, whom I have never met but interacted with online, happens to be one month to the day older than me. Kent Dodds, whom I have also never met and only saw as an audience member at this virtual conference, is 10 years younger than DHH and I are.)&lt;/p&gt;

&lt;p&gt;The interviews I do get are all for Rails positions and have a common theme: A large team of mid-career devs in an organization with an old Rails codebase. The codebase shows years of slipped (or non-existent) testing practices, inconsistent patterns and design systems, and rushed code abstractions problems (or, as we say in the biz, “code smells”). People throw around terms like every developer reinvents the wheel. These teams speak to a larger pattern in the tech ecosystem: A very few select Rails apps from the golden age of startups survived, and all the others failed. (If your name is Github, Shopify, or Basecamp please stand up.)&lt;/p&gt;

&lt;p&gt;The ones that failed number in the thousands and thousands of Rails apps. They were tech startups that didn’t cross the chasm, or at least didn’t do so on Rails. This left Ruby on Rails as a paradoxically more specialized but smaller community, like the frontrunner everyone forgot about.&lt;/p&gt;

&lt;p&gt;(In his famous 1991 book Crossing the Chasm Geoffrey Moore asserted that in the technology adoption lifecycle, a tech company could probably get its friends and family to be innovators and early adopters.Then, the critical make-or-break period is when a tech company moves, like a tortoise, across a large chasm in a desert with predators [competitors] on all sides ready to take it down.)&lt;/p&gt;

&lt;p&gt;An experience gap in the industry has left a void: Quality standards aren’t what they should be.&lt;/p&gt;

&lt;p&gt;Unlike 2008, today there are tech-haves and tech-have-nots: working at an early-stage startup is now seen as risky, aberrant, and probably a place where soloism is fostered. For early career entrants into software today, it seems they are all hungry to get positions at late-stage tech company (like Google, Apple, Microsoft, Amazon, Facebook, Adobe, Paypal, Shopify, Spotify, etc). When I was in the tech bubble in San Francisco in 2008, if you didn’t in a Google, Apple, or Yahoo you could certainly be a founder of your own tech startup to gain similar cachet (I’m talking about prestige and admiration, not computer memory). Today nobody ‘goes into’ startups.&lt;/p&gt;

&lt;p&gt;Rails was born out of a rebellion against Java. “Look at how little code we can write, Java devs. Now what!” DHH proclaimed proudly. It was always an anti-corporate framework that helped startups get from the innovators to the early adopters. But did Rails apps survive crossing the chasm to early majority?&lt;/p&gt;

&lt;p&gt;People ask me what I predict will happen in the future of mobile, e-commerce, web development, and hardware tech. I haven’t the foggiest, I tell them, and if I knew I likely wouldn’t tell you. Keep testing and carry on.&lt;/p&gt;

&lt;p&gt;—&lt;/p&gt;

&lt;p&gt;Jason Fleetwood-Boldt is a senior developer looking for work. He runs the &lt;a href="https://www.linkedin.com/groups/12524236/"&gt;Rails❤️React&lt;/a&gt; group on LinkedIn and the &lt;a href="https://www.meetup.com/brooklyn-javascripters/"&gt;Brooklyn JavaScripters Meetup&lt;/a&gt; where he evangelizes best practices, code testing, de-programming from cargo cults, and using Rails+React together.&lt;/p&gt;

&lt;p&gt;Cover art by &lt;a href="https://www.instagram.com/cosmic_travesty"&gt;IncrediblyBizzy&lt;/a&gt;&lt;/p&gt;

</description>
      <category>rails</category>
      <category>ruby</category>
      <category>react</category>
    </item>
  </channel>
</rss>
