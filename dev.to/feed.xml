<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 ReactJS Coding Exercises ( With Codepen üìù Exercise and Solution üí•)</title>
      <author>Let's Code</author>
      <pubDate>Wed, 05 Jan 2022 00:20:37 +0000</pubDate>
      <link>https://dev.to/frontendengineer/10-reactjs-coding-exercises-with-codepen-exercise-and-solution--22k7</link>
      <guid>https://dev.to/frontendengineer/10-reactjs-coding-exercises-with-codepen-exercise-and-solution--22k7</guid>
      <description>&lt;p&gt;Last month, I posted 2 ReactJS interview questions üé§ - &lt;a href="https://dev.to/frontendengineer/react-interview-questions-part-2-mid-senior-level-cal"&gt;Advance Questions&lt;/a&gt; and &lt;a href="https://dev.to/frontendengineer/common-react-interview-questions-50gm"&gt;Commonly Asked Question&lt;/a&gt; and got a significant welcome by dev.to community. ü§ó ü•∞ Many thanks to all of you!&lt;/p&gt;

&lt;p&gt;I decided to complete the package by creating codepen exercises üìù and a video üì∫ to follow up on that effort as one will need to code following the technical interview questions. Also, I added potential solutions for the exercises which is listed below. &lt;/p&gt;

&lt;p&gt;If you need to brush up üÜô your ninja ReactJS skills, click the video below to start. (No filler, fast, straight to the point as I highly respect your time)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VzNNjNmbXpY"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;p&gt;These exercises and solutions will also be available on the video as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#exercises"&gt;
  &lt;/a&gt;
  Exercises: üèãÔ∏è
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#display-simple-jsx"&gt;
  &lt;/a&gt;
  Display simple JSX
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/wvrygZa"&gt;https://codepen.io/angelo_jin/pen/wvrygZa&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#display-array-of-users-to-browser"&gt;
  &lt;/a&gt;
  Display array of users to browser
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/QWqQdXE"&gt;https://codepen.io/angelo_jin/pen/QWqQdXE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#showhide-element-on-screen"&gt;
  &lt;/a&gt;
  Show/Hide Element on Screen
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/zYERZZL"&gt;https://codepen.io/angelo_jin/pen/zYERZZL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#2-way-data-binding-in-reactjs"&gt;
  &lt;/a&gt;
  2 way data binding in ReactJS
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/MWEQmqN"&gt;https://codepen.io/angelo_jin/pen/MWEQmqN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#disable-a-button"&gt;
  &lt;/a&gt;
  Disable a button
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/YzrazGY"&gt;https://codepen.io/angelo_jin/pen/YzrazGY&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#update-the-parent-state"&gt;
  &lt;/a&gt;
  Update the parent state
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/JjrLjOy"&gt;https://codepen.io/angelo_jin/pen/JjrLjOy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#dynamically-add-child-components-react-children"&gt;
  &lt;/a&gt;
  Dynamically add child components (React Children)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/BawrpeX"&gt;https://codepen.io/angelo_jin/pen/BawrpeX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#sum-of-two-numbers"&gt;
  &lt;/a&gt;
  Sum of Two Numbers
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/zYEWZNR"&gt;https://codepen.io/angelo_jin/pen/zYEWZNR&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#create-counter-app"&gt;
  &lt;/a&gt;
  Create Counter App
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/mdBxWwN"&gt;https://codepen.io/angelo_jin/pen/mdBxWwN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#fetch-data-from-an-api"&gt;
  &lt;/a&gt;
  Fetch data from an API
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/oNGqZpm"&gt;https://codepen.io/angelo_jin/pen/oNGqZpm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#solutions"&gt;
  &lt;/a&gt;
  Solutions: üôã
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#display-simple-jsx"&gt;
  &lt;/a&gt;
  Display simple JSX
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/xxXrZLd"&gt;https://codepen.io/angelo_jin/pen/xxXrZLd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#display-array-of-users-to-browser"&gt;
  &lt;/a&gt;
  Display array of users to browser
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/wvreMpZ"&gt;https://codepen.io/angelo_jin/pen/wvreMpZ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#showhide-element-on-screen"&gt;
  &lt;/a&gt;
  Show/Hide Element on Screen
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/abLwyrL"&gt;https://codepen.io/angelo_jin/pen/abLwyrL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#2-way-data-binding-in-reactjs"&gt;
  &lt;/a&gt;
  2 way data binding in ReactJS
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/yLzvMop"&gt;https://codepen.io/angelo_jin/pen/yLzvMop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#disable-a-button"&gt;
  &lt;/a&gt;
  Disable a button
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/dyVmyYz"&gt;https://codepen.io/angelo_jin/pen/dyVmyYz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#update-the-parent-state"&gt;
  &lt;/a&gt;
  Update the parent state
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/KKXoKgO"&gt;https://codepen.io/angelo_jin/pen/KKXoKgO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#dynamically-add-child-components-react-children"&gt;
  &lt;/a&gt;
  Dynamically add child components (React Children)
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/MWEVJNb"&gt;https://codepen.io/angelo_jin/pen/MWEVJNb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#sum-of-two-numbers"&gt;
  &lt;/a&gt;
  Sum of Two Numbers
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/BawrWzy"&gt;https://codepen.io/angelo_jin/pen/BawrWzy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#create-counter-app"&gt;
  &lt;/a&gt;
  Create Counter App üïí
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/yLzKMXX"&gt;https://codepen.io/angelo_jin/pen/yLzKMXX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#fetch-data-from-an-api"&gt;
  &lt;/a&gt;
  Fetch data from an API
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/angelo_jin/pen/zYEWZdW"&gt;https://codepen.io/angelo_jin/pen/zYEWZdW&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding and good luck on your next interview! I hope this material will help you land your next dream job. üí∞ üöó üìà&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>challenge</category>
    </item>
    <item>
      <title>The CodeNewbie Challenge Is Returning for 2022 with Exciting New Updates</title>
      <author>dev.to staff</author>
      <pubDate>Tue, 04 Jan 2022 22:21:22 +0000</pubDate>
      <link>https://dev.to/devteam/the-codenewbie-challenge-is-returning-for-2022-with-exciting-new-updates-2b32</link>
      <guid>https://dev.to/devteam/the-codenewbie-challenge-is-returning-for-2022-with-exciting-new-updates-2b32</guid>
      <description>&lt;h2&gt;
  &lt;a href="#codenewbie-challenge-2022-begins-on-january-31st-register-for-cohort-1-by-january-30th"&gt;
  &lt;/a&gt;
  CodeNewbie Challenge 2022 begins on January 31st. &lt;a href="https://community.codenewbie.org/cnc2022"&gt;Register for Cohort 1&lt;/a&gt; by January 30th.
&lt;/h2&gt;




&lt;p&gt;In early 2020, DEV acquired an incredible, supportive community for early-career software developers and people learning to code called CodeNewbie. &lt;/p&gt;

&lt;p&gt;Since then, we've embarked on many exciting adventures together including two entirely virtual CodeLand conferences and the creation of &lt;a href="https://community.codenewbie.org"&gt;CodeNewbie Community&lt;/a&gt;: the official home of CodeNewbie built on Forem.&lt;/p&gt;

&lt;p&gt;In 2021, we relaunched the &lt;strong&gt;CodeNewbie Challenge&lt;/strong&gt; together. This collection of email-based challenges including ("Start Coding", "Code More", "Write More", and "Get a Job") existed long before DEV and CodeNewbie joined forces, but together, we updated it and added in additional support options and a central hub on CodeNewbie Community. Those who participated benefitted from structure, public accountability, inspiration, and ample learning opportunities to reach their goals.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#were-thrilled-to-share-that-were-updating-the-codenewbie-challenge-for-2022-cnc2022"&gt;
  &lt;/a&gt;
   We're thrilled to share that we're updating the &lt;a href="https://community.codenewbie.org/cnc2022"&gt;CodeNewbie Challenge for 2022&lt;/a&gt; (#CNC2022).

&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;#CNC2022 returns on January 31st. This time, we're making a few changes, including:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href="https://community.codenewbie.org/cnc2022"&gt;pre-registration&lt;/a&gt;, cohort-based model that allows you to stay in tighter communication with others participating in your chosen challenge&lt;/li&gt;
&lt;li&gt;Updated resources&lt;/li&gt;
&lt;li&gt;A brand new "Learn in Public" challenge that will give you the guidance you need to turn your technical learning journey into a tool for others&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to make a change in your career or coding journey, we highly encourage you to &lt;a href="https://community.codenewbie.org/cnc2022"&gt;sign up&lt;/a&gt; for Cohort 1 of #CNC2022. &lt;/p&gt;

&lt;p&gt;Learn more, pick your challenge, and sign up for Cohort 1 &lt;a href="https://community.codenewbie.org/cnc2022"&gt;here&lt;/a&gt; by January 30th. The challenge officially kicks off on January 31st, 2022. &lt;/p&gt;




&lt;p&gt;Cheers to starting to code, coding more, writing more, getting a job, and learning in public with the CodeNewbie Challenge in 2022 ‚≠êÔ∏è           &lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>announcements</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Profiling and Analyzing Performance of Python Programs</title>
      <author>Martin Heinz</author>
      <pubDate>Tue, 04 Jan 2022 22:01:32 +0000</pubDate>
      <link>https://dev.to/martinheinz/profiling-and-analyzing-performance-of-python-programs-5c9c</link>
      <guid>https://dev.to/martinheinz/profiling-and-analyzing-performance-of-python-programs-5c9c</guid>
      <description>&lt;p&gt;Profiling is integral to any code and performance optimization. Any experience and skill in performance optimization that you might already have will not be very useful if you don't know where to apply it. Therefore, finding bottlenecks in your applications can help you solve performance issues quickly with very little overall effort.&lt;/p&gt;

&lt;p&gt;In this article we will look at the tools and techniques that can help us narrow down our focus and find bottlenecks both for CPU and memory consumption, as well as how to implement easy (almost zero-effort) solutions to performance issues in cases where even well targeted code changes won't help anymore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#identify-bottlenecks"&gt;
  &lt;/a&gt;
  Identify Bottlenecks
&lt;/h2&gt;

&lt;p&gt;It's good to be lazy when it comes to performance optimization. Instead of trying to figure out which part of a codebase is making an application slow, we can just use profiling tools to find the areas that need attention or further digging.&lt;/p&gt;

&lt;p&gt;The most common tool for this task used by Python developers is &lt;code&gt;cProfile&lt;/code&gt;. It's a builtin module that can measure execution time of each function in our code.&lt;/p&gt;

&lt;p&gt;Let's consider the following function that (slowly) computes &lt;code&gt;e&lt;/code&gt; to the power of &lt;code&gt;X&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# some-code.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decimal&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;getcontext&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;prec&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lasts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;lasts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;lasts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt;
    &lt;span class="n"&gt;getcontext&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;prec&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;

&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Decimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's run &lt;code&gt;cProfile&lt;/code&gt; against the above slow code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python &lt;span class="nt"&gt;-m&lt;/span&gt; cProfile &lt;span class="nt"&gt;-s&lt;/span&gt; cumulative some-code.py
         1052 &lt;span class="k"&gt;function &lt;/span&gt;calls &lt;span class="o"&gt;(&lt;/span&gt;1023 primitive calls&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in &lt;/span&gt;2.765 seconds

   Ordered by: cumulative timek

   ncalls  tottime  percall  cumtime  percall filename:lineno&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      5/1    0.000    0.000    2.765    2.765 &lt;span class="o"&gt;{&lt;/span&gt;built-in method builtins.exec&lt;span class="o"&gt;}&lt;/span&gt;
        1    0.000    0.000    2.765    2.765 some-code.py:1&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;module&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
        1    2.764    2.764    2.764    2.764 some-code.py:3&lt;span class="o"&gt;(&lt;/span&gt;exp&lt;span class="o"&gt;)&lt;/span&gt;
      4/1    0.000    0.000    0.001    0.001 &amp;lt;frozen importlib._bootstrap&amp;gt;:986&lt;span class="o"&gt;(&lt;/span&gt;_find_and_load&lt;span class="o"&gt;)&lt;/span&gt;
      4/1    0.000    0.000    0.001    0.001 &amp;lt;frozen importlib._bootstrap&amp;gt;:956&lt;span class="o"&gt;(&lt;/span&gt;_find_and_load_unlocked&lt;span class="o"&gt;)&lt;/span&gt;
      4/1    0.000    0.000    0.001    0.001 &amp;lt;frozen importlib._bootstrap&amp;gt;:650&lt;span class="o"&gt;(&lt;/span&gt;_load_unlocked&lt;span class="o"&gt;)&lt;/span&gt;
      3/1    0.000    0.000    0.001    0.001 &amp;lt;frozen importlib._bootstrap_external&amp;gt;:842&lt;span class="o"&gt;(&lt;/span&gt;exec_module&lt;span class="o"&gt;)&lt;/span&gt;
      5/1    0.000    0.000    0.001    0.001 &amp;lt;frozen importlib._bootstrap&amp;gt;:211&lt;span class="o"&gt;(&lt;/span&gt;_call_with_frames_removed&lt;span class="o"&gt;)&lt;/span&gt;
        1    0.000    0.000    0.001    0.001 decimal.py:2&lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;module&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we used &lt;code&gt;-s cumulative&lt;/code&gt; to sort the output by cumulative time spend in each function, making it easier to find the problematic areas of code in the output. We can see that pretty much all time (~2.764 sec) was spent in the &lt;code&gt;exp&lt;/code&gt; function during the single invocation.&lt;/p&gt;

&lt;p&gt;This kind of profiling can be useful, but unfortunately might not be always sufficient. &lt;code&gt;cProfile&lt;/code&gt; only gives information about function calls, not about individual lines of code - if you call some particular function such as &lt;code&gt;append&lt;/code&gt; in different places, then it will be all aggregated into single line in &lt;code&gt;cProfile&lt;/code&gt; output. Same goes for scripts like the one we used above - it contains single function that gets called just once, so there's not much for &lt;code&gt;cProfile&lt;/code&gt; to report.&lt;/p&gt;

&lt;p&gt;Sometimes we don't have the luxury of being able to analyze the troublesome code locally, or we might need to analyze a performance issue on the fly when it arises in production environment. In these situations we can make use of &lt;code&gt;py-spy&lt;/code&gt; which is a profiler that can introspect already running program, for example an application in production environment or on any remote system:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;py-spy
python some-code.py &amp;amp;
&lt;span class="o"&gt;[&lt;/span&gt;1] 1129587
ps &lt;span class="nt"&gt;-A&lt;/span&gt; &lt;span class="nt"&gt;-o&lt;/span&gt; pid,cmd | &lt;span class="nb"&gt;grep &lt;/span&gt;python
...
1129587 python some-code.py
1130365 &lt;span class="nb"&gt;grep &lt;/span&gt;python

&lt;span class="nb"&gt;sudo env&lt;/span&gt; &lt;span class="s2"&gt;"PATH=&lt;/span&gt;&lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; py-spy top &lt;span class="nt"&gt;--pid&lt;/span&gt; 1129587
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet we first install &lt;code&gt;py-spy&lt;/code&gt; and then run our long-running Python program in background. This will show PID number automatically, but if we didn't know it, then we could use the &lt;code&gt;ps&lt;/code&gt; command to look it up. Finally, we run &lt;code&gt;py-spy&lt;/code&gt; in &lt;code&gt;top&lt;/code&gt; mode passing in the PID. This will produce terminal view that mimics the auto-updating output of Linux &lt;code&gt;top&lt;/code&gt; utility, similar to the screenshot below. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XY6USyId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o7w7fd6vddnqbriidab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XY6USyId--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1o7w7fd6vddnqbriidab.png" alt="py-spy top" width="720" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This doesn't really give us that much info, because this script has just one long-running function, but in real-world scenarios, you would most likely see many functions sharing the CPU time, which might help shed some light on ongoing performance issues of the program.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digging-deeper"&gt;
  &lt;/a&gt;
  Digging Deeper
&lt;/h2&gt;

&lt;p&gt;The above profilers should help you find function(s) that are causing performance issues, but if that doesn't narrow down the focus area enough for you to know what to fix, then we can turn to profilers that operate on more granular level.&lt;/p&gt;

&lt;p&gt;First of those is &lt;code&gt;line_profiler&lt;/code&gt; which - as the name suggests - can be used to drill down on time spend on each individual line of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# https://github.com/pyutils/line_profiler&lt;/span&gt;
pip &lt;span class="nb"&gt;install &lt;/span&gt;line_profiler
kernprof &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; some-code.py  &lt;span class="c"&gt;# This might take a while...&lt;/span&gt;

Wrote profile results to some-code.py.lprof
Timer unit: 1e-06 s

Total &lt;span class="nb"&gt;time&lt;/span&gt;: 13.0418 s
File: some-code.py
Function: exp at line 3

Line &lt;span class="c"&gt;#      Hits         Time  Per Hit   % Time  Line Contents&lt;/span&gt;
&lt;span class="o"&gt;==============================================================&lt;/span&gt;
     3                                           @profile
     4                                           def exp&lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;:
     5         1          4.0      4.0      0.0      getcontext&lt;span class="o"&gt;()&lt;/span&gt;.prec +&lt;span class="o"&gt;=&lt;/span&gt; 2
     6         1          0.0      0.0      0.0      i, lasts, s, fact, num &lt;span class="o"&gt;=&lt;/span&gt; 0, 0, 1, 1, 1
     7      5818       4017.0      0.7      0.0      &lt;span class="k"&gt;while &lt;/span&gt;s &lt;span class="o"&gt;!=&lt;/span&gt; lasts:
     8      5817       1569.0      0.3      0.0          lasts &lt;span class="o"&gt;=&lt;/span&gt; s
     9      5817       1837.0      0.3      0.0          i +&lt;span class="o"&gt;=&lt;/span&gt; 1
    10      5817       6902.0      1.2      0.1          fact &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; i
    11      5817       2604.0      0.4      0.0          num &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; x
    12      5817   13024902.0   2239.1     99.9          s +&lt;span class="o"&gt;=&lt;/span&gt; num / fact
    13         1          5.0      5.0      0.0      getcontext&lt;span class="o"&gt;()&lt;/span&gt;.prec -&lt;span class="o"&gt;=&lt;/span&gt; 2
    14         1          2.0      2.0      0.0      &lt;span class="k"&gt;return&lt;/span&gt; +s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;line_profiler&lt;/code&gt; library is distributed together with &lt;code&gt;kernprof&lt;/code&gt; CLI (named after Robert Kern) used to effectively analyze results of test runs. By running this utility against our code we produce a &lt;code&gt;.lprof&lt;/code&gt; file with code analysis as well as the above output (when &lt;code&gt;-v&lt;/code&gt; is used). This output clearly shows where in the function we spend the most amount of time, which greatly helps with finding and fixing the performance issue. In the output, you will also notice the &lt;code&gt;@profile&lt;/code&gt; decorator was added to the &lt;code&gt;exp&lt;/code&gt; function - that's necessary so that &lt;code&gt;line_profiler&lt;/code&gt; knows which function in the file we want to analyze.&lt;/p&gt;

&lt;p&gt;Even when running analysis on per-line basis, it still might not be clear what is the culprit of performance issues. Example of this could be &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;if&lt;/code&gt; conditionals composed of multiple expression. In cases like these, it would make sense to rewrite the specific line into multiple ones to get more comprehensive analysis results.&lt;/p&gt;

&lt;p&gt;If you're truly lazy developer (as me) and reading CLI text output is too much to ask, then another option is to use &lt;code&gt;pyheat&lt;/code&gt;. This is a profiler based on &lt;code&gt;pprofile&lt;/code&gt; - another line-by-line profiler, inspired by &lt;code&gt;line_profiler&lt;/code&gt; - which generates a heat map of code lines/areas that are taking the most amount of time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;py-heat
pyheat some-code.py &lt;span class="nt"&gt;--out&lt;/span&gt; image_file.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3G4hH37Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vraw5aw02zi9v27lrvb7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3G4hH37Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vraw5aw02zi9v27lrvb7.png" alt="pyheat heat map" width="550" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Considering the simplicity of our sample code we used, the CLI output from &lt;code&gt;kernprof&lt;/code&gt; earlier was already pretty clear, but the above heat map makes the bottleneck in the function even more obvious. &lt;/p&gt;

&lt;p&gt;So far, we've spoken about CPU profiling, but CPU usage might not always be what we care about. RAM is cheap, so we don't usually think about its usage, well at least until we run out of it.&lt;/p&gt;

&lt;p&gt;Even if you're not running out of RAM, it still makes sense to profile your application for memory usage to find out whether you can optimize code to save memory or whether you can add more memory to improve performance of your code. To analyze memory usage we can use tool called &lt;code&gt;memory_profiler&lt;/code&gt; which mimics the behaviour of earlier shown &lt;code&gt;line_profiler&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# https://github.com/pythonprofilers/memory_profiler&lt;/span&gt;
pip &lt;span class="nb"&gt;install &lt;/span&gt;memory_profiler psutil
&lt;span class="c"&gt;# psutil is needed for better memory_profiler performance&lt;/span&gt;

python &lt;span class="nt"&gt;-m&lt;/span&gt; memory_profiler some-code.py
Filename: some-code.py

Line &lt;span class="c"&gt;#    Mem usage    Increment  Occurrences   Line Contents&lt;/span&gt;
&lt;span class="o"&gt;============================================================&lt;/span&gt;
    15   39.113 MiB   39.113 MiB            1   @profile
    16                                          def memory_intensive&lt;span class="o"&gt;()&lt;/span&gt;:
    17   46.539 MiB    7.426 MiB            1       small_list &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;None] &lt;span class="k"&gt;*&lt;/span&gt; 1000000
    18  122.852 MiB   76.312 MiB            1       big_list &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;None] &lt;span class="k"&gt;*&lt;/span&gt; 10000000
    19   46.766 MiB  &lt;span class="nt"&gt;-76&lt;/span&gt;.086 MiB            1       del big_list
    20   46.766 MiB    0.000 MiB            1       &lt;span class="k"&gt;return &lt;/span&gt;small_list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this test we chose a little different piece of code. The &lt;code&gt;memory_intensive&lt;/code&gt; function creates and deletes large Python lists to clearly demonstrate how &lt;code&gt;memory_profiler&lt;/code&gt; can be helpful in analyzing memory usage. Same as with &lt;code&gt;kernprof&lt;/code&gt; profiling, here we also have to tack on &lt;code&gt;@profile&lt;/code&gt; to function under text for &lt;code&gt;memory_profiler&lt;/code&gt; to recognize which part of code we want to profile.&lt;/p&gt;

&lt;p&gt;This shows that upwards of 100MiB were allocated just for a simple list of &lt;code&gt;None&lt;/code&gt; values. Bear in mind though, that this output doesn't show true usage of memory, but rather how much memory was allocated by function call on each line. In this case that means that the list variables aren't actually storing as much memory, just that Python &lt;code&gt;list&lt;/code&gt; is likely to over-allocate memory to accommodate for the expected growth of the variable.&lt;/p&gt;

&lt;p&gt;As we can see from the above, Python lists can oftentimes consume hundreds of megabytes or even gigabytes of memory, one quick optimization can be switching to plain &lt;code&gt;array&lt;/code&gt; objects instead, which stores primitive datatypes, such as &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;float&lt;/code&gt; more efficiently. Additionally, you can also limit memory usage by choosing lower precision type using &lt;code&gt;typecode&lt;/code&gt; parameter, use &lt;code&gt;help(array)&lt;/code&gt; to see table of valid options and their sizes.&lt;/p&gt;

&lt;p&gt;If even these more specific and granular tools aren't sufficient at finding bottlenecks in your code, then you can try disassembling it and see the actual bytecode used by Python interpreter. Even if the disassembly doesn't help you solve the problem at hand, it will still be useful at getting better idea and understanding of which operations are performed by Python in the background each time you invoke some particular function. Keeping these facts in mind might help you write more performant code in the future.&lt;/p&gt;

&lt;p&gt;Code disassembly can be generated using the builtin &lt;code&gt;dis&lt;/code&gt; module, by passing a function/code/module to &lt;code&gt;dis.dis(...)&lt;/code&gt;. This generates and prints a list of bytecode instructions performed by the function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="c1"&gt;# math.exp(x)
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dis&lt;/span&gt;
&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Throughout whole article we've been using very slow implementation of &lt;code&gt;e&lt;/code&gt; to power of &lt;code&gt;X&lt;/code&gt;, so above we defined trivial function that does it fast, so that we can compare their disassemblies. Trying to disassemble both of them will lend a wildly different outputs that makes it even more obvious why one is significantly slower than the other.&lt;/p&gt;

&lt;p&gt;The fast one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  2           0 LOAD_GLOBAL              0 &lt;span class="o"&gt;(&lt;/span&gt;e&lt;span class="o"&gt;)&lt;/span&gt;
              2 LOAD_FAST                0 &lt;span class="o"&gt;(&lt;/span&gt;x&lt;span class="o"&gt;)&lt;/span&gt;
              4 BINARY_POWER
              6 RETURN_VALUE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The old, slow version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;  4           0 LOAD_GLOBAL              0 &lt;span class="o"&gt;(&lt;/span&gt;getcontext&lt;span class="o"&gt;)&lt;/span&gt;
              2 CALL_FUNCTION            0
              4 DUP_TOP
              6 LOAD_ATTR                1 &lt;span class="o"&gt;(&lt;/span&gt;prec&lt;span class="o"&gt;)&lt;/span&gt;
              8 LOAD_CONST               1 &lt;span class="o"&gt;(&lt;/span&gt;2&lt;span class="o"&gt;)&lt;/span&gt;
             10 INPLACE_ADD
             12 ROT_TWO
             14 STORE_ATTR               1 &lt;span class="o"&gt;(&lt;/span&gt;prec&lt;span class="o"&gt;)&lt;/span&gt;

  5          16 LOAD_CONST               2 &lt;span class="o"&gt;((&lt;/span&gt;0, 0, 1, 1, 1&lt;span class="o"&gt;))&lt;/span&gt;
             18 UNPACK_SEQUENCE          5
             20 STORE_FAST               1 &lt;span class="o"&gt;(&lt;/span&gt;i&lt;span class="o"&gt;)&lt;/span&gt;
             22 STORE_FAST               2 &lt;span class="o"&gt;(&lt;/span&gt;lasts&lt;span class="o"&gt;)&lt;/span&gt;
             24 STORE_FAST               3 &lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
             26 STORE_FAST               4 &lt;span class="o"&gt;(&lt;/span&gt;fact&lt;span class="o"&gt;)&lt;/span&gt;
             28 STORE_FAST               5 &lt;span class="o"&gt;(&lt;/span&gt;num&lt;span class="o"&gt;)&lt;/span&gt;

  6     &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;   30 LOAD_FAST                3 &lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;
             32 LOAD_FAST                2 &lt;span class="o"&gt;(&lt;/span&gt;lasts&lt;span class="o"&gt;)&lt;/span&gt;
             34 COMPARE_OP               3 &lt;span class="o"&gt;(!=)&lt;/span&gt;
             36 POP_JUMP_IF_FALSE       80
...
             100 RETURN_VALUE
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To better understand what is actually happening in the above output, I recommend reading &lt;a href="https://stackoverflow.com/a/47529318"&gt;this StackOverflow answer&lt;/a&gt;, which explains all columns in the output.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solutions"&gt;
  &lt;/a&gt;
  The Solutions
&lt;/h2&gt;

&lt;p&gt;At some point, making additional tweaks to your code and algorithms will start providing diminishing returns. At that time, it's a good idea to turn your attention to external tools to provide some additional performance boost.&lt;/p&gt;

&lt;p&gt;A sure way to get speed improvement in your code is to compile it to C. That can be done using various tools, for example PyPy or Cython. The former is a JIT (Just-In-Time) compiler which can be used as drop-in replacement for CPython. It can provide a significant performance boost with zero effort, giving you an easy, quick win. All you need to do is download the archive, untar it and run your code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Download from https://www.pypy.org/download.html&lt;/span&gt;
&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-xjf&lt;/span&gt; pypy3.8-v7.3.7-linux64.tar.bz2
&lt;span class="nb"&gt;cd &lt;/span&gt;pypy3.8-v7.3.7-linux64/bin
./pypy some-code.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And just to prove to you that we will get immediate performance improvement with zero effort, let's just quickly check the run-time of the script with CPython and PyPy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;time &lt;/span&gt;python some-code.py

real    0m2,861s
user    0m2,841s
sys     0m0,016s

&lt;span class="nb"&gt;time &lt;/span&gt;pypy some-code.py

real    0m1,450s
user    0m1,422s
sys     0m0,009s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In addition to the above-mentioned benefits, PyPy also doesn't require any changes to code and supports all builtin modules and functions.&lt;/p&gt;

&lt;p&gt;This all sounds amazing, but there are some trade-offs that come with using PyPy. It supports projects that require C bindings, such as &lt;code&gt;numpy&lt;/code&gt;, but that creates big overhead, making the libraries significantly slower, effectively negating any other performance gains. It will also not solve your performance issues in situations where you use external libraries or when interacting with databases. Similarly, you can't expect a lot of performance gains in I/O-bound programs.&lt;/p&gt;

&lt;p&gt;If PyPy isn't cutting it, then you can try using Cython - a compiler which uses C-like type annotation (&lt;em&gt;not&lt;/em&gt; Python type hints) to create compiled Python extension modules. Cython also uses AOT (ahead-of-time) compilation, which can bring bigger performance gains by avoiding application &lt;em&gt;cold start&lt;/em&gt;. Using it however, requires you to rewrite you code to work with Cython syntax, which in turn increases complexity of your code.&lt;/p&gt;

&lt;p&gt;If you don't mind switching to a little different syntax of Python, then you also might want to take a look at &lt;a href="https://github.com/zanellia/prometeo"&gt;prometeo&lt;/a&gt; - an embedded domain specific language based on Python, specifically aimed at scientific computing. Prometeo programs transpile to pure C code and its performance can be comparable with hand-written C code.&lt;/p&gt;

&lt;p&gt;If none of the above solutions satisfy the performance requirements, then you might have to write your optimized code in C or Fortran a use Foreign Function Interfaces (FFI) to call the code from Python. Examples of libraries that can help you with that would be &lt;code&gt;ctypes&lt;/code&gt; or &lt;code&gt;cffi&lt;/code&gt; for C code and &lt;code&gt;f2py&lt;/code&gt; for Fortran.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;The first rule of optimization is to &lt;em&gt;not do it&lt;/em&gt;. If you really have to though, then optimize where appropriate. Use the above profiling tools to find bottlenecks, so you don't waste time optimizing some inconsequential piece of code. It's also useful to create a &lt;em&gt;reproducible&lt;/em&gt; benchmark for the piece of code you're trying to optimize, so that you can measure the actual improvement.&lt;/p&gt;

&lt;p&gt;This article should help you find the culprit of performance issue. Fixing the issue is however, completely different topic, some easy way to make you Python code significantly faster can be found in my previous article &lt;a href="https://dev.to/martinheinz/the-simple-tricks-to-make-your-website-blazing-fast-4p19"&gt;Making Python Programs Blazingly Fast&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>tutorial</category>
      <category>performance</category>
      <category>datascience</category>
    </item>
    <item>
      <title>Creating Pipeline in Jenkins</title>
      <author>shiva kumar</author>
      <pubDate>Tue, 04 Jan 2022 21:51:47 +0000</pubDate>
      <link>https://dev.to/rshiva/creating-pipeline-in-jenkins-1bkd</link>
      <guid>https://dev.to/rshiva/creating-pipeline-in-jenkins-1bkd</guid>
      <description>&lt;p&gt;If you want to get started in DevOps, Jenkins is most important and handy software you should learn.In this article, I will run you through how to install Jenkins and create first  Pipeline&lt;/p&gt;

&lt;p&gt;Jenkins can be installed in numerous ways, I will be using  docker to run the jenkins locally.&lt;/p&gt;

&lt;p&gt;To run the below command you need docker.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run --name jenkin-master&lt;br&gt;
 -d -v /Users/shiva/jenkins_home:/var/jenkins_home &lt;br&gt;
 -p 8080:8080 jenkins/jenkins:jdk11&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This command downloads the jenkins:jdk11 image and runs it, &lt;strong&gt;&lt;em&gt;-v&lt;/em&gt;&lt;/strong&gt; create a volume to maintain data persistence, runs the Jenkins in port 8080 with name jenkin-master&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt; to access the Jenkins. You will see below screen&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nxUMsT1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s02py47v4xqrogmg1vvb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nxUMsT1b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s02py47v4xqrogmg1vvb.png" alt="First screen" width="880" height="797"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To access the path given in the Jenkins page, we need to log into the docker image with below command&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker exec -it jenkin-master /bin/bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;-it&lt;/em&gt;&lt;/strong&gt; stands for interactive terminal&lt;/p&gt;

&lt;p&gt;Once you are in, use the below command to get the password&lt;br&gt;
&lt;code&gt;cat /var/jenkins_home/secrets/initialAdminPassword&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In Next screen, select &lt;em&gt;Install suggested plugins&lt;/em&gt;, once its done you can create a new admin user.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mgtoOh4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9sta8kr1a6qze91ywoi3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mgtoOh4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9sta8kr1a6qze91ywoi3.png" alt="create new user" width="880" height="807"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;click next and start using jenkins&lt;/p&gt;

&lt;p&gt;You will land on this page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--002fO4vM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pj9705yd76bb8ndw1ofl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--002fO4vM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pj9705yd76bb8ndw1ofl.png" alt="Home page" width="880" height="445"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the left you will see the menu, click on &lt;strong&gt;&lt;em&gt;New Item&lt;/em&gt;&lt;/strong&gt; , then select &lt;strong&gt;&lt;em&gt;Pipeline&lt;/em&gt;&lt;/strong&gt; and give it a name &lt;em&gt;&lt;strong&gt;firstJob&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pipeline is a series of step which helps in building the software. In other words, pipeline is used to implement and integrate continuous delivery. &lt;/p&gt;

&lt;p&gt;There are two types of pipeline,&lt;br&gt;
-&amp;gt; scripted &amp;amp;&lt;br&gt;
-&amp;gt; declarative&lt;br&gt;
We are going to write our first declarative pipeline.&lt;/p&gt;

&lt;p&gt;After creating your &lt;strong&gt;&lt;em&gt;firstJob&lt;/em&gt;&lt;/strong&gt; scroll down to Pipeline and write the below code in the editor&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Pipeline&lt;/em&gt;&lt;/strong&gt; -&amp;gt; All the declarative scripted pipeline starts with a pipeline block&lt;br&gt;
&lt;strong&gt;&lt;em&gt;agent&lt;/em&gt;&lt;/strong&gt; -&amp;gt; instructs Jenkins to run the stages on any agent or node&lt;br&gt;
&lt;strong&gt;&lt;em&gt;stages&lt;/em&gt;&lt;/strong&gt; -&amp;gt; Stages contain one or more stage.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;stage&lt;/em&gt;&lt;/strong&gt; -&amp;gt; Stage reside inside the stages and it should have a steps block. Every stage will have a name like &lt;strong&gt;Test, Build, Deploy&lt;/strong&gt;. Here we named our stage as &lt;strong&gt;Hello&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;steps&lt;/em&gt;&lt;/strong&gt; -&amp;gt; Steps are written inside the stage and it contains list of commands or scripts that need to run. Here we just wanted to echo "Hello World."&lt;/p&gt;

&lt;p&gt;Once you have saved your first declarative Pipeline, let's run it. Click on &lt;strong&gt;&lt;em&gt;Build Now&lt;/em&gt;&lt;/strong&gt;. After the build is done, you can click on &lt;strong&gt;build number 1&lt;/strong&gt; from build history then in the left menu click on &lt;strong&gt;&lt;em&gt;Console Output&lt;/em&gt;&lt;/strong&gt; to view the output of the build&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yGI-Nyy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/waq9dvczamaswe3nzqov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yGI-Nyy2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/waq9dvczamaswe3nzqov.png" alt="Menu" width="658" height="1108"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the "Hello World" is successfully printed in the output console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lop9BFf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpkcwm5kxj5ua2kmpfr1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lop9BFf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gpkcwm5kxj5ua2kmpfr1.png" alt="console output" width="880" height="704"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You have created your first pipeline in Jenkins, We will use this as a base to build complete continuous delivery.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>beginners</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How I passed the Scrum Master Certificate PSM I</title>
      <author>ùïÅùï¶ùïùùïöùïí üë©üèª‚Äçüíª</author>
      <pubDate>Tue, 04 Jan 2022 20:51:27 +0000</pubDate>
      <link>https://dev.to/yuridevat/how-i-passed-the-scrum-master-certificate-psm-i-503j</link>
      <guid>https://dev.to/yuridevat/how-i-passed-the-scrum-master-certificate-psm-i-503j</guid>
      <description>&lt;p&gt;Since I started learning frontend development more than a year ago, I often read the term "agile methods". This caught my attention, and soon I started reading the Scrum Guide. &lt;/p&gt;

&lt;p&gt;I was interested in this kind of working methods since I heard during my studies (I studied Japanese Studies at University of Vienna) that the Japanese started to develop and use Kanban board, a scheduling system, in the late 1940s to improve their productivity at Toyota.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uOyl_pIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gwptl2aesjz462eb49t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uOyl_pIa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3gwptl2aesjz462eb49t.png" alt="Kanban" width="880" height="293"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I liked the idea behind it and soon realized that this is something that companies in Europe (and I guess all over the world) are working with nowadays as well.&lt;/p&gt;

&lt;p&gt;When job searching, I kept reading the job title 'Scrum Master', so it must be a job itself, I thought. And not because I want to become a Scrum Master myself, but to understand how Scrum works in a company, in a team, I decided to take the Scrum Master Test.&lt;/p&gt;

&lt;p&gt;And as luck would have it, passing the PSM I exam is also a requirement in my company anyway, which every developer has to do within the first two years (paid by the company, of course). So I was totally on the right track.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scrum-guide"&gt;
  &lt;/a&gt;
  Scrum Guide
&lt;/h2&gt;

&lt;p&gt;After reading the &lt;a href="https://scrumguides.org/"&gt;Scrum guide&lt;/a&gt; over and over again all the terms started to make more sense shortly after starting the job and attending our daily meetings, leading to a better understanding of what Scrum is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mPq2SVL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfn1ar4z6e5jzby0fsh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mPq2SVL2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfn1ar4z6e5jzby0fsh4.png" alt="Scrum Word Definitions" width="600" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But now, at Christmas time, I really sat down and studied for a few days. There's a good description on &lt;a href="https://www.scrum.org/professional-scrum-master-i-certification"&gt;scrum.org&lt;/a&gt; on how to best prepare for the exam, and that's exactly what I did.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-path"&gt;
  &lt;/a&gt;
  Learning Path
&lt;/h2&gt;

&lt;p&gt;I followed the &lt;a href="https://www.scrum.org/pathway/scrum-master"&gt;Scrum Master Learning Path&lt;/a&gt;, which includes videos, readings, and blog articles for better understanding and real-world examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-assessment"&gt;
  &lt;/a&gt;
  Open Assessment
&lt;/h2&gt;

&lt;p&gt;The website also provides a &lt;a href="https://www.scrum.org/open-assessments/scrum-open"&gt;Assessment Test&lt;/a&gt; with 30 questions that you can take over and over again. Once you have scored 100% a few times, you are good to go and take the test on &lt;br&gt;
&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhails website&lt;/a&gt;, who has created a quiz with more than 80 questions that are very close to the real questions. If you pass this quiz several times with more than 90%, you should feel confident for the PSM I.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-psm-i-assessment"&gt;
  &lt;/a&gt;
  The PSM I Assessment
&lt;/h2&gt;

&lt;p&gt;The test itself consists of 80 questions with multiple answer choices, true/false and one correct answer. You have 60 minutes to complete the test, with the option to mark and correct your answers later. About 65 questions were (almost) identical to those in the quizzes and assessment tests provided by Mikhail and scrum.org itself. About 15 questions contained real-life examples, so you are well prepared if you follow the learning path mentioned earlier.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-results"&gt;
  &lt;/a&gt;
  My Results
&lt;/h3&gt;

&lt;p&gt;It took me almost the whole hour to take the test and I passed with 93.8% ü•≤. But still, I passed and I am super happy about the achievement.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" alt="Thank you" width="64" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for your reading and time. I really appreciate it!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>scrum</category>
      <category>webdev</category>
      <category>career</category>
      <category>agile</category>
    </item>
    <item>
      <title>5 ways of creating an Array in JavaScript</title>
      <author>marcostl</author>
      <pubDate>Tue, 04 Jan 2022 20:37:40 +0000</pubDate>
      <link>https://dev.to/marcostl/5-ways-of-creating-an-array-in-javascript-hk9</link>
      <guid>https://dev.to/marcostl/5-ways-of-creating-an-array-in-javascript-hk9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-explicitly"&gt;
  &lt;/a&gt;
  1. Explicitly
&lt;/h2&gt;

&lt;p&gt;Using the square bracket notation. This is probably the most common way of creating an Array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;arr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-destructuring-another-array"&gt;
  &lt;/a&gt;
  2. Destructuring another array
&lt;/h2&gt;

&lt;p&gt;Using the ES6 notation you can create a copy of another array. Specially useful in functional programming to avoid side effects (i.e. modifying the original array).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copyOfNumbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// You can also join 2 arrays into one:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;numbersTwice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;// This will be [ 1, 2, 3, 4, 1, 2, 3, 4 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-arrays-constructor"&gt;
  &lt;/a&gt;
  3. Array's constructor
&lt;/h2&gt;

&lt;p&gt;JavaScript defines an Array constructor that allows you to specify the length of the array. This method is useful if you know how large your array is going to be. Note that the constructor will create an array where all the elements are empty (not &lt;code&gt;undefined&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;emptyArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emptyArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// [ &amp;lt;5 empty items&amp;gt; ]&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;emptyArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-arrayfrom"&gt;
  &lt;/a&gt;
  4. Array.from()
&lt;/h2&gt;

&lt;p&gt;This method accepts an iterator (which can be another array or a set) and creates a new array with the same elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copiedArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-arrayof"&gt;
  &lt;/a&gt;
  5. Array.of()
&lt;/h2&gt;

&lt;p&gt;This method accepts an unlimited number of parameters that will be used as elements of the new constructed array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;paramsArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Function Expression vs Arrow Function Expression</title>
      <author>Oscar Ortiz</author>
      <pubDate>Tue, 04 Jan 2022 19:47:56 +0000</pubDate>
      <link>https://dev.to/cleveroscar/function-expression-vs-arrow-function-expression-362b</link>
      <guid>https://dev.to/cleveroscar/function-expression-vs-arrow-function-expression-362b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Let us learn the differences between a traditional function and an arrow function expression in JavaScript? If not, then prepare to learn the differences in this article. We will discuss the differences between both and share the pros and cons to help us better understand when is the right time to use one over the other. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2oQOd5BA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asj0hn8hmjh7a20bbycu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2oQOd5BA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asj0hn8hmjh7a20bbycu.jpg" alt="function examples" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Function Expression&lt;/li&gt;
&lt;li&gt;Arrow Function Expression&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#function-expressions"&gt;
  &lt;/a&gt;
  Function Expressions
&lt;/h3&gt;

&lt;p&gt;In JavaScript, there are a few ways we can declare a function. One widespread and traditional way is function expressions. We can name our &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#expressions"&gt;expression&lt;/a&gt; whatever we want to, but it's recommended to name functions precisely what it is intended to do for best practice. To help prevent confusion later on. &lt;/p&gt;

&lt;p&gt;So how exactly do we accomplish this? Well, let us look at how a function expression is structured. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5dLKBRaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j32tscwn1c5y5zx8g1f4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5dLKBRaf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j32tscwn1c5y5zx8g1f4.jpg" alt="function expression" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Above, we have a brief description of what a function expression is. We will now create a few function expressions to understand its features and purpose. &lt;/p&gt;

&lt;p&gt;First we need to come up with a name for our expression. For this example we will use &lt;code&gt;name&lt;/code&gt; as our expression name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our expression name, we can assign a function to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = function() {};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also can declare our function with or without default parameters. For this example, we will add a single parameter that will name our output. We can name our parameter whatever we would like. It is helpful to name the parameter what we are asking for. For this example, we will use &lt;code&gt;string&lt;/code&gt; as our parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = function(string){};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have passed in a parameter we can write in our function body to return an output with our parameter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = function(string) {
  return "Hello " + string + ", how are ya?" 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have just created our function expression. We can now invoke our function and pass in our name and get an output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name('oscar'); // output "Hello oscar, how are ya?" 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_4zzclcp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovnr3p4whp3rclf80ujc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_4zzclcp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ovnr3p4whp3rclf80ujc.jpg" alt="expression syntax" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have options when it comes to naming our functions. We can create anonymous function expressions by not including a name to our function. Just like our previous example&lt;/p&gt;

&lt;p&gt;Here we simply assign a anonymous function to our expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = function() {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we wanted to provide a name for our function to create a named function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function printName() {}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have two ways to create our functions. We can assign it to a variable, or we can give our function a name and use it as so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// assign to variable

let sum = function (a,b) { return a + b};

// giving our function a name
function sum(a,b) { return a + b };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we assign our function to a variable, we are able to reassign that function to another variable. If we declare our function with a name, we can not change that function name else where. Here are a few more things we can benefit from using function expressions. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ed07mnr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8edn4srqhpxj1b2hy36.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Ed07mnr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8edn4srqhpxj1b2hy36.jpg" alt="function expression details" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrow-function-expression"&gt;
  &lt;/a&gt;
  Arrow Function Expression
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oz2Q-8uG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4acp8k0w7ozvc38pvdn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oz2Q-8uG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4acp8k0w7ozvc38pvdn.jpg" alt="Arrow Function example" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Working with arrow functions at first might seem scary. However, when we get the hang of it, we will realize that it is not so scary after all. The mathematical signs might make it look confusing at first &lt;code&gt;=&amp;gt;&lt;/code&gt; or &lt;code&gt;arrow,&lt;/code&gt; but it is not so different from using a traditional function.&lt;/p&gt;

&lt;p&gt;Arrow functions allow us to create functions in a simpler form but has restrictions compared to our traditional function. Let's take a look at the &lt;code&gt;Arrow Function Syntax&lt;/code&gt; to have a better understanding.&lt;/p&gt;

&lt;p&gt;Here is a basic &lt;code&gt;arrow function&lt;/code&gt; syntax&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;param =&amp;gt; expression 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we don't need parentheses around our parameter if it's a single parameter, followed by our &lt;code&gt;arrow&lt;/code&gt; sign, and then our function body expression. If we wanted to add more parameters then we would need to wrap them inside parentheses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(param1, param2) =&amp;gt; expression 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few things to note when working with &lt;code&gt;arrow functions&lt;/code&gt;, it doesn't have its own &lt;code&gt;this&lt;/code&gt; keyword binding. Should not be used for methods, and can't use it as constructors. &lt;/p&gt;

&lt;p&gt;So you may ask, whats the purpose of using the &lt;code&gt;arrow function&lt;/code&gt; then? Here are a few examples of us converting traditional functions to arrow functions.&lt;/p&gt;

&lt;p&gt;Traditional Function to Arrow Function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function (a) { 
  return a + 100;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will remove our &lt;code&gt;function&lt;/code&gt; keyword and place an &lt;code&gt;arrow&lt;/code&gt; between our argument and body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(a) =&amp;gt; { 
  return a + 100;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now remove our body braces &lt;code&gt;{}&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(a) =&amp;gt; return a + 100;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly we remove our parentheses &lt;code&gt;()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a =&amp;gt; return a + 100;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is another example with multiple parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// traditional function

function (a,b) {
  return a + b;
}

// arrow function

(a,b) =&amp;gt; return a + b;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ix_iIgqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0c0p3zfu4tdm38zaj8wo.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ix_iIgqc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0c0p3zfu4tdm38zaj8wo.jpg" alt="arrow function details" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I hope by the end of this article you managed to learn how to create and understood what is going on in every line of code. It is very important to understand how your code fully works, not only does it help you become a better developer but can also help you use the tools you are working with more efficient.&lt;/p&gt;

&lt;p&gt;These articles are mostly intended for personal use on becoming a better programmer, writer, and grow my programming skills. Feel free to drop any feedback or corrections that you believe that should be made to help me and others. Thank you for your time for sticking this far!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Mock Coding Interviews in VR</title>
      <author>Daniel</author>
      <pubDate>Tue, 04 Jan 2022 19:43:57 +0000</pubDate>
      <link>https://dev.to/dannyhabibs/mock-coding-interviews-in-vr-g2k</link>
      <guid>https://dev.to/dannyhabibs/mock-coding-interviews-in-vr-g2k</guid>
      <description>&lt;p&gt;I'm hosting a bunch of coding mock interviews in VR for free! The only requirement is that you have a quest 2. If you are interested hmu on discord: dan#9955.&lt;/p&gt;

&lt;p&gt;Here is an example video on &lt;a href="https://www.youtube.com/watch?v=668gKixvLgg"&gt;youtube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>programming</category>
    </item>
    <item>
      <title>Chaos Engineering - The Practice Behind Controlling Chaos</title>
      <author>Conor Bronsdon</author>
      <pubDate>Tue, 04 Jan 2022 18:50:41 +0000</pubDate>
      <link>https://dev.to/linearb/chaos-engineering-the-practice-behind-controlling-chaos-9n6</link>
      <guid>https://dev.to/linearb/chaos-engineering-the-practice-behind-controlling-chaos-9n6</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was written exclusively for &lt;a href="https://devinterrupted.com/chaos-engineering-the-practice-behind-controlling-chaos/"&gt;devinterrupted.com&lt;/a&gt; by Matthew Fornaciari, CTO of Gremlin&lt;/em&gt;&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
Chaos Engineering might sound like a buzzword - but take it from someone who used to joke his job title was Chief Chaos Engineer (more on that later) it is much more than buzz or a passing fad - it‚Äôs a practice. &lt;/p&gt;

&lt;p&gt;The world can be a scary place and more and more companies are beginning to turn to Chaos Engineering to proactively poke and prod their systems and in doing so are improving their reliability and guarding against unexpected failures in production and unplanned downtime. &lt;/p&gt;

&lt;p&gt;During my career I dealt with my fair share of outages, including one that caught me mid-song during a bout of karaoke and far too many that woke me up at 02:00. As the co-founder and CTO at &lt;a href="https://www.gremlin.com/"&gt;Gremlin&lt;/a&gt;, I do my best to make sure no other engineers have to suffer sleepless nights worrying about their product. &lt;/p&gt;

&lt;p&gt;But the question remains, what is Chaos Engineering and where did it come from?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2xwZ0IxHB5fvljUEf9EpNi"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-short-history"&gt;
  &lt;/a&gt;
  A Short History
&lt;/h2&gt;

&lt;p&gt;The spiritual predecessor to Chaos Engineering is often called by a much more widely recognized name - disaster recovery. The focus when this practice was introduced is much the same as today: proactively suss out production problems by injecting failure. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://netflix.github.io/chaosmonkey/"&gt;Netflix&lt;/a&gt;‚Äôs Chaos Monkey is probably the most well publicized Chaos Engineering tool as it arguably kickstarted the adoption of Chaos Engineering outside of large companies, but this has led to the erroneous belief that Netflix invented the practice. In fact, the practice was already widely in use amongst the titans of technology. &lt;/p&gt;

&lt;p&gt;Over a decade ago during my time as a Lead Software Engineer at Amazon, we implemented several crude practices designed to inject failure into our systems. The most rudimentary of which was employed by a man called Jesse Robbins, who earned the nickname ‚ÄúMaster of Disaster‚Äù by running through data centers pulling out cables. &lt;/p&gt;

&lt;p&gt;Let‚Äôs just say the practice has evolved a lot since those early days and your data center cables are much safer these days.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-chaos-engineering"&gt;
  &lt;/a&gt;
  What is Chaos Engineering?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúWhat Chaos Engineering really is, is the art, if you want to call it that, of introducing controlled chaos.‚Äù - &lt;a href="https://open.spotify.com/episode/2xwZ0IxHB5fvljUEf9EpNi?si=grNoRb21QiOMCQYSCu5Q4g&amp;amp;dl_branch=1"&gt;2:16 on the Dev Interrupted podcast&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/-O0vjlejc6U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;At its core, Chaos Engineering is a disciplined approach of identifying potential failures &lt;strong&gt;before&lt;/strong&gt; they have an opportunity to become customer facing outages. &lt;/p&gt;

&lt;p&gt;It is a practice that lets you safely test your assumption about how your systems will behave under duress by actually exercising resilient mechanisms in a controlled fashion. You literally "&lt;a href="https://www.gremlin.com/blog/breaking-things-on-purpose/"&gt;break things on purpose&lt;/a&gt;" to validate and build resiliency. The end goal of Chaos Engineering is not to inject arbitrary failure into a system, but rather to strategically inject turbulence to enhance the stability and resiliency of your systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-chaotic-is-chaos-engineering"&gt;
  &lt;/a&gt;
  How Chaotic is Chaos Engineering?
&lt;/h2&gt;

&lt;p&gt;I always tell people that Chaos Engineering is a bit of a misnomer because it‚Äôs actually as far from chaotic as you can get. When performed correctly everything is in control of the operator. That mentality is the reason our core product principles at Gremlin are: safety, simplicity and security. True chaos can be daunting and can cause harm. But controlled chaos fosters confidence in the resilience of systems and allows for operators to sleep a little easier knowing they‚Äôve tested their assumptions. After all, the laws of entropy guarantee the world will consistently keep throwing randomness at you and your systems. You shouldn‚Äôt have to help with that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-start"&gt;
  &lt;/a&gt;
  How do I Start?
&lt;/h2&gt;

&lt;p&gt;One of the most common questions I receive is: ‚ÄúI want to get started with Chaos Engineering, where do I begin?‚Äù There is no one size fits all answer unfortunately. You could start by validating your observability tooling, ensuring auto-scaling works, testing failover conditions, or one of a myriad of other use cases. The one thing that does apply across all of these use cases is &lt;strong&gt;start slow, but do not be slow to start.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What I mean by this is to start testing across just a few nodes versus impacting your entire fleet. We refer to the impacted area as the ‚Äúblast radius‚Äù and we highly recommend starting with a small blast radius (the number of systems impacted) and increasing it over time.&lt;/p&gt;

&lt;p&gt;By starting small you allow yourself to gain confidence in both the experiments you are running and your systems. Of course your risk tolerance is also a factor of how large a blast radius your organization will use. &lt;/p&gt;

&lt;p&gt;For instance, a large banking institution with millions of customers has a much lower risk tolerance than a tech startup with a couple hundred customers. In that case, they would want to run experiments in a programmatic way and would need to be very explicit about communicating to the rest of the organization what tests are going to be run and when to avoid any unplanned 2am or 3am disasters. &lt;/p&gt;

&lt;p&gt;Eventually you want to get to the point where all of this is automated, a process we refer to as ‚Äúcontinuous chaos.‚Äù Starting small with automation could be something as simple as taking out a single node; then taking out five nodes; then ten; and so on. Eventually you automate the process at a level you are comfortable with.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúUltimately you want to be able to handle any of this random chaos being thrown at you, because that's what the world is, it's entropy, it's degradation‚Äù - &lt;a href="https://open.spotify.com/episode/2xwZ0IxHB5fvljUEf9EpNi?si=grNoRb21QiOMCQYSCu5Q4g&amp;amp;dl_branch=1&amp;amp;nd=1"&gt;7:35 on the Dev Interrupted podcast&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#no-tolerance-for-downtime"&gt;
  &lt;/a&gt;
  No Tolerance for Downtime
&lt;/h2&gt;

&lt;p&gt;When I founded &lt;a href="https://www.gremlin.com/"&gt;Gremlin&lt;/a&gt;, it was just myself and my co-founder developing the first iteration of the product. The business looked very different then and I jokingly referred to myself as the ‚ÄúChief Chaos Engineer‚Äù responsible for implementing code that was mostly used by enterprise companies. Many of these companies came to us because they had reliance thrust upon them by the US government or they had top-down reliability standards and they wanted a tool to help them shore up their systems. &lt;/p&gt;

&lt;p&gt;As the company began to evolve, so did the customer base. These days it‚Äôs not just Fortune 500 companies that care about reliability, it‚Äôs everybody. Planned downtime is a relic of days gone by. It is no longer acceptable to espouse planned maintenance windows as part of development lifecycles and customers don‚Äôt have the patience for products they rely upon to spend any time unavailable. Companies recognize this dynamic - and it‚Äôs not a hard one to miss. &lt;/p&gt;

&lt;p&gt;Seemingly our appetite for technology has gone up exponentially while our ability to stomach downtime has drastically decreased. Customers expect that your product is always working, always running. If your product is down because of outages then there are ten other similar products waiting in the wings to take their money. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-lives-better"&gt;
  &lt;/a&gt;
  Making Lives Better
&lt;/h2&gt;

&lt;p&gt;Visibility is high these days and companies don‚Äôt need the publicity that comes with making any unforced errors, let alone to be subject to errors not of their making. No one wants to be blown up on &lt;a href="https://twitter.com/"&gt;Twitter&lt;/a&gt; because their product isn‚Äôt working or because one of their downstream dependencies or their cloud provider had an unexpected outage. &lt;/p&gt;

&lt;p&gt;By preparing for the worst, we can be at our best as an industry and can be prepared when disaster eventually comes knocking. That‚Äôs why when an unexpected outage occurs or there is a production failure customers will never even know it happened. &lt;/p&gt;

&lt;p&gt;I often joke that we are the engineers‚Äô engineers because many of us know that feeling of being jolted from a dream at 03:00 by our pagers, groggily wiping our eyes and whipping out the laptop to go dig through a sea of monitoring dashboards and logs. It‚Äôs not fun and it‚Äôs exactly why I founded Gremlin. Because there is a better way to approach operations than merely sitting back on our haunches and waiting for the next outage. Chaos Engineering not only helps to protect against the randomness of the world, but also teaches people how to build more reliable software. And if enough people build more reliable software, we build a more reliable internet.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;Starved for top-level software engineering content? Need some good tips on how to manage your team? This article is inspired by &lt;a href="https://devinterrupted.com/podcasts/"&gt;Dev Interrupted&lt;/a&gt; - the go-to podcast for engineering leaders.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dev Interrupted features expert guests from around the world to explore strategy and day-to-day topics ranging from dev team metrics to accelerating delivery. With new guests every week from Google to small startups, the Dev Interrupted Podcast is a fresh look at the world of software engineering and engineering management.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://devinterrupted.com/podcasts/"&gt;&lt;strong&gt;&lt;em&gt;Listen and subscribe on your streaming service of choice today.&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NibJBwTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhjb103fsrn64mdurln3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NibJBwTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bhjb103fsrn64mdurln3.png" alt="https://devinterrupted.com/podcasts/" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>management</category>
      <category>devops</category>
      <category>operations</category>
      <category>performance</category>
    </item>
    <item>
      <title>Kotlin ‚Äì Android‚Äôin Yeni Resmi Programlama Dili
</title>
      <author>Berk CAN</author>
      <pubDate>Tue, 04 Jan 2022 18:43:28 +0000</pubDate>
      <link>https://dev.to/nrkdrk/kotlin-androidin-yeni-resmi-programlama-dili-e9e</link>
      <guid>https://dev.to/nrkdrk/kotlin-androidin-yeni-resmi-programlama-dili-e9e</guid>
      <description>&lt;p&gt;Google her yƒ±l d√ºzenlediƒüi I/O etkinliƒüinde bu sene biz Android geli≈ütiricilerine bir s√ºpriz yaptƒ±. 17-19 Mayƒ±s tarihleri arasƒ±nda d√ºzenlenen I/O 2017 etkinliƒüinde Android i√ßin yeni bir programlama dilini tanƒ±ttƒ±. Bu dil JetBrains firmasƒ±nƒ±n geli≈ütirmi≈ü olduƒüu Kotlin Programlama dili.Bu dil aynƒ± java gibi JVM (Java Virtual Machine) √ºzerinde √ßalƒ±≈üabilen bir dildir. Yani bir defa yaz her platformda √ßalƒ±≈ütƒ±r mantƒ±ƒüƒ±yla √ßalƒ±≈ümaktadƒ±r.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nrkdrk.blogspot.com/2017/07/kotlin-androidin-yeni-resmi-programlama.html"&gt;Adres&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nrkdrk</category>
      <category>android</category>
      <category>kotlin</category>
      <category>programming</category>
    </item>
    <item>
      <title>Statik ve Dinamik Programlama Dillerinin Farklarƒ±
</title>
      <author>Berk CAN</author>
      <pubDate>Tue, 04 Jan 2022 18:42:52 +0000</pubDate>
      <link>https://dev.to/nrkdrk/statik-ve-dinamik-programlama-dillerinin-farklari-115h</link>
      <guid>https://dev.to/nrkdrk/statik-ve-dinamik-programlama-dillerinin-farklari-115h</guid>
      <description>&lt;p&gt;Statik Programlama Dilleri&lt;br&gt;
Statik programlama dili nedir onu a√ßƒ±klayarak ba≈ülayalƒ±m. Statik programlama dili, her deƒüi≈üken tipinin √∂nceden belirtiliyor olmasƒ±dƒ±r. Yani string bir deƒüer tanƒ±mlƒ±yorken ba≈üƒ±na string, sayi tanƒ±mlƒ±yorken int, double, float gibi tipleri yazƒ±yoruz. Bu nedenle deƒüi≈üken tipleri program hen√ºz √ßalƒ±≈ümƒ±yorken bile bu tiplerin neler olduƒüunu biliyor. Bu da program hen√ºz √ßalƒ±≈ümƒ±yorken bile bir hata yapmƒ±≈üsanƒ±z sizi uyarƒ±r ve hatayƒ± d√ºzeltmenizi bekler.Ya da daha etkili √∂neriler sunabilir IDE'ye baƒülƒ± olarak.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://nrkdrk.blogspot.com/2017/07/statik-ve-dinamik-programlama.html"&gt;Adres&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nrkdrk</category>
      <category>programming</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Docker. Communication between Laravel containers</title>
      <author>Berk CAN</author>
      <pubDate>Tue, 04 Jan 2022 18:40:44 +0000</pubDate>
      <link>https://dev.to/nrkdrk/docker-communication-between-laravel-containers-399h</link>
      <guid>https://dev.to/nrkdrk/docker-communication-between-laravel-containers-399h</guid>
      <description>&lt;p&gt;I have a project that I am trying to develop with a microservices approach. I prepared the APIs on two separate microservices and completed their tests. When I send a request from container A to container B, I get the error cURL error 7: Could not connect to localhost port 8100: Connection refused. After my research, I couldn't find a solution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/69954303/docker-communication-between-laravel-containers"&gt;Address&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nrkdrk</category>
      <category>laravel</category>
      <category>docker</category>
    </item>
  </channel>
</rss>
