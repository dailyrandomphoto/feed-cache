<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>You don't have to type all your manage.py or django-admin commands by hand anymore! Here's Django command auto complete hack</title>
      <author>Ratul Roy</author>
      <pubDate>Sat, 26 Jun 2021 04:49:35 +0000</pubDate>
      <link>https://dev.to/phase_seven/you-don-t-have-to-type-all-your-manage-py-or-django-admin-commands-by-hand-anymore-here-s-django-command-auto-complete-hack-2ife</link>
      <guid>https://dev.to/phase_seven/you-don-t-have-to-type-all-your-manage-py-or-django-admin-commands-by-hand-anymore-here-s-django-command-auto-complete-hack-2ife</guid>
      <description>&lt;p&gt;If you're like me then you love the terminal and everything about it. One thing that make the terminal experiences smooth is the &lt;code&gt;Tab&lt;/code&gt; button autocomplete. Writing recognizable amount of the command or it's parameters and hitting &lt;code&gt;Tab&lt;/code&gt; saves me a lot of time. But in the case of django I had to spell out &lt;code&gt;runserver&lt;/code&gt; or &lt;code&gt;makemigrations&lt;/code&gt; every time I initiated a dev server.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RjPVa1v0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ow5ys9i5cscng6pag0u.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RjPVa1v0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ow5ys9i5cscng6pag0u.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
So I've enable Django commands auto complete  and here's how you can do it too.&lt;br&gt;
open up your &lt;code&gt;.bashrc&lt;/code&gt; file with your favorite text editor. You'll find it at &lt;code&gt;~/.bashrc&lt;/code&gt;. Then add the following at the end of your file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Django autocomplete start&lt;/span&gt;
_django_completion&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;COMPREPLY&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt; &lt;span class="nv"&gt;COMP_WORDS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;COMP_WORDS&lt;/span&gt;&lt;span class="p"&gt;[*]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
                   &lt;span class="nv"&gt;COMP_CWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$COMP_CWORD&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
                   &lt;span class="nv"&gt;DJANGO_AUTO_COMPLETE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;complete&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt; _django_completion &lt;span class="nt"&gt;-o&lt;/span&gt; default manage.py django-admin

_python_django_completion&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;COMP_CWORD&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nt"&gt;-ge&lt;/span&gt; 2 &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
        &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;PYTHON_EXE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;COMP_WORDS&lt;/span&gt;&lt;span class="p"&gt;[0]##*/&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PYTHON_EXE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-qE&lt;/span&gt; &lt;span class="s2"&gt;"python([3-9]&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="s2"&gt;[0-9])?"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
            &lt;/span&gt;&lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;PYTHON_SCRIPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;COMP_WORDS&lt;/span&gt;&lt;span class="p"&gt;[1]##*/&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PYTHON_SCRIPT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-qE&lt;/span&gt; &lt;span class="s2"&gt;"manage&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="s2"&gt;py|django-admin"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
                &lt;/span&gt;&lt;span class="nv"&gt;COMPREPLY&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="si"&gt;$(&lt;/span&gt; &lt;span class="nv"&gt;COMP_WORDS&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;COMP_WORDS&lt;/span&gt;&lt;span class="p"&gt;[*]&lt;/span&gt;:1&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
                               &lt;span class="nv"&gt;COMP_CWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt; COMP_CWORD-1 &lt;span class="k"&gt;))&lt;/span&gt;
                               &lt;span class="nv"&gt;DJANGO_AUTO_COMPLETE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1 &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;COMP_WORDS&lt;/span&gt;&lt;span class="p"&gt;[*]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="si"&gt;)&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;fi
        fi
    fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Support for multiple interpreters.&lt;/span&gt;
&lt;span class="nb"&gt;unset &lt;/span&gt;pythons
&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; whereis &amp;amp;&amp;gt;/dev/null&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;python_interpreters&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;whereis python | &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="nt"&gt;-f&lt;/span&gt; 2-&lt;span class="si"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for &lt;/span&gt;python &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;$python_interpreters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$python&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;-config&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;pythons&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;pythons&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="p"&gt;##*/&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="k"&gt;done
    &lt;/span&gt;&lt;span class="nb"&gt;unset &lt;/span&gt;python_interpreters
    &lt;span class="nv"&gt;pythons&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$pythons&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;sort&lt;/span&gt; &lt;span class="nt"&gt;-u&lt;/span&gt; | &lt;span class="nb"&gt;tr&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;" "&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nv"&gt;pythons&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;python
&lt;span class="k"&gt;fi

&lt;/span&gt;&lt;span class="nb"&gt;complete&lt;/span&gt; &lt;span class="nt"&gt;-F&lt;/span&gt; _python_django_completion &lt;span class="nt"&gt;-o&lt;/span&gt; default &lt;span class="nv"&gt;$pythons&lt;/span&gt;
&lt;span class="nb"&gt;unset &lt;/span&gt;pythons

&lt;span class="c"&gt;# Django autocomplete end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save the file and you're all done! And yes it was THIS EASY! To work at your already opened terminal just type &lt;code&gt;reset&lt;/code&gt; and enter. Or &lt;code&gt;source ~/.bashrc&lt;/code&gt; would do the trick too!&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>bash</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Linked Lists Questions: Add Two Numbers as LinkedList</title>
      <author>Kathan Vakharia</author>
      <pubDate>Sat, 26 Jun 2021 04:28:29 +0000</pubDate>
      <link>https://dev.to/kathanvakharia/linked-lists-questions-add-two-numbers-as-linkedlist-379o</link>
      <guid>https://dev.to/kathanvakharia/linked-lists-questions-add-two-numbers-as-linkedlist-379o</guid>
      <description>&lt;p&gt;In this series of posts, I will discuss coding questions on the &lt;code&gt;LinkedList&lt;/code&gt; Data structure. &lt;br&gt;
The posts in this series will be organized in the following way,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Question Link ❓&lt;/li&gt;
&lt;li&gt;Possible Explanation 📝&lt;/li&gt;
&lt;li&gt;Documented C++ Code 🧹&lt;/li&gt;
&lt;li&gt;Time and Space Complexity Analysis ⌛🌌&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#the-question"&gt;
  &lt;/a&gt;
  The Question
&lt;/h2&gt;

&lt;p&gt;You are given two &lt;strong&gt;non-empty&lt;/strong&gt; linked lists representing two non-negative integers. The digits are stored in &lt;strong&gt;reverse&lt;/strong&gt; order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://leetcode.com/problems/add-two-numbers/#"&gt;https://leetcode.com/problems/add-two-numbers/#&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;💡 Give yourself atleast 15-20 mins to figure out the solution :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h2&gt;

&lt;p&gt;Visualize how you used to do addition in your elementary school.&lt;/p&gt;

&lt;p&gt;First create a dummynode whose &lt;code&gt;next&lt;/code&gt; pointer will hold our resulting linkedlist. Make a &lt;code&gt;temp&lt;/code&gt; pointer point to it. (it will be used for appending the resulting nodes)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;📒 The resulting linkedlist is also in reversed order&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then iterate through both the list, untill we reach the end in &lt;strong&gt;both&lt;/strong&gt; the lists and there's no &lt;em&gt;carry&lt;/em&gt; left.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;At every iteration, perform the arithmetic that we do while adding digits and calculate the resulting digit. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a newnode with value of resulting digit and append it to the end of our resulting linkedlist. (Notice the usecase of modulo operator).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#c-code"&gt;
  &lt;/a&gt;
  C++ Code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#definition-of-linkedlist"&gt;
  &lt;/a&gt;
  Definition of LinkedList
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Definition for singly-linked list.&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;ListNode&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cp"&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
#include "../linkedlist.h"
&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*
-Time:O(max(n1, n2))
-Space:O(max(n1,n2))
*/&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Solution&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="c1"&gt;//! Here we have to return the reversed list only&lt;/span&gt;
    &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;addTwoNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;//starting carry is zero&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;//go through both lists and create a new node untill&lt;/span&gt;
        &lt;span class="c1"&gt;//nodes exist in any of the lists or carry is 1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;l1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;l2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;carry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//updating carry for next digit sum&lt;/span&gt;

            &lt;span class="c1"&gt;//note: We take modulo with 10&lt;/span&gt;
            &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#complexity-analysis"&gt;
  &lt;/a&gt;
  Complexity Analysis
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;n1&lt;/em&gt; and &lt;em&gt;n2&lt;/em&gt; are sizes of given linkedlists. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-complexity-omaxn1-n2"&gt;
  &lt;/a&gt;
  Time Complexity: O(max(n1, n2))
&lt;/h3&gt;

&lt;p&gt;Since we have to travel both the lists completely.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#space-complexity-omaxn1-n2"&gt;
  &lt;/a&gt;
  Space Complexity: O(max(n1, n2))
&lt;/h3&gt;

&lt;p&gt;Same reason as above. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;🔍Concretely both complexities will be &lt;strong&gt;O(max(n1, n2) + 1)&lt;/strong&gt; by taking the end-carry into account but asymptotically, it doesn't matter.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>algorithms</category>
      <category>coding</category>
      <category>datastructures</category>
      <category>cpp</category>
    </item>
    <item>
      <title>useEffect - React Hooks Series</title>
      <author>Pratap Sharma</author>
      <pubDate>Sat, 26 Jun 2021 04:24:25 +0000</pubDate>
      <link>https://dev.to/pratap2210/useeffect-react-hooks-series-3agd</link>
      <guid>https://dev.to/pratap2210/useeffect-react-hooks-series-3agd</guid>
      <description>&lt;p&gt;Welcome back to the series of &lt;strong&gt;React Hooks&lt;/strong&gt;. In part one of the series, I wrote about the useState react hook.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Series path&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pratapsharma.in/use-state-react-hook"&gt;useState&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;useEffect&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-raw-useeffect-endraw-hook"&gt;
  &lt;/a&gt;
  What is &lt;code&gt;useEffect&lt;/code&gt; hook?
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;useEffect hook&lt;/code&gt; lets you perform side effects in functional components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#few-examples-of-side-effects"&gt;
  &lt;/a&gt;
  Few examples of side effects
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Data fetching&lt;/li&gt;
&lt;li&gt;Setting up a subscription&lt;/li&gt;
&lt;li&gt;Manually changing the DOM in React&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are familiar with &lt;code&gt;React class lifecycle&lt;/code&gt; methods, you can think of &lt;code&gt;useEffect hook&lt;/code&gt; as &lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;componentDidUpdate&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt; combined.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-raw-useeffect-endraw-hook-do"&gt;
  &lt;/a&gt;
  What does &lt;code&gt;useEffect&lt;/code&gt; hook do?
&lt;/h2&gt;

&lt;p&gt;By using this &lt;code&gt;hook&lt;/code&gt;, you let React know that your component needs to perform something &lt;strong&gt;after rendering&lt;/strong&gt; of the component. React will remember the function which you passed and react call it &lt;strong&gt;after performing the DOM updates&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In this &lt;em&gt;effect&lt;/em&gt; we can do many things like setting document title, fetch some data from an API, setting event listeners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-useeffect-run-after-every-rerender"&gt;
  &lt;/a&gt;
  Does useEffect run after every re-render?
&lt;/h2&gt;

&lt;p&gt;Yes! By default, the effect runs both after the first render and after every update of the component. Rather than thinking in terms of &lt;strong&gt;mounting&lt;/strong&gt; and &lt;strong&gt;updating&lt;/strong&gt;, you might find it simpler to think that &lt;strong&gt;effects&lt;/strong&gt; happen &lt;strong&gt;after render&lt;/strong&gt;. React &lt;strong&gt;guarantees&lt;/strong&gt; the DOM has been updated by the time it runs the effects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;Let's change the document title for better understanding.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-class-component"&gt;
  &lt;/a&gt;
  Using class component
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//After rendering&lt;/span&gt;
  &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Updating the title in componentDidMount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;//After updating&lt;/span&gt;
  &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Updating the title in componentDidMount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Setting the title&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-functional-component"&gt;
  &lt;/a&gt;
  Using functional component
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ExampleComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Setting title using useEffect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Setting the title using useEffect hook&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;strong&gt;function component&lt;/strong&gt;, you have to define one &lt;strong&gt;useEffect&lt;/strong&gt; function instead of &lt;strong&gt;componentDidMount&lt;/strong&gt; and &lt;strong&gt;componentDidUpdate&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-deeper"&gt;
  &lt;/a&gt;
  Getting deeper
&lt;/h2&gt;

&lt;p&gt;Now we know what &lt;strong&gt;useEffect&lt;/strong&gt; is. Let us try to understand it deeper. &lt;strong&gt;useEffect&lt;/strong&gt; function accepts two-parameter. i) A function which gets called on every update/re-rendering. ii) An array of dependencies value on which the function has to get called.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The useEffect below will always get called on rendering and updating of the component.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I will be called each time the component renders and re-renders&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The useEffect below will get called only once. i.e. the first time it renders. It is equivalent to &lt;strong&gt;componentDidMount&lt;/strong&gt;. The second parameter &lt;code&gt;[]&lt;/code&gt; is called the dependencies array. An empty array means no dependency.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I will be called only once when the component is mounted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The useEffect below will get called each time the value of &lt;strong&gt;name&lt;/strong&gt; is changed. It is like &lt;strong&gt;componentDidUpdate&lt;/strong&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I will be called only once when the component is mounted&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;If we want to do any clean-ups before the component is unmounted.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// some tasks&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I do cleanups&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;will first run on component mount then, will run before useEffect and lastly before unmounting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;I want to thank you for going through the part two of my React Hooks series, in case you missed part one please check it out here(hyperlink)&lt;/p&gt;

&lt;p&gt;If you have any questions, comments, corrections I would look forward to it. Thank you for making it this far.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Series path&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pratapsharma.in/use-state-react-hook"&gt;useState&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;useEffect&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;💌 If you'd like to receive more tutorials in your inbox, you can sign up for the newsletter &lt;a href="https://pratap.substack.com"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>50+ Shortcut links for Developers productivity</title>
      <author>programmer-list</author>
      <pubDate>Sat, 26 Jun 2021 02:25:31 +0000</pubDate>
      <link>https://dev.to/programmerlist/50-shortcut-links-for-developers-productivity-19pm</link>
      <guid>https://dev.to/programmerlist/50-shortcut-links-for-developers-productivity-19pm</guid>
      <description>&lt;p&gt;A designer's work process is loaded with expected digressions, interferences and setting switches. Yet, the idea of programming makes getting to and keeping up continuous stream states basic. Fortunately, a ton advanced instruments can assist designers with doing that, attempting to secure their space for profound thought and make more useful work processes. Here's our pick of the best usefulness devices for engineers starting at 2021.&lt;/p&gt;

&lt;p&gt;So here in this post we're giving you 52 shortcut links to most of the website. You can book mark it for future use. &lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://react.new"&gt;http://react.new&lt;/a&gt; - React project inside Sandbox&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://ts.new"&gt;http://ts.new&lt;/a&gt; - Typescript project inside Sandbox&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://js.new"&gt;http://js.new&lt;/a&gt; - JavaScript project inside Sandbox&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://vue.new"&gt;http://vue.new&lt;/a&gt; - Vue project inside Sandbox&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://ng.new"&gt;http://ng.new&lt;/a&gt; - Angular project inside Sandbox&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://svelte.new"&gt;https://svelte.new&lt;/a&gt; - New svelte project inside Sandbox&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ts.new"&gt;https://ts.new&lt;/a&gt; - New typescript project inside sandbox&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://repl.new"&gt;https://repl.new&lt;/a&gt; - Create a new bash script with repl&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://deploy.new"&gt;http://deploy.new&lt;/a&gt; -Deply new vercel project from Repo or template&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://discord.new"&gt;http://discord.new&lt;/a&gt; - New discord server&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://glitch.new"&gt;http://glitch.new&lt;/a&gt; - new glitch project&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://interview.new"&gt;http://interview.new&lt;/a&gt; - New hackerearth interview page&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://repo.new"&gt;http://repo.new&lt;/a&gt; - New github repo&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://gist.new"&gt;http://gist.new&lt;/a&gt; - New github Gist&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://ionic.new"&gt;http://ionic.new&lt;/a&gt; - New ionic project&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://pen.new"&gt;http://pen.new&lt;/a&gt; - New codepen project&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://design.new"&gt;http://design.new&lt;/a&gt; - New canva design&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cards.new"&gt;https://cards.new&lt;/a&gt; - Create new card inside Canva&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://background.new"&gt;https://background.new&lt;/a&gt; - Create Zoom background on Canva&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://link.new"&gt;http://link.new&lt;/a&gt; - New bit.ly Link&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://playlist.new"&gt;http://playlist.new&lt;/a&gt; - New spotify playlist&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://invoice.new"&gt;http://invoice.new&lt;/a&gt; - New stripe invoice&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://notion.new"&gt;http://notion.new&lt;/a&gt; - New Notion page&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://flutter.new"&gt;http://flutter.new&lt;/a&gt; - New flutter project in Dartpad&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://doc.new"&gt;http://doc.new&lt;/a&gt; - New google document&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://sheet.new"&gt;http://sheet.new&lt;/a&gt; - New google sheet&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://slide.new"&gt;http://slide.new&lt;/a&gt; - New google slide&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://form.new"&gt;http://form.new&lt;/a&gt; - New google form&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://meet.new"&gt;http://meet.new&lt;/a&gt; - New google meeting&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://cal.new"&gt;http://cal.new&lt;/a&gt; - New google calender event&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://keep.new"&gt;http://keep.new&lt;/a&gt; - New google keep note&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hn.new"&gt;https://hn.new&lt;/a&gt; - Create new hashnode blogpost&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://story.new"&gt;https://story.new&lt;/a&gt; - Create new medium blogpost&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sell.new"&gt;https://sell.new&lt;/a&gt; - Sell your product&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://task.new"&gt;https://task.new&lt;/a&gt; - New asana task&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://prezi.new"&gt;https://prezi.new&lt;/a&gt; - beautiful presentation with Prezi&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://shopify.new"&gt;https://shopify.new&lt;/a&gt; - New shopify store with one click&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://resume.new"&gt;https://resume.new&lt;/a&gt; - Create new resume in second&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://buffer.new"&gt;https://buffer.new&lt;/a&gt; - New buffer projects&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://landingpage.new"&gt;https://landingpage.new&lt;/a&gt; - Create and design new landing page for your project&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jobs.new"&gt;https://jobs.new&lt;/a&gt; - post new job listing&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://jobs.new"&gt;https://jobs.new&lt;/a&gt; - Find new job&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://try.new"&gt;https://try.new&lt;/a&gt; - Cretae custom QR code&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://re.new"&gt;https://re.new&lt;/a&gt; - Generate new email reponses&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://payement.new"&gt;https://payement.new&lt;/a&gt; - Send payment using stripe&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://product.new"&gt;https://product.new&lt;/a&gt; - Create new product in your stripe catalog&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blog.new"&gt;https://blog.new&lt;/a&gt; - Create new blog on WP&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://post.new"&gt;https://post.new&lt;/a&gt; - Create new post on WP&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://file.new"&gt;https://file.new&lt;/a&gt; - Create quick note and collaborate with friends&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://code.new"&gt;https://code.new&lt;/a&gt; - Learn to code with realtime interactive coding sessions&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://trello.new"&gt;https://trello.new&lt;/a&gt; - Create a new trello board&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;At times, performing multiple tasks is needed throughout everyday life. For instance, when you are coding, composing reports or doing some exploration. Realizing the right easy routes permits you to effectively discover the tab you need in under a second. &lt;/p&gt;

&lt;p&gt;Its a well known fact that utilizing easy routes makes you more productive at doing certain undertakings on your PC, since you're not superfluously going after a mouse constantly. When you get familiar with the parcel of them, you'll notice a lift to efficiency.&lt;/p&gt;

&lt;p&gt;Thank you for Reading🚀&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>Courses that I've taken to become a fullStack Developer from complete beginner</title>
      <author>Tran Minh Tri</author>
      <pubDate>Sat, 26 Jun 2021 01:53:44 +0000</pubDate>
      <link>https://dev.to/tris909/courses-that-i-ve-taken-to-become-a-fullstack-developer-from-complete-beginner-3g4e</link>
      <guid>https://dev.to/tris909/courses-that-i-ve-taken-to-become-a-fullstack-developer-from-complete-beginner-3g4e</guid>
      <description>&lt;p&gt;In this post I will share with you guys courses that I have taken and found it useful related to my date-to-date work as a developer.&lt;/p&gt;

&lt;p&gt;Please take this as a reference only, because your developer job may have many different skills but on the basic level to become a developer these skills will be pretty much help you get there. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I recommend you to open a Github profile and start documenting your journey to become a developer because this would be super helpful for you to land that interview based on your Github alone&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-web-developer-bootcamp-2021-colt-steele"&gt;
  &lt;/a&gt;
  1/ The Web Developer Bootcamp 2021 - Colt Steele
&lt;/h2&gt;

&lt;p&gt;This course is good for beginners who don't even know how to code but want to understand on the very basic level of things. &lt;/p&gt;

&lt;p&gt;You will learn HTML CSS JavaScript Git API AJAX and many more. This should take your around a few months to finish it and at that point you should know at least the basics of all the things above.&lt;/p&gt;

&lt;p&gt;After this you may not know CSS or JS at the level you should be so the next 2 courses will make it up to you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-the-complete-javascript-course-2021-from-zero-to-expert-jonas"&gt;
  &lt;/a&gt;
  2/ The Complete JavaScript Course 2021: From Zero to Expert! - Jonas
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#3-advanced-css-and-sass-flexbox-grid-animations-and-more-jonas"&gt;
  &lt;/a&gt;
  3/ Advanced CSS and Sass: Flexbox, Grid, Animations and More! - Jonas
&lt;/h2&gt;

&lt;p&gt;These 2 courses will bring you CSS and JavaScript to the next level. You will start working on more complicated projects and concepts. &lt;/p&gt;

&lt;p&gt;I remembered after these 2 courses I have become so much confident about HTML, CSS, JavaScript. It will lay a solid foundation for you to start learning more complicated courses. &lt;/p&gt;

&lt;p&gt;Now you can pick up framework to prepare yourself for real because there are no jobs that you'll use plaint HTML CSS JavaScript. They all use framework or even many frameworks and libraries to get the work done quick and easy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-react-the-complete-guide-maximilian-schwarzm%C3%BCller"&gt;
  &lt;/a&gt;
  4/ React - The Complete Guide - Maximilian Schwarzmüller
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#5-react-complete-react-developer-in-2021-w-redux-hooks-graphql-andrei-neagoie"&gt;
  &lt;/a&gt;
  5/ React Complete React Developer in 2021 (w/ Redux, Hooks, GraphQL) - Andrei Neagoie
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#6-modern-react-with-redux-stephen-grider"&gt;
  &lt;/a&gt;
  6/ Modern React with Redux - Stephen Grider
&lt;/h2&gt;

&lt;p&gt;React is one of the most popular library out there and no doubt about that. There are many reasons I choose React like : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Huge job market value and demand ( If you are serious about being a developer you should consider this as your first reason ) &lt;/li&gt;
&lt;li&gt;Robust, easy to learn and easy to use &lt;/li&gt;
&lt;li&gt;Huge community support and ecosystem &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are many other technical reasons but we don't really need to go deep into that right now. &lt;/p&gt;

&lt;p&gt;React is so big and to be honest it won't be replace anywhere soon because so many businesses built based on it. So you won't even have to worry about being jobless knowing this ( Ps: compared to Jquery ;) )&lt;/p&gt;

&lt;p&gt;After finishing all these courses you should be job ready at least for a FrontEnd position so get yourself out there and looking for jobs because no learning exp is better than working exp.&lt;/p&gt;

&lt;p&gt;But we are not done yet ;) So stay tune. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-the-complete-nodejs-developer-course-3rd-edition-andrew-mead"&gt;
  &lt;/a&gt;
  7/ The Complete Node.js Developer Course (3rd Edition) - Andrew Mead
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#8-mern-ecommerce-from-scratch-brad-traversy"&gt;
  &lt;/a&gt;
  8/ MERN eCommerce From Scratch - Brad Traversy
&lt;/h2&gt;

&lt;p&gt;It's time for you to start learning more about BackEnd . I recommend you learn NodeJS because you can still use JavaScript which at this point I reckon you are very comfortable with. &lt;/p&gt;

&lt;p&gt;These courses will teach you how to build an API, how to communicate between FE and BE, how to make private/public API, how to build a server of some sort and more. Very useful if you are planning become a MERN Developer like me. &lt;/p&gt;

&lt;p&gt;After these 2 courses you should be able to understand how FrontEnd work with BackEnd. How to build a FullStack application even at the basic level. &lt;/p&gt;

&lt;p&gt;What I will recommend you do right now is go and build a &lt;strong&gt;Portfolio&lt;/strong&gt; that have many projects built and developed by you ( hopefully ). Now you will learn to do stuffs on your own even thou when learning courses you should be able to do it before watching the video to be fair. &lt;/p&gt;

&lt;p&gt;All of these courses above along with many hours you spend outside of courses to work on your portfolio and projects that you have developed should take you around a year to be fair. If you finish all of these in 3-4 months you probably flying from video and video and applying ZERO what you're learning so take your time and don't rush even if you have to do another job while doing all of this. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h1&gt;

&lt;p&gt;TypeScript &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-typescript-the-complete-developers-guide-stephen-grider"&gt;
  &lt;/a&gt;
  9/ Typescript: The Complete Developer's Guide - Stephen Grider
&lt;/h2&gt;

&lt;p&gt;TypeScript is rising and if you want to go far into your career as a developer. TypeScript won't hurt. Many companies that are hiring developers, they are looking for TypeScript related now. Many high paying developer jobs you will see this skill once every few times. &lt;/p&gt;

&lt;p&gt;CI-CD of choice &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-gitlab-ci-pipelines-cicd-and-devops-for-beginners-learn-with-valentine"&gt;
  &lt;/a&gt;
  10/ GitLab CI: Pipelines, CI/CD and DevOps for Beginners - Learn with Valentine
&lt;/h2&gt;

&lt;p&gt;Every single interview they will ask you if you have any experience related to CI-CD of some kind even if that is a junior position. If you are a junior developer they may ignore and accept that you don't know CI-CD. But the longer you work in the industry, it will become compulsory to know and even build pipeline to deploy code. &lt;/p&gt;

&lt;p&gt;You can always consider this after you have studied all the things above. &lt;/p&gt;

&lt;p&gt;End.&lt;br&gt;
Now I may have taken even more courses and more projects on Youtube or other sources. But all the courses above are what I think will provide for you so much related industrial knowledge. &lt;/p&gt;

&lt;p&gt;Developer requirements now are insane. I don't want to be a hater but the story I become a developer for 3 months 6 months always have something behind backing up for them that you don't know. So if you are a complete beginner who don't even know how to code a single line of code. You should take your time and always look out for opportunity to learn and improve yourself.&lt;/p&gt;

&lt;p&gt;Now that's all. I hope this blog will help anyone who want to learn about how to become a FullStack Developer. Wish everyone a good day and thank you all.&lt;/p&gt;

</description>
      <category>courses</category>
      <category>recommend</category>
    </item>
    <item>
      <title>The Essentials of Linear Algebra for Machine Learning for Beginners</title>
      <author>Avi Arora</author>
      <pubDate>Sat, 26 Jun 2021 00:03:33 +0000</pubDate>
      <link>https://dev.to/aarora4/the-essentials-of-linear-algebra-for-machine-learning-for-beginners-1hfi</link>
      <guid>https://dev.to/aarora4/the-essentials-of-linear-algebra-for-machine-learning-for-beginners-1hfi</guid>
      <description>&lt;p&gt;Read the Full Article: &lt;a href="https://analyticsarora.com/linear-algebra-foundations-of-machine-learning/"&gt;https://analyticsarora.com/linear-algebra-foundations-of-machine-learning/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Linear algebra is the backbone of machine learning and is critical for learners to have a solid understanding of the concepts before jumping into the core of machine learning. First, let’s take some time to understand why linear algebra before getting into the crux of linear algebra. &lt;/p&gt;

&lt;h2&gt;Article Overview&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Why Linear Algebra?&lt;/li&gt;
&lt;li&gt;What is the Transpose of a Matrix?&lt;/li&gt;
&lt;li&gt;Different Forms of Matrices&lt;/li&gt;
&lt;li&gt;Special Matrices&lt;/li&gt;
&lt;li&gt;Norms of Matrices&lt;ul&gt;&lt;li&gt;What Types of Norms are Used in Machine Learning?&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multiplications of Matrices and Vectors&lt;ul&gt;
&lt;li&gt;Matrix Multiplication&lt;/li&gt;
&lt;li&gt;Vector Multiplication&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Linear Independence and the Rank of a Matrix&lt;ul&gt;&lt;li&gt;Examples&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to do Matrix Inversion?&lt;/li&gt;
&lt;li&gt;Trace and Determinant of a Matrix&lt;ul&gt;
&lt;li&gt;How to find the Determinant of a 2 x 2 Matrix?&lt;/li&gt;
&lt;li&gt;What are the Properties of a Determinant?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Eigenvalues and Eigenvectors&lt;ul&gt;
&lt;li&gt;Steps to Calculating the Eigenvalues and Eigenvectors&lt;/li&gt;
&lt;li&gt;Example&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What is Singular Value Decomposition (SVD)?&lt;ul&gt;&lt;li&gt;Singular Value Decomposition for Dimensionality Reduction&lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>machinelearning</category>
      <category>datascience</category>
      <category>linear</category>
    </item>
    <item>
      <title>Refactor Conditionals (Simplified 9 lines down to 1)</title>
      <author>Clean Code Studio</author>
      <pubDate>Fri, 25 Jun 2021 22:57:03 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/refactor-conditionals-900-more-readable-24np</link>
      <guid>https://dev.to/cleancodestudio/refactor-conditionals-900-more-readable-24np</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
   &lt;span class="na"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="na"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="na"&gt;number&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+1 (555) 555-5555&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;We have a 9 line function that goes three indentations deep.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We can simplify this function. The question is, how much more readable are we able to make this function?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Through six simple iterations of refactoring this function we are going to simplify this hasUSNumber function into a single line with zero indents.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;strong&gt;1: Traditional if-else statement (with nested if)&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hasUSNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dude&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2: Inverse if-else condition to remove nested if&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hasUSNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dude&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3: Combine original if and nested-if statements and return early to remove else-if statement all together&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hasUSNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dude&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;dude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; 
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;4: Directly return condition itself and remove if statement as well as one of the return statements.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hasUSNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dude&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;dude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;dude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;5: Use implicit(arrow) js function, removes "return" key word and function curly brackets&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hasUSNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dude&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;dude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;6: de-structure function parameter to grab the phone property allowing us to remove the need to shorten our line by removing "dude." twice within our statement"&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hasUSNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;phone&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Batta bing bodda boom, just like that we've made more room in our heads and in our applications.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Starting function&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hasUSNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dude&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Ending function&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;hasUSNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;phone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;startsWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;+1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We simplified &lt;strong&gt;9 lines&lt;/strong&gt; down to &lt;strong&gt;1 line&lt;/strong&gt;, &lt;strong&gt;3 indents&lt;/strong&gt; down to &lt;strong&gt;0 indents&lt;/strong&gt;, and &lt;strong&gt;181 characters&lt;/strong&gt; down to &lt;strong&gt;74 characters&lt;/strong&gt;.&lt;/p&gt;




&lt;p&gt;The crazy part is that refactor opportunities to simplify if statements like this happen ALL OF THE TIME in reactjs, vuejs, angular, and just about any front-end project!&lt;/p&gt;

&lt;p&gt;Keep your eyes peeled and you'll be saving your project, team, that brain of yours &lt;em&gt;thousands&lt;/em&gt; of lines of code!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Overview of the refactoring tricks We Used&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Inverse conditional check &lt;br&gt;
Refactor &lt;br&gt;
 &lt;code&gt;if ($x === true)&lt;/code&gt; &lt;br&gt;
To &lt;br&gt;
 &lt;code&gt;if ($x === false)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Combine nested if's into one statement using &amp;amp;&amp;amp; operator&lt;br&gt;
Refactor &lt;br&gt;
 &lt;code&gt;if ($x === true)&lt;/code&gt;&lt;br&gt;
    &lt;code&gt;if ($y === true)&lt;/code&gt;&lt;br&gt;
To&lt;br&gt;
&lt;code&gt;if ($x === false &amp;amp;&amp;amp; $y === false)&lt;/code&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Return condition itself directly instead of true if that condition is true&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Refactor&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;```js
  if ($x === true) {
    return true
  } else {
    return false
  }
```
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To&lt;br&gt;
    &lt;code&gt;return $x&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Imagine doing this kind of refactor 50 times throughout a project. You'll have a huge impact!&lt;/p&gt;

&lt;p&gt;Clean Code Studio&lt;br&gt;
&lt;a href="https://cleancode.studio"&gt;https://cleancode.studio&lt;/a&gt;&lt;br&gt;
Clean Code Clean Life ~ Simplify!&lt;br&gt;
&lt;a href="https://youtube.com/c/cleancodestudio"&gt;https://youtube.com/c/cleancodestudio&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cleancode</category>
      <category>simplify</category>
      <category>returnearly</category>
      <category>boolean</category>
    </item>
    <item>
      <title>part_1: Introduction to tree data structure </title>
      <author>Aya Bouchiha</author>
      <pubDate>Fri, 25 Jun 2021 22:53:29 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/part1-introduction-to-tree-data-structure-277b</link>
      <guid>https://dev.to/ayabouchiha/part1-introduction-to-tree-data-structure-277b</guid>
      <description>&lt;p&gt;Hi, on this amazing day! we're going to talk about tree data structure, so let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#definition-of-tree"&gt;
  &lt;/a&gt;
  Definition of tree
&lt;/h2&gt;

&lt;p&gt;A tree is a nonlinear data structure unlike Stack, Queue, Array, and Linked List, It is a collection of nodes connected with &lt;strong&gt;edges&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#properties-of-tree"&gt;
  &lt;/a&gt;
  Properties of tree
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Root: &lt;em&gt;parent node&lt;/em&gt; is the first (top) node of the tree.&lt;/li&gt;
&lt;li&gt;Parent: node has children&lt;/li&gt;
&lt;li&gt;Child: node has a parent &lt;/li&gt;
&lt;li&gt;Siblings: nodes have the same parent&lt;/li&gt;
&lt;li&gt;Leaves: last nodes of the tree&lt;/li&gt;
&lt;li&gt;Depth: length of edges from a node to the root&lt;/li&gt;
&lt;li&gt;Height: length of the longest path from a node to a leaf&lt;/li&gt;
&lt;li&gt;Edge: link two nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t7kfX8_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g9ko0vqoh9vryh2jbpv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t7kfX8_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g9ko0vqoh9vryh2jbpv.jpg" alt="tree data structure Aya Bouchiha"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references-and-useful-resources"&gt;
  &lt;/a&gt;
  References and useful resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/all-you-need-to-know-about-tree-data-structures-bceacb85490c/"&gt;https://www.freecodecamp.org/news/all-you-need-to-know-about-tree-data-structures-bceacb85490c/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.programiz.com/dsa/trees&amp;amp;ved=2ahUKEwiVy4TcsrPxAhXC8-AKHb_tDHYQFjAnegQIRxAC&amp;amp;usg=AOvVaw1zWsV1g-7GgAmP97ri-G9n"&gt;https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.programiz.com/dsa/trees&amp;amp;ved=2ahUKEwiVy4TcsrPxAhXC8-AKHb_tDHYQFjAnegQIRxAC&amp;amp;usg=AOvVaw1zWsV1g-7GgAmP97ri-G9n&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.geeksforgeeks.org/binary-tree-data-structure/&amp;amp;ved=2ahUKEwiVy4TcsrPxAhXC8-AKHb_tDHYQFjAmegQIShAC&amp;amp;usg=AOvVaw3GgvSIZH7aOmawSCQQvYSh"&gt;https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.geeksforgeeks.org/binary-tree-data-structure/&amp;amp;ved=2ahUKEwiVy4TcsrPxAhXC8-AKHb_tDHYQFjAmegQIShAC&amp;amp;usg=AOvVaw3GgvSIZH7aOmawSCQQvYSh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/qH6yxkw0u78"&gt;https://youtu.be/qH6yxkw0u78&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>algorithms</category>
      <category>computerscience</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>What is low code?</title>
      <author>kevbosaurus</author>
      <pubDate>Fri, 25 Jun 2021 22:51:54 +0000</pubDate>
      <link>https://dev.to/retool/what-is-low-code-4egk</link>
      <guid>https://dev.to/retool/what-is-low-code-4egk</guid>
      <description>&lt;p&gt;Low code and no code have all the hype, but among developers, they also have equal amounts of skepticism.&lt;/p&gt;

&lt;p&gt;In March 2021, no code pioneer Zapier &lt;a href="https://techcrunch.com/2021/03/08/zapier-buys-no-code-focused-makerpad-in-its-first-acquisition/"&gt;acquired no-code community Makerpad&lt;/a&gt;. In April 2021, UiPath, a provider of low code automation software, &lt;a href="https://fortune.com/2021/04/21/uipath-ipo-valuation-stock-price/"&gt;IPO'd at $31 billion&lt;/a&gt;. Gartner predicts that by 2024, &lt;a href="https://www.forbes.com/sites/ilkerkoksal/2020/04/29/the-rise-of-low-code-app-development/"&gt;more than 65%&lt;/a&gt; of application development activity will come from low code application development platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.wsj.com/articles/SB10001424053111903480904576512250915629460"&gt;Software is eating the world&lt;/a&gt;, but low code and no code are making developers rethink how software is made.&lt;/p&gt;

&lt;p&gt;Of course, (some) developers tell a different story. According to an &lt;a href="https://evansdata.com/press/viewRelease.php?pressID=272"&gt;Evans Data report&lt;/a&gt;, one in five developers never use low code, and almost three-quarters of developers use low code less than half the time. And anecdotally, many developers express a similar sentiment to low code as &lt;a href="https://www.reddit.com/r/learnprogramming/comments/ba82qm/should_you_learn_how_to_use_lowcode_platforms/"&gt;Reddit user blahblahblah&lt;/a&gt; does below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gnc0YELQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/9tY8fQgqAEbv-snvuFQZBR0kFjvh51e2KcDKhmFokrZnB6vGvGAw4dNV30A5U_3MES4RWjvi_A1i_rJE0uNYupL7wvBZduo0qTJrt2QN22WEGmaczF_v9jXlc1l5LWt9P2nPjDzW" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gnc0YELQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/9tY8fQgqAEbv-snvuFQZBR0kFjvh51e2KcDKhmFokrZnB6vGvGAw4dNV30A5U_3MES4RWjvi_A1i_rJE0uNYupL7wvBZduo0qTJrt2QN22WEGmaczF_v9jXlc1l5LWt9P2nPjDzW" alt="reddit low-code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this article, we're going to dig into open questions, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  What is low code?&lt;/li&gt;
&lt;li&gt;  What's the difference between low code and no code?&lt;/li&gt;
&lt;li&gt;  What are the major use cases for low code?&lt;/li&gt;
&lt;li&gt;  What are the benefits and drawbacks of low code?&lt;/li&gt;
&lt;li&gt;  What does low code say about the future of software development?&lt;/li&gt;
&lt;li&gt;  What are some good low code development platforms?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Throughout, we'll return to the thesis that though low code may not be &lt;em&gt;disrupting&lt;/em&gt; or &lt;em&gt;replacing&lt;/em&gt; software development, it is &lt;em&gt;transforming&lt;/em&gt; it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-low-code-a-primer"&gt;
  &lt;/a&gt;
  What is low code? A primer
&lt;/h2&gt;

&lt;p&gt;Low code is the development of software via a visual, drag-and-drop interface. The logic is simple and the UI is intuitive, but the results are scalable, secure, and performant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-three-components-of-low-code"&gt;
  &lt;/a&gt;
  The three components of low code
&lt;/h3&gt;

&lt;p&gt;A low code development platform consists of three major components that are, by and large, common across all low code tools and platforms.&lt;/p&gt;

&lt;p&gt;A visual integrated development environment (IDE): This is the core of a low code development platform. It's usually a drag-and-drop interface that developers use to model workflows and declare logic. As necessary, developers can also use it to add hand-written code. Typically, developers use the IDE to create most of the app and then customize the last mile with hand-written code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--91JbipR3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://retool.com/blog/content/images/2021/06/Low-code.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--91JbipR3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://retool.com/blog/content/images/2021/06/Low-code.gif" alt="low-code Retool"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connectors: Depending on the low code platform, various kinds of connectors plug the platform into a variety of back-end services, databases, and APIs. These provide extensibility and increased functionality. Developers tend to prioritize connectors because the usefulness of a low code platform is directly tied to what it integrates with. Some early low code platforms are short on connection functionality, leaving developers with with unnecessary workarounds or missed requirements.&lt;/p&gt;

&lt;p&gt;Application lifecycle manager: Again, depending on the low code platform, it might also include tools for debugging, deployment, and maintenance across testing, staging, and production. If a low code platform promises robust results that match those produced by hand-coding, then it needs to come with lifecycle management to match the standard software development lifecycle that developers run when creating software from scratch.&lt;/p&gt;

&lt;p&gt;Though low code platforms and tools can differ widely, they all tend to share these three components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-low-code-do"&gt;
  &lt;/a&gt;
  What does low code do?
&lt;/h3&gt;

&lt;p&gt;The primary goal of low code is to reduce the amount of "hand-coding" (i.e., code done from scratch) and increase the amount of code reused and apps developed. Low code is highly composable, meaning that when you use the visual IDE to construct a component, it's easy to then reuse that component in different situations. You get the initial speed of using an IDE and then even more speed as you reuse the resulting components.&lt;/p&gt;

&lt;p&gt;The reason why it's called "low code" (as opposed to "no code," which we'll get into in the next section) is that low code development is split roughly 80:20 visual coding to hand-coding. You build about 80% of your app using a low code UI and then hand-code the rest---usually last-mile specifications, as necessary. In the below video, for instance, our developer advocate, Chris Smith, uses in-line JavaScript to get an order total for a MongoDB admin panel.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-future-of-low-code-is-bright"&gt;
  &lt;/a&gt;
  The future of low code is bright
&lt;/h3&gt;

&lt;p&gt;Developers have plenty of reasons to be skeptical of low code. Many have seen the rise of technology fads that similarly promised the reduction---or even the elimination---of traditional programming. The elders among us will remember Visual Basic and PowerBuilder.&lt;/p&gt;

&lt;p&gt;That skepticism is belied by the research. According to &lt;a href="https://www.mendix.com/resources/digital-disconnect-a-study-of-business-and-it-alignment/"&gt;Mendix research&lt;/a&gt;, 99% of organizations surveyed report that they'd benefit from the capabilities of low code platforms.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://retool.com/blog/state-of-internal-tools-2021/"&gt;Our own research&lt;/a&gt; shows that 89% of developers enjoy building with low code, 90% of developers believe low code meets their needs, and 89% of developers plan to keep building with low code. And, as we mentioned at the top of this article, Gartner predicts that &lt;a href="https://www.forbes.com/sites/ilkerkoksal/2020/04/29/the-rise-of-low-code-app-development/"&gt;more than 65%&lt;/a&gt; of application development activity will come from low code application development platforms by 2024.&lt;/p&gt;

&lt;p&gt;Companies, analysts, and developers agree: low code is here to stay. We're reaching an inflection point where the capabilities of low code technology are actually ready to meet their promised potential.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#low-code-vs-no-code-the-differences-and-similarities"&gt;
  &lt;/a&gt;
  Low code vs. no code: The differences and similarities
&lt;/h2&gt;

&lt;p&gt;Let's bust a myth right from the get-go: low code and no code are &lt;em&gt;not&lt;/em&gt; the same thing. They share some similarities, but on close inspection, those similarities become superficial. At a fundamental level, the technologies are different.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-no-code"&gt;
  &lt;/a&gt;
  What is no code?
&lt;/h3&gt;

&lt;p&gt;If low code is the minimization of hand-coding, then no code is the elimination of hand-coding.&lt;/p&gt;

&lt;p&gt;No code also uses a visual workflow builder and IDE, but it doesn't require developers to hand-code at all, a feature that poses both advantages and disadvantages.&lt;/p&gt;

&lt;p&gt;At first glance, that difference seems minor. If anything, it seems advantageous for no code---why code a little when you could skip coding altogether? But it turns out that difference makes all the difference.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-code-vs-no-code-the-small-differences"&gt;
  &lt;/a&gt;
  Low code vs. no code: the small differences
&lt;/h3&gt;

&lt;p&gt;The first differences you'll notice between low code and no code involve differences among target users, design, and UI. Though these differences aren't minor, they make low code and no code applications look slightly different.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Target user: Low code is for semi-technical business users and technical developers, whereas no code is just for business users. Since low code still involves some hand-coding, many low code tools still require software developers to either handle development or take it over the last mile.&lt;/li&gt;
&lt;li&gt;  Design: Low code platforms still depend on hard code for software architecture, whereas no code tends to have model-driven workflows and declarative logic.&lt;/li&gt;
&lt;li&gt;  UI: Low code provides greater flexibility, enabling developers to add hand-written code to visually developed components, whereas no code is a closed system that tends to lock users into the abilities of the no code platform in question. The ramifications of this lock-in vary depending on what platform you choose.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If these were the only differences, you could imagine low code and no code someday converging or a vendor offering a platform that effectively does both. This ignores the fact, however, that low code and no code are different at a fundamental level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-code-vs-no-code-the-big-difference"&gt;
  &lt;/a&gt;
  Low code vs. no code: the big difference
&lt;/h3&gt;

&lt;p&gt;No code abstracts away code, whereas low code retains the ability to code. Though that difference might seem small on the surface, the ramifications are profound.&lt;/p&gt;

&lt;p&gt;Low code is a natural extension of web frameworks, component libraries, and the long tradition of borrowing pre-built work and adding in nuances that are unique to your situation. Developers have always strived for more composability, and entire businesses have been built on this desire: think API-first companies like Twilio and package managers like npm.&lt;/p&gt;

&lt;p&gt;Low code is less a disruption and more a continuation of this tradition. Low code helps developers move faster, both by helping them make decisions and follow through on actions more efficiently. That speed, however, doesn't sacrifice anything---low code respects the fact that developers will still need to customize.&lt;/p&gt;

&lt;p&gt;The ability to customize is a DNA-level difference, and it has ripple effects. No code aims at a new audience with a new proposal: turn all of the code into UIs, logic, and simple steps, such that non-technical business users (or "citizen developers") can now "code."&lt;/p&gt;

&lt;p&gt;No code, by its very nature, is opinionated and inflexible. While both low code and no code manifest similarities (namely the drag-and-drop visual IDE mentioned above), they approach different problems and solve them so distinctly that the possible end results are entirely different.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-low-code-use-cases"&gt;
  &lt;/a&gt;
  5 low code use cases
&lt;/h2&gt;

&lt;p&gt;Low code use cases range from the complex (such as full-on app development) to the relatively simple (such as landing page design).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-internal-tools"&gt;
  &lt;/a&gt;
  1. Internal tools
&lt;/h3&gt;

&lt;p&gt;Internal tools aren't flashy, but developers spend a lot of time working on them. According to our research in &lt;a href="https://retool.com/blog/state-of-internal-tools-2021/"&gt;The state of internal tools in 2021&lt;/a&gt;, developers spend nearly a third of their time (30%) building internal applications.&lt;/p&gt;

&lt;p&gt;It's not that this work isn't impactful (it is; for companies with more than ten employees, one in three employees are using internal apps a developer has built). It's that internal tools aren't always how developers want to spend their time nor how businesses want to spend their development resources.&lt;/p&gt;

&lt;p&gt;With low code platforms, you can develop internal tools faster and even enable some non-developers to build them, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-ui-design"&gt;
  &lt;/a&gt;
  2. UI design
&lt;/h3&gt;

&lt;p&gt;Some low code platforms let you build an intuitive user interface from drag-and-drop components. This is especially useful for back-end developers who may have to build dashboards but aren't familiar with UX best practices.&lt;/p&gt;

&lt;p&gt;This use case bleeds into others on the list. A popular internal tool, for instance, is a sales dashboard that helps sales reps track deal flow. The sales team might ask a back-end developer to make such a tool, and while the back-end developer can easily handle the data, they might not be able to present that data in an intuitive way.&lt;/p&gt;

&lt;p&gt;With low code, a back-end developer can easily spin up a UI that they can layer onto the data they retrieve.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-integration-and-automation"&gt;
  &lt;/a&gt;
  3. Integration and automation
&lt;/h3&gt;

&lt;p&gt;Platforms like &lt;a href="https://www.uipath.com/"&gt;UiPath&lt;/a&gt;, &lt;a href="https://www.workato.com/"&gt;Workato&lt;/a&gt;, and &lt;a href="https://appian.com/"&gt;Appian&lt;/a&gt; provide ways to integrate apps and automate the processes that connect and flow between them.&lt;/p&gt;

&lt;p&gt;Many companies, large enterprises especially, are stuck with legacy infrastructure (think SAP, Oracle, Citrix) that they can't afford to rip out and replace. These companies, however, are increasingly feeling the heat from nimble startups relying on custom-built tools, SaaS apps, and APIs.&lt;/p&gt;

&lt;p&gt;With low code, enterprises can achieve some of that speed by connecting and automating those legacy systems. Enterprises can then adjust and iterate much like startups can, leaving them less vulnerable to disruption.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-basic-app-development"&gt;
  &lt;/a&gt;
  4. Basic app development
&lt;/h3&gt;

&lt;p&gt;Low code tools like &lt;a href="https://bubble.io/"&gt;Bubble.io&lt;/a&gt; enable non-developers to spin up entire web apps, and low code tools like &lt;a href="https://memberful.com/"&gt;Memberful&lt;/a&gt; enable non-developers to add specific features to their apps (in Memberful's case, membership).&lt;/p&gt;

&lt;p&gt;Some of the results of Bubble.io, according to their &lt;a href="https://bubble.io/showcase"&gt;showcase page&lt;/a&gt;, include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.teeming.ai/"&gt;Teeming&lt;/a&gt;, a cloud-based tool that helps remote teams bond via interactive work sessions&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://residentstreet.com/"&gt;ResidentStreet&lt;/a&gt;, a platform that connects people looking for "mid-term accommodations" (1-11 months) with furnished properties&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://incomee.co/"&gt;Incomee&lt;/a&gt;, an accounting tool for freelancers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This use case is one where the difference between low code and no code really matters. Be aware of the customization limitations of no code as your app scales.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-mvps-and-prototypes"&gt;
  &lt;/a&gt;
  5. MVPs and prototypes
&lt;/h3&gt;

&lt;p&gt;The minimum viable product (MVP) methodology, originating with famed startup expert Eric Ries, asks developers and startups to ship products faster, get feedback earlier, and build with customers in mind. MVPs (and prototypes, a similar idea) are a great use case for low code.&lt;/p&gt;

&lt;p&gt;The idea is this: don't invest tons of development resources into an app or feature you're unsure of. When you're building an app from scratch, the necessary up-front investment is immense. You have to think about hosting, the back-end, the front-end, the UI, maintenance, monitoring analytics... the list goes on.&lt;/p&gt;

&lt;p&gt;Those are all distractions from what your primary focus needs to be at this early stage: your user and what they need. Low code helps you delay those important business decisions, so that you can make them later, when you have a stable business and customer traction.&lt;/p&gt;

&lt;p&gt;With low code, you can get most of the way toward your final product, test it with your customers, and then, and only then, make an investment you're confident in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-low-code-benefits-and-drawbacks"&gt;
  &lt;/a&gt;
  Why low code? Benefits and drawbacks
&lt;/h2&gt;

&lt;p&gt;Low code has a variety of benefits and drawbacks, all of which depend on which low code platform(s) you choose and how you use it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-code-benefits"&gt;
  &lt;/a&gt;
  Low code benefits
&lt;/h3&gt;

&lt;p&gt;Though low code comes with many benefits, they generally come down to three core ones.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Increase time to value (TTV)&lt;/strong&gt;&lt;br&gt;
Compared to hand-coding, low code development gets developers from idea to execution to production much faster.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://resources.kintone.com/citizen-developer-business-application-report-2017"&gt;Kintone research&lt;/a&gt;, developers using low code tools "get applications out the door faster than large IT departments. They turn around their required applications in a matter of weeks, or a couple of months. Only 17% report turnaround times exceeding three months."&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improve developer productivity and efficiency&lt;/strong&gt;&lt;br&gt;
Many low code platforms come with pre-built components, and most come with the ability to make components you can reuse, making low code development eminently composable. Developers can borrow, build, and reuse components as they go, making them more efficient over time.&lt;/p&gt;

&lt;p&gt;Improved productivity and efficiency is backed up by research, both in terms of sheer speed and the ability to meet previously unmet demand via improved efficiency:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://go.forrester.com/blogs/why-you-need-to-know-about-low-code-even-if-youre-not-responsible-for-software-delivery/"&gt;Forrester analyst John Rymer&lt;/a&gt; says that low code platforms "have the potential to make software development as much as 10 times faster than traditional methods."&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://go.caspio.com/state-of-custom-business-applications-2020?&amp;amp;_ga=2.46840167.1975902204.1623099469-1417118847.1623099469"&gt;Caspio research&lt;/a&gt; shows that 63% of organizations using low code platforms have the skills and resources to fulfill the demand for custom apps, whereas only 41% of organizations not using low code can say the same. Similarly, 61% (as opposed to 38%) of organizations using low code typically deliver custom apps on time, on scope, and on budget.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With low code, developers can ship faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Better use of existing staff&lt;/strong&gt;&lt;br&gt;
Developers are in short supply.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href="https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm#tab-6"&gt;Bureau of Labor Statistics&lt;/a&gt;, "employment of software developers...is projected to grow 22% from 2019 to 2029, much faster than the average for all occupations." Demand for software developers is already outpacing supply, despite the ever-increasing need for software. This is backed up by &lt;a href="https://www.techrepublic.com/article/cio-jury-83-of-cios-struggle-to-find-tech-talent/"&gt;TechRepublic research&lt;/a&gt;, which found that 83% of CIOs struggle to find tech talent.&lt;/p&gt;

&lt;p&gt;Low code allows already hired developers to move faster (as covered in the previous benefit), but it also allows non-developers, such as operations staff, to take part in development. Companies can produce more software with existing staff.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks"&gt;
  &lt;/a&gt;
  Drawbacks
&lt;/h3&gt;

&lt;p&gt;Low code isn't without its drawbacks, but you can defeat many of these by choosing a modern low code platform that fits your use case.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vendor-lockin"&gt;
  &lt;/a&gt;
  Vendor lock-in
&lt;/h3&gt;

&lt;p&gt;Perhaps the top reason developers fear low code tools is the risk of vendor lock-in. Whereas hand-coding is inherently flexible and extensible, low code platforms have the potential to lock developers into a limited ecosystem.&lt;/p&gt;

&lt;p&gt;This drawback varies depending on which low code platform you choose. Legacy low code application development platforms, many of which resemble no code more than low code, can absolutely lock you into their ecosystems. Modern low code platforms, however, tend to be built on the aforementioned tradition of composability, meaning that there's an inherent respect for the need to customize.&lt;/p&gt;

&lt;p&gt;Retool, for instance, is built on Javascript and SQL, meaning developers versed in those languages can easily add on to what they develop in Retool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shadow-it-and-governance"&gt;
  &lt;/a&gt;
  Shadow IT and governance
&lt;/h3&gt;

&lt;p&gt;IT might be resistant to low code adoption.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://www.forbes.com/sites/jasonbloomberg/2017/07/20/the-low-codeno-code-movement-more-disruptive-than-you-realize/?sh=4db92168722a"&gt;Jason Bloomberg&lt;/a&gt;, an IT industry analyst, "IT has been telling business stakeholders for years that the six month/million dollar plan is the only way to build enterprise software," but now, &lt;a href="https://www.forbes.com/sites/jasonbloomberg/2017/07/20/the-low-codeno-code-movement-more-disruptive-than-you-realize/?sh=4db92168722a"&gt;according to Simon Chan&lt;/a&gt;, Founder and CEO of DigiVue Consulting, "the same systems can be implemented by smaller players at a fraction of the price and in a fraction of the time," which "has leveled the playing field."&lt;/p&gt;

&lt;p&gt;What might appear to be a level playing field to a business user, however, can appear to be a threat to IT. IT has long had to resist the encroachment of so-called "shadow IT," and a low code program might appear to add fuel to that fire. Imagine, the IT admin might fear, if employees were not only adopting SaaS tools without permission but were &lt;em&gt;building&lt;/em&gt; apps without permission?&lt;/p&gt;

&lt;p&gt;This isn't IT being controlling. There are serious ramifications, especially in terms of security, from letting more people build software. And they're not wrong --- according to &lt;a href="https://resources.kintone.com/citizen-developer-business-application-report-2017"&gt;Kintone research&lt;/a&gt;, more than one in four surveyed organizations have no citizen development policy of any kind in place. The problem is less with low code itself and more with how companies implement and scale low code programs. Eventually, governance becomes necessary.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h3&gt;

&lt;p&gt;Some developers have an instinctual resistance to low code platforms based on the assumption that any code that isn't hand-written can't be robust enough to scale. This assumption isn't true---low code apps can scale to enterprise proportions---but the nugget of truth is that many low code platforms aren't built with scale in mind.&lt;/p&gt;

&lt;p&gt;Outsystems, for instance, in a surprising moment of &lt;a href="https://www.outsystems.com/blog/posts/what-is-low-code/"&gt;vendor honesty&lt;/a&gt;, notes that "When it's time to scale, integrate with existing systems, or perform under extreme conditions like a mobile banking app on Black Friday, the [low code] application could buckle under the weight of functional and nonfunctional requirements. If an application built with low-code needs updating or if the underlying technology needs changing, good luck."&lt;/p&gt;

&lt;p&gt;The solution here tends to be picking a low code platform that *can *develop apps that can scale. And scalability tends to come from leaning into low code's advantages. No code apps are much more likely to suffer from scalability problems because they aren't customized. Use low code to build your foundation but hand-code your way to scalability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-low-code-will-shape-the-future-of-software-development"&gt;
  &lt;/a&gt;
  How low code will shape the future of software development
&lt;/h2&gt;

&lt;p&gt;Low code development will not replace traditional software development. Full stop. But it will change software development---and in some areas, the change will be dramatic.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-code-will-add-more-abstraction"&gt;
  &lt;/a&gt;
  Low code will add (more) abstraction
&lt;/h3&gt;

&lt;p&gt;Low code, understood historically, is another layer of abstraction between developer and code.&lt;/p&gt;

&lt;p&gt;You can trace the roots of low code back to the &lt;a href="https://www.techopedia.com/definition/24308/fourth-generation-programming-language-4gl"&gt;fourth-generation programming languages&lt;/a&gt; (think Visual Basic and PowerBuilder) and computer-aided software engineering (CASE), rapid application development (RAD), and business process management (BPM) tools from the 1990s. These early tools and platforms tried to fulfill the same promise modern low code does: build real apps in less time and with less code.&lt;/p&gt;

&lt;p&gt;It took another couple of decades for the brand name to form, however. The first popular instance of the phrase "low code" occurred in a &lt;a href="https://www.forrester.com/report/New+Development+Platforms+Emerge+For+CustomerFacing+Applications/-/E-RES113411"&gt;2014 Forrester report&lt;/a&gt; and has been on a steady rise since.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1hMjTTRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/wK6K8ADGrKPs6bWBlDUaxJvIOLSJFrmXpTGmUlJlEShboZzgpvZgbF1Cj5Sk-iIV2NgFEtBZO-0vDQ_IhAp1cYKBBAPt2FSEJ6oJz0-mA0R22C1UstsVY-VrrbJQF8_-H1n__zqN" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1hMjTTRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/wK6K8ADGrKPs6bWBlDUaxJvIOLSJFrmXpTGmUlJlEShboZzgpvZgbF1Cj5Sk-iIV2NgFEtBZO-0vDQ_IhAp1cYKBBAPt2FSEJ6oJz0-mA0R22C1UstsVY-VrrbJQF8_-H1n__zqN" alt="google trends low code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Searches for "low-code app development platform" on Google Trends&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to get technical, you can trace low code back through the history of code, too. The history of code is itself a history of abstraction: every programming language is a more human-readable version of binary code. What's unreadable to us now, like FORTRAN, was a big step toward readability back in the day. As Nacho Iacovino, developer advocate at Clerk, wrote in a &lt;a href="https://retool.com/blog/nacho-iacovino-on-the-future-of-internal-tools/"&gt;guest post&lt;/a&gt; for us, even modern options like React are "a low(er)-code option, compared with the alternative of vanilla JavaScript which would take many more lines of code to achieve the same results."&lt;/p&gt;

&lt;p&gt;In the same way, low code is another step toward readability and up the ladder of abstraction. Viewed this way, low code isn't a departure from history so much as it is a continuation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-code-will-add-not-disrupt"&gt;
  &lt;/a&gt;
  Low code will add, not disrupt
&lt;/h3&gt;

&lt;p&gt;A major reason developers are skeptical of low code is the hype. A simple Google search reveals the scale of the hype. "Is low code the future" returns over 2 million results, and articles on the topic include titles like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Why Low-Code Automation Is The Tech Of The Future&lt;/li&gt;
&lt;li&gt;  Why low-code and no-code are the future of enterprise applications&lt;/li&gt;
&lt;li&gt;  The Future of Software is No Code and Low Code Programming&lt;/li&gt;
&lt;li&gt;  Low Code Is The Future Of Application Development&lt;/li&gt;
&lt;li&gt;  Low-code programming -- the next frontier in app development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HQ0NNTSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://retool.com/blog/content/images/2021/06/Low-collage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HQ0NNTSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://retool.com/blog/content/images/2021/06/Low-collage.png" alt="low-code collage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Realistically, low code isn't &lt;em&gt;the&lt;/em&gt; future; it's part of the future. Internal tool development, our specialty, provides a perfect example.&lt;/p&gt;

&lt;p&gt;Internal tool development (which developers spend 30% of their time doing) is an ideal use for low code. Though two out of three developers &lt;a href="https://retool.com/blog/state-of-internal-tools-2021/"&gt;default to building from scratch&lt;/a&gt; (instead of using a spreadsheet or a SaaS tool), 88% of developers that *do *build internal apps using low code plan to keep building that way in the future. In other words, most developers have a need that low code solves for but aren't using low code---but once they try low code, they keep using it.&lt;/p&gt;

&lt;p&gt;More than likely, low code won't disrupt, displace, or destroy software development. Instead, developers will try particular low code tools, especially ones specialized for specific use cases, and replace hand-coding development when it benefits them to do so.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-code-will-expand-the-circle-of-software-development"&gt;
  &lt;/a&gt;
  Low code will expand the circle of software development
&lt;/h3&gt;

&lt;p&gt;According to &lt;a href="https://chiefmartec.com/2021/03/marketing-superpowers-ai-code-transform-every-marketer-maker/"&gt;Scott Brinker, VP of Platform Ecosystem at HubSpot&lt;/a&gt;, the best way to think of low code is to think of it as a way to expand the circle of people who can develop software.&lt;/p&gt;

&lt;p&gt;Low code, as well as no code, enables more people to build software. This bears out in the research so far. According to &lt;a href="https://resources.kintone.com/citizen-developer-business-application-report-2017"&gt;Kintone research&lt;/a&gt;, many non-IT low code developers are power users "embedded within line-of-business departments building the applications."&lt;/p&gt;

&lt;p&gt;Power users are becoming more powerful, so powerful that they can now develop software. According to &lt;a href="https://searchsoftwarequality.techtarget.com/news/252469924/Low-code-goes-mainstream-to-ease-app-dev-woes"&gt;John Rymer, an analyst at Forrester&lt;/a&gt;, he can "see maybe 100 million people---business people---engaged in producing software."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5rO6tv2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://retool.com/blog/content/images/2021/06/Low-code.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5rO6tv2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://retool.com/blog/content/images/2021/06/Low-code.svg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That means that companies don't need to hire software developers for every software need. That doesn't mean that developer hiring will slow, but that companies can reallocate developer hiring away from some projects (say, internal tool development) and toward customer-facing features as well as complex and unique software development problems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-impact-of-low-code-on-startups-and-enterprises"&gt;
  &lt;/a&gt;
  The impact of low code on startups and enterprises
&lt;/h2&gt;

&lt;p&gt;Often lost in the discussion of low code and its effects is context: low code looks very different to startups and enterprises.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-code-and-startups"&gt;
  &lt;/a&gt;
  Low code and startups
&lt;/h3&gt;

&lt;p&gt;Startups are time- and resource-strapped, which is the primary reason they adopt low code tools. With low code, their existing engineers can move faster and make a greater impact in three primary ways.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Internal tools will be easier to make&lt;/strong&gt;&lt;br&gt;
With low code tools, developers can re-focus from internal tool development toward customer-facing features. For startups, who may only have a couple of developers, this time and effort are precious. With product-market fit still on the horizon, early-stage startups need as many engineering resources as possible dedicated to iteration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Back-end developers will be able to develop better services&lt;/strong&gt;&lt;br&gt;
Back-end developers are well-versed in systems and functionality but not in UX design. With low code, even back-end developers can create pretty, intuitive apps and tools. The ever-elusive 10x full-stack developer becomes more attainable if you can enable back-end developers to create things only a front-end developer would normally be able to make.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Validation will come sooner in a startup's life&lt;/strong&gt;&lt;br&gt;
As we covered above, low code enables companies to rapidly build MVPs and prototypes. This is especially useful for startups, who may still be settling on a product and pursuing product-market fit. The right low code tool will also enable rapid iteration, such that startups can debut and improve products before dedicating much in the way of hand-coding.&lt;/p&gt;

&lt;p&gt;Curtis Cummings, a Senior Software Engineer at On Deck, said in an &lt;a href="https://retool.com/blog/new-developments-curtis-cummings-on-deck/"&gt;interview he did with Retool&lt;/a&gt;, "I've been on a couple of different projects in my consulting career where we had this perfect spec, we built it perfectly to spec, went out to users and it fell flat on its face because all the assumptions that backed up that spec weren't validated or grounded in user data."&lt;/p&gt;

&lt;p&gt;With low code, startups are less likely to fall on their faces.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#low-code-and-enterprises"&gt;
  &lt;/a&gt;
  Low code and enterprises
&lt;/h3&gt;

&lt;p&gt;Enterprises are not, generally, in want of resources like startups are, but they are often stuck with technical debt.&lt;/p&gt;

&lt;p&gt;Enterprise technical debt, driven by prior investments in now legacy technologies, is encouraging many enterprises to adopt low code and pursue modernization. There are three primary use cases for enterprises and low code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improved agility&lt;/strong&gt;&lt;br&gt;
Low code tools, especially those from the RPA and workflow automation fields, will enable enterprises to move more nimbly. Enterprise technology stacks are often overly complex, old, and slow. Low code automation tools can reduce the negative effects of that complexity. These tools can automate the steps involved in the processes these legacy tools run.&lt;/p&gt;

&lt;p&gt;Software robots, offered by low code RPA tools, for instance, can &lt;a href="https://www.uipath.com/blog/rpa-use-cases-part-one-unattended-robots"&gt;run unattended&lt;/a&gt;, meaning they can operate in the background, 24/7, handling all the agonizingly manual processes legacy tools typically require.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modernize and connect legacy technology&lt;/strong&gt;&lt;br&gt;
Enterprises are not only stuck with legacy technology; those legacy technologies are themselves often stuck in disparate silos. Connecting your ERPs to your CRMs and back again, for instance, can be a nightmare. Enterprises often face the choice of either living with it and being inefficient or hiring armies of consultants to fix it all, which is expensive.&lt;/p&gt;

&lt;p&gt;With low code, enterprises can modernize their legacy technology stacks without ripping them out and replacing them. Low code tools can layer on top of these tools and create a much more usable, intuitive interface. Business users can then access and use systems they previously would have had to request help from developers to use.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Digital transformation&lt;/strong&gt;&lt;br&gt;
Forgive the buzzword, but for enterprises, digital transformation is a serious pursuit. Many enterprises are still operating on paper and, if not paper, so-called "digital paper" systems --- technologies that weren't designed with the internet and native digital capabilities in mind.&lt;/p&gt;

&lt;p&gt;In clinical research, for example, as product manager Stephanie Morillo points out in this &lt;a href="https://twitter.com/radiomorillo/status/1405707879810748416"&gt;Twitter thread&lt;/a&gt;, many organizations still use Excel. Rather than use a modern database tool, enterprises (and their employees) use a tool that lacks version control and can't handle the thousands of rows necessary for their purposes.&lt;/p&gt;

&lt;p&gt;If ever there was a need for low code, this is it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#low-code-is-in-your-future-even-if-it-isnt%C2%A0the%C2%A0future"&gt;
  &lt;/a&gt;
  Low code is in your future (even if it isn't &lt;em&gt;the&lt;/em&gt; future)
&lt;/h2&gt;

&lt;p&gt;Big brain, hot take "thought leadership" on low code often relies on the phrase "the future of," as if software development --- an already complex and diverse field of technologies and methodologies --- will somehow evolve into one, simple thing. Well, it won't. That doesn't mean, however, that low code won't create incredible change.&lt;/p&gt;

&lt;p&gt;Low code will transform the field of software development by empowering developers to choose when and where they want to spend time hand-coding. With low code, developers can build less and architect more. As more developers adopt low code, the industry will shift in big, unpredictable ways.&lt;/p&gt;

&lt;p&gt;Full-time developers, armed with low code (or arming business users with low code), can re-focus from solving simple problems to solving complex problems. The effect of this reallocation is hard to understate and hard to predict. Developers&lt;a href="https://www.forbes.com/sites/glennsolomon/2020/06/23/why-developers-are-fueling-the-next-1-trillion-software-wave/?sh=1b904d451a31"&gt; run the world these days&lt;/a&gt; (see Stripe, Twilio, Atlassian, Datadog, MongoDB, etc.), so imagine if these &lt;a href="https://www.amazon.com/New-Kingmakers-Developers-Conquered-World-ebook/dp/B0097E4MEU"&gt;kingmakers&lt;/a&gt; shifted their internal tool development efforts (30% of their time) toward changing the world. And that's only one use case for low code!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>coding</category>
    </item>
    <item>
      <title>8 categories of Git</title>
      <author>Danyson</author>
      <pubDate>Fri, 25 Jun 2021 22:42:13 +0000</pubDate>
      <link>https://dev.to/danyson/8-categories-of-git-2127</link>
      <guid>https://dev.to/danyson/8-categories-of-git-2127</guid>
      <description>&lt;p&gt;&lt;strong&gt;You can classify Git version control mechanism into 8 categories.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create&lt;/li&gt;
&lt;li&gt;Track&lt;/li&gt;
&lt;li&gt;Revert&lt;/li&gt;
&lt;li&gt;Update&lt;/li&gt;
&lt;li&gt;Publish&lt;/li&gt;
&lt;li&gt;View&lt;/li&gt;
&lt;li&gt;Branch&lt;/li&gt;
&lt;li&gt;Conflict&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Below i have given classification of git mechanism along with their important commands.&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create"&gt;
  &lt;/a&gt;
  Create
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;When it comes to files&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init          
git add .
git add [filename]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;When it comes to a repository&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone ~/folder_A ~/folder_B
git clone git://url
git clone ssh://url
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#track"&gt;
  &lt;/a&gt;
  Track
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Track is when we want to track our files for commit, update or delete operations.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add files // adds files ready to be commited
git mv prev_place target_place //moves files
git rm files //removes files from working directory but adds it to the staging index
git rm --cached files //stops tracking but keeps files in working directory
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#revert"&gt;
  &lt;/a&gt;
  Revert
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;We use revert when we want to do a new&lt;br&gt;
commit that undoes previous commits.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git reset --hard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The --hard mode is not recoverable so if you want to recover your files after a git reset --hard, follow these steps &lt;a href="https://dev.to/danyson/how-to-recover-our-commit-after-a-git-reset-hard-14ij"&gt;How to recover our commit after a git reset --hard ?&lt;/a&gt; &lt;br&gt;
Other modes of reset -&amp;gt;&lt;code&gt;--soft, --mixed, --merge, --recurse-submodules&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git revert branch

git commit -a --amend //replaces previous commit

git checkout &amp;lt;commit_id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  Update
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Update is when we want to bring changes to our files.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git fetch //from the original repo that you have forked
git fetch remote
git pull //fetch &amp;amp; merge
git am -3 patch.mbox
git apply patch.diff
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#publish"&gt;
  &lt;/a&gt;
  Publish
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Publish is when we want to establish what we done with our files.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -a //adds all changed files &amp;amp; commits all changes
git format-patch origin //create set of diffs
git push remote //push to origin or remote
git tag //mark current version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#view"&gt;
  &lt;/a&gt;
  View
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;View is when we want to see the informations about our files.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status
git diff old_id new_id
git log -p file|dir
git blame file
git show id //meta data &amp;amp; diff
git show id:file
git branch //can list all branches both local and remote
git tag -l //shows list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#branch"&gt;
  &lt;/a&gt;
  Branch
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;The "branch" helps you to create, delete, and list branches.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout branch //switch working dir to branch
git merge branch //merge into current branch
git branch branch_name //branch current
git checkout -b new_branch another_branch //branch new branch from another branch and switch to new branch
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conflict"&gt;
  &lt;/a&gt;
  Conflict
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Conflict arises when two files of same name have different contents so we need to check the difference and maintain our code base without conflicts.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git diff [--base]
git diff --ours
git diff --theirs
git log --merge
gitk --merge
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://git-scm.com/"&gt;git documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Personal blog&lt;/em&gt;&lt;/strong&gt;@&lt;a href="https://danyson.github.io/"&gt;danyson.github.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>beginners</category>
      <category>computerscience</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Please give me advices how to improve site</title>
      <author>spoilt</author>
      <pubDate>Fri, 25 Jun 2021 22:10:07 +0000</pubDate>
      <link>https://dev.to/devhelper/please-give-me-advices-how-to-improve-site-396k</link>
      <guid>https://dev.to/devhelper/please-give-me-advices-how-to-improve-site-396k</guid>
      <description>&lt;p&gt;Please give me advices how to improve site &lt;a href="http://bit.ly/2nZoCig"&gt;http://bit.ly/2nZoCig&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks in advance!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css3</category>
      <category>javascript</category>
      <category>wordpress</category>
    </item>
    <item>
      <title>How to make a PWA</title>
      <author>TheYoungestCoder</author>
      <pubDate>Fri, 25 Jun 2021 21:56:31 +0000</pubDate>
      <link>https://dev.to/theyoungestcoder/how-to-make-a-pwa-4m4n</link>
      <guid>https://dev.to/theyoungestcoder/how-to-make-a-pwa-4m4n</guid>
      <description>&lt;p&gt;This is part 3 of "Getting a 100% score in lighthouse". In this article I'll show you how to create PWA. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get started
&lt;/h2&gt;

&lt;p&gt;To create a PWA (progressive web app) you need to use a webmanifest. The first thing you need to do is create a file called &lt;code&gt;manifest.json&lt;/code&gt; and include this snippet inside the head of &lt;code&gt;index.html&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"manifest"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"manifest.json"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since &lt;code&gt;manifest.json&lt;/code&gt; has many required properties to get your PWA working. I'll explain every one in-depth and how to implement them&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-name-endraw-raw-shortname-endraw-and-raw-description-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;short_name&lt;/code&gt;, and &lt;code&gt;description&lt;/code&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;short_name&lt;/code&gt; is what the user sees on their home screen. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; is what the user sees when installing the PWA&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-icons-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;icons&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;When a user installs your PWA, it uses an &lt;strong&gt;array&lt;/strong&gt; of icons to display on the home screen. Each icon is an object in which you need to specify the &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, and &lt;code&gt;sizes&lt;/code&gt;, and &lt;code&gt;purpose&lt;/code&gt; of each icon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-starturl-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;start_url&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This is the URL that is used when the user opens your app. It's typically &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-themecolor-endraw-and-raw-backgroundcolor-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;theme_color&lt;/code&gt; and &lt;code&gt;background_color&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This is pretty self-explanatory. It is worth noting that you have to use the HEX format.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-display-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;display&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;It describes how it's shown when your app is launched&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fullscreen — the app runs in a fullscreen window&lt;/li&gt;
&lt;li&gt;standalone — the app runs in it's own window but still has a URL bar&lt;/li&gt;
&lt;li&gt;browser — the app runs in the browser&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-splashscreen-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;splash_screen&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The splash screen is the image that appears when your app is launched. It is just in image so it requires &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; similar to an icon. &lt;/p&gt;

&lt;p&gt;Now that you know all the properties, here's an example for a news app webmanifest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Newsella&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;short_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;News&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start_url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;theme_color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background_color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;display&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;standalone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;One place for all of your news&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icons&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;logo.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sizes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;560x560&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;purpose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;any maskable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;splash_screen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;splash_screen.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sizes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;800x100&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: iOS does not use the icons property and instead uses &lt;code&gt;&amp;lt;link rel="apple-touch-icon" href="your icon"&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#service-workers"&gt;
  &lt;/a&gt;
  Service workers
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Service workers enable applications to control network requests, cache those requests to improve performance, and provide offline access to cached content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get a service worker setup you first need to create a file called &lt;code&gt;service-worker.js&lt;/code&gt;. Then, insert this snippet in your &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag inside &lt;code&gt;index.html&lt;/code&gt; to register the service worker.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;serviceWorker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;service-worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This next snippet creates an array of files and caches them once it's installed. This allows your PWA to be usable offline. Include it in &lt;code&gt;service-worker.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cacheName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filesToCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;somefile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;anotherfile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;install&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filesToCache&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;files cached&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})()&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, what you need to do is intercept any requests. If it's cached, simply return the already-cached value. Otherwise, fetch the file, then cache it. It's expressed with this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;respondWith&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// check if it's already cached&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cachedFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;requesting resource:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cachedFile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cachedFile&lt;/span&gt;

        &lt;span class="c1"&gt;// if not, fetch then cache&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;caching resource:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
    &lt;span class="p"&gt;})())&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#youre-done"&gt;
  &lt;/a&gt;
  You're done!
&lt;/h2&gt;

&lt;p&gt;You've successfully made a PWA! If you need help, I included some debugging tips below. If that didn't solve the issue, post the error in the comments. Thanks for reading, I hope this helped you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Failed to execute 'Cache' on 'addAll'&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This occurs when a file attempts to be cached that doesn't exist. Make sure that the files have the correct path in the &lt;code&gt;filesToCache&lt;/code&gt; array.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Service Worker Registration Failed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This happens when &lt;code&gt;service-worker.js&lt;/code&gt; doesn't exist.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Manifest property 'start_url' ignored, url is invalid&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Make sure that it points to the location of the actual HTML file for your app.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Manifest doesn't have a maskable icon&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Make sure that the optional purpose field your icon contains the word "maskable".&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
  </channel>
</rss>
