<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to add content recommendations to website</title>
      <author>Fischerbach</author>
      <pubDate>Wed, 21 Jul 2021 20:24:47 +0000</pubDate>
      <link>https://dev.to/fischerbach/how-to-add-content-recommendations-to-website-365</link>
      <guid>https://dev.to/fischerbach/how-to-add-content-recommendations-to-website-365</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-to-add-content-recommendations-to-website"&gt;
  &lt;/a&gt;
  How to add content recommendations to website
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#show-users-what-they-want-even-though-they-dont-even-know-what-they-want"&gt;
  &lt;/a&gt;
  Show users what they want (even though they don’t even know what they want)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--35rG1ZUH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5120/1%2AmYegKS7KJR0FptJH8MyBlA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--35rG1ZUH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/5120/1%2AmYegKS7KJR0FptJH8MyBlA.png" alt="*(Pic. by author. All logos and posters belong to their respective owners and are used for informational or editorial purposes to identify specific products and services.)*"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Personalized content proposals are now an established element of the Web. Most social media serve content to their users based on multiple touchpoints of the user’s interaction with the platform. (Some of them also track the user outside their pages, which has caused a whole discussion about privacy and &lt;a href="https://medium.datadriveninvestor.com/alternatives-to-third-party-cookies-in-2020-857609f8f2bb"&gt;blocking cross-domain tracking&lt;/a&gt;.) Usually, the aim is to increase some interaction rate (i.e. measured by the number of visits, purchases or other actions per user).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lASsgymF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2344/0%2ACKkBfbeVfGs9Fqs7" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lASsgymF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2344/0%2ACKkBfbeVfGs9Fqs7" alt="*Amazon utilizes the behaviour of customers to make predictions about what similar customers would like. Can you guess for which book these recommendations appear on? (source: Amazon.com)*"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Online shops increase their revenue with clever recommendations of products that appear at every stage of the sales funnel. But non-retail sites can also benefit from the advantages of recommender systems. If you run a website that provides content, you can use content recommendations to maintain user attention and increase visits.&lt;/p&gt;

&lt;p&gt;In this article, using an example of a movie database web site, I’ll show you how to add content recommendations to your website. We’ll discuss basic approaches to this and then use a SaaS called Pipeless, which allows you to create a database with built-in recommendation algorithms.&lt;/p&gt;

&lt;p&gt;Read More:&lt;br&gt;
&lt;a href="https://levelup.gitconnected.com/how-to-add-content-recommendations-to-a-website-be107c336117"&gt;https://levelup.gitconnected.com/how-to-add-content-recommendations-to-a-website-be107c336117&lt;/a&gt;&lt;/p&gt;

</description>
      <category>datascience</category>
      <category>machinelearning</category>
      <category>python</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What redesigning our product taught us about optimizing video call performance in React</title>
      <author>Jess Mitchell</author>
      <pubDate>Wed, 21 Jul 2021 20:18:19 +0000</pubDate>
      <link>https://dev.to/trydaily/what-redesigning-our-product-taught-us-about-optimizing-video-call-performance-in-react-4hl1</link>
      <guid>https://dev.to/trydaily/what-redesigning-our-product-taught-us-about-optimizing-video-call-performance-in-react-4hl1</guid>
      <description>&lt;p&gt;&lt;em&gt;Recently, one of Daily’s front-end engineers, Christian Stuff, internally shared several performance improvement tips he discovered while working on Daily Prebuilt. The following discussion is based on that list.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;One of our primary goals at Daily is to help our customers embed reliable and easy-to-use video calls into their apps in the shortest developer time possible. One way we’ve found to do this is by offering &lt;a href="https://www.daily.co/prebuilt"&gt;Daily Prebuilt&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Daily Prebuilt is Daily's ready-to-use, &lt;a href="https://docs.daily.co/docs/embed-the-daily-prebuilt-ui"&gt;embeddable video chat&lt;/a&gt; that can be added to any app with just a few lines of code. This is in comparison to our &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-createcallobject"&gt;call object&lt;/a&gt; option, which enables customers to build their own custom video calls with our core APIs. &lt;/p&gt;

&lt;p&gt;Basically, if Daily Prebuilt is your favourite meal served at a restaurant, Daily's &lt;a href="https://docs.daily.co/docs/build-a-custom-video-chat-interface"&gt;customizable call object&lt;/a&gt; is a bag of groceries and spices with a recipe included. Which one you choose ultimately depends on what your goal is and how many of your own flavours you want to include.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B4lOqPki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a585g6skqj6ewx8191zk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B4lOqPki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a585g6skqj6ewx8191zk.jpeg" alt="Daily Prebuilt's UI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redesigning-and-improving-daily-prebuilt"&gt;
  &lt;/a&gt;
  Redesigning and improving Daily Prebuilt
&lt;/h2&gt;

&lt;p&gt;Recently, we decided to redesign &lt;a href="https://www.daily.co/prebuilt"&gt;Daily Prebuilt&lt;/a&gt; to incorporate some helpful customer feedback we knew would substantially improve Daily Prebuilt’s UX.&lt;/p&gt;

&lt;p&gt;What some customers might not realize is that Daily Prebuilt is actually built with our &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-createcallobject"&gt;call object&lt;/a&gt;. (Yes, we are one of our own customers!) This new, redesigned version also gave us the opportunity to do a deeper dive on the most performant ways to implement Daily’s &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-createcallobject"&gt;call object&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Along the way, we’ve found several solutions to drastically improve Daily Prebuilt’s performance, especially on mobile devices and the problem child of browsers for WebRTC: Safari.&lt;/p&gt;

&lt;p&gt;To help our customers avoid having to learn these lessons on their own, we’ll be covering our most important solutions related to improving performance while using Daily’s call object mode. Many of these are also applicable to WebRTC development in general.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#who-will-find-this-tutorial-helpful"&gt;
  &lt;/a&gt;
  Who will find this tutorial helpful?
&lt;/h2&gt;

&lt;p&gt;You’ll find this tutorial useful if you're:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Interested in learning more about browser quirks related to video calls&lt;/li&gt;
&lt;li&gt;A current Daily customer building a custom video chat app&lt;/li&gt;
&lt;li&gt;Shopping around for a video API to help you build a custom video experience&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#who-will-find-this-tutorial-helpful-tech-stack-edition"&gt;
  &lt;/a&gt;
  Who will find this tutorial helpful?: Tech stack edition
&lt;/h2&gt;

&lt;p&gt;We’re fond of &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; and &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; at Daily, but these performance tips are mostly front-end framework-agnostic. Regardless of what you’re building your web app with, you can apply these tips to get the most out of your Daily video calls.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#excuse-me-sir-what-exactly-is-the-problem"&gt;
  &lt;/a&gt;
  Excuse me, sir: What exactly is the problem?
&lt;/h2&gt;

&lt;p&gt;Before we dive into all the performance optimizations we used to improve Daily Prebuilt, let’s first take a look at how we knew we had a problem. &lt;/p&gt;

&lt;p&gt;One of the main motivators for improving performance has been due to our push to increase call sizes. (1000 participants now, have you heard? 😎) All these additional participants create a new problem: loading participant media. For example, if you’re in a Daily call in speaker mode and scroll through the participant list, videos should load efficiently as they come into view to create a positive user experience. &lt;/p&gt;

&lt;p&gt;Here’s an example of participant bar scrolling in one of the earliest internal versions of the new Daily Prebuilt:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Khn7aWwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rds0v06a36yzkpybetdc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Khn7aWwX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rds0v06a36yzkpybetdc.gif" alt="Video lagging while scrolling an early version of Daily Prebuilt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We felt the participant bar needed to load the videos faster and more reliably, as a user scrolls through. (Imagine that call with 1000 participants; no one’s got time for that!)&lt;/p&gt;

&lt;p&gt;For comparison’s sake, let’s take a look at the participant bar after we implemented the following performance improvements. It quickly recovers from a scroll much more efficiently. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LhuuPMes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lmw87ys5axeu5w6yac5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LhuuPMes--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lmw87ys5axeu5w6yac5.gif" alt="Quick video loading on scroll after making performance improvements"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another example of slow performance while the new Daily Prebuilt was in development was on mobile. We noticed issues like flickering videos, crackling audio, and delays to user interactions, like button presses. (We might have even heard the word “janky” a couple times during internal testing and cringed.)&lt;/p&gt;

&lt;p&gt;We knew we could do better!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#improving-performance-in-video-call-apps"&gt;
  &lt;/a&gt;
  Improving performance in video call apps
&lt;/h2&gt;

&lt;p&gt;In this tutorial we'll cover 7 main lessons we learned about improving performance in a custom video chat app. These lessons include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Batching&lt;/strong&gt; &lt;code&gt;daily-js&lt;/code&gt; events, i.e. participant-related events that trigger re-renders&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Manually subscribing&lt;/strong&gt; to media tracks in specific use cases&lt;/li&gt;
&lt;li&gt;Using &lt;strong&gt;virtual scrolling&lt;/strong&gt; in scrollable elements containing videos&lt;/li&gt;
&lt;li&gt;Using &lt;strong&gt;pagination&lt;/strong&gt; to limit the number of videos shown at a time&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Memoizing&lt;/strong&gt; elements prone to re-renders&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reducing&lt;/strong&gt; how often media elements are added and removed from the DOM&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Checking if a video is paused&lt;/strong&gt; before playing it&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-batching-dailyjs-events"&gt;
  &lt;/a&gt;
  1. Batching daily-js events
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://docs.daily.co/reference#using-the-dailyco-front-end-library"&gt;daily-js&lt;/a&gt; is an &lt;a href="https://docs.daily.co/reference#events"&gt;events-based&lt;/a&gt; library. Whenever a participant joins a call, updates their device, becomes the active speaker, or anything in between, &lt;code&gt;daily-js&lt;/code&gt; sends an event so you can decide how to update your call UI. (Check out our docs to see a full &lt;a href="https://docs.daily.co/reference#events"&gt;list of Daily events&lt;/a&gt;. 👀)&lt;/p&gt;

&lt;p&gt;For example, you can use the &lt;code&gt;participant-joined&lt;/code&gt; event if you want to listen for when a new participant joins the current call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-joined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-joined event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// add another video tile for the new participant &lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The event payload itself will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;participantJoinedEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-joined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;callFrameId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;16257681634230.996506976694651&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;audioTrack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;cam_info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
      &lt;span class="na"&gt;joined_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thu Jul 08 2021 14:18:21 GMT-0400 (Eastern Daylight Time)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;local&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;record&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;screenTrack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;screen_info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
      &lt;span class="na"&gt;session_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d8c55cfb-5eff-4f92-ccee-004989f6b077&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="na"&gt;screenVideo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="na"&gt;screenAudio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="na"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;d8c55cfb-5eff-4f92-ccee-004989f6b077&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;user_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;videoTrack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;will_eject_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wed Dec 31 1969 19:00:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If a bunch of people all join a meeting you’re in at the same time, you’ll receive a &lt;code&gt;participant-joined&lt;/code&gt; event for each and every one of them. It can be a lot to handle in calls with dozens (or hundreds!) of people! 😱&lt;/p&gt;

&lt;p&gt;Now let’s say you’re updating a data store for each of these &lt;code&gt;participant-joined&lt;/code&gt; events, such as updating a &lt;code&gt;participants&lt;/code&gt; array in a React store. Updating the state for every &lt;code&gt;participant-joined&lt;/code&gt; event would trigger a re-render for each one, which is not ideal. Instead, you can avoid this by batching &lt;code&gt;participant-joined&lt;/code&gt; events and only update your state every 250ms with all the newly joined participants at once.&lt;/p&gt;

&lt;p&gt;Let’s take a look at how this could look in React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinedSubscriptionQueue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleParticipantJoined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;participant&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;joinedSubscriptionQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinBatchInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;joinedSubscriptionQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Update participants list in React state based on the `joinedSubscriptionQueue` array of new participants&lt;/span&gt;
  &lt;span class="c1"&gt;// Reset queue&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-joined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleParticipantJoined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this solution, the &lt;code&gt;participant-joined&lt;/code&gt; event triggers the &lt;code&gt;joinedSubscriptionQueue&lt;/code&gt; to update. Then, an interval is set that waits 250ms for any other new participants to be added to the &lt;code&gt;joinedSubscriptionQueue&lt;/code&gt; before actually triggering any state changes. &lt;/p&gt;

&lt;p&gt;Even with such a small interval of 250ms, batching event-based changes can improve performance, especially in large calls.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind, too, is that when you should actually use event batching will depend on how you are responding to Daily events in your app. Your own implementation will vary based on what is triggering the most avoidable re-renders or UI updates.&lt;/p&gt;

&lt;p&gt;In addition to &lt;code&gt;participant-joined&lt;/code&gt;, batching is useful in other Daily events that are triggered often in calls, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;participant-updated&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;participant-left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;track-started&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;track-stopped&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#advanced-daily-events-batching-manual-track-subscriptions"&gt;
  &lt;/a&gt;
  Advanced Daily events batching: Manual track subscriptions
&lt;/h3&gt;

&lt;p&gt;Let’s take a look at a more advanced example of Daily event batching that uses &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-setsubscribetotracksautomatically"&gt;manual track subscriptions&lt;/a&gt;. This is considered more advanced because Daily manages track subscriptions for you by default; turning on manual track subscriptions will add quite a bit of complexity to your state management and is only recommended in specific use cases. &lt;/p&gt;

&lt;p&gt;If we take the example from above, we can update it for implementing &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-setsubscribetotracksautomatically"&gt;manual track subscriptions&lt;/a&gt; for new participants. Let’s say we want to turn on track subscriptions for every new participant when they join, batching the subscriptions could look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinedSubscriptionQueue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleParticipantJoined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;participant&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;joinedSubscriptionQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session_id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joinBatchInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;joinedSubscriptionQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;joinedSubscriptionQueue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;subscribed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;?.[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]?.&lt;/span&gt;&lt;span class="nx"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;subscribed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;setSubscribedTracks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;screenAudio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;screenVideo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{});&lt;/span&gt;

    &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateParticipants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updates&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;participant-joined&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleParticipantJoined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code snippet above, we create a queue of new participants every 250ms and use the &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-updateparticipants"&gt;&lt;code&gt;updateParticipants&lt;/code&gt;&lt;/a&gt; method to update all the new participants’ subscribed tracks at the same time.&lt;/p&gt;

&lt;p&gt;This version of event batching helps avoid updating each and every new participant individually without creating any noticeable UI delays in displaying participant videos.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-manual-track-subscriptions-only-subscribe-to-visible-participants"&gt;
  &lt;/a&gt;
  2. Manual track subscriptions: Only subscribe to visible participants
&lt;/h3&gt;

&lt;p&gt;You may be wondering about when to use the example right above, which demonstrates manual track subscription. By default, Daily will handle track subscriptions for you and, for the most part, this is the best solution; let us do the work for you.&lt;/p&gt;

&lt;p&gt;In some situations, however, you may want to take advantage of Daily’s &lt;a href="https://docs.daily.co/reference#%EF%B8%8F-setsubscribetotracksautomatically"&gt;call object option to manually subscribe&lt;/a&gt; to media tracks for participants. This can be useful for improving performance in large calls, as well as certain features like “breakout rooms” where a call is broken into sub-groups. (But, again, most apps do not need to use this feature!)&lt;/p&gt;

&lt;p&gt;In terms of performance, manually subscribing or unsubscribing from tracks is useful in large calls where many videos are not visible. Since the video is not visible, you can unsubscribe from receiving the video tracks from those participants and reduce the amount of data being sent and received related to the call. Only when the participant is moved to being on-screen will you need to re-subscribe to the participant video track.&lt;/p&gt;

&lt;p&gt;Using manual track subscription requires two main Daily methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://docs.daily.co/reference#%EF%B8%8F-setsubscribetotracksautomatically"&gt;&lt;code&gt;setSubscribeToTracksAutomatically(false)&lt;/code&gt;&lt;/a&gt;: Be sure to pass &lt;code&gt;false&lt;/code&gt; as a parameter to override the default, which will automatically subscribe to all tracks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.daily.co/reference#%EF%B8%8F-updateparticipant"&gt;&lt;code&gt;updateParticipant()&lt;/code&gt;&lt;/a&gt; or updateParticipants(), which updates several participants at once. To update which the tracks are subscribed to for a participants, pass a &lt;code&gt;setSubscribedTracks&lt;/code&gt; value like so:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateParticipant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, 
  {
    setSubscribedTracks: {
      audio: true,
      video: false,
      screenVideo: false,
    },
  }
);
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Note: If you’re not sure if using manual track subscriptions is a good option for your app, feel free to &lt;a href="https://www.daily.co/contact/support"&gt;ask our team&lt;/a&gt;. We’re happy to help!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-using-virtual-lists-to-reduce-how-many-raw-ltvideogt-endraw-elements-are-rendered"&gt;
  &lt;/a&gt;
  3. Using virtual lists to reduce how many &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements are rendered
&lt;/h3&gt;

&lt;p&gt;One major update with the new Daily Prebuilt design was making the participant bar vertically scrollable. As Daily increases the call size limits, only rendering participant tiles that are actually visible provides a huge performance win. This can be achieved with virtualized lists.&lt;/p&gt;

&lt;p&gt;Virtualized lists (or virtualized scrolling) refers to a list of items where only the visible subset of items is actually rendered in the DOM. As the list is scrolled through, new items (DOM elements) are rendered as they are scrolled into view (or into a “pre-render” area). Conversely, as DOM elements are scrolled out of view, they are destroyed. The goal here is to only render what is visually relevant to the user, and update the list as it is scrolled through.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FX_6Xt7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zf0na7wpmh8rgtnqqkqv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FX_6Xt7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zf0na7wpmh8rgtnqqkqv.jpeg" alt="Virtualized scrolling"&gt;&lt;/a&gt;&lt;br&gt;
The Daily Prebuilt participant bar is a good candidate for virtualized scrolling because there can be dozens or even hundreds of participants in the participant bar. Depending on the size of your browser window, you may only actually see 5-10 participants at a time. &lt;/p&gt;

&lt;p&gt;To implement virtualized scrolling, there are thankfully several options. If you don’t mind doing some math, you can calculate where you expect the item to be on the screen based on its position in the list, the size of the element, the scroll position, and the height of the container element. If it is visible, you can render it and otherwise not. (Check out this &lt;a href="https://blog.logrocket.com/virtual-scrolling-core-principles-and-basic-implementation-in-react/"&gt;blog post on virtualized lists&lt;/a&gt; that explains this well.)&lt;/p&gt;

&lt;p&gt;To simplify virtualized scrolling even more, you can also use one of the many libraries that will handle the rendering logic for you. React, for example, has several available libraries, like &lt;a href="https://www.npmjs.com/package/react-virtualized"&gt;react-virtualized&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Lastly, if you’re using Daily’s React Native library, &lt;a href="https://github.com/daily-co/react-native-daily-js#readme"&gt;react-native-daily-js&lt;/a&gt;, you can use React Native’s &lt;a href="https://reactnative.dev/docs/flatlist"&gt;&lt;code&gt;FlatList&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;SectionList&lt;/code&gt; components. They are both wrapper components for React Native’s &lt;a href="https://reactnative.dev/docs/virtualizedlist"&gt;Virtualized List&lt;/a&gt; component and will handle all the rendering logic for you, as well. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#4-limiting-video-feeds-with-pagination"&gt;
  &lt;/a&gt;
  4. Limiting video feeds with pagination
&lt;/h3&gt;

&lt;p&gt;In Daily Prebuilt on desktop, we limit the rendered participant tiles in two ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Virtualized lists&lt;/li&gt;
&lt;li&gt;Pagination&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In speaker mode, we used virtualized scrolling, as mentioned, to manage the participant bar videos. In grid mode, however, we use pagination to limit how many videos are on the screen at any given time. This allows all participants to be viewable, just not all at the same time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SxPODH9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49tr2iu5tawk71odqzn7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SxPODH9l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/49tr2iu5tawk71odqzn7.png" alt="Daily Prebuilt on desktop with pagination"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The number of videos and the grid’s tile dimensions ultimately depend on the browser window size and what fits best based on our video aspect ratio requirements.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--18O03ZPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6id3lnftld9ry83acvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--18O03ZPs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6id3lnftld9ry83acvw.png" alt="Daily Prebuilt on mobile with pagination"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Daily Prebuilt’s mobile designs, we’re a lot stricter with our grid layout and never render more than three remote participant tiles at a time. This is because mobile devices (especially iOS devices) use a noticeable amount of CPU resources to decode video. We’ve found mobile devices often can’t handle more than three (or so) videos at a time. Pagination helps manage this CPU bottleneck by allowing users to page through all participants while never rendering more than three remote videos.&lt;/p&gt;

&lt;p&gt;To see an example of how pagination can be implemented with a grid of videos in Daily’s call object, let’s take a look at an example from a React app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;gridRef&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handlePrevClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Back&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tiles&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tiles&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleNextClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Next&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code block above, we render a parent &lt;code&gt;div&lt;/code&gt; element. Inside the &lt;code&gt;div&lt;/code&gt;, there’s a &lt;code&gt;Back&lt;/code&gt; button conditionally rendered if you’re not on the first page. (Alternatively, you could render the button and disable it instead.) Next, we render the participant video tiles. Lastly, there’s another conditional &lt;code&gt;Next&lt;/code&gt; button if you’re not on the last page.&lt;/p&gt;

&lt;p&gt;Now let’s take a look at the tiles being rendered:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;visibleParticipants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;participants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;visibleParticipants&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Video&lt;/span&gt; &lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;)&lt;/span&gt;&lt;span class="err"&gt;,
&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;visibleParticipants&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we calculate which participants are visible by taking the total number of participants, the page number, and the number of participants per page. With those numbers, we can determine which participants should have tiles rendered for them. &lt;/p&gt;

&lt;p&gt;Once we know the visible tiles, we can render a tile for each one. Each time the page number is increased or decreased by clicking the &lt;code&gt;Next&lt;/code&gt; or &lt;code&gt;Back&lt;/code&gt; buttons, the visible participants can be recalculated and the tile updates.&lt;/p&gt;

&lt;p&gt;By restricting the number of tiles— and, therefore, the number of videos— being rendered at any given time, we can reduce the CPU load of a Daily video call substantially.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-memoizing-components-that-rerender-too-often"&gt;
  &lt;/a&gt;
  5. Memoizing components that re-render too often
&lt;/h3&gt;

&lt;p&gt;You may have noticed in the example above, we’re using a React hook called &lt;a href="https://reactjs.org/docs/hooks-reference.html#usememo"&gt;&lt;code&gt;useMemo&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const tiles = useMemo(() =&amp;gt; {...}, [dependency1, dependency2]);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;useMemo&lt;/code&gt; is an example of how to “memoize” React components. Memoization is an effective way to avoid re-computing potentially “expensive” calculations by using the cached computed value until one of the dependencies has changed. (A dependency is a value that affects the rendered output.) Memoization is used here to only update the &lt;code&gt;tiles&lt;/code&gt; value when the dependencies— the values in the second parameter, the array— change. &lt;/p&gt;

&lt;p&gt;Let’s look at another example to see how memoization works. In React, if you have a paragraph element (&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;) that displays the sum of two numbers that are each passed as props to a component, you could represent it like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayedSum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useMemo&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can say pretty confidently that if &lt;code&gt;num1&lt;/code&gt; and &lt;code&gt;num2&lt;/code&gt;’s values don’t change, the &lt;code&gt;displayedSum&lt;/code&gt; element won’t change. (2+2=4, right?) &lt;/p&gt;

&lt;p&gt;By using &lt;code&gt;useMemo&lt;/code&gt;, we’re telling React that it doesn’t need to keep re-rendering this element unless &lt;code&gt;num1&lt;/code&gt; or &lt;code&gt;num2&lt;/code&gt; change, because then it will actually need to calculate the total again.&lt;/p&gt;

&lt;p&gt;In the case of &lt;code&gt;displayedSum&lt;/code&gt;, adding two numbers is probably not a very ”expensive” calculation in terms of CPU usage; however, with a grid of &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements, re-renders can get expensive fairly quickly, especially on mobile devices. &lt;/p&gt;

&lt;p&gt;Preventing expensive re-renders via memoization (or any other methods) is one of the fastest ways to improve performance in your video or audio-only calls. If you’ve noticed any performance issues in your own Daily app, this is a great place to start.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-avoid-unnecessarily-removing-and-adding-back-videos"&gt;
  &lt;/a&gt;
  6. Avoid unnecessarily removing and adding back videos
&lt;/h3&gt;

&lt;p&gt;This one might sound contrary to what we’ve been saying so far but hear us out.&lt;/p&gt;

&lt;p&gt;While it’s important to remove &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements that aren’t visible, you should avoid unnecessarily adding or tearing down media (video and audio) elements as much as possible. In React, for example, this could mean making sure your React hook dependencies are not too broad and you are not re-rendering media elements when you don’t need to.&lt;/p&gt;

&lt;p&gt;This is especially important on iOS, which will have a noticeable CPU hit when adding and removing media elements unnecessarily. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-only-play-paused-raw-ltvideogt-endraw-elements"&gt;
  &lt;/a&gt;
  7. Only play paused &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements
&lt;/h3&gt;

&lt;p&gt;You might be starting to notice a pattern here and, well, you’d be right. If we could sum up our suggestions in one (possibly condescending) sentence, it would be, “Don’t do anything you don’t need to do.”&lt;/p&gt;

&lt;p&gt;This is also the case for playing videos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;videoRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;participant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;videoTrack&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MediaStream&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;videoTrack&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;srcObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleCanPlay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;paused&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;

   &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canplay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleCanPlay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canplay&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleCanPlay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;};&lt;/span&gt;
 &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;videoTrack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;videoTrack&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this snippet from Daily Prebuilt mobile code, we set the &lt;code&gt;srcObject&lt;/code&gt; for the video element (represented by &lt;code&gt;videoRef&lt;/code&gt;) if there’s a video track (&lt;code&gt;videoTrack&lt;/code&gt;) available. Otherwise, the source is set to &lt;code&gt;null&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;We then add an event listener for the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event"&gt;&lt;code&gt;canplay&lt;/code&gt;&lt;/a&gt; event. The video element is then played as soon as it’s available if it is not already playing. For example, the video may get paused when disconnecting a Bluetooth audio device, so adding this event listener will help ensure the video is resumed as soon as its media stream is ready again.&lt;/p&gt;

&lt;p&gt;You might be wondering if it really matters if you call &lt;code&gt;play()&lt;/code&gt; on a video that’s not paused. It turns out checking if a video is actually paused before playing it does help performance, especially on iOS Safari.&lt;/p&gt;

&lt;p&gt;As we discovered rewriting Daily Prebuilt for mobile, playing a video that is already playing on iOS Safari is not a "no-op". The action of playing a video, even if it is already playing, takes about 300ms to complete.&lt;/p&gt;

&lt;p&gt;This means adding a simple check to see if the video is paused before playing will actually reduce the CPU usage of your Daily call on mobile.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;If there’s one thing we appreciate about WebRTC video calls at Daily, it’s that getting performance right across browsers and devices is tough. Hopefully, these lessons we’ve learned along the way help you customize your Daily calls even faster. &lt;/p&gt;

&lt;p&gt;To learn more about building a custom Daily video call, check out our &lt;a href="https://github.com/daily-demos/call-object-react"&gt;React demo repo&lt;/a&gt;, as well as our &lt;a href="https://www.daily.co/blog/building-a-custom-video-chat-app-with-react/"&gt;tutorial&lt;/a&gt; that goes along with it.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webrtc</category>
      <category>javascript</category>
      <category>video</category>
    </item>
    <item>
      <title>Logistic Regression at a glance</title>
      <author>Mansi Saxena</author>
      <pubDate>Wed, 21 Jul 2021 19:56:15 +0000</pubDate>
      <link>https://dev.to/saxenamansi/logistic-regression-at-a-glance-5h50</link>
      <guid>https://dev.to/saxenamansi/logistic-regression-at-a-glance-5h50</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is Logistic Regression?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In problems where a discrete value (0, 1, 2...) is to be predicted based on some input values, Logistic Regression can be very handy. Examples of such problems are - detecting if a student will be selected in a graduate program depending on his profile, or if an Instagram account has been hacked depending on its recent activity. These problems can be solved by "Supervised Classification Models", one of which is Logistic Regression. &lt;/p&gt;

&lt;p&gt;To build such a model, we need to supply the model with some training data, ie, samples of various data values as inputs and their corresponding discrete valued outputs. The input can be defined in terms of several independent features on which the output depends. For instance, if we take the problem of predicting if an Instagram account has been hacked, we can define some independent features such as "activity time", "5 recent texts", "5 recent comments", "10 recently liked posts" and so on. Using this input training data, the model essentially "learns" what the traits of a hacked Instagram account and uses this knowledge to make predictions on other accounts to check if they are hacked. &lt;/p&gt;

&lt;p&gt;However, you and I both know it is not that simple. So what goes on behind this black box?  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Diving into the math!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First, let us set some notations. &lt;/p&gt;

&lt;p&gt;If we have "n" features and "m" training samples, they can be arranged in an "n*m" matrix consisting of training samples as column vectors horizontally stacked together as given in the image below. Let us call this matrix X. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zc8wqMg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rs0szss5ef4e569omgj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zc8wqMg4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rs0szss5ef4e569omgj.png" alt="Training Matrix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has a corresponding vector which contains the discrete valued outputs for each training sample. It is a single column vector of dimension 1*m. Let us call this vector Y. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yr7Bd6BE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfo7wgklqnf5dnqd8cot.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yr7Bd6BE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfo7wgklqnf5dnqd8cot.jpg" alt="Alt Text Output Labels"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the notations set and out of the way, let's get to the heart of logistic regression! &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The equations&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;We first calculate the probability that the output value of a particular input is 1 (given that the set of output labels = {0, 1}), which is also denoted as given below - &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8Bj56cyh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4288biofb66tr6w6liw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Bj56cyh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4288biofb66tr6w6liw.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;First, a hypothesis value Z is calculated by finding the transpose of a parameter W (row vector of dimensions n*1) multiplied with the matrix X (matrix of dimensions n*m), and then added to another column matrix b (column vector of dimension 1*m). &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8p-T9c_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwau1diey64hlf7ulc4q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8p-T9c_A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwau1diey64hlf7ulc4q.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Then, an irregularity function "sigmoid" is applied to Z to give us the predicted probability for that particular input set. It outputs a value between 0 and 1 as shown in the figure below. &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SbywUo8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76ujn3m07be35vygbskj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SbywUo8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76ujn3m07be35vygbskj.png" alt="Sigmoid"&gt;&lt;/a&gt;&lt;br&gt;
The equation for the sigmoid function is - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WnGZGEkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q70xfmmkbdl0bivx4af.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WnGZGEkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8q70xfmmkbdl0bivx4af.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Thus, our final equation becomes - &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJF53sxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53w95a1a5ce56in69jra.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJF53sxr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/53w95a1a5ce56in69jra.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, the parameters W and b are trained and set to optimal values that give the highest accuracy in predicting probability that the output is 1. A loss value is calculated for each training example, and depending on the value, the parameters are adjusted to give better results and reduce this loss value. This is essentially what is referred to as "training" a model. A low loss value suggests that the model has been successfully trained (or that the model is overfitting, but that is a concept for another blog 😁). This loss value is calculated by the equation - &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dCh7scrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjclegn71q8et5h4ak3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dCh7scrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjclegn71q8et5h4ak3k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thus, we see that - &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02sArAiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx5f46or44l50visahwi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02sArAiV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rx5f46or44l50visahwi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using the loss function, we calculate the cost function, which is an addition of all the loss function values over all the training examples. It is calculated using the formula below - &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OHc7gnL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yr0jctkf6x78j52lzsk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHc7gnL0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yr0jctkf6x78j52lzsk6.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, to adjust the values of the parameters W and b, we use the famous gradient descent algorithm (which is also for another blog 😁). This formula is given below - &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F4ReLsyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwmaoyre9oqlj6wa2r54.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F4ReLsyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwmaoyre9oqlj6wa2r54.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
This formula comes from the gradient descent algorithm. Here, the parameter alpha is called learning rate. A large learning rate causes large adjustments in parameters while a small learning rate causes smaller adjustments. It can be tuned according to our requirements. &lt;/p&gt;

&lt;p&gt;And viola! That wraps up one iteration of training our Logistic Regression Model! Connect enough of these together with slight modification, and we get a neural net!&lt;/p&gt;

&lt;p&gt;Hope you enjoyed reading this, thank you for reading till the end!&lt;/p&gt;

</description>
      <category>machinelearning</category>
    </item>
    <item>
      <title>My Experience with Frontendmentor.io Challenges - Part 1</title>
      <author>MidouWebDev</author>
      <pubDate>Wed, 21 Jul 2021 19:34:09 +0000</pubDate>
      <link>https://dev.to/midouwebdev/my-experience-with-frontendmentor-io-challenges-part-1-5fi5</link>
      <guid>https://dev.to/midouwebdev/my-experience-with-frontendmentor-io-challenges-part-1-5fi5</guid>
      <description>&lt;p&gt;Hey, i am MidouWebDev !&lt;/p&gt;

&lt;p&gt;Welcome to this serie where i share my experience with cloning &lt;a href="https://frontendmentor.io"&gt;Frontendmentor.io&lt;/a&gt; designs using HTML, CSS, JAVASCRIPT.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TMilbRxl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsjicc6err2rvxy4q5vl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TMilbRxl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lsjicc6err2rvxy4q5vl.png" alt="Frontendmentor.io Home Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After i watched full HTML, CSS and JS courses on YouTube and after i heard that practicing is the key to perfectly learn and master web development. I started doing research about that and once i found this amazing platform, i logged in and started my first free and newbie challenge which was the &lt;a href="https://www.frontendmentor.io/challenges/ping-single-column-coming-soon-page-5cadd051fec04111f7b848da"&gt;Ping Coming Soon Page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2uhBQqHr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ssa4g17dxbm2serhrwy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2uhBQqHr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ssa4g17dxbm2serhrwy.jpg" alt="The Ping Coming Soon Page Challenge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was so easy to reproduce but i learned too much things that i will be talking about in the next post.&lt;/p&gt;

&lt;p&gt;You can find my Frontend Mentor Challenges Repository where i push my solutions &lt;a href="//https;//github.com/MidouWebDev/Frontend-Mentor-Challenges"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Don't forget to star it if you liked it 😉🙏&lt;/p&gt;

&lt;p&gt;Follow me on GitHub &lt;a href="https://github.com/MidouWebDev"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Until now, i have worked on three challenges and i got the idea to start posting on DEV.TO about that. I will be sharing my experience with each challenge so stay tuned ! 😉👋&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What are your burning questions about all things AWS? Answer to be featured on our podcast 🎧  </title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Wed, 21 Jul 2021 19:15:19 +0000</pubDate>
      <link>https://dev.to/devteam/what-are-your-burning-questions-about-all-things-aws-answer-to-be-featured-on-our-podcast-52kc</link>
      <guid>https://dev.to/devteam/what-are-your-burning-questions-about-all-things-aws-answer-to-be-featured-on-our-podcast-52kc</guid>
      <description>&lt;p&gt;The &lt;a href="//dev.to/devdiscuss"&gt;DevDiscuss Podcast&lt;/a&gt; begins with an interview and ends with commentary from listeners — and we like to feature the &lt;em&gt;actual&lt;/em&gt; voices from our community!&lt;/p&gt;

&lt;p&gt;To inform an upcoming episode of the show, we'd like to know...&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#what-are-your-burning-questions-about-amazon-web-services-aws"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What are your burning questions about Amazon Web Services (AWS)?&lt;/strong&gt;
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;For your chance to hear your actual comments on an upcoming episode, answer the question above by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Calling our Google Voice at +1 (929)500-1513 and leave a message 📞&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending a voice memo to &lt;a href="mailto:pod@dev.to"&gt;pod@dev.to&lt;/a&gt; 🎙&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OR, leaving a comment here (we'll read your response aloud for you) 🗣&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please send in your recordings by Thursday, July 22nd at 1 PM, ET (5 PM UTC, 10 AM PT)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice-recordings-will-be-given-priority-placement"&gt;
  &lt;/a&gt;
  Voice recordings will be given priority placement 😉
&lt;/h4&gt;

&lt;p&gt;Catch up on recent episodes of the show &lt;a href="https://dev.to/devdiscuss"&gt;here&lt;/a&gt;. The new season premieres soon 👀  &lt;/p&gt;

</description>
      <category>podcast</category>
      <category>discuss</category>
      <category>aws</category>
    </item>
    <item>
      <title>Sieve of Eratosthenes, What is it?</title>
      <author>Vishwa.R</author>
      <pubDate>Wed, 21 Jul 2021 18:52:40 +0000</pubDate>
      <link>https://dev.to/codereaper08/sieve-of-eratosthenes-what-is-it-2o3g</link>
      <guid>https://dev.to/codereaper08/sieve-of-eratosthenes-what-is-it-2o3g</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6z7NRcji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.famousmathematicians.net/photos/eratosthenes.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6z7NRcji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.famousmathematicians.net/photos/eratosthenes.jpg" alt="Eratosthenes"&gt;&lt;/a&gt;&lt;/p&gt;
Image source : famousmathematicians.net



&lt;h2&gt;
  &lt;a href="#what-is-it"&gt;
  &lt;/a&gt;
  What is it?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Sieve of Eratosthenes&lt;/strong&gt; is an algorithm devised by the &lt;strong&gt;Eratosthenes of Cyrene&lt;/strong&gt;. It does the job of finding all the prime numbers within a given upper limit. This ancient algorithm is efficient and smart till the upper limit is a few billions. So we'll discuss the process and JavaScript code for the same, below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works?
&lt;/h2&gt;

&lt;p&gt;The algorithm starts with generating a list of all numbers starting from &lt;em&gt;2 to n&lt;/em&gt; (where &lt;strong&gt;n&lt;/strong&gt; is the upper limit), with the assumption of all the numbers in the list are prime. It starts from 2 and removes all the multiples of 2 in the list by traversing the list in the interval of 2.&lt;/p&gt;

&lt;p&gt;So, now we consider &lt;strong&gt;n&lt;/strong&gt; as 10&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sample_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Starting from 2, it removes the multiples of 2 by traversing the above list in a step count of 2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: '*' below means removed from list.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sample_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After removing all the multiples of 2, we move to the next non-removed number (that is 3), now from 3, we traverse the list with the step count of 3 and remove its multiples.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sample_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We then proceed to the next non-removed number, which is 5. But here's the thing, the multiples of 5 are already removed from the list. We just make sure when to end this cycle of traversal and removal by calculating the square of 5, that is 5*5 = 25, which is obviously greater than &lt;strong&gt;n&lt;/strong&gt; that is 10. So we stop the process and get the remaining elements, which are prime.&lt;/p&gt;

&lt;p&gt;Here's the final list we get,&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sample_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Hurray!, we've done with the theory part, let's get our hands dirty with some JS to actually code it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5A2YaTVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2247gqevr4odteacp7gz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5A2YaTVe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2247gqevr4odteacp7gz.png" alt="Hurray"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#execution-in-js"&gt;
  &lt;/a&gt;
  Execution in JS 💻
&lt;/h2&gt;

&lt;p&gt;Let's start by creating an empty array called &lt;code&gt;Boolarray&lt;/code&gt;, why naming 'Bool', because we are going for a Boolean array. We also initialize the value of &lt;strong&gt;n&lt;/strong&gt; as 20.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Boolarray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Remember, we first made an assumption that all the numbers in the list (here array) are prime. So we use &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;is prime&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; for &lt;code&gt;not a prime&lt;/code&gt;, with this in mind we first fill the empty array with boolean values of all &lt;code&gt;True&lt;/code&gt; (based on our assumption). We use a &lt;code&gt;for&lt;/code&gt; loop with iterator &lt;code&gt;i&lt;/code&gt; to iterate from 1 to n and fill the array with &lt;code&gt;True&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Boolarray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;Boolarray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, we have an array of length 20 with &lt;code&gt;true&lt;/code&gt; on all indexes. We now follow the procedure of &lt;strong&gt;Sieve of Eratosthenes&lt;/strong&gt; by starting the &lt;code&gt;for&lt;/code&gt; with iterator &lt;code&gt;j&lt;/code&gt; from &lt;em&gt;2 to j*j&amp;lt;=n&lt;/em&gt; (j*j&amp;lt;=n checks when to end the looping). If the current element in the array is &lt;code&gt;true&lt;/code&gt;, we then loop over its multiples with iterator &lt;code&gt;k&lt;/code&gt;and a step count, (according to the current element) and mark them &lt;code&gt;false&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Boolarray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;Boolarray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Boolarray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;Boolarray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After this execution, we are left with a Boolean array, which contains &lt;code&gt;true&lt;/code&gt; in places of prime (remember &lt;code&gt;true&lt;/code&gt; → is prime) and &lt;code&gt;false&lt;/code&gt; in places of non-prime numbers in the array.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#now-its-all-logging-it-onto-the-console"&gt;
  &lt;/a&gt;
  Now it's all logging it onto the console 🎉
&lt;/h3&gt;

&lt;p&gt;We use another &lt;code&gt;for&lt;/code&gt; loop to iterate on &lt;code&gt;Boolarray&lt;/code&gt; with iterator &lt;code&gt;num&lt;/code&gt;, starting from &lt;em&gt;2 to num&amp;lt;=n&lt;/em&gt;. We console log only the &lt;code&gt;num&lt;/code&gt;'s which contains &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;Boolarray&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Boolarray&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So, we end with this final code,&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;You can also use the JSFiddle, to change the hard-coded input &lt;code&gt;n&lt;/code&gt; to your wish.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#jsfiddle-link"&gt;
  &lt;/a&gt;
  &lt;a href="https://jsfiddle.net/Vishwa_R/t20acbsj/"&gt;JSFiddle link&lt;/a&gt;
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#attributions"&gt;
  &lt;/a&gt;
  Attributions:
&lt;/h3&gt;

&lt;p&gt;Cover-image : Photo by &lt;a href="https://unsplash.com/@jaanam9?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jaanam Haleem&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/mesh?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading ✨
&lt;/h3&gt;

&lt;p&gt;Feel free to correct and give feedbacks. Like it?, then 💖 it.&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>todayilearned</category>
      <category>programming</category>
      <category>javascript</category>
    </item>
    <item>
      <title>ES6 is the Node way to go</title>
      <author>Mrinalini Sugosh (Mrina)</author>
      <pubDate>Wed, 21 Jul 2021 18:36:40 +0000</pubDate>
      <link>https://dev.to/mrinasugosh/es6-is-the-node-way-to-go-3715</link>
      <guid>https://dev.to/mrinasugosh/es6-is-the-node-way-to-go-3715</guid>
      <description>&lt;p&gt;How many of us still use the old ES syntax in our NodeJS apps?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ES what?&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App listening on port 3000!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I bet most of us do, and unfortunately I am equally guilty of this! The reason we continue to use this syntax with node is because most templates and sample codes are based on this. But since the release of &lt;a href="https://nodejs.org/docs/latest-v14.x/api/esm.html#esm_modules_ecmascript_modules"&gt;Node 14.x&lt;/a&gt;, ES modules is officially supported and stable. But one shouldn't migrate just because its the thing to do. Migrations often involved weighing the pros and cons. After a little research and experimentation, I have concluded that there are actually three big advantages to using ES6's &lt;code&gt;import&lt;/code&gt; over &lt;code&gt;require&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;import&lt;/code&gt; helps in selectively loading the pieces of code which are required &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;import&lt;/code&gt; also helps in saving memory loaded onto the app&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;require()&lt;/code&gt;'s loading is synchronous while &lt;code&gt;import&lt;/code&gt;'s loading can be asynchronous; this provides large apps with a performance edge.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the natural question is what would it take to use an ES6 syntax in your node project?&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setup-packagejson"&gt;
  &lt;/a&gt;
  Setup package.json
&lt;/h3&gt;

&lt;p&gt;One thing to note, Node.js doesn’t support ES6 import directly. If we try to use the keyword &lt;code&gt;import&lt;/code&gt; for importing modules in Node.js, it will undoubtedly throw an error. For example, if we try to import express module, Node.js will error as follows:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCXtwPGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7t48opxc0o6z8m5yp2qf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZCXtwPGV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7t48opxc0o6z8m5yp2qf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to enable Node support for ES modules we need to tweak the package.json file. In the &lt;code&gt;package.json&lt;/code&gt; file add &lt;code&gt;"type": "module"&lt;/code&gt; to the root of the file as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//package.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"module"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"node index.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"keywords"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ISC"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"express"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"~4.16.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run the following command to update changes to package.json&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#update-your-apps-code-to-es6-syntax"&gt;
  &lt;/a&gt;
  Update your app's code to ES6 syntax
&lt;/h3&gt;

&lt;p&gt;Once we have updated our &lt;code&gt;package&lt;/code&gt; file we have to make the relevant changes to our app's code as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ES6 is the Node way to go&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`App listening on port 3000!`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run your app and it should work with the updated ES syntax!&lt;/p&gt;

&lt;p&gt;I recently update my demo app &lt;a href="https://github.com/mrinasugosh/random-cat-facts-nodejs"&gt;Random Cat Facts&lt;/a&gt; to use the new syntax and would recommend checking out the &lt;a href="https://github.com/mrinasugosh/random-cat-facts-nodejs/commit/7ac49087cdbd6428176588ef9e55dc677ee59ec9"&gt;update ES6 commit diff&lt;/a&gt; for a real world example of this migration.&lt;/p&gt;

&lt;p&gt;Thank you for following along and be sure to look out for my next post!&lt;/p&gt;

&lt;p&gt;==== Follow me on Social Media(&lt;code&gt;@mrinasugosh&lt;/code&gt;) ====&lt;br&gt;
Dev.to: &lt;a class="mentioned-user" href="https://dev.to/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;
 &lt;br&gt;
Github: &lt;a href="https://github.com/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/mrinasugosh"&gt;@mrinasugosh&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/mrinasugosh/"&gt;@mrinasugosh&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>codequality</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Build your own Operating System #2_implementing_C</title>
      <author>Sadisha Nimsara</author>
      <pubDate>Wed, 21 Jul 2021 18:04:38 +0000</pubDate>
      <link>https://dev.to/nsadisha/build-your-own-operating-system-2implementingc-5aa9</link>
      <guid>https://dev.to/nsadisha/build-your-own-operating-system-2implementingc-5aa9</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NbKkg1c5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqrjqcxdty6gpvqhrtrf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NbKkg1c5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqrjqcxdty6gpvqhrtrf.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;a href="https://dev.to/nsadisha/build-your-own-operating-system-1setupbooting-171-temp-slug-9396464"&gt;previous article&lt;/a&gt;, we guided you to setup the booting part of our operating system. In this article, we are going to implement C language to our project instead of Assembly language. Assembly is a very good programming for interacting with CPU and other hardware resources. But, C is much more human-friendly language when compared with Assembly language. So, we decided to use C as much as possible to make the development process easier and assembly language will be used only where it make sense.&lt;/p&gt;

&lt;p&gt;So, let’s get started!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-a-stack"&gt;
  &lt;/a&gt;
  Setting up a stack
&lt;/h3&gt;

&lt;p&gt;Since all non-trivial(not lightweight) C programs use a stack, and setting up a stack is not harder than to make the &lt;code&gt;esp&lt;/code&gt; register point to the end of an area of free memory. So far, in this development process, the only things in memory are GRUB, BIOS, the OS kernel, and some memory mapped I/Os. This is not a good thing to do; because, we don’t know how much memory is available or if the &lt;code&gt;esp&lt;/code&gt; pointed memory area is used by something else.&lt;/p&gt;

&lt;p&gt;Reserving a piece of uninitialized memory in the &lt;code&gt;bss&lt;/code&gt; section in the ELF file of the kernel will be a solution. And also, this will reduce the OS executable size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;KERNEL_STACK_SIZE equ 4096 ; size of stack in bytes

    section .bss
    align 4 ; align at 4 bytes
    kernel_stack: ; label points to beginning of memory
        resb KERNEL_STACK_SIZE ; reserve stack for the kernel
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Add this section to &lt;code&gt;loader.s&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;And then, we need to setup the stack pointer by pointing &lt;code&gt;esp&lt;/code&gt; to the end of the &lt;code&gt;kernel\_stack&lt;/code&gt; memory. In order to do that, you need to add the following statement inside the &lt;code&gt;loader:&lt;/code&gt; block you your &lt;code&gt;loader.s&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mov esp, kernel_stack + KERNEL_STACK_SIZE ; point esp to the start of the
                                                ; stack (end of memory area)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After all, loader.s file will look like this:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#calling-c-code-from-the-assembly"&gt;
  &lt;/a&gt;
  Calling C code from the Assembly
&lt;/h3&gt;

&lt;p&gt;Since we are using C language, we need to call the C code from the Assembly code. There are many different ways to do that. But in here, we will use &lt;a href="https://en.wikipedia.org/wiki/X86_calling_conventions#cdecl"&gt;cdecl&lt;/a&gt; calling convention. According to this convention, the arguments of the function should be pushed on the stack in a right-to-left order, that is, you push the rightmost argument first. And, the return value of the function is placed in the &lt;code&gt;eax&lt;/code&gt; register.&lt;/p&gt;

&lt;p&gt;For example, to call the following function in Assembly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* The C function */&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;sum_of_three&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arg3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;arg3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;You have to call it like this.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;; The assembly code
external sum_of_three ; the function sum_of_three is defined elsewhere

    push dword 3 ; arg3
    push dword 2 ; arg2
    push dword 1 ; arg1
    call sum_of_three ; call the function, result will be in eax
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In your project directory, create an empty file called &lt;code&gt;kmain.c&lt;/code&gt;. You can do it with &lt;code&gt;touch kmain.c&lt;/code&gt; command. You can keep this file empty for now.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#compiling-the-c-code"&gt;
  &lt;/a&gt;
  Compiling the C code
&lt;/h3&gt;

&lt;p&gt;The next step will be this. For normal compilations, we can use &lt;code&gt;gcc fileName.c -o objectName&lt;/code&gt;. But, in this case, we are compiling them for an operating system. So, we have to use a lot of flags as below.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-m32 -nostdlib -nostdinc -fno-builtin -fno-stack-protector -nostartfiles -nodefaultlibs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And, we recommend you to turn on all warnings and treat warnings as errors by adding these flaags:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;-Wall -Wextra -Werror
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#build-tools"&gt;
  &lt;/a&gt;
  Build tools
&lt;/h3&gt;

&lt;p&gt;This is the last step for this article. In this step, we are going to build the OS. Previously, we used a lot of commands to compile each and every file separately, build the ISO image, and run the OS in &lt;code&gt;bochs&lt;/code&gt; emulator. But, we can do it in an easier way. In order to do that, you have to create a separate file to execute those commands. Execute &lt;code&gt;touch Makefile&lt;/code&gt; to create the file.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;Save this file in &lt;code&gt;Makefile&lt;/code&gt;. Note that you have to do all the indentations with tabs, not with spaces.&lt;/p&gt;

&lt;p&gt;After all of these steps, your file structure should look like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    .
    |-- bochsrc.txt
    |-- iso
    | |-- boot
    | |-- grub
    | |-- menu.lst
    | |-- stage2_eltorito
    |-- kmain.c
    |-- loader.s
    |-- Makefile
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you should be able to run the OS in the &lt;code&gt;bochs&lt;/code&gt; emulator by executing the simple command &lt;code&gt;make run&lt;/code&gt;. This will compile the kernel and boot it up. Then check the &lt;code&gt;bochslog.txt&lt;/code&gt; to find &lt;code&gt;RAX=00000000CAFEBABE&lt;/code&gt; or &lt;code&gt;EAX=CAFEBABE&lt;/code&gt; to make sure that your OS has successfully booted.&lt;/p&gt;

&lt;p&gt;You can download a completed code that I have created for booting my OS from: &lt;a href="https://github.com/nsadisha/lemonOS/tree/implement_with_c"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you have successfully implemented C to OS and hope to catch you in the next article.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Regex 101</title>
      <author>Shreyas Pahune</author>
      <pubDate>Wed, 21 Jul 2021 18:01:56 +0000</pubDate>
      <link>https://dev.to/shreyazz/regex-101-2m7m</link>
      <guid>https://dev.to/shreyazz/regex-101-2m7m</guid>
      <description>&lt;p&gt;Hey readers 👋🏻, in this blog we are going to talk about &lt;code&gt;Regular Expressions&lt;/code&gt; or we can also call it &lt;code&gt;REGEX&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;&lt;code&gt;REGEX&lt;/code&gt; is sequence of characters which are in a certain patter, and these patterns help us &lt;code&gt;find&lt;/code&gt; or &lt;code&gt;find and replace&lt;/code&gt; or &lt;code&gt;validate&lt;/code&gt; things like  &lt;code&gt;email, passwords and usernames&lt;/code&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-learning-%E2%80%8D%F0%9F%8F%8D"&gt;
  &lt;/a&gt;
  Let's start learning 🐱‍🏍:
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basics-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Basics :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The most easy way to explain &lt;code&gt;regex&lt;/code&gt; with an example is if:&lt;/p&gt;

&lt;p&gt;we want to search the word &lt;code&gt;JavaScript&lt;/code&gt; in a string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xi39cAGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm1pbxe8mptm9v1uj2z5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xi39cAGT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tm1pbxe8mptm9v1uj2z5.png" alt="first"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now this example is very basic but believe me &lt;code&gt;REGEX&lt;/code&gt; has lots and lots of use-cases.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-possible-characters-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Multiple Possible Characters :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Let's see an example where you want to see if the string contains many possibilities for example if you want to search for &lt;code&gt;dog&lt;/code&gt; or &lt;code&gt;cat&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;We can do this by using  &lt;code&gt;|&lt;/code&gt; the &lt;code&gt;OR&lt;/code&gt; sign.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3K-mzszf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdqipdsne87yr860ejim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3K-mzszf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdqipdsne87yr860ejim.png" alt="second"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here if the &lt;code&gt;petString&lt;/code&gt; would contain &lt;code&gt;Shreyas loves JavaScript&lt;/code&gt; then the output would have been &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To be clear, the REGEX patterns are case sensitive, so if a string would contain &lt;code&gt;shreyas&lt;/code&gt; and I search for &lt;code&gt;ShreyaS&lt;/code&gt; then the output would be &lt;code&gt;false&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case-sensitiveness-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Case Sensitiveness :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;What should we do when we are not sure about the case... No worries! We can make our REGEX Pattern ignore the case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PrXu2hQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c93agu0yjurjyxupkafn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PrXu2hQ0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c93agu0yjurjyxupkafn.png" alt="three"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see we have used &lt;code&gt;i&lt;/code&gt; in &lt;code&gt;regex1&lt;/code&gt;, and there are many such flags which gives us a lot of control over the pattern.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;i&lt;/code&gt; stands for &lt;code&gt;irrespective of the case&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here we are using &lt;code&gt;.test()&lt;/code&gt; method, which is an inbuilt method in JavaScript, which returns true or false according to the pattern entered.&lt;/p&gt;

&lt;p&gt;The Syntax is &lt;code&gt;pattern.test(String-which-has-to-be-tested)&lt;/code&gt; . &lt;br&gt;
 &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#global-searching-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Global Searching :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;.test()&lt;/code&gt; has a draw back, which is that it only returns true or false, and if true it does not tell us how many times the pattern was matched, so to back this drawback, JS has another inbuilt method called as &lt;code&gt;.match()&lt;/code&gt; which let's us know how many times the pattern is matched in the string.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.match()&lt;/code&gt; return an array of results which have successfully matched the pattern, and the array's length is the time the pattern was recognized.&lt;/p&gt;

&lt;p&gt;Let me show an example 👇🏻:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_-5lzlGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j1ti5rxlxxjh458ylaj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_-5lzlGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j1ti5rxlxxjh458ylaj.png" alt="four"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see the syntax of &lt;code&gt;.match()&lt;/code&gt; is a little bit different when compared to &lt;code&gt;.test()&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;&lt;code&gt;.match()&lt;/code&gt; 's syntax is :  &lt;code&gt;string.match(regex-pattern);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Also you can see that I have used another flag, which is &lt;code&gt;g&lt;/code&gt; and it stands for &lt;code&gt;global&lt;/code&gt;, which helps us find the perfect match globally in the string.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#find-group-of-letters-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Find Group of Letters :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We can group many letters together to find them inside a string. REGEX gives us flexibility with &lt;code&gt;Character Classes&lt;/code&gt;, these allow us to define a group of characters and they have to be enclosed in &lt;code&gt;[  ]&lt;/code&gt; (Square Brackets) .&lt;/p&gt;

&lt;p&gt;It will be more clear when you see an example.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;We have to find every vowel inside a string.&lt;/code&gt; 👇🏻&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cDwp7w5j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rxcqgdgavjuu5cgqjr1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cDwp7w5j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4rxcqgdgavjuu5cgqjr1.png" alt="five"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The pattern has 2 flags, which are non case sensitive and to check globally in the string. &lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;[aeiou]&lt;/code&gt; vowels are grouped together and are individually searched in the string.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#match-anything-using-wildcard-period-dot-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Match anything using Wildcard  period / dot :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Some times we just have to search for words which end with some certain letters or which start from some certain letters. To do so, we have wildcard period which is basically a &lt;code&gt;.&lt;/code&gt; period/dot. &lt;/p&gt;

&lt;p&gt;If we have to match words which end with the letters &lt;code&gt;un&lt;/code&gt; . For example &lt;code&gt;fun&lt;/code&gt; or &lt;code&gt;run&lt;/code&gt; or &lt;code&gt;sun&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;For that we have 👇🏻&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x3PrivZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfb5az0vfcc9u2z1ygkk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x3PrivZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tfb5az0vfcc9u2z1ygkk.png" alt="six"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pattern will check for any word ending with un and it will do it irrespective of the case(&lt;code&gt;i&lt;/code&gt; flag) and would search in the whole string (&lt;code&gt;g&lt;/code&gt; flag).&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#range-of-characters-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Range of Characters :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We can also provide a range of characters to check from.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hfj8hYEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cuap54wk9u9bf1jasg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hfj8hYEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7cuap54wk9u9bf1jasg9.png" alt="seven"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For Example: If you are sure that there are possibilities that the word may start with any character but the ending will be with the letters &lt;code&gt;at&lt;/code&gt; , then we can give a range of characters which will check the string and if matched then return an array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;If no value is found, NULL would be returned!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#match-numbers-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Match Numbers :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;What if, you wanna match numbers?? Don't worry REGEX has got you covered!&lt;/p&gt;

&lt;p&gt;Just like characters we can write &lt;code&gt;/[0-9]/g&lt;/code&gt;, that's it, all the numbers are covered.&lt;/p&gt;

&lt;p&gt;But as we all know, us developers...we are lazy 💤! So why to write &lt;code&gt;/[0-9]/&lt;/code&gt; when you can also write &lt;code&gt;/[\d]/g&lt;/code&gt; and this &lt;code&gt;d&lt;/code&gt; stands for digits!&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#match-number-and-characters-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Match Number and Characters :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To match number and characters, we can write 👇🏻&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RchBgMUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69f62zyfg14i9chdwnyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RchBgMUo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/69f62zyfg14i9chdwnyy.png" alt="eight"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But isn't this REGEX Pattern too long?? We have a shorthand for this, which is &lt;code&gt;/\w/g&lt;/code&gt; and instead of the whole REGEX pattern you can just write the shorthand.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-for-minimum-and-maximum-characters-"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Check for Minimum and Maximum Characters   :&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We  can set a min and a max amount of characters.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--toP-SoYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/za8lmn75jgca1evfa5qx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--toP-SoYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/za8lmn75jgca1evfa5qx.png" alt="nine"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This REGEX pattern allows only those strings which have equal or greater length then 5 and are under or equal to 10.&lt;/p&gt;

&lt;p&gt;The syntax for that is &lt;code&gt;/[regex here]{min-number, max-number}/g&lt;/code&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#challenge-"&gt;
  &lt;/a&gt;
  Challenge 🎯:
&lt;/h2&gt;

&lt;p&gt;I wanna give a quick challenge to all the readers, why don't you make a REGEX which verifies usernames, and the conditions are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Username should have numbers.&lt;/li&gt;
&lt;li&gt;Username can have an underscore.&lt;/li&gt;
&lt;li&gt;Username should not have any special characters. &lt;/li&gt;
&lt;li&gt;Username should have minimum 5 characters and maximum 15 characters. &lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Thank you so much for reading the whole blog 🎉, if you liked it do share it with your friends and implement REGEX in your upcoming projects! It has saved me from writing lots of line of code and a lot of time too, I am sure it will be very effective for you too!&lt;/p&gt;

&lt;p&gt;Till the next blog... Goodbye 👋🏻 !!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Digger.dev: A new kind of PaaS</title>
      <author>Igor Zalutski</author>
      <pubDate>Wed, 21 Jul 2021 17:57:36 +0000</pubDate>
      <link>https://dev.to/zij/digger-dev-a-new-kind-of-paas-2dk</link>
      <guid>https://dev.to/zij/digger-dev-a-new-kind-of-paas-2dk</guid>
      <description>&lt;p&gt;&lt;a href="https://news.ycombinator.com/show"&gt;We've just launched on HackerNews&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Say you want to deploy a Node app. Or a Python app. Or a Rails app. And maybe one or two React or Vue frontends as well. Oh and a database too.&lt;/p&gt;

&lt;p&gt;You have 2 options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Traditional PaaS like Heroku. Going to be quick and easy. But also expensive and you can't build much beyond the very basics.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS or GCP or Azure. That's going to be hard and slow, unless you have DevOps expertise. But with over 200 services you can build pretty much anything.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Why isn't there an easy way to start on AWS without spending days figuring it out? We thought so as well, and built Digger.dev&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#digger-makes-aws-simple"&gt;
  &lt;/a&gt;
  Digger makes AWS simple
&lt;/h2&gt;

&lt;p&gt;It automatically generates infrastructure for your code in your AWS account. So you can build on AWS without having to deal with its complexity. See How it works&lt;/p&gt;

&lt;p&gt;You can launch in minutes – no need to build from scratch, or even think of infrastructure at all&lt;/p&gt;

&lt;p&gt;✅ Easy to use Web UI + powerful CLI&lt;br&gt;
✅ Deploy webapps, serverless functions and databases: just connect GitHub repositories&lt;br&gt;
✅ Multiple environments: replicate your entire stack in a few clicks. Dev / staging / production; short-lived for testing; per-customer&lt;br&gt;
✅ Zero-configuration CI with GitOps: pick a branch for each environment and your services will be deployed on every git push&lt;br&gt;
✅ Logs, environment variables, secrets, domains: never touch AWS again!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-paas-that-generates-terraform"&gt;
  &lt;/a&gt;
  A PaaS that generates Terraform
&lt;/h2&gt;

&lt;p&gt;... So that you keep the full power of AWS&lt;/p&gt;

&lt;p&gt;Traditional platforms-as-a-service (PaaS) like Heroku or Vercel run your code on their servers. Digger takes a different approach: it generates infrastructure-as-code (Terraform) that manages your AWS account. See Digger vs Ohter&lt;/p&gt;

&lt;p&gt;This removes the main limitation of traditional PaaS. With Digger you can have great modern developer experience and get a future-proof stack at the same time. Terraform is industry standard for all things DevOps; with Digger you can customise every bit. You can even use your own bespoke templates with Digger. So unlike traditional PaaS, you never outgrow Digger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-think"&gt;
  &lt;/a&gt;
  What do you think?
&lt;/h2&gt;

&lt;p&gt;We've just launched and super hungry for feedback. &lt;a href="https://digger.dev"&gt;Try it out&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>aws</category>
      <category>devops</category>
    </item>
    <item>
      <title>tmux select-layout</title>
      <author>Waylon Walker</author>
      <pubDate>Wed, 21 Jul 2021 17:48:24 +0000</pubDate>
      <link>https://dev.to/waylonwalker/tmux-select-layout-2m3m</link>
      <guid>https://dev.to/waylonwalker/tmux-select-layout-2m3m</guid>
      <description>&lt;p&gt;When you get many splits going in tmux sometimes its time for a new layout.&lt;br&gt;
There are four layout strategies that I use, main-vertical, main-horizontal,&lt;br&gt;
even-vertical, even-horizontal. Almost always I am useing the main ones with&lt;br&gt;
mod plus a or mod plus shift a keybindings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Select Layouts&lt;/span&gt;
&lt;span class="c"&gt;#―――――――――――――――――&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-a &lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="nt"&gt;-layout&lt;/span&gt; main-vertical
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-A &lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="nt"&gt;-layout&lt;/span&gt; main-horizontal 
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-E &lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="nt"&gt;-layout&lt;/span&gt; even-vertical
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; M-V &lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="nt"&gt;-layout&lt;/span&gt; even-horizontal
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;p&gt;Be sure to check out the full youtube playlist and subscribe if you like it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6Bkr"&gt;https://www.youtube.com/playlist?list=PLTRNG6WIHETB4reAxbWza3CZeP9KL6Bkr&lt;/a&gt;&lt;/p&gt;




&lt;div class="ltag__link"&gt;
  &lt;a href="/waylonwalker" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Ukb2PhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Izxe95PY--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/271838/95e313ca-39fc-4ee6-bf57-ad52b4dcf0d2.png" alt="waylonwalker"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/waylonwalker/how-i-navigate-tmux-in-2021-2ina" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How I navigate tmux in 2021&lt;/h2&gt;
      &lt;h3&gt;Waylon Walker ・ May 12 ・ 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bash&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#productivity&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Also check out this long form post for more about how I use tmux.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>cli</category>
      <category>linux</category>
      <category>tmux</category>
    </item>
    <item>
      <title>I created 8 free dashboard templates built with Tailwind for React, Next, Vue and Nuxt.</title>
      <author>enoch ndika</author>
      <pubDate>Wed, 21 Jul 2021 17:48:17 +0000</pubDate>
      <link>https://dev.to/enochndika/i-created-8-free-dashboard-templates-built-with-tailwind-for-react-next-vue-and-nuxt-3d69</link>
      <guid>https://dev.to/enochndika/i-created-8-free-dashboard-templates-built-with-tailwind-for-react-next-vue-and-nuxt-3d69</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xHIvOQBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajn6mcas324qyhlszyrc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xHIvOQBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ajn6mcas324qyhlszyrc.jpg" alt="Salvia-kit dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;By creating several dashboards for my professional use, I ended up with several dashboard templates. So I decided to make it open source because it would motivate me to create even more dashboards.&lt;/p&gt;

&lt;p&gt;At the beginning I wanted to make them only for React but with time I was motivated to make them for &lt;strong&gt;Next.js&lt;/strong&gt;, &lt;strong&gt;Vue.js&lt;/strong&gt; and &lt;strong&gt;Nuxt&lt;/strong&gt; to reach more developers. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#presentation"&gt;
  &lt;/a&gt;
  Presentation
&lt;/h2&gt;

&lt;p&gt;I made a total of 8 dashboards and each dashboard has 4 templates.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;React&lt;/strong&gt; template&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Next.js&lt;/strong&gt; template&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Vue&lt;/strong&gt; template&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nuxt.js&lt;/strong&gt; template&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h2&gt;

&lt;p&gt;i took advantage of Tailwind's flexibility to create free premium dashboard templates.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Support of the active route (styled by default).&lt;/li&gt;
&lt;li&gt;Fully customizable and without external dependencies.&lt;/li&gt;
&lt;li&gt;No vendor lock-in, you can export it and integrate it in your project.&lt;/li&gt;
&lt;li&gt;Sidenav aligned left or right according to your preferences (on mobile).&lt;/li&gt;
&lt;li&gt;A detailled documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#no-vendor-lockin"&gt;
  &lt;/a&gt;
  No vendor lock-in
&lt;/h2&gt;

&lt;p&gt;Salvia-kit is created to solve a problem I often encountered when using dashboards owned by third party developers or companies. that is vendor lock-in.&lt;/p&gt;

&lt;p&gt;These dashboards often contained many configurations with several scripts, which still did not allow to export them and integrate them easily into an existing project. Therefore, it was always necessary to use the repository provided by the owner of the dashboard.&lt;/p&gt;

&lt;p&gt;This is what motivated me to create dashboards that can be easily integrated into existing projects with simple, readable code and documentation designed for developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h2&gt;

&lt;p&gt;As English is not my native language, I can make some grammatical mistakes while writing all the 33 repositories. You can fix that by contributing to improve content.&lt;/p&gt;

&lt;p&gt;If You'd like to add a new dashboard, please check out the &lt;strong&gt;&lt;a href="https://github.com/salvia-kit/salvia-kit-website/blob/main/contributing.md"&gt;Contribution Guide&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#acknowledgements"&gt;
  &lt;/a&gt;
  Acknowledgements
&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href="https://vercel.com/?utm_source=salvia-kit&amp;amp;utm_campaign=oss"&gt;&lt;strong&gt;Vercel&lt;/strong&gt;&lt;/a&gt; for sponsoring this project by allowing it to be deployed for free for the entire Salvia-kit Team.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tailwindcss</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
