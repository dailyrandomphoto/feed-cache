<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My web performance journey with Nuxt, Storyblok &amp; Netlify</title>
      <author>Alba Silvente üíÉüèº</author>
      <pubDate>Sat, 17 Apr 2021 19:51:23 +0000</pubDate>
      <link>https://dev.to/dawntraoz/my-web-performance-journey-with-nuxt-storyblok-netlify-2bl4</link>
      <guid>https://dev.to/dawntraoz/my-web-performance-journey-with-nuxt-storyblok-netlify-2bl4</guid>
      <description>&lt;p&gt;In this post I will show you the main web performance concerns I had while building my website and how a Jamstack architecture will help us solve them.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--nFJfSxs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1350915878527889408/601cRU5J_normal.jpg" alt="Alba Silvente üíÉüèº profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Alba Silvente üíÉüèº
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dawntraoz"&gt;@dawntraoz&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Yesterday afternoon I've finally finished the post I told you about!&lt;br&gt;&lt;br&gt;In it I share my journey through web performance using &lt;a href="https://twitter.com/nuxt_js"&gt;@nuxt_js&lt;/a&gt;, &lt;a href="https://twitter.com/storyblok"&gt;@storyblok&lt;/a&gt; and &lt;a href="https://twitter.com/Netlify"&gt;@Netlify&lt;/a&gt; as my faithful allies in this journey üöÄ&lt;br&gt;&lt;br&gt;I hope it helps you as much as it helped me!&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/BFq5JmWULu"&gt;dawntraoz.com/blog/my-web-pe‚Ä¶&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:32 PM - 17 Apr 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1383503718914555909" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1383503718914555909" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1383503718914555909" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;To build my website I have used technologies such as: &lt;a href="https://nuxtjs.org/"&gt;Nuxt&lt;/a&gt;, my static site generator, &lt;a href="https://www.storyblok.com/"&gt;Storyblok&lt;/a&gt;, as my headlessCMS with an image service provider, and &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt; to host my full static site.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm using Lighthouse as the tool that will show us all the opportunities we have to improve or fix the performance of our project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#resources-treatment"&gt;
  &lt;/a&gt;
  Resources treatment
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-preload-key-requests"&gt;
  &lt;/a&gt;
  1. Preload key requests
&lt;/h3&gt;

&lt;p&gt;We will always consider using &lt;strong&gt;link rel=preload&lt;/strong&gt; to prioritize fetching resources that are currently requested later in page load.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/uses-rel-preload/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;uses rel preload&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí Preload critical assets to improve loading speed.&lt;/p&gt;

&lt;p&gt;Declare preload links in your HTML to instruct the browser to download key resources as soon as possible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preload"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"critical.css"&lt;/span&gt; &lt;span class="na"&gt;as=&lt;/span&gt;&lt;span class="s"&gt;"style"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preload"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"critical.js"&lt;/span&gt; &lt;span class="na"&gt;as=&lt;/span&gt;&lt;span class="s"&gt;"script"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí As I use &lt;strong&gt;Nuxt&lt;/strong&gt; as my static site generator, it is already leveraging my performance with this technique, check &lt;a href="https://nuxtjs.org/blog/going-full-static/#crazy-fast-static-applications"&gt;crazy fast static applications&lt;/a&gt; to learn more about how it's doing it for us.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-preconnect-to-required-origins"&gt;
  &lt;/a&gt;
  2. Preconnect to required origins
&lt;/h3&gt;

&lt;p&gt;Consider adding &lt;strong&gt;preconnect&lt;/strong&gt; or &lt;strong&gt;dns-prefetch&lt;/strong&gt; resource hints to establish early connections to important third-party origins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/uses-rel-preconnect/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;uses rel preconnect&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí Informing the browser of your intention is as simple as adding a link &lt;strong&gt;preconnect&lt;/strong&gt; tag to your page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This lets the browser know that the page intends to connect to¬†&lt;em&gt;example com&lt;/em&gt;¬†and retrieve content from there.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In general, it's better to use¬†&lt;em&gt;link rel="preload"&lt;/em&gt;, as it's a more comprehensive performance tweak, but we can keep¬†&lt;em&gt;link rel="preconnect"&lt;/em&gt;¬†for the edge cases like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/resource-prioritization#use-case_knowing_where_from_but_not_what_youre_fetching"&gt;Use-case: Knowing Where From, but not What You're Fetching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/resource-prioritization#use-case_knowing_where_from_but_not_what_youre_fetching"&gt;Use-case: Streaming Media&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Link &lt;strong&gt;dns-prefetch&lt;/strong&gt;¬†is another¬†type related to connections. This handles the DNS lookup only, but it's got wider browser support, so it may serve as a nice fallback. You use it the exact same way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"dns-prefetch"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí A good example of this could be a link to google fonts, in my case, as I have the font files inside my project itself I didn't need to have this into account.&lt;/p&gt;

&lt;p&gt;But Nuxt already took this into account for you and they created a module to improve your font load performance: &lt;a href="https://www.npmjs.com/package/@nuxtjs/google-fonts"&gt;@nuxtjs/google-fonts&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-lazy-load-thirdparty-resources-with-facades"&gt;
  &lt;/a&gt;
  3. Lazy load third-party resources with facades
&lt;/h3&gt;

&lt;p&gt;Some third-party embeds can be lazy loaded. Consider replacing them with a facade until they are required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/third-party-facades/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;third party facades&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí Instead of adding a third-party embed directly to your HTML, &lt;strong&gt;load the page with a static element&lt;/strong&gt; that looks &lt;strong&gt;similar to&lt;/strong&gt; the &lt;strong&gt;embedded third-party&lt;/strong&gt;. The interaction pattern should look:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;On load:&lt;/strong&gt; Add facade to the page (as the cover of a video).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;On mouseover:&lt;/strong&gt; The facade preconnects to third-party resources.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;On click:&lt;/strong&gt; The facade replaces itself with the third-party product.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí For &lt;strong&gt;Youtube videos&lt;/strong&gt; I started using &lt;a href="https://github.com/paulirish/lite-youtube-embed"&gt;lite-youtube-embed&lt;/a&gt; package, following the advice of &lt;a href="https://debbie.codes/"&gt;Debbie O'brien&lt;/a&gt; and &lt;a href="https://web.dev/"&gt;web.dev&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;The difference in the loading time of your page is brutal, not to mention that initially you don't have a lot of iframes lengthening the interaction time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-reduce-the-impact-of-thirdparty-code-minimize-thirdparty-usage"&gt;
  &lt;/a&gt;
  4. Reduce the impact of third-party code / Minimize third-party usage
&lt;/h3&gt;

&lt;p&gt;Third-party code can significantly impact load performance. Limit the number of redundant third-party providers and try to load third-party code after your page has primarily finished loading.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/loading-third-party-javascript/?utm_source=lighthouse&amp;amp;utm_medium=lr#how_do_you_load_third-party_script_efficiently"&gt;loading third party javascript&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí If a third-party script is slowing down your page load, you have several options to improve performance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Load the script using the &lt;strong&gt;async&lt;/strong&gt; or &lt;strong&gt;defer&lt;/strong&gt; attribute to avoid blocking document parsing.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Self-hosting the script&lt;/strong&gt; if the third-party server is slow.&lt;/li&gt;
&lt;li&gt;Consider removing the script if it doesn't add clear value to your site.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developers.google.com/web/fundamentals/performance/resource-prioritization#preconnect"&gt;Resource Hints&lt;/a&gt;¬†like¬†&lt;strong&gt;link rel=preconnect&lt;/strong&gt;¬†or¬†&lt;strong&gt;link rel=dns-prefetch&lt;/strong&gt;¬†to perform a DNS lookup for domains hosting third-party scripts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí I'm using Google Analytics, a third party, but a package called &lt;a href="https://www.npmjs.com/package/vue-gtag"&gt;vue-gtag&lt;/a&gt; helps me to load only with user consent and, once active, it preconnects to googletagmanager and loads analytics asynchronously:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://www.googletagmanager.com"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;async&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://www.google-analytics.com/analytics.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As I'm using the Storyblok image service provider, I preconnected to it, so it can improve the images load time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt; &lt;span class="nx"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preconnect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;//img2.storyblok.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// Nuxt config&lt;/span&gt;
&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preconnect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;//img2.storyblok.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-eliminate-renderblocking-resources"&gt;
  &lt;/a&gt;
  6. Eliminate render-blocking resources
&lt;/h3&gt;

&lt;p&gt;Resources are blocking the first paint of your page. Consider delivering critical JS/CSS inline and deferring all non-critical JS/styles.&lt;/p&gt;

&lt;p&gt;You can reduce the size of your pages by only shipping the code and styles that you need. Click on a URL to inspect that file in the Sources panel. Styles in CSS files and code in JavaScript files are marked in two colors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Green (critical):&lt;/strong&gt;¬†Styles that are required for first paint; code that's critical to the page's core functionality.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Red (non-critical):&lt;/strong&gt;¬†Styles that apply to content not immediately visible; code not being used in page's core functionality.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/render-blocking-resources/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;render blocking resources&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí Let's see in depth how to eliminate scripts or stylesheets render-blocking our page load.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How to eliminate render-blocking scripts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you've identified critical code, move that code from the render-blocking URL to an inline script tag in your HTML page.&lt;/p&gt;

&lt;p&gt;If there's code in a render-blocking URL that's not critical, you can keep it in the URL, and then mark the URL with async or defer attributes.&lt;/p&gt;

&lt;p&gt;Code that isn't being used at all should be removed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How to eliminate render-blocking stylesheets&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Inline critical styles required for the first paint inside a &lt;em&gt;style block&lt;/em&gt; at the head of the HTML page. Then load the rest of the styles asynchronously using the preload link.&lt;/p&gt;

&lt;p&gt;Consider automating the process of extracting and inlining "Above the Fold" CSS using the &lt;a href="https://github.com/addyosmani/critical/blob/master/README.md"&gt;Critical tool&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí In Netlify we have a plugin for critical css called &lt;a href="https://www.npmjs.com/package/netlify-plugin-inline-critical-css"&gt;netlify-plugin-inline-critical-css&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Another cool technique is to split the style into different files, organized by media query. Then add a &lt;strong&gt;media attribute to each stylesheet link&lt;/strong&gt;. When loading a page, the browser only blocks the first paint to retrieve the stylesheets that match the user's device.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#keep-css-js-files-smaller"&gt;
  &lt;/a&gt;
  Keep CSS /JS files smaller
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-minify-css-javascript"&gt;
  &lt;/a&gt;
  1. Minify CSS /JavaScript
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Minification is the process of removing whitespace and any code that is not necessary to create a smaller but perfectly valid code file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Minifying CSS files&lt;/strong&gt; ‚Üí reduce network payload sizes (&lt;a href="https://web.dev/unminified-css/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;read more about minifying CSS&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution CSS&lt;/strong&gt; ‚Üí Minify with tools like webpack &lt;a href="https://web.dev/minify-css/#css-minification-with-webpack"&gt;https://web.dev/minify-css/#css-minification-with-webpack&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minifying JavaScript files&lt;/strong&gt; ‚Üí reduce payload sizes and script parse time (&lt;a href="https://web.dev/unminified-javascript/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;read more about minifying JS&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution JS&lt;/strong&gt; ‚Üí The new uglify-js: &lt;a href="https://github.com/terser/terser"&gt;https://github.com/terser/terser&lt;/a&gt; or continue using &lt;strong&gt;&lt;a href="https://webpack.js.org/guides/production/"&gt;webpack&lt;/a&gt;&lt;/strong&gt;, &lt;strong&gt;Teser&lt;/strong&gt; is already included in the prod.js file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí Nuxt is already using &lt;a href="https://nuxtjs.org/docs/2.x/configuration-glossary/configuration-build#terser"&gt;Terser webpack plugin&lt;/a&gt; in its build configuration, taking care of the minification by itself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-remove-unused-css-javascript"&gt;
  &lt;/a&gt;
  2. Remove unused CSS /JavaScript
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Remove dead rules&lt;/strong&gt; from stylesheets and &lt;strong&gt;defer&lt;/strong&gt; the loading of &lt;strong&gt;CSS&lt;/strong&gt; not used for above-the-fold content to reduce unnecessary bytes consumed by network activity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/unused-css-rules/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;unused css rules&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí Take into account Critical/Non-Critical CSS technique as per &lt;strong&gt;render-blocking stylesheets&lt;/strong&gt; section, but combined with a tool that deletes the CSS not used in your page, as the famous &lt;a href="https://purgecss.com/"&gt;PurgeCSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Remove unused JavaScript&lt;/strong&gt; to reduce bytes consumed by network activity. (&lt;a href="https://web.dev/unused-javascript/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;unused JS&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://bundlers.tooling.report/"&gt;detailed info and tool comparatives&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí Let's see which techniques we can use if our frameworks doesn't do it for us:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#record-code-coverage-to-start-analyzing-the-unused-code-in-specific-files"&gt;
  &lt;/a&gt;
  Record code coverage to start analyzing the unused code in specific files:
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Coverage&lt;/strong&gt;¬†tab in DEV Tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click¬†&lt;strong&gt;Start Instrumenting Coverage And Reload Page&lt;/strong&gt;¬†¬†if you want to see what code is needed to load the page.&lt;/li&gt;
&lt;li&gt;Click¬†&lt;strong&gt;Instrument Coverage&lt;/strong&gt;¬†¬†if you want to see what code is used after interacting with the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#build-tool-for-support-for-removing-unused-code"&gt;
  &lt;/a&gt;
  Build tool for support for removing unused code
&lt;/h4&gt;

&lt;p&gt;Webpack make easier avoid or remove unused code with the following techniques:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bundlers.tooling.report/code-splitting/"&gt;Code Splitting&lt;/a&gt; - Extract common dependencies into &lt;strong&gt;shared bundles&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The process of &lt;strong&gt;breaking up bundled code into multiple smaller&lt;/strong&gt; bundles that can be loaded and executed independently as needed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Nuxt takes care with webpack of code-splitting the application!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bundlers.tooling.report/transformations/dead-code/"&gt;Unused Code Elimination&lt;/a&gt; - &lt;em&gt;Dead Code Elimination&lt;/em&gt; is the &lt;strong&gt;process of removing code&lt;/strong&gt; that is not used by the current application.&lt;/p&gt;

&lt;p&gt;There are a number of tools available with the most popular being &lt;strong&gt;Terser&lt;/strong&gt; and &lt;strong&gt;Closure&lt;/strong&gt; &lt;strong&gt;Compiler&lt;/strong&gt;. Webpack's &lt;strong&gt;Dead Code Elimination&lt;/strong&gt; is implemented by removing unused module exports, then relying on &lt;em&gt;Terser&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://bundlers.tooling.report/transformations/dead-code-dynamic/"&gt;Unused Imported Code&lt;/a&gt; - tricky optimization cases where a &lt;strong&gt;module's exports are used in a way that is difficult&lt;/strong&gt; to statically analyze.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dynamic imports&lt;/strong&gt; are one of these cases. &lt;strong&gt;Webpack&lt;/strong&gt; doesn't understand the special destructuring syntax to elimitate dead code:&lt;br&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;transformImage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./image.utils.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But &lt;strong&gt;it allows to manually list the exports&lt;/strong&gt; that are used &lt;strong&gt;via&lt;/strong&gt; &lt;strong&gt;magic comment&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;transformImage&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* webpackExports: "transformImage" */&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./image.utils.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí Nuxt already does this for me, it's using webpack under the hood. It's splitting my code by pages, so I can forget about this magic webpackChunkName comment that you need to add on every route with dynamic import.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-enable-text-compression"&gt;
  &lt;/a&gt;
  3. Enable text compression
&lt;/h3&gt;

&lt;p&gt;Text-based resources should be served with compression (gzip, deflate or brotli) to minimize total network bytes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/uses-text-compression/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;uses text compression&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí Enable text compression on your server.&lt;/p&gt;

&lt;p&gt;When a browser requests a resource, it will use the¬†&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding"&gt;&lt;em&gt;Accept-Encoding&lt;/em&gt;&lt;/a&gt;¬†HTTP request header to indicate what compression algorithms it supports.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Accept-Encoding: &lt;span class="nb"&gt;gzip&lt;/span&gt;, compress, br
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the browser supports¬†&lt;a href="https://opensource.googleblog.com/2015/09/introducing-brotli-new-compression.html"&gt;Brotli&lt;/a&gt;¬†(&lt;em&gt;br&lt;/em&gt;) you should use Brotli because it can reduce the file size of the resources more than the other compression algorithms.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí My hosting, &lt;strong&gt;Netlify&lt;/strong&gt;, is already using Brotli compression by default.&lt;/p&gt;

&lt;p&gt;Brotli compression has gained widespread browser support and is particularly effective for text-based files such as HTML, JavaScript and CSS assets.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Netlify Edge is already &lt;strong&gt;encoding and caching suitable assets with Brotli&lt;/strong&gt;, and delivering correctly compressed assets &lt;strong&gt;depending&lt;/strong&gt; on the requesting &lt;strong&gt;browser&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Median Brotli / gzip comparisons, according to¬†&lt;a href="https://blogs.akamai.com/2016/02/understanding-brotlis-potential.html"&gt;Akamai‚Äôs testing&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript files compressed with Brotli are¬†&lt;strong&gt;14% smaller&lt;/strong&gt;¬†than gzip.&lt;/li&gt;
&lt;li&gt;HTML files are¬†&lt;strong&gt;21% smaller&lt;/strong&gt;¬†than gzip.&lt;/li&gt;
&lt;li&gt;CSS files are¬†&lt;strong&gt;17% smaller&lt;/strong&gt;¬†than gzip.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-remove-duplicate-modules-in-javascript-bundles"&gt;
  &lt;/a&gt;
  4. Remove duplicate modules in JavaScript bundles
&lt;/h3&gt;

&lt;p&gt;Remove large, duplicate JavaScript modules from bundles to reduce unnecessary bytes consumed by network activity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt; ‚Üí With webpack you have &lt;a href="https://www.npmjs.com/package/webpack-bundle-analyzer"&gt;https://www.npmjs.com/package/webpack-bundle-analyzer&lt;/a&gt; to check JS bundles and start cleaning up your project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí In Nuxt I already have that package, I just need to add a flag &lt;a href="https://nuxtjs.org/docs/2.x/configuration-glossary/configuration-build#analyze"&gt;--analyze&lt;/a&gt; to my build command and voil√†!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reduce-execution-time"&gt;
  &lt;/a&gt;
  Reduce execution time
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-javascript-execution-time"&gt;
  &lt;/a&gt;
  1. JavaScript execution time
&lt;/h3&gt;

&lt;p&gt;Consider reducing the time spent parsing, compiling, and executing JS. You may find delivering smaller JS payloads helps with this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/bootup-time/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;bootup time&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí The combination of code splitting, minification and compression, removal of unused code and caching techniques will greatly improve execution time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí As always Nuxt is one step ahead, in this video you can check the technique they use with your own eyes: &lt;a href="https://www.youtube.com/watch?v=J6airiY8e84"&gt;https://www.youtube.com/watch?v=J6airiY8e84&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-minimizes-mainthread-work"&gt;
  &lt;/a&gt;
  2. Minimizes main-thread work
&lt;/h3&gt;

&lt;p&gt;Consider reducing the time spent parsing, compiling and executing JS. You may find delivering smaller JS payloads helps with this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt; (&lt;a href="https://web.dev/mainthread-work-breakdown/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;mainthread work breakdown&lt;/a&gt;) ‚Üí In the end, it's the compendium of many of the things we've already seen in this article or that we will see later on.&lt;/p&gt;

&lt;p&gt;In summary, the idea is to &lt;strong&gt;optimize both our JS and CSS code&lt;/strong&gt;, minimizing it and removing unused code, as well as the &lt;strong&gt;third-party&lt;/strong&gt; libraries we are using. Always serving the &lt;strong&gt;CSS and JS critical&lt;/strong&gt; to the page being viewed first and &lt;strong&gt;deferring&lt;/strong&gt; the rest.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-user-timing-marks-and-measures-a-cool-tool-not-an-issue"&gt;
  &lt;/a&gt;
  3. User Timing marks and measures (a cool tool, not an issue)
&lt;/h3&gt;

&lt;p&gt;Consider instrumenting your app with the User Timing API to measure your app's real-world performance during key user experiences. Read more about &lt;a href="https://web.dev/user-timings/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;user timings&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-initial-server-response-time-was-short"&gt;
  &lt;/a&gt;
  4. Initial server response time was short
&lt;/h3&gt;

&lt;p&gt;Keep the server response time for the main document short because all other requests depend on it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt; (&lt;a href="https://web.dev/time-to-first-byte/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;time to first byte&lt;/a&gt;) ‚Üí When choosing a hosting you have to take this into account, if it is a static hosting, everything will already be configured correctly and the CDN will have many advantages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí In my case Netlify gives me a response of 33ms. You can check this speed test tool, to see my results and test with your site: &lt;a href="https://testmysite.io/6079b4e77b757f3e6f79af67/dawntraoz.com"&gt;testmysite.io/dawntraoz.com&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-dom-troubles"&gt;
  &lt;/a&gt;
  The DOM troubles
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-avoid-large-layout-shifts"&gt;
  &lt;/a&gt;
  1. Avoid large layout shifts
&lt;/h3&gt;

&lt;p&gt;These DOM elements contribute most to the CLS of the page.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cumulative Layout Shift (CLS) is a Core Web Vitals metric calculated by summing all layout shifts that aren‚Äôt caused by user interaction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí This &lt;a href="https://webvitals.dev/cls"&gt;https://webvitals.dev/cls&lt;/a&gt; site give you detailed information on how your website CLS is performing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-avoids-an-excessive-dom-size"&gt;
  &lt;/a&gt;
  2. Avoids an excessive DOM size
&lt;/h3&gt;

&lt;p&gt;A large DOM will increase memory usage, cause longer style calculations, and produce costly layout reflows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solutions&lt;/strong&gt; &lt;strong&gt;(&lt;/strong&gt;&lt;a href="https://web.dev/dom-size/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;dom size&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí In general, look for ways to create DOM nodes only when needed, and destroy nodes when they're no longer needed.&lt;/p&gt;

&lt;p&gt;We can make use of &lt;a href="https://nuxtjs.org/examples/lazy-loading-components/"&gt;lazy loading components&lt;/a&gt; in Nuxt.&lt;/p&gt;

&lt;p&gt;But also keep your HTML smaller or &lt;strong&gt;load more on scroll&lt;/strong&gt; technique could help.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#images-our-bigger-headache"&gt;
  &lt;/a&gt;
  Images, our bigger headache
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-properly-size-images"&gt;
  &lt;/a&gt;
  1. Properly size images
&lt;/h3&gt;

&lt;p&gt;Serve images that are appropriately-sized to save cellular data and improve load time. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solutions (&lt;/strong&gt;&lt;a href="https://web.dev/uses-responsive-images/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;uses responsive images&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí Let's take a look at the different techniques recommended by Google:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Srcset:&lt;/strong&gt; The main strategy for serving appropriately sized images is called "&lt;a href="https://web.dev/serve-responsive-images/"&gt;responsive images&lt;/a&gt;". With responsive images, you generate multiple versions of each image, and then specify which version to use in your HTML or CSS using media queries, viewport dimensions, and so on.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"flower-large.jpg"&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"flower-small.jpg 480w, flower-large.jpg 1080w"&lt;/span&gt; &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"50vw"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://web.dev/image-cdns/"&gt;&lt;strong&gt;Image CDNs&lt;/strong&gt;&lt;/a&gt;:¬†are another main strategy for serving appropriately sized images. You can think of image CDNs like web service APIs for transforming images.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí I'm using the one available in &lt;strong&gt;Storyblok&lt;/strong&gt;: &lt;a href="https://www.storyblok.com/docs/image-service"&gt;storyblok image service&lt;/a&gt;, always requesting the proper sizes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SVG&lt;/strong&gt;: another strategy is to use vector-based image formats. With a finite amount of code, an SVG image can scale to any size. See¬†&lt;a href="https://developers.google.com/web/fundamentals/design-and-ux/responsive/images#replace_complex_icons_with_svg"&gt;Replace complex icons with SVG&lt;/a&gt;¬†to learn more.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#2-defer-offscreen-images"&gt;
  &lt;/a&gt;
  2. Defer offscreen images
&lt;/h3&gt;

&lt;p&gt;Consider &lt;strong&gt;lazy-loading&lt;/strong&gt; offscreen and hidden images after all critical resources have finished loading to lower time to interactive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/offscreen-images/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;offscreen images&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí Lazy load your images. You can use the &lt;em&gt;loading&lt;/em&gt; property set to lazy as per MDN recommendation: &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading"&gt;Lazy loading&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí In my case I'm using Vue Lazyload to lazy-load my images and background images: &lt;a href="https://github.com/hilongjw/vue-lazyload#demo"&gt;https://github.com/hilongjw/vue-lazyload#demo&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-efficiently-encode-images"&gt;
  &lt;/a&gt;
  3. Efficiently encode images
&lt;/h3&gt;

&lt;p&gt;Optimized images load faster and consume less cellular data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/uses-optimized-images/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;uses optimized images&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí This should be fixed if you are using all the different techniques we see in this article. Using your image CDN service or the compression of your image should be enough.&lt;/p&gt;

&lt;p&gt;If you don't use any image CDN, you can use this online tool: &lt;a href="https://squoosh.app/"&gt;https://squoosh.app/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-serve-images-in-nextgen-formats"&gt;
  &lt;/a&gt;
  4. Serve images in next-gen formats
&lt;/h3&gt;

&lt;p&gt;Image formats like JPEG 2000, JPEG XR, and WebP often provide better compression than PNG or JPEG, which means faster downloads and less data consumption.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/uses-webp-images/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;uses webp images&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí If you use an image service, as I do, they also have a format filter to get the webp/jpeg format. So you can upload any kind of image, but you will always download the optimized one!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí I use &lt;strong&gt;img2.storyblok&lt;/strong&gt; service adding a filters:format(webp). But only when the browser support this format.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem I found&lt;/strong&gt; ‚Üí I needed to filter by canvas rendering on the client side to avoid displaying webp images in browsers that don't support it like Safari (webp will work in future versions):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;format&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canUseWebP&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/filters:format(webp)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/filters:format(/*jpeg OR png*/)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// In methods&lt;/span&gt;
&lt;span class="nx"&gt;canUseWebP&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canUseWebP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canUseWebP&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canUseWebP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
       &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDataURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image/webp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data:image/webp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canUseWebP&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canUseWebP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canUseWebP&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Thanks to my colleagues in &lt;a href="https://twitter.com/passionpeopleNL"&gt;@passionPeopleNL&lt;/a&gt;, for shedding light on this matter!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#5-image-elements-have-explicit-width-and-height"&gt;
  &lt;/a&gt;
  5. Image elements have explicit &lt;em&gt;width&lt;/em&gt; and &lt;em&gt;height&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Set an explicit width and height on image elements to reduce layout shifts and improve CLS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/optimize-cls/?utm_source=lighthouse&amp;amp;utm_medium=lr#images-without-dimensions"&gt;optimize CLS&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí Always include &lt;strong&gt;width&lt;/strong&gt; and &lt;strong&gt;height&lt;/strong&gt; size attributes on your images and video elements.&lt;/p&gt;

&lt;p&gt;Alternatively, reserve the required space with &lt;a href="https://css-tricks.com/aspect-ratio-boxes/"&gt;CSS aspect ratio boxes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí I have created a generic component for images.&lt;/p&gt;

&lt;p&gt;This way every time I define an image I will call this component, which will not only optimize my image using v-lazy and filtering the format, but the properties will not allow you not to pass the &lt;strong&gt;width&lt;/strong&gt; and &lt;strong&gt;height&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This way we will always make sure that we comply with the standard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-use-video-formats-for-animated-content"&gt;
  &lt;/a&gt;
  6. Use video formats for animated content
&lt;/h3&gt;

&lt;p&gt;Large GIFs are inefficient for delivering animated content. Consider using MPEG4/WebM videos for animations and PNG/WebP for static images instead of GIF to save network bytes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/efficient-animated-content/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;efficient animated content&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí Many image CDNs support GIF to HTML5 video conversion. You upload a GIF to the image CDN, and the image CDN returns an HTML5 video.&lt;/p&gt;

&lt;p&gt;I recommend you the article &lt;a href="https://www.smashingmagazine.com/2018/11/gif-to-video/"&gt;Improve Animated GIF Performance With HTML5 Video&lt;/a&gt; if you need to do this yourself.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-preload-largest-contentful-paint-image"&gt;
  &lt;/a&gt;
  7. Preload Largest Contentful Paint image
&lt;/h3&gt;

&lt;p&gt;Preload the image used by the LCP element in order to improve your LCP time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/optimize-lcp/?utm_source=lighthouse&amp;amp;utm_medium=lr#preload-important-resources"&gt;optimize LCP&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí If you know that a particular resource should be prioritized, use &lt;em&gt;link rel="preload"&lt;/em&gt; to fetch it sooner.&lt;/p&gt;

&lt;p&gt;Many types of resources can be preloaded, but you should first focus on preloading critical assets, such as fonts, &lt;strong&gt;above-the-fold images&lt;/strong&gt; or videos, and critical-path CSS or JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí In the article page I've placed the featured image of the article as a preload link at the head tag using the &lt;a href="https://nuxtjs.org/docs/2.x/components-glossary/pages-head/"&gt;head method&lt;/a&gt; that nuxt provide us.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;transformImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;story&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;featured_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;672x0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fonts"&gt;
  &lt;/a&gt;
  Fonts
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-all-text-remains-visible-during-webfont-loads"&gt;
  &lt;/a&gt;
  1. All text remains visible during webfont loads
&lt;/h3&gt;

&lt;p&gt;Leverage the &lt;strong&gt;font-display&lt;/strong&gt; CSS feature to ensure text is user-visible while webfonts are loading.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/font-display/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;font display&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí The easiest way to avoid showing invisible text while custom fonts load is to temporarily show a system font. By including¬†&lt;em&gt;font-display: swap&lt;/em&gt;¬†in your¬†&lt;em&gt;@font-face&lt;/em&gt;¬†style, you can avoid FOIT in most modern browsers:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@font-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Pacifico'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;src&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'Pacifico Regular'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'Pacifico-Regular'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="sx"&gt;url(https://fonts.gstatic.com/s/pacifico/v12/FwZY7-Qmy14u9lezJ-6H6MmBp0u-.woff2)&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;'woff2'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;font-display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The¬†&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display"&gt;font-display API&lt;/a&gt;¬†specifies how a font is displayed.¬†&lt;em&gt;swap&lt;/em&gt;¬†tells the browser that text using the font should be displayed immediately using a system font. Once the custom font is ready, it replaces the system font.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For Google fonts, for example, is as simple as adding the¬†&lt;em&gt;&amp;amp;display=swap&lt;/em&gt;¬†&lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL#Basics_anatomy_of_a_URL"&gt;parameter&lt;/a&gt;¬†to the end to the Google Fonts URL:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css?family=Roboto:400,700&amp;amp;**display=swap**"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí The &lt;strong&gt;@font-face&lt;/strong&gt; swap technique, is the one I'm using at the moment, with the font files included in my project directly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-avoid"&gt;
  &lt;/a&gt;
  What to avoid?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-avoid-multiple-page-redirects"&gt;
  &lt;/a&gt;
  1. Avoid multiple page redirects
&lt;/h3&gt;

&lt;p&gt;Redirects introduce additional delays before the page can be loaded (&lt;a href="https://web.dev/redirects/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;avoid multiple redirects&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I avoid&lt;/strong&gt; ‚Üí I'm not doing any redirects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-avoid-serving-legacy-javascript-to-modern-browsers"&gt;
  &lt;/a&gt;
  2. Avoid serving legacy JavaScript to modern browsers
&lt;/h3&gt;

&lt;p&gt;Polyfills and transforms enable legacy browsers to use new JavaScript features. However, many aren't necessary for modern browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://philipwalton.com/articles/deploying-es2015-code-in-production-today/"&gt;detailed info&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí For your bundled JavaScript, adopt a modern script deployment strategy using module/nomodule feature detection to reduce the amount of code shipped to modern browsers, while retaining support for legacy browsers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I use&lt;/strong&gt; ‚Üí In Nuxt we have &lt;strong&gt;--modern&lt;/strong&gt; with some options in the build command. In my case for generate --modern is sufficient.&lt;/p&gt;

&lt;p&gt;Check this awesome tutorial &lt;a href="https://dev.to/debs_obrien/modern-build-in-nuxt-js-17lc"&gt;https://dev.to/debs_obrien/modern-build-in-nuxt-js-17lc&lt;/a&gt; to learn more about it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-avoids-enormous-network-payloads"&gt;
  &lt;/a&gt;
  3. Avoids enormous network payloads
&lt;/h3&gt;

&lt;p&gt;Large network payloads cost users real money and are highly correlated with long load times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/total-byte-weight/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;total byte weight&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí There're some ways to minimize our payload size:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Defer&lt;/strong&gt; requests until they're needed. &lt;em&gt;Nuxt&lt;/em&gt; is taking care of it.&lt;/li&gt;
&lt;li&gt;Optimize requests to be as small as possible, &lt;strong&gt;minimizing&lt;/strong&gt; and &lt;strong&gt;compressing&lt;/strong&gt;, try to use &lt;strong&gt;WebP&lt;/strong&gt; for the images when it's possible. An &lt;em&gt;image CDN&lt;/em&gt; will be always there to keep our performance up!&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cache requests so the page doesn't re-download the resources on repeat visits.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://web.dev"&gt;Web.dev&lt;/a&gt; recommend us to check¬†&lt;a href="https://web.dev/reliable"&gt;Network reliability landing page&lt;/a&gt;¬†to learn more about caching works and implement it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-avoids-documentwrite"&gt;
  &lt;/a&gt;
  4. Avoids document.write()
&lt;/h3&gt;

&lt;p&gt;For users on slow connections, external scripts dynamically injected via &lt;em&gt;document.write()&lt;/em&gt; can delay page load by tens of seconds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/no-document-write/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;no document write&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí In your own code you have absolute control to not add it, but I recommend that whenever you are going to use a third-party check that it is not using document.write() for something.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-avoid-noncomposited-animations"&gt;
  &lt;/a&gt;
  5. Avoid non-composited animations
&lt;/h3&gt;

&lt;p&gt;Animations which are not composited can be janky and increase CLS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution (&lt;/strong&gt;&lt;a href="https://web.dev/non-composited-animations/?utm_source=lighthouse&amp;amp;utm_medium=lr"&gt;non composited animations&lt;/a&gt;&lt;strong&gt;)&lt;/strong&gt; ‚Üí Right now I don't have so many animations, but the few I have I apply with the properties that are cheap to run for the browser: translate and scale.&lt;/p&gt;

&lt;p&gt;Reading this tutorial &lt;a href="https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/"&gt;https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/&lt;/a&gt; will clarify you why.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interesting-articles-on-this-topic"&gt;
  &lt;/a&gt;
  Interesting articles on this topic
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://wildbit.com/blog/2020/09/30/getting-postmark-lighthouse-performance-score-to-100"&gt;https://wildbit.com/blog/2020/09/30/getting-postmark-lighthouse-performance-score-to-100&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/weekly-webtips/web-vitals-google-search-the-state-vue-nuxt-performance-optimization-in-july-2020-71441eefc51"&gt;https://medium.com/weekly-webtips/web-vitals-google-search-the-state-vue-nuxt-performance-optimization-in-july-2020-71441eefc51&lt;/a&gt;&lt;/p&gt;

</description>
      <category>performance</category>
      <category>webperf</category>
      <category>vue</category>
      <category>netlify</category>
    </item>
    <item>
      <title>My Twitch Stream Setup</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Sat, 17 Apr 2021 19:27:33 +0000</pubDate>
      <link>https://dev.to/nickytonline/my-twitch-stream-setup-2m0c</link>
      <guid>https://dev.to/nickytonline/my-twitch-stream-setup-2m0c</guid>
      <description>&lt;p&gt;So I started streaming on Twitch last year.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nickytonline" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmhzwLSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zhsA-ZEm--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/9597/68d6245f-3152-4ed2-a245-d015fca4160b.jpeg" alt="nickytonline image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nickytonline/i-ve-started-to-live-code-on-twitch-for-dev-13cn" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;I've Started to Live Code on Twitch for DEV&lt;/h2&gt;
      &lt;h3&gt;Nick Taylor (he/him) „Éª Apr  1 '20 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#twitch&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#streaming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#livecoding&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Most of my streaming efforts have been dedicated to the DEV Twitch stream, but I'm finally getting back into streaming regularly on my own stream as well.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nickytonline" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmhzwLSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zhsA-ZEm--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/9597/68d6245f-3152-4ed2-a245-d015fca4160b.jpeg" alt="nickytonline image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/let-s-pair-during-a-live-coding-session-8he" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Let's Pair during a Live Coding Session!&lt;/h2&gt;
      &lt;h3&gt;Nick Taylor (he/him) „Éª Jul 14 '20 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#pairprogramming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#devstream&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#meta&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I've been streaming for about a year now, so I've tweaked things as I've gone along and have learnt some things from fellow streamers.&lt;/p&gt;

&lt;p&gt;Here was how my stream looked liked about a year ago&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d1zhHRvO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzgad8wb78yytjs0de3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d1zhHRvO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nzgad8wb78yytjs0de3n.png" alt="Nick Taylor's Twitch stream about a year ago with a very basic layout. Just a screenshare and a webcam"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here is what it looks like now as of yesterday. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Pv1IqAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56s9mufap1oia35udov1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Pv1IqAf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56s9mufap1oia35udov1.png" alt="Nick Taylor's Twitch stream improved with integrated chat, and more assets to make things look better"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I thought to get back in the swing of things with my stream, that it made sense to go through my setup. The video is still up on Twitch, but I'm going to link to the YouTube as the Twitch recording disappears in two weeks.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/H7HGYV2dT-w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Things that I cover are how I made the layout, what I use for video/screen sharing and how to provide and enable closed captioning for viewers.&lt;/p&gt;

&lt;p&gt;In this particular stream, the audio is all good, but there is a delay between the video and audio which never happens when I stream usually, so I'm chalking it up to showing my stream setup in the stream. üôÉ&lt;/p&gt;

&lt;p&gt;I forgot to talk about my hardware setup, so for that, checkout &lt;a href="https://iamdeveloper.com/uses"&gt;my uses page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All streaming happens on Twitch, but as mentioned, I also upload them to YouTube. Feel free to give me a follow on both. üòé&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://livecoding.ca"&gt;livecoding.ca&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtube.iamdeveloper.com"&gt;youtube.iamdeveloper.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are a streamer, I'm curious about your setup!&lt;/p&gt;

</description>
      <category>twitch</category>
      <category>streaming</category>
      <category>learninpublic</category>
    </item>
    <item>
      <title>Music and Work: Can they be combined?</title>
      <author>Eleftheria Batsou</author>
      <pubDate>Sat, 17 Apr 2021 19:22:27 +0000</pubDate>
      <link>https://dev.to/eleftheriabatsou/music-and-work-can-they-be-combined-4afd</link>
      <guid>https://dev.to/eleftheriabatsou/music-and-work-can-they-be-combined-4afd</guid>
      <description>&lt;p&gt;A few days ago I asked on Twitter: Do you listen to music while you work?! &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Most people gave me a positive response. &lt;/li&gt;
&lt;li&gt;A few people mentioned it depends on the work (I belong in that category too). &lt;/li&gt;
&lt;li&gt;And very few people said they never do.&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;
&lt;p&gt;Do you listen to music while you work?&lt;/p&gt;‚Äî Eleftheria Batsou (@BatsouElef) &lt;a href="https://twitter.com/BatsouElef/status/1382607625758576641?ref_src=twsrc%5Etfw"&gt;April 15, 2021&lt;/a&gt;
&lt;/blockquote&gt; 

&lt;p&gt;According to &lt;a href="https://www.healthline.com/health/does-music-help-you-study"&gt;Healthline&lt;/a&gt;, music does offer many benefits, such as:&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits:
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Improved mood&lt;/li&gt;
&lt;li&gt;Increased motivation&lt;/li&gt;
&lt;li&gt;Improved memory and brain stimulation&lt;/li&gt;
&lt;li&gt;Better management of pain and fatigue&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4Ia0gWdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618668364891/qYLZU_QX0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4Ia0gWdA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618668364891/qYLZU_QX0.jpeg" alt="music.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But this doesn't mean all people must listen to music while they work. Everyone can be differently affected by music. And of course, there are many kinds of music...&lt;/p&gt;

&lt;p&gt;So what about the drawbacks?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-it-can-hurt"&gt;
  &lt;/a&gt;
  How it can hurt:
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;It can distract you&lt;/li&gt;
&lt;li&gt;It can have a negative impact on working memory&lt;/li&gt;
&lt;li&gt;It can lower reading comprehension&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-kind-of-music-should-you-listen-to"&gt;
  &lt;/a&gt;
  What kind of music should you listen to?
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Avoid music with lyrics.&lt;/li&gt;
&lt;li&gt;Choose slow, instrumental music&lt;/li&gt;
&lt;li&gt;Avoid surprising or experimental music&lt;/li&gt;
&lt;li&gt;Keep the volume low&lt;/li&gt;
&lt;li&gt;Stick to songs you don‚Äôt have strong feelings about&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#many-people-prefer"&gt;
  &lt;/a&gt;
  Many people prefer:
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Nature sounds (like waves, rain, etc)&lt;/li&gt;
&lt;li&gt;White noise&lt;/li&gt;
&lt;li&gt;Binaural beats&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kJgxCIKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618668386931/k9Df06ZgO.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kJgxCIKO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618668386931/k9Df06ZgO.jpeg" alt="music2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I mentioned at the start of this article, depending on the work and the tasks I'm doing I'll listen to music or not. As for the style, I prefer classic music or music without lyrics. Occasionally, I'll listen to rock or music with a fast pace as I feel it makes me work faster.&lt;/p&gt;

&lt;p&gt;What about you? Do you listen to music while you work? And if so, what kind of music?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-other-developers-and-people-in-tech-have-to-say"&gt;
  &lt;/a&gt;
  What other developers and people in tech have to say:
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#yes"&gt;
  &lt;/a&gt;
  YES
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Always.. helps me to focus! &lt;/li&gt;
&lt;li&gt;Always. EDM, jazz, whatever fits my mood.&lt;/li&gt;
&lt;li&gt;Well I guess I can't work without music anymore. Lo-Fi is the best music to work to.&lt;/li&gt;
&lt;li&gt;Yes, every day I do listen to music while working.&lt;/li&gt;
&lt;li&gt;Yeah, I did and I was work absolutely make the go by quick!&lt;/li&gt;
&lt;li&gt;Yeah, I'm listening to music while I work.&lt;/li&gt;
&lt;li&gt;Yeah lofi.&lt;/li&gt;
&lt;li&gt;It makes the whole working process easy.&lt;/li&gt;
&lt;li&gt;The real question is why wouldn't I.&lt;/li&gt;
&lt;li&gt;I do. It helps me to be less worried.&lt;/li&gt;
&lt;li&gt;Yes, to do work fast and easy.&lt;/li&gt;
&lt;li&gt;Hell yeah.&lt;/li&gt;
&lt;li&gt;Yup. It feels like we are in two worlds at the same time.&lt;/li&gt;
&lt;li&gt;Yes I do listen it motivate me.&lt;/li&gt;
&lt;li&gt;Yes I always listen to music..because music always gives me inner happiness and 
calmness, which reduces the pain of my heart.&lt;/li&gt;
&lt;li&gt;I usually listen to the radio, @CRoDvojka. After almost 16 years abroad, it is one of the few connections I‚Äôve with Czech culture. It‚Äôs a mix of (great) spoken word and music (not really my cup of tea).&lt;/li&gt;
&lt;li&gt;Of course. Programming without music is so meaningless&lt;/li&gt;
&lt;li&gt;Yes. While problem-solving, I enjoy the old Hindi songs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#maybe"&gt;
  &lt;/a&gt;
  MAYBE
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Silence is the best music. When no noise around me. I prefer not to listen to music. But when there are many noises, I will.&lt;/li&gt;
&lt;li&gt;When writing down something, I don't. But while researching, yes that time it's a must!&lt;/li&gt;
&lt;li&gt;Yes, I do...but only sometimes.&lt;/li&gt;
&lt;li&gt;Yes, but not when I'm reading.&lt;/li&gt;
&lt;li&gt;I often do, and it‚Äôs different music for different things. I really use it to either help get into the flow state or if I have to block out background noise since I‚Äôm easily distracted by sounds around me.&lt;/li&gt;
&lt;li&gt;Sometimes.&lt;/li&gt;
&lt;li&gt;Sometimes yes sometimes I forget to listen : )&lt;/li&gt;
&lt;li&gt;Sometimes, but not if I need to focus on something.&lt;/li&gt;
&lt;li&gt;Depends on work.&lt;/li&gt;
&lt;li&gt;Depends. No bug, more music. More bugs, no music.&lt;/li&gt;
&lt;li&gt;For coding, it‚Äôs difficult for me because can‚Äôt think for designing it‚Äôs perfectly ok.&lt;/li&gt;
&lt;li&gt;Depend on the type of work.&lt;/li&gt;
&lt;li&gt;Can't say no to some deep house while coding.&lt;/li&gt;
&lt;li&gt;Most of the time. But I turned the music off only on moments when I need concentration.&lt;/li&gt;
&lt;li&gt;Some time, but while coding I prefer silence.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#no"&gt;
  &lt;/a&gt;
  NO
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;No.&lt;/li&gt;
&lt;li&gt;Nope...&lt;/li&gt;
&lt;li&gt;Nope, doesn't work for me.&lt;/li&gt;
&lt;li&gt;Not at work. It triggers flashbacks and distracts too much.&lt;/li&gt;
&lt;li&gt;Naw I am too old to do it now.&lt;/li&gt;
&lt;li&gt;I would love to. I work in the Construction field around Equipment and draws my attention away from what‚Äôs really important. My Safety.&lt;/li&gt;
&lt;li&gt;Never our boss is just similar to devil&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bK8pfSEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618668402057/IbYuKn8O-.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bK8pfSEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618668402057/IbYuKn8O-.jpeg" alt="music3.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you everyone for participating in Twitter :)&lt;/p&gt;

&lt;p&gt;To write this post I used this  &lt;a href="https://www.healthline.com/health/does-music-help-you-study#takeaway"&gt;source&lt;/a&gt; and this &lt;a href="https://twitter.com/BatsouElef/status/1382607625758576641"&gt;tweet&lt;/a&gt; too.&lt;/p&gt;

&lt;p&gt;If you want to take part in these questions make sure to follow me on  &lt;a href="https://twitter.com/BatsouElef"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.instagram.com/elef_in_tech"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;üëãHello, I'm Eleftheria, a developer, public speaker, and chocolate lover.&lt;/p&gt;

&lt;p&gt;ü•∞If you liked this post please share.&lt;/p&gt;

&lt;p&gt;üç©Would you care about buying me a coffee? You can do it &lt;a href="https://www.buymeacoffee.com/elef/"&gt;here&lt;/a&gt; but If you can't that's ok too!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.paypal.com/paypalme/eleftheriabatsou"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7QXiTcCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616336641314/ycZgZ44G3.gif" alt="cofGif.gif"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;üôèIt would be nice to subscribe to my &lt;a href="https://www.youtube.com/c/EleftheriaBatsou"&gt;Youtube&lt;/a&gt; channel. It‚Äôs free and it helps to create more content.&lt;/p&gt;

&lt;p&gt;üåà&lt;a href="https://www.youtube.com/c/EleftheriaBatsou"&gt;Youtube&lt;/a&gt; | &lt;a href="https://codepen.io/EleftheriaBatsou"&gt;Codepen&lt;/a&gt; | &lt;a href="https://github.com/EleftheriaBatsou"&gt;GitHub&lt;/a&gt; | &lt;a href="https://twitter.com/BatsouElef"&gt;Twitter&lt;/a&gt; | &lt;a href="http://eleftheriabatsou.com/"&gt;Site&lt;/a&gt; | &lt;a href="https://www.instagram.com/elef_in_tech"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

</description>
      <category>music</category>
      <category>productivity</category>
      <category>work</category>
    </item>
    <item>
      <title>Connecting Android Apps to localhost, Simplified</title>
      <author>Tushar Sadhwani</author>
      <pubDate>Sat, 17 Apr 2021 19:20:08 +0000</pubDate>
      <link>https://dev.to/tusharsadhwani/connecting-android-apps-to-localhost-simplified-57lm</link>
      <guid>https://dev.to/tusharsadhwani/connecting-android-apps-to-localhost-simplified-57lm</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;P.S. if you're in a hurry, find the correct solution &lt;a href="#the-correct-easy-way"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was working on a full stack side project a few months ago, and I wanted to make API requests from my android app to my desktop, and for some reason &lt;code&gt;localhost:8000&lt;/code&gt; wasn't simply accessible by my phone.&lt;/p&gt;

&lt;p&gt;Well, understandable, I know that every device's localhost is independent and cannot be accessed by your home network (your Wi-Fi, for example). So the localhost on my laptop won't be able to access the localhost on my phone.&lt;/p&gt;

&lt;p&gt;So, I asked Google for help. And I got a large number of solutions, the most sensible one being "use the internal IP address of your PC", et voil√†.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-bad-way"&gt;
  &lt;/a&gt;
  The Bad way
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bhRg8n7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgakgpfuw4eyvjud9tin.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bhRg8n7K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tgakgpfuw4eyvjud9tin.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;
Use ipconfig if you're on windows



&lt;p&gt;Running &lt;code&gt;ip addr&lt;/code&gt; on my machine tells me that the laptop's internal IP is &lt;code&gt;192.168.29.76&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And sure enough, as long as both devices were using the same Wi-Fi network, accessing &lt;code&gt;http://192.168.29.76:8000&lt;/code&gt; instead of &lt;code&gt;http://localhost:8000&lt;/code&gt; did work. My Android app can now make web requests to my local backend server üéâ&lt;/p&gt;

&lt;p&gt;But this solution is... a bit unstable.&lt;/p&gt;

&lt;p&gt;The internal IP of your laptop can keep changing whenever it connects to Wi-Fi, depending on various factors. And everytime it changes, you have to change the URL in your app's code, which is not ideal.&lt;/p&gt;

&lt;p&gt;There's other ways as well like using ngrok, but it faces similar issues.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-correct-easy-way"&gt;
  &lt;/a&gt;
  The Correct, easy way
&lt;/h1&gt;

&lt;p&gt;use &lt;code&gt;adb reverse&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Yup, that's it.&lt;/p&gt;

&lt;p&gt;Connect your android device to your pc via USB, ensure you have &lt;a href="https://www.xda-developers.com/install-adb-windows-macos-linux/"&gt;adb setup&lt;/a&gt;, and run this in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;adb reverse tcp:8000 tcp:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, your mobile can access &lt;code&gt;localhost:8000&lt;/code&gt;, just like your PC. (you can replace &lt;code&gt;8000&lt;/code&gt; with whichever port you want to forward)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-did-nobody-tell-me-this"&gt;
  &lt;/a&gt;
  Why did nobody tell me this?
&lt;/h1&gt;

&lt;p&gt;Yeah, I was also surprised when I was unable to find anyone on Google or StackOverflow mentioning the existence of &lt;code&gt;adb reverse&lt;/code&gt; when I tried to look for it.&lt;/p&gt;

&lt;p&gt;Which is why I wrote this blog. Now hopefully, &lt;code&gt;adb reverse&lt;/code&gt; will become more popular.&lt;/p&gt;

&lt;p&gt;If you know why &lt;code&gt;adb reverse&lt;/code&gt; isn't as popular, let me know. Also, if you know another android developer that should know about this little productivity hack, why not share this blog with them? :P&lt;/p&gt;




&lt;p&gt;Cover image courtesy of &lt;a href="https://unsplash.com/@ffstop?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Fotis Fotopoulos&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>testing</category>
    </item>
    <item>
      <title>CSS Variables: What Are They &amp; How Can They Be Used?</title>
      <author>Zachary Fetters</author>
      <pubDate>Sat, 17 Apr 2021 18:57:54 +0000</pubDate>
      <link>https://dev.to/zfett/css-variables-what-are-they-how-can-they-be-used-4gj1</link>
      <guid>https://dev.to/zfett/css-variables-what-are-they-how-can-they-be-used-4gj1</guid>
      <description>&lt;p&gt;When most web designers and developers hear the word "variable" with relevance to programming, they typically don't think of HTML or CSS first in their minds. When most non-web developers think of front-end languages, HTML and CSS for example, they see static, non-functional structural languages. For the most part, they're right! However, as with most programming, scripting, and even markup languages, there is more under the surface than first impressions would have you think.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-css-variables"&gt;
  &lt;/a&gt;
  What Are CSS Variables?
&lt;/h2&gt;

&lt;p&gt;CSS variables, or "custom properties," operate much like most other variables in other programming languages. In comparison to Javascript, a language commonly seen operating next to CSS and HTML, CSS variables work very similarly, albeit with some limitations.&lt;/p&gt;

&lt;p&gt;For example, CSS variables can be defined "globally" when included inside a &lt;code&gt;:root&lt;/code&gt; or &lt;code&gt;*&lt;/code&gt; selectors. Take the following code for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FF0000&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The attribute you see with the two dashes next to it, &lt;code&gt;--red&lt;/code&gt;, is the CSS variable. With it, we assigned the color red as its value (&lt;code&gt;#FF0000&lt;/code&gt; in hexadecimal format.) Now that this variable is declared under the &lt;code&gt;:root&lt;/code&gt; selector, it can be used anywhere in the rest of the stylesheet, as well as in any other stylesheets that include this one. That's because this variable is technically assigned to the root of the document, or the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;The beauty of CSS variables is that we can assign more than just hex color values to them. According to the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"&gt;Mozilla Developer Network (MDN) page&lt;/a&gt; for CSS variables, you can assign color values, &lt;code&gt;calc()&lt;/code&gt; values, pixel values, and much more! This is useful especially for specifying repeatedly-used colors like brand colors and setting breakpoint boundaries.&lt;/p&gt;

&lt;p&gt;Now that we've learned how to set CSS variables, the next step is learning how to access them! To do this, all you need to use is the &lt;code&gt;var()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Let's take a look back to the previous example using the &lt;code&gt;--red&lt;/code&gt; variable. In order to use this variable to set the color of a paragraph element, for example, we can do this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FF0000&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--red&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;HTML:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello world!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if we take a look at the final result, we should see this:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/zfett/embed/zYNLaJy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As you can see, our paragraph text is now a nice, clean red color! A good thing to keep in mind is that CSS variables always inherit their values from the parent first, then the child second if it is available. To demonstrate this, take a look at this new example, utilizing the previous example, but with a twist:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FF0000&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--red&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#00FF00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--red&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;HTML:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Hello world!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and now the final result:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/zfett/embed/dyNjKQP?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Notice that our paragraph text is now green instead of red. How did this happen? We used the same variable, &lt;code&gt;--red&lt;/code&gt; as before, so how come it isn't red anymore? Well, since we also defined a variable named &lt;code&gt;--red&lt;/code&gt; in our &lt;code&gt;p&lt;/code&gt; selector, it overwrote our previous definition of the red variable in the &lt;code&gt;:root&lt;/code&gt; selector. This is something to keep in mind when defining and redefining CSS variables.&lt;/p&gt;

&lt;p&gt;One more thing to keep track of is capitalization. In CSS variable names, capitalization is important. &lt;code&gt;--red&lt;/code&gt; is not the same as &lt;code&gt;--Red&lt;/code&gt;, for example. If you are finding that your CSS variable isn't working like you expected it to, the first thing I would check for is capitalization and spelling errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#realworld-applications"&gt;
  &lt;/a&gt;
  Real-world Applications
&lt;/h2&gt;

&lt;p&gt;Now that we've covered the basics of CSS variables, let's take a look at some more real-world applications. Below is an example showing how you can resize elements using predefined breakpoint widths:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--bp-wide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--bp-narrow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#ff0000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bp-wide&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;520px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;/*Note that we can't use variables in media queries*/&lt;/span&gt;
  &lt;span class="nf"&gt;#container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--bp-narrow&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0000ff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;HTML:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Resize this page to see the breakpoint values in action!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...and here is the final result.&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/zfett/embed/ZELjRPq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Note that you will need to &lt;a href="https://codepen.io/zfett/pen/ZELjRPq"&gt;open this pen in a separate window&lt;/a&gt; and resize its width to see the result. If you don't want to do that, then I'll explain what happens.&lt;/p&gt;

&lt;p&gt;In this example, the &lt;code&gt;#container&lt;/code&gt; element has a default width of 500 pixels, set by the &lt;code&gt;--bp-wide&lt;/code&gt; variable. However, in the later-defined media query in the CSS code, once the page width reaches 520 pixels, we change the container element's width by switching its value to the one defined in the &lt;code&gt;--bp-narrow&lt;/code&gt; variable, which is 300 pixels (I also changed the border color from red to blue to better show the transition between the breakpoints.)&lt;/p&gt;

&lt;p&gt;One limitation in using CSS variables as seen in this example is that we cannot use CSS variables in media queries. Instead, you must use static values.&lt;/p&gt;

&lt;p&gt;One more real-world benefit of CSS variables is that they can be defined in external stylesheets and be imported to others to be used. The most common occurrence of this is storing all of the commonly-used site colors in one stylesheet, typically something called &lt;code&gt;colors.css&lt;/code&gt; or &lt;code&gt;global_colors.css&lt;/code&gt;, and importing it into another stylesheet like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url("colors.css")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By doing this, assuming that the variables are defined properly in the &lt;code&gt;colors.css&lt;/code&gt; stylesheet, you can now use those variables in the new stylesheet as well!&lt;/p&gt;

&lt;p&gt;One last feature of CSS variables, mainly the &lt;code&gt;var()&lt;/code&gt; function, that I want to discuss are fallback values. By using the &lt;code&gt;var()&lt;/code&gt; function, we can define a fallback value, or a value that is used if the main CSS variable that is defined is empty, invalid, or not applicable to its assignment parameter. Take the following example:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;HTML:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;I'm a paragraph!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Result:&lt;/strong&gt;&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/zfett/embed/ExZppYB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You've probably noticed that the &lt;code&gt;--foo&lt;/code&gt; variable has not been defined in our code yet! By using the fallback parameter in the &lt;code&gt;var()&lt;/code&gt; function, we can define a default value in the case of an absent or undefined variable value. That's why the paragraph text in this example is red instead of the default black color. If we would've just used &lt;code&gt;var(--foo)&lt;/code&gt; instead of &lt;code&gt;var(--foo, red)&lt;/code&gt;, the paragraph text would've remained black in this example instead of red. Note that black is not the ever-default color for all text. CSS will try to inherit a parent value before anything else. So if &lt;code&gt;html&lt;/code&gt; has a color defined, the text will inherit that color first. Since, in this particular example, we don't have a predefined text color, the paragraph element will use our browser's default color, which is black.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ending-remarks"&gt;
  &lt;/a&gt;
  Ending Remarks
&lt;/h2&gt;

&lt;p&gt;As you probably assumed after reading this post, CSS variables are way more flexible and robust than I have covered here. The best way to feel the full potential of CSS variables is to start using them in your own code and read up more about them online!&lt;/p&gt;

&lt;p&gt;As always, if you have any questions about CSS variables, please feel free to leave a comment or drop me an email! If you've enjoyed this tutorial, please feel free to leave a reaction and a comment showing your appreciation!&lt;/p&gt;

</description>
      <category>css</category>
      <category>variable</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to upload files with PHP correctly and securely</title>
      <author>EinLinuus</author>
      <pubDate>Sat, 17 Apr 2021 18:44:32 +0000</pubDate>
      <link>https://dev.to/einlinuus/how-to-upload-files-with-php-correctly-and-securely-1kng</link>
      <guid>https://dev.to/einlinuus/how-to-upload-files-with-php-correctly-and-securely-1kng</guid>
      <description>&lt;p&gt;&lt;small&gt;&lt;em&gt;If you just want the sourcecode - scroll to the end of the page or click &lt;a href="#full-code"&gt;here&lt;/a&gt;. But I recommend reading the article to understand why I'm doing things as I do and how it works.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Hey Guys,&lt;/p&gt;

&lt;p&gt;in this post, I'll show you how to upload files to your server using HTML and PHP and validate the files. I hope it's useful for some of you and now happy coding :) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-information"&gt;
  &lt;/a&gt;
  Security information
&lt;/h2&gt;

&lt;p&gt;First of all, the most important thing I want to tell you, the &lt;code&gt;$_FILES&lt;/code&gt; variable in PHP (except &lt;code&gt;tmp_name&lt;/code&gt;) can be modified. That means, do not check e.g. the filesize with &lt;code&gt;$_FILES['myFile']['size']&lt;/code&gt;, because this can be modified by the uploader in case of an attack. In other words, when you validate the upload with this method, attackers can pretend that their file has another file size or type.&lt;/p&gt;

&lt;p&gt;So, let's move on and create our own, secure, file upload. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-setup"&gt;
  &lt;/a&gt;
  HTML Setup
&lt;/h2&gt;

&lt;p&gt;Before PHP can handle files, we send them to PHP using a basic HTML form:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"upload.php"&lt;/span&gt; &lt;span class="na"&gt;enctype=&lt;/span&gt;&lt;span class="s"&gt;"multipart/form-data"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"myFile"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Upload"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. Note the &lt;code&gt;action="upload.php"&lt;/code&gt;, that's the PHP script handling the upload. And we use the name &lt;code&gt;myFile&lt;/code&gt; to identify the file in PHP.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#php-validation"&gt;
  &lt;/a&gt;
  PHP Validation
&lt;/h2&gt;

&lt;p&gt;Now, let's validate the file in the &lt;code&gt;upload.php&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;First of all, we have to check if there is a file passed to our script. We do this using the &lt;code&gt;$_FILES&lt;/code&gt; variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_FILES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"myFile"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"There is no file to upload."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But remember, for security reasons, we can't get the filesize using &lt;code&gt;$_FILES&lt;/code&gt;. When the user uploads the file, PHP stores it temporarily and you can get the path using &lt;code&gt;$_FILES['myFile']['tmp_name']&lt;/code&gt;. That's what we use now to get the real size and type of the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_FILES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'myFile'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'tmp_name'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$fileSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;filesize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filepath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$fileinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;finfo_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;FILEINFO_MIME_TYPE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;finfo_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$fileinfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$filepath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have the real information, let's validate the filesize. We don't want to allow users to upload empty files, so first, we check if the file size is greater than 0:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$fileSize&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"The file is empty."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if anyone can upload files, you might want to set a limit of how large a file can be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$fileSize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3145728&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// 3 MB (1 byte * 1024 * 1024 * 3 (for 3 MB))&lt;/span&gt;
   &lt;span class="k"&gt;die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"The file is too large"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great. But you'll usually only allow specific types to be uploaded, e.g. &lt;code&gt;.png&lt;/code&gt; or &lt;code&gt;.jpg&lt;/code&gt; for profile images. For more flexibility, let's create an array with all allowed file types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$allowedTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
   &lt;span class="s1"&gt;'image/png'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="s1"&gt;'image/jpeg'&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can find a list of MIME-Types &lt;a href="https://wiki.selfhtml.org/wiki/MIME-Type/%C3%9Cbersicht"&gt;here&lt;/a&gt; (It's in german, but there is a great table with all MIME-Types and file extensions).&lt;/p&gt;

&lt;p&gt;Now let's check if the type of the file is allowed:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filetype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$allowedTypes&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"File not allowed."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we're done with validating! In the last step, we move the file to our uploads directory (or wherever you want to). For this, I define a variable with my target directory, then grab the current filename and extension and build the new, target file path:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filepath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// I'm using the original name here, but you can also change the name of the file here&lt;/span&gt;
&lt;span class="nv"&gt;$extension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;pathinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;PATHINFO_EXTENSION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$targetDirectory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/uploads"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// __DIR__ is the directory of the current PHP file&lt;/span&gt;

&lt;span class="nv"&gt;$newFilepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$targetDirectory&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$extension&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, move the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$newFilepath&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Copy the file, returns false if failed&lt;/span&gt;
   &lt;span class="k"&gt;die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Can't move file."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filepath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Delete the temp file&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"File uploaded successfully :)"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Now you have a secure file upload where you can strictly define which files can be uploaded and which not!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-code"&gt;
  &lt;/a&gt;
  Full code
&lt;/h2&gt;

&lt;p&gt;index.html:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Document&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- Part from this tutorial --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"upload.php"&lt;/span&gt; &lt;span class="na"&gt;enctype=&lt;/span&gt;&lt;span class="s"&gt;"multipart/form-data"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"myFile"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Upload"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- End of part from this tutorial --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;upload.php:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;isset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$_FILES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"myFile"&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"There is no file to upload."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_FILES&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'myFile'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'tmp_name'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$fileSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;filesize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filepath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$fileinfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;finfo_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;FILEINFO_MIME_TYPE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$filetype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;finfo_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$fileinfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$filepath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$fileSize&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"The file is empty."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$fileSize&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3145728&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// 3 MB (1 byte * 1024 * 1024 * 3 (for 3 MB))&lt;/span&gt;
    &lt;span class="k"&gt;die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"The file is too large"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$allowedTypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'image/png'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'image/jpeg'&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;in_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filetype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$allowedTypes&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"File not allowed."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filepath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// I'm using the original name here, but you can also change the name of the file here&lt;/span&gt;
&lt;span class="nv"&gt;$extension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;pathinfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;PATHINFO_EXTENSION&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$targetDirectory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;__DIR__&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/uploads"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// __DIR__ is the directory of the current PHP file&lt;/span&gt;

&lt;span class="nv"&gt;$newFilepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$targetDirectory&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"/"&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;"."&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$extension&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$newFilepath&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// Copy the file, returns false if failed&lt;/span&gt;
    &lt;span class="k"&gt;die&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Can't move file."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filepath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Delete the temp file&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"File uploaded successfully :)"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>html</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Decorator Functions in Python.</title>
      <author>Debojyoti Chatterjee</author>
      <pubDate>Sat, 17 Apr 2021 18:14:24 +0000</pubDate>
      <link>https://dev.to/debojyotichatterjee9/decorator-functions-in-python-1ioa</link>
      <guid>https://dev.to/debojyotichatterjee9/decorator-functions-in-python-1ioa</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dipUDhqY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68vqu04f5q9i2exj9ak3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dipUDhqY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68vqu04f5q9i2exj9ak3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
A decorator function allows you to add or modify an existing function without actually modifying it's structure.&lt;/p&gt;

&lt;p&gt;This is a very basic explanation of a decorator function.&lt;/p&gt;

&lt;p&gt;But the question here is why should we use a decorator function when we can just change a function as required?&lt;/p&gt;

&lt;p&gt;Well, it's not always you have one single function that you might want to modify. Suppose you have a bunch of functions in your project where you want to make a specific change to all the function as a part of your requirement.&lt;/p&gt;

&lt;p&gt;Now it would be very tedious to find and modify each and every function and also test each one of them to make sure it does not break your application.&lt;/p&gt;

&lt;p&gt;For that you have decorator function using which you can modify it without actually altering any of the code inside the function. Decorator function can have many use cases but is typically used when you want to make minor changes to your existing set of functions.&lt;/p&gt;

&lt;p&gt;Let's have a look at the simple example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deco_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Trigger"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kill"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"------------------------------"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="n"&gt;holder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deco_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello Python"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;holder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;function deco_func.&amp;lt;locals&amp;gt;.wrapper at 0x7efcdc4e8550&amp;gt;
Trigger
Hello Python
Kill
------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above example is possible in python because the functions here are treated as first class objects, which means that functions can be passed as or used as parameters/arguments.&lt;/p&gt;

&lt;p&gt;Here's some quick pointers to keeps in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A function is an instance of the Object type.&lt;/li&gt;
&lt;li&gt;A function can be stored in a variable.&lt;/li&gt;
&lt;li&gt; A function can be passed as a parameter.&lt;/li&gt;
&lt;li&gt;A function can return a function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's make some minor changes in the above code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deco_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Trigger"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kill"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"------------------------------"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is Function 1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is Function 2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is Function 3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deco_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;func2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deco_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;func3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deco_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;function deco_func.&amp;lt;locals&amp;gt;.wrapper at 0x7f6960526820&amp;gt;
Trigger
This is Function 1
Kill
------------------------------
Trigger
This is Function 2
Kill
-----------------------------------
Trigger
This is Function 3
Kill
-----------------------------------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code we have updated the &lt;em&gt;deco_func&lt;/em&gt; and now it accepts a function as an argument.&lt;br&gt;
We have also created three functions that just print a statement.&lt;br&gt;
Now, the line &lt;br&gt;
&lt;em&gt;func1 = deco_func(func1)&lt;/em&gt; &lt;br&gt;
allows us to store the &lt;em&gt;deco_func&lt;/em&gt; which accepts a parameter &lt;em&gt;func1&lt;/em&gt;, all that in a variable &lt;em&gt;func1&lt;/em&gt;. Hence, we can now call &lt;em&gt;func1()&lt;/em&gt; to get the desired results.&lt;br&gt;
By seeing the above piece of code, you can now figure out a bit, how decorator function works behind the scenes.&lt;/p&gt;

&lt;p&gt;So, whenever you are creating a decorator function you have to create this wrapper function/functionality. &lt;br&gt;
The outer function takes the function itself as an argument and the inner wrapper function calls the actual function upon which you are making the modifications. &lt;/p&gt;

&lt;p&gt;Below is an example of the above code as a decorator function syntax in Python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deco_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Trigger"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kill"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"------------------------------"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;deco_func&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is Function 1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;deco_func&lt;/span&gt;    
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is Function 2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;deco_func&lt;/span&gt;    
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is Function 3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, these are sort of dumb functions that just print a statement.&lt;br&gt;
What happens when one of the functions requires one or more parameters to be passed and some doesn't. Or, some functions return a value and some doesn't??&lt;/p&gt;

&lt;p&gt;Below is an example when one or more functions requires and arguments/parameters to be passed or one or more functions happen to return some value back when they are called. The whole point of decorator functions is to be able to use in any functions use-case, hence for that we use the unpack or splat operator i.e. &lt;em&gt;* args&lt;/em&gt; and &lt;em&gt;** kwargs&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deco_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Trigger"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Kill"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"------------------------------"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;deco_func&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is Function 1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Function 1 value: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;deco_func&lt;/span&gt;    
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is Function 2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;val1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;val2&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;deco_func&lt;/span&gt;    
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is Function 3"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Function 2 sum value: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Trigger
This is Function 1
Function 1 value:  20
Kill
-----------------------------------
Trigger
This is Function 2
Kill
-----------------------------------
Trigger
This is Function 3
Kill
-----------------------------------
Function 2 sum value:  85
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see that the splat operator helps the decorator function to accept none or any number of parameters and the &lt;em&gt;res&lt;/em&gt; variable stores the returned value of the decorated function to serve it's purpose.&lt;/p&gt;

&lt;p&gt;So, That's all about decorator function. I know it's a bit too much to take at a single reading, but I suggest open your python console or jupyter notebook and follow each line of the code snippets to understand the functionality and it will be a piece of cake for you!&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>functional</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Tic-Tac-Toe you can't beat...</title>
      <author>Dhruv Panchal</author>
      <pubDate>Sat, 17 Apr 2021 18:13:29 +0000</pubDate>
      <link>https://dev.to/dhhruv/tic-tac-toe-you-can-t-beat-56oo</link>
      <guid>https://dev.to/dhhruv/tic-tac-toe-you-can-t-beat-56oo</guid>
      <description>&lt;p&gt;&lt;strong&gt;In order to make the traditional Tic Tac Toe Game unbeatable, it is necessary to create an algorithm that can calculate all the possible moves available for the Computer and can use that to determine the best possible move.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7tOsuYg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g11lt9q6iwo921v952uk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q7tOsuYg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g11lt9q6iwo921v952uk.gif" alt="Tic Tac Toe GUI"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;To solve games using AI, we will introduce the concept of a Game Tree followed by Minimax algorithm. This algorithm sees a few steps ahead and puts itself in the shoes of its opponent. It keeps playing ahead until it reaches a terminal arrangement of the board (terminal state) resulting in a tie, a win, or a loss. Once in a terminal state, the AI will assign an arbitrary positive score (+10) for a win, a negative score (-10) for a loss, or a neutral score (0) for a tie.&lt;/p&gt;

&lt;p&gt;At the same time, the algorithm evaluates the moves that lead to a terminal state based on the players‚Äô turn. It will choose the move with maximum score when it is the AI‚Äôs turn and choose the move with the minimum score when it is the human player‚Äôs turn. Using this strategy, Minimax avoids losing to the human player.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-minimax"&gt;
  &lt;/a&gt;
  What is Minimax?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Minimax&lt;/strong&gt; (sometimes MinMax, MM or saddle point) is a decision rule used in artificial intelligence, decision theory, game theory, statistics, and philosophy for minimizing the possible loss for a worst case (maximum loss) scenario. When dealing with gains, it is referred to as &lt;strong&gt;"maximin" - to maximize the minimum gain&lt;/strong&gt;. Originally formulated for n-player zero-sum game theory (one player wins (+10) and other player loses (-10) or both of anyone not to win (0)), covering both the cases where players take alternate moves and those where they make simultaneous moves, it has also been extended to more complex games and to general decision-making in the presence of uncertainty. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h2&gt;

&lt;p&gt;To check whether or not the current move is better than the best move we take the help of minimax function which will consider all the possible ways the game can go and returns the best value for that move, assuming the opponent also plays optimally until it finds a terminal state (win, draw or lose).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#game-tree"&gt;
  &lt;/a&gt;
  Game Tree
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#image"&gt;
  &lt;/a&gt;
  Image:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IOEnX8Na--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/72680045/109675821-232af880-7b9e-11eb-9062-99cc212692ee.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IOEnX8Na--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/72680045/109675821-232af880-7b9e-11eb-9062-99cc212692ee.jpg" alt="Game Tree Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation:
&lt;/h3&gt;

&lt;p&gt;This image depicts all the possible paths that the game can take from the root board state. It is often called the Game Tree. &lt;br&gt;
The 3 possible scenarios in the above example are : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Left Move : If X plays [2,0]. Then O will play [2,1] and win the game. The value of this move is -10&lt;/li&gt;
&lt;li&gt;  Middle Move : If X plays [2,1]. Then O will play [2,2] which draws the game. The value of this move is 0&lt;/li&gt;
&lt;li&gt;  Right Move : If X plays [2,2]. Then he will win the game. The value of this move is +10;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Remember, even though X has a possibility of winning if he plays the middle move, O will never let that happen and will choose to draw instead.&lt;/strong&gt;&lt;br&gt;
Therefore the best choice for X, is to play [2,2], which will guarantee a victory for him.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#github-link-for-source-code"&gt;
  &lt;/a&gt;
  GitHub Link for Source Code:
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dhhruv"&gt;
        dhhruv
      &lt;/a&gt; / &lt;a href="https://github.com/dhhruv/Tic-Tac-Toe"&gt;
        Tic-Tac-Toe
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üéÉ Unbeatable Tic Tac Toe Game using Minimax Algorithm.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Minimax"&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-3-tic-tac-toe-ai-finding-optimal-move/"&gt;GeeksforGeeks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>python</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>API: Def, Types, Spec, and Docs.
A stone's throw into the application programming interface.</title>
      <author>Dule Martins</author>
      <pubDate>Sat, 17 Apr 2021 17:43:48 +0000</pubDate>
      <link>https://dev.to/dulemart/api-def-types-spec-and-docs-a-stone-s-throw-into-the-application-programming-interface-2g4i</link>
      <guid>https://dev.to/dulemart/api-def-types-spec-and-docs-a-stone-s-throw-into-the-application-programming-interface-2g4i</guid>
      <description>&lt;p&gt;You don't have to be around the tech space for months before coming across the word API. Words like API shouldn't be a new thing to anyone that reads tech magazines or blog posts like what you are doing now, one thing reading of blog post and a tech magazine helps you with is getting familiar with buzzwords in the tech space.&lt;/p&gt;

&lt;p&gt;Before learning web development the word API sounded like a complex term that would be difficult to understand and start running with. Over time the term has become a frequently used word, companies are now developing API as a product and creating a role for documentarians to help them organize and structure words that will enable their users to use their API without any difficulty.&lt;/p&gt;

&lt;p&gt;I got to know about the history of API after reading about it on &lt;a href="https://www.redhat.com/"&gt;RED HAT.&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;APIs emerged in the early days of computing, well before the personal computer. At the time, an API was typically used as a library for operating systems. The API was almost always local to the systems on which it operated, although it sometimes passed messages between mainframes. After nearly 30 years, APIs broke out of their local environments. By the early 2000s, they were becoming an important technology for the remote integration of data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Technically, API stands for Application Programming Interface. Most large companies have built APIs for their customers, or for internal use, or as a Product, as a means of collaboration between two different and remote companies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-web-as-an-instance"&gt;
  &lt;/a&gt;
  The Web as an Instance
&lt;/h2&gt;

&lt;p&gt;Think about the Web as a large network of connected servers, where we make a request through HTTP and get a response that is been define in a structured way.&lt;/p&gt;

&lt;p&gt;The web provides information to users from a remote server, every web page on the internet is stored somewhere on a remote server that receives request and process response.&lt;/p&gt;

&lt;p&gt;When you type a web address into your browser, a request goes out to the web remote server. Once your browser receives the response, it interprets the code and displays the page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-def"&gt;
  &lt;/a&gt;
  API Def.
&lt;/h2&gt;

&lt;p&gt;While the acronym is commonly referenced, few understand its actual meaning. Like we clearly stated above what the acronym represents. Understand that software is built to communicate, this is the whole essence to while most software applications are built with the integration of APIs that serve then data from other applications, it could be to communicate with a store by placing orders and check out or a bank by processing payment or transfer.&lt;/p&gt;

&lt;p&gt;Software or its elements don‚Äôt need a graphical user interface to communicate with each other. Software products exchange data and functionalities via a machine-readable medium which can be likened to ‚Äì Application programming interfaces.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An API is a set of programming code that enables data transmission between one software product and another. It also contains the terms of this data exchange.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#types-of-api"&gt;
  &lt;/a&gt;
  Types of API
&lt;/h2&gt;

&lt;p&gt;There are severe types of APIs and some APIs are been made available base on their release policy. API release policy could be Private, Partner, and Public. For example, with Javascript API you can perform an action like While the browser usually is 'above' any code running in it, a  &lt;a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/browserSettings"&gt;Mozilla-derived API&lt;/a&gt;  allows JavaScript limited access to browser settings. Think about aspects such as reading the user's homepage, how bookmarks are handled, and where new tabs show up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api-release-policy"&gt;
  &lt;/a&gt;
  API release policy:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Private&lt;/strong&gt;: These APIs are solely used within an organization and  In-house developers use these APIs to integrate a company‚Äôs IT systems or applications, build new systems or customer-facing apps leveraging existing systems. The private strategy allows a company to fully control API usage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Partner&lt;/strong&gt;: Openly promoted but available for known business partners who have signed an agreement with the publisher or the API company. The common use case for partner APIs is software integration between two parties. For example, an e-commerce platform like  &lt;a href="//www.timiun.com"&gt;Timiun&lt;/a&gt;  integrated a payment API develop and publish by  &lt;a href="https://www.mymonify.com/"&gt;Monify&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;** Public**: These types of APIs are publicly available to use like OAuth APIs from Google. It has also not given any restriction to use them. So, they are also known as Public APIs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;APIs can be classified according to the systems for which they are designed. There are Database APIs that enable communication between an application and a database management system. working with databases by writing queries to access data, change tables, etc.&lt;/p&gt;

&lt;p&gt;Web APIs provide machine-readable data and functionality transfer between web-based systems which represent client-server architecture. These APIs mainly deliver requests from web applications and responses from servers using Hypertext Transfer Protocol (HTTP).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-spec"&gt;
  &lt;/a&gt;
  API Spec
&lt;/h2&gt;

&lt;p&gt;An API spec is made up of a plan of how your API should look structurally - like an architectural design of a product. The best part of an API Spec is that it enables you to isolate design flaws or problems before you write a line of code.&lt;/p&gt;

&lt;p&gt;The advantage that comes with planning your API specification is something worth the time put in. Building your API base on specification could possibly add two or more weeks to the deadline for the development life-cycle, but it worth it.&lt;/p&gt;

&lt;p&gt;The idea behind APIs is simple, it should be flexible enough to be used by anyone and adequately documented to enter face with the developers using it. Most time thinks of API having customer support where a developer could chat up the support about the difficulties s/he could be facing integrating using the API, but this is while we have Technical writers and Documentarians I supposed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-docs"&gt;
  &lt;/a&gt;
  API Docs
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;API documentation is a technical content deliverable, containing instructions about how to effectively use and integrate with an API - Swagger.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As stated above, API documentation is a company's customer support system for marketing their API, so you understand how effective and the amount of effort that has been put out to have that ready for consumption.&lt;/p&gt;

&lt;p&gt;Is easy to ready documentation but it is more fun when it is properly structured in a manner that a user can easily locate what s/he is looking out for. Most documentation teams while building the docs for their APIs are responsible for continuous maintenance of the documentation, so they basically design means of getting feedback from users on how to improve the docs.&lt;/p&gt;

&lt;p&gt;Once I heard someone saying "if you don't document it then it didn't happen", documentation is an art of credibility, and reading documentation carefully is an art of consistency.&lt;/p&gt;

&lt;p&gt;Thanks for reading !!!!&lt;/p&gt;

</description>
      <category>api</category>
      <category>documentation</category>
      <category>web</category>
      <category>developer</category>
    </item>
    <item>
      <title>Data visualization: Using amCharts in React.js with Mojo</title>
      <author>Gaurav Rai</author>
      <pubDate>Sat, 17 Apr 2021 17:37:18 +0000</pubDate>
      <link>https://dev.to/raigaurav/data-visualization-using-amcharts-in-react-js-with-mojo-29mh</link>
      <guid>https://dev.to/raigaurav/data-visualization-using-amcharts-in-react-js-with-mojo-29mh</guid>
      <description>&lt;p&gt;In my previous &lt;a href="https://dev.to/raigaurav/data-visualization-using-amcharts-with-perl-and-mojo-38ff"&gt;article&lt;/a&gt;, I talked about using &lt;a href="https://www.amcharts.com/"&gt;amCharts&lt;/a&gt; library with Perl &lt;a href="https://mojolicious.org/"&gt;Mojolicious&lt;/a&gt;. Today we will looking at creating the similar chart with &lt;a href="https://reactjs.org/"&gt;React.js&lt;/a&gt; instead of plain JavaScript. I will keep it short since we already talked about it previously and will be reusing most of the code.&lt;/p&gt;

&lt;p&gt;There are 2 ways we can use the react.js -&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Without JSX (using  tag)
&lt;/li&gt;
&lt;li&gt;With JSX&lt;/li&gt;


&lt;p&gt;JSX stand for JavaScript XML. It allow you to easily write HTML in react.&lt;br&gt;
For now we will take the baby step and start without JSX.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#creating-the-data-config" class="anchor"&gt;
  &lt;/a&gt;
  Creating the data config
&lt;/h1&gt;

&lt;p&gt;We will use the exact same example as in &lt;a href="https://dev.to/raigaurav/data-visualization-using-amcharts-with-perl-and-mojo-38ff"&gt;previous&lt;/a&gt; article and try to create a multi line chart.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Number of automobiles sold per day by manufacturer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"label"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"domainAxis"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"rangeAxis"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Numbers of automobiles sold"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-15"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Honda"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Toyota"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Ford"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Renault"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-16"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Honda"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Toyota"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Ford"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Renault"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-17"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Honda"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Toyota"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Ford"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Renault"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Date"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2020-04-18"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Honda"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Toyota"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Ford"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Renault"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#creating-the-mojo-app" class="anchor"&gt;
  &lt;/a&gt;
  Creating the mojo app
&lt;/h1&gt;

&lt;p&gt;The version I am using for this article is 9.14.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt; mojo generate app MojoReactApp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;This command will generate a example application with proper directory structure for a MVC application and mentioned previously.&lt;/p&gt;

&lt;p&gt;Now go inside the dir and try to run this app.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;morbo ./script/mojo_app
Web application available at http://127.0.0.1:3000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Open the browser and hit &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; and you can see the welcome page.&lt;/p&gt;

&lt;p&gt;The rest of step is exact similar to mention in 'Creating the mojo app' section in &lt;a href="https://dev.to/raigaurav/data-visualization-using-amcharts-with-perl-and-mojo-38ff"&gt;previous&lt;/a&gt; article. So I will not board you by repeating it again. We will directly see the react part.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#adding-reactjs-to-app" class="anchor"&gt;
  &lt;/a&gt;
  Adding React.js to app
&lt;/h1&gt;

&lt;p&gt;We will update the &lt;code&gt;default.html.ep&lt;/code&gt; to include the react.js&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%=&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;

        %= content 'head'
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
            %= content
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/react@17/umd/react.production.min.js"&lt;/span&gt; &lt;span class="na"&gt;crossorigin&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"&lt;/span&gt; &lt;span class="na"&gt;crossorigin&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

        %= content 'end'
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;We are using the &lt;code&gt;production&lt;/code&gt; minified version. You can also use the &lt;code&gt;development&lt;/code&gt; version also for debugging purpose.&lt;br&gt;
I have added react.js on layout template as we will be using it all our web pages.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;multi_line_chart.html.ep&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight html"&gt;&lt;code&gt;% layout 'default';
% title 'Charts';

% content_for 'head' =&amp;gt; begin
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"css/charts.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
% end

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

% content_for 'end' =&amp;gt; begin
    %= javascript "https://cdn.amcharts.com/lib/4/core.js"
    %= javascript "https://cdn.amcharts.com/lib/4/charts.js"
    %= javascript "https://cdn.amcharts.com/lib/4/themes/animated.js"

    %= javascript "js/multi_line_chart.js"

    %= javascript begin 
        var domContainer = document.getElementById("root");
        createMultiLineChart(domContainer, &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;%==&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="na"&gt;chart_data&lt;/span&gt; &lt;span class="err"&gt;%&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;);
    % end
% end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;We are geeting the &lt;code&gt;$chart_data&lt;/code&gt; form &lt;code&gt;create_multi_line_chart&lt;/code&gt; in &lt;code&gt;lib\MojoReactApp\Controller\Charts.pm&lt;/code&gt; when the template get rendered.&lt;br&gt;
Lets update the &lt;code&gt;public/js/multi_line_chart.js&lt;/code&gt; to make it a React Component.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// React without JSX&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MultiLineChart&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;chartId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;chartData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;createSeries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Create series&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;series&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LineSeries&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataFields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dateX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Date&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataFields&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;valueY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;field&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//series.dataFields.categoryX = "Date";&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xAxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tooltipText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;{name}: [bold]{valueY}[/]&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//series.fillOpacity = 0.8;&lt;/span&gt;

        &lt;span class="c1"&gt;// For curvey lines&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tensionX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tensionY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Multiple bullet options - circle, triangle, rectangle etc.&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bullet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bullets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CircleBullet&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nx"&gt;bullet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;InterfaceColorSet&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;getFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;background&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;bullet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillOpacity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;bullet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strokeWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;bullet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;series&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;createChart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Increase contrast by taking evey fouth color&lt;/span&gt;
        &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//chart.hiddenState.properties.opacity = 0;             // this creates initial fade-in&lt;/span&gt;

        &lt;span class="c1"&gt;// Add title to chart&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fontSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;marginBottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;// Create axes - for normal Axis&lt;/span&gt;
        &lt;span class="c1"&gt;// var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());&lt;/span&gt;
        &lt;span class="c1"&gt;// categoryAxis.dataFields.category = "Date";&lt;/span&gt;
        &lt;span class="c1"&gt;// categoryAxis.renderer.grid.template.location = 0;&lt;/span&gt;

        &lt;span class="c1"&gt;// Create axes - for Date Axis&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;dateAxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xAxes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DateAxis&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="c1"&gt;//dateAxis.dataFields.category = "Date";&lt;/span&gt;
        &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;renderer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minGridDistance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;domainAxis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;valueAxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;yAxes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ValueAxis&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="c1"&gt;//valueAxis.renderer.line.strokeOpacity = 1;&lt;/span&gt;
        &lt;span class="c1"&gt;//valueAxis.renderer.line.strokeWidth = 2;&lt;/span&gt;
        &lt;span class="nx"&gt;valueAxis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rangeAxis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;//var single_data_item = this.state.chartData["data"][0];&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;series1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Toyota&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Toyota&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;series2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ford&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ford&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;series3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Honda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Honda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;series4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createSeries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Renault&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Renault&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Add legend&lt;/span&gt;
        &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;legend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Legend&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Add cursor&lt;/span&gt;
        &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;XYCursor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;xAxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dateAxis&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Add scrollbar&lt;/span&gt;
        &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollbarX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Scrollbar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;// Add export menu&lt;/span&gt;
        &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exporting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;menu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;am4core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ExportMenu&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;am4core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;am4themes_animated&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;am4core&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;am4charts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;XYChart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createChart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;componentWillUnmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;chartId&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createMultiLineChart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;domContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;chartData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;MultiLineChart&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;chartId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chartdiv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chartData&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nx"&gt;domContainer&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;We are calling the &lt;code&gt;createMultiLineChart&lt;/code&gt; function from our template with parameters. The main point to know here is the state and lifecycle functions - &lt;code&gt;componentDidMount&lt;/code&gt; and &lt;code&gt;componentWillUnmount&lt;/code&gt;.&lt;br&gt;
Since there are already plenty of documentation available, I encourage you to look into it. One of the place to learn the concept is react official docs- &lt;a href="https://reactjs.org/docs/state-and-lifecycle.html"&gt;State and Lifecycle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you look closely the rest of function definition is not much changes from the &lt;a href="https://dev.to/raigaurav/data-visualization-using-amcharts-with-perl-and-mojo-38ff"&gt;previous&lt;/a&gt; used javascript. We just wrapped it in react.&lt;/p&gt;

&lt;p&gt;The final directory structure is -&lt;/p&gt;

&lt;p&gt;üì¶mojo_react_app&lt;br&gt;
 ‚î£ üìÇetc&lt;br&gt;
 ‚îÉ ‚îó üìúinput_data.json&lt;br&gt;
 ‚î£ üìÇlib&lt;br&gt;
 ‚îÉ ‚î£ üìÇMojoReactApp&lt;br&gt;
 ‚îÉ ‚îÉ ‚î£ üìÇController&lt;br&gt;
 ‚îÉ ‚îÉ ‚îÉ ‚îó üìúCharts.pm&lt;br&gt;
 ‚îÉ ‚îÉ ‚îó üìÇModel&lt;br&gt;
 ‚îÉ ‚îÉ ‚îÉ ‚îó üìúData.pm&lt;br&gt;
 ‚îÉ ‚îó üìúMojoReactApp.pm&lt;br&gt;
 ‚î£ üìÇpublic&lt;br&gt;
 ‚îÉ ‚î£ üìÇcss&lt;br&gt;
 ‚îÉ ‚îÉ ‚îó üìúcharts.css&lt;br&gt;
 ‚îÉ ‚îó üìÇjs&lt;br&gt;
 ‚îÉ ‚îÉ ‚îó üìúmulti_line_chart.js&lt;br&gt;
 ‚î£ üìÇscript&lt;br&gt;
 ‚îÉ ‚îó üìúmojo_react_app&lt;br&gt;
 ‚î£ üìÇt&lt;br&gt;
 ‚îÉ ‚îó üìúbasic.t&lt;br&gt;
 ‚î£ üìÇtemplates&lt;br&gt;
 ‚îÉ ‚î£ üìÇcharts&lt;br&gt;
 ‚îÉ ‚îÉ ‚îó üìúmulti_line_chart.html.ep&lt;br&gt;
 ‚îÉ ‚îó üìÇlayouts&lt;br&gt;
 ‚îÉ ‚îÉ ‚îó üìúdefault.html.ep&lt;br&gt;
 ‚î£ üìúmojo_react_app.yml&lt;br&gt;
 ‚îó üìúREADME.md&lt;/p&gt;

&lt;p&gt;Save it and try to hit '&lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;' again. From the user perspective side nothing has changed, you will see the same output as before.&lt;br&gt;
&lt;img src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c37jpdr8v8b6wnh0zzmh.PNG" alt="fi7og88vjcasg4ishx45"&gt;&lt;/p&gt;

&lt;p&gt;As I mentioned before we will starting with baby step.&lt;br&gt;
The usage of the above mentioned way is very limited. You can use the react.js without jsx when your scope is small - where you have to make a website of few pages because here we are not using the full power of react.&lt;br&gt;
To use the react.js with full potential and unleash its power you have to use jsx. We will be looking in to it our next article.&lt;/p&gt;

&lt;p&gt;The above example is available at &lt;a href="https://github.com/rai-gaurav/mojo_react_app/tree/main/without_jsx"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Perl onion logo taken from &lt;a href="https://github.com/dnmfarrell/Perl-Icons/blob/master/Icons/Perl_Onion_Color.svg"&gt;here&lt;/a&gt;&lt;br&gt;
Mojolicious logo taken from &lt;a href="https://github.com/mojolicious/mojo/blob/master/lib/Mojolicious/resources/public/mojo/logo.png"&gt;here&lt;/a&gt;&lt;br&gt;
React logo taken from &lt;a href="https://reactjs.org/"&gt;here&lt;/a&gt;&lt;br&gt;
amCharts logo taken form &lt;a href="https://www.amcharts.com/about/press-kit/amcharts_light_transparent/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;/ol&gt;

</description>
      <category>perl</category>
      <category>react</category>
      <category>javascript</category>
      <category>mojolicious</category>
    </item>
    <item>
      <title>How to live your digital life in a terminal : Introduction</title>
      <author>Alexis</author>
      <pubDate>Sat, 17 Apr 2021 17:16:03 +0000</pubDate>
      <link>https://dev.to/curiouzk0d3r/how-to-live-your-digital-life-in-a-terminal-introduction-2ae4</link>
      <guid>https://dev.to/curiouzk0d3r/how-to-live-your-digital-life-in-a-terminal-introduction-2ae4</guid>
      <description>&lt;h1&gt;
  &lt;a href="#the-bloated-web"&gt;
  &lt;/a&gt;
  The bloated web
&lt;/h1&gt;

&lt;p&gt;I recall a few years ago me sharing Mozilla‚Äôs dream for the web. The web was on its way to become the main platform for internet users. And that was supposed to be a good thing, due to its openness and the freedom that it was providing. But freedom and control are relative concepts.&lt;/p&gt;

&lt;p&gt;Web now has become bloated with unnecessary code, advertisements, pop-ups, comments and recommendation systems that are trying to mine our data and keep us hooked in their user interfaces by providing us with constants hits of dopamine.&lt;/p&gt;

&lt;p&gt;Is there a solution to this? Is there a way to get back our control and attention? Well, you could go off the grid. Or you could live your digital life in your computer's terminal. Living in the terminal means avoiding using applications with a graphical user interface (GUI). Or at least a good subset of them.&lt;br&gt;
In this article, we will discuss some first steps to entry this life-style.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rss-is-still-alive"&gt;
  &lt;/a&gt;
  RSS is still alive
&lt;/h1&gt;

&lt;p&gt;RSS (Really Simple Syndication) is a web feed that allows users and applications to access updates to websites. It was released in March 1999 for use on the My.Netscape.Com portal. For a significant period, I believed it was dead. Fortunately, it recently received some traction.&lt;/p&gt;

&lt;p&gt;My terminal workflow is based on RSS. RSS enables me to receive updates from blogs, news sites, Twitter, Reddit, YouTube channels and podcasts. My RSS client of choice is &lt;a href="https://newsboat.org/"&gt;newsboat&lt;/a&gt;. My OS of choice is Linux (Ubuntu or Arch Linux). The main thing you should know about configuring newsboat is you have to add your list of RSS feeds at &lt;code&gt;~/.newsboat/urls&lt;/code&gt;. You can find plenty of useful information at the &lt;a href="https://wiki.archlinux.org/index.php/Newsboat"&gt;Arch wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To receive RSS updates from a YouTube channel, add to your list: &lt;code&gt;http://www.youtube.com/feeds/videos.xml?channel_id=$channel_id&lt;/code&gt;, where $channel_id is the id of the requested channel. Following Reddit updates is easy. In most cases, you can create an RSS feed by adding ".rss" to the end of an existing Reddit URL: &lt;a href="http://www.reddit.com/.rss"&gt;http://www.reddit.com/.rss&lt;/a&gt;&lt;br&gt;&lt;br&gt;
Twitter does not support RSS feeds, but you can generate one with the help of nitter: &lt;a href="https://nitter.42l.fr/username/rss"&gt;https://nitter.42l.fr/username/rss&lt;/a&gt; (also, do follow &lt;a href="https://nitter.42l.fr/ck0d3r/rss"&gt;me&lt;/a&gt; please :P).&lt;/p&gt;

&lt;p&gt;Newsboat also allows specifying the application which will open the videos/articles in the feeds. For example, you can use VLC to view YouTube videos, and Firefox to open website links. You can add the following line to your ~/.newsboat/config file:&lt;br&gt;&lt;br&gt;
&lt;code&gt;macro y set browser "vlc %u" ; open-in-browser ; set browser "firefox %u"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Although you cannot avoid using a GUI to enjoy Youtube, this setup is a magnitude more minimal. You avoid the ads, the annoying comments, the JavaScript tracking and the recommended/related videos. You can also play podcast episodes with the excellent &lt;a href="http://moc.daper.net"&gt;moc player&lt;/a&gt;. Now let‚Äôs talk about the trickiest component of this setup: the Web Browser.&lt;/p&gt;

&lt;p&gt;There is a fair amount of command-line browsers out there. There is links, elinks, w3m, lynx and others. My personal favourite is w3m with image support. As you can guess, you can configure newsboat to open links with w3m. However, reading articles with w3m is not always piece of cake. A trick is to use &lt;a href="https://www.npmjs.com/package/readability-cli"&gt;readability-cli&lt;/a&gt; to remove the bloat and keep only text related to the article‚Äôs content. You can easily combine readability with W3M :&lt;br&gt;
&lt;code&gt;readable $url | w3m -T text/html&lt;/code&gt;&lt;br&gt;
For integration with newsboat, add this to the config file:&lt;br&gt;
&lt;code&gt;macro r set browser "readable %u | w3m -T text/html" ; open-in-browser ; set browser "firefox %u"&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#this-is-only-the-beginning"&gt;
  &lt;/a&gt;
  This is only the beginning
&lt;/h1&gt;

&lt;p&gt;Undoubtedly RSS is a powerful tool that serves a minimalistic digital life. However, choosing RSS is only the first step.&lt;br&gt;
There is a plethora of command-line tools that can empower us with more focused, private and productive digital lives.&lt;br&gt;
There is a movement (mostly in the open-source community) that argues that the web has lost its initial vision and purpose.&lt;br&gt;
Thus, the web protocol (HTTP) shall instead be replaced by a simpler/lighter alternative, with the main protagonist being &lt;a href="https://gemini.circumlunar.space/"&gt;Gemini&lt;/a&gt;; a protocol lighter than HTTP but heavier than the older &lt;a href="https://web.cortland.edu/flteach/methods/obj1/gopher.html"&gt;Gopher&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>linux</category>
      <category>productivity</category>
      <category>tools</category>
      <category>rss</category>
    </item>
    <item>
      <title>Your Heroku App Is Slow to Load Because Of This.</title>
      <author>Elijah Trillionz</author>
      <pubDate>Sat, 17 Apr 2021 17:12:02 +0000</pubDate>
      <link>https://dev.to/elijahtrillionz/your-heroku-app-is-slow-to-load-because-of-this-4lep</link>
      <guid>https://dev.to/elijahtrillionz/your-heroku-app-is-slow-to-load-because-of-this-4lep</guid>
      <description>&lt;p&gt;No doubt that &lt;a href="https://heroku.com"&gt;&lt;strong&gt;Heroku&lt;/strong&gt;&lt;/a&gt; is a great tool for developers. One particular reason for me is its generosity. I will explain how&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heroku-dynos"&gt;
  &lt;/a&gt;
  Heroku Dynos
&lt;/h2&gt;

&lt;p&gt;If you're already using Heroku, then you should be familiar with &lt;a href="https://www.heroku.com/dynos"&gt;&lt;strong&gt;dynos&lt;/strong&gt;&lt;/a&gt;. A dyno is a lightweight, isolated, Linux container. It is basically how Heroku runs your app.&lt;/p&gt;

&lt;p&gt;With a free plan, you can get 550 hours of dyno per month with an unverified account and 1000 hours of dyno with a verified account. (Your account gets verified when you submit your card details. &lt;a href="https://devcenter.heroku.com/articles/account-verification"&gt;See more details here&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;What this means is, for each month, your app can only run for 1000 hours (verified account) or 550 hours (unverified account).&lt;/p&gt;

&lt;p&gt;To preserve your dyno hours from burning out or wasting, Heroku puts your app to sleep after 30 minutes of inactivity. How generous!&lt;/p&gt;

&lt;p&gt;This is what makes your app is slow to load. When your app's dyno is asleep, waking it up may take some time. But after the first load, it starts loading pretty fast because the dyno is active.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-we-solve-this"&gt;
  &lt;/a&gt;
  How do we solve this?
&lt;/h2&gt;

&lt;p&gt;If you don't want your app to go to sleep no matter the inactivity, then I have solutions for you. There are 744 hours in 31 days, so having a verified account keeps you ahead.&lt;/p&gt;

&lt;p&gt;Before we look at the solutions, let's see why you may need your app to always be on:&lt;/p&gt;

&lt;p&gt;Let's say you have a portfolio, as a full-stack, you wouldn't want a potential client to wait that long for your dyno to wake up.&lt;/p&gt;

&lt;p&gt;The worst part is when you're using a custom domain and not a Heroku subdomain (yourapp.herokuapp.com). With the subdomain, He/She may consider knowing fully well your dyno is waking up. But with a custom domain ... you will have to explain yourself then.&lt;/p&gt;

&lt;p&gt;Another scenario for you to keep your app alive is with Discord Bot or Twitter Bot. You'd want these bots to always be active at any time right?&lt;/p&gt;

&lt;p&gt;What you need is someone to keep your app active so your dyno won't go to bed. You need someone to always reload your app every 5 minutes or 10 or 20 but not 30 above.&lt;/p&gt;

&lt;p&gt;That someone is &lt;a href="https://uptimerobot.com/"&gt;Uptime robot&lt;/a&gt;. Uptime robot will keep your app active and also looks out for downtime (when your app stops working). I will show you how to monitor and keep your app active with Uptime robot.&lt;/p&gt;

&lt;p&gt;Visit &lt;a href="http://www.uptimerobot.com"&gt;www.uptimerobot.com&lt;/a&gt;. Register an account. You will be redirected to your dashboard.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click the &lt;code&gt;+ Monitor&lt;/code&gt; button&lt;/li&gt;
&lt;li&gt;In the monitor type field select HTTP(s)&lt;/li&gt;
&lt;li&gt;Fill the other fields with a name for your app, the URL of the app.&lt;/li&gt;
&lt;li&gt;Set an interval, the minimum is 5 minutes.&lt;/li&gt;
&lt;li&gt;Select the contact you would want them to notify for any downtime. It's optional.&lt;/li&gt;
&lt;li&gt;Lastly click the green &lt;code&gt;Create Monitor&lt;/code&gt; button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Soon as you are redirected to your dashboard, you will see that app you're monitoring in your dashboard. Click on the name of the app to see more stats of the app.&lt;/p&gt;

&lt;p&gt;Another option is to upgrade your Heroku plan from a free tier to a paid plan, here is &lt;a href="https://herokuapp.com/pricing"&gt;Heroku pricing&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;I almost wanted to switch from Heroku because of this issue. I used mine for an API and a discord bot. But this solution solved my problem.&lt;/p&gt;

&lt;p&gt;I have a Discord server for web developers to help with their coding journeys. &lt;a href="https://dev.to/elijahtrillionz/tools-to-improve-as-a-programmer-a7i"&gt;See Info here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like this post and want to support me you can &lt;a href="https://www.buymeacoffee.com/elijahtrillionz"&gt;buy me a Coffee&lt;/a&gt;.&lt;br&gt;
Thank you for reading.&lt;/p&gt;





&lt;h4&gt;
  &lt;a href="#you-might-be-interested-in"&gt;
  &lt;/a&gt;
  You might be interested in
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/elijahtrillionz/tools-to-improve-as-a-programmer-a7i"&gt;Tools To Improve as a Programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/elijahtrillionz/how-i-made-a-nosql-clone-with-javascript-classes-2go5"&gt;How I made a NoSQL Database clone with JavaScript Classes&lt;/a&gt;

&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>productivity</category>
      <category>programming</category>
      <category>database</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
