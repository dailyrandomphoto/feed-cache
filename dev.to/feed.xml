<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>My 2021 Review: The Growing Pains</title>
      <author>Ayu Adiati</author>
      <pubDate>Fri, 31 Dec 2021 20:38:38 +0000</pubDate>
      <link>https://dev.to/adiatiayu/my-2021-review-the-growing-pains-1j84</link>
      <guid>https://dev.to/adiatiayu/my-2021-review-the-growing-pains-1j84</guid>
      <description>&lt;p&gt;Hello Everyone üëã,&lt;/p&gt;

&lt;p&gt;We will leave 2021 in a few more hours. Is it just me? I feel like 2021 is much shorter than the previous years.&lt;br&gt;
How time flies!&lt;/p&gt;

&lt;p&gt;I participated in Polywork's #My2021Highlights and created &lt;a href="https://www.polywork.com/adiatiayu/collections/853188"&gt;My 2021 Highlights collection&lt;/a&gt;. And that's when I realize (again) how I grow so much within 1 year!&lt;/p&gt;

&lt;p&gt;I had ups and downs, but all those journeys were worth it.&lt;br&gt;
Maybe this is what people called &lt;em&gt;growing pains&lt;/em&gt;. üòÑ&lt;/p&gt;

&lt;p&gt;I'm writing this post to remind me of what I achieved and overcame. It will be something that I will look back to when I have hard times and keep me motivated.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://i.giphy.com/media/yaR8Dux1s0fAI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/yaR8Dux1s0fAI/giphy.gif" alt="let's go gif" width="500" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blogging"&gt;
  &lt;/a&gt;
  Blogging
&lt;/h2&gt;

&lt;p&gt;I started to write in November 2020, but not until 2021 when my articles and me, as a writer, started to get recognized. How I achieved so much within one year:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;My articles got into CodeNewbie's newsletter several times throughout the year since January.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/hashnode/status/1366715534142812166"&gt;Spotlight of The Week&lt;/a&gt; on Hashnode.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://community.codenewbie.org/codenewbie/codenewbie-writers-of-the-month-february-2021-kb7"&gt;CodeNewbie Writers of The Month ‚Äî February 2021&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Top 7 on DEV in &lt;a href="https://dev.to/devteam/the-7-most-popular-dev-posts-from-the-past-week-5h5d"&gt;March&lt;/a&gt;, &lt;a href="https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-3h2i"&gt;August&lt;/a&gt;, and &lt;a href="https://dev.to/devteam/top-7-featured-dev-posts-from-the-past-week-35fb"&gt;November&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://community.codenewbie.org/codenewbie/ayu-polyglot-latte-lover-codenewbie-149m"&gt;CodeNewbie Community Spotlight ‚Äî April 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hashnode.com/must-read/45"&gt;Must Read Developer Articles #45&lt;/a&gt; on Hashnode.&lt;/li&gt;
&lt;li&gt;Earned &lt;strong&gt;OSS Documentarian&lt;/strong&gt;, &lt;strong&gt;OSS Mentor&lt;/strong&gt;, &lt;strong&gt;Talk of the Town&lt;/strong&gt;, &lt;strong&gt;Article picked as "Must Read" on Hashnode&lt;/strong&gt;, and &lt;strong&gt;Featured On Hashnode&lt;/strong&gt; &lt;a href="https://adiati.com/badges"&gt;badges&lt;/a&gt; on Hashnode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I love writing and will keep writing even though as I mentioned in &lt;a href="https://dev.to/adiatiayu/i-have-been-writing-a-blog-for-10-months-here-is-my-story-401a"&gt;one of my posts&lt;/a&gt; that I will post one to two articles per month for a while.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-source"&gt;
  &lt;/a&gt;
  Open Source
&lt;/h2&gt;

&lt;p&gt;This year I didn't have any goal to complete Hacktoberfest because I started the collaboration program with &lt;a href="https://the-collab-lab.codes/about-us/"&gt;The Collab Lab&lt;/a&gt;. My goal was I would be very happy to submit at least one pull request.&lt;/p&gt;

&lt;p&gt;But I ended up submitting &lt;em&gt;eight&lt;/em&gt; pull requests and completed the Hacktoberfest!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n99kH4Va--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640973778602/A-KL6-k1l.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n99kH4Va--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640973778602/A-KL6-k1l.jpeg" alt="hacktoberfest2021.jpeg" width="880" height="548"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This experience leads me to a new interest in contributing to open source (and diving more into accessibility)!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community"&gt;
  &lt;/a&gt;
  Community
&lt;/h2&gt;

&lt;p&gt;I can go for hours when I'm talking about community. I love my communities! üíô&lt;br&gt;
I'm very blessed to be in such supportive communities and be an active member of &lt;a href="https://virtualcoffee.io/"&gt;Virtual Coffee&lt;/a&gt;, &lt;a href="https://the-collab-lab.codes/who-we-are/"&gt;The Collab Lab&lt;/a&gt;, &lt;a href="https://community.codenewbie.org/adiatiayu"&gt;CodeNewbie&lt;/a&gt;, &lt;a href="https://dev.to/adiatiayu"&gt;DEV&lt;/a&gt; and &lt;a href="https://hashnode.com/@ayuadiati"&gt;Hashnode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I won't be where I am now if it's not because of them who always support and push me to be a better developer, to be a better writer, to be a better person.&lt;/p&gt;

&lt;p&gt;Even in the wildest dream, I never thought that I could be part of these before:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://virtualcoffee.io/podcast/0303-ayu-adiati/"&gt;Guest at Virtual Coffee Community podcast&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Documentation Lead&lt;/strong&gt; at Virtual Coffee.&lt;/li&gt;
&lt;li&gt;One of program committees (proposals reviewer) for &lt;a href="https://codelandconf.com/"&gt;CodeLand Conference 2021&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Created a &lt;a href="https://www.youtube.com/watch?t=3788&amp;amp;v=4pI7miwXwY0&amp;amp;feature=youtu.be"&gt;short recess video for CodeLand Conference 2021&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Moderator for CodeLand Conference 2021 and &lt;a href="https://community.codenewbie.org/codenewbie/announcing-cnc2021-codenewbie-challenge-2021-1jbh"&gt;CodeNewbie Challenge 2021&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm very grateful to have had these experiences this year.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/7IuhBVrwctAtuPPXLk/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/7IuhBVrwctAtuPPXLk/giphy.gif" alt="but gif" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, those achievements didn't come without challenges.&lt;br&gt;
And these are actually what shaped me to grow and be who I am today.&lt;br&gt;
I learned a lot from them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#burnouts-and-imposter-syndromes"&gt;
  &lt;/a&gt;
  Burnout(s) and imposter syndrome(s)
&lt;/h2&gt;

&lt;p&gt;I had a massive burnout sometime this year. It was huge until it made me want to quit my journey, completely.&lt;br&gt;
Thankfully, I have genuinely lovely and supportive people around me at &lt;a href="https://virtualcoffee.io/"&gt;Virtual Coffee&lt;/a&gt;. Because of them, I overcame the burnout and got back on my feet.&lt;br&gt;
I wrote about that experience &lt;a href="https://dev.to/adiatiayu/lesson-learned-massive-burnout-in-learning-web-development-2kcg"&gt;in this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I also faced countless imposter syndromes. Again, thanks to my communities, I become more and more confident in myself and in my abilities. If it's not because of them, I would not even dare to apply for &lt;a href="https://the-collab-lab.codes/about-us/"&gt;The Collab Lab&lt;/a&gt; program because I always thought that I could never get accepted. If I didn't apply, I would never have had that precious experience to learn to collaborate with other developers at The Collab Lab and be in another awesome and supportive community! ‚ù§&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-learned-in-2021"&gt;
  &lt;/a&gt;
  What I learned in 2021
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;It's okay to not be okay.&lt;/li&gt;
&lt;li&gt;Take a break regularly, take care of yourself, and keep moving forward.&lt;/li&gt;
&lt;li&gt;Don't play too many scenarios in your head. You never know what will happen unless you try and do it.&lt;/li&gt;
&lt;li&gt;Surround yourself with positive and supportive people and communities.&lt;/li&gt;
&lt;li&gt;The growth process is extremely uncomfortable and sometimes painful, but it's totally worth it!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h2&gt;

&lt;p&gt;Thank you for all the lessons, 2021! üíñ&lt;br&gt;
Cheers to 2022 and happy new year, everyone!!! ü•Ç&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/CjmvTCZf2U3p09Cn0h/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/CjmvTCZf2U3p09Cn0h/giphy.gif" alt="i'm ready gif" width="480" height="452"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Thank you for reading!&lt;br&gt;
Last but not least, you can find me on &lt;a href="https://twitter.com/AdiatiAyu"&gt;Twitter&lt;/a&gt;. Let's connect! üòä&lt;/p&gt;

</description>
      <category>yearinreview</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Creating Custom Directives in Angular</title>
      <author>Anubhab Mukherjee</author>
      <pubDate>Fri, 31 Dec 2021 19:31:53 +0000</pubDate>
      <link>https://dev.to/this-is-angular/custom-directives-in-angular-2cp5</link>
      <guid>https://dev.to/this-is-angular/custom-directives-in-angular-2cp5</guid>
      <description>&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;oday we will learn how to create our own directives in Angular. In my previous posts I discussed all the built-in directives which Angular provided. If you are unaware, I would highly suggest you to start from the &lt;a href="https://dev.to/anubhab5/understanding-built-in-angular-directives-part-1-oln"&gt;part_1&lt;/a&gt; ( of the 6 series post).&lt;/p&gt;

&lt;p&gt;So the first question that can strike you is why we need a custom directive when Angular already provided us with 6 amazing directives. The simple reason is there can be multiple scenarios where the exact requirements are not met using the built-in directives. In those cases we need to write our own logic to meet the requirement and custom directives comes to the rescue.&lt;/p&gt;




&lt;p&gt;Now, lets see how we can create our own custom directive.&lt;br&gt;
The CLI command to create a new directive is -&lt;br&gt;
        &lt;code&gt;ng generate directive &amp;lt;directive-name&amp;gt;&lt;/code&gt;&lt;br&gt;
There is also a shorter way for the above command - &lt;br&gt;
        &lt;code&gt;ng g d &amp;lt;directive-name&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lets create a simple directive which when applied to an element will add an underline to the text. Will name the directive as &lt;br&gt;
&lt;code&gt;my-underline&lt;/code&gt;&lt;br&gt;
Lets open the command prompt from the project directory and type in the below command -&lt;br&gt;
eg. &lt;code&gt;ng g d my-underline&lt;/code&gt;&lt;br&gt;
Once you run the above command the CLI should create 2 files&lt;br&gt;
&lt;em&gt;The directive file&lt;/em&gt;&lt;br&gt;
&lt;em&gt;The spec file of the directive&lt;/em&gt; ( for writing unit test)&lt;br&gt;
and update the module file (in the declaration array, just like component creation we saw &lt;a href="https://dev.to/anubhab5/creating-angular-component-129e"&gt;earlier&lt;/a&gt;).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xIV9NlBZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1igsoi4c34th8ha3cie0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xIV9NlBZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1igsoi4c34th8ha3cie0.PNG" alt="Image description" width="672" height="145"&gt;&lt;/a&gt;&lt;br&gt;
In the project folder you should see something like below -&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iw2mDcRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgfldzqpdvg00mgj5n2r.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iw2mDcRW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgfldzqpdvg00mgj5n2r.PNG" alt="Image description" width="481" height="339"&gt;&lt;/a&gt;&lt;br&gt;
We will work with the file pointed with yellow arrow &lt;br&gt;
&lt;code&gt;my-underline.directive.ts&lt;/code&gt;.&lt;br&gt;
Once you open the file you will see the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Directive } from '@angular/core';

@Directive({
  selector: '[appMyUnderline]'
})
export class MyUnderlineDirective {

  constructor() { }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we come across a new decorator &lt;code&gt;@Directive&lt;/code&gt;. The directive's selector is &lt;code&gt;appMyUnderline&lt;/code&gt;. In order to use the directive we need to use the selector name.&lt;/p&gt;

&lt;p&gt;Lets paste in the below code in the constructor -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  constructor(private el: ElementRef, private renderer: Renderer2) {
    this.renderer.setStyle(this.el.nativeElement, 
     'textDecoration', 'underline');
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we are just scratching the surface of how to create a custom directive I am not diving deep in explaining what is &lt;code&gt;ElementRef&lt;/code&gt; or &lt;code&gt;Renderer2&lt;/code&gt; (which I will discuss in the advanced concept section).&lt;/p&gt;

&lt;p&gt;Now we need to use the directive as well. So lets open &lt;code&gt;app.component.html&lt;/code&gt; file and paste in the below code -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div appMyUnderline&amp;gt;This text will be underlined!&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just need to add the directive name in the element and it will work like magic.&lt;/p&gt;

&lt;p&gt;Now, lets start the application and open localhost:4200 in the browser. You should see the below output -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SkULXTlV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl3p9xbdubvl8vqb5a7t.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SkULXTlV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fl3p9xbdubvl8vqb5a7t.PNG" alt="Image description" width="302" height="163"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you can see the text has been underlined. You can reuse this feature as many times as you want.&lt;/p&gt;

&lt;p&gt;This is a simple example I showed but you can do many complex stuffs pretty easily using your own directive.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt;
A directive does not have a template/ html file associated with it.&lt;br&gt;
So we can say Component is a directive with a template.&lt;br&gt;
We can use the directive selector as an &lt;strong&gt;attribute&lt;/strong&gt; (shown in the example), or as a &lt;strong&gt;class&lt;/strong&gt;, or as an &lt;strong&gt;id&lt;/strong&gt;. If you are not familiar with the selector types I would recommend you to go through &lt;a href="https://dev.to/anubhab5/various-types-of-angular-component-selectors-1ec"&gt;this post&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So we learnt how to create a custom directive and how to use it.&lt;/p&gt;

&lt;p&gt;Hope you enjoyed the post. If yes do like and comment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cheers&lt;/strong&gt;!!!&lt;br&gt;
&lt;em&gt;Happy Coding&lt;/em&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>directive</category>
    </item>
    <item>
      <title>Day 1 of Learning React</title>
      <author>Web.Developer.io</author>
      <pubDate>Fri, 31 Dec 2021 19:25:08 +0000</pubDate>
      <link>https://dev.to/developerioweb/day-1-of-learning-react-32o6</link>
      <guid>https://dev.to/developerioweb/day-1-of-learning-react-32o6</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h3&gt;

&lt;p&gt;React is  a Java-script Library used to build UI(User Interfaces)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is a Open-source project Developed by meta.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In React we built Component that can be Reused.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In React our Focus is to built Components and by combining smaller component we make bigger Components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Declarative Approach ‚Üí&lt;/strong&gt; We Just have to tell the React What to do we don‚Äôt have to worry about how it do.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Component-based Design ‚Üí&lt;/strong&gt; In React we use Re-useable component so we have to write the less code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Virtual DOM ‚Üí&lt;/strong&gt; So DOM is like a big tree which have the many elements and manipulating the DOM takes time , so what React does is It directly make changes in the Java-script then update in the DOM so that React can Stay Fast. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;JSX ‚Üí Rather than making the sites in three Different file .html, .css, .js  , In React&lt;/strong&gt; We write all things in one file like for ex‚Üí we have to make a button then we  have to make changes in 3 different file but in React we have to Create a Single Component (in which we write all css, js ,html ).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--59FHsPV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlae59b3xwtpohkv02zp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--59FHsPV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wlae59b3xwtpohkv02zp.png" alt="!Image description" width="880" height="581"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-a-library-or-framework"&gt;
  &lt;/a&gt;
  React a Library or Framework???
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#library"&gt;
  &lt;/a&gt;
  Library
&lt;/h3&gt;

&lt;p&gt;A library is a piece of code which we include in our code to get a specific Funtionality.&lt;/p&gt;

&lt;p&gt;If we are using the Library we have more Freedom than of a Framework like in frameworks we have to put the file in certain place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#framework"&gt;
  &lt;/a&gt;
  Framework
&lt;/h3&gt;

&lt;p&gt;A Framework is a platform in which u can develop things &lt;/p&gt;

&lt;p&gt;In Framework u have to include the code in the Framework rather than in Library the case in reverse.&lt;/p&gt;

&lt;p&gt;we have a more structure than the Library.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;So React by it‚Äôs own is less functional but u can combine it with other things like React Router.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-component"&gt;
  &lt;/a&gt;
  What is a Component??
&lt;/h3&gt;

&lt;p&gt;So &lt;strong&gt;Component&lt;/strong&gt; is a Re-useable piece of code that is used to build sites. Also they are modular in nature.&lt;/p&gt;

&lt;p&gt;Component let us split the UI into different pieces and we can think of each piece in isolation.&lt;/p&gt;

&lt;p&gt;With Component u can pass the information from one component to another.&lt;/p&gt;

&lt;p&gt;There are 2 types of Component :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Class Based&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Function Based&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also a Component Return the HTML.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/62x458v5pn"&gt;React Ratings Demo&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Setting up the Server&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For to use the React u need to Have a Server Running.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Files to be included to ran a React site.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/react/umd/react.development.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/react-dom/umd/react-dom.development.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

//Earlier there is only one single file but nowadays it splits up in the 2 files.
1st File is for React -&amp;gt; To make Changes in the JavaScript or for Javascript also the same file we include in the during our App Development.
The 2nd File is used for DOM Manipulation.

&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/babel-standalone"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

Also we have include another 
file called Babel 
It is used to convert the HTML like code into the 
Java-Script.

Also we have to tell the 
Compiler that there can be JSX in there
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"index.js"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/jsx"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;**
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;There are 2 Methods by which we can make the Components&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;‚Üí &lt;strong&gt;Using Classes  (they are more Feature Rich)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;‚Üí &lt;strong&gt;Using Function (They have less Features but there is something called React Hooks with which they became more Feature-able.)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;So as u know that a Component Return the HTML so we have also make a place where it can return the HTML.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"root"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
**We can select this using getElementById and Insert the HTML in it.**
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Let&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;s make a Hello world Component -&amp;gt;
class Hello extends React.Component{
    render(){
        return &amp;lt;H1&amp;gt; Hello World&amp;lt;/H1&amp;gt;
    }
}
-&amp;gt; But this only Return not manipulate the HTML

so for this we have
ReactDOM(&amp;lt;Component name&amp;gt;,&amp;lt;Where to Render it&amp;gt;)

ReactDOM(&amp;lt;Hello/&amp;gt;,document.getElementById(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;));  &amp;lt;- this will print the Hello world

**But what if we want to return Multiple things ?? return can only return only one thing
for this we can wrap it in a div**

class Hello extends React.Component{
    render(){
        return (
                &amp;lt;div&amp;gt;
                &amp;lt;H1&amp;gt; Hello World&amp;lt;/H1&amp;gt;
                &amp;lt;H1&amp;gt; Hello World&amp;lt;/H1&amp;gt;               
                &amp;lt;/div&amp;gt;
        )
    }
}
-&amp;gt; By this way we can print the Multiple things in it.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>react</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>MetaMask and Web3 Resources</title>
      <author>Eric Bishard</author>
      <pubDate>Fri, 31 Dec 2021 18:58:36 +0000</pubDate>
      <link>https://dev.to/httpjunkie/metamask-52bj</link>
      <guid>https://dev.to/httpjunkie/metamask-52bj</guid>
      <description>&lt;p&gt;Not just a crypto wallet but a gateway to exploring blockchain decentralized applications.&lt;/p&gt;

&lt;p&gt;With over 20 million users worldwide, &lt;a href="https://metamask.io"&gt;MetaMask&lt;/a&gt; empowers users with the ability to buy, store, send and swap Ethereum based tokens (&lt;a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-20/"&gt;ERC-20&lt;/a&gt;, &lt;a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-721/"&gt;ERC-721 (NFTs)&lt;/a&gt;, and more).&lt;/p&gt;

&lt;p&gt;Users can connect to blockchain applications and overall own their own data by generating passwords and keys on their own devices where they only have the access to their accounts and data with the right to choose what they want to share and keep private.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/YVgfHZMFFFQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Before we dive any deeper into the MetaMask ecosystem, take a minute to explore the meaning of any of the terms you may not already know in the list below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.metamask.io/guide/common-terms.html#blockchain"&gt;Blockchain&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#decentralize-decentralization"&gt;Decentralization&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#smart-contracts"&gt;Smart Contracts&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#trustless"&gt;Trustless&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#wallet"&gt;Wallet&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#account"&gt;Account&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#address-public-key"&gt;Address&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#public-key"&gt;Public Key&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#private-key"&gt;Private Key&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#keystore-file"&gt;Keystore File&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#mnemonic-phrase-seed-phrase-seed-words"&gt;Mnemonic/Seed Phrase&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#hardware-wallet"&gt;Hardware Wallet&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#identicon-addressidenticon-addressicon"&gt;Identicon&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#hexadecimal"&gt;Hexadecimal&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#seed"&gt;Seed&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#brain-wallet"&gt;Brain Wallet&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#entropy"&gt;Entropy&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#derive-derivation"&gt;Derivation&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#encryption"&gt;Encryption&lt;/a&gt;, &lt;a href="https://docs.metamask.io/guide/common-terms.html#encrypted-vs-unencrypted-keys"&gt;Encrypted Keys&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developing-with-metamask"&gt;
  &lt;/a&gt;
  Developing with MetaMask
&lt;/h2&gt;

&lt;p&gt;If you are a developer wanting to connect users to your decentralized application you can achieve the basics such basic vierification of the user and initiating transactions all the way to complete user account onboarding with convenience libraries like &lt;a href="https://www.npmjs.com/package/ethers"&gt;ethers&lt;/a&gt;, &lt;a href=""&gt;web3.js&lt;/a&gt;, &lt;a href="https://www.npmjs.com/package/web3"&gt;truffle&lt;/a&gt;, &lt;a href="https://www.trufflesuite.com/"&gt;embark&lt;/a&gt; and others.&lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.metamask.io/guide/Getting-Started.html"&gt;MetaMask Docs&lt;/a&gt; can get you started by &lt;a href="https://metamask.io/download.html"&gt;downloading the extension&lt;/a&gt;, familiarization you with the &lt;a href="https://docs.metamask.io/guide/ethereum-provider.html"&gt;Ethereum Provider API&lt;/a&gt; to &lt;a href="https://docs.metamask.io/guide/Getting-Started.html#running-a-test-network"&gt;running a test network&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The easiest way to jump right in learning how to develop with Metamask (NodeJS required) is to try your hand at &lt;a href="https://docs.metamask.io/guide/create-dapp.html"&gt;Creating a Simple Dapp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Other resources that I think you should consider if you are new to web3 development are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=a0osIaAOFSE"&gt;The Complete Guide to Full Stack Ethereum Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@austin_48503/%EF%B8%8Fethereum-dev-speed-run-bd72bcba6a4c"&gt;Ethereum Speed Run&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;MetaMask now provides a metamask-onboarding library designed to improve and simplify the onboarding experience. The new library exposes an API to initiate the onboarding process. In the process, it registers your site as the origin of the onboarding request. MetaMask will check for this origin after the user completes the onboarding flow. If it finds an origin, the final confirmation button of the MetaMask onboarding flow will indicate that the user will be redirected back to your site.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onboarding-users"&gt;
  &lt;/a&gt;
  Onboarding Users
&lt;/h2&gt;

&lt;p&gt;As an Ethereum enabled site developer, sending users offsite to install MetaMask presents challenges. Most notably, you must inform the user to return to your site and refresh their browser after the installation. &lt;/p&gt;

&lt;p&gt;MetaMask now provides a &lt;a href="https://github.com/MetaMask/metamask-onboarding"&gt;metamask-onboarding library&lt;/a&gt; designed to improve and simplify the onboarding experience. The new library exposes an API to initiate the onboarding process. This process registers your site as the origin of the onboarding request. MetaMask will check for this origin after the user completes the onboarding flow. If it finds an origin, the final confirmation button of the MetaMask onboarding flow will indicate that the user will be redirected back to your site.&lt;/p&gt;

&lt;p&gt;MetaMask cares deeply about user experience and has been working diligently to give developers the tools they need in order to improve their own applications contributing overall to the usability of web3 technologies.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-features-and-resources"&gt;
  &lt;/a&gt;
  Additional Features and Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://metamask.io/swaps.html"&gt;MetaMask Swaps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metamask.io/1559.html"&gt;How Transaction Fees Will Change (EIP-1559)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metamask.io/institutions.html"&gt;Metamask Institutional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metamask.io/institutions/custody.html"&gt;Custody Partnerships&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://metamask.io/faqs.html"&gt;MetaMask FAQs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://consensys.net/open-roles/?discipline=32543"&gt;MetaMask Job Board&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://trufflesuite.com"&gt;Truffle Suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Metamask is part of the &lt;a href="https://ConsenSys.net"&gt;ConsenSys&lt;/a&gt; Product Family&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#metamask-explanatory-videos"&gt;
  &lt;/a&gt;
  MetaMask Explanatory Videos
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/gsfJywNxpi4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/izvgAmbWPyE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oZIFy76TjJM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/V7Wqc7zFWhU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>web3</category>
      <category>blockchain</category>
      <category>metamask</category>
      <category>ethereum</category>
    </item>
    <item>
      <title>Client-side Rendering, Server-side Rendering, and SSG in Plain English</title>
      <author>Michael Hungbo</author>
      <pubDate>Fri, 31 Dec 2021 18:46:00 +0000</pubDate>
      <link>https://dev.to/heymich/client-side-rendering-server-side-rendering-and-ssg-in-plain-english-5h3b</link>
      <guid>https://dev.to/heymich/client-side-rendering-server-side-rendering-and-ssg-in-plain-english-5h3b</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;As a web developer, this may probably not be the first time you'll be hearing these terms. And if it is, I'm sure you're curious to know what the differences and similarities between these technologies are as they're almost everywhere and are essential for you to know as a web developer (You'll know just why in few minutes!).&lt;br&gt;
You may have come across fantastic articles and resources that have tried to explain these terminologies, but still, you forget or maybe had no idea what some of those contents were talking about. It is my hope that this will be the last article you'll have to read to understand CSR, SSR, and SSG, using words and examples that you can easily relate with. If you believe this is possible, let's ride!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serverside-rendering-ssr"&gt;
  &lt;/a&gt;
  Server-side Rendering (SSR)
&lt;/h3&gt;

&lt;p&gt;SSR is the traditional method of developing websites and applications before the emergence of SPAs (Single Page Applications) and web-apps. As a matter of fact, what was popular in the early days of the web was the idea of web-pages. A company develops a landing page advertising a product with very little content and a little sub-pages, if any, which are usually static texts and images without presenting any form of interaction to the user.&lt;br&gt;
This architecture is the oldest in web development and is based primarily on client-server communication where the client requests for a page and the server sends the already-generated HTML file. In this type of development, the server is responsible for most of the heavy duties such as rendering and parsing the HTML into a useful file and all the browser or client does is to render the static file to the user.&lt;/p&gt;

&lt;p&gt;But what is a web server? According to Wikipedia:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A web server is computer software and underlying hardware that accepts requests via HTTP (the network protocol created to distribute web content) or its secure variant HTTPS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's further explanation of the definition if it doesn't make much sense to you:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Underlying components&lt;/strong&gt; -&amp;gt; A typical web server has two components, the software and hardware components. Examples of the software components include the operating system installed on the sever, databases, file system, etc. Examples of hardware components are, the computer memory (e.g. RAM), processors, power chips etc. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Web content&lt;/strong&gt;  -&amp;gt; A server serves mainly static contents, i.e. files that do not change. Examples are, HTML files, images, and CSS. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTTP (Hypertext Transfer Protocol)&lt;/strong&gt; -&amp;gt; It's simply a set of standards and rules that specify how information and resources are shared between entities on the internet (e.g. a client and a server). &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;HTTPS (Hypertext Transfer Protocol Secure)&lt;/strong&gt; -&amp;gt; It's a more secure variant of HTTP that adds additional layers of security to communication between entities on the internet.&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Even you can create a web server. Your PC or desktop computer with an operating system (software) and uninterrupted power supply can serve a few websites depending on your system memory capacity (hardware) to anybody who can connect to it.&lt;br&gt;
Examples of web servers are Apache, Nginx (pronounced 'engine x'), Google Web Server (GWS), etc. A client on the other hand is any device that requests for any content on the server. An example of a client is a user's browser.&lt;/p&gt;

&lt;p&gt;Here is an illustration to show how server-side rendered web-pages are delivered to the end-user:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TeJZZ7ZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kog1mqvvs7dyv0awjpyb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TeJZZ7ZU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kog1mqvvs7dyv0awjpyb.png" alt="Server-side rendering" width="767" height="413"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This traditional approach definitely has its benefits and also some downsides and is why there are emerging technologies such as CSR and SSG to minimize the disadvantages while preserving the advantages. &lt;/p&gt;

&lt;p&gt;Some of the pros and cons are discussed below:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Good for Search Engine Optimization (SEO)&lt;/strong&gt;  -&amp;gt; Since the server sends already-generated page contents, the web-page is readily available for web crawlers to index and this helps in our website ranking across search engines.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Good for static sites&lt;/strong&gt; -&amp;gt; SSR favors static sites because they require little user interactivity and this helps to reduce the load on the server and minimizes computing power and resource usage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Not great for apps with high user-interactivity&lt;/strong&gt; -&amp;gt; Applications that require high user inputs and are based on repeated client-server communication will be a bad idea to be developed with SSR. This is because a request is being made to the server on every page visit and every click of a button or any event-response based actions performed by the end user. Doing this generates heavy load on the server and may affect the server performance or in the worse case, leads to the server shutting down.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Slow subsequent page load&lt;/strong&gt; -&amp;gt; The initial load times of SSR web-pages are usually fast but when subsequent page requests are made, the content is fetch all over again even if there's been no changes to the markup.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Frequent server requests&lt;/strong&gt; -&amp;gt; For a web-page to be delivered in this system, the client has to make a request to the server for this each time a page is needed to be displayed. This way, too much trips are made to the server which increases the load on the server and may stress the computing power and overall performance of the server.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Browser APIs are unavailable&lt;/strong&gt; -&amp;gt; Since most of the page content are processed and rendered on the server, there's really no way to interact with browser APIs that are only accessible on the client-side.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples of technologies we can use for server-side rendering are, NextJS, GatsbyJS, etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consider-ssr-if"&gt;
  &lt;/a&gt;
  Consider SSR if:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The website you are building doesn't require end-user interaction. Examples are news websites, personal blogs, etc.&lt;/li&gt;
&lt;li&gt;You have a little number of web-pages to deliver, consider using SSR.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#clientside-rendering-csr"&gt;
  &lt;/a&gt;
  Client-side Rendering (CSR)
&lt;/h3&gt;

&lt;p&gt;CSR is the complete opposite of SSR. Here, the browser is solely responsible for the tasks of parsing, rendering and displaying the page contents. CSR became very popular with the emergence of Single-Page Applications (SPAs). This development architecture relies heavily on the user's browser (the client) to process, parse, and render contents before they are displayed to the user. How this works is that the server sends an almost empty HTML file to the browser and also with it the JavaScript code needed for the website functionality because the server cannot run the JS code. The browser then parses and compiles this code and then populates the web-page with the HTML, JS code, and CSS using its own resources before the page content is finally rendered to the user and before any user actions are implemented, such as clicking a button to submit a form.&lt;/p&gt;

&lt;p&gt;There's need for CSR because of evolution of the web. The web has gone past serving end-users static contents and web-pages that are unresponsive and provide little or no interesting user experience.&lt;/p&gt;

&lt;p&gt;It is very unlikely that you won't use any of the browser APIs when building client-side rendered applications. In fact, there is no way to build CSR apps without using any of the browser APIs. This is because they are needed to provide interactive applications and the server doesn't provide any of these. One of the browser APIs that you can't do without is the Document Object Model API (DOM API). Granted, you may not be aware of some of these APIs being used, but a third party library you are using in the project may be using it behind the scenes.&lt;/p&gt;

&lt;p&gt;Often times, CSR applications usually require JavaScript to be enabled on the client, i.e. the browser for them to render any content. Take this React application for example:&lt;/p&gt;

&lt;p&gt;This is a simple react application bootstrapped with &lt;code&gt;yarn create react-app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you run this command to create a new React project, and you then start the development server, you should see the application running in your browser on &lt;code&gt;localhost:3000&lt;/code&gt; if everything went well:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qdSgL5LR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8y6ldqetwfjgwi3k1od.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qdSgL5LR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8y6ldqetwfjgwi3k1od.png" alt="A simple react app" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if you get the above on your browser, it means JavaScript is currently enabled in your browser. And now, we'll disable it to see if our app will work as intended or not. To disable JavaScript on your browser, if you're using Chrome open the Developer Tools with &lt;code&gt;CTRL + Shift + J&lt;/code&gt; on Windows. Then open the Settings tab with &lt;code&gt;Shift + ?&lt;/code&gt;, scroll down to &lt;strong&gt;Debugger&lt;/strong&gt; and under it check the box that says &lt;code&gt;Disable JavaScript&lt;/code&gt;.&lt;br&gt;
Reload the page and then you'll see that your app isn't looking as before. The animated React logo is gone, everything we saw before is no more displayed. The page is empty but with just a text that says &lt;strong&gt;You need to enable JavaScript to run this app.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CVoGFrwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emoiwraa7zi0e3x0dtj1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CVoGFrwF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/emoiwraa7zi0e3x0dtj1.png" alt="You need to enable JavaScript to run this app" width="880" height="656"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's totally fine if you have no idea what React is or how it works. The result is pretty much the same if you're using other client-side JavaScript libraries/frameworks like Vue, Svelte, etc. &lt;br&gt;
This is just a basic app in React to demonstrate the importance of JavaScript in any client-side rendered application. &lt;/p&gt;

&lt;p&gt;Side-note: The process of rendering page contents to the user in a browser is a different topic on its own and we won't dive into it in this article. However, I'll provide links to resources that will solidify your understanding of rendering in the browser at the end of the article. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#examples-of-csr-technologies"&gt;
  &lt;/a&gt;
  Examples of CSR Technologies
&lt;/h4&gt;

&lt;p&gt;These include most JavaScript web frameworks and libraries such as ReactJS, NextJS, VueJS, AngularJS, among others.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros-and-cons-of-clientside-rendering"&gt;
  &lt;/a&gt;
  Pros and Cons of Client-side Rendering
&lt;/h4&gt;

&lt;p&gt;While a lot of web applications today are built on this architecture, it's essential we pay attention to the pros and cons of this technology. And also help us decide when each of these technologies fits our development needs best.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Great for apps with high user interactivity&lt;/strong&gt; -&amp;gt; There's a minimal server-client requests being made in this type of development, therefore, websites and apps that work based on this architecture are good for applications that require a lot of user interaction.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Fast subsequent page load time&lt;/strong&gt; -&amp;gt; The initial of the CSR applications downloads all the required code and assets that are needed to build the entire website. Therefore, since there are no server requests to ask for resources for page loads because most of the routes have been fetched during the initial page load, subsequent load times for pages are usually faster.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Slow initial load time&lt;/strong&gt; -&amp;gt; Due to an almost empty HTML file being sent to the browser in the first page load and a heavy amount of code being received, there's a slow rendering of the page content. If the client's internet speed is slow, all they get to see on the screen is a blank page (or a fancy loading animation to keep our user's patience) which is bad for user experience. &lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Poor SEO&lt;/strong&gt; -&amp;gt; While the browser is busy parsing the server code, web crawlers scan our site for links and text and all they see is an almost empty page or a few link and texts, they ignore our site and move to other sites with better SEO. &lt;/li&gt;
&lt;/ul&gt;




&lt;h4&gt;
  &lt;a href="#consider-csr-when"&gt;
  &lt;/a&gt;
  Consider CSR when:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Building interactive and feature-rich applications. E.g, chat apps, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#staticsite-generation-ssg"&gt;
  &lt;/a&gt;
  Static-site Generation (SSG)
&lt;/h3&gt;

&lt;p&gt;Static-site generation as the name implies is the pre-rendering of contents that do not change on the server. In SSG, static page contents are rendered on &lt;strong&gt;build-time&lt;/strong&gt; as opposed to SSR where page contents are rendered during &lt;strong&gt;run-time&lt;/strong&gt; or request time.&lt;/p&gt;

&lt;p&gt;What is build time? It's that process when the developer runs the code that optimizes all the static files that are required for making the site and are rendered on the server and then are delivered to a Content Delivery Network (CDN) that will eventually serve these pages to the user.&lt;br&gt;
It's very much similar to SSR and have a number of advantages over SSR which we'll discuss below.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Initial and subsequent page loads are fast&lt;/strong&gt; -&amp;gt; Static sites have contents that have been pre-rendered on the server and this makes the initial load time really fast. Subsequent page loads are also fast since the site's contents have been cached by a CDN that delivers these pages upon request without waiting for them to be re-rendered again.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Up-to-date content&lt;/strong&gt; -&amp;gt; Static sites have up-to-date page contents since upon every change that is made the site is re-built and the user always have updated content on every page request.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Good SEO&lt;/strong&gt; -&amp;gt; SSG presents good SEO as there is in SSG.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Security&lt;/strong&gt; -&amp;gt; Static sites usually have better protection from security risks since they are hosted on CDNs which provide additional layer of protection against malicious attacks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Frequent page rebuilds&lt;/strong&gt; -&amp;gt; When changes are made to statically generated sites, there's need to perform rebuilds upon every change that is made in order to serve users with up-to-date content.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Build-time is proportional to site's content&lt;/strong&gt; -&amp;gt; Build-times may become longer than imagined when you have a few hundreds to thousands of pages to build. This means the build-time grows as your pages and contents grow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples of Static-site generators include, Next, Gatsby, Hugo, Eleventy, among others. You can check &lt;a href="https://www.staticgen.com"&gt;Staticgen&lt;/a&gt; for a comprehensive list of generators that might suit your need. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#consider-ssg-when"&gt;
  &lt;/a&gt;
  Consider SSG when:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;You are building a site whose primary function is to deliver content and large sites with hundreds or thousands (Okay, I'm exaggerating. Maybe not) of pages.&lt;/li&gt;
&lt;li&gt;You are building your next blog site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Phew, that's a lot to take in! I wasn't expecting this article to be this long. Anyways, congratulations if you made it this far!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Our ability to choose the best technologies that fit our development needs will surely determine the general performance and health of the applications that we build. Now you know why it's essential that you understand the underlying principles and ideas behind these technologies.&lt;br&gt;
I believe by now you should be able to make informed decisions about which option you should go with when you're building your next bad-ass web project!&lt;br&gt;
And after reading this article, I hope you'll be able to answer anyone who asks you anything about CSR, SSR or SSG, confidently!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#come-lets-be-friends"&gt;
  &lt;/a&gt;
  Come, let's be friends
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yro9uVyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwqy1rk62t1fnzm0lpbn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yro9uVyi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rwqy1rk62t1fnzm0lpbn.jpeg" alt="Jide-kosoko meme" width="299" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you found this article helpful, you may consider following me for more contents on full-stack JavaScript development and lots more!&lt;/p&gt;

&lt;p&gt;You can also say hi on &lt;a href="https://twitter.com/michaelhungbo"&gt;Twitter&lt;/a&gt; üòä&lt;/p&gt;

&lt;p&gt;See you around!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Blockchains do a lot more than you think</title>
      <author>Syed Faraaz Ahmad</author>
      <pubDate>Fri, 31 Dec 2021 18:43:56 +0000</pubDate>
      <link>https://dev.to/faraazahmad/blockchains-do-a-lot-more-than-you-think-58li</link>
      <guid>https://dev.to/faraazahmad/blockchains-do-a-lot-more-than-you-think-58li</guid>
      <description>&lt;p&gt;Look, I get it.&lt;/p&gt;

&lt;p&gt;The past few years have been full of cryptocurrency scams, thinly veiled Ponzi schemes, widespread art fraud for NFTs, and all the other stuff that didn't make the news. Blockchains have been the underlying tech powering all of that, so you have no reason to be be lending any of your trust to them.&lt;/p&gt;

&lt;p&gt;Yes, blockchains are overhyped, and yet they do a lot of good work that you haven't heard of. Just because there are people being stabbed with knives doesn't mean someone somewhere isn't doing a &lt;a href="https://www.youtube.com/watch?v=dCGS067s0zo"&gt;masterful job cutting onions!&lt;/a&gt; (weird analogy but bear with me for a moment)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-where-are-all-the-onion-masters"&gt;
  &lt;/a&gt;
  So where are all the onion masters?
&lt;/h4&gt;

&lt;p&gt;All right, lets assume blockchains actually do some good stuff. Then why haven't I heard about them? Where is that big app that will make me believe in blockchains?&lt;/p&gt;

&lt;p&gt;Unfortunately, the answer is not very simple.&lt;/p&gt;

&lt;p&gt;No one is going to use something just because its built on blockchains. It has to be good enough to be the best option to choose at the time, never mind what tech is used to build it. Let me explain a bit why a blockchain could be needed.&lt;/p&gt;

&lt;p&gt;I'll raise you a scenario -- You're happily (or begrudgingly) working along on that task that you need to finish by tonight. Maybe it is so boring and soul-crushing that you're starting to contemplate leaving your job. But that doesn't matter right now,  you're already 2 weeks late and you've run out of excuses. So your only option is to grind through, pull up some NPM packages and finally finish that damn thing.&lt;/p&gt;

&lt;p&gt;But wait here's the fun part, &lt;strong&gt;NPM is down&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jsfJLpPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FGwZTczXwA4djk5%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jsfJLpPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FGwZTczXwA4djk5%3Fformat%3Djpg%26name%3Dlarge" alt="NPM is down" width="880" height="916"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But that wont stop you today! You know that package's Github repo. So you go there, download and store it in your &lt;code&gt;node_modules&lt;/code&gt;. You hack along undeterred, convinced that you're going to finish it by tonight. Finally its done, reviewed and merged into the dev branch. But wait! Why's it not showing up on the site? The deploy seems to be failing. You google around, ask your team members who are going through their own personal hell, and then finally in your late night, coffee fueled frenzy open up twitter to check what the heck's going on.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCSv0P1l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FGqRZ3zVcAYJc_i.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hOQX5qGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1243355324/self_square_normal.jpg" alt="Zeb Palmer profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Zeb Palmer
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/zebpalmer"&gt;@zebpalmer&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      The &lt;a href="https://twitter.com/hashtag/AWS"&gt;#AWS&lt;/a&gt; status page is down, first time it's ever been accurate. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:00 PM - 15 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1471148104057458691" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1471148104057458691" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1471148104057458691" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Great. AWS is down again. So you just sit there like...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/tJDAeuB5NMtNUx1Swx/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/tJDAeuB5NMtNUx1Swx/giphy.gif" alt="I'm so done" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you look deeper than the surface level, these are problems that arise due to single points of failure. Its these problems that a decentralised network aims to fix. What's "decentralised"? well, it just means that no single entity is in control of the whole thing. If one node goes down, there's lots of other ones to keep it afloat. When you have your app hosted on a fairly large decentralised network (like ethereum), you essentially have a failsafe for the moment of a node failure. For when one node goes down, the app will just be moved to another node. &lt;/p&gt;

&lt;p&gt;Now you certainly don't need a blockchain for everything, especially if you have control of all the hardware on the network. But in blockchains when anyone can join the network from anywhere in the world, how do you know which node is a bad actor and which isn't. To put it differently, &lt;strong&gt;who do you trust?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/xT8qBnutCq8NxHOn5K/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/xT8qBnutCq8NxHOn5K/giphy.gif" alt="Mr. Robot GIF" width="480" height="258"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, you cant trust anyone over the internet. So you simply take trust out of the equation, that's why you'll often hear the word "trustless" in the context of blockchains. What enables these trustless networks are "consensus algorithms". Simply put, they make sure all the nodes are doing what they're supposed to. They reward the nodes that do good and in a way punish those who don't.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-on-to-the-onion-masters"&gt;
  &lt;/a&gt;
  Now on to the onion masters.
&lt;/h3&gt;

&lt;p&gt;Hopefully my rambling has made at least some sense to you and you see value in the existence of the blockchain. Now lets introduce you to some of the big (and small) names taking the industry forward:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gSCFTO3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5ibxpdcf9b0jnk73n3s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gSCFTO3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5ibxpdcf9b0jnk73n3s.png" alt="Ethereum homepage" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ethereum-website-link"&gt;
  &lt;/a&gt;
  Ethereum &lt;a href="https://ethereum.org"&gt;(Website link)&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Unlike Bitcoin, which was made to be a currency, Ethereum lets you write something called "Smart Contracts" which basically enable you to run your app on the blockchain. This way your app is up 24/7 and you wont have to deal with &lt;strong&gt;us-east-1&lt;/strong&gt; going down yet again. Although, the main Ethereum network has become quite slow and has a very high transaction fees, there are Level 2 chains that are built on top of Ethereum and are faster and cheaper (but that's a topic for another day).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hZuAtZfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tke9m0uera0tans2gdl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hZuAtZfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4tke9m0uera0tans2gdl.png" alt="Filecoin website" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#filecoin-website-link"&gt;
  &lt;/a&gt;
  Filecoin &lt;a href="https://filecoin.io"&gt;(Website link)&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;What if you have a lot of important files stored on Dropbox and it goes down just as you want to access one of them? Yes, we're back to that idea of the centralised service that can fail anytime. Filecoin is another blockchain that stores files on a decentralised network. Anyone who stores the files reliably on the network, is paid "Filecoin" (its the name of the organisation AND the cryptocurrency) and whenever someone wants to retrieve those files, they need to pay Filecoin. Think Dropbox, but where all the servers that store data are owned by unrelated individuals around the world who're paid to reliably store data. There's a very good introduction about Filecoin over at their website, I highly encourage you to check it out.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fleek-website-link"&gt;
  &lt;/a&gt;
  Fleek &lt;a href="https://fleek.co"&gt;(Website link)&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lw7sXVaK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5il0tuzwl2eoivlqd5dp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lw7sXVaK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5il0tuzwl2eoivlqd5dp.png" alt="Image description" width="880" height="428"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember how I told you your app can go offline anytime the centralised cloud you're hosting it on experiences an outage? Here's the alternative. Fleek is a "cloud provider" that lets you host apps on Ethereum and files on Filecoin to get rid of the single point of failure problem. It's as easy to use as any cloud provider &lt;a href="https://www.reddit.com/r/aws/comments/h09wl5/dear_aws_stop_ruining_the_freaking_console_ui_rant/"&gt;(probably easier)&lt;/a&gt;. This whole goes back to the concept of being the best tool to use irrespective of the underlying tech.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#thirdweb-website-link"&gt;
  &lt;/a&gt;
  ThirdWeb &lt;a href="https://thirdweb.com"&gt;(Website link)&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VZ1mfxl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wj5kbn61qy6tanw8ob0f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VZ1mfxl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wj5kbn61qy6tanw8ob0f.png" alt="Image description" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like any new technology, building for blockchains is initially hard and cumbersome. It's not as bad as writing machine code by hand, but its certainly not as easy as scaffolding an app with Ruby on Rails (if you know you know). You need to write smart contracts in another language called Solidity, or in the case of &lt;a href="https://solana.com/"&gt;Solana&lt;/a&gt;, you need to write it in Rust. And deploying your app to the chain is certainly not as easy as a &lt;code&gt;git push&lt;/code&gt;ing your Node.js app. But all is not lost, ThirdWeb has recently come up with SDKs in languages like Javascript, Python and Go which makes astonishingly easy to write and deploy "web3" code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qq1A1C94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1vx1tp8lre21gcegl9m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qq1A1C94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1vx1tp8lre21gcegl9m.png" alt="Image description" width="880" height="604"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#take-back-control"&gt;
  &lt;/a&gt;
  Take back control
&lt;/h3&gt;

&lt;p&gt;If you've made it this far into the post you probably see a pattern in all these services. These systems are set up in a way that takes power away from a centralised entity and distributes it to the individual nodes. Ideally these individual nodes are run by one person or a small group of people (which is where a potential problem lies).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#its-not-all-sunshine-and-rainbows"&gt;
  &lt;/a&gt;
  It's not all sunshine and rainbows
&lt;/h3&gt;

&lt;p&gt;If everything goes well, blockchain tech will take away or at least reduce the power held by big tech companies (Meta, Amazon, Apple, Google, Microsoft, etc.). What's bad about them having all this power? Well, if they one day decide to be more greedy, there won't be a viable option elsewhere and people will just have to follow suit regardless. Sure, legal courts can intervene. But that process starts when the damage has already been done, and to be fair legal proceedings can take a fairly long time.&lt;/p&gt;

&lt;p&gt;But there's a loophole in blockchains too. It's fine if each person runs one node, then the system is truly decentralised and each person gets their own say. But nothing's stopping you from pooling resources with people and start a crypto mining farm that out competes most single person nodes, and essentially centralises power again (we're already seeing this happen extensively). And remember big tech and its &lt;em&gt;prophecised&lt;/em&gt; demise? Well, nothing's stopping them to start their own mining farm and earn through that.&lt;/p&gt;

&lt;p&gt;The mere existence of blockchain does not guarantee a better future for tech. It has to be actively worked on by enthusiastic developers in every corner to make it work. Or else, it will be just another piece of tech that gets dominated by soulless large corporations whose only aim is to make profits. Which is why you will see supporters of blockchain or "web3" hype it up so much. It is to get more individuals get involved and have a majority stake in it, so that when the big corporations want to have a piece of it, they can only be a minority.&lt;/p&gt;

&lt;p&gt;So will you help bring power back to the individual or will you let big tech have it all? Will you take the blue pill or the red pill?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You take the blue pill, the story ends. You wake up in your bed and believe whatever you want to believe. You take the red pill, you stay in Wonderland, and I show you how deep the rabbit hole goes&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/zE7PKRjrid4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;NOTE: I am in no way affiliated to or supported by any of the above services. I don't even hold any Ethereum (!)&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>web3</category>
      <category>systems</category>
      <category>security</category>
    </item>
    <item>
      <title>Using TypeScript `paths` and `baseUrl` with Parcel</title>
      <author>Alexey Yakovlev</author>
      <pubDate>Fri, 31 Dec 2021 18:31:54 +0000</pubDate>
      <link>https://dev.to/yakovlev_alexey/using-typescript-paths-and-baseurl-with-parcel-204h</link>
      <guid>https://dev.to/yakovlev_alexey/using-typescript-paths-and-baseurl-with-parcel-204h</guid>
      <description>&lt;p&gt;You might have heard about the new kid on the block of build tools for web - &lt;a href="https://parceljs.org"&gt;Parcel&lt;/a&gt;. It combines great scalable architecture with amazing zero-configuration developer experience while being lightning fast at the same time. You might have even thought about trying it out and maybe moving one of your TypeScript projects to it.&lt;/p&gt;

&lt;p&gt;Unfortunately, if you were leveraging &lt;code&gt;paths&lt;/code&gt; and &lt;code&gt;baseUrl&lt;/code&gt; TypeScript Compiler options you will likely not have a great time moving - &lt;a href="https://parceljs.org/features/dependency-resolution/#typescript"&gt;Parcel does not support these properties out of the box&lt;/a&gt;. This might be a huge problem for big codebases. You may also prefer TypeScript Compiler's way of handling absolute imports in your project to Parcel's &lt;code&gt;~&lt;/code&gt; notation. This was the case for me so I decided to try out Parcel plugin ecosystem and create a &lt;a href="https://parceljs.org/plugin-system/resolver/"&gt;Resolver Plugin&lt;/a&gt; of my own to solve this issue.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parcelresolvertsbaseurl"&gt;
  &lt;/a&gt;
  parcel-resolver-ts-base-url
&lt;/h2&gt;

&lt;p&gt;The plugin I created is called &lt;a href="https://www.npmjs.com/package/parcel-resolver-ts-base-url"&gt;&lt;code&gt;parcel-resolver-ts-base-url&lt;/code&gt;&lt;/a&gt; (name &lt;code&gt;parcel-resolver-tspaths&lt;/code&gt; was already taken by an outdated resolver). It has 0 dependencies (except for peer Parcel, of course), weighs barely over 1kb and uses memoization to speed up resolution processes.&lt;/p&gt;

&lt;p&gt;You can install &lt;code&gt;parcel-resolver-ts-base-url&lt;/code&gt; using npm or yarn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; parcel-resolver-ts-base-url
&lt;span class="c"&gt;# or&lt;/span&gt;
yarn add &lt;span class="nt"&gt;-D&lt;/span&gt; parcel-resolver-ts-base-url
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then simply add &lt;code&gt;parcel-resolver-ts-base-url&lt;/code&gt; to your &lt;code&gt;.parcelrc&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"extends"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@parcel/config-default"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"resolvers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"parcel-resolver-ts-base-url"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;At the moment parcel doesn't provide a way I know of to specify &lt;code&gt;tsconfig.json&lt;/code&gt; location. Therefore &lt;code&gt;parcel-resolver-ts-base-url&lt;/code&gt; will use &lt;code&gt;tsconfig.json&lt;/code&gt; from the project root.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From this point usage will be straightforward - just specify desired aliases in &lt;code&gt;paths&lt;/code&gt; property and projects &lt;code&gt;baseUrl&lt;/code&gt; and start building without ugly relative imports!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#known-issues-and-limitations"&gt;
  &lt;/a&gt;
  Known Issues and Limitations
&lt;/h2&gt;

&lt;p&gt;At the moment this plugin is pretty raw and have not been tested in a large amount of use cases. So I figured it would be important to specify what to look for when using &lt;code&gt;parcel-resolver-ts-base-url&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What will work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;baseUrl&lt;/code&gt; imports&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;paths&lt;/code&gt; aliases without and with a single wildcard&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;paths&lt;/code&gt; and &lt;code&gt;baseUrl&lt;/code&gt; imports resolving to a npm package with &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;module&lt;/code&gt; fields&lt;/li&gt;
&lt;li&gt;Imports resolving to a folder with an index file&lt;/li&gt;
&lt;li&gt;Imports resolving to files with &lt;code&gt;/(c|m)?jsx?/&lt;/code&gt; and &lt;code&gt;/tsx?/&lt;/code&gt; extensions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What will likely not work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HMR is untested and might not work&lt;/li&gt;
&lt;li&gt;Resource imports and imports with specified extensions are not supported&lt;/li&gt;
&lt;li&gt;Aliases leading to &lt;code&gt;node_modules&lt;/code&gt; will not be resolved as external dependencies&lt;/li&gt;
&lt;li&gt;Custom &lt;code&gt;tsconfig.json&lt;/code&gt; names and locations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are having other issues please consider leaving feedback at &lt;a href="https://github.com/yakovlev-alexey/parcel-resolver-ts-base-url/issues"&gt;GitHub Issues&lt;/a&gt; - any feedback would be greatly appreciated. And if you are willing to contribute with solving one of the issues I would be very glad to receive a Pull Request with your solution.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>parcel</category>
    </item>
    <item>
      <title>My YouTube Journey as a Web Developer. Will I quit YouTube in 2022?</title>
      <author>Chaoo Charles</author>
      <pubDate>Fri, 31 Dec 2021 18:23:34 +0000</pubDate>
      <link>https://dev.to/chaoocharles/my-tough-youtube-journey-as-a-web-developer-will-i-quit-youtube-in-2022-2el0</link>
      <guid>https://dev.to/chaoocharles/my-tough-youtube-journey-as-a-web-developer-will-i-quit-youtube-in-2022-2el0</guid>
      <description>&lt;p&gt;Hey my name is Charles, a JavaScript Developer from Africa, Kenya. In this post, I will mainly talk about my YouTube journey as a web developer. How much have I earned? What are the challenges? Is it worth it? Will I quit in 2022? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If you wish to check out my channel, here is the link: &lt;a href="https://youtube.com/chaoocharles"&gt;https://youtube.com/chaoocharles&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#section-1"&gt;Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#section-2"&gt;Why did I start YouTube?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#section-3"&gt;Choosing a niche&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#section-4"&gt;Getting Monetized&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#section-5"&gt;Upwork Freelancing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#section-6"&gt;YouTube Money&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#section-7"&gt;Challenges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#section-8"&gt;My 2022 YouTube Goals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#section-9"&gt;Take Away&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#section-10"&gt;Support My Content&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#analytics"&gt;
  &lt;/a&gt;
  Analytics &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6c8UvOxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smcdq3ohn1exvaw8v7cj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6c8UvOxV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/smcdq3ohn1exvaw8v7cj.PNG" alt="YouTube Analytics" width="880" height="478"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me breakdown these analytics for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Total Subscribers:&lt;/strong&gt; 4.7k subscribers&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Videos:&lt;/strong&gt; 126 video uploads&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Period:&lt;/strong&gt; 2.5 years (since jul 2019)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Total Views:&lt;/strong&gt; 244,998 views&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Total watch time:&lt;/strong&gt; 10.9 hours&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Total ad revenue:&lt;/strong&gt; $374 (10 months)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Donations revenue&lt;/strong&gt; $38&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Revenue from YouTube Opportunities (clients)&lt;/strong&gt;: $780 (3 clients, one premium course)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#why-did-i-start-youtube"&gt;
  &lt;/a&gt;
  Why did I start YouTube? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As you can see from the above analytics, I have been uploading content since jul 2019, that is approximately &lt;strong&gt;2.5yrs&lt;/strong&gt; ago. I wasn't consistent with my uploads though. I was still a student pursuing an I.T degree and in the last semester of my 3rd year. Like many students, I was broke and raised from a humble background. Therefore, before starting my channel I was thinking of different ways I could generate some passive income online while studying.&lt;/p&gt;

&lt;p&gt;By the way I graduated this year (2021) üéâ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--06_Jj5zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mku6k15fskhu0upavsz4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--06_Jj5zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mku6k15fskhu0upavsz4.jpg" alt="my graduation" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I explored many options. I tried freelancing on Upwork, but the journey at Upwork was tough and I didn't get even a single client after applying on several projects. And then I thought of YouTube. I knew that YouTube would not start paying me any time soon, but the idea of it paying me by the time I graduate was awesome. At least I would have something to keep me busy before I got a full-time job. This is what motivated me to start uploading.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choosing-a-niche"&gt;
  &lt;/a&gt;
  Choosing a niche &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I watched many advisory YouTube videos before settling for a niche. First I had thought of gaming, I thought this was easier because I would be having fun while doing it. The challenge was that my laptop is a low level laptop (it's what I'm still using even when writing this post). I remember my classmates joking about it, they used to call it CRT üòÇüò≠ I still call it that way, lol. I will share the specs later in the post.&lt;/p&gt;

&lt;p&gt;So, gaming failed like nobody's business üòÇ. I thought of vlogs but then I didn't have a camera, not even a phone with a nice camera. Since I was pretty comfortable working with HTML, CSS and React, I settled with web development tutorials. This didn't require a powerful PC nor a camera. It just needed a screen recorder, a microphone(I have been using a phone for this for a long time), a vs code, a chrome browser and me at work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-monetized"&gt;
  &lt;/a&gt;
  Getting Monetized &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I have never seen anything hard in life like being monetized on YouTube üò≠ The momentum of uploading videos also goes from 100 to 0 real quick after just a few uploads. This is mainly so when you don't have any other social following to give you the initial boost. &lt;/p&gt;

&lt;p&gt;The requirement for monetization is &lt;code&gt;1k subs&lt;/code&gt; and &lt;code&gt;4k hours&lt;/code&gt; of watch time. This bar is so high and I uploaded videos for almost 2 years without getting a penny from YouTube. But this might have been because of many reasons like &lt;em&gt;lack of consistency&lt;/em&gt; with my uploads, &lt;em&gt;sh*tty content&lt;/em&gt;, &lt;em&gt;bad English&lt;/em&gt; and many other factors. But who cares? I was definitely trying my best.&lt;/p&gt;

&lt;p&gt;For me to keep uploading, I had to switch my mindset from getting money from YouTube to just helping and teaching others. This is still my mindset, otherwise, if it was just for money I would have quitted a long time ago. &lt;/p&gt;

&lt;p&gt;I got my first 100 subs from my classmates and friends, but only about 3 of them were actually watching my content üòÇ I was getting very little watch time from them and my videos were hardly getting over 50 views. I had to learn different ways of boosting my videos. That is when I realized reddit existed, that is when I learned about this DEV site and I'm happy to be here by the way üòç You guys got me to 1k subs ü•≥&lt;/p&gt;

&lt;p&gt;I joined several Facebook groups but I was banned from most of them for spamming them with my low quality content üò£ I had to simply improve the quality and that is exactly what I did. After dropping two good react and MERN stack series, I got to 1k subs and even got the 4k watch time. I was monetized on march 2021&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#upwork-freelancing"&gt;
  &lt;/a&gt;
  Upwork Freelancing &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I wasn't earning a sh*t from YouTube for a long time, but man must pay bills and eat. I therefore started freelancing again on Upwork in 2020. I had more time since all schools had been closed due to covid-19. This time round I got a few clients, and I could earn a little while creating content. I was doing small projects like fixing bugs and cloning designs to html and CSS. I didn't manage to get good paying projects on Upwork so I quitted after a few months. But my Upwork profile is still solid. Maybe I might go back later in life üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JD-sX-Vs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njl26e65z2dp77msuv9f.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JD-sX-Vs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njl26e65z2dp77msuv9f.PNG" alt="Upwork" width="747" height="231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#youtube-money"&gt;
  &lt;/a&gt;
  YouTube Money &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;I thought that I would become a millionaire once I was monetized on YouTube. I'm still broke and it doesn't work that way üòÇ To generate enough revenue from ads, the videos should be getting good viewership. Right now I get about 500 views per day on average. This makes between $1 to $3 per day&lt;/p&gt;

&lt;p&gt;As you can see, I'm hardly making money from YouTube ads. Despite having a deep passion on content creation, I'm still heavily relying on freelancing and it's so hard to focus on YouTube fulltime as for now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  Challenges &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Shitty setup - Shitty content&lt;/strong&gt; - although you can just start YouTube with whatever equipment that you have, sometime the equipment can greatly affect the quality. I'm still using my shitty setup üëá (but it's way better than nothing üòä)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ID9qcnq6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gpc6cugjpvuadf6lpis.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ID9qcnq6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gpc6cugjpvuadf6lpis.jpg" alt="setup" width="880" height="608"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My laptop is very low level, 3gb ram, core 2 duo CPU. Hangs a lot when recording, can't do heavy video editing. I bought this laptop from my students loan and it really helped me to study coding and even complete my studies. I still use a budget phone for audio (Samsung A22 4g) - Bought with freelance money.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of consistency&lt;/strong&gt; - With school work it was so hard to be consistent with my video uploads. Tutorials are not easy to create, they require research time(even when you know the topic very well), recording and editing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#my-2022-youtube-goals"&gt;
  &lt;/a&gt;
  My 2022 YouTube Goals &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Will I be quitting YouTube in 2022? Hell No! I am more ready and pumped up than ever before. I once wished to be monetized on YouTube and now I am. I once wished to get to 1k subs and now I am at 4.7k. &lt;/p&gt;

&lt;p&gt;Some channels which started around the same period as mine grew so big (e.g dev ed and web dev simplified with over 700k subs) and mine is still so tiny. This tells me how big the room for growth and improvement is. As long as I get to help at least one person, I'm good to go.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The following are my 2022 YouTube goals:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Become a bit more consistent. At least one well curated video per week&lt;/li&gt;
&lt;li&gt;Work my ass off and upgrade my setup for better quality content&lt;/li&gt;
&lt;li&gt;Get to 20k subs&lt;/li&gt;
&lt;li&gt;Earn at least $300+ per month from YouTube ads Revenue&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#take-away"&gt;
  &lt;/a&gt;
  Take Away &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you are looking forward to start a YouTube Channel or if you already have one, the following is what you can take a way from this post.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can start YouTube with any equipment you have, but strive to upgrade to better one.&lt;/li&gt;
&lt;li&gt;Be consistent with uploads, your content will go a long way that way.&lt;/li&gt;
&lt;li&gt;Share your content on other platforms but do not spam like I did. Otherwise you will be kicked out&lt;/li&gt;
&lt;li&gt;Have a side hustle. Otherwise you will die of hunger. Small channels earn peanuts.&lt;/li&gt;
&lt;li&gt;Try to improve your content with every upload.&lt;/li&gt;
&lt;li&gt;If you want to start YouTube, the best time is now. &lt;/li&gt;
&lt;li&gt;Be humble and be yourself. I'm still learning to be myself though coz I don't know who I am üòÇ&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#support-my-content"&gt;
  &lt;/a&gt;
  Support My Content &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Your support will help me to upgrade my setup for better quality content and more videos per month.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Subscribe (Get me closer to 5k subs): &lt;a href="https://youtube/chaoocharles"&gt;https://youtube/chaoocharles&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Donate with PayPal: &lt;a href="https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=NZCBMP9V54G9J&amp;amp;source=url"&gt;Chaoo Charles PayPal Link&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Support via Patreon: &lt;a href="https://www.patreon.com/chaoocharles"&gt;https://www.patreon.com/chaoocharles&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#other-links"&gt;
  &lt;/a&gt;
  Other Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;I'm on Twitter: &lt;a href="https://twitter.com/ChaooCharles"&gt;https://twitter.com/ChaooCharles&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Stalk My Portfolio: &lt;a href="https://chaoocharles.dev/"&gt;https://chaoocharles.dev/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Join My Discord Server: &lt;a href="https://discord.gg/WGqJ2CZebb"&gt;https://discord.gg/WGqJ2CZebb&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;If you have a blog or a YouTube Channel, share it below. I will definitely check it out. Also I'm sure others would like to see what you are creating.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Happy New Year Everyone üéâü•≥ü•≥ü•≥&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>career</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Florence‚Äôs Year in Review</title>
      <author>Florence O. </author>
      <pubDate>Fri, 31 Dec 2021 18:07:05 +0000</pubDate>
      <link>https://dev.to/theflorz/florences-year-in-review-2438</link>
      <guid>https://dev.to/theflorz/florences-year-in-review-2438</guid>
      <description>&lt;p&gt;It‚Äôs the last day of the year and I look back at the multiple ups and downs, opportunities gained and opportunities lost, the lessons learned and everyone I met that helped shaped my journey, a whole lot happened this year that shaped me as a person and as a woman in tech.  Everything just makes me thrilled and excited for next year!&lt;/p&gt;

&lt;p&gt;Okayyy, let‚Äôs take it back to the beginning of 2021 and just kind of run through the wins, lessons, opportunities and fav highlights! ü§©&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/cyyac9sTiN7ji/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/cyyac9sTiN7ji/giphy.gif" width="432" height="308"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;First Quarter&lt;/h2&gt;

&lt;p&gt;This year began with so many uncertainties, I thought I knew what I wanted to get out of the year, I had planned to take on new programming languages, finish my program in school with an amazing grade, land an amazing job and connect with people far and wide. The school year started in Jan and with the lockdown, I had to take classes along with a training program in accordance with my course of study. Juggling school, the training program and freelancing as a web developer was really a lot to juggle but I was able to make it work until I ended the training program in March.&lt;/p&gt;

&lt;p&gt;By February, my contract with a firm had ended as a web developer and I went back fully into freelancing and got most of my clients from recommendations! I explored technical writing, wrote my first article - &lt;a href="https://dev.to/theflorz/how-to-make-wine-glasses-with-pure-html-css-328g"&gt;https://dev.to/theflorz/how-to-make-wine-glasses-with-pure-html-css-328g&lt;/a&gt;, published it on dev.to and it was a hit!! The article got me the top 7 badge ü•≥. That's not all, my second article - &lt;a href="https://dev.to/theflorz/nevertheless-florence-coded-because-nothing-can-stop-her-4m81"&gt;https://dev.to/theflorz/nevertheless-florence-coded-because-nothing-can-stop-her-4m81&lt;/a&gt; was a hit also and yes I got a shecoded badge for participating in this year's shecoded #IWD ü•≥. I also got to write product documentations for clients.&lt;/p&gt;

&lt;p&gt;I discovered badminton and loved every bit of it üè∏ &lt;/p&gt;

&lt;h2&gt;Second Quarter&lt;/h2&gt;

&lt;p&gt;Ah yes, more school, more learning and more freelancing. At this point, getting a job became scary because I felt like I wasn't good enough. What kind of brought me some sense of fulfilment was a project I got to work on with data analysts, we worked with PowerBI, MS excel to display interactive graphs, charts etc. I was able to work on more projects with the firm as a freelancer. &lt;/p&gt;

&lt;p&gt;I worked on projects that strengthened my frontend skills and WordPress skills, I was starting to implement dynamic websites and UI/UX designs using WP from scratch, who could have thought ? üòÖ&lt;/p&gt;

&lt;p&gt;More badminton.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6ZsYyNQumUyS9t72/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6ZsYyNQumUyS9t72/giphy.gif" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Third Quarter&lt;/h2&gt;

&lt;p&gt;Going into August, I started exploring and reading about Product/Project Management and oh did I fall in love with it. I had started talking to a few people about transitioning to Product Management and asking what that would look like, a friend and mentor Geektutor gave me a few pointers and it just made me love every aspect of PM more. &lt;/p&gt;

&lt;p&gt;I started taking a course on project management on Alison, I wasn't even done with the course before I went around telling people to recommend me for any project management roles. I don't know where that confidence came from myself but learning and doing the tasks just made me feel like yes, this is my thing, yes this is me, I love leading teams, I love overseeing project, yes! I can do this, this is all me! And oh did I land my first gig as a Project Manager(I am forever grateful to Caleb for trusting me)!&lt;/p&gt;

&lt;p&gt;This came with a few doubts and confusions, it was either product or project management, thankfully I had amazing people in my corner and I eventually decided to focus on product management. Oh the project manager role up there ? It got bumped up to product manager.&lt;/p&gt;

&lt;p&gt;Got a project management certification and finished my program with a first class!! Whoop Whoop! ü•≥&lt;/p&gt;

&lt;h2&gt;Fourth Quarter - The big wins!&lt;/h2&gt;

&lt;p&gt;I stepped into the last quarter of the year as a product manager working with an amazing team. Thankfully, I was able to put what I had learned to the test, I had to learn more on my own and I also learnt a lot working on the project. And I paid more attention to my body, started working out and eating healthy ü§©üí™üèæ.&lt;/p&gt;

&lt;p&gt;I also got a role as a web developer with Dira Labs and yes, I still freelanced lol. I landed my second PM role working as the PM on an in-house project.&lt;/p&gt;

&lt;p&gt;My biggest win of the year really came at the end when I applied and got into the Women Techsters bootcamp organized by Tech4Dev an initiative aimed at empowering and introducing women to tech, I applied for the Product Management track and got in! The bootcamp was for 2 weeks, it was really fast paced with hands-on tasks and assignments that helps you master skills. For my track, I was appointed the class captain and as the captain, I created a documentation accessible to my other bootsters that explained how to submit assignments, how to access resources and materials, how to access class recordings, and the documentation also featured useful links. &lt;/p&gt;

&lt;p&gt;The bootcamp introduced me to aspects of product management such as product roadmap, software development lifecycle, SDLC models, Agile model, Scrum framework, User research, MVP specification, user flow and persona, product/feature PRD, etc. &lt;/p&gt;

&lt;p&gt;At the end of the bootcamp, we were divided into teams to come up with a product based on any of the United Nations SDGS. For my team, our product FeedAll a food donation app addressed the SDGS goal 2 - Zero hunger and yes, I was team lead haha.  As team lead, I created a product brief, assigned tasks to my team members and also lead stand-ups to check in on tasks progress. As a team member, I was tasked with creating user flow, user persona, product mock-up/protype, MVP specs and compiling my team's PPTX. &lt;/p&gt;

&lt;p&gt;I will my say PM roles gave me a head start facing these tasks, I was able to seamlessly work with some PM tools such as Miro to create user flow. Having worked with product designers, I was able to find my way around figma to create a high fidelity mock-up and a prototype for the product.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x9u_Fvuq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhl58syl4vx5u6xkxjjv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x9u_Fvuq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhl58syl4vx5u6xkxjjv.png" width="880" height="1100"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;A picture of the Mock-up I made&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was paired with amazing ladies, Funmi, Bolu, Deborah, Audrey, Fredah, Grace, Bukunmi, Abisola and boy did they deliver on their respective tasks. My team's presentation was met with amazing feedbacks because of our collective efforts and awesome work rate. This article wouldn't be complete without not giving a shoutout to our amazing facilitator Theodora. I have made life long friends and mentor coming out of this bootcamp ü•∫‚ù§Ô∏è.&lt;/p&gt;

&lt;p&gt;To wrap up the year, I got a certification in product management, I am still thriving as a web developer and also I got into a product management study group that starts Jan 6th, 2022. ü§©&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/u1Z6oYNZKBtVtlwBgn/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/u1Z6oYNZKBtVtlwBgn/giphy.gif" width="480" height="226"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Wrap Up - What next ? &lt;/h2&gt;

&lt;p&gt;Writing this article, I chose to focus more on my wins rather than my losses. Trust me when I say I had my fair share of imposter syndrome, depression, brokeness and self hate, I know what they took away from me and how I had to pick myself back up which is my takeaway of the year - Never give up! Keep going. You'll definitely find your niche and it'll find you too and you'll love each other genuinely. So thank you 2021 for the lessons, the opportunities, the win, the losses and the amazing people in my corner - Elizabeth, Hassan, Daniel, Oluwasayo, Sodiq and my Dira Labs family, Caleb, Yemisi, Aishah, Oyindamola, Rashidat, Janet, Deborah and Ebun, I love you guys so much ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è. To an amazing 2022! ü•Ç &lt;/p&gt;

</description>
      <category>womenintech</category>
      <category>webdev</category>
      <category>product</category>
      <category>shecoded</category>
    </item>
    <item>
      <title>New Worktree? No problem!</title>
      <author>wh1ter4bb1t</author>
      <pubDate>Fri, 31 Dec 2021 17:41:18 +0000</pubDate>
      <link>https://dev.to/wh1ter4bb1tjs/new-worktree-no-problem-hg1</link>
      <guid>https://dev.to/wh1ter4bb1tjs/new-worktree-no-problem-hg1</guid>
      <description>&lt;p&gt;&lt;em&gt;Note: This is a post shilling one of my github repos, but luckily for you, a shill for broke kids like me is free so if you like it try it&lt;/em&gt;¬†&lt;/p&gt;

&lt;p&gt;Have you heard, git worktrees is a thing. Of course you have, you're a hip young developer, following all the tweet-tweets. Worktrees, a simple concept that has been around for years has been gaining traction over the past couple of years, it's taking the internet by‚Ä¶ well a Twitter thread here and there‚Ä¶ on occasion‚Ä¶ apparently‚Ä¶ so I've been told. A single bare repo that you can you create branches as directories off of. It's revolutionary! If you don't understand why people who use worktrees often sing its praises you obviously do not have to deal with a lot of the cumbersome aspects of working with large codebases in large organizations. You lucky sonova‚Ä¶.&lt;/p&gt;

&lt;p&gt;For the rest of us, the amount of times that I had stash my progress in order to checkout a co-workers "urgent" PR is countless, and the mere fact that I no longer have to stash a bunch of things and pray to the our loard and savior Linus Torvalds and can instead keep a worktree called "PR" that I use to checkout PR's is now as easy as well &lt;code&gt;cd¬†../pr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is one big caveat to worktrees, and a good majority of you readers, especially those who have used worktrees with any JS/TS project before are probably thinking it. I see you, you know whats up, you're looking might fine today.&lt;/p&gt;

&lt;p&gt;You see, for those who are uninitiated, every worktree is just a clean pull from your remote repo. Meaning just like using &lt;code&gt;git clone&lt;/code&gt; you have to at least run a clean npm install for every new worktree, not to mention if you have any¬†.env files or anything else that is in your¬†.gitignore that your environment need you have to copy those over from wherever they might be. ¬†&lt;/p&gt;

&lt;p&gt;This is actually not such a big deal you can get both your &lt;code&gt;node_modules&lt;/code&gt; folder and dotfiles from another previous worktree so its just a simple &lt;code&gt;cp¬†.env node_modules&lt;/code&gt; and your done. but if you just cloned that that bare naked repo (naughty) you still need to get those pesky dotfiles from somewhere, and you still need to run that dang npm install.¬†&lt;br&gt;
However, like any true developer the mere fact that you have to think about all that and type the same same thing over and over for every new worktree should give shivers up your spine. And this is probably a good reason why a lot of web developers shy away from worktrees. Why go through that pain? We are pioneers! How dare someone set up a system that makes us have to type more!¬†&lt;/p&gt;

&lt;p&gt;Enter my stupid ADHD brain.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/z8rEcJ6I0hiUM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/z8rEcJ6I0hiUM/giphy.gif" alt="accurate depiction of my brain" width="360" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What if we unloaded our dotfiles to a completely different directory. and we kept that separate from everything else, you already do that with your config files(yeah I know whats going on that root directory that you can't be bothered to clean). I like my machine to be sleek and clean and only be running the projects I am working on at a single time. This means I could remove a repo once I was done with it on my local machine but still hold on to the dotfiles so that in the future when a client asks to change back that terrible idea that they had and wouldn't listen to reason I can quickly pull it down and still have the dotfiles. Great.&lt;/p&gt;

&lt;p&gt;But let's take that one step further. What if we could do that with the node modules as well. Sure it bloats our computer a bit depending on how many projects we have but it saves that time of running npm install on every new worktree. And let's be honest here, if you're working with Javascript or Typescript you accept the bloat, nay, you embrace is. STONKS BABY!&lt;/p&gt;

&lt;p&gt;Next, let's imagine that its the first worktree in a new repo that we just cloned down for the first time. We don't have the &lt;code&gt;node_modules&lt;/code&gt; directory for it so naturally we have to run an npm install. It's a pain but it's the first time we pulled the repo down, it can't be helped. However, I'm a one and done kinda guy. so let's make it so that if we run an npm install it should copy over those newly minted &lt;code&gt;node_modules&lt;/code&gt; to the correct dotfiles directory, because why should we go through the struggle of pressing those half-dozen or so keys. Do I go to work to work? NO, We want that automated.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/1lxryzbQaqo49cKhCw/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/1lxryzbQaqo49cKhCw/giphy.gif" alt="automated" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;finally, what if we are working with a couple different environments and‚Ä¶ well our node configs are different for each of those environments well we should probably keep all those in our dotfiles directory as well. And we should probably realize that as developers our ability to name those environments extends to "prod", "test", "dev", "staging", "dev-feature", "dev-feature2"‚Ä¶ I named these, but do you think I can be bothered to remember which is which? No, and I refuse to. Again, why work on bettering myself? The computer should better itself‚Ä¶ and then, you know, eventually, maybe help me do my job better‚Ä¶ But its on the computer!&lt;br&gt;
Enter, a fuzzy-finder to help coax my numb little brain into remembering which "dev-feature-blah-blah" I want.¬†&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V59piXqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh9r8bo382fv2u9j1ut5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V59piXqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vh9r8bo382fv2u9j1ut5.jpg" alt="lazy me" width="880" height="572"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;so if your with me, and you have to work with package managers then you should understand that what we are looking for is a simple command that we can enter that will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;open a fuzzy finder of dotfile directories&lt;/li&gt;
&lt;li&gt;checks if there is a node_modules directory in the chosen dotfiles¬†&lt;/li&gt;
&lt;li&gt;if there isn't, run npm install(again, I'm lazy. I cant be bothered to type npm i)&lt;/li&gt;
&lt;li&gt;if npm install was ran, copy over the new node_modules to that same dotfiles directory&lt;/li&gt;
&lt;li&gt;if there is already a node_modules directory just copy that over to the current worktree(why waste time and bandwidth, if we got it already)&lt;/li&gt;
&lt;li&gt;copy over any¬†.env files we might have to the current worktree&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh and probably as a last little thing, we might want a check to just exit out if conditions aren't met. If I make this script and it has some shortcut my fat little stubby fingers are bound to accidentally bump those keys at some point and I don't need some script to come harass me or try to do all this work in folders that don't need it.¬†&lt;/p&gt;

&lt;p&gt;Enter, &lt;a href="https://github.com/wh1ter4bb1t-js/nw"&gt;NW&lt;/a&gt;. Short for New Worktree‚Ä¶ or North West if you're looking at a map or compass. A small little bash script that solves the above issue in the manner that we just outlined. And as a script, you can easily make a git hook or shortcut or add it to something like your editor to run automatically when you create a new worktree. I'm trying to solve a problem here people. My fingers, are short, stubby, there's no finger treadmill to get them slim and fit enough for writing npm install and cp¬†.env¬†. every time I make a new branch on my local machine. No, my fingers prefer to lay around all day and do nothing.¬†&lt;/p&gt;

&lt;p&gt;So if you are interested in looking at this. Trying it out for yourself, seeing how it feels. heck if you want give your own fingers a push up(a single one, because thats all the work out they should need) and make some changes to the script to fit your own needs go for it, maybe even make a PR if your feeling adventurous.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/wh1ter4bb1t-js/nw"&gt;Lazy developers unite!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>bash</category>
      <category>javascript</category>
      <category>git</category>
    </item>
    <item>
      <title>Machine Learning vs Deep Learning: What‚Äôs the Difference?</title>
      <author>virender</author>
      <pubDate>Fri, 31 Dec 2021 17:31:19 +0000</pubDate>
      <link>https://dev.to/virendebro/machine-learning-vs-deep-learning-whats-the-difference-3fpd</link>
      <guid>https://dev.to/virendebro/machine-learning-vs-deep-learning-whats-the-difference-3fpd</guid>
      <description>&lt;p&gt;&lt;strong&gt;Machine Learning vs Deep Learning: What‚Äôs the Difference?&lt;/strong&gt;&lt;br&gt;
In this blog we are going to see difference between Machine Learning and Deep Learning. Machine Learning Vs Deep Learning(ML vs DL). Let's Start Click Here to read this post:üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/machine-learning-vs-deep-learning-whats.html"&gt;Machine Learning vs Deep Learning: What‚Äôs the Difference?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou for reading my blogs.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#my-website"&gt;
  &lt;/a&gt;
  My Website:üëá
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/"&gt;CodexAshish&lt;/a&gt;&lt;/p&gt;

</description>
      <category>machinelearning</category>
      <category>ai</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Making Weather App using Tailwind CSS using OpenWeatherMap.org in JavaScript</title>
      <author>Ashutosh Dash</author>
      <pubDate>Fri, 31 Dec 2021 17:29:12 +0000</pubDate>
      <link>https://dev.to/ashutoshdash/making-weather-app-using-tailwind-css-using-openweathermaporg-in-javascript-4ifj</link>
      <guid>https://dev.to/ashutoshdash/making-weather-app-using-tailwind-css-using-openweathermaporg-in-javascript-4ifj</guid>
      <description>&lt;p&gt;Hey folks, in this article I'll show how you can create your own weather app using TailwindCSS using OpenWeatherMap.org in JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-generating-api-key-from-openweathermaporg"&gt;
  &lt;/a&gt;
  1. Generating API key from OpenWeatherMap.org
&lt;/h2&gt;

&lt;p&gt;Go to &lt;a href="//openweathermap.org"&gt;OpenWeatherMap.org&lt;/a&gt; and create your account, after all the steps you will be redirected to dashboard, in the top menu click on &lt;code&gt;API Keys&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6H_d4nPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fi2epwdcb4ifvn9yx1e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6H_d4nPP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7fi2epwdcb4ifvn9yx1e.jpg" alt="Open Weather Map Dashboard" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now copy the API key and paste it here in the place of {API Key}.&lt;br&gt;
&lt;code&gt;https://api.openweathermap.org/data/2.5/weather?q=${city}&amp;amp;units=metric&amp;amp;APPID={API Key}&lt;/code&gt;&lt;br&gt;
This will be our API URL.&lt;/p&gt;

&lt;p&gt;You can read more about the API documentation &lt;a href="https://openweathermap.org/guide"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-testing-the-api"&gt;
  &lt;/a&gt;
  2. Testing the API
&lt;/h2&gt;

&lt;p&gt;Open your project folder and create &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;script.js&lt;/code&gt;.&lt;br&gt;
Open your browser and in the search bar enter the API URL with the city name and API key. If the result is as follows that means API is working fine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sFar1v98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9f1tewooxf075tycnig.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sFar1v98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9f1tewooxf075tycnig.jpg" alt="Test API is working or not" width="880" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After that open up your &lt;code&gt;script.js&lt;/code&gt; file and write following code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J-e9nE2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf5ffngdfdfx2lb8nvk9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J-e9nE2L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yf5ffngdfdfx2lb8nvk9.jpg" alt="Initial Code" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, we created a button, which on clicking give us the output of API URL in JSON format.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zlmIjIVo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q57uvu5fqvnpayfez6os.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zlmIjIVo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q57uvu5fqvnpayfez6os.png" alt="API Output" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, we can see what the weather API offer us.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-generating-html"&gt;
  &lt;/a&gt;
  3. Generating HTML
&lt;/h2&gt;

&lt;p&gt;For starters, we will create HTML file to show basic info like weather, temperature, wind Speed, humidity.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;section class="container"&amp;gt;
        &amp;lt;input type="text" name="" placeholder="Search city name here..." id="city-name"&amp;gt;
        &amp;lt;button id="findBtn"&amp;gt;Find Weather&amp;lt;/button&amp;gt;
        &amp;lt;section class="result-container"&amp;gt;
            &amp;lt;p&amp;gt;Weather: &amp;lt;span id="weather-description"&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;Temperature: &amp;lt;span id="temp"&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;Wind Speed: &amp;lt;span id="wind-speed"&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
            &amp;lt;p&amp;gt;Humdity: &amp;lt;span id="humidity"&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
        &amp;lt;/section&amp;gt;
    &amp;lt;/section&amp;gt;

    &amp;lt;script src="script.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;Output&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FjG6IYzu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zr40vzvwfrposlpw4uq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FjG6IYzu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9zr40vzvwfrposlpw4uq.png" alt="HTML Output" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-creating-the-javascript-code"&gt;
  &lt;/a&gt;
  4. Creating the JavaScript code
&lt;/h2&gt;

&lt;p&gt;The final javascript code looks like this in &lt;code&gt;script.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// input 
let findBtn = document.querySelector("#findBtn");
let city = document.querySelector("#city-name");

// output
let weatherDescription = document.querySelector("#weather-description");
let temp = document.querySelector("#temp")
let windSpeed = document.querySelector("#wind-speed");
let humidity = document.querySelector("#humidity");


function getWeatherAPI(){
    let apiURL = `https://api.openweathermap.org/data/2.5/weather?q=${city.value}&amp;amp;units=metric&amp;amp;APPID={API Key}`;
    fetch(apiURL)
    .then(response =&amp;gt; response.json())
    .then((data)=&amp;gt; {
        weatherDescription.innerHTML = data.weather[0].description;
        temp.innerHTML = `${data.main.temp}¬∞C`;
        windSpeed.innerHTML = `${data.wind.speed}m/s`;
        humidity.innerHTML = `${data.main.humidity}%`

    })
}

findBtn.addEventListener("click", getWeatherAPI);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-using-tailwind-css"&gt;
  &lt;/a&gt;
  5. Using Tailwind CSS
&lt;/h2&gt;

&lt;p&gt;Now adding some Tailwind CSS in &lt;code&gt;index.html&lt;/code&gt; for our app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;body class="text-center bg-gradient-to-r from-cyan-500 to-blue-500"&amp;gt;
    &amp;lt;section class="container p-8 text-center flex flex-col justify-center items-center"&amp;gt;
        &amp;lt;h1 class="text-3xl font-bold p-2 m-2"&amp;gt;Open Weather&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;
            &amp;lt;input class="border-b-4 border-b-blue-900 rounded-lg p-2 text-xl focus:outline-none" type="text" name="" placeholder="Search city name here..." id="city-name"&amp;gt;
            &amp;lt;button class="border-2 border-teal-800 rounded-lg p-2 text-xl text-center transition ease-in-out delay-150 active:scale-95 bg-gradient-to-r from-emerald-500 to-teal-500 drop-shadow-md hover:drop-shadow-2xl" id="findBtn"&amp;gt;Find Weather&amp;lt;/button&amp;gt;
        &amp;lt;/p&amp;gt;
        &amp;lt;section class="result-container p-4 m-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4  gap-4"&amp;gt;
            &amp;lt;div class="weather border-2 p-4 m-4 rounded-lg backdrop-blur-md drop-shadow-xl"&amp;gt;
                &amp;lt;p&amp;gt;Weather:&amp;lt;/p&amp;gt;
                &amp;lt;p class="font-bold" id="weather-description"&amp;gt;_ _&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="temp border-2 p-4 m-4 rounded-lg backdrop-blur-md drop-shadow-xl"&amp;gt;
                &amp;lt;p&amp;gt;Temperature:&amp;lt;/p&amp;gt;
                &amp;lt;p class="font-bold" id="temp"&amp;gt;_ _&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="windSpeed border-2 p-4 m-4 rounded-lg backdrop-blur-md drop-shadow-xl"&amp;gt;
                &amp;lt;p&amp;gt;Wind Speed:&amp;lt;/p&amp;gt;
                &amp;lt;p class="font-bold" id="wind-speed"&amp;gt;_ _&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;div class="humidity border-2 p-4 m-4 rounded-lg backdrop-blur-md drop-shadow-xl"&amp;gt;
                &amp;lt;p&amp;gt;Humidity:&amp;lt;/p&amp;gt;
                &amp;lt;p class="font-bold" id="humidity"&amp;gt;_ _&amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/section&amp;gt;
    &amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7QslJ-Md--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twnq3qr4bhowdfxqg25g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7QslJ-Md--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twnq3qr4bhowdfxqg25g.png" alt="Tailwind Output" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-final-project-demo"&gt;
  &lt;/a&gt;
  6. Final Project Demo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7n0jLSwS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i40bdgyapcvmf61teco5.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7n0jLSwS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i40bdgyapcvmf61teco5.gif" alt="Final Project Demo" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;So thats it folks. This project may seem overwhelming to begineer but trust me its really easy. To newbies, try your head around JavaScript &lt;code&gt;promises&lt;/code&gt; and &lt;code&gt;fetch&lt;/code&gt; and play around with other free API available.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Feel free to connect with me over &lt;a href="https://www.linkedin.com/in/ashutoshdash1999/"&gt;LinkedIn&lt;/a&gt; or shoot me a mail on &lt;a href="//mailto:dashashutosh1999@gmail.com"&gt;dashashutosh1999@gmail.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tailwindcss</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
