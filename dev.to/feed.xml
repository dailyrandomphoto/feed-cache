<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How To Get American Express Black ATM Card</title>
      <author>Frank Roland</author>
      <pubDate>Mon, 06 Dec 2021 19:58:05 +0000</pubDate>
      <link>https://dev.to/frankro45983828/how-to-get-american-express-black-atm-card-1ild</link>
      <guid>https://dev.to/frankro45983828/how-to-get-american-express-black-atm-card-1ild</guid>
      <description>&lt;p&gt;&lt;strong&gt;How To Get American Express Black ATM Card&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Amex Centurion "black" card makes other premium credit cards look downright affordable. It has an initiation fee of $7,500 and an annual fee of $5,000.&lt;br&gt;
It's also invite-only; you can't apply without permission from Amex.&lt;br&gt;
The card offers some incredible benefits, like complimentary elite status across four hotel chains and with Delta, airport arrival services, and access to a concierge.&lt;br&gt;
While some of these perks are exclusive to the Amex black card, you can enjoy many of them with  The Platinum Card® from American Express and The Business Platinum Card® from American Express .&lt;br&gt;
The Amex Platinum, with a $695 annual fee (See Rates), doesn't offer the same level of fancy benefits, but it's a great option for earning travel rewards and enjoying some luxury perks, including statement credits with Uber and Saks.&lt;br&gt;
See Business Insider's list of the best rewards credit cards you can get »&lt;br&gt;
Also known as the Centurion card, the American Express "black" card is so prestigious that you have to be invited to use it. You can't just apply for it and expect to get approved; you have to receive a private invitation from American Express.&lt;/p&gt;

&lt;p&gt;While the requirements for getting an invite for the black card aren't officially published, rumor has it that you have to be a high earner who has spent and paid off between $350,000 and $500,000 across all of your American Express accounts in a calendar year.&lt;/p&gt;

&lt;p&gt;And once you're approved for the card, there's a $7,500 initiation fee, and a $5,000 annual fee. It makes premium credit cards like the Platinum Card ($695 annual fee) and the Amex Business Platinum Card ($595 (See Rates)) look downright affordable. &lt;/p&gt;

&lt;p&gt;We're focused here on the rewards and perks that come with each card. These cards won't be worth it if you're paying interest or late fees. When using a credit card, it's important to pay your balance in full each month, make payments on time, and only spend what you can afford to pay.&lt;br&gt;
Contact us for your Black card&lt;br&gt;
&lt;a href="mailto:webmaster6099@gmail.Com"&gt;webmaster6099@gmail.Com&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to use Azure Blob Storage with Python</title>
      <author>Nelson Adonis Hernández</author>
      <pubDate>Mon, 06 Dec 2021 19:31:43 +0000</pubDate>
      <link>https://dev.to/nelsoncode/how-to-use-azure-blob-storage-with-python-54c2</link>
      <guid>https://dev.to/nelsoncode/how-to-use-azure-blob-storage-with-python-54c2</guid>
      <description>&lt;p&gt;In this publication we will see the main methods to use with Azure Blob Storage&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;azure-storage-blob
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#blob-service-client"&gt;
  &lt;/a&gt;
  Blob Service Client
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getenv&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;azure.storage.blob&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BlobServiceClient&lt;/span&gt;

&lt;span class="n"&gt;blob_service_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BlobServiceClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_connection_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"AZURE_STORAGE_CONNECTION_STRING"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#methods-for-blobs-files"&gt;
  &lt;/a&gt;
  Methods for blobs (Files)
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#upload-blob"&gt;
  &lt;/a&gt;
  Upload Blob
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upload_blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BinaryIO&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;blob_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blob_service_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_blob_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;blob_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upload_blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#download-blob"&gt;
  &lt;/a&gt;
  Download Blob
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;blob_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blob_service_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_blob_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blob_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download_blob&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;readall&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#delete-blob"&gt;
  &lt;/a&gt;
  Delete Blob
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;blob_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blob_service_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_blob_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;blob_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete_blob&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#methods-for-containers-folders"&gt;
  &lt;/a&gt;
  Methods for Containers (Folders)
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#create-container"&gt;
  &lt;/a&gt;
  Create Container
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;blob_service_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#delete-container"&gt;
  &lt;/a&gt;
  Delete Container
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete_container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;blob_service_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete_container&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#list-containers"&gt;
  &lt;/a&gt;
  List Containers
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_containers&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;containers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;blob_service_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_containers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"success"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Github Gist&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/nelsoncode019/eade5071c80f659bfa7ce9a452345d85"&gt;https://gist.github.com/nelsoncode019/eade5071c80f659bfa7ce9a452345d85&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>azure</category>
      <category>nelsoncode</category>
      <category>storage</category>
    </item>
    <item>
      <title>Why I don't know jQuery, and I never cared to learn it.</title>
      <author>Vladimir Chuprinskiy</author>
      <pubDate>Mon, 06 Dec 2021 19:21:21 +0000</pubDate>
      <link>https://dev.to/cvvspb/why-i-dont-know-jquery-and-i-never-cared-to-learn-it-11h</link>
      <guid>https://dev.to/cvvspb/why-i-dont-know-jquery-and-i-never-cared-to-learn-it-11h</guid>
      <description>&lt;p&gt;I asked myself that question recently. As Wikipedia states this glorious library is &lt;em&gt;"used by 73% of the 10 million most popular websites. Web analysis indicates that it is the most widely deployed JavaScript library by a large margin, having at least 3 to 4 times more usage than any other JavaScript library".&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I came to the short and simple answer pretty fast: I just chose other stacks and projects where jQuery was not required and a person's time and memory are limited. But as I started to reflect deeply on my decisions, I realized that it could be a smart move to write down why I chose this or that language, library, project or position throughout my software engineering path.&lt;/p&gt;

&lt;p&gt;Resumes and interviews are very limited. When hiring an engineer, it is essential to understand the person and their experiences, not the most recent skillset. Subsequently there will be fewer misbeliefs leading to losses for both parties. I strongly believe in synergy, so I decided to give a crystal clear description of my software engineering journey for those who might consider hiring me. This retrospective might also be useful for other engineers who contemplate their future careers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fwUpNtmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjm0b3azwjllepi92a75.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fwUpNtmI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjm0b3azwjllepi92a75.jpg" width="880" height="599"&gt;&lt;/a&gt;&lt;br&gt;2000. I was not sure whether I was still in The Bubble or not =)
  &lt;/p&gt;

&lt;p&gt;In the beginning of the 2000s automation was thriving. Just about every company or state agency had realized they badly need to store their information in a database and have an application for their employees. I got a job in an enterprise company which executed custom software projects. Initially we crafted 2-tier desktop apps with &lt;strong&gt;Oracle&lt;/strong&gt; and &lt;strong&gt;Sybase PowerBuilder&lt;/strong&gt;. DataWindow saved a lot of effort, PowerScript supported all the 4 OO pillars and had a powerful framework - PowerBuilder Foundation Classes. The ecosystem included &lt;strong&gt;PowerDesigner&lt;/strong&gt;, a database modelling tool I fell in love with. Perfect stack for the problem.&lt;/p&gt;

&lt;p&gt;A couple of fellow software engineers next to me were working on a &lt;strong&gt;Lotus Notes&lt;/strong&gt; project. It looked archaic and decaying. In my early 20s I realized that I do not want to get stuck in boring legacy technologies for years.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lessons learned: Choose wisely the platforms and the languages you’re going to spend your time mastering. Keep an eye on new libraries, software engineers are smart, they create new tools for reasons. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qtZgRCAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wv56e0iak1udqgejp5vi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qtZgRCAo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wv56e0iak1udqgejp5vi.png" width="640" height="480"&gt;&lt;/a&gt;&lt;br&gt;2000. DataWindow example in PowerBuilder 6
  &lt;/p&gt;

&lt;p&gt;The company was not large thus software engineers were universal. Part of my job was communicating with stakeholders and users, collecting requirements and turning them into specs; that was a useful skill. Projects were thoroughly documented so I had to write a lot of docs. I took it as an inevitable evil. Architects were rare, so I had to architect and then code. We didn't have many DBAs, so I had to do most of the job myself. Not having formal CS education, I learned by example and started designing databases in Boyce–Codd normal form without knowing what normal form is.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lessons learned: Good engineers learn the processes. The knowledge makes them universal problem solvers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One specific project I remember from around 2000-2001 included manual data processing (no AI back then). The company hired a temporary team of 20 employees and my work was to create an app for them as soon as possible. We forged the first version very fast and then for the next several months I visited their workplace every other day, collected the feedback, watched them use the app and went back to my desk to improve it. It was my early &lt;strong&gt;Agile&lt;/strong&gt; experience. Very few people had heard of the Manifesto back then.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lessons learned: Short iterations provide more value. Direct user feedback is priceless.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the company and projects evolved we drifted towards 3-tier desktop solutions. In 2003 PowerBuilder seemed to be stagnant and very niche. Java looked deadly slow on Windows (the Oracle tools I used then were cross-platform written in Java). I had experience with &lt;strong&gt;Visual C++&lt;/strong&gt; and MFC, but it was not a good choice for fast enterprise development. &lt;strong&gt;.NET Framework&lt;/strong&gt;, the game changer, was rapidly gaining popularity. The supremacy of the tool was obvious to me. I took my part in pushing the company towards its adoption and received Microsoft Certified Solution Developer for .NET in 2004. The company needed certified developers to win the large contracts, I needed to master the framework - a win-win.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lesson learned: Choose the stack wisely and you will be the most hireable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t3pK2Hb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vznr41vdelct0z4tsb16.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t3pK2Hb6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vznr41vdelct0z4tsb16.jpg" width="880" height="660"&gt;&lt;/a&gt;&lt;br&gt;I think I owe Anders Hejlsberg part of my success. I used Turbo Pascal at school, Delphi became the bridge to Windows programming. C# was true love. TypeScript - smart way to overcome JavaScript deficiencies.
  &lt;/p&gt;

&lt;p&gt;I wanted to have a bigger impact and figured out the key to more complex projects is teamwork. I decided to take on project management while keeping up with the ever-evolving technologies by coding the core part of each project. Teams were small: 2-5 engineers. Each Project Manager/Tech Lead was given freedom to choose the most convenient methodology. Some of my office mates used &lt;strong&gt;RUP&lt;/strong&gt;. It seemed solid, serious and reasonable. But the first time I tried to start using it for a real project I was swallowed by the whirl of the waste work. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lessons learned: Books are different from practice. Each methodology might be the best choice for one type of work and a complete disaster for another. I should take care to figure out what problems might arise from each shiny new concept.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I tested a couple of more lightweight and &lt;strong&gt;XP methodologies&lt;/strong&gt;, trying to find the ideal one. Not until around 2005-2006 when I learned of &lt;strong&gt;Scrum&lt;/strong&gt;. I realized all the value it can bring to a team, started using it and have stuck with it since then.&lt;/p&gt;

&lt;p&gt;I was eagerly digesting the new knowledge. I realized that web apps are a smarter way to deliver functionality, saving a lot of effort in deployment and maintenance. So I took a deep dive into web development. We fully adopted Microsoft stack: &lt;strong&gt;IIS&lt;/strong&gt; and &lt;strong&gt;MS SQL Server&lt;/strong&gt;. Technologies rushed past: &lt;strong&gt;ASP.NET, DCOM, RPC, XML/XSD/XSLT, SOAP and WSDL, WCF and WPF&lt;/strong&gt;. But the enterprise problems seemed to be the same and in 2008 I got bored. I thought that maybe I should try doing something else rather than programming till the end of time. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lessons learned: Work without enough challenges is boring. It’s not the tool that makes a difference, but the problem type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--giBrsoAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvotlcdngo7i09s1kof7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--giBrsoAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvotlcdngo7i09s1kof7.jpg" width="640" height="480"&gt;&lt;/a&gt;&lt;br&gt;2005. Arkhangelsk. Pretesting C++ DCOM multithreaded server for a 3-way RPC data exchange.
  &lt;/p&gt;

&lt;p&gt;I left the company, stopped coding and started trading futures for the RTS Index. I had savings which meant freedom for me - being able to pause and try interesting things. The financial crisis of 2008-2009 was a great opportunity to learn trading through practice. I had some success, but soon understood that I am inevitably gravitated towards coding. I started automating my trading tools and finished writing a trade bot. I decided that I need communication practice in English, so I took some freelance jobs on oDesk (Upwork) for customers from the USA and South Africa - useful experience. Programmed &lt;strong&gt;PocketPC&lt;/strong&gt; using &lt;strong&gt;.NET CF&lt;/strong&gt; and took other interesting projects. Then I was offered the CTO position.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lesson learned: I love coding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The team was small initially: 30 people, 5 or 6 of which were software engineers. The software engineering processes were chaotic. I knew how to rectify that and the rest of the challenges looked fresh. In 6 months I was offered a share of the company and the CEO position. I decided to give it a try. Keeping the role of the Tech Lead, I was in charge of selection and adoption of methodologies and frameworks throughout the organization. I set up the basic processes first: &lt;strong&gt;Scrum, git, TDD, CI/CD, Jira&lt;/strong&gt; and &lt;strong&gt;Confluence&lt;/strong&gt; for task tracking and knowledge sharing. Hired a great QA Lead who could grow a strong QA engineer from any person with a desire to learn. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lessons learned: CEOs are human beings. Leadership and management can be learned only through practice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--untbDFg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtevsdhta3vj3nmkkt2t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--untbDFg_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dtevsdhta3vj3nmkkt2t.png" width="880" height="530"&gt;&lt;/a&gt;&lt;br&gt;2012. The new team.
  &lt;/p&gt;

&lt;p&gt;The company was private and we didn't have a long credit line. I needed to keep being frugal at the same time building more capable teams in order to take on bigger and more profitable projects. My hiring decisions were money-constrained, so I needed to build a solid team growth process to survive. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lesson learned: Good process allows a team to share knowledge in a fast and efficient way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I knew that I must personally do all the &lt;strong&gt;hiring&lt;/strong&gt;: early team members create the stem of a company for years. Wrong hiring decisions can doom any successful team with a great product. So I googled hiring basics and then learned through practice.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lesson learned: What seems to be the biggest obstacle on your path right now, might become the greatest skill under your belt soon.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some of the projects required collaboration of multiple functional teams. Each functional team had a strong Team Leader.  New projects were complex - a lot of management, so I figured that a matrix organizational structure might be the best fit for the given project types and sizes. I managed to grow the company twice in number, almost all new hires were for the Software Engineering and QA teams. Projects stayed manageable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lessons learned: Good project managers are hard to find. The best project managers are good specialists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We won bigger contracts, but I felt that the company is "bleeding knowledge". The diversity of the projects led to low financial predictability, poor estimates, and, as a result, overwork. So I focused my efforts on a huge project for an electrical distribution company, which, if done properly, could guarantee a big market niche for the company for years to come. We won the project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lesson learned: It’s best to do one thing really, really well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fFZIj5nq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkher4ilj018jdvcjs3f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFZIj5nq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkher4ilj018jdvcjs3f.png" width="880" height="517"&gt;&lt;/a&gt;&lt;br&gt;2012. Web GIS for an electrical distribution company.
  &lt;/p&gt;

&lt;p&gt;The company step by step learned to keep the proper pace. We passed the formal ISO 9001:2008 quality management certification, although metrics collection and analysis for process improvements were pretty basic. It was a success, but I was exhausted. I always considered myself a variation of an introvert, but I had to communicate with numerous new people constantly. I do enjoy that, but I need time to recharge - all by myself in the flow.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lesson learned: I should listen to myself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After some reflection and googling, I got enlightened that some companies nowadays have engineering tracks. So I felt the urge to switch the position and left in a graceful manner, having mentored the replacement.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lesson learned: I love coding. There are many different ways to be successful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the previous company, I continued to bet on .NET platform - optimal fit for the geospatial problems we solved. We slowly drifted towards mobile and tablet application development through &lt;strong&gt;PhoneGap&lt;/strong&gt; to &lt;strong&gt;Xamarin&lt;/strong&gt;. I had to reconsider the stack. The support and ease the .NET Framework provided came at the cost of being locked in the enterprise world. Most of the new interesting for me companies used other tools. I felt rusty.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lesson learned: Good tools can become golden handcuffs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I took the next role for two reasons: it was an interesting engineering challenge and it gave me full freedom in how I reached the results. I could spend my time learning and practicing any technology I wished. The contract constraints dictated a waterfall project structure, though for the software engineering part we used the good old Scrum.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lesson learned: Gantt charts are still useful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JFud4UU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly66gmthg2lhoh0se1uz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JFud4UU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ly66gmthg2lhoh0se1uz.jpg" width="880" height="587"&gt;&lt;/a&gt;&lt;br&gt;2017. Intelligent transportation system. Variable message sign installation.
  &lt;/p&gt;

&lt;p&gt;I decided to spend my time mastering the &lt;strong&gt;JavaScript&lt;/strong&gt; stack, as this language was rising in adoption by product companies. I architected an SPA and carefully selected &lt;strong&gt;React&lt;/strong&gt; as the front-end library. Having prior experience with &lt;strong&gt;Backbone.js&lt;/strong&gt; I immediately realized the simplicity and force under the hood. The mobile market was flourishing, and I discovered &lt;strong&gt;React Native&lt;/strong&gt;. I believed it might revolutionize mobile app development, so I rushed to learn it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lesson learned: Developers have a gut feeling for good technologies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It started as a pet project initially, &lt;a href="https://puncher.app"&gt;Puncher.app&lt;/a&gt; became my path back to full time coding and mastering the right stack, keeping all the best practices from previous iterations. Backend in &lt;strong&gt;Node.js&lt;/strong&gt;, mobile applications in React Native and web frontend in React - all using the same JavaScript language. No need for context switches and double work. I learned containerized deployment with &lt;strong&gt;Docker&lt;/strong&gt; as it seemed the proper way to build scalable architectures and explored the &lt;strong&gt;ELK&lt;/strong&gt; advantages. This set of tools promised to make me a more effective problem solver for the specific problems I was interested in - products used by millions of people. The bootstrapping experience would be a positive side effect. So I made a deep dive in.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lesson learned: Aim to achieve multiple benefits with a single decision. In the worst case scenario you still achieve something.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;React Native, although not without drawbacks of cryptic build errors and raw open source libraries, proved to be the right tool for the job. It has matured now and I consider it the optimal solution for budget-constrained teams, especially those who cannot afford the &lt;strong&gt;bus factor&lt;/strong&gt; of one for any of the critical parts of the project. We made some wrong decisions along the thorny startup path, but they concerned the marketing part and the project scope, not the tools or the processes selection.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lessons learned: Small startups have to limit the toolbox - this way the team members are universal soldiers. Big companies move away from RN. If you can afford hiring many mobile engineers, it is more reasonable to have two specific teams for both platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_NHsgkBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulra887xs2nse1mvce25.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_NHsgkBe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ulra887xs2nse1mvce25.jpg" width="632" height="416"&gt;&lt;/a&gt;&lt;br&gt;1992. Van Damme movie: Universal Soldier.
  &lt;/p&gt;

&lt;p&gt;Using plain JavaScript instead of more secure TypeScript as the primary development language guaranteed me later the widest selection of junior developers for hire. So I was able to select from the best in no time. They wanted to learn the new hype React library. I wanted to make them more performant as fast as I could. A win-win again.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lessons learned: Mentoring creates great atmosphere and group dynamics.Although mentees leave, the benefits remain: increased leadership, communication and management skills.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, as I feel the need for the next career challenge, I decided to switch to big tech. FAANG-type companies seem to be the most appropriate objective - with the freedom of inter-project migration and great engineering culture to learn from. Particular areas of my interest are those promising the most innovative breakthroughs: &lt;strong&gt;Big Data, AI and ML, AR and VR, Social Interactions and Human-Machine Interfaces&lt;/strong&gt;. Those areas are fenced by extensive domain experience requirements - a chicken-egg problem. I hope to bypass those choosing proper projects within the company. Interesting languages to learn for me are &lt;strong&gt;Python&lt;/strong&gt; for universal adoption in the ML scene and &lt;strong&gt;Go&lt;/strong&gt; for being among the top tools for large scalable services.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lessons learned: Any software engineer can and should actively manage their own careers through mindful selection of tools and problems they are going to spend their limited time on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--axZrQywX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gafup9kvdy6vw5zoqnox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--axZrQywX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gafup9kvdy6vw5zoqnox.png" width="880" height="555"&gt;&lt;/a&gt;&lt;br&gt;2021. Dockerized services.
  &lt;/p&gt;

&lt;p&gt;PS: If you happen to work in such a company and enjoyed my story, please feel free to contact me: &lt;a href="https://www.linkedin.com/in/chuprinskiy/"&gt;https://www.linkedin.com/in/chuprinskiy/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>javascript</category>
      <category>programming</category>
      <category>motivation</category>
    </item>
    <item>
      <title>Project 6:Ajax Type Ahead</title>
      <author>prachigarg19</author>
      <pubDate>Mon, 06 Dec 2021 18:56:45 +0000</pubDate>
      <link>https://dev.to/prachigarg19/project-6ajax-type-ahead-40b3</link>
      <guid>https://dev.to/prachigarg19/project-6ajax-type-ahead-40b3</guid>
      <description>&lt;p&gt;Welcome to my "Build 30 Js Projects in 30 Days" Series .This is day 6 and project 6. If you haven't read the other articles in this series please check them out first. I'll list them at the end of this article.&lt;/p&gt;

&lt;p&gt;As mentioned in my previous article. This is the Day 6 challenge of &lt;a href="https://javascript30.com/"&gt;Wes Bos Javascript30 course&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-result"&gt;
  &lt;/a&gt;
  &lt;u&gt;&lt;em&gt;Final result:&lt;/em&gt;&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/prachigarg19/embed/RwLrVdX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/prachigarg19/Javacript_beginner_projects/tree/main/js30"&gt;My source code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As always before starting download the starter files from &lt;a href="https://github.com/wesbos/JavaScript30"&gt;here&lt;/a&gt;. I've made a separate article on how to download starter files, you can check it out &lt;a href="https://dev.to/prachigarg19/build-30-javascript-projects-in-30-daysday-0-2m8j"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-1html"&gt;
  &lt;/a&gt;
  PART 1:HTML
&lt;/h2&gt;

&lt;p&gt;Here I've created two divs, container will contain heading and searchbox and second div display-part will display the list according to value entered by user.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2css"&gt;
  &lt;/a&gt;
  PART 2:CSS
&lt;/h2&gt;

&lt;p&gt;Now we are going to style our project.Here I've simply used flex on body to center our content. I've also added css to city-list which will contain our list i.e. to be displayed&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-3javascript"&gt;
  &lt;/a&gt;
  PART 3:JAVASCRIPT
&lt;/h2&gt;

&lt;p&gt;Now we will make our project interactive.&lt;br&gt;
This is the major part of this project. &lt;br&gt;
The idea is to read user's input ,display list of cities matching that input and then display the city selected by user from this list on the input box.We will also highlight the letters entered by user in the list.&lt;/p&gt;

&lt;p&gt;We will first fetch the data from the &lt;a href="const%20url='https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json';"&gt;link&lt;/a&gt; . This link contains our data in json format. We will use fetch function to get data from this link. Also we will use map function &lt;a href="https://dev.to/prachigarg19/project-4-array-cardio-day-1-3b1k"&gt;check this article to know more&lt;/a&gt; to get a new array with just city names and store it in cities variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let data=document.getElementById('text');
// fetching 
let cities;
fetch(url,{
    method:'GET',
})
.then(response=&amp;gt;response.json())
.then(text=&amp;gt;{
    cities=text.map(item=&amp;gt;item['city']);

})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we will use keyup listener. This event is triggered whenever user enters a key in the element (here textbox). We will then generate regex expression using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"&gt;regExp&lt;/a&gt; and store all the cities matching this expression into display. We will then call result function to display the list,highlight input by user and changing value in textbox to the value clicked by user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;data.addEventListener('keyup',(e)=&amp;gt;{
    if(e.target.value==="") return;
 display=cities.filter(item=&amp;gt;{
     regex=new RegExp(e.target.value,'gi');
     return item.match(regex)

})
result(); //to display list
})
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;u&gt;result()--&amp;gt;&lt;/u&gt;&lt;br&gt;
&lt;u&gt;Displaying and highlighting part-&lt;/u&gt;&lt;br&gt;
We will traverse through our display array and store it in a string which will later be appending to our display-part class.&lt;br&gt;
For highlighting, we will replace each item's regex equal part to span part and use inline css to style it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let resultdisplay=document.getElementById('list');
 str="";
    for(let item of display)
    {   let city=item.replace(regex,`&amp;lt;span style="background-color:green;"&amp;gt;${data.value}&amp;lt;/span&amp;gt;`);
        str+=`&amp;lt;ul&amp;gt;&amp;lt;button value="${item}" class="city-list"&amp;gt;${city}&amp;lt;/button&amp;gt;&amp;lt;/ul&amp;gt;&amp;lt;hr&amp;gt;`;  
    } 

    resultdisplay.innerHTML=str;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that I've given a class and value to each list item which will be later used to display city selected by user.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;Changing text box display text&lt;/u&gt;&lt;br&gt;
Now we will select all elements with city-list class. We will traverse this list and listen for event on each item. When the user clicks any button the click event will be triggered and we will change value of textbox to the value of the button clicked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;try{
    let cityarr=Array.from(document.getElementsByClassName("city-list"));
    for(cityitem of cityarr){
    cityitem.addEventListener('click',(e)=&amp;gt;{
        data.value=e.target.value;
        resultdisplay.innerHTML="";
        //removing list after user chose city
    });}
        }catch(TypeError){
        return;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've used try-catch block as if user clicks on the highlighted span part the textbox will give TypeError as span html part in result function didn't have a value attribute-&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let city=item.replace(regex,`&amp;lt;span style="background-color:green;"&amp;gt;${data.value}&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we will simply catch this error and return from the loop.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#things-i-learnt"&gt;
  &lt;/a&gt;
  &lt;u&gt;&lt;em&gt;Things I learnt:&lt;/em&gt;&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;1.keyup event listener&lt;br&gt;
2.How to highlight part of the list elements.&lt;br&gt;
3.Better understanding of regex.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#previous-article-from-this-series"&gt;
  &lt;/a&gt;
  &lt;u&gt;Previous article from this series:&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;First of all thankyou for the great response on my previous article.🥰&lt;br&gt;
If you haven't checked it out here is the link.:&lt;br&gt;
&lt;a href="https://dev.to/prachigarg19/project-5flex-gallery-55jd"&gt;Project 5 day 5&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;u&gt;Conclusion&lt;/u&gt;
&lt;/h2&gt;

&lt;p&gt;That's it for today's project.Next project will be Array Cardio day2 .&lt;/p&gt;

&lt;p&gt;If you have any doubts or suggestions please do let me know in the comment section. I'll be more than happy to interact with you.&lt;/p&gt;

&lt;p&gt;If you like this series and want to be a part of it, do consider following me at &lt;a class="mentioned-user" href="https://dev.to/prachigarg19"&gt;@prachigarg19&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading. :)&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Git undo/merge issues solved with visual examples</title>
      <author>Fidal Mathew</author>
      <pubDate>Mon, 06 Dec 2021 18:54:48 +0000</pubDate>
      <link>https://dev.to/fidalmathew/git-undomerge-issues-solved-with-visual-examples-4oph</link>
      <guid>https://dev.to/fidalmathew/git-undomerge-issues-solved-with-visual-examples-4oph</guid>
      <description>&lt;p&gt;Hi folks, hope you are doing well. In this post I am going to share you some methods that will help you while using git.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I am gonna talk about -&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;1. Git conflicts&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2. Git undo methods&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-git-merge-conflicts-"&gt;
  &lt;/a&gt;
  1. Git merge conflicts -
&lt;/h2&gt;

&lt;p&gt;Many developers fear when git merge conflict happens, I was one of them too until I knew why it happened.&lt;/p&gt;

&lt;p&gt;So, what causes Git merge conflict?&lt;/p&gt;

&lt;p&gt;Let me tell you via an example -&lt;/p&gt;

&lt;p&gt;Let us take an empty folder and make a file named Fidal.txt&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hIag2Vb2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg9jbf2u2y87486jrkw7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hIag2Vb2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg9jbf2u2y87486jrkw7.png" alt="initialize" width="821" height="210"&gt;&lt;/a&gt;&lt;br&gt;
Let's initialize the project with -&lt;br&gt;
&lt;code&gt;git init&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git add .&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git commit -m “first commit”&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If we check &lt;code&gt;git log&lt;/code&gt; then -&amp;gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m-Qp-KjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9jnq888zrzv6aat60r2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m-Qp-KjO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p9jnq888zrzv6aat60r2.png" alt="first commit" width="880" height="133"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I made some changes -&lt;/p&gt;

&lt;p&gt;The file is modified, now&lt;br&gt;
&lt;code&gt;git add .&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git commit -m “ add ironman”&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--93_YmAeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s22ih7enustywinazuok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--93_YmAeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s22ih7enustywinazuok.png" alt="add ironman" width="302" height="176"&gt;&lt;/a&gt;&lt;br&gt;
Now read carefully,&lt;br&gt;
consider the &lt;strong&gt;master&lt;/strong&gt; branch as the main branch of the repo you want to contribute. All the changes will eventually be committed there.&lt;/p&gt;

&lt;p&gt;Now, I want to work on the issue of making &lt;br&gt;
“Iron man” text into “Iron Man” (both capital).&lt;br&gt;
I made a new branch called &lt;strong&gt;“fix1”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout -b fix1&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;But other members (assume, but in this example I will be portraying them) were simultaneously making commits in the master branch. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f7uEHFxD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8iugq28iyih268rpjpnk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f7uEHFxD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8iugq28iyih268rpjpnk.png" alt="fix1 branch" width="810" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(If you want to follow up)&lt;/p&gt;

&lt;p&gt;I added "2. Captain America"&lt;br&gt;
         "3. Thor" ...so on&lt;br&gt;
Added all the files and made a commit.&lt;br&gt;
This process went on.&lt;/p&gt;

&lt;p&gt;Currently, the master branch looks like - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PgMDKRcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qznrqrwehkucqc1llb15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PgMDKRcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qznrqrwehkucqc1llb15.png" alt="master branch" width="352" height="317"&gt;&lt;/a&gt; &lt;br&gt;
Commit list -&lt;br&gt;
&lt;code&gt;git log&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKoiEAOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ln1pvj0tggg0c6p1pty8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKoiEAOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ln1pvj0tggg0c6p1pty8.png" alt="git log" width="875" height="757"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The fix hasn’t been merged yet -&lt;br&gt;
So, let’s go to fix1 branch and fix the issue.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout fix1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jH78k4j2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijoj7c3u3dw2mfk6jofo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jH78k4j2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijoj7c3u3dw2mfk6jofo.png" alt="git checkout fix1" width="812" height="80"&gt;&lt;/a&gt;&lt;br&gt;
Let’s fix it and make a git commit. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IOHnBDTY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vjdurq9ul47m1v4i8q0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IOHnBDTY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0vjdurq9ul47m1v4i8q0.png" alt="commit in fix1" width="880" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now go to the “master” branch and “merge fix1” branch -&lt;br&gt;
&lt;code&gt;git checkout master&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git merge fix1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J159O3Lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb9l764pz34bah5tj29t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J159O3Lz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wb9l764pz34bah5tj29t.png" alt="error" width="880" height="479"&gt;&lt;/a&gt;&lt;br&gt;
Now, this is exactly what happens when you send a pull request on a file that has been modified.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yHs-t2w3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7r549t5dpdlxkwtz0nz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yHs-t2w3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y7r549t5dpdlxkwtz0nz.png" alt="merge conflict" width="880" height="439"&gt;&lt;/a&gt;&lt;br&gt;
Merge conflict happens because Git gets confused on which commit to choose.&lt;br&gt;
So now, you have to make the changes in the document manually.&lt;/p&gt;

&lt;p&gt;I manually adjusted the code and finally came up with this. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n7uLQH0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2w63ttnihlk6ko0urxn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n7uLQH0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2w63ttnihlk6ko0urxn.png" alt="merge success" width="422" height="388"&gt;&lt;/a&gt;&lt;br&gt;
After fixing the conflict just -&lt;br&gt;
&lt;code&gt;git add .&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git commit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f8O6DpDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqm1f7h5by29v1msgcrm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f8O6DpDB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqm1f7h5by29v1msgcrm.png" alt="final" width="597" height="135"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you got clarity on how git merge conflicts happen and how to solve them if you get one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-undo-with-git-commands"&gt;
  &lt;/a&gt;
  2. Undo with Git Commands
&lt;/h2&gt;

&lt;p&gt;There are many times when I need to revert back to the previous commit or unstage the selected files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-here-are-the-ways-you-can-do-it-"&gt;
  &lt;/a&gt;
  So, here are the ways you can do it -
&lt;/h3&gt;

&lt;p&gt;First let’s initialize an empty git repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jZ98TvWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y0uld53wvl3fgrvgjdi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jZ98TvWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y0uld53wvl3fgrvgjdi.png" alt="init" width="772" height="500"&gt;&lt;/a&gt;&lt;br&gt;
and add some changes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOXTC20w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxyc9j5mqrr7i0jg2zjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOXTC20w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxyc9j5mqrr7i0jg2zjq.png" alt="hello" width="202" height="207"&gt;&lt;/a&gt;&lt;br&gt;
and make a commit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1reverting-unstaged-file-"&gt;
  &lt;/a&gt;
  1.Reverting unstaged file -
&lt;/h3&gt;

&lt;p&gt;Suppose you added some lines here and there and want those lines to be removed. &lt;br&gt;
The file is &lt;strong&gt;modified(not staged)&lt;/strong&gt; and has unnecessary lines.&lt;br&gt;
USE -&lt;code&gt;git checkout -- .&lt;/code&gt; or &lt;code&gt;git checkout -- filename&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6tzwhzH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ztet179eyr485b247ws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6tzwhzH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ztet179eyr485b247ws.png" alt="git checkout -- ." width="553" height="232"&gt;&lt;/a&gt;&lt;br&gt;
After command -&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aOXTC20w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxyc9j5mqrr7i0jg2zjq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aOXTC20w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxyc9j5mqrr7i0jg2zjq.png" alt="hello" width="202" height="207"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2unstage-the-staged-file-"&gt;
  &lt;/a&gt;
  2.Unstage the staged file -
&lt;/h3&gt;

&lt;p&gt;Sometimes, after you have made changes and added the changes using &lt;code&gt;git add -A&lt;/code&gt;&lt;br&gt;
If you want to unstage it  then &lt;br&gt;
use -&amp;gt; &lt;code&gt;git restore --staged .&lt;/code&gt;&lt;br&gt;
The file will keep the changes but remove them from the staging area.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vinn2mq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/svn3er1lsq516jlq1glq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vinn2mq1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/svn3er1lsq516jlq1glq.png" alt="restore" width="880" height="437"&gt;&lt;/a&gt; &lt;br&gt;
If you want now you can use &lt;code&gt;git checkout -- .&lt;/code&gt; to go back to the last commit.&lt;/p&gt;

&lt;p&gt;OR&lt;/p&gt;

&lt;p&gt;If you want to &lt;strong&gt;unstage&lt;/strong&gt; it and go back to commit &lt;/p&gt;

&lt;p&gt;Use -&amp;gt; &lt;code&gt;git reset --hard&lt;/code&gt; if file is modified.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3undo-commits-"&gt;
  &lt;/a&gt;
  3.Undo commits -
&lt;/h3&gt;

&lt;p&gt;I made 3 commits - 1 =“ Hello I am fine”&lt;br&gt;
            2 =”How are you”&lt;br&gt;
            3 =” I am fine”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8K2LpgUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk7fr2h8g32lnqsh19rf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8K2LpgUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pk7fr2h8g32lnqsh19rf.png" alt="log" width="642" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Suppose I want to go back to 1st commit &lt;br&gt;
I have to revert the 2nd commit &lt;br&gt;
Use - &lt;code&gt;git revert commit id-2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YVnlpakq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4iu4rcqiamg52nwyzz89.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YVnlpakq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4iu4rcqiamg52nwyzz89.png" alt="revert" width="851" height="507"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A merge conflict has occurred, simply choose the incoming change. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tbZwGtND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0sf43m4kygs7j28yfucd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tbZwGtND--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0sf43m4kygs7j28yfucd.png" alt="merge error" width="866" height="457"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git add .&lt;/code&gt; command will add the changes to the staging area and get rid of the conflict sign.&lt;br&gt;
Now, you can do any changes you need.&lt;/p&gt;

&lt;p&gt;If you want to save the previous state changes-&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git reset commit_id-x file_name&lt;/code&gt;&lt;br&gt;
Use this to undo changes on a single file or directory from commit x, but retain them in the staged state.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout commit_id-x file_name&lt;/code&gt;&lt;br&gt;
To undo changes on a single file or directory from commit x, but retain them in the unstaged state.&lt;/p&gt;

&lt;p&gt;I would recommend you to try these commands, you will learn way faster. &lt;br&gt;
If you would like to add any other commands that I missed out on, do let me know in the comments. &lt;br&gt;
Thank you for reading :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Connect with me -&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/fidalmathew10"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FidalMathew"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/fidal-mathew-82aba7200/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>git</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Basics of Cloud</title>
      <author>mayank-cse</author>
      <pubDate>Mon, 06 Dec 2021 18:42:31 +0000</pubDate>
      <link>https://dev.to/mayankcse/basics-of-cloud-2dkl</link>
      <guid>https://dev.to/mayankcse/basics-of-cloud-2dkl</guid>
      <description>&lt;p&gt;This blog is in continuation of the last blog. Incase you have missed it, you can check it out here-&lt;br&gt;
    &lt;a href="https://dev.to/mayankcse/basic-terms-to-know-before-getting-started-with-cloud-27m6"&gt;https://dev.to/mayankcse/basic-terms-to-know-before-getting-started-with-cloud-27m6&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#difference-btw-onpremise-and-cloud-computing"&gt;
  &lt;/a&gt;
  Difference btw On-premise and cloud computing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;On-premise Solution has all the required physical devices installed in the computer premises. Cloud Solution on the other hand, are accessed via the internet, and typically hosted by third party vendors.&lt;/li&gt;
&lt;li&gt;Second big difference is the "Pay-As-You-Go" or On-Demand-Service model(cloud) versus the traditional upfront capital expenditure (On-Premise).&lt;/li&gt;
&lt;li&gt;In cloud computing, Low CAPEX cost. No hardware costs while in on premise The larger the enterprise, the greater the CAPEX costs.
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#types-of-cloud-services"&gt;
  &lt;/a&gt;
  Types of cloud services
&lt;/h3&gt;

&lt;p&gt;Cloud services are divided into three main categories:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dcdRVGmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dx5bzsn8hxa0dg8xuy5q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dcdRVGmP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dx5bzsn8hxa0dg8xuy5q.png" alt="Types of cloud services" width="880" height="532"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Infrastructure-as-a-service (laaS)&lt;/strong&gt;: The most important and widely used category of cloud computing services. With laaS, you can rent IT infrastructure-servers and virtual machines (VMS), storage, networks and operating systems from a cloud provider on a pay-as-you-go basis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Platform as a service (PaaS)&lt;/strong&gt;: Platform-as-a-service (PaaS) refers to cloud computing services that supply an on-demand environment for developing, testing, delivering and managing software applications. PaaS is designed to make it easier for developers to quickly create web or mobile apps, without worrying about setting up or managing the underlying infrastructure of servers, storage, network and databases needed for development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Software as a service (SaaS)&lt;/strong&gt;: Software-as-a-service (SaaS) is a method for delivering software applications over the internet on demand and typically on a subscription basis. With SaaS, cloud &lt;br&gt;
providers host and manage the software application and underlying infrastructure, and handle any maintenance, like software upgrades and security patching. Users connect to the application over the Internet, usually with a web browser on their phone, tablet or PC.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lWNr1zti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfh83sckqmogp1rd4pst.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lWNr1zti--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rfh83sckqmogp1rd4pst.png" alt="Types of cloud services" width="736" height="466"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#overview-of-cloud-technology"&gt;
  &lt;/a&gt;
  Overview of Cloud technology
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Cloud Computing&lt;/strong&gt; is the delivery of computing services-servers, storage, databases, networking, software, analytics and more-over the internet (the cloud).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Public, private, and hybrid clouds&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Public cloud:&lt;/strong&gt; Public clouds are owned and operated by a third-party cloud service provider, which deliver the computing resources like servers and storage over the internet. Microsoft Azures is an example of a public cloud. With a public cloud, all hardware, software and other supporting infrastructure are owned and managed by the cloud provider. You access these services and manage your account using a web browser.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#advantages-of-public-clouds"&gt;
  &lt;/a&gt;
  Advantages of public clouds:
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;Lower costs&lt;/code&gt;&lt;/strong&gt;—no need to purchase hardware or software, and you pay only for the service you use.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;No maintenance&lt;/code&gt;&lt;/strong&gt;—your service provider provides the maintenance.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;Near-unlimited scalability&lt;/code&gt;&lt;/strong&gt;—on-demand resources are available to meet your business needs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;High reliability&lt;/code&gt;&lt;/strong&gt;—a vast network of servers ensures against failure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Private cloud :&lt;/strong&gt;A private cloud refers to cloud computing resources and exclusively by a single business or organization. A private cloud can be physically located on the company's on-site datacenter. Some companies also pay third-party service providers to host their private cloud. A private cloud is one in which the services and infrastructure are maintained on a private network.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#advantages-of-a-private-cloud"&gt;
  &lt;/a&gt;
  Advantages of a private cloud:
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;More flexibility&lt;/code&gt;&lt;/strong&gt;—your organization can customize its cloud environment to meet specific business needs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;More control&lt;/code&gt;&lt;/strong&gt;—resources are not shared with others, so higher levels of control and privacy are possible.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;More scalability&lt;/code&gt;&lt;/strong&gt;—private clouds often offer more scalability compared to on-premises infrastructure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Hybrid Cloud:&lt;/strong&gt; Hybrid cloud combine public and private clouds, bound together by technology that allows data and applications to be shared between them. By allowing data and applications to move between private and public clouds, hybrid cloud gives businesses greater flexibility and more deployment options. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#advantages-of-the-hybrid-cloud"&gt;
  &lt;/a&gt;
  Advantages of the hybrid cloud:
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;Control&lt;/code&gt;&lt;/strong&gt;—your organization can maintain a private infrastructure for sensitive assets or workloads that require low latency.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;Flexibility&lt;/code&gt;&lt;/strong&gt;—you can take advantage of additional resources in the public cloud when you need them.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;Cost-effectiveness&lt;/code&gt;&lt;/strong&gt;—with the ability to scale to the public cloud, you pay for extra computing power only when needed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;code&gt;Ease&lt;/code&gt;&lt;/strong&gt;—transitioning to the cloud doesn’t have to be overwhelming because you can migrate gradually—phasing in workloads over time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G-cK6IqI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aa6cxl1c4d6fce5loihz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G-cK6IqI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aa6cxl1c4d6fce5loihz.png" alt="Public|Private|Hybrid" width="880" height="339"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;This was all about this week. Next week onwards we'll be exploring Azure Portal, getting familiar with the following topics:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* How to Create a Microsoft Azure Account?
* What is a Resource group?
* How to create a Resource Group?
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>azure</category>
      <category>cloud</category>
      <category>aws</category>
      <category>career</category>
    </item>
    <item>
      <title>Python 3.10 Structural Pattern Matching (Match Case)</title>
      <author>Vinay Khatri</author>
      <pubDate>Mon, 06 Dec 2021 18:35:59 +0000</pubDate>
      <link>https://dev.to/khatrivinay/python-310-structural-pattern-matching-match-case-35dh</link>
      <guid>https://dev.to/khatrivinay/python-310-structural-pattern-matching-match-case-35dh</guid>
      <description>&lt;p&gt;After a wait of so many updates, Python has finally introduced a switch-case like structure in its latest 3.10 version. If we talk about other programming languages like, C++, Java, and JavaScript all these three popular programming languages support switch case statement, which is an alternative to write efficient and cleaner conditional statement.&lt;br&gt;
Let's see an example of Switch Case statement in C++&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#switch-case-statement-in-c"&gt;
  &lt;/a&gt;
  Switch Case Statement in C++
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;

int main() {
    int http = 200;

    switch (http) {
        case  200:
            cout&amp;lt;&amp;lt;"OK";
            break;
        case 201:
            cout&amp;lt;&amp;lt;"CREATED";
            break;
        case 202:
            cout&amp;lt;&amp;lt;"ACCEPTED";
            break;
        case 400:
            cout&amp;lt;&amp;lt;"BAD REQUEST";
            break;
        case 404:
            cout&amp;lt;&amp;lt;"NOT FOUND";
            break;
        case 503:
            cout&amp;lt;&amp;lt;"SERVICE UNAVAILABLE";
            break;
        default:
            cout &amp;lt;&amp;lt; "Error! HTTP Code is not valid";
            break;
    }

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;OUTPUT&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;ok&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The above code is very clean example of conditional statement. The switch case comes very handy when we have a conditional operation based on a single data object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-structural-pattern-matching"&gt;
  &lt;/a&gt;
  Python Structural Pattern Matching
&lt;/h2&gt;

&lt;p&gt;In Python 3.10, the core developer team of Python introduced a new conditional statement syntax Structural Pattern Matching, which is a similar syntax to the switch case statement present in the other programming languages.&lt;/p&gt;

&lt;p&gt;Although Python contain &lt;code&gt;if..else&lt;/code&gt; and &lt;code&gt;if...elif...else&lt;/code&gt; statements to write conditional statements, but the all new Python Structural Pattern Matching provides a more elegant and legible way to write some conditional statement.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;match subject:
    case pattern1:
        #case 1 code block
    .....
    ....
    ...
    case patternN:
        #case N code block
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#keywords"&gt;
  &lt;/a&gt;
  Keywords
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;match&lt;/code&gt; is the keyword here.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;subject&lt;/code&gt; is the value that need to be match.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;case&lt;/code&gt; is also a keyword&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pattern&lt;/code&gt; is the value that will be match with &lt;code&gt;subject&lt;/code&gt; if any case pattern matches the &lt;code&gt;match&lt;/code&gt; &lt;code&gt;subject&lt;/code&gt; that case code block will be executed.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http = 200

match http:
    case 200:
        print("OK")
    case 201:
        print("CREATED")
    case 202:
        print("ACCEPTED")
    case 400:
        print("BAD REQUEST")
    case 404:
        print("NOT FOUND")
    case 503:
        print("SERVICE UNAVAILABLE")
    case _:
        print("Error! HTTP Code is not valid")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;OK
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The new Python match case statement is an alternative of the switch case statement present in the other programming languages. Although the switch case statement provide an elegant way to write conditional statement, still for complex and multilayer conditional statement it is not a good option. It can only be used when the condition expression is a single value.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to create a progress bar with HTML and CSS</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 06 Dec 2021 18:22:28 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/how-to-create-a-progress-bar-with-html-and-css-1fl5</link>
      <guid>https://dev.to/alvaromontoro/how-to-create-a-progress-bar-with-html-and-css-1fl5</guid>
      <description>&lt;p&gt;There are many pages on how to create a progress bar using web technologies, why do we need a new one? I found that many of those tutorials are &lt;em&gt;bloated&lt;/em&gt;: they include a lot of unnecessary HTML elements or they base everything on JavaScript. Also, they tend to forget about Web Accessibility, and the resulting component will prove to be a challenge for assistive technologies (AT) users.&lt;/p&gt;

&lt;p&gt;But it doesn't have to be that way. We can create a dynamic progress bar component using a single HTML element and some CSS, and it can be customizable, responsive, and accessible. I explained the process in this video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aXmNG2wie7I"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you prefer reading rather than watching videos for tutorials, I'll have a post about this topic soon (it will be sort of a transcript from the video). Or if you want to jump directly to the code and explore it, you can view the source code on this &lt;a href="https://codepen.io/alvaromontoro/full/poWgdVV"&gt;CodePen demo&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/poWgdVV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>youtube</category>
      <category>html</category>
    </item>
    <item>
      <title>Moving our Website to a new Domain!</title>
      <author>Rajdeep Malakar</author>
      <pubDate>Mon, 06 Dec 2021 18:18:55 +0000</pubDate>
      <link>https://dev.to/electronstore_/moving-our-website-to-a-new-domain-16lo</link>
      <guid>https://dev.to/electronstore_/moving-our-website-to-a-new-domain-16lo</guid>
      <description>&lt;p&gt;Quite a few months back we created the Electron App Store. In that time we chose &lt;strong&gt;Freenom&lt;/strong&gt; for our free Domain name. Since then the project became much popular. Just a month back we had applied for sponsorship from Fosshost.org. &lt;strong&gt;Fosshost.org&lt;/strong&gt; is a non-profit company who provides free cloud services and domain names to Open-Source projects. Proudly we got approved by them. We had applied for electron-store.org domain name and now we have it. Just a few weeks ago we had moved the main website to electron-store.org and now we had moved the API to api.electron-store.org! There's much more planned for the v0.0.5 update which is delayed because of new features.&lt;/p&gt;

&lt;p&gt;The new features includes (but not limited to):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Developer Portal to submit apps&lt;/li&gt;
&lt;li&gt;Faster Loading time (thanks to the new API)&lt;/li&gt;
&lt;li&gt;Account Login and Rating functionality&lt;/li&gt;
&lt;li&gt;Metrics/Statistics for Apps&lt;/li&gt;
&lt;li&gt;Claiming of existing apps in the Developer Portal&lt;/li&gt;
&lt;li&gt;New Terms &amp;amp; Conditions and a dedicated App Listing Agreement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's not all and the exact features would be announced 2 days before the Official Update! Also stay in loop by following our &lt;a href="https://twitter.com/ElectronStore_"&gt;Twitter Account&lt;/a&gt; and Dev.to page!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Writer&lt;/strong&gt;: Rajdeep Malakar ( &lt;a class="mentioned-user" href="https://dev.to/rajdeep"&gt;@rajdeep&lt;/a&gt;
 )&lt;br&gt;
&lt;strong&gt;Domain Provided By&lt;/strong&gt;: Fosshost.org ( &lt;a class="mentioned-user" href="https://dev.to/fosshostorg"&gt;@fosshostorg&lt;/a&gt;
 )&lt;br&gt;
&lt;strong&gt;Twitter&lt;/strong&gt;: &lt;a href="https://twitter.com/ElectronStore_"&gt;@ElectronStore_&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href="https://github.com/Electron-Store"&gt;Electron-Store&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get your OSS Apps ready for the new &lt;strong&gt;Electron Store&lt;/strong&gt;!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>create a Mock API using graphQl and Apollo </title>
      <author>karthikeyan</author>
      <pubDate>Mon, 06 Dec 2021 18:15:35 +0000</pubDate>
      <link>https://dev.to/karthik_n/create-a-mock-api-using-graphql-and-apollo-2pa9</link>
      <guid>https://dev.to/karthik_n/create-a-mock-api-using-graphql-and-apollo-2pa9</guid>
      <description>&lt;p&gt;install these packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    "cors": "^2.8.5",
    "express": "^4.17.1",
    "express-graphql": "^0.12.0",
    "graphql": "^15.4.0"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;UserType.js

const graphql = require("graphql");
const { GraphQLObjectType, GraphQLInt, GraphQLString } = graphql;

const UserType = new GraphQLObjectType({
  name: "User",
  fields: () =&amp;gt; ({
   //any fields
      Name: { type: GraphQLString  },
      age: { type: GraphQLString  },
  }),
});

module.exports = UserType;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Schema.js

const graphql = require("graphql");
const {
  GraphQLObjectType,
  GraphQLSchema,
  GraphQLInt,
  GraphQLString,
  GraphQLList,
} = graphql;

//import mock data here
const UserType = require("./UserType");

const RootQuery = new GraphQLObjectType({
  name: "RootQueryType",
  fields: {
    getAllUsers: {
      type: new GraphQLList(UserType),
      args: { Name: { type: GraphQLString } },
      resolve(parent, args) {
       //return mock data
        return data;
      },
    },
  },
});

module.exports = new GraphQLSchema({ query: RootQuery });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;index.js 

const express = require("express");
const app = express();
const PORT = 6969;
const { graphqlHTTP } = require("express-graphql");
const schema = require("./Schemas/Schema");
const cors = require("cors");

app.use(cors());
app.use(express.json());
app.use(
  "/data",
  graphqlHTTP({
    schema,
    graphiql: true,
  })
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>react</category>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
    </item>
    <item>
      <title>CI-CD pipeline with discord issue notification</title>
      <author>Ayan-web</author>
      <pubDate>Mon, 06 Dec 2021 18:08:30 +0000</pubDate>
      <link>https://dev.to/ayanweb/ci-cd-pipeline-with-discord-issue-notification-4np3</link>
      <guid>https://dev.to/ayanweb/ci-cd-pipeline-with-discord-issue-notification-4np3</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;A very simple pipeline. First have your project setup with scripts &lt;code&gt;test&lt;/code&gt; to test app, &lt;code&gt;build&lt;/code&gt; to build app. the action test on node &lt;code&gt;v16&lt;/code&gt;. &lt;br&gt;
Create a &lt;code&gt;HEROKU_API_KEY&lt;/code&gt; and &lt;code&gt;HEROKU_EMAIL&lt;/code&gt;( your heroku mail id) secret in your repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M2Hb3J_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm9eev7qhteog35vh8l7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M2Hb3J_v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gm9eev7qhteog35vh8l7.png" alt="Screenshot of setting secret" width="880" height="399"&gt;&lt;/a&gt;&lt;br&gt;
that's set now for the Issue message.&lt;br&gt;
Create a discord web hook for your server then create 2 more secrets &lt;code&gt;WEBHOOK_ID&lt;/code&gt; the number part after &lt;code&gt;https://discord.com/api/webhooks/&lt;/code&gt; and &lt;code&gt;WEBHOOK_TOKEN&lt;/code&gt; the text blob after the &lt;code&gt;id&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;DIY Deployments&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Ayan-web"&gt;
        Ayan-web
      &lt;/a&gt; / &lt;a href="https://github.com/Ayan-web/ci-cd-issuetracker-action"&gt;
        ci-cd-issuetracker-action
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      this my github action which has basic ci-cd and issue message with discord server
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
ci-cd-issuetracker-action&lt;/h1&gt;
&lt;p&gt;this my github action which has basic ci-cd and issue message with discord server
A very simple pipeline. Have your project setup with scripts &lt;code&gt;test&lt;/code&gt; to test app, &lt;code&gt;build&lt;/code&gt; to build app. the action test on node &lt;code&gt;v12.x&lt;/code&gt;, &lt;code&gt;v14.x&lt;/code&gt; and &lt;code&gt;v16.x&lt;/code&gt;.
Create a &lt;code&gt;HEROKU_API_KEY&lt;/code&gt; secret in your repository.
that's set now for the Issue message.
Create a discord web hook for your server then create 2 more secrets &lt;code&gt;WEBHOOK_ID&lt;/code&gt; the number part after &lt;code&gt;https://discord.com/api/webhooks/&lt;/code&gt; and &lt;code&gt;WEBHOOK_TOKEN&lt;/code&gt; the text blob after the &lt;code&gt;id&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/Ayan-web/ci-cd-issuetracker-action"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;here is my demo &lt;a href="https://github.com/Ayan-web/demo"&gt;Git repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>node</category>
      <category>devops</category>
      <category>discordbot</category>
    </item>
    <item>
      <title>Building a CLI tool using node - An Ultimate Beginners guide 🚀</title>
      <author>Meer Hamza</author>
      <pubDate>Mon, 06 Dec 2021 18:00:20 +0000</pubDate>
      <link>https://dev.to/meerhamza1421/building-a-cli-tool-using-node-an-ultimate-beginners-guide-adj</link>
      <guid>https://dev.to/meerhamza1421/building-a-cli-tool-using-node-an-ultimate-beginners-guide-adj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-cli-tool"&gt;
  &lt;/a&gt;
  What is a CLI Tool
&lt;/h2&gt;

&lt;p&gt;A tool that allows you to perform certain tasks or operations right from your terminal is a CLI tool.&lt;/p&gt;

&lt;p&gt;As a programmer 👨‍💻, we use CLI tools on daily basis, from creating projects to managing versions of the projects, CLI is everywhere. In this article, we will explore how you can create a CLI tool on your own from scratch and publish it on npm. We will use Nodejs for this purpose, but first, let’s understand what are the perks of using nodejs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nodejs has a handful of packages and libraries to do variety of tasks.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/"&gt;npmjs&lt;/a&gt; is the worlds largest software registry with thousand of packages, where we can publish ours.&lt;/li&gt;
&lt;li&gt;By creating a CLI in node:

&lt;ul&gt;
&lt;li&gt;We can automate repetitive tasks.&lt;/li&gt;
&lt;li&gt;We can create and publish open-source npm packages like create-react-app.&lt;/li&gt;
&lt;li&gt;We can create troubleshooting tools, etc&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;To build a CLI in Node, you should have the prior knowledge of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fundamental JavaScript (not vanilla)&lt;/li&gt;
&lt;li&gt;Basics of nodejs &amp;amp; npm&lt;/li&gt;
&lt;li&gt;Asynchronous JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we will create a CLI tool which generates random passwords from your terminal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-project"&gt;
  &lt;/a&gt;
  Setting up the project
&lt;/h2&gt;

&lt;p&gt;First we will create a directory that will keep our cli code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;random-password-generator
&lt;span class="nb"&gt;cd &lt;/span&gt;random-password-generator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After creating the project folder we have to initialized our nodejs project&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will ask some questions from you, you can also use &lt;code&gt;npm init -y&lt;/code&gt; to set the default values. This will create a package.json file.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-packagejson-file"&gt;
  &lt;/a&gt;
  What is package.json file
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;package.json&lt;/code&gt; file is the heart of any Node project. It records important metadata about a project which is required before publishing to npm, and also defines attributes of a project that npm uses to install dependencies, run scripts, and identify the execution point to our package.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-cli-tool"&gt;
  &lt;/a&gt;
  Creating the CLI tool:
&lt;/h2&gt;

&lt;p&gt;Create a file &lt;code&gt;index.js&lt;/code&gt; in the root of the project directory. This will be the main starting point of the execution and it'll run all the associated functions and commands.&lt;br&gt;
Now let's begin to create our cli tool. Our cli tool consists of the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Randomly generates strong passwords.&lt;/li&gt;
&lt;li&gt;Automatically copy passwords to the clipboard, when created.&lt;/li&gt;
&lt;li&gt;Have a history feature that shows the lastly created password.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To implement the random password generation functionality paste the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0123456789abcdefghijklmnopqrstuvwxyz!@#$%^&amp;amp;*()ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;passwordLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;passwordLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;chars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;randomNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;randomNumber&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate a random password on every run.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jMtFfYCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vflapi5fhm4q3ccz1ye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jMtFfYCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vflapi5fhm4q3ccz1ye.png" alt="Console Output" width="880" height="247"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perfect a strong random password is generating on every run but if you notice to generate the password you have to run &lt;code&gt;node index.js&lt;/code&gt; every time which is not ideal especially in case of a cli tool. We are supposed to write a command for example &lt;strong&gt;passgen&lt;/strong&gt; or &lt;strong&gt;pswdgen&lt;/strong&gt; to generate the passwords. So, to achieve this functionality we have to modify our &lt;code&gt;index.js&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files. In the index.js file add this line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env node&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above line is called shebang. It tells the system to execute the code using the node environment. Make sure to add it to the first line of your main execution file. In &lt;code&gt;package.json&lt;/code&gt; add the following code above the &lt;strong&gt;main&lt;/strong&gt; key in such format "main-command-name": "main-file-path", In our case:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"bin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"pswdgen"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./index.js"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, to generate the password you simply type pswdgen on the terminal but to enable it and test your cli locally you have to link it first. To link the cli run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;link&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;if you face any error try to run it with a -f flag&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The output would be&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LNfuS-lL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/174svpe7thfx0soew4m0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LNfuS-lL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/174svpe7thfx0soew4m0.png" alt="Image description" width="880" height="230"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we work on the auto copy feature of the cli. For this purpose, we use a package named &lt;a href="https://www.npmjs.com/package/clipboardy"&gt;clipboardy&lt;/a&gt;. To install run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;clipboardy&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To automatically copy the password on the clipboard we simply have to add this line after the loop&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;clipboard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeSync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Make sure you import clipboardy&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, we implement history feature through which we can view the lastly created password through the &lt;code&gt;-h&lt;/code&gt; or &lt;code&gt;--history&lt;/code&gt; flag. For this purpose we use &lt;a href="https://www.npmjs.com/package/conf"&gt;conf&lt;/a&gt; package. But first, let's create the flag feature. We use &lt;code&gt;process.argv&lt;/code&gt;for this purpose, &lt;code&gt;process.argv&lt;/code&gt; is an inbuilt API used to get the arguments passed via command line like &lt;code&gt;-h&lt;/code&gt;. We will slice it to remove the first two indexes of it to get relevant data only.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now to store password we use following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prevPassword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Make sure to import and initialized conf as follow&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Conf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;conf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Conf&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use &lt;code&gt;-h&lt;/code&gt; feature only when requested we make it sure to use the get history code of the conf in a &lt;code&gt;if&lt;/code&gt; statement as follow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-h&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--history&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prevPassword&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Also make sure to use the mentioned code above the config.set code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The output would be&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Sreix97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r14aae6v9pzhvzm88uds.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Sreix97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r14aae6v9pzhvzm88uds.png" alt="Image description" width="880" height="387"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our cli is complete 🎉🎉 but if you notice at the codebase all things are coded on a single function and file which makes codebase messy and also it will become hard to debug as it increases and the interface of the cli is also not good and user friendly, the user didn't get any idea of the password, as it copies on the clipboard or not.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1JIOKoaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjt78dvv7kctejwr9hdd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JIOKoaD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zjt78dvv7kctejwr9hdd.png" alt="Image description" width="880" height="575"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, instead of a single function let’s divide it into multiple functions according to their functionality. It will be divided into four functions &lt;code&gt;passwordGenerator&lt;/code&gt;, &lt;code&gt;copyToClipboard&lt;/code&gt;, &lt;code&gt;savePassword&lt;/code&gt; and &lt;code&gt;history&lt;/code&gt;. Now we will create a separate folder named &lt;code&gt;functions&lt;/code&gt; and create a file for each function respectively. Now, we work on the interface of the cli. For this purpose, we use 2 packages.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/cli-welcome"&gt;cli-welcome&lt;/a&gt; for a welcome cli header&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com/package/chalk"&gt;chalk&lt;/a&gt; to style the output string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To install cli-welcome, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i cli-welcome
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will create a folder name &lt;code&gt;utils&lt;/code&gt; and create a file &lt;code&gt;header&lt;/code&gt; in it where we add the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;welcome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cli-welcome&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`password-generator-cli`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;tagLine&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`by Meer Hamza`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bgColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`#00ff00`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`#ffffff`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`randomly generates strong passwords`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`1.0`&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and now simply import this file and call the header function above all the function calls. This will generate this beautiful header&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eMvpibcw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k34rv73gng5zct99awo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eMvpibcw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2k34rv73gng5zct99awo.png" alt="Image description" width="676" height="80"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, in the &lt;code&gt;utils&lt;/code&gt; we create a file, name &lt;code&gt;cli&lt;/code&gt; or &lt;code&gt;body&lt;/code&gt; and paste the following code and its associated imports from the &lt;code&gt;index.js&lt;/code&gt; to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Conf&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-h&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;--history&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;history&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;passwordGenerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nx"&gt;copyToClipBoard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;savePassword&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we beautify the output and the copy to clipboard message using the chalk. To install chalk, run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;1.2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we will style different things like &lt;code&gt;password&lt;/code&gt;, &lt;code&gt;previous password&lt;/code&gt; etc. for example to style copy to clipboard message we write following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chalk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Password copy to the clipboard&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final look of the cli will be:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0T9ksjX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc4yt0mkofio0rvl58w4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0T9ksjX_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oc4yt0mkofio0rvl58w4.png" alt="Image description" width="800" height="190"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;with  &lt;code&gt;-h&lt;/code&gt; flag&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KTt4YTbi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t237y73zmf3iwu9qhq48.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KTt4YTbi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t237y73zmf3iwu9qhq48.png" alt="Image description" width="832" height="127"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#publishing-the-cli-tool"&gt;
  &lt;/a&gt;
  Publishing the CLI tool
&lt;/h2&gt;

&lt;p&gt;After creating the cli, to make it accessible to everyone we publish it to &lt;a href="https://www.npmjs.com/"&gt;npm js&lt;/a&gt;, which is the home of thousands of packages, as a package. So, make sure you have created an account on the npmjs. After the account creation, run the following command in your terminal&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;login&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be asked to enter your username, password, and email. If all correct, you will be logged in.&lt;/p&gt;

&lt;p&gt;Then, to publish your cli run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;publish&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command publicly published your cli on npm with the name specified in project's &lt;code&gt;package.json&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"package-name"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It can also give the error if another package with the same name exist. Keep in mind there's a difference in &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;command-name&lt;/code&gt; we specified in the &lt;em&gt;bin&lt;/em&gt; attribute, &lt;code&gt;name&lt;/code&gt; is used to download package from npmjs while &lt;code&gt;command-name&lt;/code&gt; specified in the &lt;em&gt;bin&lt;/em&gt; used to run cli and functions. To install your package from &lt;em&gt;npm&lt;/em&gt; simply run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="nx"&gt;pswd&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;generator&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cli&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Whenever you make changes in the CLI, you have to change the version in the &lt;code&gt;package.json&lt;/code&gt; and then republished the changes otherwise it will give error.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations, you learned how to create a CLI tool using Node.js 🎉🎉. The sky is the limit, go create something awesome. I also created an open-source template so you don't need to start everything from scratch. &lt;br&gt;
&lt;a href="https://github.com/MeerHamza1421/node-cli-template"&gt;github.com/MeerHamza1421/node-cli-template&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;code link: &lt;a href="https://drive.google.com/drive/folders/1ZiSjiD5EL-BjMtdS3Ovbib7FUIOW6O8-?usp=sharing"&gt;code&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>npm</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
