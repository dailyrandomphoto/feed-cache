<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>20 JavaScript One-Liners That Will Help You Code Like a Pro</title>
      <author>John</author>
      <pubDate>Sun, 31 Oct 2021 04:32:55 +0000</pubDate>
      <link>https://dev.to/jdk/20-javascript-one-liners-that-will-help-you-code-like-a-pro-30lc</link>
      <guid>https://dev.to/jdk/20-javascript-one-liners-that-will-help-you-code-like-a-pro-30lc</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;JavaScript keeps growing and growing20 JavaScript One-Liners That Will Help You Code Like, opening doors for new ‚Äúto be tech geeks‚Äù in the market as it‚Äôs one of the easiest languages to start. (is it really?)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;It‚Äôs true that JavaScript can do a lot of blazing things! and there is just so much to learn.&lt;/p&gt;
&lt;p&gt;And whether you‚Äôre new to JavaScript or more of a professional developer it‚Äôs always good to learn something new.&lt;/p&gt;
&lt;p&gt;I‚Äôm gonna go over some really helpful one-liners (20 + Bonus) that can help you boost your productivity and can help in debugging code.¬†&lt;/p&gt;
&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-javascript-one-liners-that-will-help-you-code-like-a-pro/&amp;amp;ved=2ahUKEwip-5yjmNPzAhXk_XMBHd2yDaMQFnoECAkQAQ&amp;amp;usg=AOvVaw285TovlnD0Mc9Cm8Rcycp3"&gt;20 JavaScript One-Liners That Will Help You Code Like a Pro&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>40+ JavaScript Projects for Beginners ‚Äì Easy Ideas to Get Started Coding JS [Beginners to Advance]üî•</title>
      <author>John</author>
      <pubDate>Sun, 31 Oct 2021 04:30:54 +0000</pubDate>
      <link>https://dev.to/jdk/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-to-advance-37h9</link>
      <guid>https://dev.to/jdk/40-javascript-projects-for-beginners-easy-ideas-to-get-started-coding-js-beginners-to-advance-37h9</guid>
      <description>&lt;p&gt;&lt;span&gt;&lt;span&gt;&lt;b&gt;The best way to learn a new programming language is to build projects.

I have created a list of 40 beginner friendly project tutorials in Vanilla JavaScript, React, and TypeScript.

My advice for tutorials would be to watch the video, build the project, break it apart and rebuild it your own way. Experiment with adding new features or using different methods.

That will test if you have really learned the concepts or not.

You can click on any of the projects listed below to jump to that section of the article.

&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/40-javascript-projects-for-beginners/&amp;amp;ved=2ahUKEwiB9tj0rPjyAhUMX30KHZQ5CG0QFnoECAgQAQ&amp;amp;usg=AOvVaw26RDQjHugdhbATVS83LI83"&gt;40 JavaScript Projects for Beginners ‚Äì Easy Ideas to Get Started Coding JS

&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>[Looking for feedback.] Janky: Templates and Raw Types.</title>
      <author>Calin Baenen</author>
      <pubDate>Sun, 31 Oct 2021 04:16:10 +0000</pubDate>
      <link>https://dev.to/baenencalin/looking-for-feedback-janky-templates-and-raw-types-3onn</link>
      <guid>https://dev.to/baenencalin/looking-for-feedback-janky-templates-and-raw-types-3onn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#feedback"&gt;
  &lt;/a&gt;
  Feedback.
&lt;/h1&gt;

&lt;p&gt;What are you giving feedback on?&lt;br&gt;
How I plan on implementing templates (similar to C++'s template arguments) and raw-types in Janky.&lt;br&gt;&lt;br&gt;
All feedback, good or bad, as long as it's constructive and non-sarcastic is accepted, and I'll be trying to respond, and take as many notes as possible.&lt;br&gt;
Thanks in advance!&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#templates"&gt;
  &lt;/a&gt;
  Templates.
&lt;/h1&gt;

&lt;p&gt;Templates act like C++'s template arguments, but they look like Java's generics, here's what I'm thinking they'll look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Should the `type` keyword be optional here?
// Type identifiers can also be used here, so I thought I should ask.

struct MyType&amp;lt;type T&amp;gt; {
    MyType(T v) { this.value = v; }
    T value;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Legal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyType&amp;lt;int&amp;gt;;
MyType&amp;lt;MyType&amp;gt;;
MyType&amp;lt;void&amp;gt;; // This is a special case.
MyType&amp;lt;T&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Illegal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MyType&amp;lt;null&amp;gt;;
MyType&amp;lt;0&amp;gt;;
MyType&amp;lt; MyType() &amp;gt;;
MyType&amp;lt; new MyType() &amp;gt;;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-void-endraw-s-special-case"&gt;
  &lt;/a&gt;
  &lt;code&gt;void&lt;/code&gt;'s special case...
&lt;/h2&gt;

&lt;p&gt;Fun fact... did you know you can run this snippet of C++ legally, without any errors or warnings?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#note-expansion-to-raw-t-val-t-return-val-endraw-causes-multiple-errors-if-you-pass-raw-void-endraw-"&gt;
  &lt;/a&gt;
  NOTE: Expansion to &lt;code&gt;{ T val/* = T()*/; return val; }&lt;/code&gt; causes multiple errors if you pass &lt;code&gt;void&lt;/code&gt;.
&lt;/h4&gt;

&lt;p&gt;Yeah! Passing in void works!&lt;br&gt;
But... What does this mean for object-members in my language?&lt;br&gt;
This means they'll (act as if they've) be(en) removed from the object.&lt;br&gt;
Note, if &lt;code&gt;void&lt;/code&gt; is generic, then it may take any number of arguments for its constructors, consisting of any type.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#raw-types"&gt;
  &lt;/a&gt;
  Raw Types.
&lt;/h1&gt;

&lt;p&gt;Love 'em or hate 'em, they have to come, they're too useful in the most niche of situations.&lt;br&gt;
For example, if you want a heterogeneous array of a template type &lt;code&gt;MyType&lt;/code&gt;, so instead of &lt;code&gt;MyType&amp;lt;type T&amp;gt;&lt;/code&gt;, you could use &lt;code&gt;raw MyType&lt;/code&gt;.&lt;br&gt;
&lt;code&gt;raw&lt;/code&gt; would be its own keyword, to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A: Avoid any confusion/ambiguity between raw types, and types with default template arguments.&lt;/li&gt;
&lt;li&gt;B: To make sure types aren't accidentally raw.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#regarding-the-typesafety-of-raw-types-in-janky"&gt;
  &lt;/a&gt;
  Regarding the type-safety of Raw Types (in Janky).
&lt;/h2&gt;

&lt;p&gt;I know when it comes to raw-datatypes, types whose generic-type-arguments aren't specified, have some type-safety concerns, and such concerns are valid, because these types CAN be dangerous, and aren't afraid to help create nasty bugs.&lt;br&gt;
But, I've put some forethought into the matter. and I'll discuss these briefly.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#where-can-raw-types-be-passed"&gt;
  &lt;/a&gt;
  Where can Raw Types be passed?
&lt;/h3&gt;

&lt;p&gt;Raw types (&lt;code&gt;raw MyType&lt;/code&gt;*) can be passed to functions, methods, constructors, and other callables just like how any other kind of types (&lt;code&gt;MyType&amp;lt;T&amp;gt;&lt;/code&gt;*) can.&lt;br&gt;
There's a catch though, the type qualifiers for the &lt;code&gt;MyType&amp;lt;T&amp;gt;&lt;/code&gt; in the parameter signature should include &lt;code&gt;raw&lt;/code&gt;, meaning this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;void f(raw MyType value) {/* Do stuff... */}
void g(raw MyType&amp;lt;int&amp;gt; value) {
    /* We'll talk about this in a minute... */
}
void h(MyType value) {
    /* Illegal function definition: MyType must include
        a(n) (type) argument for `T`. */
}
void j(MyType&amp;lt;int&amp;gt; value) {
    /* Do stuff... */
}

raw MyType rawval = MyType&amp;lt;int&amp;gt;(10); // The `&amp;lt;int&amp;gt;` is required.
MyType&amp;lt;int&amp;gt; cookedval = MyType&amp;lt;int&amp;gt;(10); // The second `&amp;lt;int&amp;gt;` is optional.

f(cookedval); // Fine. It just "uncooks" the value.
g(cookedval); // Fine. (No "uncooking" needed.)
j(cookedval); // Fine.

f(rawval); // This is okay (obviously).
g(rawval); // This is fine... In this case...
j(rawval); // Not fine. - Raw and cooked types are not compatible.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#what-is-the-elusive-raw-raw-mytypelttgt-endraw-"&gt;
  &lt;/a&gt;
  What is (the elusive) &lt;code&gt;raw MyType&amp;lt;T&amp;gt;&lt;/code&gt;?
&lt;/h3&gt;

&lt;p&gt;Maybe you've figured it out from the last example, maybe you haven't.&lt;br&gt;&lt;br&gt;
Anyways. The these types that are both cooked, but have the raw type-qualifier are called "undercooked" types. Though, I think a more accurate, and beautiful name for them may be "baked types" (Feedback for which name to use, if this should be implemented, is welcome!).&lt;/p&gt;

&lt;p&gt;So, what are baked types? Well, as the last line of my elaborate example says, "&lt;code&gt;Raw and cooked types are not compatible&lt;/code&gt;". Meaning that, even if a &lt;code&gt;raw MyType&lt;/code&gt; contains an &lt;code&gt;int&lt;/code&gt;, it still isn't compatible with &lt;code&gt;MyType&amp;lt;int&amp;gt;&lt;/code&gt;.&lt;br&gt;
But, I've decided to allow this "cooking" of the raw type on one condition, and that's if &lt;code&gt;MyType&amp;lt;T&amp;gt;&lt;/code&gt; has the &lt;code&gt;raw&lt;/code&gt; qualifier (this is a safety mechanism to stop types from being cooked accidentally).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up.
&lt;/h2&gt;

&lt;p&gt;So. Those were my ideas for Templates and Raw Types in Janky. Tell me your thoughts below!&lt;/p&gt;

</description>
      <category>feedback</category>
      <category>janky</category>
      <category>watercooler</category>
      <category>help</category>
    </item>
    <item>
      <title>Amazon Aurora MySQL Database Administrator‚Äôs Handbook | AWS White Paper Summary</title>
      <author>Salah Elhossiny</author>
      <pubDate>Sun, 31 Oct 2021 04:13:04 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/amazon-aurora-mysql-database-administrators-handbook-aws-white-paper-summary-310o</link>
      <guid>https://dev.to/awsmenacommunity/amazon-aurora-mysql-database-administrators-handbook-aws-white-paper-summary-310o</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This paper outlines the best practices for managing database connections, setting server connection parameters, and configuring client programs, drivers, and connectors. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It‚Äôs a recommended read for Amazon Aurora MySQL Database Administrators (DBAs) and application developers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon Aurora MySQL (Aurora MySQL) is a managed relational database engine, wire-compatible with MySQL 5.6 and 5.7. Most of the drivers, connectors, and tools that you currently use with MySQL can be used with Aurora MySQL with little or no change.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aurora MySQL database (DB) clusters provide advanced features such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One primary instance that supports read/write operations and up to 15 Aurora Replicas that support read-only operations. &lt;/li&gt;
&lt;li&gt;Each of the Replicas can be automatically promoted to the primary role if the current primary instance fails.&lt;/li&gt;
&lt;li&gt;A cluster endpoint that automatically follows the primary instance in case of failover.&lt;/li&gt;
&lt;li&gt;A reader endpoint that includes all Aurora Replicas and is automatically updated when Aurora Replicas are added or removed.&lt;/li&gt;
&lt;li&gt;Ability to create custom DNS endpoints containing a user-configured group of database instances within a single cluster.&lt;/li&gt;
&lt;li&gt;Internal server connection pooling and thread multiplexing for improved scalability. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#dns-endpoints"&gt;
  &lt;/a&gt;
  DNS endpoints
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;An Aurora DB cluster consists of one or more instances and a cluster volume that manages the data for those instances. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are two types of instances:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Primary instance ‚Äì Supports read and write statements. Currently, there can be one primary instance per DB cluster.&lt;/li&gt;
&lt;li&gt;Aurora Replica ‚Äì Supports read-only statements. &lt;/li&gt;
&lt;li&gt;A DB cluster can have up to 15 Aurora Replicas. &lt;/li&gt;
&lt;li&gt;The Aurora Replicas can be used for read scaling, and are automatically used as failover targets in case of a primary instance failure.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Amazon Aurora supports the following types of Domain Name System (DNS) endpoints:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cluster endpoint ‚Äì Connects you to the primary instance and automatically follows the primary instance in case of failover, that is, when the current primary instance is demoted and one of the Aurora Replicas is promoted in its place.&lt;/li&gt;
&lt;li&gt;Reader endpoint ‚Äì Includes all Aurora Replicas in the DB cluster under a single DNS CNAME. You can use the reader endpoint to implement DNS round robin load balancing for read-only connections.&lt;/li&gt;
&lt;li&gt;Instance endpoint ‚Äì Each instance in the DB cluster has its own individual endpoint. You can use this endpoint to connect directly to a specific instance.&lt;/li&gt;
&lt;li&gt;Custom endpoints ‚Äì User-defined DNS endpoints containing a selected group of instances from a given cluster.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#connection-handling-in-aurora-mysql-and-mysql"&gt;
  &lt;/a&gt;
  Connection handling in Aurora MySQL and MySQL
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;MySQL Community Edition manages connections in a one-thread-per-connection fashion. &lt;/li&gt;
&lt;li&gt;This means that each individual user connection receives a dedicated operating system thread in the mysqld process. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Issues with this type of connection handling include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Relatively high memory use when there is a large number of user connections, even if the connections are completely idle. &lt;/li&gt;
&lt;li&gt;Higher internal server contention and context switching overhead when working with thousands of user connections. &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#common-misconceptions"&gt;
  &lt;/a&gt;
  Common misconceptions
&lt;/h2&gt;

&lt;p&gt;The following are common misconceptions for database connection management: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If the server uses connection pooling, you don‚Äôt need a pool on the application side. This isn‚Äôt true for workloads where connections are opened and torn down very frequently, and clients run relatively few statements per connection.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Idle connections don‚Äôt use memory. This isn‚Äôt true because the operating system and the database process both allocate an in-memory descriptor for each user connection. What is typically true is that Aurora MySQL uses less memory than MySQL Community Edition to maintain the same number of connections. However, memory usage for idle connections is still not zero, even with Aurora MySQL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Downtime depends entirely on database stability and database features. This isn‚Äôt true because the application design and configuration play an important role in determining how fast user traffic can recover following a database event.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#best-practices"&gt;
  &lt;/a&gt;
  Best practices
&lt;/h2&gt;

&lt;p&gt;The following are best practices for managing database connections and configuring connection drivers and pools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-smart-drivers"&gt;
  &lt;/a&gt;
  Using smart drivers
&lt;/h3&gt;

&lt;p&gt;The cluster and reader endpoints abstract the role changes and topology changes occurring in the DB cluster. However, DNS updates are not instantaneous. &lt;/p&gt;

&lt;p&gt;In addition, they can sometimes contribute to a slightly longer delay between the time a database event occurs and the time it‚Äôs noticed and handled by the application.&lt;/p&gt;

&lt;p&gt;Aurora MySQL exposes near-real-time metadata about DB instances in the INFORMATION_SCHEMA.REPLICA_HOST_STATUS table.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="n"&gt;server_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;session_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'MASTER_SESSION_ID'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s1"&gt;'writer'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'reader'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="k"&gt;role&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replica_lag_in_milliseconds&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;
&lt;span class="n"&gt;information_schema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replica_host_status&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;-------------------+--------+-----------------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;server_id&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;role&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;replica_lag_in_milliseconds&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;-------------------+--------+-----------------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;aurora&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;usw2a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;aurora&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;usw2b&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;253999710083008&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="c1"&gt;-------------------+--------+-----------------------------+&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the purpose of this whitepaper, a smart driver is a database driver or connector with the ability to read DB cluster topology from the metadata table. &lt;/p&gt;

&lt;p&gt;It can route new connections to individual instance endpoints without relying on high-level cluster endpoints. &lt;/p&gt;

&lt;p&gt;A smart driver is also typically capable of load balancing read-only connections across the available Aurora Replicas in a round robin fashion.&lt;/p&gt;

&lt;p&gt;The MariaDB Connector/J is an example of a third-party Java Database Connectivity (JDBC) smart driver with native support for Aurora MySQL DB clusters. &lt;/p&gt;

&lt;p&gt;Application developers can draw inspiration from the MariaDB driver to build drivers and connectors for languages other than Java.&lt;/p&gt;

&lt;p&gt;It‚Äôs a good idea to evaluate the use of smart drivers in your setup. &lt;/p&gt;

&lt;p&gt;Note that if a thirdparty driver contains Aurora MySQL‚Äìspecific functionality, it doesn‚Äôt mean that it has been officially tested, validated, or certified by AWS. &lt;/p&gt;

&lt;p&gt;Also note that due to the advanced built-in features and higher overall complexity, smart drivers are likely to receive updates and bug fixes more frequently than traditional (bare bones) drivers. &lt;/p&gt;

&lt;p&gt;You should regularly review the driver‚Äôs release notes and use the latest available version whenever possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dns-caching"&gt;
  &lt;/a&gt;
  DNS caching
&lt;/h3&gt;

&lt;p&gt;Unless you use a smart database driver, you depend on DNS record updates and DNS propagation for failovers, instance scaling, and load balancing across Aurora Replicas.&lt;/p&gt;

&lt;p&gt;Currently, Aurora DNS zones use a short Time-To-Live (TTL) of five seconds. &lt;/p&gt;

&lt;p&gt;Ensure that your network and client configurations don‚Äôt further increase the DNS cache TTL. &lt;/p&gt;

&lt;p&gt;Remember that DNS caching can occur anywhere from your network layer, through the operating system, to the application container. &lt;/p&gt;

&lt;p&gt;For example, Java virtual machines (JVMs) are notorious for caching DNS indefinitely unless configured otherwise. &lt;/p&gt;

&lt;p&gt;Here are some examples of issues that can occur if you don‚Äôt follow DNS caching best practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;After a new primary instance is promoted during a failover, applications continue to send write traffic to the old instance. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data-modifying statements will fail because that instance is no longer the primary instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After a DB instance is scaled up or down, applications are unable to connect to it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Due to DNS caching, applications continue to use the old IP address of that instance, which is no longer valid.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Aurora Replicas can experience unequal utilization, for example, one DB instance receiving significantly more traffic than the others.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#connection-management-and-pooling"&gt;
  &lt;/a&gt;
  Connection management and pooling
&lt;/h3&gt;

&lt;p&gt;Always close database connections explicitly instead of relying on the development framework or language destructors to do it. &lt;/p&gt;

&lt;p&gt;There are situations, especially in container based or code-as-a-service scenarios, when the underlying code container isn‚Äôt immediately destroyed after the code completes. &lt;/p&gt;

&lt;p&gt;In such cases, you might experience database connection leaks where connections are left open and continue to hold resources (for example, memory and locks).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connection-scaling"&gt;
  &lt;/a&gt;
  Connection scaling
&lt;/h3&gt;

&lt;p&gt;The most common technique for scaling web service capacity is to add or remove application instances in response to changes in user traffic. &lt;/p&gt;

&lt;p&gt;Each application server can use a database connection pool.&lt;/p&gt;

&lt;p&gt;This approach causes the total number of database connections to grow proportionally with the number of application instances. &lt;/p&gt;

&lt;p&gt;For example, 20 application servers configured with 200 database connections each would require a total of 4,000 database connections. &lt;/p&gt;

&lt;p&gt;If the application pool scales up to 200 instances (for example, during peak hours), the total connection count will reach 40,000. Under a typical web application workload, most of these connections are likely idle. &lt;/p&gt;

&lt;p&gt;In extreme cases, this can limit database scalability: idle connections do take server resources, and you‚Äôre opening significantly more of them than you need.&lt;/p&gt;

&lt;p&gt;Also, the total number of connections is not easy to control because it‚Äôs not something you configure directly, but rather depends on the number of application servers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tune the connection pools on application instances. Reduce the number of connections in the pool to the acceptable minimum. &lt;/li&gt;
&lt;li&gt;&lt;p&gt;This can be a stop-gap  solution, but it might not be a long-term solution as your application server fleet continues to grow.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Introduce a connection proxy between the database and the application. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On one side, the proxy connects to the database with a fixed number of connections. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the other side, the proxy accepts application connections and can provide additional features such as query caching, connection buffering, query rewriting/routing, and load balancing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#transaction-management-and-autocommit"&gt;
  &lt;/a&gt;
  Transaction management and autocommit
&lt;/h3&gt;

&lt;p&gt;With autocommit enabled, each SQL statement runs within its own transaction. &lt;/p&gt;

&lt;p&gt;When the statement ends, the transaction ends as well. Between statements, the client connection is not in transaction. &lt;/p&gt;

&lt;p&gt;If you need a transaction to remain open for more than one statement, you explicitly begin the transaction, run the statements, and then commit or roll back the transaction.&lt;/p&gt;

&lt;p&gt;With autocommit disabled, the connection is always in transaction. &lt;/p&gt;

&lt;p&gt;You can commit or roll back the current transaction, at which point the server immediately opens a new one.&lt;/p&gt;

&lt;p&gt;Running with autocommit disabled is not recommended because it encourages longrunning transactions where they‚Äôre not needed. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#recommendations"&gt;
  &lt;/a&gt;
  Recommendations:
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Always run with autocommit mode enabled. Set the autocommit parameter to 1 on the database side (which is the default) and on the application side (which might not be the default).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always double-check the autocommit settings on the application side. For example, Python drivers such as MySQLdb and PyMySQL disable autocommit by default.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Manage transactions explicitly by using BEGIN/START TRANSACTION and COMMIT/ROLLBACK statements. You should start transactions when you need them and commit as soon as the transactional work is done.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#connection-handshakes"&gt;
  &lt;/a&gt;
  Connection handshakes
&lt;/h3&gt;

&lt;p&gt;A lot of work can happen behind the scenes when an application connector or a GUI tool opens a new database session. &lt;/p&gt;

&lt;p&gt;Drivers and client tools commonly run series of statements to set up session configuration (e.g, SET SESSION variable = value). &lt;/p&gt;

&lt;p&gt;This increases the cost of creating new connections and delays when your application can start issuing queries.&lt;/p&gt;

&lt;p&gt;The cost of connection handshakes becomes even more important if your applications are very sensitive to latency. &lt;/p&gt;

&lt;p&gt;OLTP or key-value workloads that expect single-digit millisecond latency can be visibly impacted if each connection is expensive to open. &lt;/p&gt;

&lt;p&gt;For example, if the driver runs six statements to set up a connection and each statement takes just one millisecond to run, your application will be delayed by six milliseconds before it issues its first query.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#load-balancing-with-the-reader-endpoint"&gt;
  &lt;/a&gt;
  Load balancing with the reader endpoint
&lt;/h3&gt;

&lt;p&gt;Because the reader endpoint contains all Aurora Replicas, it can provide DNS-based, round robin load balancing for new connections. &lt;br&gt;
Every time you resolve the reader endpoint, you'll get an instance IP that you can connect to, chosen in round robin fashion.&lt;/p&gt;

&lt;p&gt;DNS load balancing works at the connection level (not the individual query level). &lt;br&gt;
You must keep resolving the endpoint without caching DNS to get a different instance IP on each resolution. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#designing-for-fault-tolerance-and-quick-recovery"&gt;
  &lt;/a&gt;
  Designing for fault tolerance and quick recovery
&lt;/h3&gt;

&lt;p&gt;In large-scale database operations, you‚Äôre statistically more likely to experience issues such as connection interruptions or hardware failures. &lt;br&gt;
You must also take operational actions more frequently, such as scaling, adding, or removing DB instances and performing software upgrades.&lt;br&gt;
The only scalable way of addressing this challenge is to assume that issues and changes will occur and design your applications accordingly.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#server-configuration"&gt;
  &lt;/a&gt;
  Server configuration
&lt;/h4&gt;

&lt;p&gt;There are two major server configuration variables worth mentioning in the context of this whitepaper: max_connections and max_connect_errors.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#configuration-variable-maxconnections"&gt;
  &lt;/a&gt;
  Configuration variable max_connections
&lt;/h6&gt;

&lt;p&gt;The configuration variable max_connections limits the number of database connections per Aurora DB instance. &lt;/p&gt;

&lt;p&gt;The best practice is to set it slightly higher than the maximum number of connections you expect to open on each instance.&lt;/p&gt;

&lt;p&gt;If you also enabled performance_schema, be extra careful with the setting. &lt;/p&gt;

&lt;p&gt;The Performance Schema memory structures are sized automatically based on server configuration variables, including max_connections. &lt;/p&gt;

&lt;p&gt;The higher you set the variable, the more memory Performance Schema uses. &lt;/p&gt;

&lt;p&gt;In extreme cases, this can lead to out-ofmemory issues on smaller instance types.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#configuration-variable-maxconnecterrors"&gt;
  &lt;/a&gt;
  Configuration variable max_connect_errors
&lt;/h5&gt;

&lt;p&gt;The configuration variable max_connect_errors determines how many successive interrupted connection requests are permitted from a given client host. &lt;/p&gt;

&lt;p&gt;If the client host exceeds the number of successive failed connection attempts, the server blocks it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;Understanding and implementing connection management best practices is critical to achieve scalability, reduce downtime, and ensure smooth integration between the&lt;br&gt;
application and database layers. You can apply most of the recommendations provided in this whitepaper with little to no engineering effort. The guidance provided in this whitepaper should help you introduce improvements in your current and future application deployments using Aurora MySQL DB clusters.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://d1.awsstatic.com/whitepapers/RDS/amazon-aurora-connection-management-handbook.pdf?did=wp_card&amp;amp;trk=wp_card"&gt; Original paper &lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>mysql</category>
      <category>database</category>
      <category>cloud</category>
    </item>
    <item>
      <title>How to generate random numbers for Monte Carlo simulation in Excel</title>
      <author>Wynn Tee</author>
      <pubDate>Sun, 31 Oct 2021 03:41:23 +0000</pubDate>
      <link>https://dev.to/quantirisk/how-to-generate-random-numbers-for-monte-carlo-simulation-in-excel-159i</link>
      <guid>https://dev.to/quantirisk/how-to-generate-random-numbers-for-monte-carlo-simulation-in-excel-159i</guid>
      <description>&lt;p&gt;Risk practitioners often use Monte Carlo simulation to simulate the potential future outcomes of a decision. A key requirement for Monte Carlo simulation is the ability to generate random numbers from a desired probability distribution.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#analysis-toolpak"&gt;
  &lt;/a&gt;
  Analysis Toolpak
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LG0NOM8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://addin.qrstoolbox.com/pages/demos/how-to-generate-random-numbers-excel/toolpak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LG0NOM8W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://addin.qrstoolbox.com/pages/demos/how-to-generate-random-numbers-excel/toolpak.png" alt="Analysis Toolpak" width="560" height="224"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Excel comes with an add-in called Analysis Toolpak, which includes a graphical user interface for generating random numbers from the uniform distribution, normal distribution, and several discrete probability distributions.&lt;/p&gt;

&lt;p&gt;However, the graphical user interface can be inconvenient when you want to change the parameters or regenerate the random numbers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#randarray-function"&gt;
  &lt;/a&gt;
  RANDARRAY function
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lu2pIfZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://addin.qrstoolbox.com/pages/demos/how-to-generate-random-numbers-excel/randarray.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lu2pIfZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://addin.qrstoolbox.com/pages/demos/how-to-generate-random-numbers-excel/randarray.png" alt="RANDARRAY function" width="560" height="224"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Excel also comes with the RAND and RANDARRAY functions, which return uniformly distributed random numbers. The functions can be used with &lt;a href="https://en.wikipedia.org/wiki/Inverse_transform_sampling"&gt;inverse sampling&lt;/a&gt; to generate random numbers from any probability distribution whose inverse cumulative distribution function can be evaluated in Excel.&lt;/p&gt;

&lt;p&gt;For example, to generate a column of 100,000 random numbers from the standard normal distribution, enter the formula &lt;code&gt;=NORM.S.INV(RANDARRAY(100000,1))&lt;/code&gt; in a cell.&lt;/p&gt;

&lt;p&gt;However, this method can be inefficient when you want to generate a lot of random numbers and the inverse cumulative distribution function is expensive to evaluate.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#qrsrand-functions"&gt;
  &lt;/a&gt;
  QRS.RAND functions
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BK0UaQtv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://addin.qrstoolbox.com/pages/demos/how-to-generate-random-numbers-excel/qrsrand.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BK0UaQtv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://addin.qrstoolbox.com/pages/demos/how-to-generate-random-numbers-excel/qrsrand.png" alt="QRS.RAND functions" width="560" height="224"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://addin.qrstoolbox.com"&gt;QRS Toolbox for Excel&lt;/a&gt; includes functions for generating random numbers from some probability distributions using &lt;a href="https://en.wikipedia.org/wiki/Rejection_sampling"&gt;rejection sampling&lt;/a&gt;. The names of all the functions begin with QRS.RAND.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://addin.qrstoolbox.com/pages/docs/rand.normal"&gt;QRS.RAND.NORMAL&lt;/a&gt; and &lt;a href="https://addin.qrstoolbox.com/pages/docs/rand.exp"&gt;QRS.RAND.EXP&lt;/a&gt; return random numbers from the normal and exponential distributions respectively using the &lt;a href="https://en.wikipedia.org/wiki/Ziggurat_algorithm"&gt;ziggurat algorithm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://addin.qrstoolbox.com/pages/docs/rand.gamma"&gt;QRS.RAND.GAMMA&lt;/a&gt; returns random numbers from the gamma distribution. It can be used to generate random numbers from gamma-related distributions, such as the chi-squared distribution and Beta distribution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://addin.qrstoolbox.com/pages/docs/rand.pearson"&gt;QRS.RAND.PEARSON&lt;/a&gt; and &lt;a href="https://addin.qrstoolbox.com/pages/docs/rand.johnson"&gt;QRS.RAND.JOHNSON&lt;/a&gt; return random numbers from the Pearson and Johnson distributions respectively. They can be used to simulate rare but extreme events, because the Pearson and Johnson distributions uniquely fit all possible combinations of skewness and kurtosis.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pearson-type-iv-example"&gt;
  &lt;/a&gt;
  Pearson Type IV example
&lt;/h1&gt;

&lt;p&gt;There are in fact 5 types of Pearson distributions, namely Types I, III, IV, V, and VI. To the best of our knowledge, QRS.RAND.PEARSON is the only publicly available Excel function for generating random numbers from all 5 types of Pearson distributions.&lt;/p&gt;

&lt;p&gt;The Pearson Type IV distribution deserves special mention. It is a natural alternative to the normal distribution in risk applications, because it is not only unimodal and unbounded, but also asymmetric (squared skewness &amp;lt; 32) and leptokurtic (kurtosis &amp;gt; 3).&lt;/p&gt;

&lt;p&gt;To try QRS.RAND.PEARSON yourself, &lt;a href="https://addin.qrstoolbox.com/pages/support/#how-to-add-toolbox"&gt;add QRS Toolbox&lt;/a&gt; to your instance of Excel and &lt;a href="https://addin.qrstoolbox.com/pages/support/#how-to-try-premium"&gt;start your free trial&lt;/a&gt; of QRS.RAND.PEARSON. Then, open a blank workbook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;=QRS.RAND.PEARSON(100000, 1, 0, 1, 2, 16)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQIPslF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://addin.qrstoolbox.com/pages/demos/how-to-generate-random-numbers-excel/formula-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQIPslF3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://addin.qrstoolbox.com/pages/demos/how-to-generate-random-numbers-excel/formula-1.png" alt="Formula" width="560" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To generate a column of 100,000 random numbers from the Pearson Type IV distribution with mean 0, variance 1, skewness 2, and kurtosis 16, enter the formula &lt;code&gt;=QRS.RAND.PEARSON(100000, 1, 0, 1, 2, 16)&lt;/code&gt; in cell A1. The random numbers appear in cells A1:A100000.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;=QRS.RAND.PEARSON(100000, 5, 0, 1, 2, 16)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lOVGwtys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://addin.qrstoolbox.com/pages/demos/how-to-generate-random-numbers-excel/formula-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lOVGwtys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://addin.qrstoolbox.com/pages/demos/how-to-generate-random-numbers-excel/formula-2.png" alt="Formula" width="560" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To generate 5 columns of random numbers instead, change the second argument to 5 so that the formula becomes &lt;code&gt;=QRS.RAND.PEARSON(100000, 5, 0, 1, 2, 16)&lt;/code&gt;. The random numbers now appear in cells A1:E100000.&lt;/p&gt;

&lt;p&gt;To regenerate the random numbers, simply recalculate cell A1. Unlike the RAND and RANDARRAY functions, the QRS.RAND functions are designed to be non-volatile.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-remarks"&gt;
  &lt;/a&gt;
  Final remarks
&lt;/h1&gt;

&lt;p&gt;The other QRS.RAND functions can be used in a similar manner. If you find the QRS.RAND functions useful, please share this page with other potential users.&lt;/p&gt;

</description>
      <category>excel</category>
      <category>randomnumbers</category>
      <category>montecarlo</category>
      <category>qrstoolbox</category>
    </item>
    <item>
      <title>7 console.log() alternatives</title>
      <author>Siddharth</author>
      <pubDate>Sun, 31 Oct 2021 03:34:44 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/7-consolelog-alternatives-377k</link>
      <guid>https://dev.to/siddharthshyniben/7-consolelog-alternatives-377k</guid>
      <description>&lt;p&gt;Sometimes while debugging you may use &lt;code&gt;console.log&lt;/code&gt; or maybe &lt;code&gt;console.warn&lt;/code&gt; too. But there are a lot more methods which can help you debug your code even better. Let's take a look at some of them:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoletable-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.table()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;The handiest method on this list. Can be used to log any object or array in table form.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;delectus aut autem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;quis ut nam facilis et officia qui&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fugiat veniam minus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;et porro tempora&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;laboriosam mollitia et enim quasi adipisci quia provident illum&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;qui ullam ratione quibusdam voluptatem quia omnis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give us a neat little table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aSoMpSNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635608677908/KwgQ9EgZH.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aSoMpSNK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635608677908/KwgQ9EgZH.png" alt="console.table()" width="737" height="234"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoleassert-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.assert()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.assert()&lt;/code&gt; is used to assert that something is truthy. If not, it will log a message to the console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isEven&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isEven&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;%s is not even!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will log &lt;code&gt;Assertion failed: 1 is not even!&lt;/code&gt; because well, one is not even! (Who told you that one is even?? Go to school and learn a thing or two)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consolecount-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.count()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.count()&lt;/code&gt; is used to check how many times this line has been called.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will log:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;default: 1
default: 2
default: 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also label the count:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;outer loop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;inner loop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will log:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;outer loop: 1
inner loop: 1
inner loop: 2
inner loop: 3
outer loop: 2
inner loop: 4
inner loop: 5
inner loop: 6
outer loop: 3
inner loop: 7
inner loop: 8
inner loop: 9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-consolegroup-endraw-and-raw-consolegroupend-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.group()&lt;/code&gt; and &lt;code&gt;console.groupEnd()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;console.group()&lt;/code&gt; and &lt;code&gt;console.groupEnd()&lt;/code&gt; are used for grouping similar (or different ;) logs together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;group 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;group 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;group 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;groupEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;group 2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should log two openable/closeable groups which can be handy when dealing with a lot of logs.&lt;/p&gt;

&lt;p&gt;Inside the groups you can use any other console methods, even nested &lt;code&gt;console.group()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;console.groupCollapsed()&lt;/code&gt; to make the groups closed by default.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#-raw-consoletime-endraw-and-friends"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.time()&lt;/code&gt; and friends
&lt;/h2&gt;

&lt;p&gt;You can use &lt;code&gt;console.time()&lt;/code&gt; and it's friends &lt;code&gt;console.timeStart()&lt;/code&gt;, &lt;code&gt;console.timeEnd()&lt;/code&gt;, and &lt;code&gt;console.timeLog()&lt;/code&gt; to measure stuff.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;e9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Intense stuff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will log something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;default: 9531ms - timer ended
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;9531ms&lt;/code&gt; is the time between &lt;code&gt;console.time()&lt;/code&gt; and &lt;code&gt;console.timeEnd()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also label these timers so you can have multiple independent timers running at the same time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;e9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Intense stuff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Logging how much time has passed&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;e9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Intense stuff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeEnd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will log:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;first: 8497ms
first: 17815ms - timer ended
second: 9318ms - timer ended
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-consoletrace-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;console.trace()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;When you are working with a lot of nested function calls or recursion at some point you will need to know which function called who. &lt;code&gt;console.trace()&lt;/code&gt; is a handy way to do that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shallow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;deep&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;deeper&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deeper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;deepest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deepest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nx"&gt;shallow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will log this stacktrace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.trace()
    deepest debugger eval code:4
    deeper debugger eval code:3
    deep debugger eval code:2
    shallow debugger eval code:1
    &amp;lt;anonymous&amp;gt; debugger eval code:1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can easily see that shallow called &lt;code&gt;deep&lt;/code&gt;, which called &lt;code&gt;deeper&lt;/code&gt; which called &lt;code&gt;deepest&lt;/code&gt;&lt;/p&gt;




&lt;p&gt;That's the end of the list!&lt;/p&gt;

&lt;p&gt;If you found this post helpful, &lt;a href="https://twitter.com/intent/tweet?url=https%3A%2F%2Fdev.to%2Fsiddharthshyniben%2F7-consolelog-alternatives-377k&amp;amp;text=console.log()%20is%20old%20right%3F%20We%20have%20a%20lot%20more%20fun%20methods%20to%20log%20stuff!%20Check%20out%20this%20list%20by%20%40SiddharthShyn%20to%20learn%20more&amp;amp;hashtags=javascript"&gt;spread the word!&lt;/a&gt; or &lt;a href="https://twitter.com/intent/follow?screen_name=SiddharthShyn"&gt;follow me on twitter&lt;/a&gt; or over here to stay updated on my blog posts!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Released opensource web CAD App - Chokoku CAD v2.2</title>
      <author>Itta</author>
      <pubDate>Sun, 31 Oct 2021 03:25:56 +0000</pubDate>
      <link>https://dev.to/itta611/released-opensource-web-cad-app-chokoku-cad-v22-491p</link>
      <guid>https://dev.to/itta611/released-opensource-web-cad-app-chokoku-cad-v22-491p</guid>
      <description>&lt;p&gt;Code on Github: &lt;a href="https://github.com/itta611/ChokokuCAD"&gt;https://github.com/itta611/ChokokuCAD&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--95dx9eQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvyn015j5hbkuf5q132u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--95dx9eQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvyn015j5hbkuf5q132u.png" alt="Image description" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>github</category>
      <category>opensource</category>
    </item>
    <item>
      <title>99 Python Programs for Beginners</title>
      <author>rrtutors</author>
      <pubDate>Sun, 31 Oct 2021 02:16:56 +0000</pubDate>
      <link>https://dev.to/rrtutors/99-python-programs-for-beginners-3k1j</link>
      <guid>https://dev.to/rrtutors/99-python-programs-for-beginners-3k1j</guid>
      <description>&lt;p&gt;There can be various &lt;a href="https://rrtutors.com/python/"&gt;python programs&lt;/a&gt; on many topics like basic python programming, conditions and loops, functions and native data types. A list of top python programs are given below which are widely asked by interviewer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Detect-Positive-and-Negative-Numbers.php"&gt;Python program to How to find given number is Positive or Negative&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Detect-Even-and-Odd-Number.php"&gt;Python Program to Detect Even and Odd Number&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Detect-the-Greatest-of-Three-Numbers.php"&gt;Python Program to Detect the Greatest of Three Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Check-for-Divisibility-of-a-Number.php"&gt;Python Program to Check for Divisibility of a Number&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Convert-from-Celsius-to-Fahrenheit.php"&gt;Python Program to Convert from Celsius to Fahrenheit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Convert-from-Fahrenheit-to-Celsius.php"&gt;Python Program to Convert from Fahrenheit to Celsius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Simple-Thermometer.php"&gt;Python Program to Simple Thermometer (Celsius/Fahrenheit)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Calculate-Mass-Density-and-Volume.php"&gt;Python Program to Calculate Mass, Density and Volume&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Detect-the-Coordinate-of-a-Point.php"&gt;Python Program to Detect the Coordinate of a Point&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Check-for-Existence-of-a-Triangle.php"&gt;Python Program to Check for Existence of a Triangle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Check-for-Leap-Year.php"&gt;Python Program to Check for Leap Year&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Check-for-Existence-of-a-Circle.php"&gt;Python Program to Check for Existence of a Circle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/create-quadratic-Equation.php"&gt;Python Program to create quadratic Equation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Make-Guess-of-Random-Number.php"&gt;Python Program to Make Guess of Random Number&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Print-Out-the-ASCII-Table.php"&gt;Python Program to Print Out the ASCII Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Create-a-Multiplication-Table-Using-While-Loop.php"&gt;Python Program to Create a Multiplication Table Using While Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Create-Multiplication-Table-Using-for-Loop.php"&gt;Python Program to Create Multiplication Table Using for Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Convert-from-Base-2-to-9.php"&gt;Python Program to Convert from Base 2 to 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Build-a-Simple-Calculator.php"&gt;Python Program to Build a Simple Calculator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Detect-Number-of-Digits-in-an-Integer.php"&gt;Python Program to Detect Number of Digits in an Integer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Sum-and-Products-of-Digits.php"&gt;Python Program to Get Sum and Products of Digits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Make-a-Binary-Search-of-Number-in-an-Array.php"&gt;Python Program to Make a Binary Search of Number in an Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Sum-of-N-Series-of-an-Element.php"&gt;Python Program to Get Sum of N Series of an Element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Number-of-Even-and-Odd-Digits.php"&gt;Python Program to Get Number of Even and Odd Digits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Factorial-Using-a-While-Loop.php"&gt;Python Program to Get Factorial Using a While Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Factorial-Using-for-Loop.php"&gt;Python Program to Get Factorial Using for Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Create-a-Fibonacci-Sequence.php"&gt;Python Program to Create a Fibonacci Sequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-the-Value-of-Fibonacci-Element.php"&gt;Python Program to Get the Value of Fibonacci Element&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Find-the-Greatest-Common-Divisor.php"&gt;Python Program to Get Find the Greatest Common Divisor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Maximum-Value-of-a-Floating-Point-Number.php"&gt;Python Program to Get Maximum Value of a Floating-Point Number&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Detect-Prime-Numbers.php"&gt;Python Program to Detect Prime Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Quadratic-Equations-with-Solutions-at-Specified-Range-of.php"&gt;Python Program for Quadratic Equations with Solutions at Specified Range of&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Reverse-Numbers.php"&gt;Python Program to Reverse Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Expand-Strings-of-Alphabet.php"&gt;Python Program to Expand Strings of Alphabet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Replace-a-Substring-of-a-String.php"&gt;Python Program to Replace a Substring of a String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Select-Integers-from-String.php"&gt;Python Program to Select Integers from String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Sort-Words-According-to-Their-Length.php"&gt;Python Program to Sort Words According to Their Length&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Find-the-Longest-Word-in-a-String.php"&gt;Python Program to Find the Longest Word in a String&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Percentage-of-Uppercase-and-Lowercase.php"&gt;Python Program to Get Percentage of Uppercase and Lowercase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Check-for-String-Palindrome.php"&gt;Python Program to Check for String Palindrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Generate-Random-Numbers-Using-Arrays.php"&gt;Python Program to Generate Random Numbers Using Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-the-Maximum-Element-in-an-Array.php"&gt;Python Program to Get the Maximum Element in an Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-the-Minimum-Element-in-an-Array.php"&gt;Python Program to Get the Minimum Element in an Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-the-Number-of-Even-and-Odd-Numbers.php"&gt;Python Program to Get the Number of Even and Odd Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Positive-Numbers-Out-of-Negative-Numbers.php"&gt;Python Program to Get Positive Numbers Out of Negative Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Numbers-Greater-than-the-Average-of-an-Array.php"&gt;Python Program to Get Numbers Greater than the Average of an Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Replace-List-Items-With-1-0-1.php"&gt;Python Program to Replace List Items With -1, 0, 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Check-for-File-Extension.php"&gt;Python Program to Check for File Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Remove-Exclamation-Mark-from-Text.php"&gt;Python Program to Remove Exclamation Mark (!) from Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/get-Intersection-of-List-Using-for-Loop.php"&gt;Python Program to get Intersection of List Using for Loop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/get-Intersection-of-List-Using-for-Loop.php"&gt;Python Program to Simple Intersection of List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Longest-ordered-Sequence-in-Ascending-Order.php"&gt;Python Program to Longest ordered Sequence in Ascending Order&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-the-Most-Occurrent-Element.php"&gt;Python Program to Get the Most Occurrent Element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Bubble-Sort-Elements-of-an-Array.php"&gt;Python Program to Bubble Sort Elements of an Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Sort-Array-Using-Selection-Sorting.php"&gt;Python Program to Sort Array Using Selection Sorting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Generate-Matrix-of-Random-Numbers.php"&gt;Python Program to Generate Matrix of Random Numbers&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-the-Rows-and-Columns-with-Maximum-Sum-of-Elements.php"&gt;Python Program to Get the Rows and Columns with Maximum Sum of Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Sum-Items-in-Rows-and-Columns-of-Elements.php"&gt;Python Program to Sum Items in Rows and Columns of Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Sum-Diagonals-of-a-Matrix.php"&gt;Python Program to Sum Diagonals of a Matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Interchange-the-Principal-Diagonals-of-Matrix.php"&gt;Python Program to Interchange the Principal Diagonals of Matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Sort-Columns-of-Element-by-Sorting-the-First-Row.php"&gt;Python Program to Sort Columns of Element by Sorting the First Row&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Check-Rows-and-Columns-that-Has-Particular-Element.php"&gt;Python Program to Check Rows and Columns that Has Particular Element&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Generate-Beautiful-Unicode.php"&gt;Python Program to Generate Beautiful Unicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Prices-of-Products.php"&gt;Python Program to Get Prices of Products&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Make-List-of-Dictionaries-Using-2-Lists.php"&gt;Python Program to Make List of Dictionaries Using 2 Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Delete-Dictionary-Item.php"&gt;Python Program to Delete Dictionary Item&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Return-Value-of-2-Arguments-Using-Function.php"&gt;Python Program to Return Value of 2 Arguments Using Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Fill-List.php"&gt;Python Program to Fill List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-the-Arithmetic-Mean-of-a-List.php"&gt;Python Program to Get the Arithmetic Mean of a List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Generate-Fibonacci-Sequence-Using-Function.php"&gt;Python Program to Generate Fibonacci Sequence Using Function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Fibonacci-Value-Using-Recursion.php"&gt;Python Program to Get Fibonacci Value Using Recursion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Factorial-Using-Recursion.php"&gt;Python Program to Get Factorial Using Recursion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-the-LCM.php"&gt;Python Program to Get the LCM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Reverse-Word-Sequence.php"&gt;Python Program to Reverse Word Sequence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Search-for-Binary-Numbers.php"&gt;Python Program to Search for Binary Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Make-a-Ring-Shift-or-Recycle-Items-of-a-List.php"&gt;Python Program to Make a Ring Shift or Recycle Items of a List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Read-Text.php"&gt;Python Program to Read Text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Use-Read-Method.php"&gt;Python Program to Use Read Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Use-ReadLine-Method.php"&gt;Python Program to Use ReadLine Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Use-ReadLines-Method.php"&gt;Python Program to Use ReadLines Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Write-to-File.php"&gt;Python Program to Write to File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Read-Text-from-File-to-Dictionary.php"&gt;Python Program to Read Text from File to Dictionary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Count-Number-of-Lines-Words-and-Letters-in-a-Text-File.php"&gt;Python Program to Count Number of Lines, Words and Letters in a Text File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Capture-String-Errors.php"&gt;Python Program to Capture String Errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Check-for-Non-Existence-of-Number.php"&gt;Python Program to Check for Non-Existence of Number&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Display-Error-Message-for-Non-Existed-Files.php"&gt;Python Program to Display Error Message for Non-Existed Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Division-by-Zero-Error.php"&gt;Python Program to Get Division by Zero Error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Index-Out-of-Exception.php"&gt;Python Program to Get Index Out of Exception&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Raise-Exceptions.php"&gt;Python Program to Raise Exceptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Use-Classes-and-Constructor.php"&gt;Python Program to Use Classes and Constructor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Fill-a-List-with-Natural-Numbers.php"&gt;Python Program to Fill a List with Natural Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Fill-a-List-with-Random-Numbers.php"&gt;Python Program to Fill a List with Random Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Group-Dictionaries-into-Lists.php"&gt;Python Program to Group Dictionaries into Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Unpack-Matrix-into-One-Level-List.php"&gt;Python Program to Unpack Matrix into One Level List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Read-Data-from-File-into-Lines-and-Characters.php"&gt;Python Program to Read Data from File into Lines and Characters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Calculate-the-Orbital-Speed.php"&gt;Python Program to Calculate the Orbital Speed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Sum-of-Random-of-3-Digit-Numbers.php"&gt;Python Program to Get Sum of Random of 3 Digit Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Select-Even-Numbers-from-List.php"&gt;Python Program to Select Even Numbers from List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Calculate-the-Area-and-Perimeter-of-Right-Angle-Triangle.php"&gt;Python Program to Calculate the Area and Perimeter of Right-Angle Triangle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rrtutors.com/python/programs/Get-Total-Surface-Area-of-a-Cylinder.php"&gt;Python Program to Get Total Surface Area of a Cylinder&lt;/a&gt;&lt;/li&gt;

&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Know this easily test React app</title>
      <author>Phan C√¥ng Th·∫Øng</author>
      <pubDate>Sun, 31 Oct 2021 02:02:21 +0000</pubDate>
      <link>https://dev.to/thangphan37/know-this-easily-test-react-app-3gn1</link>
      <guid>https://dev.to/thangphan37/know-this-easily-test-react-app-3gn1</guid>
      <description>&lt;p&gt;&lt;em&gt;Jest&lt;/em&gt; and &lt;em&gt;Testing Library&lt;/em&gt; were the most powerful tool for testing React App. In this post, we are going to discover the important concept of them.&lt;/p&gt;

&lt;p&gt;Let's dig in!&lt;/p&gt;

&lt;p&gt;This is the simplest test that we can write in the first time using &lt;em&gt;Jest&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1 plus 2 equal 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#test-asynchronous"&gt;
  &lt;/a&gt;
  Test Asynchronous
&lt;/h3&gt;

&lt;p&gt;Suppose that I have a fake API that returns the user response with &lt;code&gt;id: 1&lt;/code&gt;, in the test case, I intentionally set change &lt;code&gt;id: 3&lt;/code&gt; to check whether the test works properly or not, and I end up with a &lt;code&gt;passed&lt;/code&gt; message.&lt;/p&gt;

&lt;p&gt;The reason is that the test case is completed before the promise finishes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user is equal user in response&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;delectus aut autem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/todos/1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to avoid this bug, we need to have &lt;code&gt;return&lt;/code&gt; in front of &lt;code&gt;fetch&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user is equal user in response&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;delectus aut autem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/todos/1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The test case above can rewrite using &lt;code&gt;async, await&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user is equal user in response using async, await&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;delectus aut autem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/todos/1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resJson&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resJson&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#useful-methods"&gt;
  &lt;/a&gt;
  Useful methods
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;beforeAll&lt;/code&gt;: To add some code that we want to run once before the test cases is run.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;afterAll&lt;/code&gt;: To add some code that we want to run after all test cases are finished. e.g. clear the database.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;beforeEach&lt;/code&gt;: To add some code that we want to run before each test case.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;afterEach&lt;/code&gt;: To add some code that we want to run at the point that each test case finishes.&lt;/p&gt;

&lt;p&gt;Suppose that I have three test cases, and I set:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;beforeEach is working...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Three &lt;code&gt;console&lt;/code&gt; will appear on my terminal. Conversely, Using &lt;code&gt;beforeAll&lt;/code&gt; I only see one &lt;code&gt;console&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The logic way is the same with &lt;code&gt;afterEach&lt;/code&gt; and &lt;code&gt;afterAll&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-order-run"&gt;
  &lt;/a&gt;
  The order run
&lt;/h3&gt;

&lt;p&gt;We already have &lt;code&gt;describe&lt;/code&gt;(combines many test cases), &lt;code&gt;test&lt;/code&gt;(test case).&lt;/p&gt;

&lt;p&gt;What is the order that jest run if test file was mixed by many &lt;code&gt;describe&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;You only need to remember this order: &lt;code&gt;describe&lt;/code&gt; -&amp;gt; &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To illustrate:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;describe for demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;this is describe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1 plus 2 equal 3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;this is test case in describe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub-describe for demo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;this is sub-describe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2 plus 2 equal 4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;this is test case in sub-describe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Can you spot on the order in the example above?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My terminal log:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;this is describe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;this is sub-describe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;this is test case in describe&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;this is test case in sub-describe&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#mock-function"&gt;
  &lt;/a&gt;
  Mock function
&lt;/h3&gt;

&lt;p&gt;I think the most powerful of Jest is having a mock function that we are able to mock the &lt;code&gt;params&lt;/code&gt;, &lt;code&gt;object&lt;/code&gt; which defined by the &lt;code&gt;new&lt;/code&gt; keyword, and customize the return value.&lt;/p&gt;

&lt;p&gt;This is an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;plusTwoNumbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mock function callback&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockFnc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;total:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="nx"&gt;plusTwoNumbers&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;mockFnc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We mock &lt;code&gt;callback&lt;/code&gt; function, get the &lt;code&gt;params&lt;/code&gt; of it, and customize the result &lt;code&gt;console.log("total:", a + b)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We are also able to mock modules, e.g. I use &lt;code&gt;uuid&lt;/code&gt; in order to generate a unique &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When I move on to testing, instead of using &lt;code&gt;uuid&lt;/code&gt;, I can mock the &lt;code&gt;uuid&lt;/code&gt; module like the code below:&lt;/p&gt;

&lt;p&gt;Normally, whenever I call &lt;code&gt;uuid.v4()&lt;/code&gt; I will get a random value like this: &lt;code&gt;5442486-0878-440c-9db1-a7006c25a39f&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;But I want my value to be &lt;code&gt;1234&lt;/code&gt;, I can use the code below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;uuid&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;jest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mock uuid module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;v4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mockReturnValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;uuid.v4()&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;v4&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

  &lt;span class="c1"&gt;// 1234&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Otherwise, I can use &lt;code&gt;mockImplementation&lt;/code&gt; to customize.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;v4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mockImplementation&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1234&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;code&gt;mockImplementation&lt;/code&gt; is the function that we customize the function that is created from other modules.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#config-jest"&gt;
  &lt;/a&gt;
  Config Jest
&lt;/h3&gt;

&lt;p&gt;I'm going to introduce to you about the most important configs in Jest.&lt;/p&gt;

&lt;p&gt;Let's go!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collectCoverageFrom&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This config helps Jest knows exactly the place that needs to collect information, and check coverage. It is very useful, you can run:&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;jest --coverage&lt;/code&gt; in order to figure out the component, the function, we still need to write test, and discover the spots we still don't test yet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;moduleDirectories&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This config points to the &lt;code&gt;module&lt;/code&gt; that we will use in the &lt;code&gt;test&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;By default, it was configured &lt;code&gt;["node_modules"]&lt;/code&gt;, and we are able to use the the module under &lt;code&gt;node_modules&lt;/code&gt; folder in our test cases.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;moduleNameMapper&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This config provides for us the ability to access the resources, based on the place that we have set.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;
&lt;span class="nx"&gt;moduleNameMapper&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;assets/(*)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;rootDir&amp;gt;/images/$1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the example above, now we set the path &lt;code&gt;assets/(*)&lt;/code&gt; that pointed to &lt;code&gt;&amp;lt;rootDir&amp;gt;/images/$1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If I set &lt;code&gt;assets/logo.png&lt;/code&gt;, Jest will find &lt;code&gt;&amp;lt;rootDir&amp;gt;/images/logo.png&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rootDir&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, it is the place that contains &lt;code&gt;jest.config.js&lt;/code&gt;, &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The place is where Jest will find to use &lt;code&gt;modules&lt;/code&gt;, and run test cases.&lt;/p&gt;

&lt;p&gt;It turns out I can set "rootDir: '&lt;strong&gt;test&lt;/strong&gt;'" and run test cases without config &lt;code&gt;roots&lt;/code&gt;, but I shouldn't do this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;roots&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the config that we set the place that test files belong to.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;If I set:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pages/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but I write test in &lt;code&gt;__test__&lt;/code&gt; folder which is the same level with &lt;code&gt;pages/&lt;/code&gt;. No test cases will be run with the config above. I need to change &lt;code&gt;pages/&lt;/code&gt; -&amp;gt; &lt;code&gt;__test__&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;testMatch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We use this config in order to communicate to Jest what files we want to test, otherwise, please skip!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;testPathIgnorePatterns&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please ignore files under a place, that is the reason this config exists.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transform&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sometimes, in our test cases, we write some new code that &lt;code&gt;node&lt;/code&gt; doesn't support at all, so we need to transform to the code that Jest can understand.&lt;/p&gt;

&lt;p&gt;If my project use &lt;code&gt;typescript&lt;/code&gt;, I need to set up transform in order to make &lt;code&gt;typescript&lt;/code&gt; to &lt;code&gt;javascript&lt;/code&gt; code that node can understand.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transformIgnorePatterns&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We might have some files, some folders we don't want to transform, so we use this config.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-write-test"&gt;
  &lt;/a&gt;
  How to write test
&lt;/h3&gt;

&lt;p&gt;We need to write tests in order to be more confident about the code that we wrote. So when we think about the test cases, the core concept is we have to think about the use case, do not think about the code. It means we must focus&lt;br&gt;
into what's the future that the code can support for users.&lt;/p&gt;

&lt;p&gt;This is the main concept when we think about creating &lt;code&gt;test cases&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;e.g:&lt;/p&gt;

&lt;p&gt;I have created a react-hook in order to support four features below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;returns the value in first data using first property, condition true.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;returns the value in second data using second property, condition false.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;returns the value in second data using first property, condition false.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;returns the default value with second data undefined, condition false.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useInitialState&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}:&lt;/span&gt; &lt;span class="nx"&gt;Props&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;giveMeState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;anotherProperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;condition&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]?.[&lt;/span&gt;&lt;span class="nx"&gt;anotherProperty&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="nx"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt;
            &lt;span class="nx"&gt;defaultValue&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;giveMeState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useInitialState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;So I only need to write four test cases for the four features above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useInitialState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/utils/hooks/initial-state&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderHook&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react-hooks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;useInitialState&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockFirstData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thang&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;18&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;returns the value in first data using first property, condition true&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockSecondData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Phan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderHook&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;useInitialState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockFirstData&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mockFirstData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mockSecondData&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;giveMeState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockFirstData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;returns the value in second data using second property, condition false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockSecondData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Phan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderHook&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;useInitialState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mockFirstData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mockSecondData&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;giveMeState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockSecondData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;returns the value in second data using first property, condition false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockSecondData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Phan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderHook&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;useInitialState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mockFirstData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mockSecondData&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;giveMeState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockSecondData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;returns the default value with second data undefined, condition false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockDefaultValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;renderHook&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
      &lt;span class="nx"&gt;useInitialState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mockFirstData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;giveMeState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;age&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mockDefaultValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockDefaultValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#testing-library"&gt;
  &lt;/a&gt;
  Testing Library
&lt;/h3&gt;

&lt;p&gt;Let's take a slight review about the main things in &lt;em&gt;Testing Library&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;getBy..&lt;/strong&gt;: we find the DOM element, throw error if no element is found.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;queryBy..&lt;/strong&gt;: we find the DOM element, return null if no element is found.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;findBy..&lt;/strong&gt;: we find the DOM element, throw an error if no element is found,
the search process is a promise.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list below is the priority we should use in order to write test nearer with the way that our app is used.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;getByRole&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;getByLabelText&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;getByAltText&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;getByDisplayValue&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;p&gt;I have a component that contains two components: &lt;code&gt;AutoAddress&lt;/code&gt;, &lt;code&gt;Address&lt;/code&gt;.I need to find the use case that I want to support in order to create test cases.&lt;/p&gt;

&lt;p&gt;This is a test case: &lt;code&gt;by default, name value of inputs was set&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;render the components&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;create the mockResult value&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;add assertions&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;by default, name of address input was set&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AutoAddress&lt;/span&gt; &lt;span class="na"&gt;wasSubmitted&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="na"&gt;wasSubmitted&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AutoAddress&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;namePrefectureSv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prefertureSv&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;namePrefectureSvLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prefectureSvLabel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;nameCity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Prefecture Code&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toHaveAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;mockResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;namePrefectureSv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Prefecture&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toHaveAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;mockResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;namePrefectureSvLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;City&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toHaveAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;mockResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nameCity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is a test case: &lt;code&gt;returns one address through postCode&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;render the components&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;create the mockResult value&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mock the request API&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;input the postCode&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;click the search button&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;add assertions&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;returns one address through postCode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mockResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;14109&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;zipCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1880011&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;prefectureCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;13&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;city&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tokyo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_API_OFF_KINTO&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;API_ADDRESS&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockResult&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;AutoAddress&lt;/span&gt; &lt;span class="na"&gt;wasSubmitted&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Address&lt;/span&gt; &lt;span class="na"&gt;wasSubmitted&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;AutoAddress&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// input the post code value&lt;/span&gt;

  &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first postCode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;111&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second postCode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1111&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// search the address&lt;/span&gt;

  &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/search address/i&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

  &lt;span class="c1"&gt;// wait for the search process finishes.&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;waitForElementToBeRemoved&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByRole&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/searching/i&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;mockResult&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;prefectureCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Prefecture Code&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toHaveAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;prefectureCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Prefecture&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toHaveAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;PREFECTURE_CODE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prefectureCode&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;keyof&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;PREFECTURE_CODE&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;City&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toHaveAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h3&gt;

&lt;p&gt;We just learned the main concepts in Testing React App! Let's recap some key points.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Testing asynchronous need to have &lt;code&gt;return&lt;/code&gt; in front of &lt;code&gt;promise&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We are able to control testing using &lt;em&gt;Jest&lt;/em&gt; configs.&lt;/li&gt;
&lt;li&gt;Thinking test cases, we must forget about code, focus on the use case.&lt;/li&gt;
&lt;li&gt;The order of DOM methods in &lt;em&gt;Testing Library&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>testing</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Spooky Halloween CSS Animations! üëªüéÉ</title>
      <author>Rithik Samanthula</author>
      <pubDate>Sun, 31 Oct 2021 01:26:59 +0000</pubDate>
      <link>https://dev.to/code2rithik/spooky-halloween-css-animations-39mk</link>
      <guid>https://dev.to/code2rithik/spooky-halloween-css-animations-39mk</guid>
      <description>&lt;p&gt;Hey Coders!&lt;/p&gt;

&lt;p&gt;Happy Halloween! üéÉüëª&lt;/p&gt;

&lt;p&gt;In todays blog I'm going to be showing you some spookyyy Halloween Animations made on Codepen!&lt;/p&gt;

&lt;p&gt;Ready to see them?&lt;/p&gt;

&lt;p&gt;Lets hop right into them!&lt;/p&gt;

&lt;h2&gt;1. Halloween Flickering Animation (Open in full screen for best experience)&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/OJjjayr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;2. Spooky Signup&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/eYEEQJz?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;3. Spooky Intro Text (Open in full screen for best experience)&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/dyzzQGd?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;4. Spooky Squiggly Text (Open in full screen for best experience)&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/RwZZqaB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;5. Halloween Animation in Pure CSS&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/bGrrQpy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;6. The Witch's Cauldron&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/gOxxQMQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;7. Day of the Dead Animation&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/oNeeQzE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>halloween</category>
      <category>css</category>
      <category>aestheic</category>
    </item>
    <item>
      <title>Running JS physics in a webworker - part 1 - proof of concept</title>
      <author>Martin J</author>
      <pubDate>Sun, 31 Oct 2021 01:25:46 +0000</pubDate>
      <link>https://dev.to/jerzakm/running-js-physics-in-a-webworker-part-1-proof-of-concept-ibj</link>
      <guid>https://dev.to/jerzakm/running-js-physics-in-a-webworker-part-1-proof-of-concept-ibj</guid>
      <description>&lt;p&gt;Web workers are a great way of offloading compute intensive tasks from the main thread. I have been interested in using them for quite a while, but none of the projects I worked on really justified using them. Until now! In this short series I'm going to explore using webworkers, physics, pixi.js and others to create interactive web experiences and games.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://workerized-matterjs-pixi.netlify.app/"&gt;Live&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jerzakm/gamedev-experiments/tree/main/matterjs-pixi-worker"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6EYl-4Bx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/6buI1RaOvW2KIklhMDAz" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EYl-4Bx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/6buI1RaOvW2KIklhMDAz" alt="nbrpJOCJQu.gif" width="640" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webworkers-tldr"&gt;
  &lt;/a&gt;
  Webworkers tldr;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;scripts that run in background threads&lt;/li&gt;
&lt;li&gt;they communicate with the main thread by sending and receiving messages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In depth info, better than I could ever explain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.logrocket.com/using-webworkers-for-safe-concurrent-javascript-3f33da4eb0b2/"&gt;Using web workers for safe, concurrent JavaScript - Bruce Wilson, Logrocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API"&gt;MDN entry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;The benefits of using webworkers are undeniable. Most importantly it &lt;strong&gt;keeps main thread responsive.&lt;/strong&gt; Frozen webpages and slow UI make for terrible user experience. In my case, even if the physics simulation slows down to 20-30 fps, mainthread renderer still runs at a constant 144 fps. It helps keep animations nice and juicy and the page responsive to user inputs.&lt;/p&gt;

&lt;p&gt;I am guilty of making very CPU intensive terrain generation in the past, it would freeze a user's browser for 2-3 seconds and it was terrible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#proof-of-concept-implementation"&gt;
  &lt;/a&gt;
  Proof of concept implementation:
&lt;/h2&gt;

&lt;p&gt;This is not a step by step tutorial, I wanted to keep this article more conceptual and code-light. You should be able to follow my Spaghetti code in &lt;a href="https://github.com/jerzakm/gamedev-experiments/tree/main/matterjs-pixi-worker"&gt;the project repo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-vite-bundler"&gt;
  &lt;/a&gt;
  1. Vite bundler
&lt;/h3&gt;

&lt;p&gt;I decided against using any framework to avoid unnecessary complexity. For my bundler I decided to use Vite since I was familiar with it &lt;a href="https://github.com/vitejs/vite/tree/main/packages/create-vite"&gt;and the provided vanilla Typescript template&lt;/a&gt;. It provides an &lt;a href="https://vitejs.dev/guide/features.html#web-workers"&gt;easy way to import webworkers&lt;/a&gt; and their dependencies even from Typescript files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-pixijs-renderer"&gt;
  &lt;/a&gt;
  2. Pixi.js renderer
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://pixijs.com/"&gt;Pixi.js&lt;/a&gt; is a fairly easy to use WebGL renderer. It will show what we're doing on screen. Everything I'm doing can be replicated by copying one of &lt;a href="https://pixijs.io/examples/#/demos-basic/container.js"&gt;the examples&lt;/a&gt;. All you need is to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;setup the renderer&lt;/li&gt;
&lt;li&gt;load texture and make sprites&lt;/li&gt;
&lt;li&gt;update sprite position and angle in the ticker&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-finally-making-the-worker"&gt;
  &lt;/a&gt;
  3. Finally, making the worker!
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;make a file with a worker, like &lt;code&gt;physicsWorker.ts&lt;/code&gt;. Code gets executed on worker load.&lt;/li&gt;
&lt;li&gt;import and initialize the worker in the main thread - &lt;a href="https://vitejs.dev/guide/features.html#web-workers"&gt;vite docs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;from now on you can setup listeners and send messages between main thread and the worker&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#4-physics-engine-in-the-worker"&gt;
  &lt;/a&gt;
  4. Physics engine in the worker.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://brm.io/matter-js/"&gt;Matter.js&lt;/a&gt; is a 2D physics engine I've decided to use. It's far from being the most performant, but it's user friendly and helps keep code complexity down.&lt;/p&gt;

&lt;p&gt;Engine, World and a 'gameloop' get created when web worker is loaded. Gameloop is a function that continuously runs and calls &lt;code&gt;Engine.update(physics.engine, delta);&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-communication-amp-command-pattern"&gt;
  &lt;/a&gt;
  5. Communication &amp;amp; command pattern
&lt;/h3&gt;

&lt;p&gt;Like I mentioned before, worker and the thread communicate with messages. I found this to be a natural fit for a &lt;a href="https://gameprogrammingpatterns.com/command.html"&gt;command pattern&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Actor (either main or worker thread) sends an object that has all information required to perform an action by the subject. I decided to structure my commands like below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD_BODY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;restitution&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To send the above command, main thread calls &lt;code&gt;worker.postMessage(command);&lt;/code&gt;. For a worker to receive it, we need to set up a listener.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Worker has to call 'self' to send and receive&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Worker receives a command to ADD_BODY&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD_BODY&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// it does stuff&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;physics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Worker sends a command to main thread (BODY_CREATED)&lt;/span&gt;
    &lt;span class="c1"&gt;// it will be used to spawn a sprite&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BODY_CREATED&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;sprite&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Here's a general overview of how this example works&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PZWIXafe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/gqr7vUh4SmuwgE5Rjs5c" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PZWIXafe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/gqr7vUh4SmuwgE5Rjs5c" alt="Untitled.png" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-features-explained"&gt;
  &lt;/a&gt;
  6. Features explained
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#create-body"&gt;
  &lt;/a&gt;
  Create body
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Main thread sends a command &lt;code&gt;ADD_BODY&lt;/code&gt; with position, width, height and &lt;a href="https://brm.io/matter-js/docs/classes/Body.html#properties"&gt;physics options&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;When worker thread receives an &lt;code&gt;ADD_BODY&lt;/code&gt; it adds the body with given parameters to the world&lt;/li&gt;
&lt;li&gt;After body is added, worker sends &lt;code&gt;BODY_CREATED&lt;/code&gt; command back to main thread. &lt;strong&gt;The most important part of this message is the id&lt;/strong&gt;. This is how technically unrelated javascript objects (body in worker and sprite in main) will sync. It also sends width, height, position, angle&lt;/li&gt;
&lt;li&gt;When main thread receives &lt;code&gt;BODY_CREATED&lt;/code&gt; position it creates an object containing the data received as well as a &lt;code&gt;PIXI.Sprite&lt;/code&gt; it assigns to it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#synchronising-object-position-between-physics-engine-and-renderer"&gt;
  &lt;/a&gt;
  Synchronising object position between physics engine and renderer
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;each frame physics engine sends command &lt;code&gt;BODY_SYNC&lt;/code&gt;, it contains position and angle of every body in the physics world. It's stored in the hashmap format, with body id being the key.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bodies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BODY_SYNC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;mainthread receives the body &lt;code&gt;BODY_SYNC&lt;/code&gt;. It loops over every body previously added and updates it.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;BODY_SYNC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;physData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;bodySyncDelta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;physicsObjects&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;angle&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;physData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sprite&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sprite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sprite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sprite&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;angle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#it-works"&gt;
  &lt;/a&gt;
  It works!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6EYl-4Bx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/6buI1RaOvW2KIklhMDAz" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EYl-4Bx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.graphcms.com/6buI1RaOvW2KIklhMDAz" alt="nbrpJOCJQu.gif" width="640" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-went-wrong"&gt;
  &lt;/a&gt;
  What went wrong:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Physics performance is lacking, but there are a lot of good areas for improvement.&lt;/li&gt;
&lt;li&gt;Sometimes objects got out of bounds and kept flying into x,y coords of 10000+, causing slowdown and eventual crash. I quickly dealt with it by freezing any object whose coordinate is more than 3000, it's not a perfect solution and something to look out for in the future.&lt;/li&gt;
&lt;li&gt;Simple command pattern worked fine here but it could get very complex in some use cases&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#future-improvement-considerations"&gt;
  &lt;/a&gt;
  Future improvement considerations
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-matterjs-is-slow"&gt;
  &lt;/a&gt;
  1. Matter.js is slow
&lt;/h3&gt;

&lt;p&gt;According to &lt;a href="http://olegkikin.com/js-physics-engines-benchmark/"&gt;this outdated benchmark&lt;/a&gt; matter.js is one of the slowest available javascript physics engines. It's performance has improved since then, but there are other alternatives. I am especially interested in WASM libraries with js binding, like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/Birch-san/box2d-wasm"&gt;box2dwasm&lt;/a&gt; - an old, still maintained C++ library compiled to WASM. The documentation is lacking and developer experience seems poor.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://rapier.rs"&gt;rapier.rs&lt;/a&gt; - modern physics library written in Rust. It looks good and performant, at a first glance dev experience is a lot better than box2d. &lt;a href="https://rapier.rs/docs/user_guides/javascript/getting_started_js"&gt;Documentation&lt;/a&gt; gives me hope!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general, chosing a WASM engine over JS one should yield large performance gain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-webworker-messages"&gt;
  &lt;/a&gt;
  2. Webworker messages
&lt;/h3&gt;

&lt;p&gt;Sending large amounts of data at high frequency (gameloop) between worker and mainthread with messages can cause large performance drops.&lt;/p&gt;

&lt;p&gt;In depth dive into the issue: &lt;a href="https://surma.dev/things/is-postmessage-slow/"&gt;"Is postmessage slow?" - surma.dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Approaches to consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON.stringify then JSON.parse of the data (this doesn't seem to boost performance for my usecase)&lt;/li&gt;
&lt;li&gt;Using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"&gt;ArrayBuffer&lt;/a&gt; and transfering ownership between worker and main&lt;/li&gt;
&lt;li&gt;Using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer"&gt;SharedArrayBuffer&lt;/a&gt; so the origin retains ownership and both threads can access the data with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics"&gt;Atomics&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I guess it's time for my own benchmark!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-using-a-webworker-library-instead-of-vanilla-implementation"&gt;
  &lt;/a&gt;
  3. Using a webworker library instead of vanilla implementation
&lt;/h3&gt;

&lt;p&gt;I can imagine that communication with vanilla webworkers could get very complex. &lt;a href="https://github.com/GoogleChromeLabs/comlink"&gt;Comlink&lt;/a&gt; is something that's been on my list for a while and I'd like to try it out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From the &lt;a href="https://github.com/GoogleChromeLabs/comlink"&gt;Comlink Github page&lt;/a&gt;:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Comlink makes WebWorkers enjoyable. Comlink is a tiny library (1.1kB), that removes the mental barrier of thinking about postMessage and hides the fact that you are working with workers.&lt;/p&gt;

&lt;p&gt;At a more abstract level it is an RPC implementation for postMessage and ES6 Proxies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-renderer-interpolation"&gt;
  &lt;/a&gt;
  4. Renderer interpolation
&lt;/h3&gt;

&lt;p&gt;If the use case doesn't call for more, I could keep the physics engine locked at 30 or 60 fps. The issue with this, is that the movement will look 'choppy'.&lt;br&gt;
I could use interpolation and use available position and velocity data to 'predict' object movement and generate the frames up to say 144fps for smooth animations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end.
&lt;/h2&gt;

&lt;p&gt;This turned out much longer than I expected. More to come?&lt;/p&gt;

</description>
      <category>physics</category>
      <category>typescript</category>
      <category>javascript</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>I created an e-commerce site from scratch and kept a development diary over the cource of 5 months</title>
      <author>sgoulas</author>
      <pubDate>Sun, 31 Oct 2021 01:19:28 +0000</pubDate>
      <link>https://dev.to/sgoulas/i-created-an-e-commerce-site-from-scratch-and-kept-a-development-diary-over-the-cource-of-5-months-12mm</link>
      <guid>https://dev.to/sgoulas/i-created-an-e-commerce-site-from-scratch-and-kept-a-development-diary-over-the-cource-of-5-months-12mm</guid>
      <description>&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; I completed a personal project that I would like to share: &lt;a href="https://github.com/sgoulas/pdpProject"&gt;project repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello all,&lt;/p&gt;

&lt;p&gt;I recently finished working on a personal project where I set up to create a simple e-commerce project from scratch in order to learn some new things and I would like to share it with anyone that might be interested.&lt;/p&gt;

&lt;p&gt;The stack includes: material-ui, nextjs, redux, redux-saga, redux-toolkit, jest with react-testing-library, apollo and more. &lt;/p&gt;

&lt;p&gt;I also tried to implemet SEO features like open graph protocol and structured metadata and validated the mark up and the application's accessibility through W3C and WAVE validators.&lt;/p&gt;

&lt;p&gt;The biggest point of interest in my opinion is the documentation. I kept a detailed development diary (over the span of 5 months) for each day I worked on the project which includes all my decisions (style / architecture / technology stack) as well as almost all the problems I faced and the crossroads I found myself on. In that regard, the project might be useful to junior and &lt;em&gt;maybe&lt;/em&gt; medior developers that often wonder "how do I start creating something from scratch?" or faced similar problems in their projects.&lt;/p&gt;

&lt;p&gt;The project can be found here:  &lt;a href="https://github.com/sgoulas/pdpProject"&gt;project repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for your time, have a nice day.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>nextjs</category>
    </item>
  </channel>
</rss>
