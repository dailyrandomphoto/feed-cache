<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>AWS open source news and updates #69</title>
      <author>Ricardo Sueiras</author>
      <pubDate>Mon, 24 May 2021 07:15:36 +0000</pubDate>
      <link>https://dev.to/aws/aws-open-source-news-and-updates-69-50bf</link>
      <guid>https://dev.to/aws/aws-open-source-news-and-updates-69-50bf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#may-24th-2021-instalment-69"&gt;
  &lt;/a&gt;
  May 24th, 2021 - Instalment #69
&lt;/h2&gt;

&lt;p&gt;Newsletter #69. &lt;/p&gt;

&lt;p&gt;This week we celebrate more new open source projects, covering tools that can help you lock down and monitor your IAM policies, reference solutions that make it easy to deploy a number of open source projects, and a great tool to help you monitor/debug your serverless functions. On top of that the usual round up of community and AWS blog posts, featuring lots of updates on Kubernetes, performance tuning HTTP on EC2, LLVM, Apahce Kafka, Triton inference, the next version of Cloudformation guard, Bottlerocket, AWS Graviton2, Tensorflow and more. What are you waiting for, dive straight in...but first :) &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please help me improve this newsletter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Really would love to hear from you to know how I can make this newsletter better - what do you like, what should we do more of and most importantly what do you dislike too.&lt;/p&gt;

&lt;p&gt;The first 20 will get an AWS credit voucher for $25 - you will get a link to the code, so make sure you don't miss that as once they are gone they are gone.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://eventbox.dev/survey/LR71YHM"&gt;Take me to the survey!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many thanks!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Job of the Week&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/jc"&gt;Senior Developer Advocate - OpenSearch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Are you passionate about building, promoting and supporting an inclusive and growing open source community? Do you want to have direct and immediate impact on a large number of open source and AWS users? Do you want to be part of a fast-growing AWS service and work in a fast paced startup style environment?&lt;/p&gt;

&lt;p&gt;We are looking for a Senior Developer Advocate to help us build a great and inclusive community for OpenSearch - an open source search and analytics suite derived from Apache 2.0 licensed Elasticsearch 7.10.2 &amp;amp; Kibana 7.10.2. This role will help us make OpenSearch the de facto choice for users that previously had relied upon open source Elasticsearch. As a Senior Developer Advocate, you will play a central role in helping us building a vibrant community of users and contributors.&lt;/p&gt;

&lt;p&gt;Read more by clicking on the job description above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#celebrating-open-source-contributors"&gt;
  &lt;/a&gt;
  Celebrating open source contributors
&lt;/h3&gt;

&lt;p&gt;The articles posted in this series are only possible thanks to contributors and project maintainers and so I would like to shout out and thank those folks who really do power open source and enable us all to build on top of what they have created. &lt;/p&gt;

&lt;p&gt;So thank you to the following open source heroes: Gary Stafford, Sofian Hamiti, Olajide Enigbokan, Lorenz Vanthillo, Ian McKay, Hassan Tahhan, Sofian Hamiti, Stephen Siegert, Carl Chenet, Marc Richards, Re Alvarez-Parmar, Jimmy Hayes, Santosh Bhavani, Vamshidhar Dantu, Eddie Zaneski, Nikhil Swaminathan, Matteo Rinaudo, Vijoy Choyi, Josef Viehhauser, Vu Dao and Nelson Elhage.&lt;/p&gt;

&lt;p&gt;Make sure you find and follow these builders and keep up to date with their open source projects and contributions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#latest-from-open-source-projects"&gt;
  &lt;/a&gt;
  Latest from open source projects
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;iamlive-lambda-extension&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/iy"&gt;iamlive-lambda-extension&lt;/a&gt; AWS Hero Ian McKay provides an extention to the iamlive project, offering a Lambda Extension that helps generate a least-privilege IAM policy by monitoring the AWS calls made within the Lambda execution environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iamcanary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/iz"&gt;iamcanary&lt;/a&gt; Hassan Tahhan with a tool that helps detect IAM access misconfigurations in your AWS account using periodic dry runs. This open source project can help you answer questions such as: Do you need to deploy a canary test into your AWS account to be notified when certain IAM actions do not succeed? Are you concerned about sudden changes to IAM permission boundaries impacting your workloads? Do you need to detect IAM access misconfigurations not in your control such as overly restrictive AWS Organisations Service Control Policies (SCPs)? If the answer to any of these is yes, then check this project out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cdk-watch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/j0"&gt;cdk-watch&lt;/a&gt; this is a CLI to watch and live-update your CDK Stack's Lambdas, which means you can get real-time logs over web-sockets to make the development feedback-loop faster when debugging your lambdas. An image is worth a hundred words, so check this out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/26e4a63a3f4db93c99e443c7e4dfde5f24fb6fff7c3b7d51d7583cfde9ad02aa/68747470733a2f2f63646b2d77617463682d7374617469632e73332e65752d776573742d322e616d617a6f6e6177732e636f6d2f64656d6f2e676966" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/26e4a63a3f4db93c99e443c7e4dfde5f24fb6fff7c3b7d51d7583cfde9ad02aa/68747470733a2f2f63646b2d77617463682d7374617469632e73332e65752d776573742d322e616d617a6f6e6177732e636f6d2f64656d6f2e676966" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;digital-pathology-on-aws&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/je"&gt;digital-pathology-on-aws&lt;/a&gt; OMERO (Open Microscopy Environment Remote Objects) is a well known open source solution, a collaboration between academia and commercial business, to digitise microscopy images. This repo contains everything you need to get this up and running within your AWS account.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jMMnBFJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/digital-pathology-on-aws/blob/main/Figures/omero-on-aws-ha.jpg%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jMMnBFJ4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/aws-samples/digital-pathology-on-aws/blob/main/Figures/omero-on-aws-ha.jpg%3Fraw%3Dtrue" alt="arch"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;aws-orbit-workbench&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/hy"&gt;aws-orbit-workbench&lt;/a&gt; [Orbit Workbench] is a new open source framework for building team-based secured data environment, that is built on Kubernetes using Amazon Managed Kubernetes Service (EKS), and provides both a command line tool for rapid deployment as well as Python SDK, Jupyter Plugins and more to accelerate data analysis and ML by integration with AWS analytics services such as Amazon Redshift, Amazon Athena, Amazon EMR, Amazon SageMaker and more. Lots of documentation to help you get started, if you work with data then make sure you check this project out.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7pykKotY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/wiki/awslabs/aws-orbit-workbench/Orbit-WorkBench-Arch.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7pykKotY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/wiki/awslabs/aws-orbit-workbench/Orbit-WorkBench-Arch.svg" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#community-open-source-posts"&gt;
  &lt;/a&gt;
  Community open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;LLVM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;LLVM is an open source toolchain that helps make it easier to develop new programming languages or enhance existing ones and has been extensively used in the development of languages such as Swift, Rust and Kotlin. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/jh"&gt;Building LLVM in 90 seconds using Amazon Lambda&lt;/a&gt; Nelson Elhage provides a super post on how you can use Llama so you can run and scale compilation jobs using AWS Lambda, making it easier to compile C or C++ code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TensorFlow&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/j1"&gt;Automating the Setup of SageMaker Studio Custom Images&lt;/a&gt; this post from Sofian Hamiti walks you through the process of creating your own custom container images, in this instance one that has TensorFlow 2.5, and then using a CI/CD pipeline to build and then publish this so you can then use it within the Amazon SageMaker Studio. I am currently playing around in SageMaker Studio as part of a review for Julien Simon's 2nd edition &lt;a href="https://aws-oss.beachgeek.co.uk/j2"&gt;Learn Amazon SageMaker book&lt;/a&gt; so was able to have a play around with this. The only clarification for those going through this walkthrough is that when you are asked for the ImageRoleArn, use your Amazon Studio's Execution role arn (that is what I used when I followed this post, and it worked for me)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Triton&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Triton Inference Server is an open source cloud and edge inferencing project from Nvidia that is optimised for both CPUs and GPUs. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/jk"&gt;Deploying an Nvidia Triton Inference Server on Amazon ECS&lt;/a&gt;, Sofian Hamiti shows you how you can use AWS CDK to deploy this on Amazon ECS containers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FastAPI&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/j3"&gt;Deploying a FastAPI backend using AWS Amplify Container-based REST APIs&lt;/a&gt; Stephen Siegert with a great walkthrough on how to get FastAPI, a framework for setting up APIs for data science and analytics-based workloads, up and running with AWS Amplify in ...well, very Fast indeed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mailtrain&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mailtrain is a self hosted newsletter application built on Node.js (v14+) and MySQL (v8+) or MariaDB (v10+). In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/j4"&gt;How to save up to 500€/year switching from Mailchimp to Open Source Mailtrain and AWS SES&lt;/a&gt; Carl Chenet walks you through how you can reduce your costs by self hosting your newsletter subscribers using this open source project and running it on AWS and using some services such as Amazon Simple Email Service. I had not heard about Mailtrain before, and it looks super nice and feature rich so will be taking a closer look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Kakfa / Spring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/jl"&gt;Eventual Consistency with Spring for Apache Kafka&lt;/a&gt; another great post from Gary Stafford, the first of two parts, where he takes you on journey to understand how you can ensure you maintain data consistency in distributed systems that are made up of many microservices. As you might expect from the title, Apache Kakfa holds the key. So get comfortable, grab something to drink and read on to find out more.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--luLGU7OW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AUpyRPNG_WkV7UnrD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--luLGU7OW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/0%2AUpyRPNG_WkV7UnrD.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tuning HTTP&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have been reading this newsletter for any amount of time you will know I enjoy a good performance tuning/benchmarking post, and this week we have a real treat. Marc Richards has put together this post, &lt;a href="https://aws-oss.beachgeek.co.uk/j5"&gt;Extreme HTTP Performance Tuning: 1.2M API req/s on a 4 vCPU EC2 Instance&lt;/a&gt; showing how you can really squeeze every last bit of performance from HTTP running on an EC2 instance, iterating through a number of techniques which each time push the performance bar higher. Really compelling read this one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d1LVSVgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://talawah.io/blog/extreme-http-performance-tuning-one-point-two-million/libreactor-dhcp-fg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d1LVSVgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://talawah.io/blog/extreme-http-performance-tuning-one-point-two-million/libreactor-dhcp-fg.png" alt="graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Chalice&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Chalice is an open source framework for writing serverless apps in python that allows you to quickly create and deploy applications that use AWS Lambda. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/jf"&gt;CI/CD For CDN Invalidation Using AWS Lambda Function And Gitlab Pipeline&lt;/a&gt; Vu Dao shows you how you can use this framework and address how you can clear edge stored copies of your static assets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A couple of posts this week. First up we have &lt;a href="https://aws-oss.beachgeek.co.uk/ji"&gt;Build Serverless Applications using CDK and SAM&lt;/a&gt;, this post is the perfect read given the recent new a few weeks ago that it is now easier to use AWS CDK and SAM together as you build your serverless applications. AWS Community Builder Lorenz Vanthillo shows you how this look by providing a nice simple walkthrough.&lt;/p&gt;

&lt;p&gt;Then we have &lt;a href="https://aws-oss.beachgeek.co.uk/jm"&gt;AWS CDK for EKS — Handling Helm Charts&lt;/a&gt; from Jimmy Ray, with a post showing you how you can use AWS CDK with Amazon EKS to deploy applications packaged as Helm charts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-and-amazon-open-source-posts"&gt;
  &lt;/a&gt;
  AWS and Amazon open source posts
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Bottlerocket&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/jb"&gt;Getting started with Bottlerocket on AWS Graviton2&lt;/a&gt; Vijoy Choyi brings together two technologies, Bottlerocket and AWS Graviton2, and spins up some Kubernetes clusters running the Bottlerocket OS hosted on Graviton2 based worker nodes. Why might you be interested in doing something similar? Aside from the security benefits brought by Bottlerocket, many customers are finding a better price/performance optic when running on Arm based instances that AWS Graviton2 provides.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzj3GJqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/28/vijoy_Getting-Started-Bottlerocket_f1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzj3GJqS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/ca3512f4dfa95a03169c5a670a4c91a19b3077b4/2021/04/28/vijoy_Getting-Started-Bottlerocket_f1.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Big news last week as the Containers team announced the availability of Kubernetes 1.20 in Amazon EKS. Eddie Zaneski dives deeper into this announcement in his post, &lt;a href="https://aws-oss.beachgeek.co.uk/j8"&gt;Amazon EKS 1.20 Released&lt;/a&gt; taking a look at the main features of this release, changes you should be aware of, specifics to Amazon EKS and a few things to consider as you ponder migrating from 1.19.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Big news last week for folks who love to use AWS Amplify to host their websites with the announcement of now supporting server-side rendering (SSR) apps built with the Next.js framework. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/j9"&gt;Host a Next.js SSR app with real-time data on AWS Amplify&lt;/a&gt; Nikhil Swaminathan walks you through an example so you can see how simple this is, with very little configuration for you to do and plenty of flexibility. Nikhil provides some additional resources to get you going.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amplify&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/jj"&gt;Restoring AWS Amplify project after deleting it from the cloud&lt;/a&gt; Olajide Enigbokan put together a nice guide to help you if you ever find yourself needing to recover from deleting your Amplify projects. Covering what is and is not recovered to how to actually do this, essential reading for those of you who use and love AWS Amplify.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS CloudFormation Guard 2.0&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;AWS CloudFormation Guard is an open-source general-purpose policy-as-code evaluation tool. It provides developers with a simple-to-use, yet powerful and expressive domain-specific language (DSL) to define policies and enables developers to validate JSON- or YAML- formatted structured data with those policies. Announced last week, the Guard 2.0 release is a complete re-write to make the tool general-purpose. In this post, &lt;a href="https://aws-oss.beachgeek.co.uk/ja"&gt;Introducing AWS CloudFormation Guard 2.0&lt;/a&gt; Matteo Rinaudo covers some of those changes, and walks you through some examples of the new features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CVMu6_pt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/images/guard-demo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CVMu6_pt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/aws-cloudformation/cloudformation-guard/main/images/guard-demo.gif" alt="demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AutoGluon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aws-oss.beachgeek.co.uk/jg"&gt;AWS releases code to help reduce bias in machine learning models&lt;/a&gt; Valerio Perrone and Michele Donini present details of a new paper demonstrating how to help mitigate bias via tuning a models hyper-parameters. You can find more details including a link to the research paper and code samples and tutorials in this post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k-EtsJKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.amazon.science/dims4/default/5bb5921/2147483647/strip/true/crop/2424x890%2B0%2B0/resize/1200x441%21/quality/90/%3Furl%3Dhttp%253A%252F%252Famazon-topics-brightspot.s3.amazonaws.com%252Fscience%252F0c%252F1c%252F3178f4e74280b842c10e813e0d28%252Fbo-vs-cbo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k-EtsJKg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://assets.amazon.science/dims4/default/5bb5921/2147483647/strip/true/crop/2424x890%2B0%2B0/resize/1200x441%21/quality/90/%3Furl%3Dhttp%253A%252F%252Famazon-topics-brightspot.s3.amazonaws.com%252Fscience%252F0c%252F1c%252F3178f4e74280b842c10e813e0d28%252Fbo-vs-cbo.png" alt="bias"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;YOLO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;YOLO (You Only Look Once) is part of the DL single-stage object detection model family, which includes models such as Single Shot Detector (SSD) and RetinaNet. Santosh Bhavani and Vamshidhar Dantu help open your eyes on how you can use Neo to improve the performance of image classification in their post, &lt;a href="https://aws-oss.beachgeek.co.uk/j7"&gt;Speed up YOLOv4 inference to twice as fast on Amazon SageMaker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wordpress&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We all remember our first website, and after a brief reminis of days gone by, Re Alvarez-Parmar and Jimmy Hayes take time to write about how many people now start creating their websites on the web - via Wordpress. In, &lt;a href="https://aws-oss.beachgeek.co.uk/j6"&gt;Running WordPress on Amazon ECS on AWS Fargate with Amazon EFS&lt;/a&gt; they apply modern cloud approaches to build a scalable and robust architecture that ensures Wordpress can serve the next generation of creators. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tu5yTb5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/05/20/image-2021-05-20T153609.196.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tu5yTb5P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://d2908q01vomqb2.cloudfront.net/fe2ef495a1152561572949784c16bf23abb28057/2021/05/20/image-2021-05-20T153609.196.png" alt="arch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quick-updates"&gt;
  &lt;/a&gt;
  Quick updates
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Spring&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you are a java developer and use Spring on AWS, make sure you read the announcement last week, &lt;a href="https://aws-oss.beachgeek.co.uk/jd"&gt;Spring Integration for AWS 2.5 went GA last week.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes - 1.20&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon EKS and EKS Distro now support Kubernetes version 1.20. Highlights of the Kubernetes 1.20 release include RuntimeClass and Process ID Limits reaching stable status, API Priority and Fairness being enabled by default, and kubectl debug reaching beta status.&lt;/p&gt;

&lt;p&gt;Amazon EKS provides support for at least 4 Kubernetes versions at any given time. Kubernetes 1.16, 1.17, 1.18, 1.19, and 1.20 are all fully supported by EKS today, and new clusters can be started using any of these releases. However, given the Kubernetes quarterly release cycle, it is critical for all customers to have an ongoing upgrade plan.&lt;/p&gt;

&lt;p&gt;Kubernetes version 1.16 will no longer be supported on July 25th, 2021. On this day, you will no longer be able to create new 1.16 clusters and all existing EKS clusters running Kubernetes version 1.16 will eventually be updated to the latest available platform version of Kubernetes version 1.17.&lt;/p&gt;

&lt;p&gt;We recommend customers upgrade existing 1.16 clusters and worker nodes to at least 1.17 as soon as practical.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kubernetes - CoreDNS and kube-proxy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Amazon EKS now supports using the Amazon EKS console, CLI, and API to install and manage CoreDNS and kube-proxy in addition to existing support for the Amazon VPC CNI networking plugin. This makes it easier to define consistent Kubernetes clusters and keep them up to date using Amazon EKS.&lt;/p&gt;

&lt;p&gt;CoreDNS and kube-proxy provide critical networking functionality for Kubernetes applications. Now, these operational software components, “add-ons”, can be installed, managed, and updated directly through the EKS console, CLI, and API. Each add-on is validated by AWS and can be deployed and updated during cluster setup or at any time. You can see available add-ons and compatible versions in the EKS API, select the version of the add-on you want to run on your cluster, and configure key settings such as the IAM role used by the add-on when it runs. Using EKS add-ons you can go from cluster creation to running applications in a single command and keep your cluster up to date using the Amazon EKS console, CLI, or API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AWS Copilot&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Today, AWS Copilot announced the general availability of version 1.7, which enables you to easily deploy request-driven web services with AWS App Runner in addition to Amazon Elastic Container Service (Amazon ECS). AWS App Runner is a fully managed container application service that makes it easy for customers without any prior containers or infrastructure experience to build, deploy, and run containerised web applications and APIs in just a few clicks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The AWS Toolkit for VS Code is an open-source plugin that lets you leverage the integrated development environment (IDE) for the creation, debugging, and deployment of software applications on Amazon Web Services. The AWS Toolkit extension shows resources in your AWS account through the AWS Explorer view. This interface option enables you to interact with an array of AWS services to carry out tasks such as viewing S3 resources, opening CloudWatch logs, and invoking Lambda functions.&lt;/p&gt;

&lt;p&gt;With this update to the AWS Toolkit for VS Code, customers can now create, locally debug, and deploy Lambda functions written in Java and Go. Java users will be able to step-through debug Lambdas built with Maven and Gradle in Java 8, Java 8.al2, and Java 11, while Go users will be able to do the same with Lambdas built in Golang 1.14+.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#videos-of-the-week"&gt;
  &lt;/a&gt;
  Videos of the week
&lt;/h3&gt;

&lt;p&gt;First up, very happy to see the folks at BMW talking about their open source plans for their Autonomous Driving Data Lake architecture. Check out the whole video as it is an very interesting sector, but if you just want to check out the BMW story and hear Josef Viehhauser dive deep into this topic, skip forward to 9min.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2Cr2EYp8WgM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;AWS Community Builder Luc van Donkersgoed, put together this video exploring how AWS CDK brings infrastructure-as-code closer to DevOps engineers, covering three segments: the power of a multi-language framework, the benefits of applying unit testing to your infrastructure and applying the time-proven concepts of object oriented design and DRY to your infrastructure-as-code.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/tiyjhWTSExg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#events-for-your-diary"&gt;
  &lt;/a&gt;
  Events for your diary
&lt;/h3&gt;

&lt;p&gt;Several events for you this week...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How to Run Your First HPC Job on AWS&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 25th, 8:00PM CET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this online webinar you will learn how to set up your first HPC cluster on AWS. We'll cover everything from installing AWS ParallelCluster (and open source cluster management tool to deploy and manage HPC clusters in the AWS cloud), selecting the your Amazon EC2 instances, when to use Spot Instances to save up to 90% on compute, to launching your first MPI “hello world” job from the command line.&lt;/p&gt;

&lt;p&gt;Find out more and register by clicking over &lt;a href="https://aws-oss.beachgeek.co.uk/io"&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mobile and Front-End Live&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 25th, 9:00 - 15:00 PDT&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a LIVE streamed event on Twitch  focused on accelerating full-stack mobile and web development. Learn about AWS Amplify, a set of purpose-built tools and services for front-end web and mobile developers that simplify app development. Deep dive into GraphQL and AWS AppSync, a fully-managed GraphQL service that improves app performance and developer productivity.&lt;/p&gt;

&lt;p&gt;You can read more about what you can expect in the blog post, &lt;a href="https://aws-oss.beachgeek.co.uk/f4"&gt;Mobile and Front-End Live, May 25&lt;/a&gt; and &lt;a href="https://aws-oss.beachgeek.co.uk/f3"&gt;register via this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenSearch: The open source successor of Elasticsearc&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;May 27th, 9am EST/3pm CET&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Join Dotan Horovits and Kyle Davis for this fireside chat talking about the recent beta of OpenSearch, the community and what lies ahead.&lt;/p&gt;

&lt;p&gt;Streamed &lt;a href="https://www.youtube.com/watch?v=UDvWdTeH5V4"&gt;via YouTube here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cloud Native Day&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;23rd September, Bern Switzerland&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What is this, an in person event returning? A stellar line up including our own Michael Hausenblas, an event looking at CNCF projects and the future of IT. Find out more and to view prices/register, by clicking &lt;a href="https://cloudnativeday.ch/en/#speakers"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stay-in-touch-with-open-source-at-aws"&gt;
  &lt;/a&gt;
  Stay in touch with open source at AWS
&lt;/h3&gt;

&lt;p&gt;I hope this summary has been useful. Remember to check out the &lt;a href="https://aws.amazon.com/opensource/?opensource-all.sort-by=item.additionalFields.startDate&amp;amp;opensource-all.sort-order=asc"&gt;Open Source homepage&lt;/a&gt; to keep up to date with all our activity in open source by following us on &lt;a href="https://twitter.com/AWSOpen"&gt;@AWSOpen&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>aws</category>
    </item>
    <item>
      <title>🐧 Linux Commands - A Complete Handbook 💻</title>
      <author>Kaiwalya Koparkar</author>
      <pubDate>Mon, 24 May 2021 06:55:20 +0000</pubDate>
      <link>https://dev.to/kaiwalyakoparkar/linux-commands-a-complete-handbook-1a7b</link>
      <guid>https://dev.to/kaiwalyakoparkar/linux-commands-a-complete-handbook-1a7b</guid>
      <description>&lt;p&gt;Hello folks,&lt;br&gt;
You might be working on GUI based interfaces to do your daily tasks. But do you know that you can do the same and some advance tasks just using the terminal but more efficiently. Also having a deep understanding of the terminal commands comes handy when you want to be more productive and fast. Terminal commands can do more than just installing the softwares on your Linux distro. In this blog I have share commands which you should definitely try and use in you daily life. I guarantee you that you will feel the power of terminal commands after you use them couple of times. &lt;/p&gt;

&lt;p&gt;Without wasting anymore time let's jump into it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;cd directory_name&lt;/code&gt; ==&amp;gt; Changes the path to directory_name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cd ..&lt;/code&gt; ==&amp;gt; Go back to previous directory&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cd&lt;/code&gt; or &lt;code&gt;cd ~&lt;/code&gt; ==&amp;gt; Go back to root directory&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mkdir directory_name&lt;/code&gt; ==&amp;gt; Makes a new directory at that location&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rmdir directory_name&lt;/code&gt; ==&amp;gt; This will delete the directory (Cannot be undone)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ls&lt;/code&gt; ==&amp;gt; Lists all the directories in the location&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;touch file_name&lt;/code&gt; ==&amp;gt; Creats a file of file_name (File extension is compulsary)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;echo random_text&lt;/code&gt; ==&amp;gt; Will print random_text on the terminal screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;echo random_text &amp;gt; file_name&lt;/code&gt; ==&amp;gt; It will put the random_text into the file_name instead of printing on the terminal screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;man command_name&lt;/code&gt; ==&amp;gt; This will display all the information about the specific terminal command_name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;help&lt;/code&gt; ==&amp;gt; This will help you by providing some comman commands if you are unable to recall them&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;history&lt;/code&gt; ==&amp;gt; Shows all the history of your commands&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ps&lt;/code&gt; ==&amp;gt; This will show all the processes running on you machine&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pwd&lt;/code&gt; ==&amp;gt; This will show your current path in terminal&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cat file_name&lt;/code&gt; ==&amp;gt; Prints all the content in the given file_name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cp file_name location&lt;/code&gt; ==&amp;gt; This will copy the file at the specific location&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;cp file_name copyed_file_name&lt;/code&gt; ==&amp;gt; This makes the copy of the file_name with name as copyed_file_name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mv file_name location&lt;/code&gt; ==&amp;gt; This will move the file_name to the given location.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mv file_name new_file_name&lt;/code&gt; ==&amp;gt; This will rename the file_name to new_file_name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rm -rf directory_name&lt;/code&gt; ==&amp;gt; This will recursively(-r) and forcefully (-f) will delete the directory&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find .&lt;/code&gt; ==&amp;gt; Finds everything in the directory.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find directory_name/&lt;/code&gt; ==&amp;gt; Finds everything in the given directory_name.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find directory_name -type d&lt;/code&gt; ==&amp;gt; Finds only directory in the directory_name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find directory_name -type f&lt;/code&gt; ==&amp;gt; Finds only file_name in the directory_name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find . -type f -name "file_name"&lt;/code&gt; ==&amp;gt; Finds everything with type file and name as file_name&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find . -type f -name "*.txt"&lt;/code&gt; ==&amp;gt; Finds everything with type file and whatever has extention as .txt&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;find . -empty&lt;/code&gt; ==&amp;gt; Finds all the directories and files that are empty&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;clear&lt;/code&gt; ==&amp;gt; clears the terminal screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grep "random_text" file_name&lt;/code&gt; ==&amp;gt; Finds the random_text in the file_name only if the exact word is found (it is case sensitive as well)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grep "random_text" file_name -w&lt;/code&gt; ==&amp;gt; Finds the random_text in the file_name only prints if random_text is found as a whole word(-w)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grep "random_text" file_name -i&lt;/code&gt; ==&amp;gt; Finds the random_text in the file_name and prints regardless of the case sensitiveness. It doesn't mind the case sensitiveness if (-i) is added&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grep "random_text" file_name -n&lt;/code&gt; ==&amp;gt; Finds the random_text in the file_name and prints the the line number (-n) as well.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;grep "random_text" -win ./*.txt&lt;/code&gt; ==&amp;gt; Finds the random text in all the text (.txt) files in the directory and ensure that the word found is whole word (-w), regardless of case sensitiveness (-i), and with line number (-n)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;diff file_1 file_2&lt;/code&gt; ==&amp;gt; Shows the difference in two files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ping www.example_website.com&lt;/code&gt; ==&amp;gt; This will show your internet speed for recieving the pacakages.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;curl www.example_website.com&lt;/code&gt; ==&amp;gt; This will show the html of that example_website&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;top&lt;/code&gt; ==&amp;gt; This will show cpu usage, memory usage etc at current time&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nslookup -type=type service_name&lt;/code&gt; ==&amp;gt; Change the type of the information query&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nslookup -debug example_website&lt;/code&gt; ==&amp;gt; used to find the IP address that corresponds to a host, or the domain name that corresponds to an IP address.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;curl -O pdf_url_on_internet&lt;/code&gt; ==&amp;gt; It downloads the media from the url to the location&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  ❤️ Thank you for reading ❤️
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;🌏 Like | Follow | Share 🌏&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>computerscience</category>
      <category>todayilearned</category>
      <category>tooling</category>
    </item>
    <item>
      <title>Multiple inheritance and MRO in python</title>
      <author>Shiva Gaire</author>
      <pubDate>Mon, 24 May 2021 06:13:29 +0000</pubDate>
      <link>https://dev.to/geeksambhu/multiple-inheritance-and-mro-in-python-20j2</link>
      <guid>https://dev.to/geeksambhu/multiple-inheritance-and-mro-in-python-20j2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Let's first talk about the word &lt;strong&gt;inheritance&lt;/strong&gt;, oxford dictionary defines it as &lt;em&gt;&lt;a href="https://www.oxfordlearnersdictionaries.com/definition/american_english/inheritance"&gt;something from the past or from your family that affects the way you behave, look, etc.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In object-oriented programming, inheritance facilitates code reuse with the primary motivation of reusing or extending the parent or base class in children or subclass, hence the subclass or children class is affected by the parent class. It however provides freedom to children class to modify the parent's attributes and methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#inheritance"&gt;
  &lt;/a&gt;
  Inheritance
&lt;/h2&gt;

&lt;p&gt;Let's see an example which is most common in all paradigm, here &lt;code&gt;Children&lt;/code&gt; class inherits from &lt;code&gt;Parent&lt;/code&gt; class and inherits some methods of &lt;code&gt;Parent&lt;/code&gt; class and also overrides the &lt;code&gt;Parent&lt;/code&gt; class implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parent_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"parent_function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;common_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Parent's common_function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;child_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Child's child_function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;common_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Child's common_function"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# #prints 'parent_function'
&lt;/span&gt;
    &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;#prints 'child's function'
&lt;/span&gt;    &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#prints 'parent_function'
&lt;/span&gt;
    &lt;span class="c1"&gt;# common of both
&lt;/span&gt;    &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#prints "Parent's common_function"
&lt;/span&gt;    &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;#prints "Child's common_function"
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This type of single inheritance is common across all Object-Oriented Paradigm, However, Python has something more to offer with multiple inheritance, which means you can inherit from multiple base classes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#multiple-inheritance"&gt;
  &lt;/a&gt;
  Multiple Inheritance
&lt;/h2&gt;

&lt;p&gt;Multiple Inheritance refers to the inheritance that uses two or more base class. This is how you define multiple inheritance using &lt;code&gt;class&lt;/code&gt; keyword for multiple &lt;code&gt;baseClass&lt;/code&gt;:  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;class SubClass(baseClass, baseClass2, baseClass3, ....)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Python has its renowned multiple inheritance feature which comes in handy when working with a class that needs implementation from two or more class.&lt;/p&gt;

&lt;p&gt;When working with multiple base class there arises confusion if one or more base class implements the same method. Let's see how this is handled in python in next step: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#method-resolution-order"&gt;
  &lt;/a&gt;
  Method Resolution Order
&lt;/h2&gt;

&lt;p&gt;Multiple inheritance can create confusion when there are one or more base classes that implement the same method. Python(2.3 and newer) version introduced the renowned &lt;code&gt;method resolution order&lt;/code&gt; or &lt;code&gt;mro&lt;/code&gt; to deal with the method resolution while using multiple inheritance. &lt;/p&gt;

&lt;p&gt;Method resolution order(MRO) in short has its root in  &lt;a href="https://en.wikipedia.org/wiki/C3_linearization"&gt;C3 linearization algorithm&lt;/a&gt; which basically outlines the basis for MRO list calculation in python multilevel inheritance. Method Resolution Order is the python provided calculation of inheritance graph. &lt;/p&gt;

&lt;p&gt;The MRO calculation has 3 major points to consider for the method resolution list from a subclass. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Subclasses comes first rather than the base classes&lt;/li&gt;
&lt;li&gt;Base class definition order is preserved&lt;/li&gt;
&lt;li&gt;Fits the above two criteria for all MRO calculation in a program&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If this is violated then C3 prohibits the python from inheritance declaration. &lt;/p&gt;

&lt;p&gt;Let's see an example to see the &lt;code&gt;mro&lt;/code&gt; list.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi from A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi From B"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi from C"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;E&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__mro__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# (&amp;lt;class '__main__.D'&amp;gt;, &amp;lt;class '__main__.B'&amp;gt;, &amp;lt;class '__main__.C'&amp;gt;, &amp;lt;class '__main__.A'&amp;gt;, &amp;lt;class 'object'&amp;gt;)
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__mro__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;# ((&amp;lt;class '__main__.E'&amp;gt;, &amp;lt;class '__main__.C'&amp;gt;, &amp;lt;class '__main__.B'&amp;gt;, &amp;lt;class '__main__.A'&amp;gt;, &amp;lt;class 'object'&amp;gt;))
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the &lt;code&gt;__mro__&lt;/code&gt; attribute often pronounced as &lt;code&gt;dun~der mro&lt;/code&gt; (double underscore mro) with class name, It gives the tuple of classes defining the method's resolution order for the subclass.&lt;/p&gt;

&lt;p&gt;In the above example, we can see the diamond inheritance formation. So, on printing  &lt;code&gt;D.__mro__&lt;/code&gt; attribute,  it gives:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;class '__main__.D'&amp;gt;, &amp;lt;class '__main__.B'&amp;gt;, &amp;lt;class '__main__.C'&amp;gt;, &amp;lt;class '__main__.A'&amp;gt;, &amp;lt;class 'object'&amp;gt;)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and on printing &lt;code&gt;E.__mro__&lt;/code&gt; , it gives: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;class '__main__.E'&amp;gt;, &amp;lt;class '__main__.C'&amp;gt;, &amp;lt;class '__main__.B'&amp;gt;, &amp;lt;class '__main__.A'&amp;gt;, &amp;lt;class 'object'&amp;gt;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice the difference in the second element of the above tuple, its because the base class order is preserved for the class definition of class D and E:  &lt;strong&gt;&lt;code&gt;D(B, C)&lt;/code&gt; and &lt;code&gt;E(C, B)&lt;/code&gt;&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;So, &lt;code&gt;&amp;lt;class '__main__.C'&amp;gt;&lt;/code&gt; in the second index for the &lt;code&gt;E&lt;/code&gt; subclass and &lt;code&gt;&amp;lt;class '__main__.B'&amp;gt;&lt;/code&gt; in the second index for &lt;code&gt;B&lt;/code&gt; subclass.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The method resolution order will be entirely based on the above tuple order,&lt;br&gt;&lt;br&gt;
which means when any method is invoked for the instance of class &lt;code&gt;D&lt;/code&gt;, the method of class &lt;code&gt;D&lt;/code&gt; will be resolved first and if not found it will try to resolve from the second element from the &lt;code&gt;D.__mro__&lt;/code&gt; tuple , which is class &lt;code&gt;B&lt;/code&gt; and so on to the next element, if no such method is implemented it will result in &lt;code&gt;AttributeError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the implementation is found for the current lookup the search stops right there and the method will be resolved from there. &lt;/p&gt;

&lt;p&gt;If you made it upto here, Please come up in discussion to check the &lt;code&gt;__mro__&lt;/code&gt; for the below snippet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi from A"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi From B"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi from C"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;D&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Finally, If you learned something from this article, please share it with your friends.&lt;/p&gt;

&lt;p&gt;You may also follow me on  &lt;a href="https://www.linkedin.com/in/geeksambhu/"&gt;LinkedIn&lt;/a&gt;  and  &lt;a href="https://twitter.com/geeksambhu"&gt;Twitter&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>python</category>
      <category>python3</category>
      <category>oop</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Scala For Beginners - Crash Course - Part 1</title>
      <author>Siddharth Chandra</author>
      <pubDate>Mon, 24 May 2021 05:53:25 +0000</pubDate>
      <link>https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-1-cgj</link>
      <guid>https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-1-cgj</guid>
      <description>&lt;p&gt;Welcome to this scala beginners crash course, here we will go through the basic syntax of scala programming language and some of the nuances available just for scala developers!&lt;/p&gt;

&lt;p&gt;It will be a no-nonsense, to the point kind of article with all necessary links wherever needed.&lt;/p&gt;

&lt;p&gt;Without further ado, let's get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-scala"&gt;
  &lt;/a&gt;
  What Is Scala?
&lt;/h3&gt;

&lt;p&gt;Scala is a programming language just like any other that is available out there but with a lot of sweetness and awesome features that opens our world to functional programming with easy to understand syntax, running on JVM under the hood, having all functionality that Java language offers with popularity ranging from being used in major FinTech companies to FAANG companies and as one of the major language for data engineering applications.&lt;/p&gt;

&lt;p&gt;Need to know more about what is Scala, visit &lt;a href="https://www.scala-lang.org/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-install-scala"&gt;
  &lt;/a&gt;
  How To Install Scala?
&lt;/h3&gt;

&lt;p&gt;Well, there are a couple of ways, in which the shortest and easy to follow is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install IntelliJ IDE from JetBrains. Check &lt;a href="https://www.jetbrains.com/idea/download/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;IntelliJ IDEA | Preferences&lt;/code&gt; for macOS ( Ctrl+Alt+S ) or &lt;code&gt;File | Settings&lt;/code&gt; for Windows and Linux.&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Plugins&lt;/code&gt; on the left pane.&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;Scala&lt;/code&gt;, install the plugin and restart IDE.&lt;/li&gt;
&lt;li&gt;Now, after it restarts, select &lt;code&gt;New Project&lt;/code&gt; and then &lt;code&gt;Scala&lt;/code&gt; -&amp;gt; &lt;code&gt;IDEA&lt;/code&gt; project, click &lt;code&gt;Next&lt;/code&gt;, set project name and your project folder are ready with necessary scala features.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mdHqIoBz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621697251647/lECjG6zCA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mdHqIoBz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621697251647/lECjG6zCA.png" alt="install_scala.png"&gt;&lt;/a&gt;&lt;br&gt;
Installing Scala&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z0kCPJoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621697268678/dtXJwQfg8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z0kCPJoa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621697268678/dtXJwQfg8.png" alt="setup_project.png"&gt;&lt;/a&gt;&lt;br&gt;
Creating a New Project&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FLRm49bb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621697291997/GWDVd0_-X.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FLRm49bb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621697291997/GWDVd0_-X.png" alt="project_name.png"&gt;&lt;/a&gt;&lt;br&gt;
Set Suitable Project Name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#how-to-start-working-with-scala"&gt;
  &lt;/a&gt;
  How To Start Working With Scala?
&lt;/h3&gt;

&lt;p&gt;After successful installation and creating a scala project, you would be seeing a nice project structure with &lt;code&gt;src&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;We will create a package, inside that package we will continue our work. &lt;a href="https://docs.oracle.com/javase/tutorial/java/concepts/package.html"&gt;What is a package?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create a package, right-click on &lt;code&gt;src&lt;/code&gt; folder and select &lt;code&gt;New | Package&lt;/code&gt; type, then fill in a name, whatever you like, for our case, let's name it &lt;code&gt;crashcourse&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4K4EQN5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621697312670/NxpfJgmX3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4K4EQN5E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621697312670/NxpfJgmX3.png" alt="create_package.png"&gt;&lt;/a&gt;&lt;br&gt;
Create New Package&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, right-click the &lt;code&gt;crashcourse&lt;/code&gt; then &lt;code&gt;New | Scala&lt;/code&gt;, here we are creating a scala object (we will discuss what scala object is in a minute). Let's name it &lt;code&gt;BeginnersCrashCourse&lt;/code&gt;. It will create a standard template of scala object like below:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ppwjQj3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621697340573/3icKtWx0Z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ppwjQj3c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621697340573/3icKtWx0Z.png" alt="object_creation.png"&gt;&lt;/a&gt;&lt;br&gt;
Select Scala Class&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iRoP0Z2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621697358744/E9Gci-BRM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iRoP0Z2v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1621697358744/E9Gci-BRM.png" alt="select_object.png"&gt;&lt;/a&gt;&lt;br&gt;
Select Scala Object&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, now we have all we need to get started with some code!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-an-object"&gt;
  &lt;/a&gt;
  What Is An Object?
&lt;/h3&gt;

&lt;p&gt;Before moving to object, if you notice the created template have &lt;code&gt;package crashcourse&lt;/code&gt; at the top, it means that whatever code we are going to write below this, will belong to this package and can be accessed by any code file within the same package or can be imported using &lt;code&gt;import crashcourse._&lt;/code&gt; in some other package. &lt;a href="https://docs.scala-lang.org/tour/packages-and-imports.html"&gt;How to do imports in scala?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, what is object in scala?&lt;/p&gt;

&lt;p&gt;Object is a class that has exactly one instance, it means it already is an instance with a defined class structure. What is the defined class structure for an object type? It is everything we write inside scala object.&lt;/p&gt;

&lt;p&gt;Scala objects are singleton, which means if we say we have an object named &lt;code&gt;BeginnersCrashCourse&lt;/code&gt; then it is an instance that is a singleton in nature and whenever I am accessing it in the same executing program then its behaviour is going to be the same at every place, containing same values, methods or functions.&lt;/p&gt;

&lt;p&gt;Treat an object as something that has static class level functionality.&lt;/p&gt;

&lt;p&gt;How to write an object? Simple, just use &lt;code&gt;object&lt;/code&gt; keyword before writing an object, like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;crashcourse&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;BeginnersCrashCourse&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What is &lt;code&gt;extends App&lt;/code&gt;? We extend &lt;code&gt;App&lt;/code&gt; level functionality to a scala object whenever we want it to be able to run something inside it. It is like saying, we have a prebuilt &lt;code&gt;public static void main(String[] args)&lt;/code&gt; whenever we extend it.&lt;/p&gt;

&lt;p&gt;The above code is equivalent to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;crashcourse&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;BeginnersCrashCourse&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just to avoid writing the &lt;code&gt;main&lt;/code&gt; method we can simply extend &lt;code&gt;App&lt;/code&gt; to an object.&lt;/p&gt;

&lt;p&gt;It is called a Scala Application if the main object (here &lt;code&gt;BeginnersCrashCourse&lt;/code&gt;) extends &lt;code&gt;App&lt;/code&gt; and is executable in nature. The main code goes inside an object that has &lt;code&gt;App&lt;/code&gt; level functionality. Make sure you have a single main application while creating a service. Each service will have its main application to execute scala code.&lt;/p&gt;

&lt;p&gt;Need more on scala objects, visit &lt;a href="https://docs.scala-lang.org/tour/singleton-objects.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#expressions-types-vars-vals-def-print-and-codeblocks"&gt;
  &lt;/a&gt;
  Expressions, Types, Vars, Vals, Def, Print and Codeblocks
&lt;/h3&gt;

&lt;p&gt;How to create a variable in scala?&lt;/p&gt;

&lt;p&gt;Well, there are 2 ways in which we can create a variable in scala:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;crashcourse&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;BeginnersCrashCourse&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;//Mutable&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;var2&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="c1"&gt;//Immutable&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Writing comments in Scala is the same as Java.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The key difference between the 2 variables is that &lt;code&gt;var1&lt;/code&gt; is mutable and &lt;code&gt;var2&lt;/code&gt; is immutable and in functional programming, we will prefer to use immutable values.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;val&lt;/code&gt; - values and &lt;code&gt;var&lt;/code&gt; - variables, the name suggest itself that &lt;code&gt;val&lt;/code&gt; will be a definite value whereas &lt;code&gt;var&lt;/code&gt; are variables.&lt;/p&gt;

&lt;p&gt;We can also use the semicolon &lt;code&gt;;&lt;/code&gt; at end of each line, but they are not needed. We can also define types to the variables, but for the above case, compiler does this work for us, although it is best to explicitly define the type of each value we use in our code. So below code is similar to the above:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;crashcourse&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;BeginnersCrashCourse&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//Mutable&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;var2&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//Immutable&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are several data types available in scala, some of them are as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;crashcourse&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;BeginnersCrashCourse&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//Mutable&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;var2&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Immutable&lt;/span&gt;

  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;bool&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;  &lt;span class="c1"&gt;//or false&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;chr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;   &lt;span class="c1"&gt;//Make sure you use single quotes for character type value&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"String"&lt;/span&gt;    &lt;span class="c1"&gt;//And double quotes for a string type&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;int&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;    &lt;span class="c1"&gt;//An int value&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;shrt&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Short&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;   &lt;span class="c1"&gt;//A short value&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;lng&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Long&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;     &lt;span class="c1"&gt;//A long value&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;lng2&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123L&lt;/span&gt;   &lt;span class="c1"&gt;//Make sure to put L to let compiler know that it is of type Long&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;flt&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;123.0f&lt;/span&gt;   &lt;span class="c1"&gt;//Make sure to put f at the end of float values&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;dbl&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;123.0&lt;/span&gt;   &lt;span class="c1"&gt;//Otherwise compiler will infer it as a type of double&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More on scala types, &lt;a href="https://docs.scala-lang.org/tour/unified-types.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, let's move on to defining methods in scala. It can be done so using &lt;code&gt;def&lt;/code&gt; keyword, methods can take arguments passed to them as parameters while calling them. We can define empty methods as well, those that take nothing.&lt;/p&gt;

&lt;p&gt;Let's define some methods and call them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;crashcourse&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;BeginnersCrashCourse&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;//Mutable&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;var2&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Immutable&lt;/span&gt;

  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;bool&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;  &lt;span class="c1"&gt;//or false&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;chr&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Char&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;'a'&lt;/span&gt;   &lt;span class="c1"&gt;//Make sure you use single quotes for character type value&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"String"&lt;/span&gt;    &lt;span class="c1"&gt;//And double quotes for a string type&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;int&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;    &lt;span class="c1"&gt;//A int value&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;shrt&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Short&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;   &lt;span class="c1"&gt;//A short value&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;lng&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Long&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;     &lt;span class="c1"&gt;//A long value&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;lng2&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123L&lt;/span&gt;   &lt;span class="c1"&gt;//Make sure to put L to let compiler know that it is of type Long&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;flt&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;123.0f&lt;/span&gt;   &lt;span class="c1"&gt;//Make sure to put f at the end of float values&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;dbl&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;123.0&lt;/span&gt;   &lt;span class="c1"&gt;//Otherwise compiler will infer it as a type of double&lt;/span&gt;

  &lt;span class="c1"&gt;// Methods&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greetings&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
  &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;greetings&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Siddharth"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greetingsModified&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nf"&gt;greetingsModified&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sid"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greetingsFromSystem&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, you are learning Scala!"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;greetingsFromSystem&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There are lot of things happening here, let's break it down for each method:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; We define a method using &lt;code&gt;def&lt;/code&gt; keyword, our first method named &lt;code&gt;greetings&lt;/code&gt; takes a single parameter named &lt;code&gt;name&lt;/code&gt; which of type &lt;code&gt;String&lt;/code&gt; and the method returns a value of type &lt;code&gt;String&lt;/code&gt; denoted by &lt;code&gt;: String&lt;/code&gt; after &lt;code&gt;greetings(name: String)&lt;/code&gt;, and this method evaluates to &lt;code&gt;"Hello " + name&lt;/code&gt; with replacing with whatever name value we pass. We can print it to the console using &lt;code&gt;println&lt;/code&gt; method that conveniently puts a new line after printing the passed value to the console.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A little detour before we move on to the next methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In scala everything we write gets evaluated to some value, those statements like &lt;code&gt;"Hello " + name&lt;/code&gt; from above are called expressions. Everything in scala can be referred to as an expression, even assigning of values is called an expression evaluating in such a way that assign values to a given name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any expression that does not evaluate anything but does something, like printing to console or assigning a value or storing data, then data type of that whole expression is called &lt;code&gt;Unit&lt;/code&gt;. So, whenever we assign a value within a method, and that's the last thing that method evaluated to then it will be of type &lt;code&gt;Unit&lt;/code&gt;. Anything that evaluates to &lt;code&gt;Unit&lt;/code&gt; type is called side-effect in scala.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can use code blocks &lt;code&gt;{...}&lt;/code&gt; instead of directly writing an expression for our methods. Methods are evaluated to the value returned by the last expression if it has a number of expressions. You can consider it to be the return value of the method but without needing to write &lt;code&gt;return&lt;/code&gt; explicitly. &lt;a href="https://tpolecat.github.io/2014/05/09/return.html"&gt;Why we should not use return in scala?&lt;/a&gt;. A method code block would look something like this:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;methodWithCodeBlock&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;    &lt;span class="c1"&gt;//Evaluates to String type&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//Below method evaluates to same value as above method while doing something else, like printing something&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;methodWithSomethingElse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Inside methodWithSomethingElse"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;//Evaluates to Unit type&lt;/span&gt;
  &lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;    &lt;span class="c1"&gt;//Evaluates to String type, hence the type of method as it is the last expression evaluating&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Now, the remaining methods can be understood well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; We define the second method &lt;code&gt;greetingsModified&lt;/code&gt; that takes a parameter named &lt;code&gt;name&lt;/code&gt; of type &lt;code&gt;String&lt;/code&gt; but evaluates to &lt;code&gt;Unit&lt;/code&gt; as all this method does is print the greeting to the console as a side-effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; The last method we wrote &lt;code&gt;greetingsFromSystem&lt;/code&gt; does not take any parameter and evaluates to &lt;code&gt;Unit&lt;/code&gt; with the side-effect of printing to console. This is called a parameterless method, scala allows us to define such a method, awesome, right?&lt;/p&gt;

&lt;p&gt;For each method call, the following is the output to the console (to run a scala application, right-click and run in IntelliJ):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Hello Siddharth
Hello Sid
Hello, you are learning Scala!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;More on &lt;code&gt;println&lt;/code&gt;, visit &lt;a href="https://www.geeksforgeeks.org/scala-console-println-printf-and-readline/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More on &lt;code&gt;Unit&lt;/code&gt; type and other such types, visit &lt;a href="https://www.geeksforgeeks.org/scala-null-null-nil-nothing-none-and-unit/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More on codeblocks in scala, visit &lt;a href="https://www.includehelp.com/scala/code-blocks-in-scala.aspx"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More on methods in scala, visit &lt;a href="https://docs.scala-lang.org/overviews/scala-book/methods-first-look.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h3&gt;

&lt;p&gt;Well, that warps up part 1 of this crash course.&lt;/p&gt;

&lt;p&gt;In the next part we will be discussing classes, more on objects, companions, case classes and much more related to object-oriented programming in Scala.&lt;/p&gt;

&lt;p&gt;Make sure to follow me to get the update for the next part or subscribe so that you never miss my upcoming blog articles ranging from Python Programming to Computer Vision to Scala Programming.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>scala</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Does yes and no have a "type name", like how true and false are called "boolean"?</title>
      <author>Calin Baenen</author>
      <pubDate>Mon, 24 May 2021 03:35:12 +0000</pubDate>
      <link>https://dev.to/baenencalin/does-yes-and-no-have-a-type-name-like-how-true-and-false-are-called-boolean-2m2j</link>
      <guid>https://dev.to/baenencalin/does-yes-and-no-have-a-type-name-like-how-true-and-false-are-called-boolean-2m2j</guid>
      <description>&lt;p&gt;Do "yes" and "no" have a name together, like how "true" and "false" are called "boolean"?&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>help</category>
    </item>
    <item>
      <title>im new at coding, trying to learn web development from home, :)</title>
      <author>basmdh</author>
      <pubDate>Mon, 24 May 2021 03:34:38 +0000</pubDate>
      <link>https://dev.to/basmdh/im-new-at-coding-trying-to-learn-web-development-from-home-3oij</link>
      <guid>https://dev.to/basmdh/im-new-at-coding-trying-to-learn-web-development-from-home-3oij</guid>
      <description></description>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Introduction to AWS ElasticBeanstalk</title>
      <author>Adit Modi</author>
      <pubDate>Mon, 24 May 2021 03:30:31 +0000</pubDate>
      <link>https://dev.to/aws-builders/introduction-to-aws-elasticbeanstalk-44bn</link>
      <guid>https://dev.to/aws-builders/introduction-to-aws-elasticbeanstalk-44bn</guid>
      <description>&lt;p&gt;Amazon has offered a wide range of web services that can help in boosting up your IT business to attain new heights. The services are available for every individual across the globe, so they can easily get all the information about these services and use them as per their requirements. Big companies like Netflix , BBC and ESPN are using the Amazon Web Services to innovate something new for the future. AWS Elastic Beanstalk, which comes under Amazon’s Compute Category Services.&lt;/p&gt;

&lt;p&gt;In this AWS Elastic Beanstalk blog, you will learn the following topics&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What is AWS Elastic Beanstalk?&lt;/li&gt;
&lt;li&gt;Who should use AWS Elastic Beanstalk?&lt;/li&gt;
&lt;li&gt;What are the Features of AWS Elastic Beanstalk?&lt;/li&gt;
&lt;li&gt;What are the languages supported by AWS Elastic Beanstalk?&lt;/li&gt;
&lt;li&gt;What are the elements of the application when using Elastic Beanstalk on AWS?&lt;/li&gt;
&lt;li&gt;What database solutions can I use with AWS Elastic Beanstalk?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--92QyZ9F9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntfnchri73575565chut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--92QyZ9F9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ntfnchri73575565chut.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The name "Elastic beanstalk" is a reference to the beanstalk that grew all the way up to the clouds in the fairy tale Jack and the Beanstalk. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My Background: Cloud Engineer | AWS Community Builder | AWS Educate Cloud Ambassador | 4x AWS Certified | 3x OCI Certified | 3x Azure Certified.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Introduction to AWS Services&lt;/strong&gt; is a mini Series containing different articles that provide a basic introduction to different aws services. Each article covers the detailed guide on how to use the aws service. This series aims at providing "A Getting Started Guide on Different AWS Services."&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-aws-elastic-beanstalk"&gt;
  &lt;/a&gt;
  What is AWS Elastic Beanstalk?
&lt;/h1&gt;

&lt;p&gt;The AWS Elastic Beanstalk is a cloud deployment service by which you can easily set up your application on the Amazon Web Services infrastructure simply by just uploading it. All the other necessary operations like autoscaling, provisioning, load balancing, and application health monitoring will be handled automatically by using it. Moreover, the Elastic Beanstalk is blessed with an open architecture, which means that even the applications not written for the web can be deployed on it. Amazon doesn’t charge additionally for the Elastic Beanstalk, consumers will just have to pay for the resources used to run and store their apps.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#who-should-use-aws-elastic-beanstalk"&gt;
  &lt;/a&gt;
  Who should use AWS Elastic Beanstalk?
&lt;/h1&gt;

&lt;p&gt;As we have already mentioned above, the Elastic Beanstalk packs an open architecture, which means it can be used by anyone. In simple words, we can say that anyone who desires to deploy and manage his/her application on Amazon Cloud within minutes can use the AWS Elastic Beanstalk. You do not need to have advanced knowledge of cloud computing to use this service.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-the-features-of-aws-elastic-beanstalk"&gt;
  &lt;/a&gt;
  What are the Features of AWS Elastic Beanstalk?
&lt;/h1&gt;

&lt;p&gt;The AWS Elastic Beanstalk comes with several eye-catching features which make the deployment and management of application on the Amazon Cloud very easy. Let us have a look at the features associated with the AWS Elastic Beanstalk, by which, you can easily get a deeper look into this service.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jlQMlIK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7bio2ig1fundg0kfkzi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jlQMlIK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7bio2ig1fundg0kfkzi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#features-of-aws-elastic-beanstalk"&gt;
  &lt;/a&gt;
  Features of AWS Elastic Beanstalk.
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#application-support"&gt;
  &lt;/a&gt;
  Application Support
&lt;/h2&gt;

&lt;p&gt;Amazon Elastic Beanstalk offers you support for a wide range of application environments. It supports a lot of container and coding platforms including Ruby, Python, Node.js, PHP, .NET, JAVA, and Docker.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-integration"&gt;
  &lt;/a&gt;
  AWS Integration
&lt;/h2&gt;

&lt;p&gt;Elastic Beanstalk comes with the availability of native and deep integration with the rest of the Amazon Web Services. It means that you are allowed to configure your application according to your requirements. You can perform a lot of actions with the help of it, like enabling SSH access, choosing different instance types with more or less memory, arranging the required security, and connecting with additional AWS services such as RDS, Lambda, and S3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scalability"&gt;
  &lt;/a&gt;
  Scalability
&lt;/h2&gt;

&lt;p&gt;With the help of Elastic Beanstalk, you can have a small start and can scale it up to desired heights. Amazon gives you the power to create 75 apps on the Elastic Beanstalk, with 1000 versions of each one of them. All the users are allowed to run up to 200 environments across each and every one of their applications by default. Moreover, you are also allowed to request more using a request form if your organization needs more resources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#provisioning"&gt;
  &lt;/a&gt;
  Provisioning
&lt;/h2&gt;

&lt;p&gt;The AWS Elastic Beanstalk comes with an ability of provisioning all the load balancers, necessary instances, and additional resources that your application requires. So, you don't have to worry about anything as the Elastic Beanstalk will take care of every necessity of an application. Furthermore, you don’t even have to specify anything related to the type and size of these resources.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#versioning"&gt;
  &lt;/a&gt;
  Versioning
&lt;/h2&gt;

&lt;p&gt;Easy version management of applications is also a great facility offered by the Elastic Beanstalk. With the help of EB (Elastic Beanstalk), you can easily deploy different application versions to a running environment of an application. Moreover, you will also not face any hurdle while rolling back to a previous version of that application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monitoring"&gt;
  &lt;/a&gt;
  Monitoring
&lt;/h2&gt;

&lt;p&gt;While running an application in production, it is highly important to know if any issue arises, so that you can fix it at the right time. The Elastic Beanstalk checks it out for you by executing regular health check-ups to ensure the smooth running of your application. If not, the EB finds out the root cause of the problem and resolve it within a very small period of time. For this, the Elastic Beanstalk may launch a new instance, which is failing, or replaces the load balancer if the issue is being caused by it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloudwatch"&gt;
  &lt;/a&gt;
  CloudWatch
&lt;/h2&gt;

&lt;p&gt;With the help of Elastic Beanstalk, you also get access to the Amazon CloudWatch. By using this marvellous management tool, you can monitor the system environment via set metrics such as CPU usage, inbound/outbound network traffic, and request count. It will provide you with the exact measurement of your application’s health status.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#management"&gt;
  &lt;/a&gt;
  Management
&lt;/h2&gt;

&lt;p&gt;By using the AWS Elastic Beanstalk, you can easily take the guesswork out of managing your currently running application. You are allowed to administer the versions and environments of your application via Beanstalk console. You can also view logs, restart instances, and even rebuild the entire infrastructure with the help of AWS Elastic Beanstalk.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatic-scaling"&gt;
  &lt;/a&gt;
  Automatic Scaling
&lt;/h2&gt;

&lt;p&gt;If your application runs smoothly at a server but causes distortion sometimes, it means that you will need two or three servers to scale it up. You can perform this task with ease if you are using the AWS Elastic Beanstalk. You can set triggers to add or remove instances depending on a load of your application. In simple words, you can increase the number of servers if the CPU usage goes above 50 percent.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notifications"&gt;
  &lt;/a&gt;
  Notifications
&lt;/h2&gt;

&lt;p&gt;If you are using the AWS Elastic Beanstalk, you will get notifications automatically whenever improvement events and activities take place for your application. For example, you will get notified when new deployments occur, new servers are launched, or your predefined threshold is suppressed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-languages-supported-by-aws-elastic-beanstalk"&gt;
  &lt;/a&gt;
  What are the languages supported by AWS Elastic Beanstalk?
&lt;/h2&gt;

&lt;p&gt;The AWS Elastic Beanstalk offers the deployment service for your application, by which you can run your app on the Amazon Cloud. For this, it supports many languages and development stacks which can be easily seen in the following points mentioned below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apache Tomcat for Java applications.&lt;/li&gt;
&lt;li&gt;Apache HTTP Server for PHP applications.&lt;/li&gt;
&lt;li&gt;Apache HTTP Server for Python applications.&lt;/li&gt;
&lt;li&gt;Nginx or Apache HTTP Server for Node.js applications.&lt;/li&gt;
&lt;li&gt;Passenger or Puma for Ruby applications.&lt;/li&gt;
&lt;li&gt;Microsoft IIS 7.5, 8.0, and 8.5 for .NET applications&lt;/li&gt;
&lt;li&gt;Java SE&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RI0hHvJu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwoj67gat5db5b0ykkfz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RI0hHvJu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cwoj67gat5db5b0ykkfz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are the languages supported by the AWS Elastic Beanstalk. You can easily use these languages to take advantage of EB.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-are-the-elements-of-the-application-when-using-elastic-beanstalk-on-aws"&gt;
  &lt;/a&gt;
  What are the elements of the application when using Elastic Beanstalk on AWS?
&lt;/h1&gt;

&lt;p&gt;While using the AWS Elastic Beanstalk, you can have control over a lot of elements of your application. To get a detailed description of all of them, you can simply check out the below-given points:&lt;/p&gt;

&lt;p&gt;You can manually select the desired operating system according to your application requirements. (For eg. Windows Server 2012 R2 or Amazon Linux)&lt;br&gt;
You can choose your desired storage option and database.&lt;br&gt;
You can enable direct login access to the Amazon EC2 instances for immediate troubleshooting.&lt;br&gt;
You can run your application in more than one available zone, which will improve its reliability.&lt;br&gt;
You can enable HTTPS protocol on the load balancer to enhance the application security.&lt;br&gt;
You can monitor and get notified about the application health and additional important events with the help of Amazon CloudWatch.&lt;br&gt;
You can pass the environment variables by adjusting the application server settings.&lt;br&gt;
You can run additional required application components like a memory caching service in Amazon EC2.&lt;br&gt;
You can easily access the log files without even signing in to the application servers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WDPyKXwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81cp9repp3xosnv6vhh0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WDPyKXwO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81cp9repp3xosnv6vhh0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are the following application components you can control by using the AWS Elastic Beanstalk.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-database-solutions-can-i-use-with-aws-elastic-beanstalk"&gt;
  &lt;/a&gt;
  What database solutions can I use with AWS Elastic Beanstalk?
&lt;/h1&gt;

&lt;p&gt;AWS does not bind you to any specific data persistence technology. It simply means that you have many options to choose such as Amazon DynamoDB, Amazon Relational Database Service, Oracle, Microsoft SQL Server or any other desired relational database services running on the Amazon EC2.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tO1rzpzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6nz1sd50puc0kp56kfp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tO1rzpzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w6nz1sd50puc0kp56kfp.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The AWS Elastic Beanstalk is a fine service offered by the Amazon and is undeniably a tool that can enhance the working of your application. You can learn the AWS Elastic Beanstalk and can make your working more flexible and reliable. All the major points and details related to the Elastic Beanstalk have been mentioned in this article. Now, you have to choose whether it meets your learning interest or not. Choose wisely, and all the very best for your future.&lt;/p&gt;

&lt;p&gt;Hope this guide helps you understand on How to Get Started With AWS ElasticBeanstalk, feel free to connect with me on &lt;a href="https://www.linkedin.com/in/adit-modi-2a4362191/"&gt;LinkedIn.&lt;/a&gt;&lt;br&gt;
You can view my badges &lt;a href="https://www.youracclaim.com/users/adit-modi/badges"&gt;here.&lt;/a&gt;&lt;br&gt;
If you are interested in learning more about AWS Services then follow me on &lt;a href="https://github.com/AditModi"&gt;github.&lt;/a&gt;&lt;br&gt;
If you liked this content then do clap and share it . Thank You .&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Hackathon guide, tips, tricks, and resources for organisers</title>
      <author>Michelle Mannering</author>
      <pubDate>Mon, 24 May 2021 03:14:32 +0000</pubDate>
      <link>https://dev.to/mishmanners/hackathon-guide-tips-tricks-and-resources-for-organisers-11da</link>
      <guid>https://dev.to/mishmanners/hackathon-guide-tips-tricks-and-resources-for-organisers-11da</guid>
      <description>&lt;p&gt;I'm really excited to finally 🚢 something big. Before I started working at GitHub, I was running hackathons. Organising them, mentoring at them, judging entries, and even participating.&lt;/p&gt;

&lt;p&gt;I became known as the Hackathon Queen and have been involved in over 100 hackathons to date. People are always asking for tips and tricks when organising their hackathons. Organisers are also wanting lists of resources and examples of other people's work.&lt;/p&gt;

&lt;p&gt;Instead of saying the same thing to every hackathon organiser, I thought I'd put something together to share with the world. Not only is it here to share with the world, I also created it so everyone can contribute to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hackathon-tips-tricks-and-resources"&gt;
  &lt;/a&gt;
  Hackathon Tips, Tricks, and Resources
&lt;/h2&gt;

&lt;p&gt;I present to you: &lt;a href="https://github.com/github/hackathons"&gt;Hackathon Tips, Tricks, and Resources&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/github"&gt;
        github
      &lt;/a&gt; / &lt;a href="https://github.com/github/hackathons"&gt;
        hackathons
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Tips, Tricks, and Resources for your hackathons.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/36594527/117592199-10730800-b17b-11eb-84f8-4ffcae8116d4.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MwJNKC1W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/36594527/117592199-10730800-b17b-11eb-84f8-4ffcae8116d4.png" alt="Hackathon Logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; JOIN A COMMUNITY CONNECTED BY CODE &lt;/p&gt;
&lt;p&gt;This repository contains Tips, Tricks, and Resources to help you plan, organise, and execute your hackathons. You can use these to help guide you when planning your next hackathon.&lt;/p&gt;
&lt;p&gt;There are three main sections to this repository:&lt;/p&gt;
&lt;p&gt;🔮 &lt;a href="https://github.com/github/hackathons/blob/main/TipsandTricks.md"&gt;Tips and Tricks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📚 &lt;a href="https://github.com/github/hackathons/blob/main/Resources.md"&gt;Resources&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;📣 &lt;a href="https://github.com/github/hackathons/discussions/1"&gt;Discussions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Guidelines are detailed below on how to contribute to each of these documents. If there are other issues you'd like to flag, please &lt;a href="https://github.com/github/hackathons/issues/new?assignees=MishManners&amp;amp;labels=&amp;amp;template=IssueFeatureBug.md&amp;amp;title=%3Azap%3A+Request+to+add+tip+or+trick+to+documentation+%3Abug%3A+"&gt;open an issue&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
Participating in a hackathon&lt;/h3&gt;
&lt;p&gt;Please note this repository is &lt;strong&gt;NOT&lt;/strong&gt; geared towards participants. This repository contains information useful to hackathon organisers and managers. It does not contain tips/tricks or resources for participating in a hackathon. If you are looking for a hackathon to participate in, you can check out the following sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mlh.io/" rel="nofollow"&gt;Major League Hacking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpost.com/" rel="nofollow"&gt;DevPost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hackathonsinternational.com/" rel="nofollow"&gt;Hackathons International&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackaday.com/" rel="nofollow"&gt;Hackaday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devfolio.co/hackathons" rel="nofollow"&gt;DevFolio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hackathons.hackclub.com/" rel="nofollow"&gt;Hack Club&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hackalist.org/" rel="nofollow"&gt;HackaList&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Organisers,&lt;/strong&gt; the above sites are great places where you…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/github/hackathons"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;This is an open source repository containing lots of information for organisers. This is a curated list based on my own experiences in running multiple hackathons. The repo is set up to take contributions from others. It also has &lt;a href="https://github.com/github/hackathons/discussions"&gt;Discussions&lt;/a&gt; enabled, meaning organisers can come together and discuss issues, ask questions, find more resources, and share their own experiences.&lt;/p&gt;

&lt;p&gt;I really wanted this resource to be available to everyone, but also welcoming of other people's feedback, thoughts, advice, and ideas. There are a lot of people out there with lots more experience so please feel free to share it around, make a pull request, or open a Discussion.&lt;/p&gt;

&lt;p&gt;This is for the community and I encourage you to join the repo, star it, head into the Discussions, and download the resources for your use. If you have any questions, thoughts, or feedback, drop them below or feel free to open a Discussion! &lt;/p&gt;

</description>
      <category>opensource</category>
      <category>hacktoberfest</category>
      <category>hackathon</category>
      <category>github</category>
    </item>
    <item>
      <title>How to set up a local PostgreSQL development server on MacOS</title>
      <author>Jon Webb</author>
      <pubDate>Mon, 24 May 2021 03:10:15 +0000</pubDate>
      <link>https://dev.to/joncodes/how-to-set-up-a-local-postgresql-development-server-on-macos-507k</link>
      <guid>https://dev.to/joncodes/how-to-set-up-a-local-postgresql-development-server-on-macos-507k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#homebrew"&gt;
  &lt;/a&gt;
  Homebrew
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt; is an extremely useful package manager for Mac. To check whether you have it installed, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output should start with a version number:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Homebrew 3.1.9
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If instead, you get &lt;code&gt;command not found&lt;/code&gt; or nothing, install it with the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;/bin/bash &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;curl &lt;span class="nt"&gt;-fsSL&lt;/span&gt; https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installing-raw-postgresql-endraw-"&gt;
  &lt;/a&gt;
  Installing &lt;code&gt;postgresql&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.postgresql.org"&gt;PostgreSQL&lt;/a&gt; is a popular, feature-rich, and open source relational database. To install it using Homebrew, use the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The command will create a default database cluster stored at &lt;code&gt;/usr/local/var/postgres&lt;/code&gt;. If for some reason the default database was not created, you can create it by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;initdb &lt;span class="nt"&gt;--locale&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C &lt;span class="nt"&gt;-E&lt;/span&gt; UTF-8 /usr/local/var/postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the default database already exists, it will not be overwritten, and you will get an error response &lt;code&gt;initdb: error: directory "/usr/local/var/postgres" exists but is not empty&lt;/code&gt;. As long as the default database is created you can proceed to the next step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-and-stopping-the-raw-postgresql-endraw-server"&gt;
  &lt;/a&gt;
  Starting and stopping the &lt;code&gt;postgresql&lt;/code&gt; server
&lt;/h2&gt;

&lt;p&gt;To start the database server, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pg_ctl &lt;span class="nt"&gt;-D&lt;/span&gt; /usr/local/var/postgres start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To stop it, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pg_ctl &lt;span class="nt"&gt;-D&lt;/span&gt; /usr/local/var/postgres stop
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-and-deleting-database"&gt;
  &lt;/a&gt;
  Creating and deleting database
&lt;/h2&gt;

&lt;p&gt;While the database server is running, run the following (replacing &lt;code&gt;YOUR_DATABASE_NAME&lt;/code&gt; with the desired database name):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;createdb YOUR_DATABASE_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly, to delete a database, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;dropdb YOUR_DATABASE_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-a-user-for-your-database"&gt;
  &lt;/a&gt;
  Creating a user for your database
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;postgresql&lt;/code&gt; installed via Homebrew creates a database user with the same name as the installing user, with no password. When creating a database using the &lt;code&gt;createdb&lt;/code&gt; command, that user will be automatically given privileges for the new database.&lt;/p&gt;

&lt;p&gt;When connecting to the database while developing our application, we will want to use a specific user account with a password, like we would in production.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;psql&lt;/code&gt; is a terminal front-end for PostgreSQL that you can use to execute queries to your database. To connect to your newly created database with &lt;code&gt;psql&lt;/code&gt; using the default account, run the following (replacing &lt;code&gt;YOUR_DATABASE_NAME&lt;/code&gt; with the actual name of your database):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;psql YOUR_DATABASE_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, within the &lt;code&gt;psql&lt;/code&gt; console, create a new user and grant it privileges to your database. Replace &lt;code&gt;YOUR_NEW_USERNAME&lt;/code&gt;, &lt;code&gt;YOUR_NEW_PASSWORD&lt;/code&gt; and &lt;code&gt;YOUR_DATABASE_NAME&lt;/code&gt; with the case-sensitive, relevant values. &lt;strong&gt;The semicolons are important&lt;/strong&gt;, as they terminate each query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;CREATE USER YOUR_NEW_USERNAME WITH PASSWORD &lt;span class="s1"&gt;'YOUR_NEW_PASSWORD'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;GRANT ALL PRIVILEGES ON DATABASE YOUR_DATABASE_NAME TO YOUR_NEW_USERNAME&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Type &lt;code&gt;\q&lt;/code&gt; and press &lt;code&gt;enter&lt;/code&gt; to exit the &lt;code&gt;psql&lt;/code&gt; console.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connecting-from-your-application"&gt;
  &lt;/a&gt;
  Connecting from your application
&lt;/h2&gt;

&lt;p&gt;You can now connect to the database from your application with the following parameters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;host: &lt;code&gt;localhost&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;port: &lt;code&gt;5432&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;database: the name of the database you created&lt;/li&gt;
&lt;li&gt;user: the username you created&lt;/li&gt;
&lt;li&gt;password: the password you set&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Or, using a connection string:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;postgresql://YOUR_NEW_USER:YOUR_NEW_PASSWORD@localhost:5432/YOUR_DATABASE_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>postgres</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Firefox and Chrome resolve any localhost domain (*.localhost) to loopback address</title>
      <author>Kamal Mustafa</author>
      <pubDate>Mon, 24 May 2021 03:01:43 +0000</pubDate>
      <link>https://dev.to/k4ml/firefox-and-chrome-resolve-any-localhost-domain-localhost-to-loopback-address-26d9</link>
      <guid>https://dev.to/k4ml/firefox-and-chrome-resolve-any-localhost-domain-localhost-to-loopback-address-26d9</guid>
      <description>&lt;p&gt;I was reading this &lt;a href="https://old.reddit.com/r/programming/comments/nj1all/how_to_get_https_working_on_localhost/gz5qvxm/"&gt;reddit's thread&lt;/a&gt; and this comment caught my interest:-&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Chrome and Firefox also consider "*.localhost" as secure so you can develop multiple websites with different service workers. They automatically resolve to "localhost" so it's very handy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I didn't know this and after trying myself on Firefox, that's turn out to be true. I checked my &lt;code&gt;/etc/hosts&lt;/code&gt; to make sure I didn't have the name defined that and also checked via &lt;code&gt;host&lt;/code&gt; command and &lt;code&gt;dig&lt;/code&gt; as well. Both returned domain not found result.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;host web01.localhost
Host web01.localhost not found: 3(NXDOMAIN)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So it pretty sure coming from Firefox itself. Firefox also has this pretty handy dns lookup tools (accessible via &lt;code&gt;about:networking#dns&lt;/code&gt;):-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--novJcpne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tc9nf75us2o5hjdfvy45.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--novJcpne--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tc9nf75us2o5hjdfvy45.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I can't find much information about this so why not just look directly in the source code? After some googling, I guess the networking portion for Firefox is under the directory called &lt;code&gt;netwerk&lt;/code&gt; and made my educated guess that the code could be in  &lt;code&gt;nsHostResolver.cpp&lt;/code&gt;. Then using browser's Find on page for "localhost", voila! The code looks like this:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// Check if we have a localhost domain, if so hardcode to loopback
    if (IS_ADDR_TYPE(type) &amp;amp;&amp;amp; IsLoopbackHostname(host)) {
      nsresult rv;
      RefPtr&amp;lt;nsHostRecord&amp;gt; result = InitLoopbackRecord(key, &amp;amp;rv);
      if (NS_WARN_IF(NS_FAILED(rv))) {
        return rv;
      }
      MOZ_ASSERT(result);
      aCallback-&amp;gt;OnResolveHostComplete(this, result, NS_OK);
      return NS_OK;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://github.com/mozilla/gecko-dev/blob/master/netwerk/dns/nsHostResolver.cpp#L1031"&gt;https://github.com/mozilla/gecko-dev/blob/master/netwerk/dns/nsHostResolver.cpp#L1031&lt;/a&gt;&lt;/p&gt;

</description>
      <category>firefox</category>
      <category>http</category>
      <category>dns</category>
    </item>
    <item>
      <title>A super-easy way to determine 'this' in JavaScript</title>
      <author>Kelvin</author>
      <pubDate>Mon, 24 May 2021 01:58:54 +0000</pubDate>
      <link>https://dev.to/kelvin0712/a-super-easy-way-to-determine-this-in-javascript-ob5</link>
      <guid>https://dev.to/kelvin0712/a-super-easy-way-to-determine-this-in-javascript-ob5</guid>
      <description>&lt;p&gt;&lt;code&gt;this&lt;/code&gt; is one of the fundamental concepts in JavaScript but it's also one of the most confusing concepts to wrap your head around as well. In this blog, I want to share with you the ways that I use to determine &lt;em&gt;what&lt;/em&gt; &lt;code&gt;this&lt;/code&gt; &lt;em&gt;is&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Before going to deep-dive into all the specific rules that can be applied to determine &lt;code&gt;this&lt;/code&gt;, you can remember an easy rule that can be true in &lt;strong&gt;most&lt;/strong&gt; (not all the time) &lt;strong&gt;cases&lt;/strong&gt;. This is how I remember it: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; bound to &lt;strong&gt;object&lt;/strong&gt; when the function is a &lt;strong&gt;method&lt;/strong&gt; of an object.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; bound to &lt;strong&gt;global object&lt;/strong&gt; or undefined when the function is &lt;strong&gt;not a method&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can try to think about these 2 rules when you are going through all the examples. &lt;/p&gt;

&lt;p&gt;Rules for binding &lt;code&gt;this&lt;/code&gt; : &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#default-binding"&gt;
  &lt;/a&gt;
  Default binding
&lt;/h3&gt;

&lt;p&gt;In this rule, we will consider the most common case when calling a function: &lt;em&gt;standalone function invocation&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;Consider this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// If we declare var in global scope =&amp;gt; there will be a property with the same name in the global object. &lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 2 =&amp;gt; Foo is called within the global scope &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example &lt;code&gt;foo&lt;/code&gt; is called within the global scope so &lt;code&gt;this&lt;/code&gt; will be binded to the global object. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this rule does not apply in &lt;code&gt;'use strict'&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-binding"&gt;
  &lt;/a&gt;
  Implicit binding
&lt;/h3&gt;

&lt;p&gt;Another rule is: does the call-site have a context object. &lt;/p&gt;

&lt;p&gt;Consider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So &lt;code&gt;foo&lt;/code&gt; is a method of &lt;code&gt;object&lt;/code&gt; then the &lt;em&gt;implicit binding&lt;/em&gt; rule says that &lt;code&gt;this&lt;/code&gt; should be binded to the &lt;code&gt;object&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;Only the top/last level object matters to the call-site (where the function is called):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="c1"&gt;// for stays in obj2 =&amp;gt; obj2 will be the call-site for foo&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Implicit lost&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whenever we pass our function as a callback function, we will lose the binding of &lt;code&gt;this&lt;/code&gt;, which usually means it fallbacks to the default binding (&lt;em&gt;global object&lt;/em&gt; or &lt;em&gt;undefined&lt;/em&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;oops, global&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// `a` also property on global object&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// "oops, global"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, foo is passed as a callback so &lt;code&gt;this&lt;/code&gt; will bound to the call-site where &lt;code&gt;setTimeout&lt;/code&gt; is called. &lt;/p&gt;

&lt;p&gt;Or:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// function reference/alias!&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;oops, global&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// `a` also property on global object&lt;/span&gt;

&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// "oops, global"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, &lt;code&gt;bar&lt;/code&gt; is pointing to the &lt;code&gt;foo&lt;/code&gt; function, so when we call &lt;code&gt;bar()&lt;/code&gt; the call-site will depend on where &lt;code&gt;bar&lt;/code&gt; is called, which is the global object in this example.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#explicit-binding"&gt;
  &lt;/a&gt;
  Explicit binding
&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;call&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Consider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The differences between these two are &lt;em&gt;**"C for comma, A for array"&lt;/em&gt;&lt;em&gt;,&lt;/em&gt;  which means that you can do:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Hard Binding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The implicit lost problem can be solved by doing this, called hard binding&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;

&lt;span class="c1"&gt;// `bar` hard binds `foo`'s `this` to `obj`&lt;/span&gt;
&lt;span class="c1"&gt;// so that it cannot be overriden&lt;/span&gt;
&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is such a common pattern, it's provided with built-in util in ES5: &lt;code&gt;Function.prototype.bind&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In ES6, functions provide an optional parameter called "context" which is a work-around for people not to use &lt;code&gt;bind()&lt;/code&gt; :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;awesome&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// use `obj` as `this` for `foo(..)` calls&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 1 awesome  2 awesome  3 awesome&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-new-endraw-binding"&gt;
  &lt;/a&gt;
  &lt;code&gt;new&lt;/code&gt; binding
&lt;/h3&gt;

&lt;p&gt;Consider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By calling &lt;code&gt;foo(..)&lt;/code&gt; with &lt;code&gt;new&lt;/code&gt; in front of it, we've constructed a new object and set that new object as the &lt;code&gt;this&lt;/code&gt; for the call of foo(..).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#determining-raw-this-endraw-"&gt;
  &lt;/a&gt;
  Determining &lt;code&gt;this&lt;/code&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Is the function called with &lt;code&gt;new&lt;/code&gt; (&lt;strong&gt;new binding&lt;/strong&gt;)? If so, &lt;code&gt;this&lt;/code&gt; is the newly constructed object.&lt;br&gt;
&lt;code&gt;var bar = new foo()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is the function called with &lt;code&gt;call&lt;/code&gt; or &lt;code&gt;apply&lt;/code&gt; (&lt;strong&gt;explicit binding&lt;/strong&gt;), even hidden inside a &lt;code&gt;bind&lt;/code&gt; &lt;em&gt;hard binding&lt;/em&gt;? If so, &lt;code&gt;this&lt;/code&gt; is the explicitly specified object.&lt;br&gt;
&lt;code&gt;var bar = foo.call( obj2 )&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is the function called with a context (&lt;strong&gt;implicit binding&lt;/strong&gt;), otherwise known as an owning or containing object? If so, &lt;code&gt;this&lt;/code&gt; is &lt;em&gt;that&lt;/em&gt; context object.&lt;br&gt;
&lt;code&gt;var bar = obj1.foo()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Otherwise, default the &lt;code&gt;this&lt;/code&gt; (&lt;strong&gt;default binding&lt;/strong&gt;). If in &lt;code&gt;strict mode&lt;/code&gt;, pick &lt;code&gt;undefined&lt;/code&gt;, otherwise pick the &lt;code&gt;global&lt;/code&gt; object.&lt;br&gt;
&lt;code&gt;var bar = foo()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#exceptions"&gt;
  &lt;/a&gt;
  Exceptions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ignore&lt;/strong&gt; &lt;code&gt;this&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If we pass &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; to &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;bind&lt;/code&gt; , those values are effectively ignored, and the &lt;em&gt;default binding&lt;/em&gt; rule will be applied here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: to be safe in case you want to bind this against the function call which comes from a library or a framework, and that function does make a &lt;code&gt;this&lt;/code&gt; reference. You can accidentally point &lt;code&gt;this&lt;/code&gt; to the &lt;em&gt;global object.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Safer&lt;/strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Instead of passing in a &lt;code&gt;null&lt;/code&gt; we can pass in an empty object by doing &lt;code&gt;Object.create(null)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You may wonder what the differences are between &lt;code&gt;{}&lt;/code&gt; and &lt;code&gt;Object.create(null)&lt;/code&gt;? &lt;/p&gt;

&lt;p&gt;&lt;code&gt;{}&lt;/code&gt;: has the &lt;code&gt;Object.prototype&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;Object.create(null)&lt;/code&gt; is really an empty object, it has nothing so it's considered to be cleaner. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Softening binding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So if you remember hard binding, it's not really flexible as it only points to the specified obj&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// this always bounds to obj&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There is another built-in utility that works similarly to &lt;code&gt;bind()&lt;/code&gt; called &lt;code&gt;softBind()&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The way I remember it is &lt;code&gt;softBind(obj)&lt;/code&gt; only fallbacks to the &lt;code&gt;obj&lt;/code&gt; if the &lt;em&gt;default&lt;/em&gt; &lt;code&gt;this&lt;/code&gt; is &lt;em&gt;global object.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Let's see the usage of &lt;code&gt;softBind()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;obj&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;obj2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;obj3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;obj3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;fooOBJ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;softBind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;fooOBJ&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// name: obj&lt;/span&gt;

&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;softBind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// name: obj2   &amp;lt;---- look!!!&lt;/span&gt;

&lt;span class="nx"&gt;fooOBJ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;obj3&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// name: obj3   &amp;lt;---- look!&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// name: obj   &amp;lt;---- falls back to soft-binding&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Lexical&lt;/strong&gt; &lt;code&gt;this&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Consider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// `this` here is lexically adopted from `foo()`&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 2 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you are using the &lt;em&gt;arrow function,&lt;/em&gt; that function will bound to whatever &lt;code&gt;foo&lt;/code&gt;'s &lt;code&gt;this&lt;/code&gt; is at its call-time. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;There are 4 rules to determine this: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;new&lt;/code&gt;? Use the newly constructed object&lt;/li&gt;
&lt;li&gt;Using &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;apply&lt;/code&gt;, &lt;code&gt;bind&lt;/code&gt;? Use the specified object&lt;/li&gt;
&lt;li&gt;Method of an object? Use that object&lt;/li&gt;
&lt;li&gt;Default: global object and undefined in strict mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In most cases, you can just remember: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; bound to &lt;strong&gt;object&lt;/strong&gt; when the function is a &lt;strong&gt;method&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;this&lt;/code&gt; bound to &lt;strong&gt;global object&lt;/strong&gt; or undefined when the function is &lt;strong&gt;not a method&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;P/s: If you want to read more post about JavaScript or React, please visit my website: &lt;a href="https://kelvinnguyen97.com/blog"&gt;https://kelvinnguyen97.com/blog&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>PACT, the way to code</title>
      <author>Diego Vallejo</author>
      <pubDate>Mon, 24 May 2021 01:50:16 +0000</pubDate>
      <link>https://dev.to/destructor1702/pact-the-way-to-code-4hdg</link>
      <guid>https://dev.to/destructor1702/pact-the-way-to-code-4hdg</guid>
      <description>&lt;p&gt;Hello Developers! Many of us use various design patterns with React Development to make React Apps more clean, clearly understandable, and more structured. But still we are facing issues with coding standards, we changed at one place and it breaks at another place. Is there any resolution for this? Yes, there is. PACT is a tool that allows you to create contract between various components of your app that tell you which components are compatible with each other. It can help you create a consistent structure in your React Apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is PACT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PACT stands for Prettier Acceptance Criteria Templates. It is a tool for creating pre-commit tests to enforce a consistent code style. PACT takes your current code style and compares it to the desired style. If your code matches, the test passes and your commit is accepted. If it doesn’t match, the test fails and your commit is rejected.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does it work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PACT is a tool that can be used to enforce a consistent code style. It takes your current code style and compares it to the desired style. If your code matches, the test passes and your commit is accepted. If it doesn’t match, the test fails and your commit is rejected.&lt;/p&gt;

&lt;p&gt;For example, in a pre-commit hook, you could specify a config file with an array of rules that your project should follow and a command for checking if your code is compliant with those rules:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;
    &lt;span class="na"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Use double quotes instead of single&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;matcher&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;source.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lineRange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;var x = 'foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; , }, { 
    rule: {
        "error": false,
        "message": "Use one space after function/array bracket",
        "matcher": "source.js",
        "lineRange": [4, 4]
    },
    input: "var x = function() {}, foo[",
}, {
    rule: {
        "error": true,
        "message": "Use two spaces after function/array bracket",
        "matcher": "source.js",
        "lineRange": [6, 6]
    },
    input: "foo[] = &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;",
}]

var check = require ( &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;preact&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;pact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; ).commands.check ; 
var pact = require ( &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="nx"&gt;preact&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;pact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; ); 
check(pact( config )).run();
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The whole thing is wrapped in a function that takes a configuration file and returns the promise that resolves to an array of errors that would be returned by the check command.&lt;/p&gt;

&lt;p&gt;The input and matcher properties of each rule tell Weasel what range of code to check for compliance. Since Weasel is using source-map’s precise mappings, it’s possible to check specific lines or ranges of lines.&lt;/p&gt;

&lt;p&gt;The check command looks for each rule in the config file and runs the command specified in the command property.&lt;/p&gt;

&lt;p&gt;PACT can be used with any editor, but we will use VSCode as our example.&lt;/p&gt;

&lt;p&gt;Install PACT via npm.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install pact-cli --global&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;Create a pact file for the folder where you want to enforce the code style. For this example, let’s create a pact file for the app root.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pact create &amp;lt;app-name&amp;gt;&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;This will create a pact file with the name .js .&lt;/p&gt;

&lt;p&gt;Add some rules to the pact file.&lt;/p&gt;

&lt;p&gt;This pact file will have a single rule for the whole app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;indent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;spaces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 2 spaces per indent level &lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Indentation should be 2 spaces per indent level.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To run the pact, you need to npm install the project and then run the pact test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install
npm run pact
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The pact test will run and return a green check if it passes. In our case, it will return a red “x” because we haven’t added our rules into our app yet.&lt;/p&gt;

&lt;p&gt;We can also add a pact test to enforce the code style for a file.&lt;/p&gt;

&lt;p&gt;Add the following at the top of our index.js file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;indent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;spaces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 2 spaces per indent level }, message: 'Indentation should be 2 spaces per indent level.' &lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when we run the pact test, it will return a green check because the file already matches the code style.&lt;/p&gt;

&lt;p&gt;If you want to enforce the code style for an individual file, you can add it to the pact file and run the test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;indent&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;spaces&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 2 spaces per indent level }, message: 'Indentation should be 2 spaces per indent level.',&lt;/span&gt;
                &lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, when you run the test, it will return a red “x” again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why we should use PACT?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;PACT is a good tool that offers many advantages. But the main advantage is that it allows you to build a consistent React App. It is a very good tool for enforcing a consistent project structure, code style, and workflow. This is why PACT should be used in modern React App Development.&lt;/p&gt;

&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;PACT is a tool for enforcing a consistent code style across a project. It can help you create a consistent structure in your React Apps.It is a very good tool for enforcing a consistent project structure, code style, and workflow. This is why PACT should be used in modern React App Development.&lt;/p&gt;

&lt;p&gt;Hope you like it. Share your feedback in the comment section below.&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
