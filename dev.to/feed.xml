<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Learn How to Convert: Text to Handwriting, Handwriting to Text, Text to Speech &amp; Speech to Text</title>
      <author>Konchada Sai Ansul</author>
      <pubDate>Mon, 10 May 2021 13:28:59 +0000</pubDate>
      <link>https://dev.to/saiansulsblog/learn-how-to-convert-text-to-handwriting-handwriting-to-text-text-to-speech-speech-to-text-1pk9</link>
      <guid>https://dev.to/saiansulsblog/learn-how-to-convert-text-to-handwriting-handwriting-to-text-text-to-speech-speech-to-text-1pk9</guid>
      <description>&lt;p&gt;Hello Guys, Welcome back to another post of Sai Ansul's Blog. In this blog we are gonna learn &lt;br&gt;
How to Convert: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text to Handwriting,&lt;/li&gt;
&lt;li&gt;Handwriting to Text, &lt;/li&gt;
&lt;li&gt;Text to Speech ,&lt;/li&gt;
&lt;li&gt;Speech to Text.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So let's start, &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-text-to-handwriting"&gt;
  &lt;/a&gt;
  1. Text to Handwriting
&lt;/h2&gt;

&lt;p&gt;Since in this pandemic period we students has got plenty of assignments to be done. isn't it?&lt;br&gt;
So, I have got you a very easy and interesting way to submit those assignments in just seconds.&lt;br&gt;
Wanna know how?&lt;/p&gt;

&lt;p&gt;So firstly open this &lt;a href="https://saurabhdaware.github.io/text-to-handwriting/#how-to-add-handwriting"&gt;link&lt;/a&gt; . &lt;br&gt;&lt;br&gt;
After you open it you will see a interface like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dsjlF3zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616158822277/lHK0HENbU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dsjlF3zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616158822277/lHK0HENbU.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Where you can replace the text of the input image with yours and see the magic.&lt;br&gt;&lt;br&gt;
There are some customizations also available over there like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Handwriting font&lt;/li&gt;
&lt;li&gt;Font size&lt;/li&gt;
&lt;li&gt;Ink color&lt;/li&gt;
&lt;li&gt;Effects&lt;/li&gt;
&lt;li&gt;Resolution&lt;/li&gt;
&lt;li&gt;Spacing options &lt;/li&gt;
&lt;li&gt;Margin options &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And after customizing you need to click on &lt;strong&gt;Generate Image&lt;/strong&gt; , the image will be generated and then you can download the image and use it. You can also generate multiple images at a time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft0K65xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616159473575/3TKPWysvm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ft0K65xp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616159473575/3TKPWysvm.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-handwriting-to-text"&gt;
  &lt;/a&gt;
  2. Handwriting to Text
&lt;/h2&gt;

&lt;p&gt;This conversion is popularly known as OCR- Optical Character Recognition.&lt;/p&gt;

&lt;p&gt;There are many sites and apps this feature is available to extract the text in many languages.&lt;br&gt;
This feature is also available in many document scanners.&lt;/p&gt;

&lt;p&gt;The best 5 online sites that I like the most for OCR are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.onlineocr.net/"&gt;OnlineOCR.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://convertio.co/ocr/"&gt;Convertio&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.newocr.com/"&gt;NewOCR.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://finereaderonline.com/en-us"&gt;ABBYY FineReader Online.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.i2ocr.com/"&gt;i2OCR.&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The document scanners that has OCR are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://play.google.com/store/apps/details?id=com.cv.docscanner"&gt;Doc Scanner &lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://play.google.com/store/apps/details?id=in.insomniactech.proscanner"&gt;Cam Scanner Indian&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://play.google.com/store/apps/details?id=com.adobe.scan.android"&gt;Adobe Scan&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJRUQfg---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616162740694/RGRTjx6Ry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJRUQfg---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616162740694/RGRTjx6Ry.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can upload the document and select the language that document's text has.&lt;/p&gt;

&lt;p&gt;And the magic happens after the conversion is completed, the document which will be generated and you will be select the text and use anywhere. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-text-to-speech"&gt;
  &lt;/a&gt;
  3. Text to Speech
&lt;/h2&gt;

&lt;p&gt;This conversion is known as TTS- Text to Speech Synthesizer.&lt;/p&gt;

&lt;p&gt;This feature is also available in adobe pdf viewer also&lt;/p&gt;

&lt;p&gt;The top 3 online sites for these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="http://www.cross-plus-a.com/balabolka.htm"&gt;Balabolka&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.naturalreaders.com/"&gt;Natural reader online reader&lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://cloud.google.com/text-to-speech"&gt;Google Cloud Text-to-Speech&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MoUTdHFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616164322882/f4ALQmESp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MoUTdHFv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616164322882/f4ALQmESp.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the image you can upload files with various extensions and it will convert to mp3 audio file which you can download and hear anywhere.&lt;/p&gt;

&lt;p&gt;If you have noticed some time ago  &lt;a href="https://hashnode.com/"&gt;Hashnode&lt;/a&gt;  has also launched a feature named audio blog that also use the technology.&lt;/p&gt;

&lt;p&gt;This also has many customizations like in voices, speed and many more.&lt;/p&gt;

&lt;p&gt;Go check it out&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-speech-to-text"&gt;
  &lt;/a&gt;
  4. Speech to Text
&lt;/h2&gt;

&lt;p&gt;Speech to text conversion is the process of converting spoken words into written texts.&lt;/p&gt;

&lt;p&gt;Rather than typing long documents and making your hands pain  you just need to read out it once.&lt;/p&gt;

&lt;p&gt;This process is also often called speech recognition.&lt;/p&gt;

&lt;p&gt;The top 3 online sites for these are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://www.google.com/docs/about/"&gt;Google Docs Voice Typing.&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.nuance.com/dragon.html"&gt; Dragon Professional Individual. &lt;/a&gt; &lt;/li&gt;
&lt;li&gt; &lt;a href="https://www.brainasoft.com/braina/speech-to-text.html"&gt;Braina Pro&lt;/a&gt; .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r4aLin8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616165744202/jBr2odDDn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r4aLin8S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1616165744202/jBr2odDDn.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the conversion the txt file will be generated and you can use it anywhere.&lt;/p&gt;

&lt;p&gt;This is it for today guys. If you liked this blog and want to support my efforts, do share it with as many friends as possible. And feel free to drop in suggestions for improvements.&lt;/p&gt;

&lt;p&gt;If you liked this blog and want to support my efforts, do share it with as many friends as possible. And feel free to drop in suggestions for improvements.&lt;/p&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>Basics of Java #12</title>
      <author>Chathu Rashmini</author>
      <pubDate>Mon, 10 May 2021 13:04:52 +0000</pubDate>
      <link>https://dev.to/chathurashmini/basics-of-java-12-4gnc</link>
      <guid>https://dev.to/chathurashmini/basics-of-java-12-4gnc</guid>
      <description>&lt;p&gt;This article is on switch statements and loops.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#switch-statement"&gt;
  &lt;/a&gt;
  Switch statement
&lt;/h1&gt;

&lt;p&gt;Assume you have built a website and a user is trying to log into it. You are asking the user to enter his email. Then you are checking whether that email is stored in your database and if so you are fetching his user role (admin, blog writer, reader). If mail is not found the user is a guest. After that you want to print this user roles. To implement this you can easily use switch statements.&lt;br&gt;
Look at the code block given below (Assume you have already fetched the user role from the database into a String variable named &lt;code&gt;userole&lt;/code&gt;).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;userRole&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"admin"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi you are an admin"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"blog writer"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi you are a blog writer"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;"reader"&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi you are a reader"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hi you are a guest. Please register to log in."&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In here the first case checks whether the value of the &lt;code&gt;userRole&lt;/code&gt; is 'admin'. If so it will print "Hi you are an admin". You can see that I have added &lt;code&gt;break&lt;/code&gt; after the print statement. What &lt;code&gt;break&lt;/code&gt; does is that going out of the switch statements. Which means once a particular case is achieved, no other cases will be evaluated. You will simply go out of the switch block. Same process goes to the cases 'blog writer' and 'reader'.&lt;br&gt;
Next comes the case where you were unable to find the email in the database. Therefore that email does not have a &lt;code&gt;userRole&lt;/code&gt; yet. SO by &lt;code&gt;default&lt;/code&gt; the last case will print the 'guest' statement. There we have not used &lt;code&gt;break&lt;/code&gt;. This is because, &lt;code&gt;default&lt;/code&gt; is the last case in the switch block. So it will automatically go out of the switch block. No &lt;code&gt;break&lt;/code&gt; statement is required here. This might be a bit messy to understand but once you get used to it applying switch statements will become handy.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#loops"&gt;
  &lt;/a&gt;
  Loops
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#for-loop"&gt;
  &lt;/a&gt;
  for Loop
&lt;/h2&gt;

&lt;p&gt;Think that you want to print numbers from 1 to 5. Then you will think that you have to write &lt;code&gt;pritln()&lt;/code&gt; line 5 times. But what if you have an opportunity to write just one &lt;code&gt;println()&lt;/code&gt; and iterate it 5 times? Sounds great right. Let's see how we can do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's evaluate the code. We have use iterations here by using a 'for loop'. As you can see I have declared a variable &lt;code&gt;i&lt;/code&gt; inside the parenthesis of the &lt;code&gt;for()&lt;/code&gt;. After that we have give the range for 'i'. Here we want to print numbers from 1 to 5. Therefore &lt;code&gt;i&lt;/code&gt; has to be iterated from 1 to 5. So I have mentioned as &lt;code&gt;i = 1&lt;/code&gt; and after a semi colon (;) I have stated that &lt;code&gt;i &amp;lt;= 5&lt;/code&gt;. This means &lt;code&gt;i&lt;/code&gt; goes from 1 to 5. You also can write it as &lt;code&gt;for (int i = 1; i &amp;lt; 6; i++)&lt;/code&gt;. Here also you can get same output. Inside 'for()' loop you have to write the code lines that has to be executed. Here since we are only writing a single code line, we need not to use curly braces.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For loops are used in situations where the number of the iterations are known before hand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Given an array, books = {"Twilight", "New moon", "Eclipse", "Breaking dawn", "Safe Heaven", "Kite Runner", "Hunger Games"} print all its elements using a for loop.&lt;/p&gt;

&lt;p&gt;How did you code the above task? Let me guess. I assume that, you entered a range in a for loop like (int i=0; i&amp;lt;7; i++) and print the elements by calling the index. However, there is an easier way of doing the same task. Check out this code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"Twilight"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"New moon"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Eclipse"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Breaking dawn"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Safe Heaven"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Kite Runner"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Hunger Games"&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;book&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;books&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;book&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the string &lt;code&gt;book&lt;/code&gt; in the parenthesis refers to a single element in the array &lt;code&gt;books&lt;/code&gt;. Therefore, this will print all the elements in the &lt;code&gt;books&lt;/code&gt; array accurately. The negative side of this method is that you can only iterate from beginning to the end. Like you cannot get the output as Hunger Games, Kite Runner, ... Twilight (from right to left) order. And also since you do not have access to index, you won't be able to know the index value of a particular element when you use this method.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#while-loop"&gt;
  &lt;/a&gt;
  While Loop
&lt;/h1&gt;

&lt;p&gt;What if you do not know the number of the iterations beforehand? Then you can use 'while loop'. Check the below code;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code we first declared an integer variable &lt;code&gt;i&lt;/code&gt; and initialized it into zero. The code line &lt;code&gt;while(i&amp;lt;10)&lt;/code&gt; ensures that the value of &lt;code&gt;i&lt;/code&gt; is always less than 10. Which means the code inside the &lt;code&gt;while()&lt;/code&gt; loop will only execute if the &lt;code&gt;i&lt;/code&gt; is less than 10. Then we print &lt;code&gt;i&lt;/code&gt; and increment it by one.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;While loops can be used in conditions where you does not know the number of iterations beforehand.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Assume in a case where you want user to add subject names, but you do not know number of subjects that are available. What can you do in such a scenario? You have to use a 'while loop' as you do not know the number of iterations here. You can ask the user to enter some word like 'quit' or 'finish', if he has entered all the subjects. Then you can make the loop run only when the input word is not equal to the termination word. Go through the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Scanner&lt;/span&gt; &lt;span class="n"&gt;userInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Scanner&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"quit"&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Subject: "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;userInput&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextLine&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;toLowerCase&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;subjectCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Number of subjects = "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;subjectCount&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In above code we have taken user input as a &lt;code&gt;Scanner&lt;/code&gt; class object, and then has read the line and has stored into the string &lt;code&gt;input&lt;/code&gt;. Here you can see that I have used the method &lt;code&gt;toLowerCase()&lt;/code&gt;. Why do we need that? Look at the condition inside the parenthesis of the while loop. What it means that the value stored in &lt;code&gt;input&lt;/code&gt; string &lt;em&gt;cannot&lt;/em&gt; be equal to 'quit'. All the letters in 'quit' is in lowercase. Therefore, if user entered like 'Quit' or 'QUIT' the loop will not terminate. So to avoid those disconcerts we have to convert the user input into lowercase.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-while-loops"&gt;
  &lt;/a&gt;
  do while loops
&lt;/h2&gt;

&lt;p&gt;There is only one deference in 'do-while' loop when compared to 'while' loops. In while loop, statements will execute if and only if the condition given in the loop is true. But in 'do-while' loops statements gets executed once before checking the conditions given for the loop. Check the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, first &lt;code&gt;println()&lt;/code&gt; method gets executed and print '0'. After that it will increment it value to 1. Then only the condition in while loop is taken under consideration. Because of this we can say that 'do-while' loops will definitely execute 'at least' only once.&lt;/p&gt;

&lt;p&gt;And with that we can wrap up this article :)&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>PHP vs Javascript - What should you choose?</title>
      <author>hrishikesh1990</author>
      <pubDate>Mon, 10 May 2021 12:43:23 +0000</pubDate>
      <link>https://dev.to/hrishikesh1990/php-vs-javascript-what-should-you-choose-5ob</link>
      <guid>https://dev.to/hrishikesh1990/php-vs-javascript-what-should-you-choose-5ob</guid>
      <description>&lt;p&gt;In this short tutorial, we take a closer look at a controversial topic that is PHP vs JavaScript. We look at their pros and cons and weigh them against each other. &lt;/p&gt;

&lt;p&gt;This tutorial is a part of our initiative at Flexiple, to write short curated tutorials around often used or interesting concepts. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;PHP vs JavaScript: An Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#javascript"&gt;JavaScript - Pros and Cons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#PHP"&gt;PHP - Pros and Cons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#thoughts"&gt;Closing thoughts - PHP vs JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#php-vs-javascript-an-overview"&gt;
  &lt;/a&gt;
  PHP vs JavaScript: An Overview&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Most blogs under this topic would mention that comparing PHP and JavaScripts are like comparing apples and oranges. However, the rationale supporting this is - PHP is used on the server-side, whereas JavaScript is primarily used on the client-side. Although javascript is largely used on the client-side, the development of NodeJS (A backend framework) has made javascript a full-stack programming language.&lt;/p&gt;

&lt;p&gt;Even though this does not level the playing field it does beg the question of whether a developer should choose - JavaScript/ PHP or developer the entire website using Javascript. And this blog is aimed towards answering this question.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-pros-and-cons"&gt;
  &lt;/a&gt;
  JavaScript - Pros and Cons&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;JavaScript has been around for ages since 1995, this has not only allowed the creators to refine the language but has also helped grow a large community of active users. In turn, resulting in a plethora of well-documented tutorials and troubleshooting methods readily available on the internet.&lt;/p&gt;

&lt;p&gt;JavaScript as a language was developed to create dynamic and interactive websites improving the user experience. Catering to the client-side it was built to have minimal server interaction, reducing the load on the server. And because of this high-performance Javascript is often used on one-page websites and streaming platforms. The pros of Javascript don't stop here, the introduction of frameworks such as ReactJS, AngularJS, VueJS, NodeJS, etc has made it an extensible language. And with each framework offering different functionality and performance developers are quick to adopt them.&lt;/p&gt;

&lt;p&gt;This leads us to our first con, given its vast usage the learning curve can be quite intimidating, and with each framework offering a different syntax it would require significant dedication and practice to master them. However, the returns on doing so are quite significant and in case you are looking to enter mobile development, javascript is the way forward. Another major con when it comes to using Javascript is security. With the source code easily visible to anyone, it has become a major concern. There are ways for you to enhance security but these methods would require additional effort.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#php-pros-and-cons"&gt;
  &lt;/a&gt;
  PHP - Pros and Cons &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;PHP is a general-purpose language that has also been around since 1995. Similar to Javascript, PHP also has a large active community and was built to suit web development. And since PHP has always cantered to backend development it has a rich library and support to more features and much better security than javascript&lt;/p&gt;

&lt;p&gt;Areas, where PHP stands out, are its seamless performance with Content Management Systems like Word press, Drupal, etc. This is why PHP is commonly used in blogs, Media, and E-commerce websites.  Another pro is its compatibility with serves like SQL, MariaDB, Postgresql, etc. The only con I have faced while using PHP has been its performance - Unlike Javascript, PHP is synchronous and this makes it lose out on speed and performance. &lt;/p&gt;

&lt;p&gt;When it comes to the learning curve, PHP is significantly easier. Tasks such as setting up a server are quite simple, and the frameworks as well can be easily learned without many prerequisites. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#closing-thoughts-php-vs-javascript"&gt;
  &lt;/a&gt;
  Closing thoughts - PHP vs JavaScript&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If you have reached it this far you must be aware of the pros and cons of each language. And it must be quite evident that choosing between the two would boil to the use-case and the developers' knowledge of the languages. My personal choice would be to chose JavaScript/ PHP while working on complicated websites as this would allow you to get the best of both halves. A few famous websites that utilize this are - Wikipedia, Facebook, Yahoo, etc. &lt;/p&gt;

&lt;p&gt;However, if you are competent in Javascript and looking to build a smaller one-page or streaming website - hands down javascript all the way.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>php</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>17 - Bridge</title>
      <author>Mangirdas Kazlauskas 🚀</author>
      <pubDate>Mon, 10 May 2021 12:37:29 +0000</pubDate>
      <link>https://dev.to/mkobuolys/17-bridge-4hbl</link>
      <guid>https://dev.to/mkobuolys/17-bridge-4hbl</guid>
      <description>&lt;p&gt;In the last article, I have analysed a structural design pattern that provides a way of changing the skin of an object without changing its guts — Decorator. In this article, I would like to analyse and implement another structural design pattern that tends to be relatively difficult to understand compared to the other design patterns, but at the same time is practical and useful — it is Bridge.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What is the Bridge design pattern?&lt;/li&gt;
&lt;li&gt;Analysis&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Your Contribution&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-bridge-design-pattern"&gt;
  &lt;/a&gt;
  What is the Bridge design pattern?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4j1xCIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9sdbdensbx2pn9b4hwu4.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4j1xCIO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9sdbdensbx2pn9b4hwu4.jpeg" alt="Dog Jumping Over A Bridge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bridge&lt;/strong&gt;, also known as &lt;strong&gt;Handle/Body&lt;/strong&gt;, belongs to the category of structural design patterns. The intention of this design pattern is described in the &lt;a href="https://en.wikipedia.org/wiki/Design_Patterns"&gt;GoF book&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Decouple an abstraction from its implementation so that the two can vary independently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The usual way for an abstraction to have one of several possible implementations is to use inheritance — an abstraction defines the interface while concrete subclasses implement it in different ways. However, this approach is not very flexible since it binds the implementation to abstraction at compile-time and makes it impossible to change the implementation at run-time. What if we want the implementation to be selected and exchanged at run-time?&lt;/p&gt;

&lt;p&gt;The Bridge design pattern separates an abstraction from its implementation so that the two can vary independently from each other. In this case, the abstraction uses another abstraction as its implementation instead of using the implementation directly. This relationship between an abstraction and its implementation (well, another abstraction, to be more specific) is called a &lt;em&gt;bridge — it bridges the abstraction and its implementation, letting them vary independently&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If the &lt;em&gt;Abstraction&lt;/em&gt; and &lt;em&gt;Implementation&lt;/em&gt; terms sound too academic to you, imagine this: abstraction (or interface) is just a high-level layer for some particular entity. This layer is just an interface that is not supposed to do any real work on its own — it should delegate the work to the implementation layer. A good example of this is a GUI (graphical user interface) and OS (operating system). GUI is just a top-level layer for the user to communicate with the operating system, but it does not do any real work by itself — it just passes user commands (events) to the platform. And what is important about this, both GUI and OS could be extended separately from each other, e.g. a desktop application could have different views/panels/dashboards and at the same time support several APIs (could be run on Windows, Linux and macOS) — these two parts could vary independently. Sounds like a Bridge design pattern, right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analysis"&gt;
  &lt;/a&gt;
  Analysis
&lt;/h2&gt;

&lt;p&gt;The general structure of the Bridge design pattern looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j9K3CyPo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7i3azdqkfri2vesba6u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j9K3CyPo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l7i3azdqkfri2vesba6u.png" alt="Bridge Class Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Abstraction&lt;/em&gt; — defines an interface for the abstraction and maintains a reference to an object of type &lt;em&gt;Implementation&lt;/em&gt;;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Refined abstraction&lt;/em&gt; — implements the &lt;em&gt;Abstraction&lt;/em&gt; interface and provides different variants of control logic;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Implementation&lt;/em&gt; — defines an interface for the implementation classes. An &lt;em&gt;Abstraction&lt;/em&gt; can only communicate with an &lt;em&gt;Implementation&lt;/em&gt; object via methods that are declared there;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Concrete implementations&lt;/em&gt; — implement the &lt;em&gt;Implementation&lt;/em&gt; interface and contain platform-specific code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#applicability"&gt;
  &lt;/a&gt;
  Applicability
&lt;/h3&gt;

&lt;p&gt;The Bridge design pattern should be used when you want to divide a monolithic class with several functionality variants. In this case, the pattern allows splitting the class into several class hierarchies which could be changed independently — it simplifies code maintenance, smaller classes minimizes the risk of breaking existing code. A good example of this approach is when you want to use several different approaches in the persistence layer e.g. both database and file system persistence.&lt;/p&gt;

&lt;p&gt;The bridge design pattern should also be used when both the abstractions and their implementations should be extensible by subclassing — the pattern allows combining different abstractions and implementation and extending them independently.&lt;/p&gt;

&lt;p&gt;Finally, the bridge design pattern is a lifesaver when you need to be able to switch implementations at run-time. The pattern lets you replace the implementation object inside the abstraction — you can inject it via the constructor or just assign it as a new value to a field/property.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KxzazD4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j74tn1j5byunyxig11pt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KxzazD4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j74tn1j5byunyxig11pt.gif" alt="Let's Get To Work"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will implement the persistence layer for our example using the Bridge design pattern for the implementation part.&lt;/p&gt;

&lt;p&gt;Let’s say your application uses the external SQL database (not the local SQLite option in your device, but the cloud one). Everything is fine until the wild connection problems appear. In this case, there are two options: you are not allowing users to use the application and provide a funny &lt;em&gt;connection lost&lt;/em&gt; screen or you can store the data in some kind of local storage and synchronise the data later when the connection is up again. Obviously, the second approach is more user friendly, but how to implement it?&lt;/p&gt;

&lt;p&gt;In the persistence layer, there are multiple repositories for each entity type. The repositories share a common interface — that is our abstraction. If you want to change the storage type (to use the local or cloud one) at run-time, these repositories could not reference the specific implementation of the storage, they should use some kind of abstraction shared between different types of storages. Well, we can build another abstraction (interface) on top of that which is then implemented by the specific storages. Now we connect our repositories’ abstraction with the storages’ interface — &lt;em&gt;voilà&lt;/em&gt;, that is how the Bridge design pattern is introduced into our application! Let’s check the class diagram first and then investigate some implementation details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#class-diagram"&gt;
  &lt;/a&gt;
  Class diagram
&lt;/h3&gt;

&lt;p&gt;The class diagram below shows the implementation of the Bridge design pattern:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lKBZOOce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fab7658k8xok7xkmv1ti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lKBZOOce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fab7658k8xok7xkmv1ti.png" alt="Bridge Implementation Class Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;EntityBase&lt;/em&gt; is an abstract class that is used as a base class for all the entity classes. The class contains an id property and a named constructor &lt;em&gt;EntityBase.fromJson&lt;/em&gt; to map the JSON object to the class field.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Customer&lt;/em&gt; and &lt;em&gt;Order&lt;/em&gt; are concrete entities that extend the abstract class &lt;em&gt;EntityBase&lt;/em&gt;. &lt;em&gt;Customer&lt;/em&gt; class contains &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;email&lt;/em&gt; properties, &lt;em&gt;Customer.fromJson&lt;/em&gt; named constructor to map the JSON object to class fields and a &lt;em&gt;toJson()&lt;/em&gt; method to map class fields to the corresponding JSON map object. &lt;em&gt;Order&lt;/em&gt; class contain &lt;em&gt;dishes&lt;/em&gt; (a list of dishes of that order) and &lt;em&gt;total&lt;/em&gt; fields, a named constructor &lt;em&gt;Order.fromJson&lt;/em&gt; and a &lt;em&gt;toJson()&lt;/em&gt; method respectively.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;IRepository&lt;/em&gt; is an abstract class that is used as an interface for the repositories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;getAll()&lt;/em&gt; — returns all records from the repository;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;save()&lt;/em&gt; — saves an entity of type &lt;em&gt;EntityBase&lt;/em&gt; in the repository.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;CustomersRepository&lt;/em&gt; and &lt;em&gt;OrdersRepository&lt;/em&gt; are concrete repository classes that extend the abstract class &lt;em&gt;IRepository&lt;/em&gt; and implement its abstract methods. Also, these classes contain a storage property of type &lt;em&gt;IStorage&lt;/em&gt; which is injected into the repository via the constructor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;IStorage&lt;/em&gt; is an abstract class that is used as an interface for the storages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;getTitle()&lt;/em&gt; — returns the title of the storage. The method is used in UI;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;fetchAll()&lt;/em&gt; — returns all the records of type &lt;em&gt;T&lt;/em&gt; from the storage;&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;store()&lt;/em&gt; — stores a record of type &lt;em&gt;T&lt;/em&gt; in the storage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;FileStorage&lt;/em&gt; and &lt;em&gt;SqlStorage&lt;/em&gt; are concrete storage classes that extend the abstract class &lt;em&gt;IStorage&lt;/em&gt; and implement its abstract methods. Additionally, &lt;em&gt;FileStorage&lt;/em&gt; class uses the &lt;em&gt;JsonHelper&lt;/em&gt; class and its static methods to serialise/deserialise JSON objects.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;BridgeExample&lt;/em&gt; initialises and contains both — customer and order — repositories which are used to retrieve the corresponding data. Additionally, the storage type of these repositories could be changed between the &lt;em&gt;FileStorage&lt;/em&gt; and &lt;em&gt;SqlStorage&lt;/em&gt; separately and at the run-time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#entitybase"&gt;
  &lt;/a&gt;
  EntityBase
&lt;/h3&gt;

&lt;p&gt;An abstract class that stores the &lt;em&gt;id&lt;/em&gt; field and is extended by all of the entity classes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uHpkdfot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ctithg6qsvy4crpji5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uHpkdfot--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ctithg6qsvy4crpji5x.png" alt="entity_base.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customer"&gt;
  &lt;/a&gt;
  Customer
&lt;/h3&gt;

&lt;p&gt;A simple class to store information about the customer: its &lt;em&gt;name&lt;/em&gt; and &lt;em&gt;email&lt;/em&gt;. Also, the constructor generates random values when initialising the &lt;em&gt;Customer&lt;/em&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--949Ad3q6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9dfjz15h1obza39kox3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--949Ad3q6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u9dfjz15h1obza39kox3.png" alt="customer.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#order"&gt;
  &lt;/a&gt;
  Order
&lt;/h3&gt;

&lt;p&gt;A simple class to store information about the order: a list of &lt;em&gt;dishes&lt;/em&gt; it contains and the &lt;em&gt;total&lt;/em&gt; price of the order. Also, the constructor generates random values when initialising the &lt;em&gt;Order&lt;/em&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_c9XPJV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yholfukqsrlthmvc2er2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_c9XPJV_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yholfukqsrlthmvc2er2.png" alt="order.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jsonhelper"&gt;
  &lt;/a&gt;
  JsonHelper
&lt;/h3&gt;

&lt;p&gt;A helper classes used by the &lt;em&gt;FileStorage&lt;/em&gt; to serialise objects of type &lt;em&gt;EntityBase&lt;/em&gt; to JSON map objects and deserialise them from the JSON string.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A3bt9LBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mc2ef2h5twh1e82zznsx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A3bt9LBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mc2ef2h5twh1e82zznsx.png" alt="json_helper.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#irepository"&gt;
  &lt;/a&gt;
  IRepository
&lt;/h3&gt;

&lt;p&gt;An interface that defines methods to be implemented by the derived repository classes. Dart language does not support the interface as a class type, so we define an interface by creating an abstract class and providing a method header (name, return type, parameters) without the default implementation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5we_Tk7x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24snqdxdl9n3mijvwrub.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5we_Tk7x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/24snqdxdl9n3mijvwrub.png" alt="irepository.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concrete-repositories"&gt;
  &lt;/a&gt;
  Concrete repositories
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;CustomersRepository&lt;/em&gt; — a specific implementation of the &lt;em&gt;IRepository&lt;/em&gt; interface to store customers’ data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h8ZAqBIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tq5dw5ghrwf1rdh849d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h8ZAqBIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tq5dw5ghrwf1rdh849d.png" alt="customers_repository.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;OrdersRepository&lt;/em&gt; — a specific implementation of the &lt;em&gt;IRepository&lt;/em&gt; interface to store orders’ data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XHbEyvKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tujw1admp4h9044vuvcb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XHbEyvKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tujw1admp4h9044vuvcb.png" alt="orders_repository.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#istorage"&gt;
  &lt;/a&gt;
  IStorage
&lt;/h3&gt;

&lt;p&gt;An interface that defines methods to be implemented by the derived storage classes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mlheYV94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ji47bf176e5ngbevbppd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mlheYV94--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ji47bf176e5ngbevbppd.png" alt="istorage.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#concrete-storages"&gt;
  &lt;/a&gt;
  Concrete storages
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;FileStorage&lt;/em&gt; — a specific implementation of the &lt;em&gt;IStorage&lt;/em&gt; interface to store an object in the storage as a file — this behaviour is mocked by storing an object as a JSON string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Q6N7rGX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xys6hfc5w7wjmgekqj3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Q6N7rGX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0xys6hfc5w7wjmgekqj3.png" alt="file_storage.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;SqlStorage&lt;/em&gt; — a specific implementation of the &lt;em&gt;IStorage&lt;/em&gt; interface to store an object in the storage as an entity — this behaviour is mocked by using the Map data structure and appending entities of the same type to the list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o-U9-G9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11yrsr8fjzdk3nquvqnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o-U9-G9s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11yrsr8fjzdk3nquvqnn.png" alt="sql_storage.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h3&gt;

&lt;p&gt;First of all, a markdown file is prepared and provided as a pattern’s description:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--drDgUw8e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s0zo5wv24ki2byplvpg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--drDgUw8e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s0zo5wv24ki2byplvpg.gif" alt="Bridge Markdown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;BridgeExample&lt;/em&gt; contains a list of storages — instances of &lt;em&gt;SqlStorage&lt;/em&gt; and &lt;em&gt;FileStorage&lt;/em&gt; classes. Also, it initialises &lt;em&gt;Customer&lt;/em&gt; and &lt;em&gt;Order&lt;/em&gt; repositories. In the repositories the concrete type of storage could be interchanged by triggering the &lt;em&gt;onSelectedCustomerStorageIndexChanged()&lt;/em&gt; for the &lt;em&gt;CustomersRepository&lt;/em&gt; and &lt;em&gt;onSelectedOrderStorageIndexChanged()&lt;/em&gt; for the &lt;em&gt;OrdersRepository&lt;/em&gt; respectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BgCJ2a09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p33o4g2z878df1sf2ovq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BgCJ2a09--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p33o4g2z878df1sf2ovq.png" alt="bridge_example.dart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The concrete repository does not care about the specific type of storage it uses as long as the storage implements the &lt;em&gt;IStorage&lt;/em&gt; interface and all of its abstract methods. As a result, the abstraction (repository) is separated from the implementor (storage) — the concrete implementation of the storage could be changed for the repository at run-time, the repository does not depend on its implementation details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w63AYmAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrdp40thnbjlea4addr1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w63AYmAu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qrdp40thnbjlea4addr1.gif" alt="Bridge Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the example, the storage type could be changed for each repository separately and at run-time — it would not be possible by using the simple class inheritance approach.&lt;/p&gt;

&lt;p&gt;All of the code changes for the Bridge design pattern and its example implementation could be found &lt;a href="https://github.com/MangirdasKazlauskas/flutter-design-patterns/pull/18"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-contribution"&gt;
  &lt;/a&gt;
  Your Contribution
&lt;/h2&gt;

&lt;p&gt;💖 or 🦄 this article to show your support and motivate me to write better!&lt;br&gt;
💬 Leave a response to this article by providing your insights, comments or wishes for the next topic.&lt;br&gt;
📢 Share this article with your friends, colleagues on social media.&lt;br&gt;
➕ Follow me on dev.to or any other social media platform.&lt;br&gt;
⭐ Star the &lt;a href="https://github.com/mkobuolys/flutter-design-patterns"&gt;Github&lt;/a&gt; repository.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>oop</category>
      <category>programming</category>
    </item>
    <item>
      <title>Do I need to do private side projects to be/become a professional web developer? </title>
      <author>Owlcowl</author>
      <pubDate>Mon, 10 May 2021 12:17:31 +0000</pubDate>
      <link>https://dev.to/s2engineers/do-i-need-to-do-private-side-projects-to-be-become-a-professional-web-developer-5137</link>
      <guid>https://dev.to/s2engineers/do-i-need-to-do-private-side-projects-to-be-become-a-professional-web-developer-5137</guid>
      <description>&lt;p&gt;Disclaimer: professional in this case means making a living as a web developer. &lt;/p&gt;

&lt;p&gt;This is a question I asked myself and discussed with other developers over my career multiple times. It seems like most web developers have at least one private side project ongoing or they are planning to. &lt;br&gt;
For me personally I also felt some need in the past to have a side project because all the cool kids I follow on Twitter have some and they have fun with it and are successful, at least that is what it looked like for me. And I wanted to have fun and be successful too. &lt;/p&gt;

&lt;p&gt;If you were on the job hunt in the last years as a web developer or talked to some devs that were you might asked yourself the same.  It often even feels like if you do not have an open source (e.g. GitHub) account and add that to your CV nobody will even look at it. &lt;/p&gt;

&lt;p&gt;So that specifically developers that are new to the profession get the feeling there is a need for private side projects to become and stay a web developer, is no miracle to me. &lt;/p&gt;

&lt;p&gt;From my experience, after more than 10 years of software development, private side projects are not a good indicator if someone is a professional web developer. Over my career I had years with and without side projects and I wasn't the only one, even the cool kids take breaks from their side projects.&lt;br&gt;&lt;br&gt;
But I will say that private side projects can be quite helpful if you want to improve your coding skills or want to get into some new technology because you can do everything on your own terms. &lt;br&gt;
They are no requirement though. &lt;/p&gt;

&lt;p&gt;And please do not forget there are web developers out there which do not have any private time to spare for side projects and this does not make them any less a professional web developer. &lt;/p&gt;

&lt;p&gt;What are your thoughts and experiences with this? &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codeiscolorful</category>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>Interactive window with a single div</title>
      <author>Alvaro Montoro</author>
      <pubDate>Mon, 10 May 2021 12:13:09 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/interactive-window-with-a-single-div-4apj</link>
      <guid>https://dev.to/alvaromontoro/interactive-window-with-a-single-div-4apj</guid>
      <description>&lt;p&gt;First of all, let's clarify one point: when talking about a window, we refer to an actual window like on the wall, not a window on a computer. This post will be about how to draw a window with a single &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and how to make it interactive, so you can open/close the blinds by pulling the string.&lt;/p&gt;

&lt;p&gt;This is what we are going to develop (&lt;a href="https://codepen.io/alvaromontoro/full/eYvmQoj"&gt;it looks better on larger screens&lt;/a&gt;, as it is sometimes tough to pull the string on mobile):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/eYvmQoj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This demo was inspired by &lt;a class="mentioned-user" href="https://dev.to/jh3y"&gt;@jh3y&lt;/a&gt;
's 3D window demo that uses the new &lt;code&gt;@container&lt;/code&gt; query, and that you can &lt;a href="https://codepen.io/jh3y/pen/qBrEMEe"&gt;see on CodePen too&lt;/a&gt;:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I3BoXZiC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1390797483484327936/pu/img/kx_AP0NBbPwrQqxN.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--fkhTix2N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1355149810148515842/NBuYxo5I_normal.jpg" alt="Jhey 🐻🛠 (Exploring Opportunities ✨) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Jhey 🐻🛠 (Exploring Opportunities ✨)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @jh3yy
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Peter's Blinds v2 🪟&lt;br&gt;&lt;br&gt;Debunking memes with CSS container queries!&lt;br&gt;&lt;br&gt;This time it's tested in Chrome Canary 😅&lt;br&gt;&lt;br&gt;No JavaScript required&lt;br&gt;&lt;br&gt;Pull the cord(resize the element 🤫) to open blinds&lt;br&gt;&lt;br&gt;Queries update custom properties 😎&lt;br&gt;&lt;br&gt;cc &lt;a href="https://twitter.com/TerribleMia"&gt;@TerribleMia&lt;/a&gt; &lt;br&gt;👉 &lt;a href="https://t.co/P9ITDwLQ8o"&gt;codepen.io/jh3y/pen/qBrEM…&lt;/a&gt; via &lt;a href="https://twitter.com/CodePen"&gt;@CodePen&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:41 PM - 07 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1390798974756560904" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1390798974756560904" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1390798974756560904" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I decided to do something simpler in 2D (I should go back to doing 3D CSS demos, it is fun.) And as a challenge, limit the number of elements to the lowest possible. In this case, that was one: a single &lt;code&gt;div&lt;/code&gt;. I could draw the window and wall with &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt;, but it was not possible to animate them (or at least I couldn't.) Initially, I was going to use the &lt;code&gt;@container&lt;/code&gt; query too but then thought of a way of doing it without needing that new feature.&lt;/p&gt;

&lt;p&gt;The background/wall is the &lt;code&gt;html&lt;/code&gt;/&lt;code&gt;body&lt;/code&gt; element (only one of them is needed) after applying multiple gradients as &lt;code&gt;background-image&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Ep4BFQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzu1w6qa0b80xzcg2m86.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Ep4BFQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qzu1w6qa0b80xzcg2m86.png" alt="Screenshot of the background mimicking a 50s style house interior with wallpaper"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With 8 gradients, we can achieve that background:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One horizontal &lt;code&gt;linear-gradient&lt;/code&gt; for the pink and cream vertical lines.&lt;/li&gt;
&lt;li&gt;One vertical &lt;code&gt;linear-gradient&lt;/code&gt; for the railing and bottom of the wall.&lt;/li&gt;
&lt;li&gt;One vertical &lt;code&gt;linear-gradient&lt;/code&gt; for the decorative top paper (just the white and blue lines)&lt;/li&gt;
&lt;li&gt;Five &lt;code&gt;radial-gradient&lt;/code&gt; to make the circular pattern in the decorative paper on top.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are two vertical &lt;code&gt;linear-gradient&lt;/code&gt;. Why not combine them into a single one? Great question! There are some bugs in Chrome and Firefox that if a &lt;code&gt;linear-gradient&lt;/code&gt; has too many stops (8 or more), the lines will get blurred or distorted. For that reason, I had to break one large linear gradient into two smaller ones with less than 8 stops each.&lt;/p&gt;

&lt;p&gt;The window is a single &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; element, for which we use different &lt;code&gt;box-shadow&lt;/code&gt; and &lt;code&gt;linear-gradient&lt;/code&gt; to paint the frame, glass, and reflections.&lt;/p&gt;

&lt;p&gt;With the &lt;code&gt;::before&lt;/code&gt; pseudo-element, we add the blinds using a &lt;code&gt;repeating-linear-gradient&lt;/code&gt;. And with the &lt;code&gt;::after&lt;/code&gt;, we draw the strings for the blinds.&lt;/p&gt;

&lt;p&gt;So far, the window is static. Just a drawing without interaction, but if we add the following CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="nl"&gt;resize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;vertical&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;300px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* same as height */&lt;/span&gt;
  &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;450px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the window can grow and shrink vertically within the specified values (the bottom right corner of the &lt;code&gt;div&lt;/code&gt; will be the resizing handle in most browsers.) As we used absolute values for the linear gradients and shadows, the window will give the impression that it is always the same size, but the HTML element is actually changing height.&lt;/p&gt;

&lt;p&gt;And this is where the &lt;code&gt;::after&lt;/code&gt; pseudo-element comes into play. It will be the only one with relative size, so its background (used for the blinds cord) will grow along with the container.&lt;/p&gt;

&lt;p&gt;Finally, the blinds need to go up/down depending on the size of the container... which sounds like a great opportunity for the &lt;code&gt;@container&lt;/code&gt; query, but instead, we can calculate the height based on the height of the window (300px) and the height of the container (the &lt;code&gt;div&lt;/code&gt; itself).&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;calc()&lt;/code&gt; and &lt;code&gt;clamp()&lt;/code&gt;, we can determine which size the blinds should have based on the size of the parent:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="c"&gt;/* the background width is fixed, the height changes */&lt;/span&gt;
  &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;196px&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;900px&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;200%&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;290px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that is how we get an &lt;a href="https://codepen.io/alvaromontoro/full/eYvmQoj"&gt;interactive window with a single div element&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/eYvmQoj?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading. Let me know if you have any questions or if anything needs further explanation.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How does middleware work in Express?</title>
      <author>Simon Plenderleith</author>
      <pubDate>Mon, 10 May 2021 12:11:00 +0000</pubDate>
      <link>https://dev.to/simonplend/how-does-middleware-work-in-express-359f</link>
      <guid>https://dev.to/simonplend/how-does-middleware-work-in-express-359f</guid>
      <description>&lt;p&gt;&lt;em&gt;This article is an adapted excerpt from my book, &lt;a href="https://expressapivalidation.com/"&gt;Express API Validation Essentials&lt;/a&gt;. It teaches you a complete API validation strategy which you can start applying in your Express applications today.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;The Express documentation tells us that "an Express application is essentially a series of middleware function calls". It sounds simple on the surface, but honestly, middleware can get pretty confusing. You've probably found yourself wondering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Where is the right place to add this middleware in my application?&lt;/li&gt;
&lt;li&gt;When should I call the &lt;code&gt;next&lt;/code&gt; callback function, and what happens when I do?&lt;/li&gt;
&lt;li&gt;Why does the order of middleware matter?&lt;/li&gt;
&lt;li&gt;How can I write my own code for handling errors?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The middleware pattern is fundamental to building applications with Express, so you want to have a solid understanding of what middleware is and how it works.&lt;/p&gt;

&lt;p&gt;In this article we're going to dig into the middleware pattern. We'll also look at the different types of Express middleware and how to effectively combine them when we build our applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jump-links"&gt;
  &lt;/a&gt;
  Jump links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#the-middleware-pattern"&gt;The middleware pattern&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#middleware-syntax"&gt;Middleware syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#the-two-types-of-middleware"&gt;The two types of middleware&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#plain-middleware"&gt;Plain middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#error-handling-middleware"&gt;Error handling middleware&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#using-middleware"&gt;Using middleware&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#at-the-route-level"&gt;At the route level&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#at-the-router-level"&gt;At the router level&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#at-the-application-level"&gt;At the application level&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrapping-up"&gt;Wrapping up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-middleware-pattern"&gt;
  &lt;/a&gt;
  The middleware pattern
&lt;/h2&gt;

&lt;p&gt;In Express, middleware are a specific style of function which you configure your application to use. They can run any code you like, but they typically take care of processing incoming requests, sending responses and handling errors. They are the building blocks of every Express application.&lt;/p&gt;

&lt;p&gt;When you define a route in Express, the route handler function which you specify for that route is a middleware function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;routeHandlerMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// execute something&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.1)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Middleware is flexible. You can tell Express to run the same middleware function for different routes, enabling you to do things like making a common check across different API endpoints.&lt;/p&gt;

&lt;p&gt;As well as writing your own middleware functions, you can also install third-party middleware to use in your application. The Express documentation lists some &lt;a href="https://expressjs.com/en/resources/middleware.html"&gt;popular middleware modules&lt;/a&gt;. There are also a wide variety of Express middleware modules available on &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#middleware-syntax"&gt;
  &lt;/a&gt;
  Middleware syntax
&lt;/h3&gt;

&lt;p&gt;Here is the syntax for a middleware function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @param {Object} request - Express request object (commonly named `req`)
 * @param {Object} response - Express response object (commonly named `res`)
 * @param {Function} next - Express `next()` function
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;middlewareFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// execute something&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.2)&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note: You might have noticed that I refer to &lt;code&gt;req&lt;/code&gt; as &lt;code&gt;request&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; as &lt;code&gt;response&lt;/code&gt;. You can name the parameters for your middleware functions whatever you like, but I prefer verbose variable names as I think that it makes it easier for other developers to understand what your code is doing, even if they're not familiar with the Express framework.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When Express runs a middleware function, it is passed three arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An Express request object (commonly named &lt;code&gt;req&lt;/code&gt;) - this is an extended instance of Node.js' built-in &lt;a href="https://nodejs.org/api/http.html#http_class_http_incomingmessage"&gt;http.IncomingMessage&lt;/a&gt; class.&lt;/li&gt;
&lt;li&gt;An Express response object (commonly named &lt;code&gt;res&lt;/code&gt;) - this is an extended instance of Node.js' built-in &lt;a href="https://nodejs.org/api/http.html#http_class_http_serverresponse"&gt;http.ServerResponse&lt;/a&gt; class.&lt;/li&gt;
&lt;li&gt;An Express &lt;code&gt;next()&lt;/code&gt; function - Once the middleware function has completed its tasks, it must call the &lt;code&gt;next()&lt;/code&gt; function to hand off control to the next middleware. If you pass an argument to it, Express assumes it to be an error. It will skip any remaining non-error handling middleware functions and start executing error handling middleware.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Middleware functions should not &lt;code&gt;return&lt;/code&gt; a value. Any value returned by middleware will not be used by Express.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-two-types-of-middleware"&gt;
  &lt;/a&gt;
  The two types of middleware
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#plain-middleware"&gt;
  &lt;/a&gt;
  Plain middleware
&lt;/h3&gt;

&lt;p&gt;Most middleware functions that you will work with in an Express application are what I call "plain" middleware (the Express documentation doesn't have a specific term for them). They look like the function defined in the middleware syntax example above (&lt;em&gt;Example 1.2&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Here is an example of a plain middleware function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;plainMiddlewareFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`The request method is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Ensure the next middleware function is called.
     */&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.3)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-handling-middleware"&gt;
  &lt;/a&gt;
  Error handling middleware
&lt;/h3&gt;

&lt;p&gt;The difference between &lt;a href="https://expressjs.com/en/guide/using-middleware.html#middleware.error-handling"&gt;error handling middleware&lt;/a&gt; and plain middleware is that error handler middleware functions specify four parameters instead of three i.e. &lt;code&gt;(error, request, response, next)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is an example of an error handling middleware function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;errorHandlingMiddlewareFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * Ensure the next error handling middleware is called.
     */&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.4)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This error handling middleware function will be executed when another middleware function calls the &lt;code&gt;next()&lt;/code&gt; function with an error object e.g.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;anotherMiddlewareFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Something is wrong&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="cm"&gt;/**
     * This will cause Express to start executing error
     * handling middleware.
     */&lt;/span&gt;
    &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.5)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-middleware"&gt;
  &lt;/a&gt;
  Using middleware
&lt;/h2&gt;

&lt;p&gt;The order in which middleware are configured is important. You can apply them at three different levels in your application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The route level&lt;/li&gt;
&lt;li&gt;The router level&lt;/li&gt;
&lt;li&gt;The application level&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want a route (or routes) to have errors which they raise handled by an error handling middleware, you must add it after the route has been defined.&lt;/p&gt;

&lt;p&gt;Let's look at what configuring middleware looks like at each level.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#at-the-route-level"&gt;
  &lt;/a&gt;
  At the route level
&lt;/h3&gt;

&lt;p&gt;This is the most specific level: any middleware you configure at the route level will only run for that specific route.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;someMiddleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;routeHandlerMiddleware&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;errorHandlerMiddleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.6)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#at-the-router-level"&gt;
  &lt;/a&gt;
  At the router level
&lt;/h3&gt;

&lt;p&gt;Express allows you to create &lt;a href="https://expressjs.com/en/api.html#router"&gt;Router&lt;/a&gt; objects. They allow you to scope middleware to a specific set of routes. If you want the same middleware to run for multiple routes, but not for all routes in your application, they can be very useful.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someMiddleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/user&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;createUserRouteHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/user/:user_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getUserRouteHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/user/:user_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateUserRouteHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/user/:user_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteUserRouteHandler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorHandlerMiddleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.7)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#at-the-application-level"&gt;
  &lt;/a&gt;
  At the application level
&lt;/h3&gt;

&lt;p&gt;This is the least specific level. Any middleware configured at this level will be run for all routes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someMiddleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// define routes&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errorHandlerMiddleware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(Example 1.8)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Technically you can define some routes, call &lt;code&gt;app.use(someMiddleware)&lt;/code&gt; , then define some other routes which you want &lt;code&gt;someMiddleware&lt;/code&gt; to be run for. I don't recommend this approach as it tends to result in a confusing and hard to debug application structure.&lt;/p&gt;

&lt;p&gt;You should only configure middleware at the application level if absolutely necessary i.e. it really must be run for every single route in your application. Every middleware function, no matter how small, takes &lt;em&gt;some&lt;/em&gt; time execute. The more middleware functions that need to be run for a route, the slower requests to that route will be. This really adds up as your application grows and is configured with lots of middleware. Try to scope middleware to the route or router levels when you can.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;In this article we've learnt about the middleware pattern in Express. We've also learnt about the different types of middleware and how we can combine them when building an application with Express.&lt;/p&gt;

&lt;p&gt;If you'd like to read more about middleware, there are a couple of guides in the Express documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://expressjs.com/en/guide/using-middleware.html"&gt;Guide: Using middleware&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://expressjs.com/en/guide/writing-middleware.html"&gt;Guide: Writing middleware for use in Express apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;This article is an adapted excerpt from my book, &lt;a href="https://expressapivalidation.com/"&gt;Express API Validation Essentials&lt;/a&gt;. It teaches you a complete API validation strategy which you can start applying in your Express applications today.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tired-of-wasting-time-reading-nodejs-blog-posts-which-dont-actually-help-you-improve-your-projects"&gt;
  &lt;/a&gt;
  Tired of wasting time reading Node.js blog posts which don't actually help you improve your projects?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://simonplend.com/newsletter/"&gt;Sign up to my weekly-ish newsletter&lt;/a&gt; and I'll let you know when I publish a new blog post which helps solve your real developer problems. I'll also send you an awesome tip so we can level up together, as well as a handful of excellent things by other people.&lt;/p&gt;

</description>
      <category>node</category>
      <category>express</category>
      <category>middleware</category>
    </item>
    <item>
      <title>Top 10 Tools for Web Design</title>
      <author>The Nerdy Dev</author>
      <pubDate>Mon, 10 May 2021 12:10:46 +0000</pubDate>
      <link>https://dev.to/thenerdydev/top-10-tools-for-web-design-39gb</link>
      <guid>https://dev.to/thenerdydev/top-10-tools-for-web-design-39gb</guid>
      <description>&lt;p&gt;&lt;em&gt;Are you looking for magic tools to ease out your design process ?&lt;/em&gt; &lt;br&gt;
Well, your search ends here. In this article, I am going to present you 10 tools that are a &lt;strong&gt;MUST&lt;/strong&gt; to ease out your design process and make your overall workflow super efficient. &lt;/p&gt;

&lt;p&gt;With me ? Amazing. Here we go. &lt;/p&gt;

&lt;p&gt;The first tool is: &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-pexels"&gt;
  &lt;/a&gt;
  1. Pexels
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Pexels.com&lt;/strong&gt; is my top most preferred website to grab royalty free images for my projects. The best part of these images is that they are professional high grade images that you can use in your web designs. &lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://pexels.com"&gt;https://pexels.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-css-clip-path-maker-clippy"&gt;
  &lt;/a&gt;
  2. CSS Clip Path Maker (Clippy)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Clippy&lt;/strong&gt; is another amazing tool that you can use for image clipping. It gives you different templates that you can apply on your images to make them look different and eases the clipping process. So you drag a couple of points here and there and it gives you the CSS property for same that you can directly paste into your project and you are &lt;strong&gt;DONE&lt;/strong&gt;. Isn't it dead simple ? Pretty awesome, right?&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://bennettfeely.com/clippy/"&gt;https://bennettfeely.com/clippy/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-css-gradient"&gt;
  &lt;/a&gt;
  3. CSS Gradient
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CSS Gradient&lt;/strong&gt; is another quality tool that helps you in creating amazing and sleek gradients to enhance the overlook look, feel and aesthetics of your website. This is another must have tool for web design.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://cssgradient.io/"&gt;https://cssgradient.io/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-animista"&gt;
  &lt;/a&gt;
  4. Animista
&lt;/h2&gt;

&lt;p&gt;Who can forget Animista ? It is literary one of the best CSS tools that I have used so far for creating amazing, smooth and clean animations. IMO it is the best tool that you can use to animate your CSS elements. It lets you go crazy and creative at the very same time. It also provides tons of COOL animations out of the box which can be useful for most of the cases. You can even tweak them a bit to generate animations with the desired effect that you are looking for. &lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://animista.net/"&gt;https://animista.net/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-colorhunt"&gt;
  &lt;/a&gt;
  4. ColorHunt
&lt;/h2&gt;

&lt;p&gt;Color Hunt is a free and open platform for color inspiration with thousands of trendy hand-picked color palettes. So use these palettes for colors that look great to the eye. &lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://colorhunt.co/"&gt;https://colorhunt.co/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-filter-css-generator"&gt;
  &lt;/a&gt;
  5. Filter CSS Generator
&lt;/h2&gt;

&lt;p&gt;A filter CSS generator that helps you quickly generate filter CSS declarations for your website. It comes with many options and it demonstrates instantly.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://cssgenerator.org/"&gt;https://cssgenerator.org/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-keyframesapp"&gt;
  &lt;/a&gt;
  5. Keyframes.app
&lt;/h2&gt;

&lt;p&gt;Keyframes helps you write better CSS. It provides dead simple visual tools to help you generate CSS for your projects.It is a pretty new tool but I feel it has tremendous potential. Currently it allows you to play with animations, colors and shadows. So feel free to try this tool as well. &lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://keyframes.app/"&gt;https://keyframes.app/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#6-bouncejs"&gt;
  &lt;/a&gt;
  6. Bounce.js
&lt;/h2&gt;

&lt;p&gt;Bounce.js is a handy JavaScript library that enables you to create complicated animations. Bounce.js has a mature user interface that allows you to either add different components – such as easing, duration, delay, and number of bounces – manually to your animation, or select a ready-to-use preset, then play the animation, and fine-tune the properties if it’s necessary.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://bouncejs.com"&gt;https://bouncejs.com&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#7-single-element-css-spinners"&gt;
  &lt;/a&gt;
  7. Single Element CSS Spinners
&lt;/h2&gt;

&lt;p&gt;Looking for enhancing your CSS designs with simple yet awesome looking animated loading spinners ? If the answer is yes, this CSS spinner library may be the perfect choice for you. &lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://projects.lukehaas.me/css-loaders/"&gt;https://projects.lukehaas.me/css-loaders/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#8-normalizecss"&gt;
  &lt;/a&gt;
  8. Normalize.css
&lt;/h2&gt;

&lt;p&gt;A HTML5-ready alternative to CSS resets. It preserves some useful browser default settings, normalizes styles for a wide range of HTML elements, corrects some common browser inconsistencies, and is well commented for easier use.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://necolas.github.io/normalize.css/"&gt;https://necolas.github.io/normalize.css/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#9-voxelcss"&gt;
  &lt;/a&gt;
  9. Voxel.css
&lt;/h2&gt;

&lt;p&gt;Voxel.css is a CSS library for 3D rendering. Voxel is flexible enough to be used for everything from 3D web animations to full-on video games. It exposes 4 different classes - Scene, World, Editor and Voxel. So it offers a customization that is as close as a full 3D animation website.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="http://www.voxelcss.com/"&gt;http://www.voxelcss.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#10-blush"&gt;
  &lt;/a&gt;
  10. Blush
&lt;/h2&gt;

&lt;p&gt;Easily create stunning and beautiful illustrations with collections made by artists across the globe&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="https://blush.design/"&gt;https://blush.design/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Those are my 10 favorite resources which I use in countless projects, go ahead and try those and let me know what you think of them!&lt;/p&gt;

&lt;p&gt;If you are looking to learn CSS for &lt;strong&gt;FREE&lt;/strong&gt; or Web Development in general, make sure to check out the below article: &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;👉🏻 Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;👉🏻 Check out my YouTube Channel : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Rust programming language: what is it &amp; how to learn it?</title>
      <author>Igor Cekelis</author>
      <pubDate>Mon, 10 May 2021 11:58:16 +0000</pubDate>
      <link>https://dev.to/barrage/rust-programming-language-what-is-it-how-to-learn-it-1867</link>
      <guid>https://dev.to/barrage/rust-programming-language-what-is-it-how-to-learn-it-1867</guid>
      <description>&lt;p&gt;Rust is a low-level systems programming language. While that might make Rust seem limited, it can be used to build many different types of applications. Rust is a tool, and tools are chosen depending on what you want to build.&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#first-of-all-what-is-rust"&gt;
  &lt;/a&gt;
  First of all, what is Rust?
&lt;/h2&gt;

&lt;p&gt;As mentioned before, Rust is an open-source systems programming language. Rust aims to be memory-safe, thread-safe, fast, and secure. To achieve this, it introduces some new concepts, like ownership, borrowing, and lifetimes, which are the main things that keep Rust memory safe. These concepts might seem foreign if you have not seen them explicitly as you will in Rust.&lt;/p&gt;

&lt;p&gt;Thanks to these concepts, many errors in Rust are compile-time errors rather than runtime errors.&lt;/p&gt;

&lt;p&gt;Rust is a statically typed language, unlike JS, Python, Ruby, or Objective- C. As your code compiles, you will get compile type checking, and the compiler will let you know if you have any unhandled errors. Rather than re-running your application and trying to replicate an error that happened, you can spend more time writing the correct code.&lt;/p&gt;

&lt;p&gt;Let’s talk about ownership. In Rust, the compiler keeps track of which data “lives” in which scope or context. Because of this, you do not have to keep track of dangling pointers or references to parts of memory, which, if left unchecked, could leave you with segmentation faults or memory leaks.&lt;/p&gt;

&lt;p&gt;For example, in C, you have a function that returns a reference/pointer to some data. Then you call another function on that same reference, the code works, and everything seems fine, but little do you know the first pointer (returned from the function) has now been freed. This leaves you with a dangling pointer, and if you are not mindful, you could accidentally try to use that pointer again, and you will end up with some unexpected behavior.&lt;/p&gt;

&lt;p&gt;The Rust compiler keeps track of what function or what context holds what data at any given moment, so something like this most likely would not happen. At least not so easily, as the Rust compiler will let you know during compile-time that you have an error that needs to be handled.&lt;/p&gt;

&lt;p&gt;This is where ownership comes in; as mentioned before, a context or function can hold or own data, meaning the data lives in the function’s scope. Rust will not let us access that data outside of that scope unless we explicitly say so. And even then, we need to explicitly tell the compiler how we want to use that data. This is called borrowing in Rust, and that’s what makes Rust memory safe. Because all data lives in its own scope/context, once we move out of it, Rust will look at all of the data inside that scope and deallocate it.&lt;/p&gt;

&lt;p&gt;Here is an example of returning a reference to a string (&amp;amp;str) from a function and using it in another (main) function.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fn hello_v1() -&amp;gt; &amp;amp; str{
    "Hello, world!"
}

fn main() -&amp;gt; (){
    let message = hello_v1();
    println!("{}",message);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;The example above will not work because the “Hello, world!” string is deallocated after the “hello_v1 function is finished, so we cannot print it. Also, the error we get clearly states that we are missing lifetime parameters, so let's add them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fn hello_v2&amp;lt;'a&amp;gt;() -&amp;gt; &amp;amp;'a str{
    "Hello, world!"
}

fn main() -&amp;gt; (){
    let message = hello_v2();
    println!("{}",message);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Once we change our function and add the lifetime parameters, the compiler knows that we need that string to live outside of that function, so we get the message  “Hello, world!” in our console.&lt;/p&gt;

&lt;p&gt;Rust does not have an automatic garbage collector like some other languages, Java or Python, for example.&lt;/p&gt;

&lt;p&gt;We don’t have to manually free or deallocate any memory. If we want data to live outside the function it was created in, we must tell the compiler explicitly that we do not want this data deallocated.&lt;/p&gt;

&lt;p&gt;This might seem complicated at first, but you won't even notice it once you start writing the code.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-rust-used-for"&gt;
  &lt;/a&gt;
  What is Rust used for?
&lt;/h3&gt;



&lt;p&gt;More than a few projects are created using Rust, and some of the well known are: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mozilla built its browser engine called &lt;a href="https://servo.org/"&gt;Servo&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.figma.com/blog/rust-in-production-at-figma/"&gt;Figma’s&lt;/a&gt; real-time syncing server, which is used to edit all Figma documents &lt;/li&gt;
&lt;li&gt;An open-source virtualization technology called &lt;a href="https://github.com/firecracker-microvm/firecracker"&gt;Firecracker&lt;/a&gt; is mostly being written in Rust.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.rust-lang.org/static/pdfs/Rust-npm-Whitepaper.pdf"&gt;NPM&lt;/a&gt; also uses this language to alleviate some of its CPU-bound bottlenecks.&lt;/li&gt;
&lt;/ul&gt;



&lt;h3&gt;
  &lt;a href="#rust-vs-go"&gt;
  &lt;/a&gt;
  Rust vs. Go
&lt;/h3&gt;

&lt;p&gt;The most obvious difference between Rust and GoLang is simplicity. Becoming productive in Go takes much less time than it does in Rust. However, simplicity comes at a cost as Go lacks some Rust features like generics and functional programming.&lt;/p&gt;

&lt;p&gt;Another difference is in memory management. Go has a garbage collector, while Rust’s memory management, as explained above, comes in the form of ownership and borrowing. While this might give an edge to Rust in performance, speed and flexibility, it can also be a setback in some cases.&lt;/p&gt;

&lt;p&gt;Concurrency in programming, simply put, is the ability to execute more than one function or task simultaneously. Go has great support for concurrency in the form of Goroutines and channels.&lt;/p&gt;

&lt;p&gt;While both of these features are also available in Rust (either using the standard library or third-party crates like Tokio), the main difference is, once again, simplicity. Writing concurrent applications in Go is easier than in Rust. Still, Rust, on the other hand, offers compile-time checking, being able to catch thread-safety bugs even before your program runs.&lt;/p&gt;

&lt;p&gt;Considering compilation time, Go blows Rust out of the water, as the Go compiler does not have to run all the optimization checks the Rust compiler does. One thing they have in common is that they both produce a static binary as an output, which means that in order to run the compiled program, you don't need an interpreter or a virtual machine. Go is very well suited to build services and simple applications. For example, a web REST API was built to replace Java and C#.&lt;/p&gt;

&lt;p&gt;Another key difference is that Go does not support macros, while Rust has a very powerful macro system. Rust is a systems programming language; therefore, it's a very good fit when you need efficiency and performance. Rust is very well suited for performance-critical applications such as web browsers, databases, operating systems, or libraries that rely on heavy mathematical calculations.&lt;/p&gt;

&lt;p&gt;This does not mean that you can’t use Rust to build a web application, as Rust has great support for building web APIs in the form of third-party crates.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#rust-vs-c"&gt;
  &lt;/a&gt;
  Rust vs. C++
&lt;/h3&gt;

&lt;p&gt;Both Rust and C++ are system programming languages, which means they can write low-level code like operating systems and firmware for microcontrollers. Compared to C, both languages offer a lot of abstractions that make it possible to go high-level and write game engines and web applications.&lt;/p&gt;

&lt;p&gt;Another similarity is that neither of them uses a garbage collector to manage memory. This makes code more efficient and faster. If you have ever used C, you will know that managing memory yourself is hard and often results in undefined behaviors or segmentation faults.&lt;/p&gt;

&lt;p&gt;For this reason, C++ introduced smart pointers to mitigate some memory-related bugs. However, they are still limited in the number of guarantees they offer. Rust goes a step further and introduces the borrow checker (ownership, borrowing), preventing most of the memory safety bugs.&lt;/p&gt;

&lt;p&gt;Another selling point for Rust is its rich type system, making it possible to prevent data races at compile time. Rust introduces two traits, Sync and Send. A type is Send if it is safe to send to another thread, and a type is Sync if it is safe to share between threads. This makes sharing memory between threads possible, but the compiler will prevent you from doing so unsafely.&lt;/p&gt;

&lt;p&gt;This example shows how sharing the number between threads would be unsafe as the RefCell type is not Sync.&lt;/p&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fn main() {
    let mut number = std::cell::RefCell::new(2);

    let new_thread = std::thread::spawn(|| {
        let mut reference = number.borrow_mut();
        *reference = 5
    });

    let mut reference = number.borrow_mut();
    *reference = 5;

    new_thread.join();
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;We get this error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let new_thread = std::thread::spawn(|| {
    |                      ^^^^^^^^^^^^^^^^^^ `RefCell&amp;lt;i32&amp;gt;` cannot be shared between threads safely
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;This also highlights how great the Rust compiler is as it tells us exactly what the problem is.&lt;/p&gt;

&lt;p&gt;This is an example of how to share data between threads and changing it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fn main() {
    use std::sync::{Arc, Mutex};
   let number = Arc::new(Mutex::new(5)); // this number is in the main thread

   { 
        let number_copy = Arc::clone(&amp;amp;number);
        let new_thread = std::thread::spawn(move || { // create a new thread and pass in the num
            let mut reference = number_copy.lock().unwrap();
            *reference *= 5 // here we multiply our starting number by 5
        });
        new_thread.join().unwrap();
    }
    println!("{}",number.lock().unwrap().clone()); // now the starting number is 25

    *number.lock().unwrap() *= 5; // we multiply the starting number by 5 again

     println!("{}",number.lock().unwrap()) // here the number is 125    
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;p&gt;Another “version” of Rust called Unsafe Rust is more similar to C++. Working in Unsafe Rust is like telling the compiler to trust you and skip some of the checks it provides. You lose the safety guarantees a safe Rust compiler gives you, but you gain the ability to interact with the low-level aspects of the operating system/hardware. Those operations are inherently unsafe. Rust’s compiler is very conservative in its checks, meaning that it prefers to check and block a few valid programs/operations rather than allow many unchecked operations. This means that even if we know that some code is safe to execute, Rust might still not allow it unless we use unsafe Rust.&lt;/p&gt;

&lt;p&gt;The areas where  Rust definitely beats C++ and many other languages are package management and documentation. The official package manager in Rust is called Cargo. Using a package is as simple as adding a line to the cargo.toml, Rust's config file. Documentation for Rust is on a whole other level compared to any other language; everything can be found at doc.rust-lang.org.&lt;/p&gt;

&lt;p&gt;Using an external library with C++ can be an issue, especially if you’re targeting multiple operating systems. There are some third-party options like Conan or Vcpkg, but they are far from being as standardized and easy to use as Cargo.&lt;/p&gt;

&lt;p&gt;Of course, the C++ ecosystem is much larger. There are many more libraries for C++, so there might not be a library for something that already exists for C++. Rust does allow for FFI (foreign function interface), which allows you to interface with C code from Rust and thus interface with C++ libraries; however, this functionality is still limited for more complex cases.&lt;/p&gt;

&lt;p&gt;Another similarity is macros. Both C++ and Rust allow them, but Rust’s macros are considered to be much more powerful and safer.&lt;/p&gt;

&lt;p&gt;Rust has two types of macros: declarative and procedural.&lt;/p&gt;

&lt;p&gt;Declarative macros are similar to ones in C++, but the key difference is that macros in Rust are hygienic in the sense that they can not interact with variables outside of their scope and cause any unwanted behavior.&lt;/p&gt;

&lt;p&gt;Procedural macros are much more powerful and complex. They act more like functions: they accept code as an input, manipulate it, and return the enriched code as an output, all at compile time.&lt;/p&gt;

&lt;p&gt;In conclusion, C++ is used far more often than Rust.  That said,  big companies like Microsoft, Google, and Apple are gradually integrating Rust with their products. C++ is not going away any time soon, thanks to its large ecosystem and legacy code built around it. Rust, however, is slowly beginning to be used as a system programming language.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-the-best-way-to-learn-rust-programming"&gt;
  &lt;/a&gt;
  What is the best way to learn Rust programming?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The most logical way to start learning Rust is to read the &lt;a href="https://doc.rust-lang.org/book/"&gt;Rust book&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Depending on if you already have a specific application you want to build, you might want to skip the macros section and Unsafe Rust.&lt;/li&gt;
&lt;li&gt;As always, start small. One web application I have built as a practice is a to-do list manager.&lt;/li&gt;
&lt;li&gt;There are many useful sites where you can practice, like &lt;a href="https://exercism.io/tracks/rust"&gt;exercism.io&lt;/a&gt; or &lt;a href="https://www.codewars.com/?language=rust"&gt;codewars.com&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As mentioned before, Rust has many useful third-party crates and tools; however, it already has a decent number of frameworks depending on what you want to do.  Learning about them is the path you want to take next. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rocket&lt;/strong&gt; - a web framework built on the nightly version of Rust; it's boilerplate-free, type-safe, and has a large ecosystem. It also features rich, supporting cookies, streams, built-in templating, and JSON types.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Actix&lt;/strong&gt; – a web framework also aimed to be more stable than a rocket; however, you will need to use third-party packages as it is newer and has less support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gotham&lt;/strong&gt; – flexible web framework built on stable Rust, statically typed, and type-safe. Supports Async operations by using the Tokio project and Hyper.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Amethyst&lt;/strong&gt; - is a game engine; it has a pool of features you might need to build a larger application. It also has better support for third party libraries.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bevy&lt;/strong&gt; - an open-source, newer, simple, data-driven game engine, heavily inspired by amethyst, supports real-time 2d rendering, 3d rendering, multiple platforms (Windows, Mac, Linux, and soon iOS and Android). Hot reload with fast compile times.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Druid&lt;/strong&gt; - an experimental, data-oriented, Rust native UI toolkit. Based on Flutter and SwiftUI. Its current development is largely driven by its use in Runebender (a new font editor).&lt;/p&gt;

</description>
      <category>rust</category>
      <category>programming</category>
      <category>backend</category>
      <category>learning</category>
    </item>
    <item>
      <title>Basics of Java #11</title>
      <author>Chathu Rashmini</author>
      <pubDate>Mon, 10 May 2021 11:36:46 +0000</pubDate>
      <link>https://dev.to/chathurashmini/basics-of-java-11-6ef</link>
      <guid>https://dev.to/chathurashmini/basics-of-java-11-6ef</guid>
      <description>&lt;p&gt;This article is based on the areas comparison operators, logical operators, and conditional operators.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#comparison-operators"&gt;
  &lt;/a&gt;
  Comparison Operators
&lt;/h2&gt;

&lt;p&gt;While coding you may need to compare two numbers to check whether those two numbers are equal or not. To check whether they are equal, we have to use two equal signs (==). And to check if they are unequal we have to use exclamation mark followed by an equal sign (!=). Try out the following code segment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At one glace you can see that x and y are not equal at all. Therefore, this code gives output as 'false' and 'true' for the given two &lt;code&gt;println()&lt;/code&gt; lines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#logical-operators"&gt;
  &lt;/a&gt;
  Logical Operators
&lt;/h2&gt;

&lt;p&gt;You may want to know whether a given mark of a subject is in a particular range (Is 34 in between 10 and 50?). For that you can use logical operators. There are several logical operators like and operator (&amp;amp;&amp;amp;), or operator (||), and not operator (!). In a case where we want all the conditions to be true we use 'and operator'. If satisfying just one condition is enough, then we can use 'or operator'. 'Not operator' is used to reverse a Boolean value. Let's go through below code segment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;isWarm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isWarm&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;mayWarm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mayWarm&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;notWarm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!(&lt;/span&gt;&lt;span class="n"&gt;mayWarm&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;notWarm&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code will first print 'true'. That is because the value of the variable &lt;code&gt;temp&lt;/code&gt; (22) is in between 20 and 30. The next line will also print 'true' because, though &lt;code&gt;temp&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; less than 15 it is greater than 20. So one condition is satisfied. Since we have used 'or operator' there, it gives true. Next line will print 'false'. The variable &lt;code&gt;notWarm&lt;/code&gt; is assigned with the &lt;em&gt;reversed&lt;/em&gt; value of the variable &lt;code&gt;mayWarm&lt;/code&gt;. Since &lt;code&gt;mayWarm&lt;/code&gt; is true, &lt;code&gt;notWarm&lt;/code&gt; gives false.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conditional-operators"&gt;
  &lt;/a&gt;
  Conditional Operators
&lt;/h2&gt;

&lt;p&gt;This operator is to check whether conditions are true or false. Assume there is an institute which gives grades A, B, C, and F according to the marks students have scored.&lt;br&gt;
'If' a student has got marks in the range [75, 100], he is given an 'A'.&lt;br&gt;
'Or else if' his score is in the range [50, 74] he gets a 'B'.&lt;br&gt;
'Else if' the score is in the range [25, 49] a 'C' is given.&lt;br&gt;
'If not' the student gets an 'F'. So how can you code this? Go through the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"A"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"You are a genius!"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"B"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marks&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"F"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go through above code line by line. To give an 'A', marks have to be in the range 75 to 100. Therefore, both of the conditions ('75 or greater than that' &lt;em&gt;and&lt;/em&gt; 'less than 100 or 100') have to be true. That is why we have to use &lt;strong&gt;and&lt;/strong&gt; operator here (&amp;amp;&amp;amp;). &lt;br&gt;
After that we need to check conditions for a 'B' pass. Marks have to be '50 or greater than 50' &lt;em&gt;and&lt;/em&gt; 'less than 75'. Here we need not to check the condition 'less than 75'. That is because the first 'if' condition filter out any mark which is less than 75. So that condition is guaranteed by first 'if' statement. So we are only going to check whether the mark is above or equal to 50. Same process goes to 'C' grade as well.&lt;br&gt;
Then we are remained with the last condition. If marks are less than 25 we have to give an 'F'. You know that the 'else if' condition which gives 'C' pass filter out any mark that is less than 50. So this condition is already guaranteed. Therefore, we need not to write any condition here. Just writing the 'else' is enough.&lt;br&gt;
You may have noticed that I have only used curly braces '{}' for the first 'if' statement. Why is that? As you can see, I have written more than one code lines inside that 'if' condition. Hence we need to add curly braces to let java know which code lines comes under that particular condition. However, in other two 'else if' and 'else' conditions I have only written one code line. In such cases there is no any need of using curly braces. But using indentation in such cases is very important. It also makes your code looks clean and tide.&lt;br&gt;
Change the value of the &lt;code&gt;marks&lt;/code&gt; variable into different values and check different outputs you get.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You also can have nested conditional statements. For example, you can have another if condition inside of one if condition.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h3&gt;

&lt;p&gt;Ask the user to input his salary. Check if he has entered a negative value. If not add a bonus of 20,000 into his salary. Now check whether the total salary is greater then 90,000. If so print 'Maximum salary range'. If not check whether the salary is in between 90,000 and 50,000. If so print 'Moderate salary range'. Finally if the salary is 20,000 print 'Bonus only'.&lt;/p&gt;

&lt;p&gt;Does this conditions checking thing has to be this much of a trouble always? Like if you want to check whether a number is greater than 100 or not, do you really have to struggle with if and else statements? Not at all! There is a much easier way by using &lt;strong&gt;Ternary operator (?)&lt;/strong&gt;.&lt;br&gt;
In the given code I am going to check if a number is greater than 100. And if so I will print 'Greater then 100' else I will print 'Less than or equal 100'.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;163&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;nmberGroup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s"&gt;"Greater then 100"&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Less than or equal 100"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numberGroup&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is it? Yes! Precise, accurate and less code lines as well. &lt;code&gt;number &amp;gt; 100&lt;/code&gt; checks whether the number is greater than 100. If that condition is true, the first line after the ternary operator (?) gets printed. If it is not the case (which means if number is less than or equal to the 100), the second line (life after the colon : ) gets printed. Try to use this most often than huge if else code blocks, because this is more handy and makes your code neat.&lt;/p&gt;

&lt;p&gt;Let's learn about loops in our next article :)&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Adding port "8080/tcp" using UFW</title>
      <author>Ritabrata Das</author>
      <pubDate>Mon, 10 May 2021 11:10:35 +0000</pubDate>
      <link>https://dev.to/ritabratadas343/adding-port-8080-tcp-using-ufw-4bbe</link>
      <guid>https://dev.to/ritabratadas343/adding-port-8080-tcp-using-ufw-4bbe</guid>
      <description>&lt;p&gt;Hello there!!1 &lt;br&gt;
I have recently done a research on &lt;strong&gt;how to add the port 8080/tcp&lt;/strong&gt; in my system and list all the active ports in a text file called &lt;strong&gt;"zones.txt"&lt;/strong&gt;. I use a Linux Mint 20.1 XFCE system and I came across the apt-package named &lt;strong&gt;Uncomplicated Firewall&lt;/strong&gt;. This package allows you to open ports on your system and makes them ready for use using ssh. &lt;br&gt;
&lt;em&gt;Here is a screenshot on how to progress with the procedures.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_Dx9E-_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ar7rvd8m6l3dizzlpthx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_Dx9E-_g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ar7rvd8m6l3dizzlpthx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I am also attaching my GitHub gist which provides an detailed explanation on how to implement this in your system.&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
 

&lt;h4&gt;
  &lt;a href="#best-of-luck-and-may-the-source-be-with-you-"&gt;
  &lt;/a&gt;
  Best of Luck and May the Source be with You 🐧💗.
&lt;/h4&gt;

</description>
      <category>linux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>Censorship on DEV Community 😶🤐</title>
      <author>Amelia Vieira Rosado</author>
      <pubDate>Mon, 10 May 2021 11:08:26 +0000</pubDate>
      <link>https://dev.to/technoglot/censorship-on-dev-community-11de</link>
      <guid>https://dev.to/technoglot/censorship-on-dev-community-11de</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@markuswinkler?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Markus Winkler&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer 🚨&lt;/strong&gt;: No, despite the possibly misleading title of my post, I am NOT suggesting in ANY way that the team behind this platform is full of tyrants. Now, proceed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hey there 👋🏻 I'd like to start the week at a different pace this time. Hence this post.&lt;/p&gt;

&lt;p&gt;As of late, I took notice of some posts around here where the author has chosen to hide certain comments. I can imagine that this has been around since the very inception of this platform. However, hear me out. &lt;/p&gt;

&lt;p&gt;I'm not entirely okay with the practice of hiding comments. I am, however, fully onboard with the idea of fostering a safe, inclusive and respectful community on this platform. I follow the Code of Conduct (CoC) almost to the letter and I understand and acknowledge the need for the CoC in the first place.&lt;/p&gt;

&lt;p&gt;Here's the deal. Imagine that I post a blog here and someone leaves a comment I disagree with. As the author I have the "power" to hide this comment for whatever reason I see fit, even if the opinion expressed in the comment/by the commenter didn't violate the CoC in any way. &lt;/p&gt;

&lt;p&gt;I will be honest with you all. On more than one occasion I felt tempted to hide a comment or two on my posts (especially the unsolicited and shameless self promo). But I chose not to do so. However, I am seeing more and more folks hiding comments on their posts. Yes, their posts are sometimes controversial and hence elicit really candid responses from other members of the community. In my experience, it would have been great to see the hidden comments. I want to see the bigger picture, not just what the author wants me to see. That's it. That's the "issue" I have with this. &lt;/p&gt;

&lt;p&gt;Now let me be very clear, before anybody jumps to conclusions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I have no intention of telling people how to "moderate" the comments on their posts. &lt;/li&gt;
&lt;li&gt;I understand that the CoC is there for a reason and that it will be enforced no matter what. That's great. No objections there.&lt;/li&gt;
&lt;li&gt;No, despite the possibly misleading title of my post, I am NOT suggesting in ANY way that the team behind this platform is full of tyrants. They have noble intentions and are doing their absolute best to make and keep this place wonderful and welcoming.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The bottom-line is this: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do we want authors to possibly misuse the "Hide comment" feature? Do we want authors to hide comments that disagree with their narrative but are otherwise respectful, constructive and abiding to the CoC?&lt;/li&gt;
&lt;li&gt;Can we, as users late to the party, have a way of seeing the hidden comments? Never mind deleted comments, these are gone for good. (P.S. if there's a way of reading hidden comments, by all means please enlighten me.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I am missing something and this is already being enforced whatsoever, please share the relevant docs to such information. I am genuinely curious and just trying to contribute to making this corner of the net a little more wholesome. Would be a shame to see people getting censored just because an author fails to take criticism like a grown up. I've seen it countless of times across various platforms and would hate to see this take DEV.to by storm.&lt;/p&gt;

&lt;p&gt;By all means, drop your comments and thoughts below. I won't hide them (no matter how great the temptation). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NXBRybF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252Fmedia1.tenor.com%252Fimages%252F1f795c93fd3fbf1d6027cbd9093cc99e%252Ftenor.gif%253Fitemid%253D11745137%26f%3D1%26nofb%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXBRybF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://external-content.duckduckgo.com/iu/%3Fu%3Dhttps%253A%252F%252Fmedia1.tenor.com%252Fimages%252F1f795c93fd3fbf1d6027cbd9093cc99e%252Ftenor.gif%253Fitemid%253D11745137%26f%3D1%26nofb%3D1" alt="cambio y fuera"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Have a nice week folks!&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;br&gt;&lt;br&gt;
Still here? Catch me on &lt;a href="https://twitter.com/technoglot"&gt;Twitter&lt;/a&gt; or find me &lt;a href="https://linktr.ee/technoglot"&gt;elsewhere&lt;/a&gt;! If you like my blogs and are feeling generous, kindly consider to 👇🏻&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/technoglot"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iQYkOYbQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i9olbzsmrxb3tksl6iqf.png"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cftknAn3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8iwes672pxpljtq7z6oy.png" alt="technoglot footer banner"&gt;

</description>
      <category>meta</category>
      <category>discuss</category>
      <category>watercooler</category>
      <category>healthydebate</category>
    </item>
  </channel>
</rss>
