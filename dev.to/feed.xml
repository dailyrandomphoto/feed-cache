<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Estimate E-commerce Website Development cost in 2021?</title>
      <author>Vrinsoft PTY LTD</author>
      <pubDate>Thu, 16 Sep 2021 05:16:57 +0000</pubDate>
      <link>https://dev.to/vrinsoftau/how-to-estimate-e-commerce-website-development-cost-in-2021-1ee5</link>
      <guid>https://dev.to/vrinsoftau/how-to-estimate-e-commerce-website-development-cost-in-2021-1ee5</guid>
      <description>&lt;p&gt;E-commerce website development cost is one of the wide concepts of 2021 and that is because it is consistently praised. As we are living in the era of digitization, the popularity of online shopping has taken a huge place in 2021. Well, having seen the growth and the importance of e-commerce development, many businesses have thought to get themselves switched into the market of e-commerce development.&lt;/p&gt;

&lt;p&gt;Though e-commerce development companies are earning a good figure, In 2021, e-commerce sales are expected to account for 18.1 percent of retail sales worldwide. Still many of them are confused with e-commerce Website Development Costs. That being said, here we are going to discuss the same:&lt;/p&gt;

&lt;p&gt;For more information visit our blog: &lt;a href="https://www.vrinsoft.com.au/estimated-e-commerce-website-development-cost/"&gt;&lt;strong&gt;How to Estimate E-commerce Website Development cost in 2021?&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>awardwinning</category>
      <category>appdevelopmentaustralia</category>
      <category>ecommercewebsitedevelopment</category>
      <category>melbourne</category>
    </item>
    <item>
      <title>4 Books Every Junior Software Developer Should Read</title>
      <author>Jordan Burroughs</author>
      <pubDate>Thu, 16 Sep 2021 01:59:59 +0000</pubDate>
      <link>https://dev.to/jburroughs/4-books-every-junior-software-developer-should-read-3oi7</link>
      <guid>https://dev.to/jburroughs/4-books-every-junior-software-developer-should-read-3oi7</guid>
      <description>&lt;p&gt;If you decide to click away after seeing that I recommend the same titles that every other article tells you to read, I wouldn't blame you. Although, there is a reason why these books resonate with nearly all software developers that read them (and not only beginners).&lt;/p&gt;

&lt;p&gt;This post will be different because I will be giving you a brief explanation on why you should read them and what you, as a new software developer, should expect to get out of them. &lt;/p&gt;

&lt;p&gt;This is a post that I know would have been helpful to me when I first started looking to enhance my new career not too long ago.&lt;/p&gt;

&lt;p&gt;So I was (and still am) in your shoes. Without further ado, here's what you came for:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CWsH4Ua_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnp5z322in6no0gc75lb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CWsH4Ua_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gnp5z322in6no0gc75lb.jpg" alt="Cracking the Coding Interview Cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-cracking-the-coding-interview"&gt;
  &lt;/a&gt;
  1. Cracking the Coding Interview
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#by-gayle-laakmann-mcdowell"&gt;
  &lt;/a&gt;
  &lt;em&gt;by Gayle Laakmann McDowell&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Whether you are currently looking for a job or whether you are perfectly happy in your current role, this book is an absolute must for any dev, especially juniors. &lt;/p&gt;

&lt;p&gt;Not only are there endless amounts of practice problems with detailed solutions, but the first sections of the book dissect the entire interview process and give quick concept overviews that anyone could find useful for reference, or even last minute cramming (which I would &lt;strong&gt;NOT&lt;/strong&gt; recommend doing, but it doesn't hurt to fill that need).&lt;/p&gt;

&lt;p&gt;I first got this book in college to prep for internship interviews and ever since then, I see myself always referring back to it whenever another interview is coming up, or when I need a quick refresher on certain topics.&lt;/p&gt;

&lt;p&gt;From behavioral and technical interview tips to data structures and algorithms, this one has it all. 13/10 would recommend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4ZvbgJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ivx3kmbqikn59nidfyj.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y4ZvbgJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ivx3kmbqikn59nidfyj.jpeg" alt="Living by the Code Cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-living-by-the-code"&gt;
  &lt;/a&gt;
  2. Living by the Code
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#by-enrique-l%C3%B3pez-ma%C3%B1as-ray-wenderlich"&gt;
  &lt;/a&gt;
  &lt;em&gt;by Enrique López Mañas, Ray Wenderlich&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;This one was pretty interesting and unique. The authors basically interview top developers and innovators in the tech space and they give advice to young developers. &lt;/p&gt;

&lt;p&gt;What else do I need to say? You get advice straight from the horse's mouth.&lt;/p&gt;

&lt;p&gt;But here's what I love the most:&lt;/p&gt;

&lt;p&gt;Each interviewee is usually asked questions related to their specific field or domain, but there is also a set questions that the interviewer asks &lt;strong&gt;everyone&lt;/strong&gt;. Among those is: "What are the 3 books (or resources) that have had a lasting impact on how you do your work?" The authors then list that person's recommendations at the end of each interview!&lt;/p&gt;

&lt;p&gt;In the end, you have an endless amount of resources that you can use to spawn new areas of interest and help naturally guide you in the beginnings of your career. From this book alone, my reading list has expanded tenfold and yours can too, as soon as you pick up this book.&lt;/p&gt;

&lt;p&gt;Good starting point to boost your career. 12/10&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BHrDFi7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bfi6rqlrtwkio3or46u0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BHrDFi7H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bfi6rqlrtwkio3or46u0.jpeg" alt="Clean Code Cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-clean-code-a-handbook-of-agile-software-craftsmanship"&gt;
  &lt;/a&gt;
  3. Clean Code: A Handbook of Agile Software Craftsmanship
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#by-uncle-bob-robert-c-martin"&gt;
  &lt;/a&gt;
  &lt;em&gt;by Uncle Bob (Robert C. Martin)&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Ah yes... the quintessential classic. This book appears on every software dev book recommendation list. It is pretty much the bible for clean code that is a must read for everyone in the field.&lt;/p&gt;

&lt;p&gt;I read this coming out of college and for me, it was a revelation. In school they teach you the basics of programming, computer theory, and maybe even some assembly. But, Uncle Bob teaches you importance of clean code and the advantages of adjusting your style to fit it.&lt;/p&gt;

&lt;p&gt;Hallelujah! 14/10&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yyz3U5gX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxpm2ikp0wdatzlomjoy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yyz3U5gX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxpm2ikp0wdatzlomjoy.jpg" alt="The Pragmatic Programmer Cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-the-pragmatic-programmer-from-journeyman-to-master"&gt;
  &lt;/a&gt;
  4. The Pragmatic Programmer: From Journeyman to Master
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#by-andy-hunt-dave-thomas"&gt;
  &lt;/a&gt;
  &lt;em&gt;by Andy Hunt, Dave Thomas&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Let's finish off with yet another classic. With a seemingly endless series of topics (and smaller tips within those) the authors analyze many different aspects of software development and how to think beyond if-statements and for-loops. &lt;/p&gt;

&lt;p&gt;From the perspective of a beginner, you can't get much better than this. There are so many tidbits of information, that any time you reread this book, you'll learn something new to apply directly to your code and career. &lt;/p&gt;

&lt;p&gt;Learn exactly what it means to be a Pragmatic Programmer, you won't regret it. 13/10 - exceptionally pragmatic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;One common theme with all of these books is the idea that you will always find your way back to them throughout your career. That is why it is crucial to get them in your library ASAP.&lt;/p&gt;

&lt;p&gt;There are many other books I have read that didn't make this list (including some non-technical books that can make an &lt;strong&gt;overall&lt;/strong&gt; impact on your life), but let's start with these guys for now. &lt;/p&gt;

&lt;p&gt;I'm always open to book suggestions, so leave a comment with some of your good reads.&lt;/p&gt;

&lt;p&gt;Remember that it is never the wrong choice to invest in your education! The time and money you spend to better yourself now, will always payoff big in the long run. 😀&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading-my-first-ever-blog-if-you-want-more-tech-tips-software-stuff-and-bussin-blogs-you-can-throw-me-a-follow-on-twitter"&gt;
  &lt;/a&gt;
  Thanks for reading my first ever blog! If you want more tech tips, software stuff, and bussin' blogs, you can throw me a follow on &lt;a href="https://www.twitter.com/JBurroughsTech"&gt;Twitter&lt;/a&gt;🔥🤘🏽🐶
&lt;/h3&gt;

</description>
      <category>beginners</category>
      <category>books</category>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Vocabulary Building day15</title>
      <author>vindhya Hegde </author>
      <pubDate>Thu, 16 Sep 2021 01:51:31 +0000</pubDate>
      <link>https://dev.to/vindhyasadanand/vocabulary-building-5eko</link>
      <guid>https://dev.to/vindhyasadanand/vocabulary-building-5eko</guid>
      <description>&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;glut&lt;/strong&gt;(noun): an excessive supply&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82D3Bl_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://previews.123rf.com/images/rudall30/rudall301103/rudall30110300067/9187072-iconic-white-figure-sit-with-the-glut.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82D3Bl_Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://previews.123rf.com/images/rudall30/rudall301103/rudall30110300067/9187072-iconic-white-figure-sit-with-the-glut.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=glut&amp;amp;oq=glut&amp;amp;aqs=chrome..69i57j0i67i433j0i67j0i67i433l2j69i60l2j69i61.1621j0j7&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;fortuitous&lt;/strong&gt;(adjective): happening by a lucky chance; fortunate.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Fp9Yk1K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/hrZboPJQV2w/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Fp9Yk1K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/hrZboPJQV2w/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=fortuitous&amp;amp;oq=fortuitous&amp;amp;aqs=chrome..69i57j0i433i512j0i131i433i512j0i512l7.12059j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;superfluous&lt;/strong&gt;(adjective): unnecessary, especially through being more than enough.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y6e0BPaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/zZL-r30cla8/maxresdefault.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y6e0BPaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/zZL-r30cla8/maxresdefault.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=superfluous+meaning&amp;amp;oq=superfluous&amp;amp;aqs=chrome.0.0i433i512j69i57j0i512l8.8189j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;obscure&lt;/strong&gt;(verb): make unclear.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tk5sqWI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://1.bp.blogspot.com/_oOfgV-vqn1E/S7hK5RYtbcI/AAAAAAAAAMY/TyPpZwaoc7Q/s320/AMBIGUOUS-Unclear%2Bin%2Bmeaning%253B%2Bconfusing%253B%2Bcapable%2Bof%2Bbeing%2Binterpreted%2Bin%2Bdifferent%2Bways.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tk5sqWI4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/http://1.bp.blogspot.com/_oOfgV-vqn1E/S7hK5RYtbcI/AAAAAAAAAMY/TyPpZwaoc7Q/s320/AMBIGUOUS-Unclear%2Bin%2Bmeaning%253B%2Bconfusing%253B%2Bcapable%2Bof%2Bbeing%2Binterpreted%2Bin%2Bdifferent%2Bways.gif" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=obscure&amp;amp;oq=obscure&amp;amp;aqs=chrome..69i57j46i275i433i512j0i20i263i433i512j0i20i263i512j0i433i512j0i512l3j0i433i512l2.3668j1j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;mitigate&lt;/strong&gt;(verb): make (something bad) less severe, serious, or painful&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DcLuDlkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://smallbusinessify.com/wp-content/uploads/2018/11/How-to-mitigate-risks-in-my-business-1024x751.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DcLuDlkV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://smallbusinessify.com/wp-content/uploads/2018/11/How-to-mitigate-risks-in-my-business-1024x751.jpg" alt="alt text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.google.com/search?q=mitigate&amp;amp;oq=mitigate&amp;amp;aqs=chrome.0.69i59j0i131i433i512j0i20i263i512j0i512l2j0i433i512l2j0i512l2j0i433i512.3656j0j9&amp;amp;sourceid=chrome&amp;amp;ie=UTF-8"&gt;Checkout Pronunciation&lt;/a&gt;&lt;br&gt;
I hope this helps you if you are preparing for GRE exams.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>gre</category>
      <category>day15</category>
    </item>
    <item>
      <title>Clean your condition 🧼</title>
      <author>Heru Hartanto</author>
      <pubDate>Thu, 16 Sep 2021 00:27:58 +0000</pubDate>
      <link>https://dev.to/elukuro/clean-your-condition-4o3n</link>
      <guid>https://dev.to/elukuro/clean-your-condition-4o3n</guid>
      <description>&lt;h2&gt;
  &lt;a href="#always-positive"&gt;
  &lt;/a&gt;
  Always positive
&lt;/h2&gt;

&lt;p&gt;It's need extra effort to understanding logic in negative condition, avoid it as you can&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ❌ Don't 

function isUserNotVerified(){

}

if(!userVerified){

}

// ✅ Do

function isUserVerified(){

}

if(userVerified){

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-shorthands-if-possible"&gt;
  &lt;/a&gt;
  Use Shorthands if possible
&lt;/h2&gt;

&lt;p&gt;Shorthands make your code use less line and easier to read&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ❌ Don't

if(isActive ==null){

}

if(firstname !== null || firstname !=='' || firstname !== undefined){

}

const isUserValid = user.isVerified() &amp;amp;&amp;amp; user.isActive() ? true : false;

// ✅ Do

if(isActive) {

}

if(!!firstname){

}

const isUserValid = user.isVerified() &amp;amp;&amp;amp; user.isActive()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-literals-over-switch-statements"&gt;
  &lt;/a&gt;
  Object literals over Switch statements
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// ❌ Don't

const getStatus = (status) =&amp;gt; {
  switch (status) {
    case "success":
      return "green";
    case "failure":
      return "red";
    case "warning":
      return "yellow";
    case "loading":
    default:
      return "blue";
  }
};

// ✅ Do
const statusColors = {
  success: "green",
  failure: "red",
  warning: "yellow",
  loading: "blue",
};

const getStatus = (status) =&amp;gt; statusColors[status] || statusColors.loading;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#use-optional-chaining"&gt;
  &lt;/a&gt;
  Use optional chaining
&lt;/h2&gt;

&lt;p&gt;Remember that optional chaining is not working with IE browser yet, see &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining"&gt;here&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const alice = {
    name:'Alice',
    cat:{
        name:'Nala'
    }
}
// ❌ Don't

const cat = (alice &amp;amp;&amp;amp; alice.cat &amp;amp;&amp;amp; alice.cat.name) || 'N/A';

// ✅ Do

const cat = alice?.cat?.name ?? 'N/A';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Using a greedy randomized algorithm to create art</title>
      <author>Daniel Dominguez</author>
      <pubDate>Thu, 16 Sep 2021 00:27:34 +0000</pubDate>
      <link>https://dev.to/dominguezdaniel/using-a-greedy-randomized-algorithm-to-create-art-3kpk</link>
      <guid>https://dev.to/dominguezdaniel/using-a-greedy-randomized-algorithm-to-create-art-3kpk</guid>
      <description>&lt;p&gt;The greedy randomized adaptive search procedure (also known as GRASP) is a metaheuristic algorithm commonly applied to combinatorial optimization problems in which each iteration consists basically of two phases: construction and local search. The construction phase builds a feasible solution, whose neighborhood is investigated until a local minimum is found during the local search phase.&lt;/p&gt;

&lt;p&gt;First, the darkest pixel is found. Then a number of random lines are drawn through that point, and the pixel values along each line are added together. The line with the darkest average is chosen, and the value of that line is subtracted from the image. Then the whole process is started over again for however many lines we are drawing. &lt;/p&gt;

&lt;p&gt;By the nature of the algorithm, the optimal line drawing configuration is probably not achieved, but performance is far superior to the naive method of checking every line.&lt;/p&gt;

</description>
      <category>art</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Intro to ViteJS</title>
      <author>Rene Rubalcava</author>
      <pubDate>Thu, 16 Sep 2021 00:14:00 +0000</pubDate>
      <link>https://dev.to/odoenet/intro-to-vitejs-54cp</link>
      <guid>https://dev.to/odoenet/intro-to-vitejs-54cp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#rambling"&gt;
  &lt;/a&gt;
  Rambling
&lt;/h2&gt;

&lt;p&gt;There used to be a time when I would write JavaScript in multiple files. They might look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// start.js&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;// multiple js files of code&lt;/span&gt;

&lt;span class="c1"&gt;// end.js&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;

&lt;span class="c1"&gt;// use a makefile to join them together&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then I would use a &lt;code&gt;make&lt;/code&gt; file to run a script that just concatenated all those files together. I didn't care much about minification or optimization. I don't think I was alone here, I'm pretty sure I got this idea from an article way back when. I do remember writing Ant scripts when the project was a mix of JavaScript and Flash, &lt;em&gt;that was fun&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;If the project was big enough, there were tools like &lt;a href="https://www.crockford.com/jsmin.html"&gt;jsmin&lt;/a&gt;. If the project warranted it, I would use &lt;a href="https://dojotoolkit.org/"&gt;Dojo Toolkit&lt;/a&gt;, which could probably make me a sandwich if I wanted it to.&lt;/p&gt;

&lt;p&gt;As a developer, no matter the language, build tools &lt;em&gt;just come with the territory&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ok-no-more-rambling"&gt;
  &lt;/a&gt;
  Ok, no more rambling
&lt;/h2&gt;

&lt;p&gt;My point in all this is that if you're not careful, build tools can get unweildy. This is where a tool like &lt;a href="https://vitejs.dev/"&gt;ViteJS&lt;/a&gt; comes in.&lt;/p&gt;

&lt;p&gt;Vite is like a breath of fresh air. It handles ES modules natively, meaning that builds are super fast, because it just builds ESM, especially dev builds! Out of the box, you don't even need a config file, &lt;em&gt;it just works&lt;/em&gt;.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pnv6p9eZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9FWP3uVIAMgv7x.png" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--RzqNKZyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/848265616645537792/LR5p0Mj0_normal.jpg" alt="Rene (Hecho En East Los) Rubalcava profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Rene (Hecho En East Los) Rubalcava
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/odoenet"&gt;@odoenet&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      my vitejs config 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:34 PM - 18 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1428017428441681926" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1428017428441681926" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1428017428441681926" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Under the hood, Vite uses &lt;a href="http://esbuild.github.io/"&gt;esbuild&lt;/a&gt;. For CSS, it can handle &lt;a href="https://postcss.org/"&gt;PostCSS&lt;/a&gt; if you add a config for it, or &lt;a href="https://github.com/css-modules/css-modules"&gt;css-modules&lt;/a&gt; if you add &lt;code&gt;.module.css&lt;/code&gt; files, or &lt;a href="https://sass-lang.com/"&gt;sass&lt;/a&gt;. It will also make liberal use of the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import.meta"&gt;&lt;code&gt;import.meta&lt;/code&gt;&lt;/a&gt; to add some sugar methods like &lt;a href="https://vitejs.dev/guide/features.html#glob-import"&gt;glob imports&lt;/a&gt; or adding environment variables. You can switch the build to use &lt;a href="https://terser.org/"&gt;terser&lt;/a&gt; and get a slightly smaller build, but it is a little slower. In my regular usage, I don't notice a huge difference, so I leave esbuild as default.&lt;/p&gt;

&lt;p&gt;It handles &lt;code&gt;JSON&lt;/code&gt; and &lt;code&gt;wasm&lt;/code&gt; imports for you. Even &lt;a href="https://vitejs.dev/guide/features.html#web-workers"&gt;workers&lt;/a&gt; can be loaded via &lt;code&gt;import WorkIt from './workit?worker'&lt;/code&gt;. Just when you thought you could escape loader plugins, &lt;em&gt;they drag you back in!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But I have some complex workflows, I use &lt;code&gt;ejs&lt;/code&gt; templates, I need sprite sheet generation&lt;/em&gt;... I hear you. The great thing about Vite is that it uses &lt;a href="https://www.rollupjs.org/"&gt;rollup&lt;/a&gt;, so you can use rollup plugins if you want. It also has a suite of &lt;a href="https://github.com/vitejs/awesome-vite#plugins"&gt;vite plugins&lt;/a&gt; available. Just add them to your &lt;a href="https://vitejs.dev/config/"&gt;&lt;code&gt;vite.config.js&lt;/code&gt;&lt;/a&gt; and you're good to go.&lt;/p&gt;

&lt;p&gt;Most projects I don't even need a config. It's insane.&lt;/p&gt;

&lt;p&gt;How to use it?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init vite@latest my-vite-app
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you run that command, you'll be asked if you want a vanilla project or if you want react/preact/vue and even TypeScript. It's really that simple and makes me smile.&lt;/p&gt;

&lt;p&gt;Geez, I feel like this should be a longer blog post. But it really is that simple. Now, I wouldn't try converting your large webpack application to Vite. Don't get me wrong, webpack has a ton of plugins, loaders, community, and history.&lt;/p&gt;

&lt;p&gt;I should note, I have had some issues in building third-party css where I need to modify the url imports, like I can with the resolve-url-loader for webpack, but that has been the only very specific issue I've run into.&lt;/p&gt;

&lt;p&gt;Vite is another option, and one I think is great for new projects! In testing, I can get a smaller build with webpack, not much smaller, but smaller. So if squeezing every last kb out of your build is your goal, maybe webpack is your thing. You do you, and build awesome apps!&lt;/p&gt;

&lt;p&gt;You can check out more info in this video below!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/sV1Tcie2SR8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>vitejs</category>
    </item>
    <item>
      <title>Part 2: 5 COOL CSS PROPERTIES</title>
      <author>Aya Bouchiha</author>
      <pubDate>Wed, 15 Sep 2021 23:55:43 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/part-2-5-cool-css-properties-bdl</link>
      <guid>https://dev.to/ayabouchiha/part-2-5-cool-css-properties-bdl</guid>
      <description>&lt;p&gt;Hi, I'm &lt;a href="//developer.aya.b@gmail.com"&gt;Aya Bouchiha&lt;/a&gt;, and this is part 2 of  &lt;a href="https://dev.to/ayabouchiha/5-cool-css-properties-part-1-nkg/"&gt;5 cool CSS properties&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quotes"&gt;
  &lt;/a&gt;
  quotes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;quotes&lt;/strong&gt;: helps you to chose the quotation marks for a quote element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/eYRejbX?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scrollbehavior"&gt;
  &lt;/a&gt;
  scroll-behavior
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;scroll-behavior&lt;/strong&gt;:  specifies whether to smoothly animate the scroll position, instead of a straight jump, when the user clicks on a link within a scrollable box.&lt;a href="https://www.w3schools.com/cssref/pr_scroll-behavior.asp"&gt;more info&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/bGRYmeb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#userselect"&gt;
  &lt;/a&gt;
  user-select
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;user-select&lt;/strong&gt;: used to allow or deny the user to select content like a text, image...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/JjJOmNL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writingmode"&gt;
  &lt;/a&gt;
  writing-mode
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;writing-mode&lt;/strong&gt;: allows you to specify the writing mode (horizontal-tb, vertical-lr, vertical-rl)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/abwVRGY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#textoverflow"&gt;
  &lt;/a&gt;
  text-overflow
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;text-overflow&lt;/strong&gt;: defines the way that the overflowed content should be displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Aya_Bouchiha/embed/VwWrEqR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;scroll-behavior&lt;/strong&gt;:  specifies whether to smoothly animate the scroll position, instead of a straight jump, when the user clicks on a link within a scrollable box.&lt;/li&gt;
&lt;li&gt; &lt;strong&gt;quotes&lt;/strong&gt;: helps you to chose the quotation marks for a quote element.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;user-select&lt;/strong&gt;: used to allow or deny the user to select content like a text, image...&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;writing-mode&lt;/strong&gt;: allows you to specify the writing mode (horizontal-tb, vertical-lr, vertical-rl)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;text-overflow&lt;/strong&gt;: defines the way that the overflowed content should be displayed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/"&gt;https://www.w3schools.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#suggested-posts"&gt;
  &lt;/a&gt;
  Suggested Posts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/57-essential-html-tags-to-know-as-a-beginnert-1f3f"&gt;57 Essential HTML Tags To Know As A Beginner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/5-html-tags-that-almost-nobody-knows-5p5"&gt;part-1: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/ayabouchiha/part-2-5-html-tags-that-almost-nobody-knows-nj8"&gt;Part-2: 5 HTML Tags That Almost Nobody Knows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a great day!&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Nested Routing in react-router-dom</title>
      <author>Joe Christensen</author>
      <pubDate>Wed, 15 Sep 2021 23:53:45 +0000</pubDate>
      <link>https://dev.to/christensenjoe/nested-routing-in-react-router-dom-1n1i</link>
      <guid>https://dev.to/christensenjoe/nested-routing-in-react-router-dom-1n1i</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YGXuvjbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlq3mp4bkd0bfrvssrhj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YGXuvjbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nlq3mp4bkd0bfrvssrhj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-reactrouterdom"&gt;
  &lt;/a&gt;
  What is react-router-dom?
&lt;/h1&gt;

&lt;p&gt;Ever wondered how websites have custom paths? How come you can type in &lt;code&gt;https://dev.to/readinglist&lt;/code&gt; and your browser knows to bring you directly to your &lt;code&gt;dev.to&lt;/code&gt; reading list? Well, the website you're navigating to, in our case &lt;code&gt;dev.to&lt;/code&gt;, has set up some custom routes. They either have client-side or server-side routes. Client-side routes are generally used in single-page applications. They allow for routing capabilities without needing multiple html pages. Server-side routes are used in multi-page applications, where each route returns a new html page with content.&lt;/p&gt;

&lt;p&gt;If you're using React to build your webpage and you want to accomplish something like that, then you'll want to turn your attention to react-router-dom! React-router is a node module that makes use of the React component structure to add client-side routing functionality to a webpage.&lt;/p&gt;

&lt;p&gt;Going forward on this blog, I'm going to assume that you have a basic understanding of Switches and Routes in react-router. If you'd like to read up on them before continuing, you can find the documentation &lt;a href="https://reactrouter.com/web"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-nested-routing"&gt;
  &lt;/a&gt;
  What is nested routing?
&lt;/h1&gt;

&lt;p&gt;Nested routing is the act of "burying" routes inside each other. Continuing our &lt;code&gt;dev.to&lt;/code&gt; example from before, here is an example of a nested route:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://dev.to/readinglist/archive&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First, you route to &lt;code&gt;/readinglist&lt;/code&gt; then you route to &lt;code&gt;/archive&lt;/code&gt; while inside &lt;code&gt;/readinglist&lt;/code&gt;, providing more specific information while still being inside that scope.&lt;/p&gt;

&lt;p&gt;Nesting routes helps to create more organized, and clear routes for both the developers and clients to make use of. It also helps practice some separation of concerns. You could have a &lt;code&gt;/readinglist&lt;/code&gt; that brings you to your reading list and a &lt;code&gt;/archive&lt;/code&gt; that brings you to your reading list archive, but what happens when you want to implement a post archive? The route &lt;code&gt;/archive&lt;/code&gt; is already taken, so you'd have to name the new route &lt;code&gt;/postarchive&lt;/code&gt; or something, making the routes messy and hard to follow. By nesting them, you can have &lt;code&gt;/readinglist/archive&lt;/code&gt; and &lt;code&gt;/post/archive&lt;/code&gt; together.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nested-routing-in-reactrouterdom"&gt;
  &lt;/a&gt;
  Nested routing in react-router-dom
&lt;/h1&gt;

&lt;p&gt;So, now we know that we know the advantages of nesting routes, how exactly do we do it in react-router-dom?&lt;/p&gt;

&lt;p&gt;Lets set up a basic &lt;code&gt;dev.to&lt;/code&gt; route layout first:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Route&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/readinglist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Reading&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Homepage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This route layout has three paths currently:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Path&lt;/th&gt;
&lt;th&gt;Web Display&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/posts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Posts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/readinglist&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reading List&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Homepage&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;We can set up nested routing a few ways.&lt;/p&gt;

&lt;p&gt;We could add &lt;code&gt;/readinglist/archive&lt;/code&gt; by adding a route directly like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//App.js&lt;/span&gt;
&lt;span class="c1"&gt;//Inside the Switch&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/readinglist/archive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Reading&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt; &lt;span class="nx"&gt;Archive&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although this would work, what do we do if we want to have a lot of routes nested inside &lt;code&gt;/readinglist&lt;/code&gt;? We'd have to add each one to our App.js, quickly making it cluttered and hard to follow. This is why I suggest creating a custom component to store routing logic instead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#routing-logic-component"&gt;
  &lt;/a&gt;
  Routing logic component
&lt;/h2&gt;

&lt;p&gt;Lets start by creating a custom component to store the routing logic for &lt;code&gt;/readinglist&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//ReadingListRoutes.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Route&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ReadingListRoutes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/readinglist/archive&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Reading&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt; &lt;span class="nx"&gt;Archive&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/readinglist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Reading&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReadingListRoutes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We've now created our &lt;code&gt;/readinglist&lt;/code&gt; route logic component, but we still have to add it to our actual routes! Lets refactor our App.js and do just that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Route&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReadingListRoutes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ReadingListRoutes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/readinglist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReadingListRoutes&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Homepage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we now have it set up to where the path &lt;code&gt;/readinglist/archive&lt;/code&gt; first navigates to our &lt;code&gt;ReadingListRoutes&lt;/code&gt; component. Once in our &lt;code&gt;ReadingListRoutes&lt;/code&gt; component, it looks for the route &lt;code&gt;/readinglist/archive&lt;/code&gt;. If it finds it, it displays &lt;code&gt;Reading List Archive&lt;/code&gt; on the webpage.&lt;/p&gt;

&lt;p&gt;Our routes table now looks like this: &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Path&lt;/th&gt;
&lt;th&gt;Web Display&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/posts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Posts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/readinglist&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reading List&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/readinglist/archive&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reading List Archive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Homepage&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#dynamic-routes"&gt;
  &lt;/a&gt;
  Dynamic Routes
&lt;/h2&gt;

&lt;p&gt;So now we've learned how to do nested routing, but how exactly can we define dynamic routes? Lets take a look at the &lt;code&gt;dev.to&lt;/code&gt; url to one of my blogs:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://dev.to/christensenjoe/classes-in-javascript-f9g&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This url first routes to my username, then my blog title (separated by hyphens instead of spaces). But how exactly is &lt;code&gt;dev.to&lt;/code&gt; doing this? It cant be hard coding every single possible username as a route.&lt;/p&gt;

&lt;p&gt;Well, react-router-dom also provides a nice way to dynamically create routes.&lt;/p&gt;

&lt;p&gt;Lets add a basic route to &lt;code&gt;/(username)&lt;/code&gt; that will take someone to their custom homepage. I'll go ahead and create a &lt;code&gt;UserRoutes&lt;/code&gt; logic component to handle some nested route functionality too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//App.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nx"&gt;BrowserRouter&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Route&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReadingListRoutes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ReadingListRoutes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;UserRoutes&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./UserRoutes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/posts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Posts&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/readinglist&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ReadingListRoutes&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserRoutes&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Homepage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Router&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//UserRoutes.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Route&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;UserRoutes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:username/:post_title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="nx"&gt;Homepage&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UserRoutes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By adding the &lt;code&gt;/:username&lt;/code&gt; and &lt;code&gt;/:username/:post_title&lt;/code&gt; routes, we can now dynamically create new routes. If you navigate to &lt;code&gt;/joe&lt;/code&gt;, you'll be met with the text &lt;code&gt;User Homepage&lt;/code&gt;, and if you navigate to &lt;code&gt;/joe/new-post&lt;/code&gt;, you'll find text &lt;code&gt;User Post&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our routes now look like:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Path&lt;/th&gt;
&lt;th&gt;Web Display&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/:username&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;User Homepage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/:username/:post_title&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;User Post&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/posts&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Posts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/readinglist&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reading List&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/readinglist/archive&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Reading List Archive&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Homepage&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#useparams"&gt;
  &lt;/a&gt;
  useParams
&lt;/h2&gt;

&lt;p&gt;We've now dynamically created new routes, but how can we take advantage of them to create custom pages?&lt;/p&gt;

&lt;p&gt;First, lets start by creating two new components, &lt;code&gt;UserProfilePage&lt;/code&gt; and &lt;code&gt;UserPostPage&lt;/code&gt;, and connect them up to our &lt;code&gt;UserRoutes&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//UserProfilePage.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;UserProfilePage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;___&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;s profile&amp;lt;/h1&amp;gt;
    )
}

export default UserProfilePage;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//UserPostPage.js&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;UserPostPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;___&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;s post: ___&amp;lt;/h1&amp;gt;
    )
}

export default UserPostPage;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//UserRoutes.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Route&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;UserPostPage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./UserPostPage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;UserProfilePage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./UserProfilePage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;UserRoutes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;exact&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:username/:post_title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserPostPage&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Route&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/:username&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserProfilePage&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Route&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Switch&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UserRoutes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have separate pages, we can make use of a custom react-router-dom hook called &lt;code&gt;useParams()&lt;/code&gt;. useParams allows us to grab any params from the current route at the time of invocation. For example, if we went to &lt;code&gt;/:username/:post-title&lt;/code&gt;, we could grab the params &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;post-title&lt;/code&gt;. These variables would store whatever we are currently routed to. So if we're routed to &lt;code&gt;/joe/new-post&lt;/code&gt;, then &lt;code&gt;username&lt;/code&gt; stores the string &lt;code&gt;joe&lt;/code&gt; and &lt;code&gt;post-title&lt;/code&gt; stores the string &lt;code&gt;new-post&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's update our &lt;code&gt;UserProfilePage&lt;/code&gt; and &lt;code&gt;UserPostPage&lt;/code&gt; to make use of the &lt;code&gt;useParams()&lt;/code&gt; hook to add custom messages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//UserProfilePage.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;useParams&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;UserProfilePage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`This is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'s profile`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UserProfilePage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//UserPostPage.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;useParams&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;UserPostPage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;post_title&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parsedTitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;post_title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`This is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'s post: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;parsedTitle&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;UserPostPage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we're using useParams to get the username and post_title. We then use them to show some custom messages to our user based on what the put in. On the &lt;code&gt;UserPostPage&lt;/code&gt;, we're also mutating our &lt;code&gt;post_title&lt;/code&gt; to remove the dashes and replace them with spaces.&lt;/p&gt;

&lt;p&gt;Now, if someone navigated to &lt;code&gt;/joe/my-new-post&lt;/code&gt; they'll be met with the message &lt;code&gt;This is joe's post: my new post&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;React-router-dom is a great node package for React that allows for easy client-side routing. If you're creating a single-page web application, then definitely consider using it to implement static, nested, and dynamic routes. If you'd like to learn more, take a look at the docs &lt;a href="https://reactrouter.com/web"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>That moment when coding no longer feels scary</title>
      <author>𝙹𝚊𝚜𝚘𝚗 𝙻𝚎𝚘𝚠 👨🏻‍💻</author>
      <pubDate>Wed, 15 Sep 2021 23:36:17 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/that-moment-when-coding-no-longer-feels-scary-4ki4</link>
      <guid>https://dev.to/jasonleowsg/that-moment-when-coding-no-longer-feels-scary-4ki4</guid>
      <description>&lt;p&gt;Before starting, programming felt scary. And so confusing. I didn’t understand what the terms meant. It was complete gibberish to me. I took foreign language classes before (in French), but this is a whole different level. With French, there’s at least some scaffolding to start off as there’s some similarities to English. But with programming, all the symbols were hard to figure out. But now, after learning some HTML, CSS and JS basics on Udemy, it doesn’t feel so scary anymore.&lt;/p&gt;

&lt;p&gt;Why? Not because I mastered the language after just some online classes. Because after watching the videos of the instructor approaching the problem, writing the code and explaining blow-by-blow what and why each word is meant to do, I’m beginning to see that coding is done in bite-sized pieces. Programming is very much about breaking down an overall feature to very small and specific blocks of code, and building up the feature one block at a time, starting from a minimum viable block of code. Usually, each block is simple and easy to write. &lt;/p&gt;

&lt;p&gt;For example, as part of the Javascript class, I had to build a small Javascript game that tests your reaction time, by having you click on random coloured, random sized circles and squares appearing in the browser one after another, and each time you click it, you get a reading on your reaction time of how fast you managed to catch it. Sounds scary? It did for me in the beginning. But after breaking it down, it feels much more approachable. And it all starts with the &lt;strong&gt;Minimum Viable Interaction&lt;/strong&gt; (haha yes I’m coining it here - for my own purposes at least).&lt;/p&gt;

&lt;p&gt;So the MVI is basically to make a shape appear on the browser and click on it to get a timing. And that can be broken down even further:&lt;/p&gt;

&lt;p&gt;Need a shape to appear on your browser? Just create a shape first in HTML. Then write some JS to make it disappear when you click on it. Then add a new variable to start a timer when the page loads, and end the timer when the shape is clicked on. Then get the time taken and write some JS to display it out on the page. There! Already the first interaction of your game is done. You click on a shape and it shows the reaction time back. After this minimum viable block of code for the game, continue building on it to add more functions/interactions…&lt;/p&gt;

&lt;p&gt;This is probably child’s play to code veterans, but to be able to see the approach to coding this way, makes everything seem possible. As a maker/designer, that’s how we make products - by prototyping minimum viable products (MVPs) first, launching it to learn if it works for the users, then building on it after. Knowing that it’s pretty much the same way for coding really lowered my fear factor.&lt;/p&gt;

&lt;p&gt;This is something (most) online classes don’t really teach. They dive into the code and teach you the how very quickly - how it’s written, what tools you need, what the terms mean…but don’t teach you how to problem-solve in programming. I later learned this is called &lt;a href="https://en.wikipedia.org/wiki/Computational_thinking"&gt;computational thinking&lt;/a&gt;: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“The characteristics that define computational thinking are decomposition, pattern recognition / data representation, generalization/abstraction, and algorithms.[7][8] By decomposing a problem, identifying the variables involved using data representation, and creating algorithms, a generic solution results. The generic solution is a generalization or abstraction that can be used to solve a multitude of variations of the initial problem.” - Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Isn’t that critical to explicitly teach too in basic beginner level courses? So that budding rookies like me don’t just develop the technical skill to coding, but also the problem-solving mindsets and thinking skills needed to sustain their journey? I’m sure there are some courses that do that…maybe just not the ones I come across in many of the coding MOOCs. &lt;/p&gt;

&lt;p&gt;So now I realised that I need to break things down and visualise my approach like Russian dolls, nesting more functionality upon another from just one super basic and simple starting block. &lt;/p&gt;

&lt;p&gt;I know I can do that basic block. And I know I can build another simple block on top of that. &lt;/p&gt;

&lt;p&gt;That realisation was really empowering.&lt;/p&gt;

&lt;p&gt;A pivotal moment since starting to learn how to code. &lt;/p&gt;

&lt;p&gt;A moment when coding no longer felt scary.&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/jasonleow"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Product developers’ guide to getting started with AI — Part 1: Introduction to dataframes</title>
      <author>Mage</author>
      <pubDate>Wed, 15 Sep 2021 23:35:05 +0000</pubDate>
      <link>https://dev.to/mage_ai/product-developers-guide-to-getting-started-with-ai-part-1-introduction-to-dataframes-20pg</link>
      <guid>https://dev.to/mage_ai/product-developers-guide-to-getting-started-with-ai-part-1-introduction-to-dataframes-20pg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;When working with AI, it’s important to know how to import data sets, read through tables, and understand what the structure is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Before we begin&lt;/li&gt;
&lt;li&gt;Downloading Prerequisites&lt;/li&gt;
&lt;li&gt;My first Dataframe&lt;/li&gt;
&lt;li&gt;Reading Metadata&lt;/li&gt;
&lt;li&gt;Viewing Data&lt;/li&gt;
&lt;li&gt;Data Analysis&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Welcome to the “Product developer’s guide to getting started with AI”. In this series, we’ll go over key concepts and run through examples using Pandas. First, we will cover setting up your development environment and learning how to inspect your data. Then, you’ll be ready to tackle the more exciting parts of AI throughout this series.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we begin
&lt;/h2&gt;

&lt;p&gt;For the most part, Google Collab has everything already installed except the dataset, skip to My First Dataframe. However, if you want to run it locally then follow the next step. We’ll be using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Pandas&lt;/li&gt;
&lt;li&gt;NumPy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#downloading-prerequisites-optional"&gt;
  &lt;/a&gt;
  Downloading Prerequisites (Optional)
&lt;/h2&gt;

&lt;p&gt;When getting started with AI, 2 important libraries you’ll be using every day are Pandas and Numpy. Follow the link here for instructions to install Python, Pandas, NumPy, and access to Google Collab.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-first-dataframe"&gt;
  &lt;/a&gt;
  My First Dataframe
&lt;/h2&gt;

&lt;p&gt;First, we’ll begin by going through how to upload files and download our first data set, the Titanic, hosted by the Pandas community on Github.&lt;br&gt;
Open up Google Collab and click on the new notebook button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5-W4WXSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyaq7ziz6edb6isbtmae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5-W4WXSi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hyaq7ziz6edb6isbtmae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Click on New notebook&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Next, we’ll begin by importing titanic.csv to create your first dataframe. Go to the file tab, and click on the file with the arrow to upload from your computer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hBVqNfQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyzw3pynpvgdidgm9s69.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hBVqNfQO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vyzw3pynpvgdidgm9s69.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Click on the file with the arrow icon to import titanic.csv&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then import Pandas, Numpy, and use read_csv to extract our CSV data into a dataframe.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CdrUPmSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ygya6y6pk8xme899voo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CdrUPmSC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ygya6y6pk8xme899voo.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;At the beginning, import the libraries and file via code&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Type the name of the dataframe to view it. Here we call it df, so in the next cell we type df. To run the cell use Shift+Enter or click the run icon at the left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6MiZUc28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul7x8cu0kmv18793bgy8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6MiZUc28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ul7x8cu0kmv18793bgy8.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Display entire dataframe&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reading-metadata"&gt;
  &lt;/a&gt;
  Reading Metadata
&lt;/h2&gt;

&lt;p&gt;Unlike a table, a dataframe has some extra data behind the scenes, called metadata. Metadata is used to organize its structure and can be viewed in Pandas by using the describe, info, and columns method. Let’s say we wanted to know how many rows and columns contain non-empty values or how much storage the data takes up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_-G7RMcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo3wj497qlqib36g1mvc.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_-G7RMcK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jo3wj497qlqib36g1mvc.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Info is a great method that product developers who have worked with SQL will find similar to the EXPLAIN command. It tells us valuable information about the storage space used, column information, number of rows, indices, and types. All while organizing it into an easy-to-read table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDZDv7g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lwhtzz0ivaw8k6qhxui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDZDv7g5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lwhtzz0ivaw8k6qhxui.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Show all information about the dataframe&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Describe is a method best used to summarize the numerical data by calculating a quick mathematical summary and displaying the count, mean, min, max, standard deviation, and percentiles.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i6oHiiWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3ogdcvtxnyfobcq4n0u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i6oHiiWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y3ogdcvtxnyfobcq4n0u.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Default output of describe&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is by default equivalent to df.describe(include=[np.number])&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F-mp79qN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdhcpzfr49he46rfgjoa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F-mp79qN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdhcpzfr49he46rfgjoa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Describe all numbers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By adding the object keyword, describe looks for the unique, top, and frequency of the data for object data, such as strings and timestamps instead. Here, it selects the columns that have a data type of object from the output.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eHrg43Yx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h29ecnkrv921dwm7b95p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eHrg43Yx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h29ecnkrv921dwm7b95p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Describe all objects&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Conversely, you may also use exclude instead of include to get the reverse outputs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g5Tkgr0C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw4cdi33wew17uwoeysz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g5Tkgr0C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lw4cdi33wew17uwoeysz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Describe everything that is not an object&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RqVnYTg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17rqp2hsx9hnvsrb2afw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RqVnYTg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17rqp2hsx9hnvsrb2afw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Describe everything that is not a number&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But, columns is an interesting method that is used to read metadata and select data. To get the metadata of a column, call it on a dataframe to get the index names.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rkLhGZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rz3bipwg05o5nbjmizt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rkLhGZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rz3bipwg05o5nbjmizt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Display all index names&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are two ways to select a column, using either the index position or index name. The index position can be found from the metadata of info on the left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i_XUOb4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyj3vmme2v8tthdzg52s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i_XUOb4_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyj3vmme2v8tthdzg52s.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Access by index position&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The index name can be found from the output of columns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JQHM_0Ub--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hchaocc3lygne2hix2pk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JQHM_0Ub--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hchaocc3lygne2hix2pk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Access by index name&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#viewing-data"&gt;
  &lt;/a&gt;
  Viewing Data
&lt;/h2&gt;

&lt;p&gt;But most of the time, especially when working with AI, you’ll have very large datasets and it may not be feasible or necessary to display everything. Dataframes have other features to view parts of the data, by using the head, tail, loc, and iloc method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BpmRps2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4ffhwjnulzzac4vu0ox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BpmRps2g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4ffhwjnulzzac4vu0ox.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Time to use Python to chop down the data&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a look using indexing with the head or tail method.&lt;/p&gt;

&lt;p&gt;To view the data on the first 5 rows, we use head(5)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uiyo3txN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y314f0ec1du3lqjafxg5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uiyo3txN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y314f0ec1du3lqjafxg5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Head refers to the start of the dataframe&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then, to view the data for the last 5 rows, we use tail(5)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3_WgSY3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a70bz237b4cc1na4ewac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_WgSY3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a70bz237b4cc1na4ewac.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Tail refers to the end of the dataframe&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We can view multiple columns using loc, specifying the row index found on the left of the dataframe, along with the names of the columns to view. Since our row index is unlabeled, we use integers to quickly access them. The ‘:’ command is to set a range of values, to include everything.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_aDjPxIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bizqrguv4fj4leqc8srg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_aDjPxIt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bizqrguv4fj4leqc8srg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;View each Name, Ticket, and Fare&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Similarly to loc, you can also use the index position with the iloc command instead.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---S0QjOYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1iert6efsd3fkeay3xkz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---S0QjOYO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1iert6efsd3fkeay3xkz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;em&gt;Name, Ticket, and Fare are 3, 8, and 9 respectively&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-analysis"&gt;
  &lt;/a&gt;
  Data Analysis
&lt;/h2&gt;

&lt;p&gt;Combining what we’ve learned, let’s answer common data analysis questions about the Titanic dataset that data scientists and marketing ask themselves every day.&lt;/p&gt;

&lt;p&gt;How many people were aboard the Titanic when it sank?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;From info, we see that 889 people embarked on the ship
How much did the average passenger pay?&lt;/li&gt;
&lt;li&gt;From describe, the mean fare was $32
What was the standard deviation or “std” between ticket prices?&lt;/li&gt;
&lt;li&gt;From describe, std of the fare is $50
What was the highest cost for a ticket?&lt;/li&gt;
&lt;li&gt;From describe, the max fare is $512
Who was the first person to pay for a ticket?&lt;/li&gt;
&lt;li&gt;Using the head on the name column, Mr. Owen Harris Braund
Who was the last person to pay for a ticket?&lt;/li&gt;
&lt;li&gt;Using the tail on the name column, Mr. Patrick Dooley
Who was the 100th person to purchase a ticket?&lt;/li&gt;
&lt;li&gt;Using iloc for row 99 of column[3], since position starts from 0, Mr. Sinai Kantor&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That covers the info, describe, and columns functions for reading metadata and head, tail, loc, and iloc for viewing dataframes. Check back next week for our next guide, “Surfing through dataframes”, where we’ll be taking a look at how to search through our imported data by grouping, ordering, and rearranging the dataframe’s structure.&lt;/p&gt;

</description>
      <category>ai</category>
      <category>pandasdataframe</category>
      <category>python</category>
      <category>deved</category>
    </item>
    <item>
      <title>How to build a React Video Modal with Hooks</title>
      <author>cesaruseche18</author>
      <pubDate>Wed, 15 Sep 2021 23:14:29 +0000</pubDate>
      <link>https://dev.to/cesareuseche/how-to-build-a-react-video-modal-with-hooks-4on4</link>
      <guid>https://dev.to/cesareuseche/how-to-build-a-react-video-modal-with-hooks-4on4</guid>
      <description>&lt;p&gt;I want to share with other Front End developers how to build a React Video modal from scratch.&lt;/p&gt;

&lt;p&gt;I hope everyone finds this small tutorial really helpful.&lt;/p&gt;

&lt;p&gt;I'm leaving the url of the working modal and code at the end of the tutorial if you want to test it and and check out the code &lt;/p&gt;

&lt;p&gt;First, we need to use the useState Hook to change the state of the modal once the user clicks the modal button and clicks the close modal button.&lt;/p&gt;

&lt;p&gt;Second, we will do the same to build a loader icon once the modal is open and waits to fetch the video from YouTube like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [modal, setModal] = useState(false);
  const [videoLoading, setVideoLoading] = useState(true);

  const openModal = () =&amp;gt; {
    setModal(!modal);
  };

  const spinner = () =&amp;gt; {
    setVideoLoading(!videoLoading);
  };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Third, we will start working on the JSX part of the code setting up an onClick event to the button and using the ternary operator for the modal and the loader icon like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;button onClick={openModal} className=""&amp;gt;
        Click Me!
        {modal ? (
          &amp;lt;section className="modal__bg"&amp;gt;
            &amp;lt;div className="modal__align"&amp;gt;
              &amp;lt;div className="modal__content" modal={modal}&amp;gt;
                &amp;lt;IoCloseOutline
                  className="modal__close"
                  arial-label="Close modal"
                  onClick={setModal}
                /&amp;gt;
                &amp;lt;div className="modal__video-align"&amp;gt;
                  {videoLoading ? (
                    &amp;lt;div className="modal__spinner"&amp;gt;
                      &amp;lt;BiLoaderAlt
                        className="modal__spinner-style"
                        fadeIn="none"
                      /&amp;gt;
                    &amp;lt;/div&amp;gt;
                  ) : null}
                  &amp;lt;iframe
                    className="modal__video-style"
                    onLoad={spinner}
                    loading="lazy"
                    width="800"
                    height="500"
                    src="https://www.youtube.com/embed/4UZrsTqkcW4"
                    title="YouTube video player"
                    frameBorder="0"
                    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                    allowfullscreen
                  &amp;gt;&amp;lt;/iframe&amp;gt;
                &amp;lt;/div&amp;gt;
              &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;/section&amp;gt;
        ) : null}
      &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
  );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here I'm leaving the url of the code if you also want to check out the CSS styles and also the live demo. &lt;/p&gt;

&lt;p&gt;Code: &lt;a href="https://codesandbox.io/s/nkwxb?file=/src/App.js:423-1898"&gt;https://codesandbox.io/s/nkwxb?file=/src/App.js:423-1898&lt;/a&gt;&lt;br&gt;
Live Demo: &lt;a href="https://nkwxb.csb.app/"&gt;https://nkwxb.csb.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope I'm able to help anyone that wants to build a React Modal Video from scratch without using any library. &lt;/p&gt;

&lt;p&gt;Follow me on Github &amp;amp; Connect with me on LinkedIn&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cesareuseche"&gt;https://github.com/cesareuseche&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/cesar-useche-profile/"&gt;https://www.linkedin.com/in/cesar-useche-profile/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Building Habits To Be Healthier Developers</title>
      <author>Ayu Adiati</author>
      <pubDate>Wed, 15 Sep 2021 23:02:58 +0000</pubDate>
      <link>https://dev.to/adiatiayu/building-habits-to-be-healthier-developers-3i0a</link>
      <guid>https://dev.to/adiatiayu/building-habits-to-be-healthier-developers-3i0a</guid>
      <description>&lt;p&gt;Hello Fellow Codenewbies 👋,&lt;/p&gt;

&lt;p&gt;It has been a while since the last time I wrote, so it's good to be back!&lt;/p&gt;

&lt;p&gt;Where have I been?&lt;br&gt;
Well, 6 weeks of school's summer holiday means all plans go west 😅.&lt;/p&gt;

&lt;p&gt;My learning time was all over the place. My daughter had playdates. And I had to entertain my daughter on top of house chores, which finally I had to abandon many times. In the time that I block for learning, I was already exhausted.&lt;br&gt;
I felt guilty for not having more energy to learn or to write. But there was not much that I could do except kept telling myself, "It's only for 6 weeks." 😂&lt;/p&gt;

&lt;p&gt;And to be honest, getting back to the routine after having some time off is so hard! 😓&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;The community I'm in, &lt;a href="https://virtualcoffee.io/monthlychallenges/aug-2021/"&gt;Virtual Coffee&lt;/a&gt;, holds &lt;a href="https://virtualcoffee.io/monthlychallenges/"&gt;monthly challenges&lt;/a&gt;.&lt;br&gt;
And the monthly theme for August's challenge was &lt;a href="https://virtualcoffee.io/monthlychallenges/aug-2021/"&gt;Healthy Habits for Healthy Devs&lt;/a&gt;. We take baby steps to build new habits so we can be healthier developers. &lt;/p&gt;

&lt;p&gt;It was a perfect time to do some self-care and build small healthy habits for myself during the summer break. Not only as a developer but also as a mom, as a person! 😄&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-building-healthy-habits"&gt;
  &lt;/a&gt;
  Start Building Healthy Habits
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pomodoro-time"&gt;
  &lt;/a&gt;
  Pomodoro Time
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DW_F5H64--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631710395155/-vDZIs9P3.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DW_F5H64--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631710395155/-vDZIs9P3.jpeg" alt="sand-in-an-hourglass.jfif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Image: &lt;a href="https://images.unsplash.com/photo-1499377193864-82682aefed04?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=800&amp;amp;q=80"&gt;NeONBRAND/Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I started to take Pomodoro time more seriously.&lt;br&gt;
The 25 minutes coding with 5 minutes break doesn't work for me. I tend to do more than that and even forget to take a break.&lt;/p&gt;

&lt;p&gt;What works for me is to do 1-hour coding with 10 minutes break to walk away from my computer and do some stretching.&lt;br&gt;
This helps me a lot to move my body and resting my eyes and brain.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#weekend-time-off"&gt;
  &lt;/a&gt;
  Weekend Time Off
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DeihDzia--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631719921123/sQcNC0tIR.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DeihDzia--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631719921123/sQcNC0tIR.jpeg" alt="yay-weekend-words.jfif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Image: &lt;a href="https://images.unsplash.com/photo-1586426006315-b11fa075a76a?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=800&amp;amp;q=80"&gt;Sincerely Media/Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I used to learn every day, including weekends, ranging from 1 until 3 hours in a day.&lt;br&gt;
I would feel very guilty if I miss it even for one day and would beat myself up.&lt;/p&gt;

&lt;p&gt;Now I started to loosen up.&lt;br&gt;
People have weekends to take a break from work. Why can't I also have that for myself?&lt;/p&gt;

&lt;p&gt;Since I started to take weekends off from learning, my stress level is decreasing. I'm more present and enjoy my weekends more with my family.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bullet-journalingscrapbooking"&gt;
  &lt;/a&gt;
  Bullet Journaling/Scrapbooking
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x6gdxJTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631711099128/q07GjvBCP.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x6gdxJTp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631711099128/q07GjvBCP.jpeg" alt="bullet-journal-scrapbook.jpeg"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Image:&lt;/em&gt; &lt;strong&gt;&lt;em&gt;Ayu Adiati/personal doc.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I love writing with pen and paper. It's one of the things that makes me happy!&lt;br&gt;
I write down what I learned in notebooks.&lt;br&gt;
And though I put my schedules on my phone, I still write them down as well in a physical agenda. &lt;/p&gt;

&lt;p&gt;Not long ago, I bumped on some videos on YouTube about &lt;a href="https://bulletjournal.com/"&gt;bullet journaling&lt;/a&gt; and &lt;a href="https://www.thesprucecrafts.com/what-is-scrapbooking-2960505"&gt;scrapbooking&lt;/a&gt;. They seemed relaxing and mind-calming.&lt;br&gt;
So I decided to try to combine them, dumping my brain on there and let my creativity wander.&lt;br&gt;
Out of my surprise, it helps me a lot in organizing my tasks and to lighten myself up.&lt;/p&gt;

&lt;p&gt;Since then, I block 20 - 30 minutes a day for bullet journaling and scrapbooking.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vacation"&gt;
  &lt;/a&gt;
  Vacation
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WjMkgrDg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631716418618/QWps3Qu6p.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WjMkgrDg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631716418618/QWps3Qu6p.jpeg" alt="sunglasses-on-the-sand-at-a-beach.jfif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Image: &lt;a href="https://images.unsplash.com/photo-1473496169904-658ba7c44d8a?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=800&amp;amp;q=80"&gt;Ethan Robertson/Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;My family and I were very lucky to be able to take 2 weeks vacation within the school's summer holiday. &lt;br&gt;
Having a vacation without feeling guilty about taking it is the key. It helped me a lot in reminding myself that we do need to disconnect ourselves from our routine once in a while. To take a break and live in the moment with our loved ones, and have fun!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sleep-earlier"&gt;
  &lt;/a&gt;
  Sleep Earlier
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QHHp6kel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631716618333/tvtzgidxY.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QHHp6kel--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631716618333/tvtzgidxY.jpeg" alt="a-woman-sleeping-in-bed.jfif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Image: &lt;a href="https://images.unsplash.com/photo-1531353826977-0941b4779a1c?ixlib=rb-1.2.1&amp;amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=800&amp;amp;q=80"&gt;Lux Graves/Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since I learn to code, I have become a night owl. The best time for me to learn is at night time after my family sleeps, around 11 PM until 1 or 2 AM, sometimes even later.&lt;/p&gt;

&lt;p&gt;Since my daughter started school, I try to use her school time to do both house chores and learning. My goal is so that I don't have to sleep too late at night.&lt;br&gt;
But I failed! I still can't let go of the habit of going to bed super late 😆&lt;/p&gt;

&lt;p&gt;As on other vacations, I brought my laptop with me, in case I want to squeeze in some time to learn.&lt;br&gt;
The bungalow where we stayed during vacation was nice. Only at night, it somehow gave me some creepy feelings. And that helped me! I didn't want to stay awake alone in the living room, so I went to bed before midnight for 2 weeks in a row! 😁&lt;/p&gt;

&lt;p&gt;Sleep earlier and wake up after my body takes enough rest do make difference! My body feels much fresher and my mind gets clearer. And because I have a clearer mind, I gain more confidence and get stronger motivation in what I'm doing.&lt;br&gt;
This is one habit that I should do my best to keep up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#take-power-nap"&gt;
  &lt;/a&gt;
  Take Power Nap
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CEKHeWit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631716980995/pB1CH8GEiJ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CEKHeWit--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631716980995/pB1CH8GEiJ.jpeg" alt="woman-take-nap-on-balcony.jfif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Image: &lt;a href="https://images.unsplash.com/photo-1478719050108-41b67a7bc956?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=800&amp;amp;q=80"&gt;Hernan Sanchez/Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It's most likely not a habit that I would keep in the future. But it's something I would do if I have the chance and time. Or, I would try meditation to relax my body and mind.&lt;/p&gt;

&lt;p&gt;My daughter is on the transition to not taking a nap since she goes to school. Only when she's very tired, I would take her for a half to one hour nap and I nap with her. We cuddle until we both fall asleep.&lt;/p&gt;

&lt;p&gt;Having the chance to relax my body and mind through naps gives me more energy to do things for the rest of the day.&lt;br&gt;
One other benefit for me, I build a stronger bond with my daughter. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hobbies-matter"&gt;
  &lt;/a&gt;
  Hobbies Matter!
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---BzyQUdo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631717267298/cFRBAHKqk.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---BzyQUdo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631717267298/cFRBAHKqk.jpeg" alt="woman-hold-camera-in-front-of-a-prism-mirror.jpeg"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Image:&lt;/em&gt; &lt;strong&gt;&lt;em&gt;Ayu Adiati/personal doc.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I like photography, a lot!&lt;br&gt;
But since COVID hit, with the lockdowns and have to stay at home as much as we can, I don't have the chance to touch my camera. The vacation gave me back that chance. I took so many pictures and felt so happy! Adding to my happiness, my daughter is showing that she also has an interest in photography!&lt;/p&gt;

&lt;p&gt;Busy growing up, we sometimes forget that we all have an inner child that we need to feed once in a while to keep us sane. And that's what hobbies are for.&lt;br&gt;
We should give ourselves a little time to do our hobbies for our mental health's sake.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metime"&gt;
  &lt;/a&gt;
  Me-Time
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uEZ2DjEK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631717443350/-CJMbc-Ja1.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uEZ2DjEK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631717443350/-CJMbc-Ja1.jpeg" alt="woman-eating-popcorn-and-hold-television-remote-control.jfif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Image: &lt;a href="https://images.unsplash.com/photo-1521967906867-14ec9d64bee8?ixlib=rb-1.2.1&amp;amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=800&amp;amp;q=80"&gt;JESHOOTS.COM/Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I started to give myself a regular me-time at least 3 times a week.&lt;br&gt;
My me-time happens after I finish all tasks at night before going to bed.&lt;br&gt;
I would watch some videos on YouTube, or watch an episode of a series, or listen to a podcast.&lt;/p&gt;

&lt;p&gt;Doing something for myself reminds me that I and my time are as important as others. And that I'm acknowledging and appreciate myself after the hard works I've done.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#benefits-of-building-healthy-habits"&gt;
  &lt;/a&gt;
  Benefits of Building Healthy Habits
&lt;/h2&gt;

&lt;p&gt;We heard a lot about developers who get burnout.&lt;br&gt;
One of the big reasons, &lt;a href="https://dev.to/adiatiayu/lesson-learned-massive-burnout-in-learning-web-development-2kcg"&gt;that I experienced myself&lt;/a&gt;, is not taking a proper break to nurture ourselves.&lt;/p&gt;

&lt;p&gt;We need to be able to concentrate and focus when we do coding.&lt;br&gt;
But how can we reach these when we're too exhausted or not happy?&lt;/p&gt;

&lt;p&gt;I start to see the benefits of building my healthy habits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decrease of stress level.&lt;/li&gt;
&lt;li&gt;Have a clearer mind.&lt;/li&gt;
&lt;li&gt;Stronger motivation.&lt;/li&gt;
&lt;li&gt;Gain more confidence.&lt;/li&gt;
&lt;li&gt;Bigger energy to code and learn.&lt;/li&gt;
&lt;li&gt;Feel healthier and happier.&lt;/li&gt;
&lt;li&gt;Build better and stronger relationships with loved ones.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do my best to keep the habits that help me to be a healthier developer while trying to discover other things as well.&lt;/p&gt;

&lt;p&gt;And how about you? Have you built healthy habits for yourself? What are you doing or what will you do to be a healthier developer?&lt;br&gt;
Do share in the comment below and give us some inspiration! 😄&lt;/p&gt;




&lt;p&gt;Thank you for reading!&lt;br&gt;
Last but not least, you can find me on &lt;a href="https://twitter.com/AdiatiAyu"&gt;Twitter&lt;/a&gt;. Let's connect! 😊&lt;/p&gt;

</description>
      <category>mentalhealth</category>
      <category>watercooler</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
