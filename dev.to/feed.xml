<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How not to update states in React!!</title>
      <author>Nehal Mahida</author>
      <pubDate>Sat, 23 Oct 2021 03:50:19 +0000</pubDate>
      <link>https://dev.to/nehal_mahida/how-not-to-update-states-in-react-33om</link>
      <guid>https://dev.to/nehal_mahida/how-not-to-update-states-in-react-33om</guid>
      <description>&lt;p&gt;How do you guys update your state if it depends on the previous value?&lt;/p&gt;

&lt;p&gt;Simple!!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are doing the same as above, You are doing it wrong!! 😮&lt;/p&gt;

&lt;p&gt;But my code works perfectly with the above syntax!! 😟&lt;/p&gt;

&lt;p&gt;Yes, sometimes it works, sometimes it does NOT.&lt;/p&gt;

&lt;p&gt;WHY?? 🤔&lt;/p&gt;

&lt;p&gt;Because react schedules state updates asynchronously, It does not perform them instantly. So if your code has multiple state updates you might be depending on some outdated or incorrect values.&lt;/p&gt;

&lt;p&gt;Here is an official statement from React team about this issue&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; may be updated asynchronously, you should not rely on their values for calculating the next state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hmm, So what is the solution?&lt;/p&gt;

&lt;p&gt;Here we go...&lt;/p&gt;

&lt;p&gt;To handle this situation, react allows us to pass a function in setState, which will give us the previous value of a state. &lt;/p&gt;

&lt;p&gt;Here react guarantees us that the value is always updated correctly. 🤩&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// some logic &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tell me in a comment have you ever faced a problem because of state updates??&lt;/p&gt;

&lt;p&gt;I would like to hear your feedback.&lt;/p&gt;

&lt;p&gt;If you like this article like, share and mark 🔖 this article!&lt;/p&gt;

&lt;p&gt;🏃‍♂️ Let's Connect 👇&lt;/p&gt;

&lt;p&gt;🕊 Twitter : &lt;a href="https://twitter.com/nehal_mahida"&gt;https://twitter.com/nehal_mahida&lt;/a&gt; (See you on Twitter 😃)&lt;/p&gt;

&lt;p&gt;👨‍💻 Github: &lt;a href="https://github.com/NehalMahida"&gt;https://github.com/NehalMahida&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Divtober Day 22: Critter</title>
      <author>Alvaro Montoro</author>
      <pubDate>Sat, 23 Oct 2021 03:50:14 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-day-22-critter-3d9h</link>
      <guid>https://dev.to/alvaromontoro/divtober-day-22-critter-3d9h</guid>
      <description>&lt;p&gt;This cartoon critter (looks like a rabbit? maybe?) was drawn with CSS and only one HTML element for divtober:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/ZEJLzov?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;And, again, I recorded the process:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lrHtJQa810E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>divtober</category>
      <category>css</category>
      <category>art</category>
    </item>
    <item>
      <title>Fusetunnel - A Fast, Scalable, and Free Tunnel</title>
      <author>Chris More</author>
      <pubDate>Sat, 23 Oct 2021 03:03:07 +0000</pubDate>
      <link>https://dev.to/chrismore/fusetunnel-a-fast-scalable-and-free-tunnel-47g0</link>
      <guid>https://dev.to/chrismore/fusetunnel-a-fast-scalable-and-free-tunnel-47g0</guid>
      <description>&lt;p&gt;There are many times where we want to share our localhost app with the world, either for testing purposes, to show progress, demo websites or run personal cloud services from your home. Fusetunnel helps you to do this easily! No need to mess with DNS or deploy to have others test out your changes.&lt;/p&gt;

&lt;p&gt;Fusetunnel is great for working with browser testing tools like Browserling or external API callback services like Twilio, which require a public URL for callbacks.&lt;/p&gt;

&lt;p&gt;Fusetunnel is Fusebit’s version of localtunnel.&lt;/p&gt;

&lt;p&gt;The main difference with localtunnel (and other tunnels) is that Fusetunnel is end-to-end encrypted, giving the user greater security, promoting data protection, and preventing unauthorized access to data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://fusebit.io/blog/fusetunnel-fast-scalable-and-free-tunnel/?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=post&amp;amp;utm_content=cmore"&gt;Read more about Fusetunnel and fork the open-source repo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>npm</category>
      <category>news</category>
    </item>
    <item>
      <title>I had received the 4 Week Streak Dev badge</title>
      <author>Kavindu Santhusa</author>
      <pubDate>Sat, 23 Oct 2021 02:31:05 +0000</pubDate>
      <link>https://dev.to/ksengine/i-had-received-the-4-week-streak-dev-badge-556j</link>
      <guid>https://dev.to/ksengine/i-had-received-the-4-week-streak-dev-badge-556j</guid>
      <description>&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#you-received-the-4-week-streak-badge"&gt;
  &lt;/a&gt;
  You received the  &lt;strong&gt;4 Week Streak&lt;/strong&gt;  badge
&lt;/h3&gt;

&lt;p&gt;Awarded for consistency of writing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xhxQ5Ip---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L6TKY3HN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_80%2Cw_250/https://dev-to-uploads.s3.amazonaws.com/uploads/badge/badge_image/11/4WeekStreak-badge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xhxQ5Ip---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L6TKY3HN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_80%2Cw_250/https://dev-to-uploads.s3.amazonaws.com/uploads/badge/badge_image/11/4WeekStreak-badge.png" alt="4 Week Streak"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Congrats on achieving this streak! Consistent writing is hard. &amp;gt; The next streak badge you can get is the 8 Week Badge. 😉&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/ksengine"&gt;Visit your profile&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You also get  &lt;a href="https://dev.to/credits"&gt;5 new credits&lt;/a&gt;  to use for  &lt;a href="https://dev.to/listings"&gt;community listings&lt;/a&gt;  if you have anything you'd like to promote. 🎉&lt;/p&gt;
&lt;/blockquote&gt;

</description>
    </item>
    <item>
      <title>Hacktoberfest 2021 Experience</title>
      <author>JenningsF</author>
      <pubDate>Sat, 23 Oct 2021 02:04:42 +0000</pubDate>
      <link>https://dev.to/jenningsf/hacktoberfest-2021-experience-56l5</link>
      <guid>https://dev.to/jenningsf/hacktoberfest-2021-experience-56l5</guid>
      <description>&lt;h1&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h1&gt;

&lt;p&gt;Howdy! 👋 I currently do not work in the tech industry. I went to school and received a CS degree, but have been working outside my degree since graduating. I am currently planning a career transition to jump into some sort of development and the timing worked out that as I was refreshing the skills I learned in school, I stumbled on theDEV community in late September just in time to see the Hacktoberfest 2021 announcement! What better way to get going on some open source contribution and learn some thing along the way. Here's a summary of my (sometimes simple) contributions. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#contributions"&gt;
  &lt;/a&gt;
  Contributions
&lt;/h1&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/YasiOnFire"&gt;
        YasiOnFire
      &lt;/a&gt; / &lt;a href="https://github.com/YasiOnFire/coders-railroad"&gt;
        coders-railroad
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Fun Hacktoberfest project
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;My first contribution was focused on re-acquainting myself with git and GitHub CLI commands. So I found the &lt;a href="https://coders-railroad.netlify.app/"&gt;CodersRrailroad&lt;/a&gt; , which was a project started as a fun Hacktoberfest project for beginners. Right up my alley! After a quick JSON addition and fumbling through &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;gh&lt;/code&gt; commands, I submitted my first PR 👍.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Ohio-Elixir"&gt;
        Ohio-Elixir
      &lt;/a&gt; / &lt;a href="https://github.com/Ohio-Elixir/ohio_elixir"&gt;
        ohio_elixir
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Main site repo
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;As I searched through of posts of potential projects and lists of issues, I came across a repo for &lt;a href="https://www.ohioelixir.com/"&gt;OhioElixir&lt;/a&gt;, which is a site for US-based community of Elixir developers and enthusiasts. The issue was seemingly simple: add a favicon to the site (which I've never done before). Simple enough, right? But wait... this site is built on a majority of Elixir code and runs a Phoenix framework. Thus begins the journey of briefly learning about both Elixir and Pheonix, how to install them (which seemed to be half of the battle), and how to run them. After much frustration and error, I was able to finally overcome and add a favicon properly to appear on all pages. Nailed it!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/alfg"&gt;
        alfg
      &lt;/a&gt; / &lt;a href="https://github.com/alfg/opendrinks"&gt;
        opendrinks
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🍸 Open Source Drinks! Add your own recipe in a pull request! Inspired by 🎃Hacktoberfest!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Next up was a neat project I found, &lt;a href="https://opendrinks.io/"&gt;Open Drinks&lt;/a&gt;, where contributors can submit recipes for various alcoholic and non-alcoholic drinks. It was another great exercise of &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;gh&lt;/code&gt; commands as well as familiarizing myself with JSON objects and properties. I decided to submit a drink I enjoyed at the Christmas markets from my time in Germany, &lt;a href="https://opendrinks.io/recipe/gluhwein"&gt;Glühwein&lt;/a&gt;. Go checkout some other awesome &lt;a href="https://opendrinks.io/"&gt;recipes&lt;/a&gt;!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/rocambille"&gt;
        rocambille
      &lt;/a&gt; / &lt;a href="https://github.com/rocambille/library-of-twitter"&gt;
        library-of-twitter
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Last, but definitely not least, was taking on a feature implementation for &lt;a href="https://rocambille.github.io/library-of-twitter/"&gt;Library of Twitter&lt;/a&gt;, which randomly generates a tweet of random characters. The added feature was to generate a tweet of random words and to also allow users to toggle between the two. Boy oh boy was this taking a huge bite. I have some very basic experience in web development just from online courses I've been taking, but the added complication of learning how to make &lt;code&gt;fetch&lt;/code&gt; requests to a JSON file, implementing async functions, and working through Promises was not something I expected to be so complex. Also, coming up with a custom toggle radio button to match the app's design was also a big challenge. In the end though, I think the end result was a success! It may not be the cleanest code or most efficient way of implementing that functionality, but it works nonetheless and I was very pleased with the result.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrapup"&gt;
  &lt;/a&gt;
  Wrap-up
&lt;/h1&gt;

&lt;p&gt;While it was sometimes difficult to find the time to learn and code, Hacktoberfest has been very rewarding in giving me a nudge towards open source contribution and sparking that drive to carve out time to code. Thank you to all of the organizers of the event and those here on DEV that post incredibly helpful content for a beginner like me. Look forward to seeing y'all around.&lt;/p&gt;

&lt;p&gt;P.S. Any advice from those that shifted careers to tech/development is well appreciated as I come up with my transition plan.&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>What Do You Mean By Design Pattern?</title>
      <author>Jr Gnu</author>
      <pubDate>Sat, 23 Oct 2021 00:05:28 +0000</pubDate>
      <link>https://dev.to/jrgnuproject/what-do-you-mean-by-design-pattern-53k0</link>
      <guid>https://dev.to/jrgnuproject/what-do-you-mean-by-design-pattern-53k0</guid>
      <description>&lt;p&gt;What is a design pattern: Patterns are solutions to common software design problems? Knowing these patterns distinguishes a professional programmer from ordinary programmers. No matter what programming language you write in, knowing and using these templates in &lt;a href="https://en.wikipedia.org/wiki/Software_design_pattern"&gt;software design&lt;/a&gt; can help you a lot in creating software. So, we advise you not to miss the continuation of this study in any way.&lt;br&gt;
What is a pattern design?&lt;br&gt;
Over time, programmers have encountered various problems in software development. Many of these problems were independent of programming languages and the like. So, to solve these problems, various solutions were the best way to resolve these problems, design patterns or Design Pattern say. In other words, sets of the best solutions to common problems in the software programming process are called design patterns. Pattern designs are developed by experienced programmers to solve common problems in object-oriented programming.&lt;br&gt;
[panel type = 'info' title = '']&lt;br&gt;
Design patterns are not part of software architectures and only provide the correct way of &lt;a href="https://www.signupgenius.com/go/10C0F49A4A822A5F8CF8-howtogrow"&gt;object-oriented coding&lt;/a&gt;. Therefore, these templates only enter the realm of object-oriented coding and are independent of programming languages.&lt;br&gt;
[/ panel]&lt;br&gt;
History Of Design Patterns&lt;br&gt;
Design patterns were first introduced by Christopher Alexander. Christoph Alexander referred to design patterns as solutions to problems that commonly occur in the programming process. In 1994, a group called the Gang of Four, consisting of Eric Gamma, Richard Helm, Ralph Johnson, and the Wilsides Cup, categorized design patterns by application. The Gang of Four, or GOF for short, published these patterns in a book called Design Patterns. This book divides 23 of the design patterns into three general categories and introduces and teaches them.&lt;br&gt;
In this book, Gamma and his colleagues have considered a specific structure to introduce each of the design patterns. They have refused to introduce design patterns visually. Because they believed that the introduction of design patterns required a new and specific structure. Therefore, they designed the following structure in order to better present the design of the patterns. The main components of this structure are:&lt;br&gt;
• Name and classification: state the name of the template and a short description of it.&lt;br&gt;
• Purpose: In this section, a brief description of the purpose of the template is provided.&lt;br&gt;
• Another name: If the design pattern is known by other names, they are introduced in this section.&lt;br&gt;
• Solution: This section deals with a scenario in which a design pattern is used and how to use classes and objects to solve the problem.&lt;br&gt;
• Application: This section describes the conditions under which the model will be used.&lt;br&gt;
• Structure: In this section, the main structure of design patterns using UML is displayed.&lt;br&gt;
• Classes and objects used: The responsibilities of the classes or objects used in the design template are written in this section.&lt;br&gt;
• How to Collaborate: This section describes how classes and objects work together.&lt;br&gt;
• Implementation method: In this section, the implementation steps are discussed.&lt;br&gt;
• Sample Code: In this section, examples are shown in the form of programming languages.&lt;br&gt;
• Practical examples: In this section, practical examples of the design pattern are mentioned.&lt;br&gt;
• Relationship between design pattern and other patterns: Related sections Design pattern with other patterns are examined in this section.&lt;br&gt;
Types Of Design Patterns In Software Engineering&lt;br&gt;
Design patterns are divided into three general categories, Creational Design Patterns, Structural Design Patterns, and Behavioral Design Patterns, according to the applications and purposes presented for that purpose.&lt;br&gt;
The Models Are Designed Producer (Creational Design Patterns)&lt;br&gt;
The design patterns to solve problems related to the creation of objects in an application are presented, the models are the manufacturer's design or Creational say. The most common design patterns are:&lt;br&gt;
• Singleton&lt;br&gt;
•  Factory Method&lt;br&gt;
• Prototype&lt;br&gt;
• Abstract Factory&lt;br&gt;
• Builder&lt;br&gt;
• Object Pool&lt;br&gt;
Structural Design Patterns&lt;br&gt;
Structural design patterns are a set of &lt;a href="http://ec2-3-90-209-53.compute-1.amazonaws.com/history-of-laravel/"&gt;solutions that help programmers solve&lt;/a&gt; software scalability problems. These design patterns are used to manage the relationship between classes and objects. These design patterns are:&lt;br&gt;
• Adapter &lt;br&gt;
• Decorator&lt;br&gt;
• Facade&lt;br&gt;
• Bridge&lt;br&gt;
• Composite&lt;br&gt;
• Flyweight&lt;br&gt;
• Proxy&lt;br&gt;
Behavioral Design Patterns&lt;br&gt;
Behavioral design patterns are a set of coding strategies related to the interaction and communication of objects. These design patterns are:&lt;br&gt;
• Chain of responsibility&lt;br&gt;
• Strategy&lt;br&gt;
• Iterator&lt;br&gt;
• Command&lt;br&gt;
• Mediator&lt;br&gt;
• Memento&lt;br&gt;
• Observer&lt;br&gt;
• State&lt;br&gt;
• Template Method&lt;br&gt;
• Real Targeted Visitor&lt;br&gt;
Advantages of using software design templates&lt;br&gt;
One can look at the design of patterns with the view that using them is, in fact, benefiting from the experience and expertise of the best object-oriented programmers in the coding process. Some believe that problems such as overuse of classes, poor design, and. Are among the fundamental problems of object-oriented programming. Pattern designs provide many benefits to programmers by properly understanding the principles of object-oriented programming. Among the most important benefits of using them can be mentioned the following:&lt;br&gt;
• Increase scalability&lt;br&gt;
• Expandability&lt;br&gt;
• Increase flexibility&lt;br&gt;
• Speed up software development&lt;br&gt;
• Reduce errors and problems&lt;br&gt;
• Reduce coding rate&lt;br&gt;
When And Where Should We Use Design Patterns?&lt;br&gt;
Knowing when and where to use design templates is one of the most common questions asked by programmers. Since each design pattern is provided for a specific application and to solve a specific problem in the programming process, we must be able to identify those problems during software development. After identifying and diagnosing such problems, we need to learn how to use the design patterns provided to solve them so that we can use them.&lt;br&gt;
Conclusion&lt;br&gt;
Understanding the concepts of design patterns is a must for all programmers. Because design templates are provided with the aim of solving common coding problems and standardizing the software development process. &lt;a href="https://bizhuubz-ideas-7a824.netlify.app/"&gt;Using design templates&lt;/a&gt;, programmers are able to build flexible, scalable, and scalable software that is designed to be principled. Have you ever used design patterns? What do you think is the most important advantage of using design patterns in object-oriented coding?&lt;br&gt;
• Article guide and table of contents&lt;br&gt;
• What is a pattern design?&lt;br&gt;
• History of design patterns&lt;br&gt;
• Types of design patterns in software engineering&lt;br&gt;
• Advantages of using software design templates&lt;br&gt;
• When and where should we use design patterns?&lt;br&gt;
• Conclusion&lt;br&gt;
• Show more ...&lt;br&gt;
Rate this article?&lt;br&gt;
share&lt;/p&gt;

</description>
      <category>design</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>devops</category>
    </item>
    <item>
      <title>Build an NFT Wallet with OutSystems &amp; Filecoin</title>
      <author>sydneylai</author>
      <pubDate>Fri, 22 Oct 2021 23:31:01 +0000</pubDate>
      <link>https://dev.to/sydneylai/build-an-nft-wallet-with-outsystems-filecoin-2ik4</link>
      <guid>https://dev.to/sydneylai/build-an-nft-wallet-with-outsystems-filecoin-2ik4</guid>
      <description>&lt;p&gt;Author: &lt;a href="https://twitter.com/sydneylai"&gt;@sydneylai&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You hear about NFTs as collectables or images, but how do we store or collect them? Today we will build an NFT wallet and host them on IPFS as a unique NFT.&lt;/p&gt;

&lt;p&gt;We host the images in IPFS because this a peer to peer and a decentralized form of storage, rather than a centralized solution like AWS or Google Cloud. Therefore if AWS goes down or you forget to pay your Cloud subscription, you still have a hosting solution that assigned a unique identifier or content identifier (CID).&lt;/p&gt;

&lt;p&gt;Once you have a unique image, you can either distribute your NFTs on a marketplace, put it on a smart contract or turn it into a game. I'll include resources below for how else you can continue to build. This tutorial is for beginners who want to learn how to create and host their NFTs.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#start-here"&gt;
  &lt;/a&gt;
  Start Here
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Exposing a REST API for NFT Storage and OutSystems 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Tools you'll need:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;OutSystems IDE &lt;a href="https://outsyste.ms/developers"&gt;https://outsyste.ms/developers&lt;/a&gt; &lt;br&gt;
Filecoin's NFT Storage &lt;a href="https://nft.storage/"&gt;https://nft.storage/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#filecoin-and-ipfs-explained"&gt;
  &lt;/a&gt;
  Filecoin and IPFS Explained
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Vocab 101&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CID&lt;/strong&gt; - content ID&lt;br&gt;
&lt;strong&gt;Pinning&lt;/strong&gt; - asking the node to keep the data, so that it's not trashed, if you pin it hte data presists&lt;br&gt;
&lt;strong&gt;Quede vs Pinning&lt;/strong&gt; - next deal brokered to get on the Filecoin network&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#making-an-nft-wallet-and-hosting-nfts"&gt;
  &lt;/a&gt;
  Making an NFT Wallet and Hosting NFTs
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://nft.storage/"&gt;https://nft.storage/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here is your hosted image, with a CID&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--paz6CeV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mSeqVgg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--paz6CeV---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/mSeqVgg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hosting NFTs on marketplaces or wallets typically request ETH and gas. NFT developers who want free decentralized storage, you will be able to host your images on-chain with NFT.storage. &lt;/p&gt;

&lt;p&gt;Just upload your data and you'll receive an IPFS hash of the content (a CID) that can be used in on-chain NFT data as a pointer to the content.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MMIO-dU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/scEMLLd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MMIO-dU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/scEMLLd.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How it works:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Upload your data, get back an IPFS hash of the content (a CID) that can be used in on-chain NFT data as a pointer.&lt;/li&gt;
&lt;li&gt;Storage + Retrieval is free!&lt;/li&gt;
&lt;li&gt;Metadata is returned in proper formats!&lt;/li&gt;
&lt;li&gt;Fetch it back via IPFS (pinned redundantly &amp;gt;3x) &lt;/li&gt;
&lt;li&gt;Backed up to Filecoin (stored redundantly &amp;gt;5x)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://filecoin.io/"&gt;Filecoin&lt;/a&gt; provides long term storage for the data ensuring that even if nft.storage is attacked or taken down the NFT data persists.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#consume-api"&gt;
  &lt;/a&gt;
  Consume API
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AhxXoRZQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pHRQ9Zh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AhxXoRZQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pHRQ9Zh.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can upload either a single file or consume the API to upload multiple files in a directory. The API follows a typical POST and GET Method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;**/Upload** - Consuming the API / Post Method
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explains uploads, throws it on some IPFS nodes, available over the network, not just centralized, it's free, the storage providers. &lt;br&gt;
&lt;a href="https://nft.storage/api-docs/"&gt;https://nft.storage/api-docs/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#consume-nft-storage-api"&gt;
  &lt;/a&gt;
  Consume NFT Storage API
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1: Start with a mobile app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you launch Service Studio, you want to create a mobile application by clicking on "From Scratch" and then "Phone app". &lt;/p&gt;

&lt;p&gt;Name your application. &lt;/p&gt;

&lt;p&gt;Here you can design your application however you'd like. In this process, I'm creating an NFT wallet with a simple scrolling mechanism similar to the Instagram layout. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2: Consume the NFT Storage REST API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Click on Service, as we are building a service to consume the REST API&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s89wGaaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/OPcthtT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s89wGaaQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/OPcthtT.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Right Click on REST and consume REST API&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D4VHjnnd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qveCE74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D4VHjnnd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qveCE74.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add Multiple Methods&lt;/p&gt;

&lt;p&gt;Find the YAML file here &lt;br&gt;
&lt;a href="https://nft.storage/api-docs/"&gt;https://nft.storage/api-docs/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Convert the NFT Storage YAML file to a JSON&lt;br&gt;
&lt;a href="https://nft.storage/schema.yml"&gt;https://nft.storage/schema.yml&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Convert with &lt;br&gt;
&lt;a href="https://www.convertjson.com/yaml-to-json.htm"&gt;https://www.convertjson.com/yaml-to-json.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6hK8yP6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/c32MHjg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6hK8yP6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/c32MHjg.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check and address any errors and warnings&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3: Create and map out your REST API&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Add Authorizations to your Methods&lt;/p&gt;

&lt;p&gt;Double-click on the orange REST API Method titled "Click" &amp;gt; "Heads and Authentication"&lt;/p&gt;

&lt;p&gt;In the Request headers dropdown select "Authorization"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GUC6lf9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ghidFSN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GUC6lf9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/ghidFSN.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the "Test" tab and include a CID in the URL parameter values. You can find your CID &lt;a href="https://nft.storage/api-docs/"&gt;HERE&lt;/a&gt; if you are logged in. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bn5BsV4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/5a1BgES.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bn5BsV4J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/5a1BgES.png" alt=""&gt;&lt;/a&gt;&lt;br&gt;
in Request headers values, Authorization, include: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Bearer[KEY TOKEN]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Bearer&lt;/strong&gt; - When things are stored in, there is a storage deal made, what each API call is doing in the background&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VwltSonJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FMFQW6G.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VwltSonJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/FMFQW6G.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;click on "Test" to see an&lt;br&gt;
&lt;br&gt;
 &lt;code&gt;"ok":true value&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Copy to response body&lt;/li&gt;
&lt;li&gt;Click on Finish &lt;/li&gt;
&lt;li&gt;Hit the green Publish button&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now repeat &lt;strong&gt;Step 3&lt;/strong&gt; for the rest of the REST API Methods titled "delete", "list", "status", "store" respectively&lt;/p&gt;

&lt;p&gt;On the "List" method,&lt;/p&gt;

&lt;p&gt;Include a future date for the &lt;strong&gt;before&lt;/strong&gt; parameter&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tNsGRyJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qZqWoov.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNsGRyJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/qZqWoov.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IaRcfaPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/W8ZQ2BJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IaRcfaPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/W8ZQ2BJ.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Copy over and match the fields&lt;/p&gt;

&lt;p&gt;While you're creating an Authorization input parameter for both "Status" and "Store" you may get an error or empty payload, just click "Finish"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7V8vggSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/wKzGEVp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7V8vggSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/wKzGEVp.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hit the green Publish button&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4: Create a Service Action&lt;/strong&gt;&lt;br&gt;
Right Click on "Service Action" and title your action "List"&lt;/p&gt;

&lt;p&gt;The logic flow will visually appear&lt;/p&gt;

&lt;p&gt;In the Logic tab, &lt;br&gt;
Integrations &amp;gt; REST &amp;gt; NFTStorageAPI &amp;gt; &lt;/p&gt;

&lt;p&gt;Drag the "list" Run Server Action into the logic flow and click on the icon until you see the "Authorization" dropdown&lt;/p&gt;

&lt;p&gt;It's empty&lt;/p&gt;

&lt;p&gt;In "list" Run Server Action, copy all four input parameters, and paste in the "List2" Service Action&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--smaw-3a8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/87BKrXc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--smaw-3a8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/87BKrXc.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now include the Before and Limit within the List Run Server Action you just created on the Logic Flow&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--14n_G5IZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jkrEGGY.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--14n_G5IZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/jkrEGGY.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assign the "list" Run Sever Action by dragging an "Assign" blue icon from the left tray into the logic flow, below the "list" icon&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1U0MrYRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JuGUlq0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1U0MrYRB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/JuGUlq0.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assign the variable with "Response"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AHy22WTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PMisnBD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AHy22WTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/PMisnBD.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;💡 You may get errors asking to make your structures public&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5: Integrate your API wrapper&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To integrate your API, head to Interface &amp;gt; Home Screen and "Fetch Data from Other Sources", which I've named "ShowStorage"&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ATtTv8r6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/42lS6td.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ATtTv8r6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/42lS6td.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the upper left-hand side there is a 🔌 icon where I will manage my dependencies. I want all the modules that I've created before, to be referenced. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rVycuma9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DxSowRF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVycuma9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/DxSowRF.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Head to the Logic tab and locate "List" Service Action, click on and drag the icon into the logic flow.&lt;/p&gt;

&lt;p&gt;Head to the interface tab and double-click on the Output Parameter we've named "Response", set the Data Type to a ListResponse matching the Response Output Parameter in the Logic tab.&lt;/p&gt;

&lt;p&gt;On the logic flow, drag and drop an Assign into the logic flow. In the drop-down, assign Response and List3.Response (or whichever number list you have show up).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pLdkqby1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/x95Op9t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pLdkqby1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/x95Op9t.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In your Run Server Action titled "List", set&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;before: "CurrDateTime()"&lt;br&gt;
Authorization: " "Bearer TOKEN" " &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your Authoization Bearer TOKEN is a string so must close in quotes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hc8-3eK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4tg57AF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hc8-3eK2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4tg57AF.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6: Connect the database and images&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;On the Interface tab in the Mainflow UI Flow, add a Block widget and add an Input Parameter titled "CID".&lt;/p&gt;

&lt;p&gt;Double-Click on the "Home" Screen icon and select "Widget Tree" on the top right. &lt;/p&gt;

&lt;p&gt;In Content, drag and drop a Block widget and set the sources: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Source Block "MainFlow\Block1"&lt;br&gt;
CID "ShowStorage.Response.value.Current.cid"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uOEEP7gH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6ha9zX9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uOEEP7gH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6ha9zX9.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Include three "x.y Expression" widgets within Content&lt;/p&gt;

&lt;p&gt;In the first Expression, map the expression to &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ShowStorage.Response.value.Current.cid&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Folder structure is seen here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FciP5j4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/uFXRu2i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FciP5j4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/uFXRu2i.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second Expression, can be expressed as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;FormatDateTime(ShowStorage.Response.value.Current.created, "d MMM yyyy HH:mm")&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The third Expression, we can showcase the pinning service. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Images&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the Interface tab, click on the Block1 widget. Drag and drop an Image widget from the left. &lt;/p&gt;

&lt;p&gt;Set the Type to "External URL"&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"https://" + CID + ".ipfs.dweb.link"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the API wrapper that I've titled "IPFSNFTStorage", create an Input Parameter within the "store" REST API Method. The Input Parameter will be named "Binary Image" and set the Data Type to "Binary Data".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hf6MI1pk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/a1XLz2r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hf6MI1pk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/a1XLz2r.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now copy the three input parameters in store and create a Service Action titled "Upload" within the Service Actions folder. Paste the three input parameters within the "Upload" Service Action&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W86J7ijt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/I2mGIr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W86J7ijt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/I2mGIr2.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Double-click on "Upload" Service Action and drag the store REST API Method onto the logic flow&lt;/p&gt;

&lt;p&gt;The "Store" Run Server Action is like requestion something from someone, in this case asking someone for the image.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--by3_ed92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6GasJs7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--by3_ed92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6GasJs7.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Therefore the Assign widget in the logic flow will be the response to the request: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOkLu3TJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YAeddk1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOkLu3TJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/YAeddk1.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#success-star"&gt;
  &lt;/a&gt;
  Success ⭐
&lt;/h2&gt;

&lt;p&gt;You have integrated your NFT Storage API and your mobile application can now display hosted NFTs&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JvO_IFxJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6EmcXz3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JvO_IFxJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/6EmcXz3.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#continuing-education"&gt;
  &lt;/a&gt;
  Continuing Education
&lt;/h2&gt;

&lt;p&gt;Listen to Patrick Collins, developer advocate at Chainlink explain securing blockchain oracles on Decoded Podcast.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3AD34nKzqCMoWk4OcJAdx0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/3Zy7XfDnev0"&gt;https://youtu.be/3Zy7XfDnev0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/3Zy7XfDnev0"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--88xj1j_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fz0ravzl7rp3kc4f6mu2.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>blockchain</category>
      <category>cloud</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Quickly Grab Stuff From Your Git History</title>
      <author>Ben Lovy</author>
      <pubDate>Fri, 22 Oct 2021 23:30:11 +0000</pubDate>
      <link>https://dev.to/deciduously/quickly-grab-stuff-from-your-git-history-2bon</link>
      <guid>https://dev.to/deciduously/quickly-grab-stuff-from-your-git-history-2bon</guid>
      <description>&lt;p&gt;While working through a problem, my colleague remembered a prior version of our application had a syntax example we could use.  Thankfully, the codebase has been checked into &lt;a href="https://git-scm.com/"&gt;&lt;code&gt;git&lt;/code&gt;&lt;/a&gt;!  We knew the code in question revolved around the &lt;a href="https://blog.ielliott.io/nix-docs/stdenv-mkDerivation.html"&gt;&lt;code&gt;mkDerivation&lt;/code&gt;&lt;/a&gt; functionality in &lt;a href="https://nixos.org/"&gt;nix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since then, this particular code has been moved out of our codebase and added to &lt;a href="https://github.com/NixOS/nixpkgs"&gt;&lt;code&gt;nixpkgs&lt;/code&gt;&lt;/a&gt;, so we can pull the derivation from the main tree instead of defining our own out-of-tree logic.  My first instinct was to start digging through that (huge) repository to find the file and use that as a reference.&lt;/p&gt;

&lt;p&gt;No need!  We have it in our &lt;code&gt;git&lt;/code&gt; history.  We can query this using &lt;code&gt;git log -S&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git log -S mkDerivation
commit 3a275488e740ae1b4314208a908c5300f9563ee0
Author: David Yamnitsky &amp;lt;david@yamnitsky.com&amp;gt;
Date:   Mon Jul 19 11:51:47 2021 -0400

    use mold and wasm-bindgen from nixpkgs

commit a3a042b5b90ad57ff11bc47a5db6e68dc1ca55e7
Author: David Yamnitsky &amp;lt;david@yamnitsky.com&amp;gt;
Date:   Wed Jun 16 10:26:35 2021 -0400

    use mold as the linker to speed up incremental compiles on x86_64-linux
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Beautiful - that top commit looks like it represents when we switched to pull this derivation directly from &lt;code&gt;nixpkgs&lt;/code&gt;.  Removing the code is sufficient - each &lt;code&gt;git&lt;/code&gt; commit represents a diff.  This commit should show us the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git show 3a275488e740ae1b4314208a908c5300f9563ee0
commit 3a275488e740ae1b4314208a908c5300f9563ee0
Author: David Yamnitsky &amp;lt;david@yamnitsky.com&amp;gt;
Date:   Mon Jul 19 11:51:47 2021 -0400

    use mold and wasm-bindgen from nixpkgs
...
flake. nix

───┐
1: │
───┘
{
  inputs = {
    nixpkgs = {
      url = "github:nixos/nixpkgs/nixos-unstable";
      url = "github:nixos/nixpkgs/nixos-unstable-small";
    };
    flake-utils = {
      url = "github:numtide/flake-utils";

────┐
48: │
────┘
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER = toString ./. + "/scripts/clang";
        CARGO_TARGET_WASM32_UNKNOWN_UNKNOWN_LINKER = "lld";
        buildInputs = with pkgs; [
          (stdenv.mkDerivation {
            pname = "mold";
            version = "0.9.1";
            src = fetchgit {
              url = "https://github.com/rui314/mold";
              rev = "v0.9.1";
              sha256 = "sha256-yIkW6OCXhlHZ1jC8/yMAdJbSgY9K40POT2zWv6wYr5E=";
            };
            nativeBuildInputs = [ clang_12 cmake lld_12 tbb xxHash zlib openssl git ];
            dontUseCmakeConfigure = "true";
            buildPhase = "make -j $NIX_BUILD_CORES";
            installPhase = "mkdir -p $out $out/bin $out/share/man/man1 &amp;amp;&amp;amp; PREFIX=$out make install";
          })
          cachix
          cargo-insta
          clang_12

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There it is, in the text!  In my terminal, additions are highlighted in green and removals are in red.  This was a removal, but you still get the full removed text.  I was able to copy that &lt;code&gt;stdenv.mkDerivation&lt;/code&gt; code and work from there.  Thanks, &lt;code&gt;git&lt;/code&gt;.  (Thit).&lt;/p&gt;

&lt;p&gt;As an aside, I highly recommend the following &lt;code&gt;git&lt;/code&gt; alias:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;l = "log --all --graph --decorate --abbrev-commit --format=format:'%C(bold blue)%h%C(reset) - %C(bold white)%an%C(reset) %C(bold yellow)%d%C(reset)%n%C(bold cyan)%aD%C(reset) - %C(bold green)(%ar)%C(reset)%n%C(white)%s%C(reset)'";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a mess of text, but it produces super easy to read git histories:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* 9b24232 - Ben Lovy  (HEAD -&amp;gt; main, origin/main, origin/HEAD)
| Fri, 22 Oct 2021 11:49:42 -0400 - (8 hours ago)
| Remove maplit
* 65016b6 - David Yamnitsky 
| Fri, 22 Oct 2021 11:39:12 -0400 - (8 hours ago)
| update deps
| * 6d55d3e - Ben Lovy  (refs/stash)
|/| Fri, 22 Oct 2021 11:49:01 -0400 - (8 hours ago)
| | WIP on main: e07e691 clear 1.56 warnings
| * 6bf8ab1 - Ben Lovy 
|/  Fri, 22 Oct 2021 11:49:01 -0400 - (8 hours ago)
|   index on main: e07e691 clear 1.56 warnings
* e07e691 - David Yamnitsky 
| Fri, 22 Oct 2021 11:09:02 -0400 - (8 hours ago)
| clear 1.56 warnings
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The coloration doesn't reflect here, in your terminal this will be &lt;em&gt;even cooler&lt;/em&gt;.  As a &lt;code&gt;git&lt;/code&gt; novice, this sort of output is instrumental in keeping track of changes to the codebase.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>git</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to Upload Android Studio Project to GitHub?</title>
      <author>Vincent T</author>
      <pubDate>Fri, 22 Oct 2021 22:36:03 +0000</pubDate>
      <link>https://dev.to/vtsen/how-to-upload-android-studio-project-to-github-4d2</link>
      <guid>https://dev.to/vtsen/how-to-upload-android-studio-project-to-github-4d2</guid>
      <description>&lt;p&gt;Simple and beginner-friendly step-by-step guides to share your Android project in GitHub repository&lt;/p&gt;

&lt;p&gt;The good thing about using Android Studio to upload your files to GitHub is it automatically figures out for you what files are required to commit and push to GitHub. For example, generated files are not required to commit and push to GitHub.&lt;/p&gt;

&lt;p&gt;The following provides the step-by-step instructions on how you can upload your Android studio projects to GitHub:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-sign-up-github-and-install-git"&gt;
  &lt;/a&gt;
  Step 1 - Sign Up GitHub and Install Git
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Sign up  &lt;a href="https://github.com/"&gt;github.com&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Download and install git from  &lt;a href="https://git-scm.com/downloads"&gt;here&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-2-enable-version-control-integration"&gt;
  &lt;/a&gt;
  Step 2 - Enable Version Control Integration
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In your Android Studio, go to menu "&lt;strong&gt;VCS→Enable Version Control Integration...&lt;/strong&gt;"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XWGxiLBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632532935222/844EiPo3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XWGxiLBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632532935222/844EiPo3r.png" alt="android_studio_share_to_github_01.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Select "&lt;strong&gt;Git&lt;/strong&gt;" and click "&lt;strong&gt;OK&lt;/strong&gt;"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YQY1-qHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632533038400/7uPs8DL1I.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YQY1-qHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632533038400/7uPs8DL1I.png" alt="android_studio_share_to_github_02.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-3-share-project-on-github"&gt;
  &lt;/a&gt;
  Step 3 - Share Project on GitHub
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Go to menu "&lt;strong&gt;Git→GitHub→Share Project on GitHub&lt;/strong&gt;"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7b9QtAHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632533291532/2wG10u4gI.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7b9QtAHu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632533291532/2wG10u4gI.png" alt="android_studio_share_to_github_03.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Login GitHub account either via GitHub website or with token. GitHub website login didn't work for me. So I ended up use token instead.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iN4FeAog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632534611765/1Aq5GYLJB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iN4FeAog--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632534611765/1Aq5GYLJB.png" alt="android_studio_share_to_github_04.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click "&lt;strong&gt;Generate...&lt;/strong&gt;" and follow the instructions to get the generated token&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy and paste the token, click "&lt;strong&gt;Add  Account&lt;/strong&gt;"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zHwc_e_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632534815574/aIIoJ2pHP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zHwc_e_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632534815574/aIIoJ2pHP.png" alt="android_studio_share_to_github_05.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Name your repository name, check "&lt;strong&gt;Private&lt;/strong&gt;" if you want to create a private repository. Then, click "&lt;strong&gt;Share&lt;/strong&gt;". A new repository is created.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D3-KzaLE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632534997903/MR1dF88w0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D3-KzaLE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632534997903/MR1dF88w0.png" alt="android_studio_share_to_github_06.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click "&lt;strong&gt;Add&lt;/strong&gt;" to commit your files&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OTr-PtVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632535239726/BHlwBAJMB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OTr-PtVT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632535239726/BHlwBAJMB.png" alt="android_studio_share_to_github_07.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That is it. Your project now has been uploaded to your GitHub repository. After you make some local changes to your file, you need to commit and push those changes into a GitHub repository. The following steps show you how to do that.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#make-changes-to-your-files"&gt;
  &lt;/a&gt;
  Make Changes to Your Files
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#step-1-commit-your-files"&gt;
  &lt;/a&gt;
  Step 1 - Commit your files
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Click "&lt;strong&gt;commit&lt;/strong&gt;" in the top right corner. You can also go to menu "&lt;strong&gt;Git→Commit&lt;/strong&gt;"
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LXxkKXsK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632535743452/XKIURdRnx.png" alt="android_studio_share_to_github_08.png"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-2-push-your-files"&gt;
  &lt;/a&gt;
  Step 2 - Push your files
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enter your commit description and click "&lt;strong&gt;Commit and Push...&lt;/strong&gt;"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3L1mG2m5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632535845009/uiBS0TUxA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3L1mG2m5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632535845009/uiBS0TUxA.png" alt="android_studio_share_to_github_09.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There are code analysis warnings, you can either review them or just go ahead to push your files&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TWUUdH7J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632536252224/8d2XNfwPih.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TWUUdH7J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632536252224/8d2XNfwPih.png" alt="android_studio_share_to_github_10.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click "&lt;strong&gt;Push&lt;/strong&gt;". Your files have been updated in the repository&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iMn3d_eI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632536379936/gUSfMsbBP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iMn3d_eI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632536379936/gUSfMsbBP.png" alt="android_studio_share_to_github_11.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can also click "&lt;strong&gt;Commit&lt;/strong&gt;" and push your files later on. To push your files, click "&lt;strong&gt;push&lt;/strong&gt;" in the top right corner. You can also go to menu "&lt;strong&gt;Git→Push&lt;/strong&gt;". The rest of the steps are very similar to "&lt;strong&gt;Commit and Push&lt;/strong&gt;" above.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5wPDZend--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632536584424/W-ACaRmKN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5wPDZend--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632536584424/W-ACaRmKN.png" alt="android_studio_share_to_github_12.png"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another common thing I do before I commit the files is review my changes. The following steps show you how you can review and make any changes to your files in the committing screen.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#show-diff-before-commit"&gt;
  &lt;/a&gt;
  Show Diff Before Commit
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#step-1-show-diff"&gt;
  &lt;/a&gt;
  Step 1 - Show Diff
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Select a file, right click and click "&lt;strong&gt;Show Diff&lt;/strong&gt;"
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dZ2YScsQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632791558829/u-axyhnk4.png" alt="android_studio_share_to_github_13.png"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-2-select-stepbystep-viewer"&gt;
  &lt;/a&gt;
  Step 2 - Select "step-by-step viewer"
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;By default, it is "&lt;strong&gt;Unified viewer&lt;/strong&gt;" which I don't like.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4AyUxw9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632791856741/QVRxY8pRU.png" alt="android_studio_share_to_github_14.png"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-3-review-and-make-changes"&gt;
  &lt;/a&gt;
  Step 3 - Review and Make Changes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Now you can review your change. You can also make changes to your file from this window.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fwv1PxHe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632792129491/bJDEysCx3.png" alt="android_studio_share_to_github_15.png"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this helps! I’m new to GitHub and this is what I do to commit and push my Android projects into my GitHub repositories.&lt;/p&gt;




&lt;p&gt;Originally published at &lt;a href="https://vtsen.hashnode.dev/how-to-upload-android-studio-project-to-github"&gt;https://vtsen.hashnode.dev&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>android</category>
      <category>github</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How database transactions work in Ecto and why Elixir makes it awesome?</title>
      <author>Curiosum</author>
      <pubDate>Fri, 22 Oct 2021 21:57:21 +0000</pubDate>
      <link>https://dev.to/curiosum_dev/how-database-transactions-work-in-ecto-and-why-elixir-makes-it-awesome-b75</link>
      <guid>https://dev.to/curiosum_dev/how-database-transactions-work-in-ecto-and-why-elixir-makes-it-awesome-b75</guid>
      <description>&lt;p&gt;Today we're going to look at how Ecto, which is Elixir's first-choice database access library, addresses the issue of &lt;strong&gt;handling database transactions&lt;/strong&gt;. We'll briefly introduce you to the very concept of transaction, then focus on describing the Ecto way of handling them, and explaining how it feels superior to what other languages' libraries offer us in this department. We'll give plenty of examples corresponding to a simple app you can pull from &lt;a href="https://github.com/curiosum-dev/elixir-ecto-database-transactions"&gt;our GitHub repository&lt;/a&gt;, so you can have some fun testing it out! &lt;a href="https://curiosum.com/blog/elixir-ecto-database-transactions"&gt;Read more...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>phoenix</category>
    </item>
    <item>
      <title>Elixir Trickery: Cheating on Structs, And Why It Pays Off</title>
      <author>Curiosum</author>
      <pubDate>Fri, 22 Oct 2021 21:55:25 +0000</pubDate>
      <link>https://dev.to/curiosum_dev/elixir-trickery-cheating-on-structs-and-why-it-pays-off-4eb6</link>
      <guid>https://dev.to/curiosum_dev/elixir-trickery-cheating-on-structs-and-why-it-pays-off-4eb6</guid>
      <description>&lt;p&gt;While we can't say cheating on anyone is okay, we're not as absolutistic when it comes to cheating on Elixir at times.&lt;/p&gt;

&lt;p&gt;Structs are there for a reason (we'll start from a brief overview), and that's certainly not for us to cheat on them. But we can if we have to - and we'll sometimes even justify that and get away with it!&lt;/p&gt;

&lt;p&gt;Today's article will come in handy especially for those who are interested in developing libraries for Elixir and making them usable across different dependency versions, which is always a problem when writing code intended to be pluggable into different applications. &lt;a href="https://curiosum.com/blog/elixir-trickery-cheating-on-structs"&gt;Read more...&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>structs</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Taste of Redux</title>
      <author>hwangs12</author>
      <pubDate>Fri, 22 Oct 2021 21:38:14 +0000</pubDate>
      <link>https://dev.to/hwangs12/taste-of-redux-2431</link>
      <guid>https://dev.to/hwangs12/taste-of-redux-2431</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-dependencies-do-you-need"&gt;
  &lt;/a&gt;
  What dependencies do you need?
&lt;/h3&gt;

&lt;p&gt;For those who are familiar with react hooks, &lt;code&gt;React&lt;/code&gt; is of course the one you should import. For Redux, you need the following imports&lt;/p&gt;

&lt;p&gt;In your main app file, where every component has gathered to demonstrate on your browser, you will need&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From &lt;strong&gt;createStore&lt;/strong&gt;, the web page will be rendered and each state in your component will be tracked.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, &lt;strong&gt;Provider&lt;/strong&gt; allows us to &lt;em&gt;distribute&lt;/em&gt; the state to different components - this is not the final step of distributing though, you need to do something to your components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Navbar&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CartContainer&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Provider&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that your store is now set up as a prop in Provider component&lt;/p&gt;

&lt;p&gt;Now let's go back to reducer from createStore argument, where is the reducer coming from? You can write reducer function in the same file but for neatness we are going to create our own reducer file  &lt;/p&gt;

&lt;p&gt;Now, if we go to reducer file, we will see reducer function and it takes two things as arguments: state and action&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;state is equal to the initialState is how initial state is set up in redux. The action parameter will be used to keep track of user action in our web. &lt;/p&gt;

&lt;p&gt;Now, if we go to bottom components/smaller components where state change is happening, we need the following codes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is where the tricky part starts, from &lt;strong&gt;connect&lt;/strong&gt;, we will see a cool argument which also acts as function to pull state from top components to the bottom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;CartContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Many questions can arise here, where is &lt;strong&gt;count&lt;/strong&gt; coming from? We didn't set this up in our top component and pass it as prop. And, What is dispatch? &lt;/p&gt;

&lt;p&gt;To figure it out, we need to look at the following codes below (this is usually at the bottom of your component)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapStateToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mapStateToProps&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nx"&gt;CartContainer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, this basically means, you are connecting CartContainer to the state from the Provider. &lt;/p&gt;

&lt;p&gt;Since you are returning that mapStateToProps object and return count property from the state, you can now use count in the CartContainer and pass it as prop. dispatch is automatically added when you connect - how convenient!&lt;/p&gt;

&lt;p&gt;For those who used dispatch from useReducer hook, it is injecting type of action and payload when user do something on the elements you create say for example, a button click to increase value or something. &lt;/p&gt;

&lt;p&gt;Note, you can also map dispatch itself to props&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ownProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ownProps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;REMOVE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="na"&gt;increase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;INCREASE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="na"&gt;decrease&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DECREASE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you do this, you don't need to pass dispatch as prop and instead use more descriptive keys such as remove, increase, decrease for dispatch. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ownProps&lt;/strong&gt; is whatever has been passed as props to your component from &lt;em&gt;prop-drilling&lt;/em&gt; - meaning it has been passed from the top component. &lt;/p&gt;

&lt;p&gt;Also, when your projects get big (I mean that's what instructors say, but I have never done big projects), you do what people call action creators. &lt;/p&gt;

&lt;p&gt;From your reducer file, you write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removeItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;REMOVE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So basically you are saving the argument as payload and define action type to use in the mapDispatchToProps. &lt;/p&gt;

&lt;p&gt;This is kind of redundant, but this is what you will see in your component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mapDispatchToProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ownProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ownProps&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="nx"&gt;increaseItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
        &lt;span class="nx"&gt;decreaseItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;of course, assuming that you have imported them from reducer. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>redux</category>
      <category>react</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
