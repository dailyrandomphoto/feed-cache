<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🔄 C# 9.0 Features and Expectations of C# 10</title>
      <author>Dotnetsafer</author>
      <pubDate>Fri, 14 May 2021 17:22:35 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/c-9-0-features-and-expectations-of-c-10-n7c</link>
      <guid>https://dev.to/dotnetsafer/c-9-0-features-and-expectations-of-c-10-n7c</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ze8VBWtC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c54ps3axcpfrtuyxcyqy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ze8VBWtC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c54ps3axcpfrtuyxcyqy.png" alt="csharp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The latest version of &lt;em&gt;C#, 9.0,&lt;/em&gt; was officially released with &lt;em&gt;.NET 5&lt;/em&gt; in November 2020. These days there are already rumors of the features of the future version, &lt;strong&gt;C# 10&lt;/strong&gt;. ✅&lt;/p&gt;

&lt;p&gt;One of the biggest advantages of open source software is being able to &lt;strong&gt;see how the project evolves over time&lt;/strong&gt; as the days go by. With this we want to refer to the same &lt;em&gt;C#&lt;/em&gt;, since we can follow its progress on GitHub and see its main news.&lt;/p&gt;

&lt;p&gt;Let's start with &lt;strong&gt;the most important features&lt;/strong&gt; of &lt;em&gt;C# 9.0&lt;/em&gt; 🤗&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#module-initializers"&gt;
  &lt;/a&gt;
  🔼 Module Initializers
&lt;/h3&gt;

&lt;p&gt;In this latest version of &lt;em&gt;C # 9.0&lt;/em&gt;, the &lt;em&gt;[ModuleInitializer]&lt;/em&gt; attribute is used to specify a method that we can invoke before any code in the module, the destination method must be static, without any type of parameter and returned empty.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;system&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Runtime.CompilerServices&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"Data=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ModuleInitializer&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"This static method is invoked before any other method in the module"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extension-getenumerator"&gt;
  &lt;/a&gt;
  🔼 Extension GetEnumerator
&lt;/h3&gt;

&lt;p&gt;The foreach statement normally operates on a variable of type &lt;em&gt;IEnumerator &lt;/em&gt; when it contains a definition of any public extension for &lt;em&gt;GetEnumerator&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This is how we can see it in this example 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;system&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;IEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;GetEnumerator&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is my favorite color"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Extensions&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GetEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;IEnumerator&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;enumerator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;enumerator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#covariant-return%C2%A0types"&gt;
  &lt;/a&gt;
  🔼 Covariant Return Types
&lt;/h3&gt;

&lt;p&gt;In &lt;em&gt;C# 9.0&lt;/em&gt;, the return types of override methods are usually much more specific than the declarations in the base type 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Weather&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Temperature&lt;/span&gt; &lt;span class="nf"&gt;GetTemperature&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Spain&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Weather&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;Celsius&lt;/span&gt; &lt;span class="nf"&gt;GetTemperature&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Celsius&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;USA&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Weather&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="n"&gt;Farenheit&lt;/span&gt; &lt;span class="nf"&gt;GetTemperature&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ne&lt;/span&gt; &lt;span class="nf"&gt;Farenheit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Temperature&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Celsius&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Farenheit&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;em&gt;GetTemperature ()&lt;/em&gt; method has the return type &lt;em&gt;Temperature&lt;/em&gt;, the derived class Spain overrides this method and returns a specific type &lt;em&gt;Celsius&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It is a feature that makes our code &lt;strong&gt;more flexible&lt;/strong&gt;. ✅&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#init%C2%A0accessor"&gt;
  &lt;/a&gt;
  🔼 Init Accessor
&lt;/h3&gt;

&lt;p&gt;The init accessor makes immutable objects easier to create and use 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The init accessor can be used with Structures, &lt;em&gt;Registers&lt;/em&gt; and &lt;em&gt;Classes&lt;/em&gt;. The init accessor can be used with &lt;em&gt;Classes, Structures, and Registers&lt;/em&gt; 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point1&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#records"&gt;
  &lt;/a&gt;
  🔼 Records
&lt;/h3&gt;

&lt;p&gt;Now we have a new type of reference called record that gives us equal value. To better understand it, we have this example 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)};&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;record&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, the point record is immutable, you can greatly simplify the syntax using init accesor, since its properties are read-only.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lambda-discard-parameters"&gt;
  &lt;/a&gt;
  🔼 Lambda Discard Parameters
&lt;/h3&gt;

&lt;p&gt;The next &lt;em&gt;C# 9.0&lt;/em&gt; improvement is being able to use discard (_) as an input parameter of a lambda expression in case that parameter is not used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="c1"&gt;//C#8&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Click&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Button clicked"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//C#9&lt;/span&gt;
&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Click&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Button clicked"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is a feature that also allows us to read the code in a &lt;strong&gt;cleaner&lt;/strong&gt; and more beautiful way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#targettyped-new"&gt;
  &lt;/a&gt;
  🔼 Target-Typed new
&lt;/h3&gt;

&lt;p&gt;Another very important feature in this latest version of &lt;em&gt;C#&lt;/em&gt; is the ability to omit the type of a new expression when the object type is explicitly known.&lt;/p&gt;

&lt;p&gt;Let's see a quick and simple example 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"point:(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is a very useful feature since it allows you to read the code in a clean way without having to duplicate the type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"point:(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;point1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt;)"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#toplevel-statements"&gt;
  &lt;/a&gt;
  🔼 Top-Level Statements
&lt;/h3&gt;

&lt;p&gt;In C# 9.0, it is possible to write a top-level program after using declarations.&lt;/p&gt;

&lt;p&gt;Here we can see the example 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With top-level declarations, you wouldn't need to declare any space between names, main method, or class program. This new feature can be very useful for programmers just starting out, as the compiler does all of these things for you.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CompilerGenerated&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nc"&gt;program&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seeing the new features in &lt;em&gt;C# 9.0&lt;/em&gt;, which help make programming &lt;strong&gt;much simpler&lt;/strong&gt; and &lt;strong&gt;more intuitive&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What can we expect in the future version?&lt;/p&gt;

&lt;p&gt;Okay, let's talk about the future version 👇&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;What could bring new?&lt;/em&gt; 🤔&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;What would you like me to have?&lt;/em&gt; 🤔&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;What is the possibility of it being added?&lt;/em&gt;🤔&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the upcoming features are still &lt;strong&gt;debatable&lt;/strong&gt; and are not certain to appear in &lt;em&gt;C# 10&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Keep in mind that they are not simply ideas or contributions from the community. These features that I am going to mention are being shuffled by its developers. And although they are not implemented in the next version, today they are being refined so that they come out in future versions of C#.&lt;/p&gt;

&lt;p&gt;Let's start 👍&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#filelevel-namespaces"&gt;
  &lt;/a&gt;
  🔼 File-level namespaces
&lt;/h3&gt;

&lt;p&gt;All of us when we started programming in &lt;em&gt;C#&lt;/em&gt; we have created a &lt;em&gt;"Hello World"&lt;/em&gt; application. Knowing this we also know that &lt;em&gt;C#&lt;/em&gt; uses a block structure for namespaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;HelloWorld&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt; 
     &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The best thing about this is that namespaces can be overlaid very easily, simply by nesting blocks. In the same way that a single file can contain types in any combination of namespaces and multiple files can share the same namespace between them.&lt;/p&gt;

&lt;p&gt;If we want to scratch the negative part a bit, this system adds a bit of indentation if we compare it with bracket languages such as &lt;em&gt;JavaScript&lt;/em&gt; or &lt;em&gt;Java&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The question we ask ourselves at this point is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it possible to keep that functionality, but at the same time reduce excess indentation?&lt;/strong&gt; 🤔&lt;/p&gt;

&lt;p&gt;Yes ✅&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How is it possible?&lt;/strong&gt; 🤔&lt;/p&gt;

&lt;p&gt;It simply opened that entering namespaces with file scope, this would allow to establish a default namespace that would be applied automatically to the entire file eliminating the indentation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;HelloWorld&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Hello&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is normal to only have one file scoped namespace per file, so there would be no problem. Likewise, most &lt;em&gt;C#&lt;/em&gt; code files do not include more than one namespace.&lt;/p&gt;

&lt;p&gt;If for example we add a namespace block to a file that uses a file-scoped namespace, a nested namespace is simply created.&lt;/p&gt;

&lt;p&gt;Let's see a quick example 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Company.Product&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;Company&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Component&lt;/span&gt;

&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;Component&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is clear that it is not a very big feature, but it is preferable that the more improvements there are, the easier and more intuitive the task of programming will be.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#primary-constructors"&gt;
  &lt;/a&gt;
  🔼 Primary constructors
&lt;/h3&gt;

&lt;p&gt;In the latest released versions of &lt;em&gt;C#&lt;/em&gt;, the topic of boilerplate code has been reduced considerably with features like automatic properties.&lt;/p&gt;

&lt;p&gt;The main improvement of this is not simply reducing the amount of code that is written, but reducing the amount of code that has to be read. It makes navigating code bases &lt;strong&gt;easier&lt;/strong&gt; and &lt;strong&gt;reduces the most common places where errors can occur&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Primary constructors are a very good implementation that would again reduce the amount of code that is written. We can see it with this simple example that has a class that has a constructor and two read-only properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DataSlice&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;DataLabel&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;DataValue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;DataSlice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;dataLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dataValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;DataLabel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataLabel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="n"&gt;DataValue&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What the statistics tell us, is that &lt;strong&gt;70%&lt;/strong&gt; of its classes have constructors, and more than &lt;strong&gt;90%&lt;/strong&gt; of all of them simply do nothing more than copy parameters into properties.&lt;/p&gt;

&lt;p&gt;If you haven't written any kind of constructor code yet, don't worry as we can still create and use the class in the same way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;adultData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;DataSlice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Vaccinated adults"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;741&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By using the main constructor, property validation is not excluded. In the same way, its rules can be enforced in a property setter.&lt;/p&gt;

&lt;p&gt;Let's see an example 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DataSlice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;dataLabel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;dataValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;DataLabel&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dataLabel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;set&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;value&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ArgumentOutOfRangeException&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
     &lt;span class="n"&gt;dataLabel&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;DataValue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;dataValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Other details are also possible (calling the base constructor in a derived class, adding constructors). The main downside to all of this is that the primary constructors could collide with the position registers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#raw-string%C2%A0literals"&gt;
  &lt;/a&gt;
  🔼 Raw string literals
&lt;/h3&gt;

&lt;p&gt;We already know that the ordinary strings that &lt;em&gt;C#&lt;/em&gt; has, tend to be quite messy since they need quotation marks &lt;strong&gt;('')&lt;/strong&gt;, newlines &lt;strong&gt;(\ n)&lt;/strong&gt; and backslashes &lt;strong&gt;()&lt;/strong&gt;. What &lt;em&gt;C#&lt;/em&gt; offers before this little problem is the use of special characters.&lt;/p&gt;

&lt;p&gt;For example, we can prefix a string with @ and have free rein to add all these details without any problem 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"c:\\path\\backslashes"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@"c:\pathh\backslashes"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What the raw string literal string allows is to create new paths to avoid escaping problems. Using the delimiter of a series of quotes followed by a line break to start, and a line break followed by the same number of quotes to close.&lt;/p&gt;

&lt;p&gt;To understand it more simply, I leave you this example below 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"""
&lt;/span&gt;          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2021"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
             &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2020"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="s"&gt;""";
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If your concern is that there is a possibility of a triple quote sequence within the string, you can simply extend the delimiter so that you can use all the quotes you want, as long as the beginning and end are respected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""""&lt;/span&gt; 
             &lt;span class="n"&gt;Now&lt;/span&gt; &lt;span class="s"&gt;""" is safe to use in your raw string.
&lt;/span&gt;             &lt;span class="s"&gt;""""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the same way as @ strings, newlines and whitespace are preserved in a raw string. What happens is that the common white space, that is, the amount that is used to bleed, is cut off.&lt;/p&gt;

&lt;p&gt;Let's see more simply with an example 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2021"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
             &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2020"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2021"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2021"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this I want to explain to you that the raw strings are not intended to replace the @ strings that you are using right now.&lt;/p&gt;

&lt;p&gt;Rather, they are prepared for the specific moments when you need a marked block or arbitrary code and in turn you need a coding approach that is guaranteed to be safe.&lt;/p&gt;

&lt;p&gt;🟢 Conclution:&lt;/p&gt;

&lt;p&gt;To finish this article, my conclusion is that C# still has many years of travel ahead of it and it still has many things to add to make the task of programming even easier and more optimal.&lt;/p&gt;

&lt;p&gt;What do you think?🤔&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>csharp</category>
      <category>netcore</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 14 May 2021 17:17:42 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-7cj</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-7cj</guid>
      <description>&lt;p&gt;Hey there!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Looking back on your week — what was something you're proud of?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Exploring a new neighborhood in your town ... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Happy Friday!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/fdlcvptCs4qsM/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/fdlcvptCs4qsM/giphy.gif" alt="Dog in hammock"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Missing Azure REST APIs. Need not Worry</title>
      <author>Ilyas F</author>
      <pubDate>Fri, 14 May 2021 17:10:52 +0000</pubDate>
      <link>https://dev.to/ilyasit83/missing-azure-rest-apis-need-not-worry-36nb</link>
      <guid>https://dev.to/ilyasit83/missing-azure-rest-apis-need-not-worry-36nb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_IROmIIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7z5c3xj5yvrhavy9kj2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_IROmIIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7z5c3xj5yvrhavy9kj2.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today I came across a situation where I had to automate the process of creating and setting up an Azure IoT Central solution entirely using Azure REST APIs and found they are not available or not documented as of May 14th, 2021. However, you would definitely find &lt;code&gt;AZ CLI&lt;/code&gt; commands available, finding the REST APIs for the specific action is very simple. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/cli/azure/iot/central?view=azure-cli-latest"&gt;Azure IoT Central - AZ CLI commands&lt;/a&gt;&lt;br&gt;
&lt;a href="https://docs.microsoft.com/en-us/rest/api/iotcentral/"&gt;Azure IoT Central - REST API reference&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This gap might be fixed when you read this article in the future, so I highly recommend to refer the &lt;a href="https://docs.microsoft.com/en-us/rest/api/iotcentral/"&gt;Azure IoT Central - REST API reference&lt;/a&gt; to check if the APIs are documented. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-solution-az-cli-to-the-rescue"&gt;
  &lt;/a&gt;
  The Solution - AZ CLI to the rescue
&lt;/h2&gt;

&lt;p&gt;Login to your &lt;code&gt;AZ CLI&lt;/code&gt; and set the default subscription.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;az login
&lt;/span&gt;&lt;span class="gp"&gt;az account set -s &amp;lt;&amp;lt;subscription name or id&amp;gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next fire the respective AZ CLI command that you didn't find the REST API, in my case creating a new Azure IoT Central App with the &lt;strong&gt;--debug&lt;/strong&gt; argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;az iot central app create --name myiotcentral001
                          --resource-group rg_iotcentral
                          --subdomain myiotcentral001
                          --debug
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will generate a lot of debugging statements, but give your attention to the lines where it makes a call to the REST API. Refer to the below screenshot. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kIBxtz30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lpuk51wq81bxtqplqep.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIBxtz30--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lpuk51wq81bxtqplqep.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So you know, how to find the REST APIs of Azure!&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Happy Azure!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>azure</category>
      <category>azcli</category>
      <category>azurerestapi</category>
      <category>restfulapi</category>
    </item>
    <item>
      <title>From Java to Kotlin in 20 minutes ⚡️</title>
      <author>Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴</author>
      <pubDate>Fri, 14 May 2021 16:55:07 +0000</pubDate>
      <link>https://dev.to/jmfayard/from-java-to-kotlin-in-20-minutes-d9f</link>
      <guid>https://dev.to/jmfayard/from-java-to-kotlin-in-20-minutes-d9f</guid>
      <description>&lt;p&gt;What is the experience like as a Java developer to start programming in Kotlin?&lt;/p&gt;

&lt;p&gt;I didn't remember, it was years ago for me!&lt;/p&gt;

&lt;p&gt;Fortunately a mob-programming session with my colleagues gave me the chance to see again things with a beginner's mind.&lt;/p&gt;

&lt;p&gt;Story time!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#show-me-the-code"&gt;Show me the code!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mob-programming"&gt;Mob-programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tools--kotlin--configure-kotlin-in-project"&gt;&lt;code&gt;Tools &amp;gt; Kotlin &amp;gt; Configure Kotlin in project&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tell-java-that-parametersarenonnullbydefault"&gt;Tell Java that &lt;code&gt;@ParametersAreNonnullByDefault&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pinguesser-convert-java-file-to-kotlin-file"&gt;PinGuesser: &lt;code&gt;Convert Java File to Kotlin File&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pinguessertest-convert-java-file-to-kotlin-file--and-manual-fixes"&gt;PinGuesserTest: &lt;code&gt;Convert Java File to Kotlin File&lt;/code&gt;  and manual fixes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-the-kotlin-standard-library"&gt;Use the Kotlin standard library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#replace-stream-api-with-kotlin-stdlib"&gt;Replace stream() API with Kotlin stdlib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#default-to-read-only-properties"&gt;Default to read-only properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fail-fast"&gt;Fail fast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functional-style"&gt;Functional style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#listfold"&gt;List.fold()&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#where-do-we-go-from-here"&gt;Where do We Go From Here?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#show-me-the-code"&gt;
  &lt;/a&gt;
  Show me the code!
&lt;/h2&gt;

&lt;p&gt;To follow along, checkout the code.&lt;/p&gt;

&lt;p&gt;You need to have &lt;a href="https://www.jetbrains.com/idea"&gt;IntelliJ Community Edition&lt;/a&gt; installed. It's free!&lt;/p&gt;

&lt;p&gt;On MacOS for example, that's &lt;code&gt;$ brew install intellij-idea-ce&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The code is here, and you can see all the changes described below &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1"&gt;&lt;strong&gt;in this pull-request&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jmfayard"&gt;
        jmfayard
      &lt;/a&gt; / &lt;a href="https://github.com/jmfayard/from-java-to-kotlin"&gt;
        from-java-to-kotlin
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Kata: the observed PIN&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.codewars.com/kata/5263c6999e0f40dee200059d/train/java" rel="nofollow"&gt;https://www.codewars.com/kata/5263c6999e0f40dee200059d/train/java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alright, detective, one of our colleagues successfully observed our target person, Robby the robber. We followed him to a secret warehouse, where we assume to find all the stolen stuff. The door to this warehouse is secured by an electronic combination lock. Unfortunately our spy isn't sure about the PIN he saw, when Robby entered it.&lt;/p&gt;
&lt;p&gt;The keypad has the following layout:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;
&lt;pre&gt;&lt;code&gt;┌───┬───┬───┐
│ 1 │ 2 │ 3 │
├───┼───┼───┤
│ 4 │ 5 │ 6 │
├───┼───┼───┤
│ 7 │ 8 │ 9 │
└───┼───┼───┘
    │ 0 │
    └───┘
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="zeroclipboard-container position-absolute right-0 top-0"&gt;
  
    

    

  
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;He noted the PIN 1357, but he also said, it is possible that each of the digits he saw could actually be another adjacent digit (horizontally or vertically, but not diagonally). E.g. instead of the 1 it could also be the 2 or 4. And instead of the 5 it could also be the…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jmfayard/from-java-to-kotlin"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;But first some context&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobprogramming"&gt;
  &lt;/a&gt;
  Mob-programming
&lt;/h2&gt;

&lt;p&gt;My colleagues Sarah and Peter and I were doing in a session of &lt;a href="https://en.wikipedia.org/wiki/Mob_programming"&gt;Mob programming&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The goal was to solve the &lt;a href="https://www.codewars.com/kata/5263c6999e0f40dee200059d/train/java"&gt;kata of The observed PIN&lt;/a&gt;, where an unreliable spy tells that he saw the PIN &lt;strong&gt;1357&lt;/strong&gt; being used, but actually, he's not quite sure, each digit could be instead one of its neighbor on the keyboard layout. It could be &lt;strong&gt;1357&lt;/strong&gt; but also for example &lt;strong&gt;2357&lt;/strong&gt; or &lt;strong&gt;1368.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The project was a Java project built with Maven. It contains two files: &lt;code&gt;PinGuesser.java&lt;/code&gt; and &lt;code&gt;PinGuesserTest.java&lt;/code&gt;. It compiles and run the unit tests in a matter of seconds, not minutes like in many Android apps. That makes for a better developer experience IMHO.&lt;/p&gt;

&lt;p&gt;We were using &lt;a href="https://www.jetbrains.com/help/idea/code-with-me.html"&gt;IntelliJ's Code With Me&lt;/a&gt; to share the code.&lt;/p&gt;

&lt;p&gt;We were doing well and had solved the Kata in Java, then had refactored it to a satisfactory state.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Is there anything else we could improve?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : I don't know, looks good to me.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Well, we have 20 minutes left, why not rewriting the whole thing in Kotlin?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Oh, I've heard about Kotlin but haven't had the chance to use it yet. 20 minutes though, do you think we can do it?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Let's get started and see where it leads us!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#-raw-tools-gt-kotlin-gt-configure-kotlin-in-project-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;Tools &amp;gt; Kotlin &amp;gt; Configure Kotlin in project&lt;/code&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : Ok, so I have never done any Kotlin in my life, tell me what to do.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : There is a command IntelliJ called &lt;code&gt;Convert Java File to Kotlin File&lt;/code&gt;. It's a great starting point!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : Let's give it a try.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f5UjXm3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118158571-42ef6000-b41c-11eb-89df-c32de3ffe8f0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f5UjXm3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118158571-42ef6000-b41c-11eb-89df-c32de3ffe8f0.png" alt="https://user-images.githubusercontent.com/459464/118158571-42ef6000-b41c-11eb-89df-c32de3ffe8f0.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jIa61Rsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118158602-4d115e80-b41c-11eb-8cb6-ee85143251ae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jIa61Rsz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118158602-4d115e80-b41c-11eb-8cb6-ee85143251ae.png" alt="https://user-images.githubusercontent.com/459464/118158602-4d115e80-b41c-11eb-8cb6-ee85143251ae.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : IntelliJ tells me that Kotlin is not configured, that makes sense.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : How do I configure Kotlin in Maven?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : I don't know, I always used Gradle.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Just let IntelliJ do it!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : By the way, what it will do is the same thing as &lt;code&gt;Tools &amp;gt; Kotlin &amp;gt; Configure Kotlin in project&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : Let's do it&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : It seems to have worked. There are updates to the file &lt;code&gt;pom.xml&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/caaab696fa50e57e5bcb7c0a23f70de29b43b480"&gt;first commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tell-java-that-raw-parametersarenonnullbydefault-endraw-"&gt;
  &lt;/a&gt;
  Tell Java that &lt;code&gt;@ParametersAreNonnullByDefault&lt;/code&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Before we try the Java to Kotlin converter, there is something we want to take are of.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : As you know, Kotlin has integrated nullability in the type system while Java by default has not.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Therefore the converter is going to allow nulls everywhere, which is technically correct but not what you want.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : But there are annotations in Java to say if something is nullable or not, right?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Exactly! And the one we want is to tell by default everything is non-null. Conveniently, it's exactly how it works in Kotlin too.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gh"&gt;diff --git a/pom.xml b/pom.xml
&lt;/span&gt;     &amp;lt;dependencies&amp;gt;
&lt;span class="gi"&gt;+        &amp;lt;dependency&amp;gt;
+            &amp;lt;groupId&amp;gt;com.google.code.findbugs&amp;lt;/groupId&amp;gt;
+            &amp;lt;artifactId&amp;gt;jsr305&amp;lt;/artifactId&amp;gt;
+            &amp;lt;version&amp;gt;3.0.2&amp;lt;/version&amp;gt;
+        &amp;lt;/dependency&amp;gt;
&lt;/span&gt;
+++ b/src/main/java/pin/package-info.java
&lt;span class="p"&gt;@@ -0,0 +1,4 @@&lt;/span&gt;
&lt;span class="gi"&gt;+@ParametersAreNonnullByDefault
+package pin;
+
+import javax.annotation.ParametersAreNonnullByDefault;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#pinguesser-raw-convert-java-file-to-kotlin-file-endraw-"&gt;
  &lt;/a&gt;
  PinGuesser: &lt;code&gt;Convert Java File to Kotlin File&lt;/code&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : I guess I now open &lt;code&gt;PinGuesser.java&lt;/code&gt; and just relaunch the converter  &lt;code&gt;Convert Java File to Kotlin File&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Correct&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : It seems that... it worked? There is a file &lt;code&gt;PinGuesser.kt&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : How do you know it worked, though?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : You should run the unit tests&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : Right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-7fw-xL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117936889-aaff5280-b305-11eb-9c84-be7205e9673c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-7fw-xL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117936889-aaff5280-b305-11eb-9c84-be7205e9673c.png" alt="https://user-images.githubusercontent.com/459464/117936889-aaff5280-b305-11eb-9c84-be7205e9673c.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : It's still all green. Amazing, I have written my first Kotlin code ever, and it is bug-free!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Good job!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : What about the tests? Shouldn't we convert those too?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : You don't need to. Java and Kotlin can co-exist peacefully in the same codebase.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Ok, but it looks fun, I want to try it out too!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : First let me &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/08f5f3d1d5f84a8746a671e3828c18d3d703ae06"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#pinguessertest-raw-convert-java-file-to-kotlin-file-endraw-and-manual-fixes"&gt;
  &lt;/a&gt;
  PinGuesserTest: &lt;code&gt;Convert Java File to Kotlin File&lt;/code&gt;  and manual fixes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : So I open &lt;code&gt;PinGuesserTest.java&lt;/code&gt; and run the command. How is it called?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : &lt;code&gt;Convert Java File to Kotlin File&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Let's go!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : I now have a &lt;code&gt;PinGuesserTest.kt&lt;/code&gt; . It has some errors though&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tG7_8uNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117937632-80fa6000-b306-11eb-931b-7642e4aac07a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tG7_8uNp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/117937632-80fa6000-b306-11eb-931b-7642e4aac07a.png" alt="https://user-images.githubusercontent.com/459464/117937632-80fa6000-b306-11eb-931b-7642e4aac07a.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : Maybe apply the suggestion to optimize imports?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Ok.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : It worked.&lt;/li&gt;
&lt;li&gt;Me : as you see it's not perfect, but it's an awesome learning tool: you start with what you already know (in Java) and see it converted in what you want to learn (in Kotlin)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Let me run the unit tests&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : I have some weird JUnit errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---az0IFHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118160523-b3977c00-b41e-11eb-8151-a4dea10aa9e2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---az0IFHN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118160523-b3977c00-b41e-11eb-8151-a4dea10aa9e2.png" alt="https://user-images.githubusercontent.com/459464/118160523-b3977c00-b41e-11eb-8151-a4dea10aa9e2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Ok, so I understand that. Java has &lt;strong&gt;static&lt;/strong&gt; methods while Kotlin has the concept of a &lt;a href="https://kotlinlang.org/docs/object-declarations.html#companion-objects"&gt;companion object { ... }&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Its methods &lt;em&gt;look like&lt;/em&gt; static methods but are a bit different. Here JUnit really wants static methods, and we need an annotation to make it happy
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-        fun testSingleDigitParameters(): Stream&amp;lt;Arguments&amp;gt; {
&lt;/span&gt;&lt;span class="gi"&gt;+        @JvmStatic fun testSingleDigitParameters(): Stream&amp;lt;Arguments&amp;gt; {
&lt;/span&gt;             return Stream.of(
                 Arguments.of("1", java.util.Set.of("1", "2", "4")),
                 Arguments.of("2", java.util.Set.of("1", "2", "3", "5")),
&lt;span class="p"&gt;@@ -61,7 +58,7 @@&lt;/span&gt; internal class PinGuesserTest {
             )
         }

-        fun invalidParams(): Stream&amp;lt;Arguments&amp;gt; {
&lt;span class="gi"&gt;+        @JvmStatic  fun invalidParams(): Stream&amp;lt;Arguments&amp;gt; {
&lt;/span&gt;             return Stream.of(
                 Arguments.of("   "),
                 Arguments.of("A"),
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Unit tests now work!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : The project is now 100% in Kotlin&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/f4d60faa3949f21064edda02f69503d57e37941b"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#use-the-kotlin-standard-library"&gt;
  &lt;/a&gt;
  Use the Kotlin standard library
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : What comes next?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : It's possible to create &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;Map&lt;/code&gt; the traditional Java way, but the Kotlin standard library contains plenty of small utilities to streamline that, that would be my first change. Let me do it:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OctTc2Es--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118299183-b6f33c00-b4e0-11eb-9458-c8322d65cae9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OctTc2Es--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/459464/118299183-b6f33c00-b4e0-11eb-9458-c8322d65cae9.png" alt="https://user-images.githubusercontent.com/459464/118299183-b6f33c00-b4e0-11eb-9458-c8322d65cae9.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : that looks better. Are the unit tests still green?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : They are, let's &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/1a5c8dbe3415be22713b3f765f4050515bb91b72"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#replace-stream-api-with-kotlin-stdlib"&gt;
  &lt;/a&gt;
  Replace stream() API with Kotlin stdlib
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Something else contained in the Kotlin Standard Library are functions found in the functional programming languages like &lt;code&gt;.map()&lt;/code&gt;, &lt;code&gt;.filter()&lt;/code&gt;, &lt;code&gt;.flatmap()&lt;/code&gt; and much more.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : A bit like the Java Stream API that we are using?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Yes, like this but less verbose and more performant under the hood!
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight diff"&gt;&lt;code&gt;&lt;span class="gd"&gt;-    fun combineSolutions(pins1: Set&amp;lt;String&amp;gt;, pins2: Set&amp;lt;String&amp;gt;): Set&amp;lt;String&amp;gt; {
-        return pins1.stream()
-            .flatMap { pin1: String -&amp;gt;
-                pins2
-                    .stream()
-                    .map { pin2: String -&amp;gt; pin1 + pin2 }
-            .collect(Collectors.toSet())
-    }
&lt;/span&gt;
+    fun combineSolutions(pins1: Set&amp;lt;String&amp;gt;, pins2: Set&amp;lt;String&amp;gt;): Set&amp;lt;String&amp;gt; =
&lt;span class="gi"&gt;+        pins1.flatMap { pin1 -&amp;gt;
+            pins2.map { pin2 -&amp;gt;
+                "$pin1$pin2"
+             }
+        }.toSet()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Unit tests are still green.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/82070f0b8e9a39c030da723ddb00f1510efb810c"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#default-to-readonly-properties"&gt;
  &lt;/a&gt;
  Default to read-only properties
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Next, in idiomatic Kotlin style, we tend to use &lt;code&gt;val property&lt;/code&gt; instead of &lt;code&gt;var property&lt;/code&gt; most of the time.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : What's the difference?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : &lt;code&gt;val property&lt;/code&gt; is read-only, it has no setter, it's like a &lt;code&gt;final field&lt;/code&gt; in Java&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : I see. So, I just change the var property with a val?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Pretty much so.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : Easy enough&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/33b089cad9c90996f2800a0657c0f38d57ba992b"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#fail-fast"&gt;
  &lt;/a&gt;
  Fail fast
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Is there an idiomatic way to validate the parameters of a function?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : The PIN should be something like &lt;code&gt;7294&lt;/code&gt; with all characters being digits&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Yes, you use &lt;code&gt;require(condition) { "error message" }&lt;/code&gt;  for that&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : How would that look here?
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getPINs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="sc"&gt;'9'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"PIN $observedPin is invalid"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// rest goes here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Thanks!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/2424c592495db6f444e30708b88d9b8e2d26cd5e"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#functional-style"&gt;
  &lt;/a&gt;
  Functional style
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : What comes next?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : I would like to liberate the functions&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : What do you mean?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Look, we have this &lt;code&gt;PinGuesser&lt;/code&gt; class, but what it is doing exactly?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : It's doing nothing, it's a dumb namespace.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : It's a &lt;strong&gt;noun&lt;/strong&gt; that prevents us for accessing directly the &lt;strong&gt;verbs&lt;/strong&gt; who are doing the real work.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : One of my favorite programming language of all time is &lt;a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html"&gt;Execution in the kingdom of nouns by Steve Yegge.&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : I know that rant, pure genius!&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : How do we free up the verbs/functions?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : We remove the class and use top-level functions
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="p"&gt;--&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nc"&gt;PinGuesser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nc"&gt;PinGuesser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt;
&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="n"&gt;a20b3&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mf"&gt;38e457&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;100644&lt;/span&gt;
&lt;span class="p"&gt;---&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nc"&gt;PinGuesser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt;
&lt;span class="p"&gt;+++&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nc"&gt;PinGuesser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt;
&lt;span class="err"&gt;@@&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="err"&gt;@@&lt;/span&gt;
 &lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;pin&lt;/span&gt;

&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.stream.Collectors&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PinGuesser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="k"&gt;companion&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mapPins&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mapOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
             &lt;span class="s"&gt;"1"&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nf"&gt;setOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"4"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nf"&gt;setOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"5"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="err"&gt;@@&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="err"&gt;@@&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PinGuesser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="s"&gt;"9"&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nf"&gt;setOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"9"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
             &lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nf"&gt;setOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"8"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getPINs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toCharArray&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;@@&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="err"&gt;@@&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PinGuesser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="n"&gt;pins2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;pin2&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
                 &lt;span class="s"&gt;"$pin1$pin2"&lt;/span&gt;
             &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;        &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;toSet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;-}&lt;/span&gt;


&lt;span class="p"&gt;---&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nc"&gt;PinGuesserTest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt;
&lt;span class="p"&gt;+++&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nc"&gt;PinGuesserTest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kt&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PinGuesserTest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;pinGuesser&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;PinGuesser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

     &lt;span class="nd"&gt;@ParameterizedTest&lt;/span&gt;
     &lt;span class="nd"&gt;@MethodSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"testSingleDigitParameters"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;testSingleDigit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;actual&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pinGuesser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getPINs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;+&lt;/span&gt;        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;actual&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;getPINs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="nc"&gt;Assertions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;actual&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/commit/76273f16bd754477c5a558c003d8434b2cb28c98"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#listfold"&gt;
  &lt;/a&gt;
  List.fold()
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : Can we go a step back? What does it bring us to make the code nicer like this? At the end of the day, the customer doesn't care.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Well, I don't know you, but often I don't really understand the code I'm supposed to work on. I tend to work hard to simplify it and at some point it fits in my head and the solution becomes obvious.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Peter&lt;/em&gt; : What would it looks like here?&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : Now that the code is in a nice functional idiomatic Kotlin, I realize that the program can be solved using a single functional construct: &lt;strong&gt;List.fold()&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Sarah&lt;/em&gt; : Show me the code&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Me&lt;/em&gt; : &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1/commits/025fab52f042a3b077204594f8dd2237b8659304"&gt;commit&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getPINs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mapPins&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;"PIN $observedPin is invalid"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="n"&gt;observedPin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initial&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;setOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Char&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;pinsForChar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapPins&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;
        &lt;span class="nf"&gt;combineSolutions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pinsForChar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;combineSolutions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pins1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;pins2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;):&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="n"&gt;pins1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatMap&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;pin1&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;pins2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;pin2&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="s"&gt;"$pin1$pin2"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;toSet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#where-do-we-go-from-here"&gt;
  &lt;/a&gt;
  Where do We Go From Here?
&lt;/h2&gt;

&lt;p&gt;I hope that you liked this article.&lt;/p&gt;

&lt;p&gt;If you want to get in touch, you are welcome to do so via &lt;a href="https://jmfayard.dev/"&gt;https://jmfayard.dev/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is available at &lt;a href="https://github.com/jmfayard/from-java-to-kotlin"&gt;https://github.com/jmfayard/from-java-to-kotlin&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Start in the &lt;code&gt;java&lt;/code&gt; branch and compare with what is the &lt;code&gt;kotlin&lt;/code&gt; branch. &lt;a href="https://github.com/jmfayard/from-java-to-kotlin/pull/1"&gt;&lt;strong&gt;See this pull-request&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are interested to learn more about Kotlin, I've written about it here&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/jmfayard" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NjlhV-kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--oLH1L0EP--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/17066/64e291f5-65fd-452a-88d9-a2f0c071f807.jpg" alt="jmfayard image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/jmfayard/best-ways-to-learn-kotlin-from-scratch-or-from-java-with-books-or-tutorials-online-or-in-the-ide-52cm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to learn Kotlin: browser vs IDE, books vs tutorials, for newbies and Java devs&lt;/h2&gt;
      &lt;h3&gt;Jean-Michel Fayard 🇫🇷🇩🇪🇬🇧🇪🇸🇨🇴 ・ Dec 15 '19 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#kotlin&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#android&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>java</category>
      <category>kotlin</category>
      <category>android</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Redux alternative. Redoor new state manger for react, preact, inferno</title>
      <author>Ruslan</author>
      <pubDate>Fri, 14 May 2021 16:45:02 +0000</pubDate>
      <link>https://dev.to/rubender/redux-alternative-redoor-new-state-manger-for-react-preact-inferno-29hm</link>
      <guid>https://dev.to/rubender/redux-alternative-redoor-new-state-manger-for-react-preact-inferno-29hm</guid>
      <description>&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;I want to introduce you with my &lt;a href="https://github.com/rubender/redoor"&gt;redoor&lt;/a&gt; library alternative to redux. My team and I have been successfully using it in various projects for a year now, and now we want to share it with you.&lt;/p&gt;

&lt;p&gt;What's new&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;size only 3KB&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;convenient work with asynchronous code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;have your own events&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;works with react, preact, inferno&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;debugger on websockets&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples of projects on redoor: &lt;a href="https://github.com/rubender/redoor_todo_example"&gt;TODO&lt;/a&gt; app &lt;a href="https://github.com/rubender/react_redoor_ws_example"&gt;Websockets&lt;/a&gt; app&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>redux</category>
      <category>statemanager</category>
    </item>
    <item>
      <title>🔥 Next JS TypeScript Template Free using Tailwind 2.0, ESLint, Prettier and Husky</title>
      <author>Remi W.</author>
      <pubDate>Fri, 14 May 2021 16:24:24 +0000</pubDate>
      <link>https://dev.to/ixartz/next-js-typescript-template-free-using-tailwind-2-0-eslint-prettier-and-husky-301k</link>
      <guid>https://dev.to/ixartz/next-js-typescript-template-free-using-tailwind-2-0-eslint-prettier-and-husky-301k</guid>
      <description>&lt;p&gt;A Next JS TypeScript template free and open source made with great tooling for developers: Tailwind 2.0, Webpack 5, ESLint, Prettier, Husky and Bundle Analyzer.&lt;/p&gt;

&lt;p&gt;The GitHub repo have already reached 100+ stars 🌟.&lt;/p&gt;

&lt;p&gt;Built for production with high-quality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🎉 Type checking, TypeScript&lt;/li&gt;
&lt;li&gt;✏️ Linter, ESLint&lt;/li&gt;
&lt;li&gt;🛠 Code Formatter, Prettier&lt;/li&gt;
&lt;li&gt;🦊 SEO friendly&lt;/li&gt;
&lt;li&gt;🚀 Production-ready&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find a &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/"&gt;NextJS TypeScript Template live demo&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ixartz"&gt;
        ixartz
      &lt;/a&gt; / &lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;
        Next-js-Boilerplate
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🚀 Boilerplate and Starter for Next.js 10+, Tailwind CSS 2.0 and TypeScript ⚡️ Made with developer experience first: Next.js, TypeScript, ESLint, Prettier, PostCSS, Tailwind CSS.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Boilerplate and Starter for Next JS 10+, Tailwind CSS 2.0 and TypeScript&lt;/h1&gt;
&lt;p&gt;
  &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fst2T_oi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ixartz/Next-js-Boilerplate/master/public/assets/images/nextjs-starter-banner.png%3Fraw%3Dtrue" alt="Next js starter banner"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;🚀 Boilerplate and Starter for Next.js, Tailwind CSS and TypeScript ⚡️ Made with developer experience first: &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt;, &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;, &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt;, &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;, &lt;a href="https://postcss.org" rel="nofollow"&gt;PostCSS&lt;/a&gt;, &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Clone this project and use it to create your own &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; project. You can check a &lt;a href="https://creativedesignsguru.com/demo/Nextjs-Boilerplate/" rel="nofollow"&gt;Next js templates demo&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
Features&lt;/h3&gt;

&lt;p&gt;Developer experience first:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
🔥 &lt;a href="https://nextjs.org" rel="nofollow"&gt;Next.js&lt;/a&gt; for Static Site Generator&lt;/li&gt;
&lt;li&gt;
🎨 Integrate with &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
💅 &lt;a href="https://postcss.org" rel="nofollow"&gt;PostCSS&lt;/a&gt; for processing &lt;a href="https://tailwindcss.com" rel="nofollow"&gt;Tailwind CSS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🎉 Type checking &lt;a href="https://www.typescriptlang.org" rel="nofollow"&gt;TypeScript&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
✏️ Linter with &lt;a href="https://eslint.org" rel="nofollow"&gt;ESLint&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🛠 Code Formatter with &lt;a href="https://prettier.io" rel="nofollow"&gt;Prettier&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🦊 SEO metadata, &lt;a href="https://developers.google.com/search/docs/guides/intro-structured-data" rel="nofollow"&gt;JSON-LD&lt;/a&gt; and &lt;a href="https://ogp.me/" rel="nofollow"&gt;Open Graph&lt;/a&gt; tags with &lt;a href="https://github.com/garmeeh/next-seo"&gt;Next SEO&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
⚙️ &lt;a href="https://www.npmjs.com/package/@next/bundle-analyzer" rel="nofollow"&gt;Bundler Analyzer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
🌈 Include a FREE minimalist theme&lt;/li&gt;
&lt;li&gt;
💯 Maximize lighthouse score&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Built-in feature from Next.js:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
☕ Minify HTML &amp;amp; CSS&lt;/li&gt;
&lt;li&gt;
💨 Live reload&lt;/li&gt;
&lt;li&gt;
✅ Cache busting&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
Philosophy&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Minimal code&lt;/li&gt;
&lt;li&gt;SEO-friendly&lt;/li&gt;
&lt;li&gt;
🚀 Production-ready&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
Premium Themes (&lt;a href="https://creativedesignsguru.com/category/nextjs/" rel="nofollow"&gt;Nextjs Themes&lt;/a&gt;)&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-green-modern-nextjs-theme/" rel="nofollow"&gt;Green Nextjs Landing&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;&lt;/div&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ixartz/Next-js-Boilerplate"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#other-next-js-templates-and-themes"&gt;
  &lt;/a&gt;
  Other Next JS Templates and Themes
&lt;/h2&gt;

&lt;p&gt;I've also built others components and UI blocks in React. You can find them on my &lt;a href="https://creativedesignsguru.com/category/nextjs/"&gt;Next JS templates&lt;/a&gt; to quickly start your project:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-green-modern-nextjs-theme/"&gt;Green Nextjs Tailwind Template&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-indigo-modern-react-theme/"&gt;Indigo Nextjs Landing Page Theme&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-green-modern-nextjs-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4CbDAFVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-green-modern-nextjs-theme-xs.png" alt="Green Nextjs Tailwind Template"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-indigo-modern-react-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FvlCiWRl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-indigo-modern-nextjs-theme-xs.png" alt="Indigo Nextjs Landing Page Theme"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-purple-modern-react-theme/"&gt;Purple Responsive Nextjs Theme&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a href="https://creativedesignsguru.com/landing-blue-modern-react-theme/"&gt;Blue SaaS Nextjs Theme&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-purple-modern-react-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fsLIO5h8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-purple-modern-nextjs-theme-xs.png" alt="Purple Responsive Nextjs Theme"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://creativedesignsguru.com/landing-blue-modern-react-theme/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--az4i2Gg8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://creativedesignsguru.com/assets/images/themes/landing-blue-modern-nextjs-theme-xs.png" alt="Blue SaaS Nextjs Theme"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;You can easily customize the themes based on your needs by saving you development and design time.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Privacy focused search engine DuckDuckGo.</title>
      <author>Sumit kumar singh</author>
      <pubDate>Fri, 14 May 2021 16:21:22 +0000</pubDate>
      <link>https://dev.to/thecorrupttech/privacy-focused-search-engine-duckduckgo-3pm</link>
      <guid>https://dev.to/thecorrupttech/privacy-focused-search-engine-duckduckgo-3pm</guid>
      <description>&lt;p&gt;Every move you make, every click you take, someone's watching you online. According to &lt;a href="https://gs.statcounter.com/"&gt;Statcounter&lt;/a&gt; (search engine market share of April-May 2021) 92.21% of internet users use the Google search engine. Popular search engines like Google, Yahoo, Bing are tracking and collecting your search behavior and analyzing your searches with their algorithms.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H-BKEFjg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xa7uyfzwlgc71c3lecsa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H-BKEFjg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xa7uyfzwlgc71c3lecsa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-can-we-avoid-or-fight-with-this-issue"&gt;
  &lt;/a&gt;
  How can we avoid or fight with this issue?
&lt;/h3&gt;

&lt;p&gt;Using, DuckDuckGo that is a privacy-focused search engine and the top choice for those who care about protecting their data. DuckDuckGo is a web search engine that doesn't collect your data or track your searches. It doesn't store cookies, search history, nor your IP.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Em2QIpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzaj3naq6hf8hijg67hp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Em2QIpD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzaj3naq6hf8hijg67hp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Since it doesn't associate your search queries with your IP address, personalized ads won't follow you around. DuckDuckGo also doesn't offer any personalized results according to your search patterns. Everyone gets the same results for the same search. Using the DuckDuckGo is free at all.&lt;/p&gt;

&lt;p&gt;If you want know more please visit &lt;a href="https://the-corrupt-tech.com/"&gt;The Corrupt Tech&lt;/a&gt; or refer on dev community &lt;a class="mentioned-user" href="https://dev.to/thecorrupttech"&gt;@thecorrupttech&lt;/a&gt;
.&lt;/p&gt;

</description>
      <category>privacy</category>
      <category>cybersecurity</category>
      <category>cybertips</category>
    </item>
    <item>
      <title>How to define Open Graph / Twitter image alt text (and why it might not matter...)</title>
      <author>Stefan Judis</author>
      <pubDate>Fri, 14 May 2021 16:06:25 +0000</pubDate>
      <link>https://dev.to/stefanjudis/how-to-define-open-graph-twitter-image-alt-text-and-why-it-might-not-matter-12f7</link>
      <guid>https://dev.to/stefanjudis/how-to-define-open-graph-twitter-image-alt-text-and-why-it-might-not-matter-12f7</guid>
      <description>&lt;p&gt;You know all these fancy link previews that you see on social media when people share articles and resources, right? These previews are based on various meta elements defined in your website's &lt;code&gt;head&lt;/code&gt;. You can define the Twitter card layout using &lt;code&gt;&amp;lt;meta property="twitter:card" content="summary_large_image"&amp;gt;&lt;/code&gt;, specify the Facebook preview image with &lt;code&gt;&amp;lt;meta property="og:image" content="https://.../your-image.jpg"/&amp;gt;&lt;/code&gt; and many more configuration options. &lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/f20lfrunubsq/59yNEa6BuvIHW6OVgYPuM6/68a43de0febd017c8462404745403d1e/Screenshot_2021-05-14_at_17.41.21.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/f20lfrunubsq/59yNEa6BuvIHW6OVgYPuM6/68a43de0febd017c8462404745403d1e/Screenshot_2021-05-14_at_17.41.21.png" alt="Example of a Twitter card preview."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read more about the details in the documentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ogp.me/"&gt;the Open Graph Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/markup"&gt;Twitter cards&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Recently I learned that the two standards (Open Graph and Twitter cards) support alternative text for preview images. I want to be a good web citizen and implemented it right away.&lt;/p&gt;

&lt;p&gt;Unfortunately, I discovered that the alternative text definition might not matter much for Facebook or Twitter. That's a bummer; read on to learn more. 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-graph-and-twitter-cards-support-image-alternative-text"&gt;
  &lt;/a&gt;
  Open Graph and Twitter cards support image alternative text
&lt;/h2&gt;

&lt;p&gt;Thanks to my friend Feli (and Lea Rosema and Manuel Matuzović) I discovered Open Graph's &lt;code&gt;&amp;lt;meta property="og:image:alt " content="Your image alt text"/&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/kotzendekrabbe/status/1389142654395555841"&gt;She tweeted the following&lt;/a&gt;. 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/f20lfrunubsq/3Uy58qYA5gaaLlhOZUOqtl/34afe922dfbba152bf1d68a7cdd61729/Screenshot_2021-05-14_at_15.33.52.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/f20lfrunubsq/3Uy58qYA5gaaLlhOZUOqtl/34afe922dfbba152bf1d68a7cdd61729/Screenshot_2021-05-14_at_15.33.52.png" alt="Feli's Tweet: &amp;quot;TIL Open Graph Tags provide alt for images og:image:alt. Thank you @terabaud for letting me know ♥️&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It turns out that not only Open Graph but also Twitter allows alternative text using &lt;code&gt;&amp;lt;meta property="twitter:image:alt" content="Your image alt text"&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;That's very exciting! Ideally, these meta elements would allow us to define the alternative text for the images displayed on Twitter and Facebook to make them more accessible for assistive technology.&lt;/p&gt;

&lt;p&gt;Let's look at how Facebook and Twitter render my site's URL previews!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-image-alt-text-might-not-make-a-big-difference-for-assistive-technology"&gt;
  &lt;/a&gt;
  The image alt text might not make a big difference for assistive technology
&lt;/h2&gt;

&lt;p&gt;Let's have a look at how Facebook and Twitter render image alternative text in their previews.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#twitters-preview-cards"&gt;
  &lt;/a&gt;
  Twitter's preview cards
&lt;/h3&gt;

&lt;p&gt;I went to &lt;a href="https://cards-dev.twitter.com/validator"&gt;the Twitter Card validator&lt;/a&gt; to check my site, and it looked great!&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/f20lfrunubsq/7rKMZIpScuRku3qBT1nz9h/9c327165ebb197eab80520b0dad13eff/Screenshot_2021-05-14_at_16.29.52.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/f20lfrunubsq/7rKMZIpScuRku3qBT1nz9h/9c327165ebb197eab80520b0dad13eff/Screenshot_2021-05-14_at_16.29.52.png" alt="Twitter Card Validator showing the correctly displayed alt text define in meta elements."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The alternative text was set correctly in the validator preview. The next step was to check how Twitter renders the previews inside of their UI.&lt;/p&gt;

&lt;p&gt;Twitter caches all their previews for a while, and because I just deployed the &lt;code&gt;twitter:image:alt&lt;/code&gt; I couldn't check if it's rendered the same way the validator did. &lt;/p&gt;

&lt;p&gt;Nevertheless, I still had a look at the rendered HTML and found out that Twitter renders the preview image in many many divs and one of them includes the &lt;code&gt;aria-hidden="true"&lt;/code&gt; attribute. 😲&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/f20lfrunubsq/2jhHTZcJT8EQp6I4Zhn5ju/999ae22c868bd9141de2c552af1c5270/Screenshot_2021-05-14_at_16.43.16.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/f20lfrunubsq/2jhHTZcJT8EQp6I4Zhn5ju/999ae22c868bd9141de2c552af1c5270/Screenshot_2021-05-14_at_16.43.16.png" alt='Twitter markup showing the surrounding div including an aria-hidden="true"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute"&gt;&lt;code&gt;aria-hidden&lt;/code&gt; removes the element and all its children from the accessibility tree&lt;/a&gt;. That means that the new alternative text (if it shows up) won't improve the screen reader experience because screen readers won't discover the image after all. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Edit: Twitter uses &lt;code&gt;twitter:image:alt&lt;/code&gt; to define the preview image alt text. 🎉&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This discovery was disappointing, but I moved on to Facebook to find some improvements over there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#facebooks-link-preview"&gt;
  &lt;/a&gt;
  Facebook's link preview
&lt;/h3&gt;

&lt;p&gt;Similar to Twitter, Facebook also provides a preview tool – &lt;a href="https://developers.facebook.com/tools/debug/"&gt;the sharing debugger&lt;/a&gt;. I checked one of the URLs that now include &lt;code&gt;og:image:alt&lt;/code&gt;. Everything showed up correctly in the debugger's info section. 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/f20lfrunubsq/1ks6Hip3LaZJG2HY5xaPRc/b1222700db8cff64a5e4e1d1956ffe87/Screenshot_2021-05-14_at_16.57.26.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/f20lfrunubsq/1ks6Hip3LaZJG2HY5xaPRc/b1222700db8cff64a5e4e1d1956ffe87/Screenshot_2021-05-14_at_16.57.26.png" alt="Facebook debugger preview showing the correct content for og:image:alt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, the alternative text was not showing up in the debugger's preview. I shared a URL on Facebook to see my new alternative text in production. Luckily the image doesn't seem to be hidden from the accessibility tree, but(!) it appears that Facebook uses &lt;code&gt;og:title&lt;/code&gt; instead of &lt;code&gt;og:image:alt&lt;/code&gt; for the image alternative text. 😢&lt;/p&gt;

&lt;p&gt;&lt;a href="//images.ctfassets.net/f20lfrunubsq/42aeQPbqcglNLjOOt9LjEh/b17bcd95bf7a88ace40d5e9d1dc6b609/Screenshot_2021-05-14_at_17.04.50.png" class="article-body-image-wrapper"&gt;&lt;img src="//images.ctfassets.net/f20lfrunubsq/42aeQPbqcglNLjOOt9LjEh/b17bcd95bf7a88ace40d5e9d1dc6b609/Screenshot_2021-05-14_at_17.04.50.png" alt="Facebook UI preview showing that og:title is used for the image alt text."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I guess too few people are using &lt;code&gt;og:image:alt&lt;/code&gt; so that Facebook goes with the title to be on the safe side. &lt;/p&gt;

&lt;p&gt;These two discoveries bring up the question: &lt;strong&gt;should we bother implementing social media preview alternative texts if it doesn't improve the previews' accessibility&lt;/strong&gt;?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I will keep the &lt;code&gt;og:image:alt&lt;/code&gt; and &lt;code&gt;twitter:image:alt&lt;/code&gt; meta elements on my site. The elements are not harming the overall experience (I'm ignoring the few bytes of additional HTML), but unfortunately, they're not making social media previews more accessible either. &lt;/p&gt;

&lt;p&gt;If Facebook and Twitter change their implementation in the future, I'll be ready with correct alternative texts at least.&lt;/p&gt;




&lt;p&gt;Side note: &lt;a href="https://twitter.com/jkc_codes/status/1393234667206320132"&gt;John Kemp Cruz also pointed out that Twitter falls back to Open Graph for particular properties&lt;/a&gt;. Good to know!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>a11y</category>
    </item>
    <item>
      <title>JavaScript Tutorial: Build Tetris with modern JavaScript</title>
      <author>Ryan Thelin</author>
      <pubDate>Fri, 14 May 2021 16:03:58 +0000</pubDate>
      <link>https://dev.to/educative/javascript-tutorial-build-tetris-with-modern-javascript-4dpd</link>
      <guid>https://dev.to/educative/javascript-tutorial-build-tetris-with-modern-javascript-4dpd</guid>
      <description>&lt;p&gt;Learning a new programming language is difficult and not everyone learns the same way. For many, hands-on exploration on a project or interactive tutorial is the key to lasting learning.&lt;/p&gt;

&lt;p&gt;Especially for intuitive languages like JavaScript, building projects helps to provide context for how and why to use fundamental concepts in different applications. It also helps build your resume because you can show recruiters a collection of awesome projects to demonstrate your drive and developer skills.&lt;/p&gt;

&lt;p&gt;Today, we'll help you get started on a JavaScript game development project to build Tetris. By the end of the article, you'll have all the foundational pieces you need to continue building on your own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s what we’ll cover today:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what"&gt;What is Tetris?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#styling"&gt;Styling the game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#designing"&gt;Designing the board&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#canvas"&gt;Creating the canvas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#next"&gt;Next steps for your game&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h4&gt;&lt;b&gt; Learn JavaScript your way, in half the time&lt;/b&gt;&lt;/h4&gt;
 

&lt;p&gt;Pick up modern JavaScript skills while building a fun and fully featured project for your portfolio.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/courses/game-development-js-tetris"&gt;Game Development with JavaScript: Creating Tetris&lt;/a&gt;&lt;/b&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-is-tetris"&gt;
  &lt;/a&gt;
  What is Tetris?
&lt;/h2&gt;

&lt;p&gt;Tetris is a classic arcade game created in 1984 by Alexey Pajitnov. The game requires players to rotate and move falling Tetris pieces. Players clear lines by completing horizontal rows of blocks without empty cells. If the pieces reach the top, the game is over.&lt;/p&gt;

&lt;p&gt;Tetris is a popular project that lets aspiring game developers practice their skills in a simple environment. For example, you'll get hands-on practice with essential game design concepts, such as gameplay loop design, and implementing common game mechanics like user controls, score tracking, and collision detection. Unlike more complicated games, the behavior and visuals for Tetris are very simple. This lets you practice applying JavaScript basics for game development rather than figuring out animation or complex player behavior flowcharts.&lt;/p&gt;

&lt;p&gt;For this example, we'll start by using the simplest tools and build the complexity towards the end.&lt;/p&gt;

&lt;p&gt;To make Tetris, you'll need to know:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.educative.io/blog/html-beginners-tutorial-build-from-scratch"&gt;HTML&lt;/a&gt;/&lt;a href="https://www.educative.io/blog/beginner-guide-to-web-dev#basics"&gt;CSS&lt;/a&gt; styling&lt;/li&gt;
&lt;li&gt;JavaScript classes, variables, and scope&lt;/li&gt;
&lt;li&gt;Arrow functions&lt;/li&gt;
&lt;li&gt;Template literals&lt;/li&gt;
&lt;li&gt;Spread vs Rest&lt;/li&gt;
&lt;li&gt;Destructuring&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#styling-the-game"&gt;
  &lt;/a&gt;
  Styling the game
&lt;/h2&gt;

&lt;p&gt;First, let's set up the basic UI elements: the play area, a start button, and readouts to track score, lines, and level. We'll use &lt;a href="https://www.educative.io/blog/css-flexbox"&gt;Flexbox&lt;/a&gt; and &lt;a href="https://www.educative.io/blog/complete-guide-css-positions"&gt;CSS Grid&lt;/a&gt; to position the elements correctly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- index.html --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"board"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"game-board"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"right-column"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;TETRIS&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Score: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"score"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lines: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"lines"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Level: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"level"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"play()"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"play-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Play&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;styles&lt;/span&gt;&lt;span class="nc"&gt;.css&lt;/span&gt;
&lt;span class="nc"&gt;.grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;320px&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right-column&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.game-board&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.play-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#4caf50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A fundamental part of 80s games was the highly recognizable bitmap font. &lt;strong&gt;Press start 2P&lt;/strong&gt; is a free font from Google we can use to simulate the feeling. &lt;/p&gt;

&lt;p&gt;To add the font, we need to link to it in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; section of our HTML document and set it to our desired font in the CSS style sheet.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="c"&gt;&amp;lt;!--index.html--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;
  &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css?family=Press+Start+2P"&lt;/span&gt;
  &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="nt"&gt;styles&lt;/span&gt;&lt;span class="nc"&gt;.css&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Press Start 2P'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;cursive&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, code the infrastructure of the game board using JavaScript.&lt;br&gt;
You'll need to add  &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; elements at the end of our HTML document to import our JavaScript. &lt;/p&gt;

&lt;p&gt;The bottom of your HTML document should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"constants.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"board.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"piece.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/javascript"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"main.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;constants.js&lt;/code&gt; will contain the code for our static play board. These values will never change regardless of player actions. The playboard will consist of 10 columns and 20 rows, with a block size of 30.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//constants.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;COLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ROWS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BLOCK_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in the &lt;code&gt;main.js&lt;/code&gt; file we'll include some code to manipulate the document &lt;code&gt;object&lt;/code&gt;, which provides a programmable interface for the HTML document. This type of document is called a &lt;strong&gt;Document Object Model (DOM)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We can use the DOM to call the &lt;code&gt;getElementByID&lt;/code&gt; to let us target specific elements and automatically scale our game to match the size of the user's browser window. This uses the &lt;code&gt;canvas&lt;/code&gt; element new with HTML5, which allows us to create and use 2D shapes with ease.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;main.js&lt;/code&gt; file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//main.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;board&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Calculate size of canvas from constants.&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;COLS&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ROWS&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Scale blocks&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By the end, you'll have the following files:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--index.html--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt;
&lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css?family=Press+Start+2P"&lt;/span&gt;
&lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"grid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"board"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"game-board"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"right-column"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;TETRIS&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Score: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"score"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Lines: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"lines"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Level: &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"level"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"next"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onclick=&lt;/span&gt;&lt;span class="s"&gt;"play()"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"play-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Play&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//main.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;board&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Calculate size of canvas from constants.&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;COLS&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ROWS&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Scale blocks&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;BLOCK_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//constants.js&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;COLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ROWS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BLOCK_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;styles&lt;/span&gt;&lt;span class="nc"&gt;.css&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Press Start 2P'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;cursive&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.grid&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;320px&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.right-column&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.game-board&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.play-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#4caf50&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WmxceD-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28mwy40kn0u9sun64d30.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WmxceD-2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/28mwy40kn0u9sun64d30.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#keep-learning-js-with-handson-projects" class="anchor"&gt;
  &lt;/a&gt;
  Keep learning JS with hands-on projects.
&lt;/h4&gt;

&lt;p&gt;Learn in-demand JavaScript skills without the bookwork. Educative's text-based courses are easy to skim and feature hands-on project environments to help you learn your way, in half the time.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;a href="https://www.educative.io/courses/game-development-js-tetris"&gt;Game Development with JavaScript: Creating Tetris&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#designing-the-board"&gt;
  &lt;/a&gt;
  Designing the board
&lt;/h2&gt;

&lt;p&gt;Now that we have created a container for our game, it’s time to start coding the logic. First, we need the board to be able to draw the falling pieces and keep track of the game state.&lt;/p&gt;

&lt;p&gt;The board and pieces are both good candidates for a class. We can create a new instance of &lt;code&gt;Board&lt;/code&gt; when starting a new game and a new instance of &lt;code&gt;Piece&lt;/code&gt; every time a new piece enters the game.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;Board&lt;/code&gt; class, we'll make a new &lt;code&gt;board.js&lt;/code&gt; file. We want the board to reference the canvas every time the game starts so we'll include &lt;code&gt;ctx&lt;/code&gt; in the &lt;code&gt;Board&lt;/code&gt; constructor. We'll also include the &lt;code&gt;this&lt;/code&gt; keyword to let us set and access properties within &lt;code&gt;ctx&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//board.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Board&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
  &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tetris boards consist of many individual cells that are either empty or occupied. We'll represent empty cells with &lt;code&gt;0&lt;/code&gt; and occupied cells with integers of &lt;code&gt;1-7&lt;/code&gt; to represent colors.&lt;/p&gt;

&lt;p&gt;To represent the rows and columns of the board, we'll use a 2D array (a matrix). We'll have arrays of integers to represent a row and an array of rows to represent the full board. &lt;/p&gt;

&lt;p&gt;Since all games start with an empty board, we'll need a method that returns an empty board. We can use the built-in &lt;code&gt;fill()&lt;/code&gt; array method to populate all elements of each row to &lt;code&gt;0&lt;/code&gt;. The constructor will call this method so all games start empty.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;board.js&lt;/code&gt; file will now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//board.js&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Board&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getEmptyBoard&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getEmptyBoard&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ROWS&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;COLS&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we'll go back to &lt;code&gt;main.js&lt;/code&gt; to add this new game functionality to the play button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;board&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Board&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;board&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now our game board is set up! You can use &lt;code&gt;console.table()&lt;/code&gt; to see the matrix that controls the board. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--goQsizR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tr94v1negl9x0va4st1.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goQsizR5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tr94v1negl9x0va4st1.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-canvas"&gt;
  &lt;/a&gt;
  Creating the canvas
&lt;/h2&gt;

&lt;p&gt;Now we'll make sure our &lt;code&gt;canvas&lt;/code&gt; element is ready to use. The canvas provides a blank canvas for our game to sit on. &lt;/p&gt;

&lt;p&gt;We can also add a 2D drawing context over the canvas for drawing shapes, text, images, and other objects. It works similarly to programs like MS Paint in that you can choose your brush type and color then draw using code. &lt;/p&gt;

&lt;p&gt;First, we want to make sure the canvas is the right size. It is 300x150 pixels by default but we want it to scale using the code we added above.&lt;/p&gt;

&lt;p&gt;To do so, we add a &lt;code&gt;canvas&lt;/code&gt; element to our &lt;code&gt;index.html&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"canvas"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add a reference to the HTML &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; element element in the DOM (Document Object Model) using the &lt;code&gt;getElementById&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;canvas&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we'll use the canvas context to render some pieces. &lt;/p&gt;

&lt;p&gt;We can use the &lt;code&gt;HTMLCanvasElement.getContext()&lt;/code&gt; method to get the canvas context where we render the graphics. This method needs an argument so we'll pass &lt;code&gt;'2d'&lt;/code&gt; to get the 2D render context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2d&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Before we can draw we have to choose a color using the &lt;code&gt;fillStyle()&lt;/code&gt; method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then use the &lt;code&gt;fillRect()&lt;/code&gt; method from the context API to draw a simple rectangle filled with our chosen red color. &lt;code&gt;fillRect()&lt;/code&gt; takes 4 arguments: the x and y coordinates where the shape should start and the width/height of the rectangle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since all Tetris pieces are collections of squares, we can use this single draw method for all of our pieces!&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#animations"&gt;
  &lt;/a&gt;
  Animations
&lt;/h3&gt;

&lt;p&gt;Now that we have the tools to draw our graphics, we have to be able to move them.&lt;/p&gt;

&lt;p&gt;Canvas uses &lt;strong&gt;immediate rendering&lt;/strong&gt;: Drawn shapes are immediately rendered on the screen, but are not stored as shape objects. Instead, canvas only recognizes the shape as filled pixels, meaning we cannot move the shape in one piece. &lt;/p&gt;

&lt;p&gt;To show a moving shape, we have to delete the old shape using &lt;code&gt;clearRect()&lt;/code&gt;  and redraw it in a new position using &lt;code&gt;fillRect()&lt;/code&gt;. Canvas animations are essentially like stop motion animation because they move a little bit in each frame. &lt;/p&gt;

&lt;p&gt;Take a look at this example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fillRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we select blue as our color then fill a rectangle at point &lt;code&gt;0,0&lt;/code&gt;. Then we clear the whole canvas using &lt;code&gt;clearRect()&lt;/code&gt; and passing the width and height of the whole canvas. Finally, we draw a new rectangle of the same size and color at &lt;code&gt;1,1&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;From the user's perspective, the rectangle moved down and to the right on the screen.&lt;/p&gt;

&lt;p&gt;Now that you've got your canvas and drawing tools set up, you've got all the tools you need to start coding gameplay and a collection of game pieces!&lt;/p&gt;



&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps-for-your-game"&gt;
  &lt;/a&gt;
  Next steps for your game
&lt;/h2&gt;

&lt;p&gt;This is a great start to your next portfolio project. Now that you've built the foundation of the game, your next step is to create objects that draw each unique Tetris game piece in its own color. &lt;/p&gt;

&lt;p&gt;Each piece type will be represented by a 3x3 matrix where the piece is the filled cells and the surrounding empty space helps to rotate around the central cell.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2, 0, 0],  
[2, 2, 2],  
[0, 0, 0];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The best way to do this is with a &lt;code&gt;Piece&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;You'll also have to add keyboard support so the user can control the pieces. The best way to do this is to use keyboard event support built-in to modern browsers. You can set the program to listen for keyboard events like &lt;code&gt;keydown&lt;/code&gt;, &lt;code&gt;keyup&lt;/code&gt;, and so on at the document level using the &lt;code&gt;addEventListener()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;After these steps, you'll move onto adding more advanced features like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add collision detection and piece randomizer&lt;/li&gt;
&lt;li&gt;Add line clearing if a row is filled&lt;/li&gt;
&lt;li&gt;Track score, level, and past high scores&lt;/li&gt;
&lt;li&gt;Increase responsiveness with asynchronous JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To help complete this project and learn JavaScript with hands-on experience, Educative has created the course &lt;a href="https://www.educative.io/courses/game-development-js-tetris"&gt;&lt;strong&gt;Game Development with JavaScript: Creating Tetris&lt;/strong&gt;&lt;/a&gt;. This course helps you pick up foundational skills in JavaScript and game development at the same time by building a fun browser game. By the end of the course, you'll have a fully-featured Tetris web game and will have gained experience with JavaScript skills from beginner to advanced.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Happy learning!&lt;/em&gt;&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#continue-reading-about-javascript"&gt;
  &lt;/a&gt;
  Continue reading about JavaScript
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.educative.io/blog/javascript-snake-game-tutorial"&gt;JavaScript Snake Game Tutorial: build a simple, interactive game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.educative.io/blog/level-up-javascript-coding-challenges"&gt;Level up your JavaScript skills with 10 coding challenges&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.educative.io/blog/javascript-es6-tutorial-a-complete-crash-course"&gt;JavaScript ES6 Tutorial: A complete crash course on modern JS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>gamedev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>😫 Tired Of Relative Imports? Time To Get Rid Of Them!</title>
      <author>Ludal 🚀</author>
      <pubDate>Fri, 14 May 2021 15:50:17 +0000</pubDate>
      <link>https://dev.to/iamludal/tired-of-relative-imports-time-to-get-rid-of-them-1n48</link>
      <guid>https://dev.to/iamludal/tired-of-relative-imports-time-to-get-rid-of-them-1n48</guid>
      <description>&lt;p&gt;At some point in your Javascript developer journey, you've certainly encountered these types of imports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Car&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../../vehicles/car&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;House&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../../buildings/house&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you were probably bothered by the ugliness of them...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o8doVY3jacRLyrSmI/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o8doVY3jacRLyrSmI/giphy.gif" alt="https://media.giphy.com/media/3o8doVY3jacRLyrSmI/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But guess what? I'm here as a savior to show you how to get rid of them! (really) 😎&lt;/p&gt;

&lt;p&gt;Ready? Let's go! 🏁&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#baseurl"&gt;
  &lt;/a&gt;
  baseUrl
&lt;/h1&gt;

&lt;p&gt;The simplest way to get rid of these awful imports is by simply editing your &lt;code&gt;jsconfig.json&lt;/code&gt; file. If you don't already have one, you can just create it at the root of your project.&lt;/p&gt;

&lt;p&gt;Let's complete it with the following keys:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"baseUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, the most studious ones of you might think: "Compiler options? But JavaScript is not a compiled language!". And you're right! If you want to know why does this key exist, I recommend you to follow &lt;a href="https://code.visualstudio.com/docs/languages/jsconfig#_what-is-jsconfigjson"&gt;this link&lt;/a&gt; from the official website of Visual Studio Code.&lt;/p&gt;

&lt;p&gt;Now, imagine having the following directory structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── components
│   └── layouts
│       └── header.js
├── styles
│   └── header.css
└── jsconfig.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to include your &lt;code&gt;header.css&lt;/code&gt; style file in your &lt;code&gt;header.js&lt;/code&gt; file, you can now do it this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// header.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;styles/header.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Without this configuration, here's how you would have done it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// header.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../../styles/header.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, no matter how deep you are in your project's architecture, you'll be able to import your files as if you were at the root of your project. 😲&lt;/p&gt;

&lt;p&gt;And obviously, you'll still able to import them relatively from the current directory you are in!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── src
│   ├── vehicles
│   │   └── car.js
│   │   └── truck.js
│   └── index.js
└── jsconfig.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="c1"&gt;// index.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;truck&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./vehicles/truck.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://i.giphy.com/media/oYtVHSxngR3lC/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/oYtVHSxngR3lC/giphy.gif" alt="https://media.giphy.com/media/oYtVHSxngR3lC/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#paths"&gt;
  &lt;/a&gt;
  Paths
&lt;/h1&gt;

&lt;p&gt;Back to our &lt;code&gt;jsconfig.json&lt;/code&gt;. You can also add the &lt;code&gt;paths&lt;/code&gt; key in order to map an import to a specific folder. This is useful for giving aliases to some folders in your imports.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"compilerOptions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"baseUrl"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"paths"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"css/*"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"styles/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Considering the same folder structure we've seen in the previous part, you could now import your styles like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// header.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;css/header.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But I wouldn't recommend doing this at all, as this would create inconsistencies between the real folders' names and the aliases — instead, why not simply renaming the actual folder? 🤨&lt;/p&gt;

&lt;p&gt;Nevertheless, this option can be useful for folders you often use and that are not at the root of your project. Let's consider the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── assets
│   ├── styles
│   │   └── index.css
|── src
│   └── index.js
└── jsconfig.json
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will often use the &lt;code&gt;styles&lt;/code&gt; directory to import our styles, and that could be very handy if we could remove the &lt;code&gt;assets&lt;/code&gt; prefix, in order to not have to always write this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;assets/styles/index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In that case, you could add the following to your &lt;code&gt;jsconfig.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;compilerOptions&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;baseUrl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;paths&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@styles/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;assets/styles/*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, here's how you would import your styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@styles/index.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;@&lt;/code&gt; is a conventional way to reference a folder-mapping import, in order to differentiate it from a classic import.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  TypeScript
&lt;/h1&gt;

&lt;p&gt;Oh, you are using TypeScript? Awesome! Of course you can also use this trick: the only difference is that you won't write those settings inside the &lt;code&gt;jsconfig.json&lt;/code&gt; file, but instead, inside...?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o7TKTDn976rzVgky4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o7TKTDn976rzVgky4/giphy.gif" alt="https://media.giphy.com/media/3o7TKTDn976rzVgky4/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exactly! Inside the &lt;code&gt;tsconfig.json&lt;/code&gt; file. Smart, isn't it? 😏&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;That's it! You've now got rid of those awful imports, congratulations! 🎉&lt;/p&gt;

&lt;p&gt;To go further, I would recommend you following &lt;a href="https://code.visualstudio.com/docs/languages/jsconfig"&gt;this link&lt;/a&gt; from the official Visual Studio Code website, in particular to exclude some directories that are not part of the source code.&lt;/p&gt;

&lt;p&gt;With that being said, I thank you for reading me all the way through, and I hope you've learned something with this article. 😎&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/3o6Zt6KHxJTbXCnSvu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/3o6Zt6KHxJTbXCnSvu/giphy.gif" alt="https://media.giphy.com/media/3o6Zt6KHxJTbXCnSvu/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The truth about Open Source Developers. (WDS #2)</title>
      <author>Blake Campbell</author>
      <pubDate>Fri, 14 May 2021 15:49:52 +0000</pubDate>
      <link>https://dev.to/blaketweeted/the-truth-about-open-source-developers-wds-2-2bb9</link>
      <guid>https://dev.to/blaketweeted/the-truth-about-open-source-developers-wds-2-2bb9</guid>
      <description>&lt;p&gt;Disclaimer this is 100% satire. For fun on a Friday (Web Dev Satire #2)&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ICyjQL4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1j1aw6e99t2b4g0xacx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ICyjQL4M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1j1aw6e99t2b4g0xacx.png" alt="Screen Shot 2021-05-14 at 11.07.55 AM"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#open-source-developers-make-a-lot"&gt;
  &lt;/a&gt;
  Open Source developers make a lot
&lt;/h1&gt;

&lt;p&gt;As you can see from this chart, I didn't exaggerate that open-source developers make way more than FAANG Developers. This might be the single driving factor in deciding to make a project open-source.&lt;/p&gt;

&lt;p&gt;It's the fastest and most secure way to grab the bag and start buying houses like it's Monopoly. Anyone who tells you Open-source developers don't make this much, well, those are paid actors. &lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#os-developers-love-vague-issues"&gt;
  &lt;/a&gt;
  OS developers love vague issues
&lt;/h1&gt;

&lt;p&gt;One of the best ways to support OS is making vague issues that don't relate to the project. Got to keep those developers on their toes. Sometimes they get lonely. Remind them that you care, just not enough to duplicate the issue or provide any practical information. If you include a version number, you've gone too far. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--65RqViYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4jc5yponpgxtenr3znr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--65RqViYu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4jc5yponpgxtenr3znr.png" alt="Screen Shot 2021-05-14 at 11.19.24 AM"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#complain-and-add-nothing-on-an-open-issue"&gt;
  &lt;/a&gt;
  Complain and add nothing on an open issue
&lt;/h1&gt;

&lt;p&gt;If you do find a valid issue on Github, complain. Dog-pile on it as much as you can. &lt;/p&gt;

&lt;p&gt;Here are some phrases the OS developers love:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;"This is stupid, why does it work this way?"&lt;/li&gt;
&lt;li&gt;"Same"&lt;/li&gt;
&lt;li&gt;"The docs are useless"&lt;/li&gt;
&lt;li&gt;"Can you fix this today?"&lt;/li&gt;
&lt;li&gt;"Help." (That's the entire comment)&lt;/li&gt;
&lt;/ul&gt;




&lt;h1&gt;
  &lt;a href="#rant-about-github-activity"&gt;
  &lt;/a&gt;
  Rant about GitHub activity
&lt;/h1&gt;

&lt;p&gt;Why are you making a billion dollars a year when you only commit a few times? Who cares about raising money so you can keep the project alive, I want my free project now! &lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#star-the-project-and-keep-moving-even-if-you-work-at-a-fortune-500-company"&gt;
  &lt;/a&gt;
  Star the project and keep moving, even if you work at a Fortune 500 company
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZN6qOdTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dl0qsgq23bhfpkp2otz.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZN6qOdTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5dl0qsgq23bhfpkp2otz.jpeg" alt="EPXUU1RXUAEdbjj"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Source: &lt;a href="https://twitter.com/DavidKPiano"&gt;David K Piano&lt;/a&gt; go give him a follow on Twitter. This picture is too good not to include.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bonus points if you can get your company to send a box of chocolates or a few stickers to that project the company depends on. The margins are so razor-thin for F500 companies that a box of chocolates might be a stretch. &lt;/p&gt;







&lt;p&gt;In case it isn't clear by now, this is satire! Web Dev has gotten so full of uninformed opinions, I thought I'd poke some fun. To all Open-source developers, you're great. The community wouldn't be the same without you! Happy Friday!&lt;/p&gt;

&lt;p&gt;Some of my favorite OS Developers. Thank you!&lt;br&gt;
&lt;a href="https://twitter.com/left_pad"&gt;Henry at BabelJS&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/youyuxi"&gt;Evan You of VueJS&lt;/a&gt;&lt;br&gt;
&lt;a href="https://twitter.com/Akryum"&gt;Guillaume Chau of VueJS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bSdSr1i5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1m71xz5fzmhype617i0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bSdSr1i5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s1m71xz5fzmhype617i0.png" alt="c7b8113247fecd83bd9b5ed5bd3f34d5"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Real of open source developers&lt;/em&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>From Amateur to Professional: The One KEY Tip I Give All Aspiring Devs</title>
      <author>Bradston Henry</author>
      <pubDate>Fri, 14 May 2021 15:36:49 +0000</pubDate>
      <link>https://dev.to/bradstondev/from-amateur-to-professional-the-one-key-tip-i-give-all-aspiring-devs-233a</link>
      <guid>https://dev.to/bradstondev/from-amateur-to-professional-the-one-key-tip-i-give-all-aspiring-devs-233a</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MR6h5-S2guE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Throughout the years of being a developer, I have had lots of mentors and those who have shared wisdom and insight that has helped me to get to this point in my career. As I reflect on my time as a developer, if there is one piece of advice I almost always share with all aspiring developers who are hoping to take their career to the next level, it's this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#build-a-thing-deploy-a-thing"&gt;
  &lt;/a&gt;
  Build a Thing, Deploy a Thing!
&lt;/h1&gt;

&lt;p&gt;or &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#build-a-thing-publish-a-thing"&gt;
  &lt;/a&gt;
  Build a Thing, Publish a Thing!
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know that probably sounds a bit simple but this piece of advice and wisdom can be a huge game-changer in your development career pursuit. &lt;/p&gt;

&lt;p&gt;What I'm trying to say, is to not only write code and try out new techniques and technology, but to take the next step and write code with the intent of releasing that code (or application) to the public. What I mean is that you should put your code in some space where people you know and don't know can use it. I specifically encourage you to package your application in a way that users can use, experiment and (even) break your code.&lt;/p&gt;

&lt;p&gt;At first thought, you may feel that you may not be ready to do this but that is absolutely okay. Even as a seasoned developer, I sometimes feel a bit hesitant about sharing my own code with others who I do not know. But I do believe the experience you gain from going through the process is huge and that the benefits outweigh any possible "negatives".&lt;/p&gt;

&lt;p&gt;So let me briefly breakdown why I think this simple tip can have a huge impact on you as an aspiring developer (and even those who are already professionals):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-you-gain-experience-on-the-development-to-deployment-process"&gt;
  &lt;/a&gt;
  1. You Gain Experience on the Development to Deployment Process
&lt;/h2&gt;

&lt;p&gt;The experience you gain from going through the entire "development lifecycle" of creating an idea, developing and idea, and publishing that idea is invaluable. In the development to deployment process, there are lessons about code quality, code efficiency, environment feasibility, cost constraints, etc. that you could never learn just by working on personal pet projects. Going through the process of preparing application code for "real world" deployment puts in perspective your current coding and development practices and if they actually align with what it takes to actually make a production ready product. &lt;/p&gt;

&lt;p&gt;There is soooo much more I can say on this point and how important that experience becomes in the long-run when you are working in a professional setting but for now I'll leave it at that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-it-helps-solidify-your-technical-knowledge-on-a-topic"&gt;
  &lt;/a&gt;
  2. It Helps Solidify Your Technical Knowledge on a Topic
&lt;/h2&gt;

&lt;p&gt;One consequence of writing code with the intent to release it, is that in most cases it strengthens your technical knowledge. Throughout the years of programming, I have learned over and over again, that code that I implemented for some type of "Proof of Concept" personal project rarely works in the real world. As you go through the process of preparing your code for deployment, you tend to learn the ins-and-outs of the technology you are working with because "rarely" does code work the same way in a development environment (e.g. your local machine) as it does out in wild (e.g. in the Cloud). When you encounter these discrepancies, it forces you to dig deeper and to understand more. Sometimes, the process of trying to deploy an application alone, can teach you more about the limitations and the strengths of a technology than hours and hours of reading through documentation on that topic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-it-teaches-you-to-be-more-customer-oriented-and-outwardfocused"&gt;
  &lt;/a&gt;
  3. It Teaches You to be More Customer Oriented and Outward-Focused
&lt;/h2&gt;

&lt;p&gt;I remember shortly after I published my first game to the Android app store that I shared my game with a friend to check out. I simply told him to check out this new game and I gave him no context on how to play the game or its objective. I stood silently next to him as I watched him download, boot up and play the game. In the 5-10 minutes of watching him play the game, I learned one of the most crucial lessons that has helped me in my professional development career: &lt;/p&gt;

&lt;p&gt;"Just because something makes sense to me, does NOT mean it makes sense to other people" &lt;/p&gt;

&lt;p&gt;Watching my friend play, I realized that I had developed the game with only myself in mind as the user or customer. The UI or user interface only made sense to me. The game rules only made sense to me. And the list went on. &lt;/p&gt;

&lt;p&gt;It taught me a valuable lesson: "When creating an application you are almost NEVER the target audience." In most cases when developing code for applications in a professional setting, you are not the only person who will use your application. And building applications that you plan to publish, will really solidify that concept. You will begin thinking of how you code will make sense to someone else whom you will never see and never be able to explain your decisions to. It forces you to think more outwardly and consider how a "prospective customer" would use your application. It helps you to have a much more mature and well-rounded point of view when developing applications.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-published-applications-speak-volumes-in-interviews"&gt;
  &lt;/a&gt;
  4. Published Applications Speak Volumes in Interviews
&lt;/h2&gt;

&lt;p&gt;It's simple: &lt;strong&gt;Why not show an employer what you are capable of instead of telling them.&lt;/strong&gt; One of the core reasons I got my first position at IBM was that I was able to show the hiring manager that I was already able to do the tasks that would be required of me in my new position. Instead of talking about how I had worked with multiple mobile technologies and how I knew about Android development, I simply shared my Android app store link and they were able to see my skills in action. That alone didn't get me the job but after that, the interview was not about if I was able to do the job but if the job would be a good fit for me. Once again, it  most likely won't get you the job all on its own but it speaks volumes about your skills.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-it-teaches-discipline"&gt;
  &lt;/a&gt;
  5. It Teaches Discipline
&lt;/h2&gt;

&lt;p&gt;There is a TON I could say on this specific point but in short, taking an application from development to deployment teaches you what it takes to get it done. It teaches you the steps, the pitfalls, the difficulties and most importantly it teaches you that you can do it. It teaches you the discipline of actually finishing a development project and what it takes. As you work in your professional career, it is inevitable that you will encounter some difficulties; Difficult projects, un-cooperative technology and unreasonable deadlines to name a few. But if you have the experience of deploying applications, If you know what it takes, if you have built that discipline; then &lt;strong&gt;those difficulties with not define you, they will just refine you&lt;/strong&gt;. You will know what it takes to get across the finish line, you will know that you can do it, and you will have the skills and experience to do so.&lt;/p&gt;




&lt;p&gt;In my personal opinion, building and deploying apps as an aspiring dev is key. It has personally helped me to get to where I am professionally and I have seen the positive impact it has had on colleagues and friends attempting to pursue and advance their career in development.&lt;/p&gt;

&lt;p&gt;So I've had an opportunity to share my personal opinion but I'd love to hear yours.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-what-is-your-key-tip-for-aspiring-developers-attempting-to-go-from-amateur-to-professional"&gt;
  &lt;/a&gt;
  So what is YOUR key tip for aspiring developers attempting to go from amateur to professional?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xN8cGMqX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q3pwabyxv7p1h5mr1zae.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;LOOKING TO LEARN A THING? Check out some of my previous blogs and tutorials:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ibm.biz/how-to-containerize-react-app-031821-bradstondev"&gt;Dockers and Dad Jokes: How to Containerize a ReactJS Application&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ibm.biz/deploying-react-app-in-cloud-devto-bradstondev"&gt;Deploying your first ReactJS application into the Cloud&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creating Your Own Chat Room with React, Node, and Socket.io in the Cloud &lt;a href="https://ibm.biz/create-chat-room-in-cloud-blog-part1"&gt;Part 1&lt;/a&gt; &lt;a href="https://ibm.biz/create-chat-room-in-cloud-blog-part2"&gt;Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;==== FOLLOW ME ON SOCIAL MEDIA ====&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/BradstonDev"&gt;Bradston Dev&lt;/a&gt;&lt;br&gt;
Dev.to: &lt;a class="mentioned-user" href="https://dev.to/bradstondev"&gt;@bradstondev&lt;/a&gt;
 &lt;br&gt;
Youtube: &lt;a href="https://www.youtube.com/channel/UC6Ky8s71RP65akLb_XV1_OA"&gt;Bradston YT&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
