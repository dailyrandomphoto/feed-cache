<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Writing Bash Scripts Like A Pro - Part 1 - Styling Guide</title>
      <author>Meir Gabay</author>
      <pubDate>Sun, 24 Oct 2021 23:51:25 +0000</pubDate>
      <link>https://dev.to/unfor19/writing-bash-scripts-like-a-pro-part-1-styling-guide-4bin</link>
      <guid>https://dev.to/unfor19/writing-bash-scripts-like-a-pro-part-1-styling-guide-4bin</guid>
      <description>&lt;p&gt;Writing &lt;a href="https://www.gnu.org/software/bash/"&gt;Bash&lt;/a&gt; scripts can be challenging if you don't know the quirks and perks. In my mother tongue, we use the Yiddish word for quirks and perks; it's called "Shtickim" (plural of &lt;a href="https://en.wikipedia.org/wiki/Shtick"&gt;"Shtick"&lt;/a&gt;). Are you ready to learn more about Bash's "Shtickim"?&lt;/p&gt;

&lt;p&gt;This blog post is part of a series that I'm working on in my spare time to preserve the knowledge for future me that forgets stuff, to assist new colleagues, and indulge programmers like you who wish to love Bash as I do. So let's begin, shall we?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-a-scripting-language"&gt;
  &lt;/a&gt;
  It's A Scripting Language
&lt;/h2&gt;

&lt;p&gt;It's important to remember that Bash is a &lt;a href="https://en.wikipedia.org/wiki/Scripting_language#:~:text=A%20scripting%20language%20or%20script,at%20runtime%20rather%20than%20compiled."&gt;scripting language&lt;/a&gt;, which means it doesn't offer the standard functionalities that a &lt;a href="https://en.wikipedia.org/wiki/Programming_language#:~:text=A%20programming%20language%20is%20a,consist%20of%20instructions%20for%20computers."&gt;programming language&lt;/a&gt; has to offer, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Object-Oriented Programming is not supported natively&lt;/li&gt;
&lt;li&gt;There are no external libraries like Python's &lt;a href="https://docs.python-requests.org/en/latest/"&gt;requests&lt;/a&gt; or Node's &lt;a href="https://www.npmjs.com/package/axios"&gt;axios&lt;/a&gt;, though it is possible to use external applications such as &lt;a href="https://curl.se/"&gt;curl&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.oreilly.com/library/view/learning-php-mysql/9781449337452/ch13s06.html"&gt;Variables Typing&lt;/a&gt; is not supported, and all values are evaluated as &lt;em&gt;strings&lt;/em&gt;. It is possible to use numbers by using specific commands, such as &lt;a href="https://tldp.org/LDP/abs/html/comparison-ops.html"&gt;test equality with -eq&lt;/a&gt; and &lt;a href="https://tldp.org/LDP/abs/html/ops.html"&gt;increment a variable with ((VAR_NAME+1))&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://linuxhint.com/associative_array_bash/"&gt;Bash's Associative array&lt;/a&gt; like Python's &lt;a href="https://www.w3schools.com/python/python_dictionaries.asp"&gt;dict&lt;/a&gt; or JavaScript's &lt;a href="https://www.w3schools.com/js/js_objects.asp"&gt;Object&lt;/a&gt; is supported from version &lt;a href="https://tldp.org/LDP/abs/html/bashver4.html"&gt;Bash v4.4&lt;/a&gt;, and it's important to remember that &lt;a href="https://tldp.org/LDP/abs/html/bashver3.html"&gt;macOS is shipped with Bash v3.2&lt;/a&gt; (we'll get to that in future blog posts of this series)&lt;/li&gt;
&lt;li&gt;There is no "source of truth" for naming convention. For example, how would you name a global variable? &lt;code&gt;Pascal_Case&lt;/code&gt;? &lt;code&gt;snake_case&lt;/code&gt;? &lt;code&gt;SCREAMING_SNAKE_CASE&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you already guessed, "Bash programmers" (if there is such a thing) face many challenges. The above list is merely the tip of the iceberg.&lt;/p&gt;

&lt;p&gt;Here are great blog posts that share the same feelings as I do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.tothenew.com/blog/foolproof-your-bash-script-some-best-practices/"&gt;Foolproof Your Bash Script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kvz.io/bash-best-practices.html"&gt;Best Practices for Writing Bash Scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bertvv.github.io/cheat-sheets/Bash.html"&gt;Bash best practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we've covered the fact that I'm in love with Bash, I want to share that feeling with you; here goes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#variables-naming-convention"&gt;
  &lt;/a&gt;
  Variables Naming Convention
&lt;/h2&gt;

&lt;p&gt;Here's how I name variables in my Bash scripts&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Scope&lt;/th&gt;
&lt;th&gt;Convention&lt;/th&gt;
&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Environment&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;MY_VARIABLE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;_MY_VARIABLE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Local&lt;/td&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;td&gt;my_variable&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In my older Bash scripts, the names of the variables were hard to interpret. Changing to this naming convention helped me a lot to understand the scope of variables and their purpose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-vibes-application"&gt;
  &lt;/a&gt;
  Good Vibes Application
&lt;/h2&gt;

&lt;p&gt;And of course, we gotta' see some practical example, so here's how I implement the above naming convention in my &lt;code&gt;good_vibes.sh&lt;/code&gt; application.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;good_vibes.sh&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="c"&gt;# ^ This is called a Shebang&lt;/span&gt;
&lt;span class="c"&gt;# I'll cover it in future blog posts&lt;/span&gt;


&lt;span class="c"&gt;# Global variables are initialized by Env Vars.&lt;/span&gt;
&lt;span class="c"&gt;# I'm setting a default value with "${VAR_NAME:-"DEFAULT_VALUE"}"&lt;/span&gt;
&lt;span class="nv"&gt;_USER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER_NAME&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;_USER_AGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER_AGE&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;


complement_name&lt;span class="o"&gt;(){&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Wow, &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, you have a beautiful name!"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


complement_age&lt;span class="o"&gt;(){&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$age&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-gt&lt;/span&gt; &lt;span class="s2"&gt;"30"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Seriously &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;? I thought you were &lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;age-7&lt;span class="k"&gt;))&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Such a weird age, are you sure it's a number?"&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


main&lt;span class="o"&gt;(){&lt;/span&gt;
  &lt;span class="c"&gt;# The only function that is not "pure"&lt;/span&gt;
  &lt;span class="c"&gt;# This function is tightly coupled to the script&lt;/span&gt;
  complement_name &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$_USER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  complement_age &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$_USER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$_USER_AGE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;


&lt;span class="c"&gt;# Invokes the main function&lt;/span&gt;
main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;good_vibes.sh - Execution and output&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;USER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Julia"&lt;/span&gt; &lt;span class="nv"&gt;USER_AGE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"36"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
bash good_vibes.sh

&lt;span class="c"&gt;# Output&lt;/span&gt;
Wow, Julia, you have a beautiful name!
Seriously Julia? I thought you were 29
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break down the &lt;code&gt;good_vibes.sh&lt;/code&gt; application to a "set of rules" that can be implemented in your scripts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code-block-spacing"&gt;
  &lt;/a&gt;
  Code block spacing
&lt;/h3&gt;

&lt;p&gt;Two (2) blank rows between each block of code make the script more readable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indentation"&gt;
  &lt;/a&gt;
  Indentation
&lt;/h3&gt;

&lt;p&gt;I'm using two (2) spaces, though it's totally fine to use four (4) spaces for indentation. Just make sure you're not mixing between the two.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#curly-braces"&gt;
  &lt;/a&gt;
  Curly braces
&lt;/h3&gt;

&lt;p&gt;If it's a &lt;code&gt;${VARIABLE} concatenated with string&lt;/code&gt;, use curly braces as it makes it easier to read.&lt;/p&gt;

&lt;p&gt;In case it's a &lt;code&gt;"$LONELY_VARIABLE"&lt;/code&gt; there's no need for that, as it will help you realize faster if it's "lonely" or not.&lt;/p&gt;

&lt;p&gt;The primary purpose for curly braces is for performing a &lt;a href="https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html"&gt;Shell Parameter Expansion&lt;/a&gt;, as demonstrated in the Global variables initialization part.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#squared-brackets"&gt;
  &lt;/a&gt;
  Squared brackets
&lt;/h3&gt;

&lt;p&gt;Using &lt;strong&gt;double&lt;/strong&gt; &lt;code&gt;[[ ]]&lt;/code&gt; squared brackets makes it easier to read conditional code blocks. However, do note that using double squared brackets is not supported in &lt;a href="https://stackoverflow.com/a/5725402/5285732"&gt;Shell sh&lt;/a&gt;; instead, you should use single brackets &lt;code&gt;[ ]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I always use double brackets to ensure that my target users/machines have &lt;a href="https://www.gnu.org/software/bash/"&gt;Bash bash&lt;/a&gt; installed.&lt;/p&gt;

&lt;p&gt;To demonstrate the readability, here's a "complex" conditional code block:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Julia"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Willy"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER_AGE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-gt&lt;/span&gt; &lt;span class="s2"&gt;"30"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Easy to read right?"&lt;/span&gt;
&lt;span class="k"&gt;fi

if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Julia"&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Willy"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER_AGE&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-gt&lt;/span&gt; &lt;span class="s2"&gt;"30"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"No idea why but I feel lost with single brackets."&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In case you didn't notice, you've just learned that &lt;code&gt;||&lt;/code&gt; stands for &lt;code&gt;OR&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; stands for &lt;code&gt;AND&lt;/code&gt;. And the short &lt;a href="https://tldp.org/LDP/abs/html/comparison-ops.html"&gt;-gt&lt;/a&gt; expression means &lt;code&gt;greater than&lt;/code&gt; when using numbers. Finally, the &lt;code&gt;\&lt;/code&gt; character allows &lt;a href="https://unix.stackexchange.com/questions/281309/shell-syntax-how-to-correctly-use-to-break-lines"&gt;breaking rows&lt;/a&gt; in favor of making the code more readable.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Shtick&lt;/strong&gt;: Using &lt;code&gt;\&lt;/code&gt; with an extra space &lt;code&gt;\ &amp;lt;- extra space&lt;/code&gt; can lead to weird errors. Make sure there are no trailing spaces after &lt;code&gt;\&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I assume that using &lt;code&gt;[[ ]]&lt;/code&gt; feels more intuitive since most conditional commands are doubled &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; &lt;code&gt;||&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variable-initialization"&gt;
  &lt;/a&gt;
  Variable initialization
&lt;/h3&gt;

&lt;p&gt;Global variables are initialized with Environment Variables and are set with default values in case of empty Environment variables.&lt;/p&gt;

&lt;p&gt;As mentioned in the &lt;code&gt;good_vibes.sh&lt;/code&gt; comments, I'm setting a default value with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;VAR_NAME&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="s2"&gt;"DEFAULT_VALUE"&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet, the text &lt;code&gt;DEFAULT_VALUE&lt;/code&gt; is hardcoded, and it's possible to replace it with a variable. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;_USER_NAME="${USER_NAME:-"$USER"}"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functions-and-local-function-variables"&gt;
  &lt;/a&gt;
  Functions and local function variables
&lt;/h3&gt;

&lt;p&gt;Functions names and &lt;code&gt;local&lt;/code&gt; function variables names are &lt;code&gt;snake_cased&lt;/code&gt;. You might want to change functions names to &lt;code&gt;lowerCamelCase&lt;/code&gt;, and of course, it's your call.&lt;/p&gt;

&lt;p&gt;Coupling a function to the script is a common mistake, though I do sin from time to time, and you'll see Global/Environment variables in my functions, but that happens when I know that "this piece of code won't change a lot". &lt;/p&gt;

&lt;p&gt;Oh, and make sure you don't use &lt;code&gt;$1&lt;/code&gt; or any other argument directly; always use &lt;code&gt;local var_name="$1"&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;_USER_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;USER_NAME&lt;/span&gt;&lt;span class="k"&gt;:-&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$USER&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c"&gt;# Bad - coupled&lt;/span&gt;
coupled_username&lt;span class="o"&gt;(){&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"_USER_NAME = &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;_USER_NAME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Good - decoupled&lt;/span&gt;
decoupled_username&lt;span class="o"&gt;(){&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"name = &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; 
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Usage&lt;/span&gt;
coupled_username  
decoupled_username &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$_USER_NAME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#functional-programming"&gt;
  &lt;/a&gt;
  Functional Programming
&lt;/h3&gt;

&lt;p&gt;This topic relates to &lt;strong&gt;Functions and local function variables&lt;/strong&gt;, where functions are as "pure" as possible. As you can see in &lt;code&gt;good_vibes.sh&lt;/code&gt;, almost everything is wrapped in a function, except for &lt;strong&gt;Initializing Global variables&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I don't see the point of writing the &lt;code&gt;init_vars&lt;/code&gt; function, whose purpose is to deal with Global variables. However, I do find myself adding a &lt;code&gt;validate_vars&lt;/code&gt; function from time to time, which goes over the Global variables and validates their values. I'm sure there's room for debate here, so feel free to comment with your thoughts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;The "Good Vibes Application" mostly covered how to write a readable Bash script following the &lt;a href="https://en.wikipedia.org/wiki/Functional_programming"&gt;Functional Programming&lt;/a&gt; paradigm.&lt;/p&gt;

&lt;p&gt;If you feel that there's a need to change how you name variables and functions, go for it! As long as it's easy to understand your code, you're on the right track.&lt;/p&gt;

&lt;p&gt;The next blog posts in this series will cover the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Error handling&lt;/li&gt;
&lt;li&gt;Retrieving JSON data from an HTTP endpoint&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://tldp.org/LDP/abs/html/x9644.html"&gt;Background jobs&lt;/a&gt; and watching file for changes with &lt;a href="https://github.com/emcrisostomo/fswatch"&gt;fswatch&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Git Repository structure - adding Bash scripts to existing repositories or creating a new repository with a Bash CLI application&lt;/li&gt;
&lt;li&gt;Publishing a Bash CLI as a &lt;a href="https://www.docker.com/why-docker"&gt;Docker&lt;/a&gt; image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And more, and more ... I'm just going to spit it all out to blog posts. Feel free to comment with questions or suggestions for my next blog posts.&lt;/p&gt;

</description>
      <category>bash</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>devops</category>
    </item>
    <item>
      <title>Explaining SOLID with LEGO (and probably making enemies in the tech community)</title>
      <author>Bruno Noriller</author>
      <pubDate>Sun, 24 Oct 2021 23:31:09 +0000</pubDate>
      <link>https://dev.to/noriller/explaining-solid-with-lego-and-probably-making-enemies-in-the-tech-community-4db4</link>
      <guid>https://dev.to/noriller/explaining-solid-with-lego-and-probably-making-enemies-in-the-tech-community-4db4</guid>
      <description>&lt;p&gt;Yeah... so, this time I'll be doing something a little different.&lt;/p&gt;

&lt;p&gt;I believe I have a way to explain how SOLID works with LEGO!&lt;br&gt;
And... I'm already preparing for people making a enemy of me because of that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-solid"&gt;
  &lt;/a&gt;
  What is SOLID?
&lt;/h2&gt;

&lt;p&gt;The textbook (AKA Wikipedia) definition is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Five design principles intended to make software designs more understandable, flexible, and maintainable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was promoted by Uncle Bob and the acronym was introduced by Michael Feathers.&lt;/p&gt;




&lt;p&gt;And even without using all of the SOLID principles, your code will always be better.&lt;/p&gt;

&lt;p&gt;BTW... Do I know everything there is to know about SOLID? Noooo.&lt;/p&gt;

&lt;p&gt;But ever since I've started thinking of it as LEGOS, they started making a lot more sense to me, and I hope it will do the same for you.&lt;/p&gt;

&lt;p&gt;To understand what I'm talking, I'll be assuming you know what LEGO is, because if you don't... well... I'm sorry for you... (or Welcome to Earth!)&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#s-the-singleresponsibility-principle"&gt;
  &lt;/a&gt;
  S: The Single-responsibility principle
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;There should never be more than one reason for a class to change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Take a look at the cover photo again... why are there so many different pieces?&lt;br&gt;
Because each one... does ONE thing.&lt;/p&gt;

&lt;p&gt;Let's say you're making something out of LEGO, if you need a yellow brick, you don't need to cut another, larger piece, you just need the one piece you want.&lt;br&gt;
You need other color? No need to recolor it, just take the appropriate piece.&lt;/p&gt;

&lt;p&gt;The pieces itself never change!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#o-the-openclosed-principle"&gt;
  &lt;/a&gt;
  O: The Open–closed principle.
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Software entities should be open for extension, but closed for modification.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Can you change a LEGO brick?&lt;br&gt;
No you can't.&lt;/p&gt;

&lt;p&gt;But what if you need a bigger piece?&lt;br&gt;
You'll either take an already bigger piece or you will "make one" by combining smaller pieces.&lt;/p&gt;

&lt;p&gt;Each brick being immutable by itself, how do you do that?&lt;br&gt;
You use the knobs and tubes to connect one to another... you extend them without modifying them!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#l-the-liskov-substitution-principle"&gt;
  &lt;/a&gt;
  L: The Liskov substitution principle
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This one is a little trick with LEGO alone...&lt;br&gt;
But think it this way: what if I 3D Print a piece?&lt;/p&gt;

&lt;p&gt;The knobs and tubes in either one don't care if there's a brand (or the right brand), they only care if it fits or not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#i-the-interface-segregation-principle"&gt;
  &lt;/a&gt;
  I: The Interface segregation principle
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Many client-specific interfaces are better than one general-purpose interface.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again... look at the cover photo.&lt;br&gt;
Would it even be possible to make anything if pieces wanted to be ALL pieces?&lt;/p&gt;

&lt;p&gt;You would have one big piece what would be too much on all situations.&lt;br&gt;
Maybe all you wanted is a little brick with one knob, but instead you have a gigantic thing that... just don't fit.&lt;br&gt;
If it won't be using everything... you just use the right piece for the job. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#d-the-dependency-inversion-principle"&gt;
  &lt;/a&gt;
  D: The Dependency inversion principle
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Depend upon abstractions, [not] concretions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More than just plastic pieces, you have stuff made out of LEGO that you wouldn't believe!&lt;br&gt;
Electric toys, prosthetic limbs, drones...&lt;/p&gt;

&lt;p&gt;And how is that possible? Have you ever seen motors, batteries, circuit boards with knobs and tubes?&lt;br&gt;
No, because you don't need them.&lt;/p&gt;

&lt;p&gt;You "hide" them, behind an &lt;em&gt;abstraction&lt;/em&gt; that will have the knobs and tubes and that &lt;em&gt;abstraction&lt;/em&gt; will connect with the rest. &lt;br&gt;
You don't need special parts that will fit the LEGO, you just need to encapsulate it in a way that you can use that instead.&lt;/p&gt;




&lt;p&gt;Little pieces that you aggregate, one by one, multiples by multiples and that makes a bigger and more complex things... LEGO and programming... who knew right?&lt;/p&gt;




&lt;p&gt;&lt;a href="https://buymeacoffee.com/noriller"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AEuIK9cH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hx2uxkw087643wc4t51o.png" alt="Buy me a coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cover Photo by &lt;a href="https://unsplash.com/@xavi_cabrera?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Xavi Cabrera&lt;/a&gt; on &lt;a href="https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Conditional logic you should know</title>
      <author>Muhammad Muhktar Musa</author>
      <pubDate>Sun, 24 Oct 2021 23:14:18 +0000</pubDate>
      <link>https://dev.to/mcube25/conditional-logic-you-should-know-3bad</link>
      <guid>https://dev.to/mcube25/conditional-logic-you-should-know-3bad</guid>
      <description>&lt;p&gt;Once you start getting JavaScript under the belt, one of the things you would want to do is get conditional logic into an application. What is conditional logic? Conditional logic acts as a traffic curve in a program. It decides which conditions are to be prioritized if the logic is true. It also decides the code to run or what to do if the condition is false. This conditions can be used to run different things based on different values.&lt;br&gt;
 Let us take a look at 3 different conditional logic in javaScript. We want to know what they look like and when they are to be used to optimize an application .&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#ifelse-statement"&gt;
  &lt;/a&gt;
  If/else statement
&lt;/h4&gt;

&lt;p&gt;We are going to look at an array of food and each food is represented an objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;food&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fruits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lettuce&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vegetable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grains&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are going to use a javascript forEach method to loop through the contents of the food array and execute the function using the if/else statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt; &lt;span class="p"&gt;(({&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;family&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fruits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`i am eating &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Vegetable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`i am eating &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grains&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`i am eating &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run the above code we get the current value that we loop over and introduce our conditional logic. All we are doing is saying if the condition is met run the code or other wise move to the next statement. That is the basic idea behind an if statement. It is a very simple but powerful tool. We can apply an else statement to the if statement. For example we can say&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fruits&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`i am eating &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Vegetable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`i am eating &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;family&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;grains&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`i am eating &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;all food are good for hunger&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we give a condition to the if statement, if the condition is true we are going to log a statement otherwise we log whatever the else statement is when the if statement is through no matter the value we are looping through. As long as it does not  meet our if statement the else statement will be logged.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#switch-statement"&gt;
  &lt;/a&gt;
  Switch statement
&lt;/h4&gt;

&lt;p&gt;The next type of logic we are going to look at is the switch statement. The switch statement is similar to the if/else statement. We going to take a look at a similar food array and loop through using the switch statement&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFoodAll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is my favorite fruit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lettuce&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is my favorite Vegetable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is my favorite grain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;i have no business being here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unlike if/else statements, the switch statements keep going. They do what is called fall through. What it does is print all the statements when the conditions are met. To prevent all the statements falling through, a break statement is added.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFoodAll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;food&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Banana&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is my favorite fruit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lettuce&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is my favorite Vegetable&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rice&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;this is my favorite grain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;i have no business being here&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When using the switch statement, in some cases we want to fall through all the various cases. In some other cases we want to break the code when we have our result. The break is known as the stop mechanism for achieving this. When we hit a statement we want evaluated the break stops the code from evaluating all other statements from that point. This break stops the steady flow. If we don't have a break, the code is going to run to the default statement. The switch statement is super useful in replacing logic that uses a lot of if/else statements.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ternary-operator"&gt;
  &lt;/a&gt;
  Ternary operator
&lt;/h4&gt;

&lt;p&gt;It is a simple piece of very powerful code. It is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. This operator is frequently used as a shortcut for the if statement.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;lifeStyle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;value4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the tenery operator the above logic can be simplified into&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function lifeStyle() {
    return condition1 ? value1
         : condition2 ? value2
         : condition3 ? value3
         : value4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
    </item>
    <item>
      <title>[SOLVED?] Is there a way to have raw-types in (modern) C++?</title>
      <author>Calin Baenen</author>
      <pubDate>Sun, 24 Oct 2021 22:29:33 +0000</pubDate>
      <link>https://dev.to/baenencalin/is-there-a-way-to-have-raw-types-in-modern-c-2knd</link>
      <guid>https://dev.to/baenencalin/is-there-a-way-to-have-raw-types-in-modern-c-2knd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-raw-types"&gt;
  &lt;/a&gt;
  What are "raw" types?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://docs.oracle.com/javase/tutorial/java/generics/rawTypes.html"&gt;Raw types&lt;/a&gt;&lt;sup&gt;(in Java)&lt;/sup&gt; is a type who has type-arguments (generics/templates*), but whose type-arguments are not specified in a declaration.&lt;br&gt;
Consider the following (Java) code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NeverRaw1&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;NeverRaw1&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="no"&gt;T&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NeverRaw2&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;NeverRaw2&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ... Some code later...&lt;/span&gt;

&lt;span class="c1"&gt;// This isn't raw because a type argument is specified.&lt;/span&gt;
&lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;notRaw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// This IS raw because none are specified&lt;/span&gt;
&lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt; &lt;span class="n"&gt;uncooked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Invalid. Mismatched types.&lt;/span&gt;
&lt;span class="n"&gt;notRaw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.56&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Valid. No type mismatch because none is specified.&lt;/span&gt;
&lt;span class="n"&gt;uncooked&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PossiblyRaw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.56&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-would-you-want-types"&gt;
  &lt;/a&gt;
  Why would you want types?
&lt;/h2&gt;

&lt;p&gt;So, the first thought that probably popped into your head is "Hey. Isn't that not type-safe?", and to that, I say "Yes. It can be unsafe at times. But then it can also be utilized.".&lt;br&gt;&lt;br&gt;
So? Where can I use this?&lt;br&gt;
Well, here's where I'm stuck. - I'm implementing a &lt;code&gt;Token&lt;/code&gt; type for Janky, and I want to have a &lt;code&gt;parse(std::string|char*)&lt;/code&gt; function that returns an array of &lt;code&gt;Token&lt;/code&gt;.&lt;br&gt;
How is this a problem?&lt;br&gt;
It's a problem because even if you want to return an array of something, you must define the template arguments.&lt;br&gt;
My &lt;code&gt;Token&lt;/code&gt; type is written as such:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Token&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;T&lt;/span&gt;              &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;TokenType&lt;/span&gt;      &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TokenType&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;_UNASSIGNED&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And I can't create any abstraction, since all pieces of this structure are important to have. -- And because members aren't preserved when you say a piece of data is of its parent type.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so"&gt;
  &lt;/a&gt;
  So...
&lt;/h2&gt;

&lt;p&gt;What's the best solution here?&lt;/p&gt;

&lt;h1&gt;&lt;b&gt;Thanks!&lt;br&gt;Cheers!&lt;/b&gt;&lt;/h1&gt;

</description>
      <category>cpp</category>
      <category>c</category>
      <category>help</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>How to create a Preloader in NextJS</title>
      <author>Caleb O.</author>
      <pubDate>Sun, 24 Oct 2021 22:22:40 +0000</pubDate>
      <link>https://dev.to/seven/how-to-create-a-preloader-in-nextjs-15n8</link>
      <guid>https://dev.to/seven/how-to-create-a-preloader-in-nextjs-15n8</guid>
      <description>&lt;p&gt;There's always a need to have all the content of a webpage ready before it is displayed to whoever is visiting your web app/website.&lt;/p&gt;

&lt;p&gt;In situations where the contents of the webpage aren't ready, people would have to wait for it to be displayed, and this causes a very high decline rate of people who visit your website.&lt;/p&gt;

&lt;p&gt;In this article, we'll have a look at how we can build a loading screen component that is displayed whenever the contents of the page is about to be mounted onto the DOM.&lt;/p&gt;

&lt;p&gt;Before you read this article any further, you should be familiar with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;, a declarative JavaScript library for building user interfaces&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://nextjs.org/"&gt;NextJS&lt;/a&gt;, a framework of React, used for building production-ready applications&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://seven.hashnode.dev/two-very-simple-ways-to-render-ui-conditionally-in-react"&gt;Conditional rendering&lt;/a&gt; in React&lt;/li&gt;
&lt;li&gt;Animations in CSS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;In this article, we’ll be using NextJS to set up our app, you can use &lt;a href="https://create-react-app.dev"&gt;create-react-app&lt;/a&gt; if you are not familiar with NextJS. &lt;/p&gt;

&lt;p&gt;Let us start by installing the dependencies that we need in this project. We’d start by creating a nextjs app. The command below gets the dependencies that we need in a  Nextjs app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-next-app &lt;span class="o"&gt;[&lt;/span&gt;name-of-your-app]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll make use of the &lt;code&gt;"styled-component"&lt;/code&gt; library to style the loading screen component. Let’s get the dependency above by typing the command below into our terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; styled-components
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-components-in-our-nextjs-app"&gt;
  &lt;/a&gt;
  The components in our Nextjs app
&lt;/h2&gt;

&lt;p&gt;In this section, we are going to see the different files that make up the architecture of this project, and their respective functions below.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;pages&lt;/code&gt; directory is where all the routing of the app takes place. This is an out-of-the-box feature of Nextjs. It saves you the stress of hard hard-coding your independent routes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pages/api&lt;/code&gt;: the api directory enables you to have a backend for your nextjs app, inside the same codebase, instead of the common way of creating separate repositories for your REST or GraphQL APIs and deploying them on backend hosting platforms like Heroku, and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pages/_app.js&lt;/code&gt;: is where all our components get attached to the DOM. If you take a look at the component structure, you’ll see that all the components are passed as &lt;code&gt;pageProps&lt;/code&gt; to the &lt;code&gt;Component&lt;/code&gt; props too.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is like the &lt;code&gt;index.js&lt;/code&gt; file in Create-React-App. The only difference here is that you are not hooking your app to the DOM node called “root”.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;index.js&lt;/code&gt; is the default route in the pages folder. When you run the command below, it starts up a development server and the contents of &lt;code&gt;index.js&lt;/code&gt; are rendered on the web page.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-the-loading-screen-component"&gt;
  &lt;/a&gt;
  Building the loading screen component
&lt;/h2&gt;

&lt;p&gt;The previous sections walked you through the process of installing the dependencies that are needed for building the loading screen component and the functions of each file in a typical Nextjs app.&lt;/p&gt;

&lt;p&gt;In this section, we'll go through the step-by-step process of building the component itself.&lt;/p&gt;

&lt;p&gt;First, we'll be taking a look at the style of the loader. We are using the styled component library for this purpose.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Screen&lt;/code&gt; styled-component serves as the parent container that wraps the loading animation. It uses a &lt;code&gt;fade&lt;/code&gt; keyframe to ensure the transition of the screen is properly utilized.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// loadingScreen.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Screen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  position: relative;
  height: 100vh;
  width: 100%;
  opacity: 0;
  animation: fade 0.4s ease-in forwards;
  background: black;

  @keyframes fade {
    0% {
      opacity: 0.4;
    }
    50% {
      opacity: 0.8;
    }
    100% {
      opacity: 1;
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet below shows the &lt;code&gt;Balls&lt;/code&gt; styled component. It serves as a container for the child elements in it. The corresponding &lt;code&gt;divs&lt;/code&gt; in the container are the balls that we'll be animating.&lt;/p&gt;

&lt;p&gt;You'll notice that there are unique &lt;code&gt;className&lt;/code&gt;s assigned to each &lt;code&gt;div&lt;/code&gt; element in the container. This is for us to be able to set an &lt;code&gt;animation-delay&lt;/code&gt; property on each ball so that the oscillating effect can be seen properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Balls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;`
  display: flex;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);

  .ball {
    height: 20px;
    width: 20px;
    border-radius: 50%;
    background: #1b5299;
    margin: 0 6px 0 0;
    animation: oscillate 0.7s ease-in forwards infinite;
  }

  .one {
    animation-delay: 0.5s;
  }
  .two {
    animation-delay: 1s;
  }
  .three {
    animation-delay: 2s;
  }

  @keyframes oscillate {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(20px);
    }
    100% {
      transform: translateY(0);
    }
  }
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're new to animations in CSS. You can check this &lt;a href="https://seven.hashnode.dev/the-abc-of-css-animation"&gt;guide&lt;/a&gt; that explains the fundamentals.&lt;/p&gt;

&lt;p&gt;Now that you have seen the styles of the components above. We'll go ahead to reference the styles in the &lt;code&gt;LoadingScreeen&lt;/code&gt; component below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;styled-components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Screen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Balls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="s2"&gt;``&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;LoadingScreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Screen&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Balls&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ball one"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ball two"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"ball three"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Balls&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Screen&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;LoadingScreen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementing-the-preloader-functionality"&gt;
  &lt;/a&gt;
  Implementing the preloader functionality
&lt;/h2&gt;

&lt;p&gt;We've seen the function of the loading screen styles and how the animation works behind the scene.&lt;/p&gt;

&lt;p&gt;In this section, we'll be importing the component into &lt;code&gt;_app.js&lt;/code&gt;. Take a look at it below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;LoadingScreen&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../src/components/LoadingScreen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoadingScreen&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The snippet above shows how we've used conditional rendering to check the state of the loading component. We had to create a local state variable that holds the current state with the &lt;code&gt;useState&lt;/code&gt; React hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The initial state of the loader is set to a boolean value, &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useEffect&lt;/code&gt; hook is a lifecycle method in React that is fired whenever there's a change in the DOM. It combines all the lifecycle methods that a typical class-based component will have.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By setting the initial "falsy" state of the loader to be &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;useEffect&lt;/code&gt; hook. We're telling the browser to display the loader with the help of the &lt;code&gt;setTimeout&lt;/code&gt; function for a duration of five seconds. &lt;/p&gt;

&lt;p&gt;At the end of the timeframe, the browser should've loaded all the contents that need to be on the webpage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Below is a GIF that shows what we've been building all along.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3N8mrZ6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b42dd2hwzen23ycjl353.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3N8mrZ6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b42dd2hwzen23ycjl353.gif" alt="preloader demo site"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although, this is an approach that helps us to have the content on a webpage/site available. If you are dealing with dynamic data, say from an API endpoint, the approach will be a little bit different.&lt;/p&gt;

&lt;p&gt;You can decide to make use of this &lt;a href="https://www.npmjs.com/package/react-spinners"&gt;react-spinners&lt;/a&gt; package if you don't want to spend time creating a custom loading component all by yourself.&lt;/p&gt;

&lt;p&gt;Thank you for reading this article. Kindly leave your thoughts in the comments section, and share this article with your peers, Thanks.&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>css</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Today I successfully completed Hacktoberfest 2021! </title>
      <author>Souvik Mondal</author>
      <pubDate>Sun, 24 Oct 2021 21:47:03 +0000</pubDate>
      <link>https://dev.to/souvikm2002/today-i-successfully-completed-hacktoberfest-2021-2ab</link>
      <guid>https://dev.to/souvikm2002/today-i-successfully-completed-hacktoberfest-2021-2ab</guid>
      <description>&lt;p&gt;It was an amazing experience since it was my first participation to any open source project contribution. &lt;br&gt;
Thank you Hactoberfest and DigitalOcean for bringing this awesome opportunaty for me!!&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>cpp</category>
    </item>
    <item>
      <title>🔥How to become an SEO specialist in the coming 2022 #1</title>
      <author>Łukasz B.</author>
      <pubDate>Sun, 24 Oct 2021 20:57:02 +0000</pubDate>
      <link>https://dev.to/wallesamehere/how-to-become-an-seo-specialist-in-the-coming-2022-1-36h2</link>
      <guid>https://dev.to/wallesamehere/how-to-become-an-seo-specialist-in-the-coming-2022-1-36h2</guid>
      <description>&lt;p&gt;Hi, My name is Łukasz and it's my first post here 😇. I would like to share my knowledge of working as an SEO Specialist. In this post I will discuss the topic that I see such a person should have in 2022 to start work. The development of technology is progressing very quickly, which is why the requirements set for SEO specialists too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Who is an SEO Specialist&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2. Where can we work as an SEO Specialist&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3. What skills should an SEO Specialist have&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;4. Everyday tasks in the SEO industry&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlISKXp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlg2doykceaixo9njy3q.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlISKXp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlg2doykceaixo9njy3q.jpg" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Who is an SEO Specialist&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An SEO specialist is a person who works with the optimization and marketing of a website in order to achieve higher search engine rankings (commonly referred to as a website positioner).&lt;br&gt;
The word SEO specialist is not related to just one kind of job.&lt;/p&gt;

&lt;p&gt;The SEO industry is extremely broad 📏- apart from several career levels of an SEO Specialist, we also distinguish positions that include people dealing with content marketing, copywriting, linkbuilding or customer contact. So we can list jobs: SEO Analyst, SEO Specialist, SEO Consultant, SEO Technician, SEO Manager, SEO Trainer, SEO Director, and the position of SEO Specialist can be divided into career paths - Junior SEO Specialist, SEO Specialist, Senior SEO Specialist. Head of SEO, SEO Team Leader, Full Stack SEO, Full Stack SEO Expert or Full Stack SEO Developer 💰&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Where we can work as an SEO Specialist.&lt;/strong&gt;&lt;br&gt;
Working as an SEO Specialist, we can work in an internet agency, in-house or as a freelancer.&lt;/p&gt;

&lt;p&gt;The great advantage of working in an &lt;strong&gt;SEO agency&lt;/strong&gt; is the variety of projects and the exchange of experiences based on various case-studies.&lt;/p&gt;

&lt;p&gt;Working &lt;strong&gt;in-house&lt;/strong&gt;, we usually constitute a one-person department whose task is to support the management board and the marketing department in the effective promotion of the company's offer. On the other hand, however, when working for one brand, we have much more time to get to know it, maximize its promotion and the freedom to experiment with new solutions.&lt;/p&gt;

&lt;p&gt;When working as a &lt;strong&gt;freelancer&lt;/strong&gt;, we certainly have the greatest freedom in our actions, we choose our clients and organize our working day. Soft skills, good communication and, above all, very good organization of work and self-discipline are very useful here. This type of work also does not require daily contact with clients or colleagues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What skills should an SEO specialist have&lt;/strong&gt;&lt;br&gt;
In my opinion, a good SEO specialist should have some of the features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Technical SEO skills&lt;/li&gt;
&lt;li&gt;ON-site SEO skills&lt;/li&gt;
&lt;li&gt;OFF-site SEO skills&lt;/li&gt;
&lt;li&gt;Data analysis skills&lt;/li&gt;
&lt;li&gt;Project management skills&lt;/li&gt;
&lt;li&gt;Web development skills&lt;/li&gt;
&lt;li&gt;Communication skills&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In fact, the best SEO specialists are people who are proficient in many different areas of digital marketing. This includes basic SEO skills, but also digital marketing skills such as copywriting and website design. At the beginning of your career as an SEO Specialist, you should definitely start with gaining knowledge about the secrets of SEO, positioning and website optimization. On the Internet you will find hundreds of interesting courses, both for beginners and more advanced people.&lt;/p&gt;

&lt;p&gt;While theoretical knowledge is not the most important for an SEO specialist, it does provide important preparation at the beginning of your career.&lt;/p&gt;

&lt;p&gt;On the theoretical level, an SEO specialist should know the basics of computer and network operation, know the basics of creating a website and be fluent in tools such as Excel or Docs. In addition, it is advisable for an SEO specialist to have a basic understanding of web technologies. It is difficult to list all the skills that a good specialist should have, but I will try to specify the appropriate elements according to the experience. You can read more about SEO on the website: &lt;a href="https://afterweb.pl/pozycjonowanie-stron/"&gt;https://afterweb.pl/pozycjonowanie-stron/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Skills at the Junior SEO Specialist level:&lt;/em&gt;&lt;br&gt;
-Computer skills and network &lt;br&gt;
-What is a website,Pagerank, proxy server, structural data&lt;br&gt;
-What are the URL parameters in the Google search engine&lt;br&gt;
-What is Hosting, Domain&lt;br&gt;
-FTP client (what is FTP, Scure FTP)&lt;br&gt;
-HTTP / HTTPS / HTTP2,&lt;br&gt;
-Internet browsers&lt;br&gt;
-Server's responses and be able to analyze and verify them,&lt;br&gt;
-Google penalties for violating the guidelines and know the differences between them,&lt;br&gt;
-Important updates of the Google&lt;br&gt;
-Google's ranking factors (the most important ones) and search engine guidelines&lt;br&gt;
-How it all works keywords in the search engine,&lt;br&gt;
-Google courses (GAIQ, Ads)&lt;br&gt;
-Office suite - Excel, Docs&lt;br&gt;
-Content marketing&lt;br&gt;
-On-page SEO&lt;br&gt;
-HTML&lt;br&gt;
-CSS&lt;br&gt;
-JavaScript (Basic)&lt;br&gt;
-Google Analytics (Basic)&lt;br&gt;
-Google Tag Manager (Basic)&lt;br&gt;
-Google My Business&lt;br&gt;
-SEO tools support&lt;br&gt;
-Navigating the most popular CMSs, eg Wordpress&lt;br&gt;
-The ability to speed up page loading, reduce the weight of photos, how the browser cache works, what is css sprite, interpret the results provided by these tools&lt;br&gt;
-keyword analysis using of free and paid tools&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Skills at the Senior SEO Specialist level:&lt;/em&gt;&lt;br&gt;
-Making marketing strategy&lt;br&gt;
-ON-page SEO (advanced)&lt;br&gt;
-OFF-page SEO - Linkbuilding (advanced)&lt;br&gt;
-HTML&lt;br&gt;
-CSS / SASS&lt;br&gt;
-RWD&lt;br&gt;
-JavaScript&lt;br&gt;
-CORS&lt;br&gt;
-API&lt;br&gt;
-Knowledge of frameworks (AngularJS, Backbone, Bootstrap, -Foundation and Vue.js)&lt;br&gt;
-Accessibility&lt;br&gt;
-RegExp&lt;br&gt;
-PHP&lt;br&gt;
-Python&lt;br&gt;
-NPM / YARN&lt;br&gt;
-Github&lt;br&gt;
-UX and UI&lt;br&gt;
-Google Ads&lt;br&gt;
-Google Tag Manager&lt;br&gt;
-Google Analytics&lt;br&gt;
-Content marketing&lt;br&gt;
-Excel&lt;br&gt;
-SQL&lt;br&gt;
-Navigate through popular CMS sites and stores.&lt;br&gt;
-Keyword analysis&lt;br&gt;
-Conducting trainings&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Everyday tasks in the SEO industry&lt;/strong&gt;&lt;br&gt;
The most popular tasks in the daily work of a specialist:&lt;br&gt;
-keyword analysis&lt;br&gt;
-creating SEO audits&lt;br&gt;
-contact with developers&lt;br&gt;
-preparation of work reports&lt;br&gt;
-creating a campaign strategy&lt;br&gt;
-contact with the customer&lt;br&gt;
-implementation of audit changes&lt;br&gt;
-marketing of the company I work for (e.g. I run a blog)&lt;br&gt;
-linkbuilding&lt;br&gt;
-supervision over copywriters&lt;br&gt;
-creating editorial recommendations&lt;br&gt;
-conducting internal training&lt;br&gt;
-creating offers for customers&lt;br&gt;
-team management&lt;br&gt;
-obtaining links (I run the entire process)&lt;br&gt;
-creating a back-end&lt;br&gt;
-conducting trainings for clients&lt;br&gt;
-writing SEO texts&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;br&gt;
Becoming an SEO specialist may seem difficult in part, and it takes a lot of work, time and effort, but if you follow the plan and gradually develop your skills, it's something anyone can do.&lt;br&gt;
Working in the SEO industry is both rewarding and creative. &lt;br&gt;
It is also one of the jobs that is in demand as more and more companies are investing in online marketing ( and the pandemic has shown how important the e-commers segment is ). The most important thing in working with SEO is to be patient. SEO is a very slow process, so if you are a beginner it will take a while to learn the theory and a lot more time to gain hands-on experience.&lt;/p&gt;

&lt;p&gt;Start today ❗️❗️ 🤓&lt;/p&gt;

&lt;p&gt;In my next posts, I will say something more about individual skills.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>career</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>5 Best High Order Array Methods in JavaScript</title>
      <author>Greg </author>
      <pubDate>Sun, 24 Oct 2021 20:54:06 +0000</pubDate>
      <link>https://dev.to/gregpetropoulos/5-best-high-order-array-methods-in-javascript-jh7</link>
      <guid>https://dev.to/gregpetropoulos/5-best-high-order-array-methods-in-javascript-jh7</guid>
      <description>&lt;div class="ltag__link"&gt;
  &lt;a href="https://medium.com/@gregpetropoulos/5-best-high-order-array-methods-in-javascript-dae589a2c9d9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tNjidtFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/fit/c/56/56/1%2ABytUH7cc0VxeJkrxn5DNCg.jpeg" alt="Greg Petropoulos"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="https://medium.com/@gregpetropoulos/5-best-high-order-array-methods-in-javascript-dae589a2c9d9" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;5 Best High Order Array Methods in JavaScript | by Greg Petropoulos | Oct, 2021 | Medium&lt;/h2&gt;
      &lt;h3&gt;Greg Petropoulos ・ &lt;time&gt;Oct 24, 2021&lt;/time&gt; ・ 
      &lt;div class="ltag__link__servicename"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ze5yh_2q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/medium_icon-90d5232a5da2369849f285fa499c8005e750a788fdbf34f5844d5f2201aae736.svg" alt="Medium Logo"&gt;
        Medium
      &lt;/div&gt;
    &lt;/h3&gt;
&lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>coding</category>
      <category>javascript</category>
      <category>array</category>
      <category>highorderfunctions</category>
    </item>
    <item>
      <title>A Beginners Guide to CSS Grid</title>
      <author>AidanMargo</author>
      <pubDate>Sun, 24 Oct 2021 20:22:40 +0000</pubDate>
      <link>https://dev.to/aidanmargo/a-beginners-guide-to-css-grid-3f32</link>
      <guid>https://dev.to/aidanmargo/a-beginners-guide-to-css-grid-3f32</guid>
      <description>&lt;p&gt;CSS positioning has been the beast that many developers seem reluctant to conquer. It can be finnicky, particular, and frustrating to say the least. When do I use position: absolute or position: relative? Why are my elements not stacking on top of each other? &lt;/p&gt;

&lt;p&gt;It's important that front-end developers know the uses of all of these different properties, and how to use them. However, there's another way to position your elements exactly how you want them:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#css-grid"&gt;
  &lt;/a&gt;
  CSS GRID
&lt;/h2&gt;

&lt;p&gt;CSS grid came out in April of 2007, and helped tackle the struggles of positioning that came with Flexbox at the time. &lt;strong&gt;Where Flexbox handles one dimension (rows OR columns) really well, grid is generally better for working with two dimensions.&lt;/strong&gt; Here's a little info graphic to help you out:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bV9ObxRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9iz3qe0mqrqjs9jdrk1r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bV9ObxRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9iz3qe0mqrqjs9jdrk1r.png" alt="The two axes"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is to show you the main axis on your page. &lt;em&gt;&lt;strong&gt;With a flexbox design, you need to know which axis your element will be going before you start, as it can only work on one dimension&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So let's get into some actual CSS Grid.&lt;/p&gt;

&lt;p&gt;Here is the base code I'm using for the example, in case you want to test things out for yourself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* CSS */

.base-box {
  font-size: 1.5rem;
  width: auto;
  height: 125px;
  margin: 1em;
  display: flex;
  align-items: center;
  justify-content: center;
}

#container {
  background-color: rgb(241, 194, 194);
}
#box-1 {
  background-color: rgb(75, 79, 105);
}

#box-2 {
  background-color: rgb(197, 40, 119);
}

#box-3 {
  background-color: rgb(54, 202, 228);
}

#box-4 {
  background-color: rgb(36, 233, 52);
}

#box-5 {
  background-color: rgb(238, 179, 90);
}

&amp;lt;!-- HTML --&amp;gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset="UTF-8"&amp;gt;
  &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
  &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
  &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;
  &amp;lt;link rel="stylesheet" href="style.css"&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id='container'&amp;gt;
      &amp;lt;div id='box-1' class='base-box'&amp;gt;Div 1&amp;lt;/div&amp;gt;
      &amp;lt;div id='box-2' class='base-box'&amp;gt;Div 2&amp;lt;/div&amp;gt;
      &amp;lt;div id='box-3' class='base-box'&amp;gt;Div 3&amp;lt;/div&amp;gt;
      &amp;lt;div id='box-4' class='base-box'&amp;gt;Div 4&amp;lt;/div&amp;gt;
      &amp;lt;div id='box-5' class='base-box'&amp;gt;Div 5&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After opening index.html in your browser, you should see the page like this: &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O_Qflckm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjn7q0ywxqcfbxvxqe1n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O_Qflckm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jjn7q0ywxqcfbxvxqe1n.png" alt="Starting div Layout"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now lets change the display of our container element to be &lt;strong&gt;display: grid;&lt;/strong&gt;. At first, you shouldn't see much change besides a little bit of extra spacing. Where the real magic comes in is when you create your &lt;em&gt;template&lt;/em&gt;. Try putting this code into the container element, and then open your browser dev-tools to check it out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grid-template-columns: repeat(5, 250px);
grid-template-rows: 150px;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;note: repeat() allows for us to create multiple copies of the same grid cell at a time.&lt;/p&gt;

&lt;p&gt;If you hover over the container element using your browser dev-tools, you should see what some dotted lines between each of our boxes. These are the &lt;em&gt;grid lines&lt;/em&gt;. Those are what were created with our grid-template-columns code above, and now each of our boxes has it's own cell.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fractional-units"&gt;
  &lt;/a&gt;
  Fractional Units
&lt;/h3&gt;

&lt;p&gt;We can improve upon this, though. As this stands now, there's a little bit of extra space on the end, and it's not very responsive to different screen sizes. But we can take care of that! Grid has a specific unit of measurement called the &lt;strong&gt;fr&lt;/strong&gt;. This stands for "fractional unit," and is an amazing way to allocate space to our child elements while also taking screen size and screen breakpoints into account. &lt;/p&gt;

&lt;p&gt;Let's change our column width of 250px to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;grid-template-columns: repeat(5, 1fr)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we see that all of grid containers take up an equal &lt;strong&gt;fraction&lt;/strong&gt; of the container. We can mix and match these sizes to get whatever kind of layout we want. Try:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* grid-template-columns: repeat(5, 1fr) */
grid-template-columns: 2fr 1fr 3fr;
grid-template-rows: 1fr 1fr;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#grid-shorthand"&gt;
  &lt;/a&gt;
  Grid Shorthand
&lt;/h3&gt;

&lt;p&gt;Alright, so there's one more thing to note, and that is the &lt;em&gt;grid shorthand&lt;/em&gt;. This lets us decide the space our children element takes up on the grid based on a &lt;strong&gt;start point/end point&lt;/strong&gt; syntax. &lt;/p&gt;

&lt;p&gt;We remember from earlier that our grid has grid-lines that break up our columns and rows. Beginning from the very start of our container, the lines are numbered from left to right for columns starting from the number 1, and from top to bottom for rows. In grid shorthand, we use those line numbers as a way to dictate when we start and stop our container on the grid. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0a4TwO8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tz0hiy9vihgputd1xeex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0a4TwO8o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tz0hiy9vihgputd1xeex.png" alt="Grid template line example"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.moonlearning.io/blog/css-grid"&gt;Image Source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our orange box seems to have a lot of leftover space at the end of the container. Let's fix that with grid-shorthand. We want this box to start at the *second grid-line, and take up the rest of the remaining space.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#box-5 {
  background-color: rgb(238, 179, 90);
  grid-column: 2/4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nCLjw2fZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdync9r7r1fkvc3drnkf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nCLjw2fZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bdync9r7r1fkvc3drnkf.png" alt="Finished"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CSS grid is a fantastic way to utilize the space of your page in a responsive, creative, and simple way. Below are some resources to take a deeper dive into CSS grid.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"&gt;MDN Web Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/snippets/css/complete-guide-grid/"&gt;CSS Tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/user/KepowOb"&gt;Kevin Powell - Youtube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Divtober Day 24: Smelly</title>
      <author>Alvaro Montoro</author>
      <pubDate>Sun, 24 Oct 2021 19:40:48 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-day-24-smelly-1jdd</link>
      <guid>https://dev.to/alvaromontoro/divtober-day-24-smelly-1jdd</guid>
      <description>&lt;p&gt;The word of the day for divtober is "smelly." So here's a smelly trash can with boxes and bags around it:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/VwzPRVa?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Also, childish me did another demo yesterday for divtober #23 (loud) and #24 (smelly) together... it is tongue-in-cheek and &lt;em&gt;inappropriate&lt;/em&gt;, and I'd recommend you check your speakers before you click on it ;)&lt;/p&gt;

&lt;p&gt;It uses a single element (&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;) and it plays the sound on click (I had to cheat a little and add some inline JavaScript code: &lt;code&gt;onclick="this.play()"&lt;/code&gt;). The controls are hidden on desktop, although some browsers will display them (looking at Safari/Chrome on iOS). Also, it is animated on Chromium providing some movement on focus.&lt;/p&gt;

&lt;p&gt;Without further ado, here is an &lt;em&gt;inappropriate&lt;/em&gt; demo for divtober #23 and #24:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/dyzNVVw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>divtober</category>
      <category>css</category>
      <category>art</category>
    </item>
    <item>
      <title>Docker &amp; WSL Hogging C Drive</title>
      <author>Priyab Dash</author>
      <pubDate>Sun, 24 Oct 2021 19:35:28 +0000</pubDate>
      <link>https://dev.to/twitmyreview/docker-wsl-hogging-c-drive-38bm</link>
      <guid>https://dev.to/twitmyreview/docker-wsl-hogging-c-drive-38bm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;My laptop has only 147 GB of space and run Windows 10  as my C Drive. Now any developer who uses many software as part of their development process would agree that this space is grossly inadequate. &lt;/p&gt;

&lt;p&gt;I had to uninstall and constantly clean up my drive to have enough usable disk space to do anything. In last month I reached almost few hundred mb of space and filled out my hard drive. &lt;/p&gt;

&lt;p&gt;I knew something drastic had to be done till I reformat my c drive. I have to aggressively look for the culprits and find alternatives for them. And that is when I  came across TreeSize Free as a solution to scan my drive and list the files and folders that are hogging my space. And the results were phenomenal. I had used such apps in my android phone but have avoided using it on my Windows pc. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-disk-scan"&gt;
  &lt;/a&gt;
  The Disk Scan
&lt;/h2&gt;

&lt;p&gt;TreeSize Free is very easy to use since I had no disk space left I downloaded a portable version extracted on one of the other spare drives. And ran the program. The UI is very simple. There is a folder icon &lt;code&gt;Select Directory&lt;/code&gt; . There is a drop down under this icon which allows to select the drive and I chose my C drive and started the scan. Then it asks if I would like to scan as Admin which I had to so as to find all the possible files &amp;amp; folders that are hogging my disk space. &lt;/p&gt;

&lt;p&gt;Surprisingly the biggest files were 32 &amp;amp; 8 GB all being vhdx images (virtual disk images used by the hyper-v) being used by Docker desktop which had the wsl integration enabled &amp;amp; wsl itself. Now I had to find a solution how can I move these files to some other drives to get some extra space. It was risky as I was not sure of the corruption risks and making wsl and Docker Desktop unusable which I have been using extensively recently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;After some research I found the solution which helped me a lot. And again SO came to the rescue, with this &lt;a href="https://stackoverflow.com/questions/40465979/change-docker-native-images-location-on-windows-10-pro"&gt;link&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Here are the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stop Docker Desktop&lt;/li&gt;
&lt;li&gt; Stop wsl
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wsl --shutdown
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Export Docker Desktop disk to an external Drive
For this I switched to my D drive which has 350 gb of data and ran the following command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wsl --export docker-desktop-data docker-desktop-data.tar
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Unregister Docker Desktop from wsl
In this step basically I unregisted Docker Desktop as a distribution from wsl which handles the persistence and container management for Docker
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wsl --unregister docker-desktop-data
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Finally re-created the Docker Desktop with wsl with the import of  exported Docker Desktop virtual drive from the new  path.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wsl --import docker-desktop-data D:\docker-new-repo\ docker-desktop-data.tar --version 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;D:\docker-new-repo\&lt;/code&gt; this path signifies that now the vhdx file will be extracted to this new path.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To check if the import ran fine you can check running the following command
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;wsl -l --all --verbose
sample output:
  docker-desktop         Stopped         2
  docker-desktop-data    Stopped         2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h3&gt;

&lt;p&gt;As a side note, before I did this I took backup of my required docker images. Also  removed all images and containers before proceeding which the export and import of the vhdx&lt;/p&gt;

&lt;p&gt;To delete all containers including its volumes use,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker rm -vf $(docker ps -a -q)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To delete all the images,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker rmi -f $(docker images -a -q)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finally"&gt;
  &lt;/a&gt;
  Finally
&lt;/h2&gt;

&lt;p&gt;I was able to delete the unused vhdx files from C drive and save significant amount of space. Also when I started my Docker Desktop I did not find any issues. This was a quick hack which helped me I am sure this will help others as well. Am yet to remove my wsl but the process is similar. If you need to try this yourself please check the references. And if you want to discuss further please do comment or send me a mail bobquest33(at)gmail(dot)com.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/44785585/docker-how-to-delete-all-local-docker-images"&gt;Docker: How to delete all local Docker images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/40465979/change-docker-native-images-location-on-windows-10-pro"&gt;Change Docker native images location on Windows 10 Pro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MicrosoftDocs/WSL/issues/412"&gt;how to move the vhdx of wsl2 to other disk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>productivity</category>
      <category>docker</category>
    </item>
    <item>
      <title>Linear and Binary Search in Javascript</title>
      <author>Thomas(Tripp) White </author>
      <pubDate>Sun, 24 Oct 2021 19:33:23 +0000</pubDate>
      <link>https://dev.to/turpp/linear-vs-binary-search-in-javascript-4bom</link>
      <guid>https://dev.to/turpp/linear-vs-binary-search-in-javascript-4bom</guid>
      <description>&lt;p&gt;When preparing for technical interviews there are a ton a material to cover and prepare for. The most important thing is coming up with a solution that works and then later showing that you can refactor and optimize your solution. To help in coding problems that require you to search through a set of data there are two very easy ways to do this. Of course there are more advanced ways but these searching techniques are easy to remember and get the job done. You can always go back to refactor and optimize later.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linear-search"&gt;
  &lt;/a&gt;
  Linear Search
&lt;/h2&gt;

&lt;p&gt;This is the most basic form of searching. Its pretty simple, you just iterate through your data set one at a time till you find what you are looking for. This can be done with a simple loop. Linear search works on both sorted and unsorted data. Since we are going through are data point by point, that means in the worst case we will have to go through every element. If we have a very large dataset, this could take a long time. Here is an example of what a linear search looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;linearSearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What the code is doing is very simple. All we are doing is looking at each element of the given array and comparing it to the number passed in. Once it finds a match it will return true or if there is no match it will return false. This can be used on sorted or unsorted data but usually just on unsorted data. There are better solutions for sorted data like Binary search.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#binary-search"&gt;
  &lt;/a&gt;
  Binary Search
&lt;/h2&gt;

&lt;p&gt;Binary Search is a way we can dramatically speed up our searching in large data sets. There is one important thing that you have to keep in mind with this technique. The data set has to be sorted for it to work. If you do this with an unsorted data set it will NOT work. The whole objective of Binary search is to reduce the size of the data we are looking through. We will divide our code and check to see if the value we are searching for is in the first half or the second half. This reduces the data we are searching through in half. We can keep repeating this reduction till we have our answer or no more data to reduce. &lt;/p&gt;

&lt;p&gt;To get a better Idea of how this works here’s a visual example:&lt;br&gt;
let searchData = [1,2,3,4,5,6,7,8,9,10]&lt;br&gt;
searching for = 8&lt;/p&gt;

&lt;p&gt;=&amp;gt; [1,2,3,4,5] [6,7,8,9,10] //we can tell by looking that 8 is in the second array. This means we can remove the first array from consideration&lt;br&gt;
=&amp;gt; [6,7,8] [9,10] //We reduce again and can see that 8 is in the first array this time&lt;br&gt;
=&amp;gt; [6,7] [8] // 8 is in the second array&lt;br&gt;
=&amp;gt; [8] //this is equal to the value we are searching for and we are now done!&lt;/p&gt;

&lt;p&gt;If we did this same search in a linear fashion it would have took us 8 passes to get to our answer. With binary search we did the same task but with only 4 passes. Thats major! Imagine the difference if we had an array with thousands of elements. &lt;/p&gt;

&lt;p&gt;To do this in code there are a couple of steps you need to remember to get it to work. We need to start the function by creating 3 variables. The left point will represent the start of the array and the beginning of our sectioned array. The right point  will be the end of our sectioned array. Lastly, the midpoint will be the point in our array where we compare our value to see what half our value will be in. Once we create these variables it is time to start searching. We do this with a while loop. We are going to do our divide and conquering till we either find our solution or our left variable is greater than our right variable. &lt;/p&gt;

&lt;p&gt;In our while loop depending on if our search value is bigger or smaller than our midpoint will determine what variable we reassign. If our search value is greater than our midpoint then we know everything to the left of our midpoint is to small. We then move our left point to what our midpoint is. We can actually move it one spot past our midpoint because we know that our midpoint is not equal to our value. Once we do that, we reduced the size of the array we are looking at. We recalculate our midpoint inside of this reduce section and repeat the process. Here is what it looks like in code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;binarySearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;leftPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rightPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;midPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;leftPoint&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;rightPoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;midPoint&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;leftPoint&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;  &lt;span class="nx"&gt;rightPoint&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;midPoint&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;rightPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;midPoint&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;leftPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;midPoint&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nx"&gt;midPoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;leftPoint&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;rightPoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;midPoint&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The whole premise of Binary search is to keep reducing your data set till you find your solution. This greatly reduces the time it takes to find a value in a large data set. Remember this only works for sorted data. If you have unsorted data you, will need to either sort it or use a technique like the Linear search or something similar. &lt;/p&gt;

&lt;p&gt;To wrap everything up, searching is a very important part of programming. There are two elementary ways of searching that are easy to implement when under pressure during a coding interview. The Linear search is the most stream line and works with unsorted data. The Binary search is much quicker but only works on sorted data.&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
  </channel>
</rss>
