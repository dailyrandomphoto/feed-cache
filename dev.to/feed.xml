<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Vs Code extensions for every Frontend Developer</title>
      <author>Njugtt</author>
      <pubDate>Tue, 17 Aug 2021 19:59:03 +0000</pubDate>
      <link>https://dev.to/njugtt/vs-code-extensions-for-every-frontend-developer-7j5</link>
      <guid>https://dev.to/njugtt/vs-code-extensions-for-every-frontend-developer-7j5</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;Hello everyone, my name is suman and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code.¬†&lt;/span&gt;&lt;span&gt;Let's Jump in!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Read More: &lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>‚úÖ Soluci√≥n: SSH Config -Problemas por m√∫ltiples cuentas de git en un mismo ordenador</title>
      <author>Fernando Cutire</author>
      <pubDate>Tue, 17 Aug 2021 19:18:53 +0000</pubDate>
      <link>https://dev.to/fernandocutire/solucion-a-problemas-por-multiples-cuentas-de-git-ssh-config-1eh7</link>
      <guid>https://dev.to/fernandocutire/solucion-a-problemas-por-multiples-cuentas-de-git-ssh-config-1eh7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#en-este-art%C3%ADculo-aprender%C3%A1s"&gt;
  &lt;/a&gt;
  üì∞ En este art√≠culo aprender√°s
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;El problema de tener muchas cuentas de git, gitlab&lt;/li&gt;
&lt;li&gt;Una soluci√≥n sencilla si te da problemas al momento de clonar o hacer push a un repo de forma remota por ssh&lt;/li&gt;
&lt;li&gt;Por qu√© colocar las llaves ssh no es suficiente &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#contenido"&gt;
  &lt;/a&gt;
  üó®Ô∏è Contenido
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Toda gran soluci√≥n comienza con un gran problema&lt;/em&gt;. El d√≠a de hoy solucionaremos el:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;Git&lt;/span&gt; &lt;span class="nx"&gt;fatal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Could&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;read&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;remote&lt;/span&gt; &lt;span class="nx"&gt;repository&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esto me sucedi√≥ a m√≠ cuando quer√≠a hacer un git clone de mi repo personal de github. Y &lt;em&gt;ya hab√≠a configurado mi llave ssh.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sucede tambi√©n que ten√≠a configurada mi cuenta de gitlab de la organizaci√≥n donde trabajo tambi√©n la ten√≠a configurada tambi√©n.&lt;/p&gt;

&lt;p&gt;Entonces me di√≥ problema, puede que te pase igual. Yo solo ten√≠a 2 cuentas pero t√∫ puedes tener incluso m√°s, entonces para que no se te vuelva muy dificil de manejar , te recomiendo que implementes esta soluci√≥n.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#soluci%C3%B3n"&gt;
  &lt;/a&gt;
  ‚úÖ Soluci√≥n
&lt;/h2&gt;

&lt;p&gt;La soluci√≥n viene de la mano de un archivo que insertaras en tu carpeta .ssh/&lt;/p&gt;

&lt;p&gt;Esta carpeta se cre√≥ al momento de crear tu llave ssh, as√≠ que si no las hecho, te recomiendo que lo hagas y regreses aqu√≠.&lt;/p&gt;

&lt;p&gt;Ahora dentro de esta carpeta insertaremos un archivo config. Este tendr√° una estructura que nos podr√° incorporar varias claves ssh en un formato sencillo de leer ideal para manejar diferentes llaves ssh, que podr√°s incorporar como tu creas sea mejor.&lt;/p&gt;

&lt;p&gt;Aqu√≠ el c√≥digo.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;GITHUB&lt;/span&gt;
&lt;span class="nx"&gt;Host&lt;/span&gt; &lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
   &lt;span class="nx"&gt;HostName&lt;/span&gt; &lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
   &lt;span class="nx"&gt;PreferredAuthentications&lt;/span&gt; &lt;span class="nx"&gt;publickey&lt;/span&gt;
   &lt;span class="nx"&gt;IdentityFile&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/.ssh/gi&lt;/span&gt;&lt;span class="nx"&gt;thub&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;id_rsa_pub&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="nx"&gt;GITLAB&lt;/span&gt;
&lt;span class="nx"&gt;Host&lt;/span&gt; &lt;span class="nx"&gt;gitlab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
   &lt;span class="nx"&gt;HostName&lt;/span&gt; &lt;span class="nx"&gt;gitlab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;
   &lt;span class="nx"&gt;PreferredAuthentications&lt;/span&gt; &lt;span class="nx"&gt;publickey&lt;/span&gt;
   &lt;span class="nx"&gt;IdentityFile&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;/.ssh/i&lt;/span&gt;&lt;span class="nx"&gt;d_rsa_pub&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;El nombre del archivo es config&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Puedes configurarlo para varias cuentas por ejemplo GITHUB PERSONAL, GITHUB PROFESIONAL.&lt;/strong&gt; Entonces usar una llave ssh diferente para cada una, as√≠ se detectar√° bien y no habr√° problema.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recuerda tambi√©n el &lt;code&gt;IdentityFile&lt;/code&gt;, muy importante para separar las diferentes llaves&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recapitulando"&gt;
  &lt;/a&gt;
  üî• Recapitulando
&lt;/h2&gt;

&lt;p&gt;Repasemos lo que aprendiste&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creaci√≥n de config&lt;/li&gt;
&lt;li&gt;Diferentes problemas a la hora de tener diferentes cuentas en una misma m√°quina&lt;/li&gt;
&lt;li&gt;Por qu√© colocar las llaves ssh no es suficiente&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#fin"&gt;
  &lt;/a&gt;
  üîö Fin
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Ya has podido identificar el problema de llevar diferentes cuentas y has podido solucionarlo gracias a un config&lt;/em&gt;. Colocaste las diferentes llaves con nombres diferentes y colocaste su ubicaci√≥n dentro del archivo config, y tienes todo mucho m√°s ordenado y sin problemas al usar conexiones ssh para repositorios.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/FernandoCutire/4c8589813bef6a5c914706b530fee102"&gt;GitHub Gist - FernandoCutire -Soluci√≥n: SSH Config -Problemas por m√∫ltiples cuentas de git en un mismo ordenador&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#turno-para-t%C3%AD-comenta-y-comparte"&gt;
  &lt;/a&gt;
  üëäüèΩ Turno para t√≠: Comenta y comparte
&lt;/h2&gt;

&lt;p&gt;Has aprendido a darle una soluci√≥n a este problema, &lt;strong&gt;lamentablemente todav√≠a existe este problema para varios desarrolladores, compartiendo la soluci√≥n podemos ayudar a que deje de serlo&lt;/strong&gt;. Puedes compartir la gu√≠a si te ha sido √∫til y/o comentar por si te ha dado un problema.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Aunque sea por un gol de diferencia, la victoria es victoria&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>github</category>
      <category>gitlab</category>
      <category>git</category>
      <category>development</category>
    </item>
    <item>
      <title>Day 4: 100 days of code</title>
      <author>Gaurav-Shekhawat</author>
      <pubDate>Tue, 17 Aug 2021 19:04:40 +0000</pubDate>
      <link>https://dev.to/gauravshekhawat/day-4-100-days-of-code-3egl</link>
      <guid>https://dev.to/gauravshekhawat/day-4-100-days-of-code-3egl</guid>
      <description>&lt;h3&gt;
  &lt;a href="#difference-between-innerhtml-and-innertext-in-js"&gt;
  &lt;/a&gt;
  DIfference between innerHTML and innerText in js
&lt;/h3&gt;

&lt;p&gt;see this &lt;a href="https://betterprogramming.pub/whats-best-innertext-vs-innerhtml-vs-textcontent-903ebc43a3fc"&gt;medium&lt;/a&gt; article for details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@parasbisht/difference-between-innerhtml-innertext-and-textcontent-c0789c6dd9c1"&gt;This&lt;/a&gt; is short summary of the above article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#difference-between-raw-getelementbyid-endraw-and-raw-getelementsbyclassname-endraw-"&gt;
  &lt;/a&gt;
  Difference between &lt;code&gt;getElementById&lt;/code&gt; and &lt;code&gt;getElementsByClassName&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The difference that I found through trial and error:-&lt;br&gt;&lt;br&gt;
The &lt;code&gt;getElementById&lt;/code&gt; will select only one element(as only one element will have that unique id), while in the arguments of &lt;code&gt;getElementsByClassName&lt;/code&gt; we can provide multiple classes, and it will select all the elements matching those classes. Hence &lt;code&gt;getElementsByClassName&lt;/code&gt; is like an array. Example:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="parentDiv"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To access the above, you have to write&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var divToBeAppended = document.getElementsByClassName("parentDiv");
divToBeAppended[0].appendChild(newButton);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#important-things-to-remember"&gt;
  &lt;/a&gt;
  Important things to remember:-
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5TFDiDuO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcaromptgkar914mtxqi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5TFDiDuO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcaromptgkar914mtxqi.png" alt="centering using margin auto"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In case of a image as direct child of an div with rounded corners, the image will overflow through the container. To stop that, you can use:-&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.container{
overflow:hidden;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#things-i-couldnt-make-a-summary-of"&gt;
  &lt;/a&gt;
  Things i couldn't make a summary of:-
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Change button colors project&lt;/li&gt;
&lt;li&gt;Kotlin basics:- functions, variables, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#things-couldnt-complete-try-again"&gt;
  &lt;/a&gt;
  Things couldn't complete ( try again)
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;CP problem:- Time is Mooney &lt;/li&gt;
&lt;li&gt;CP DP handbook last section&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Deploying CI/CD For NodeJS Serverless Applications Workshop: Part V</title>
      <author>Salah Elhossiny</author>
      <pubDate>Tue, 17 Aug 2021 18:19:41 +0000</pubDate>
      <link>https://dev.to/aws-builders/deploying-ci-cd-for-nodejs-serverless-applications-workshop-part-v-4g32</link>
      <guid>https://dev.to/aws-builders/deploying-ci-cd-for-nodejs-serverless-applications-workshop-part-v-4g32</guid>
      <description>&lt;h1&gt;
  &lt;a href="#canary-deployments"&gt;
  &lt;/a&gt;
  CANARY DEPLOYMENTS
&lt;/h1&gt;

&lt;p&gt;A Canary Deployment is a technique that reduces the risk of deploying a new version of an application by slowly rolling out the changes to a small subset of users before rolling it out to the entire customer base.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--imVT5wRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkwmsxhnyty6stdecswk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--imVT5wRp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkwmsxhnyty6stdecswk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  HOW DOES IT WORK?
&lt;/h2&gt;

&lt;p&gt;The concepts of blue/green and canary deployments have been around for a while and have been well-established as best-practices for reducing the risk of software deployments. In traditional applications, you slowly and incrementally update the servers in your fleet while simultaneously verifying application health. However, there is somewhat of an impedance mismatch when mapping these concepts to a serverless world. You can‚Äôt incrementally deploy your software across a fleet of servers when there are no servers!&lt;/p&gt;

&lt;p&gt;The answer is that there are a couple of services and features involved in making this possible. Let us explain:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lambda-versions-and-aliases"&gt;
  &lt;/a&gt;
  Lambda versions and aliases
&lt;/h3&gt;

&lt;p&gt;AWS Lambda allows you to publish multiple versions of the same function. Each version has its own code and associated dependencies, as well as its own function settings (like memory allocation, timeout and environment variables). &lt;/p&gt;

&lt;p&gt;You can then refer to a given version by using a Lambda Alias. An alias is nothing but a name that can be pointed to a given version of a Lambda function.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vNKwinXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0m4cw9qvf1o30tsm5itt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vNKwinXs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0m4cw9qvf1o30tsm5itt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#traffic-shifting-with-lambda-aliases"&gt;
  &lt;/a&gt;
  Traffic shifting with Lambda aliases
&lt;/h3&gt;

&lt;p&gt;With the introduction of alias traffic shifting, it is now possible to trivially implement canary deployments of Lambda functions. By updating additional version weights on an alias, invocation traffic is routed to the new function versions based on the weight specified. Detailed CloudWatch metrics for the alias and version can be analyzed during the deployment, or other health checks performed, to ensure that the new version is healthy before proceeding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uDylWLw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8m83d7dm8ui25auub0o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uDylWLw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8m83d7dm8ui25auub0o.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#traffic-shifting-with-sam-and-codedeploy"&gt;
  &lt;/a&gt;
  Traffic shifting with SAM and CodeDeploy
&lt;/h3&gt;

&lt;p&gt;AWS CodeDeploy provides an intuitive turn-key implementation of this functionality integrated directly into AWS SAM.&lt;/p&gt;

&lt;p&gt;Traffic-shifted deployments can be declared in a SAM template, and CodeDeploy manages the function rollout as part of the CloudFormation stack update. CloudWatch alarms can also be configured to trigger a stack rollback if something goes wrong.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---TwiFxpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4oj41hde2hzyxjograo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---TwiFxpF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4oj41hde2hzyxjograo.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-sam-template"&gt;
  &lt;/a&gt;
  UPDATE SAM TEMPLATE
&lt;/h2&gt;

&lt;p&gt;Open the SAM template (sam-app/template.yaml) in your project and add the following lines to the HelloWorldFunction properties section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;AutoPublishAlias&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;live&lt;/span&gt;
&lt;span class="na"&gt;DeploymentPreference&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Canary10Percent5Minutes&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Take care of indentation, YAML files ! :D &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wn0wzWnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58usv9c71ys2h8jgzcbf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wn0wzWnT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58usv9c71ys2h8jgzcbf.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deployment-preference-types"&gt;
  &lt;/a&gt;
  Deployment Preference Types
&lt;/h2&gt;

&lt;p&gt;For this workshop, we are using the Canary10Percent5Minutes strategy, which means that traffic is shifted in two increments. In the first increment, only 10% of the traffic is shifted to the new Lambda version, and after 5 minutes, the remaining 90% is shifted. &lt;/p&gt;

&lt;p&gt;There are other deployment strategies you can choose in CodeDeploy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Canary10Percent30Minutes&lt;/li&gt;
&lt;li&gt;Canary10Percent5Minutes&lt;/li&gt;
&lt;li&gt;Canary10Percent10Minutes&lt;/li&gt;
&lt;li&gt;Canary10Percent15Minutes&lt;/li&gt;
&lt;li&gt;Linear10PercentEvery10Minutes&lt;/li&gt;
&lt;li&gt;Linear10PercentEvery1Minute&lt;/li&gt;
&lt;li&gt;Linear10PercentEvery2Minutes&lt;/li&gt;
&lt;li&gt;Linear10PercentEvery3Minutes&lt;/li&gt;
&lt;li&gt;AllAtOnce&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Linear strategy means that traffic is shifted in equal increments with an equal number of time interval between each increment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validate-the-sam-template"&gt;
  &lt;/a&gt;
  Validate the SAM template
&lt;/h2&gt;

&lt;p&gt;Run the following command on your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/environment/sam-app
~ sam validate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If the template is correct, you will see template.yaml is a valid SAM Template. If you see an error, then you likely have an indentation issue on the YAML file. Double check and make sure it matches the screenshot shown above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#push-the-changes"&gt;
  &lt;/a&gt;
  Push the changes
&lt;/h2&gt;

&lt;p&gt;In the terminal, run the following commands from the root directory of your sam-app project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ git add &lt;span class="nb"&gt;.&lt;/span&gt;
~ git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Canary deployments with SAM"&lt;/span&gt;
~ git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#monitor-canary-health"&gt;
  &lt;/a&gt;
  MONITOR CANARY HEALTH
&lt;/h2&gt;

&lt;p&gt;Canary deployments are considerably more successful if the code is being monitored during the deployment. You can configure CodeDeploy to automatically roll back the deployment if a specified CloudWatch metric has breached the alarm threshold. Common metrics to monitor are Lambda Invocation errors or Invocation Duration (latency), for example. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#define-a-cloudwatch-alarm"&gt;
  &lt;/a&gt;
  Define a CloudWatch Alarm
&lt;/h3&gt;

&lt;p&gt;Add the following alarm definition to the template.yaml file in the Resources section after the HelloWorldFunction definition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;CanaryErrorsAlarm&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::CloudWatch::Alarm&lt;/span&gt;
  &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;AlarmDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Lambda function canary errors&lt;/span&gt;
    &lt;span class="na"&gt;ComparisonOperator&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GreaterThanThreshold&lt;/span&gt;
    &lt;span class="na"&gt;EvaluationPeriods&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
    &lt;span class="na"&gt;MetricName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Errors&lt;/span&gt;
    &lt;span class="na"&gt;Namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS/Lambda&lt;/span&gt;
    &lt;span class="na"&gt;Period&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;
    &lt;span class="na"&gt;Statistic&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sum&lt;/span&gt;
    &lt;span class="na"&gt;Threshold&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="na"&gt;Dimensions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Resource&lt;/span&gt;
        &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${HelloWorldFunction}:live"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;FunctionName&lt;/span&gt;
        &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;HelloWorldFunction&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ExecutedVersion&lt;/span&gt;
        &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;HelloWorldFunction.Version.Version&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then add the following lines to the DeploymentPreference section of the HelloWorldFunction definition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Alarms&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;CanaryErrorsAlarm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your template.yaml should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;2010-09-09'&lt;/span&gt;
&lt;span class="na"&gt;Transform&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless-2016-10-31&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="s"&gt;sam-app&lt;/span&gt;

  &lt;span class="s"&gt;Sample SAM Template for sam-app&lt;/span&gt;

&lt;span class="na"&gt;Globals&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Function&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Timeout&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;

&lt;span class="na"&gt;Resources&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;HelloWorldFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::Serverless::Function&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;CodeUri&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;hello-world/&lt;/span&gt;
      &lt;span class="na"&gt;Handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app.lambdaHandler&lt;/span&gt;
      &lt;span class="na"&gt;Runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;
      &lt;span class="na"&gt;AutoPublishAlias&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;live&lt;/span&gt;
      &lt;span class="na"&gt;DeploymentPreference&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Canary10Percent5Minutes&lt;/span&gt;
        &lt;span class="na"&gt;Alarms&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;CanaryErrorsAlarm&lt;/span&gt;
      &lt;span class="na"&gt;Events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;HelloWorld&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Api&lt;/span&gt;
          &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;Path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/hello&lt;/span&gt;
            &lt;span class="na"&gt;Method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;get&lt;/span&gt;

  &lt;span class="na"&gt;CanaryErrorsAlarm&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS::CloudWatch::Alarm&lt;/span&gt;
    &lt;span class="na"&gt;Properties&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;AlarmDescription&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Lambda function canary errors&lt;/span&gt;
      &lt;span class="na"&gt;ComparisonOperator&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;GreaterThanThreshold&lt;/span&gt;
      &lt;span class="na"&gt;EvaluationPeriods&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
      &lt;span class="na"&gt;MetricName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Errors&lt;/span&gt;
      &lt;span class="na"&gt;Namespace&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;AWS/Lambda&lt;/span&gt;
      &lt;span class="na"&gt;Period&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt;
      &lt;span class="na"&gt;Statistic&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Sum&lt;/span&gt;
      &lt;span class="na"&gt;Threshold&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
      &lt;span class="na"&gt;Dimensions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Resource&lt;/span&gt;
          &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;${HelloWorldFunction}:live"&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;FunctionName&lt;/span&gt;
          &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Ref&lt;/span&gt; &lt;span class="s"&gt;HelloWorldFunction&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ExecutedVersion&lt;/span&gt;
          &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;HelloWorldFunction.Version.Version&lt;/span&gt;

&lt;span class="na"&gt;Outputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# ServerlessRestApi is an implicit API created out of Events key under Serverless::Function&lt;/span&gt;
  &lt;span class="c1"&gt;# Find out more about other implicit resources you can reference within SAM&lt;/span&gt;
  &lt;span class="c1"&gt;# https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api&lt;/span&gt;
  &lt;span class="na"&gt;HelloWorldApi&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;API&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Gateway&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;endpoint&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;URL&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Prod&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;stage&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;World&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;function"&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"&lt;/span&gt;
  &lt;span class="na"&gt;HelloWorldFunction&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;World&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Lambda&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Function&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ARN"&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;HelloWorldFunction.Arn&lt;/span&gt;
  &lt;span class="na"&gt;HelloWorldFunctionIamRole&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Implicit&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;IAM&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Role&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;created&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Hello&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;World&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;function"&lt;/span&gt;
    &lt;span class="na"&gt;Value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="s"&gt;HelloWorldFunctionRole.Arn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can validate again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/environment/sam-app
sam validate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it's ok, then push again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Added CloudWatch alarm to monitor the canary"&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to the AWS CodeDeploy console and after a couple of minutes, you should see a new deployment in progress. Click on the Deployment to see the details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MWv0Y7If--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swtdgu8vqkbx9s4odmr2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MWv0Y7If--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/swtdgu8vqkbx9s4odmr2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The deployment status shows that 10% of the traffic has been shifted to the new version (aka The Canary). CodeDeploy will hold the remaining percentage until the specified time interval has ellapsed, in this case we specified the interval to be 5 minutes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xupUWOST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvxu39xh0u6acqt8oqzk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xupUWOST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wvxu39xh0u6acqt8oqzk.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Shortly after the 5 minutes, the remaining traffic should be shifted to the new version:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KmikGRaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9s5zyhlmd7euecrji5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KmikGRaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f9s5zyhlmd7euecrji5a.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rollbacks"&gt;
  &lt;/a&gt;
  ROLLBACKS
&lt;/h2&gt;

&lt;p&gt;Monitoring the health of your canary allows CodeDeploy to make a decision to whether a rollback is needed or not. If any of the CloudWatch Alarms specified gets to ALARM status, CodeDeploy rollsback the deployment automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduce-an-error-on-purpose"&gt;
  &lt;/a&gt;
  Introduce an error on purpose
&lt;/h3&gt;

&lt;p&gt;Lets break the Lambda function on purpose so that the CanaryErrorsAlarm gets triggered during deployment. Update the lambda code in sam-app/hello-world/app.js to throw an error on every invocation, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lambdaHandler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;This will cause a deployment rollback&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;// try {&lt;/span&gt;
    &lt;span class="c1"&gt;//     response = {&lt;/span&gt;
    &lt;span class="c1"&gt;//         'statusCode': 200,&lt;/span&gt;
    &lt;span class="c1"&gt;//         'body': JSON.stringify({&lt;/span&gt;
    &lt;span class="c1"&gt;//             message: 'hello my friend with canaries',&lt;/span&gt;
    &lt;span class="c1"&gt;//         })&lt;/span&gt;
    &lt;span class="c1"&gt;//     }&lt;/span&gt;
    &lt;span class="c1"&gt;// } catch (err) {&lt;/span&gt;
    &lt;span class="c1"&gt;//     console.log(err);&lt;/span&gt;
    &lt;span class="c1"&gt;//     return err;&lt;/span&gt;
    &lt;span class="c1"&gt;// }&lt;/span&gt;

    &lt;span class="c1"&gt;// return response&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to update the unit test, otherwise the build will fail. Comment out every line in the sam-app/hello-world/tests/unit/test-handler.js file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 'use strict';&lt;/span&gt;

&lt;span class="c1"&gt;// const app = require('../../app.js');&lt;/span&gt;
&lt;span class="c1"&gt;// const chai = require('chai');&lt;/span&gt;
&lt;span class="c1"&gt;// const expect = chai.expect;&lt;/span&gt;
&lt;span class="c1"&gt;// var event, context;&lt;/span&gt;

&lt;span class="c1"&gt;// describe('Tests index', function () {&lt;/span&gt;
&lt;span class="c1"&gt;//     it('verifies successful response', async () =&amp;gt; {&lt;/span&gt;
&lt;span class="c1"&gt;//         const result = await app.lambdaHandler(event, context)&lt;/span&gt;

&lt;span class="c1"&gt;//         expect(result).to.be.an('object');&lt;/span&gt;
&lt;span class="c1"&gt;//         expect(result.statusCode).to.equal(200);&lt;/span&gt;
&lt;span class="c1"&gt;//         expect(result.body).to.be.an('string');&lt;/span&gt;

&lt;span class="c1"&gt;//         let response = JSON.parse(result.body);&lt;/span&gt;

&lt;span class="c1"&gt;//         expect(response).to.be.an('object');&lt;/span&gt;
&lt;span class="c1"&gt;//         expect(response.message).to.be.equal("hello my friend with canaries");&lt;/span&gt;
&lt;span class="c1"&gt;//     });&lt;/span&gt;
&lt;span class="c1"&gt;// });&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the terminal, run the following commands from the root directory of your sam-app project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;
git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Breaking the lambda function on purpose"&lt;/span&gt;
git push

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, wait for your Pipeline to reach the deployment phase (ExecuteChangeSet). It should turn blue when it begins:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w3TK_4Km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w405rzehex3u7pwqkyz4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w3TK_4Km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w405rzehex3u7pwqkyz4.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#invoke-the-canary"&gt;
  &lt;/a&gt;
  INVOKE THE CANARY
&lt;/h3&gt;

&lt;p&gt;While the deployment is running, you need to generate traffic to the new Lambda function to make it fail and trigger the CloudWatch Alarm. In a real production environment, your users will likely generate organic traffic to the canary function, so you may not need to do this.&lt;/p&gt;

&lt;p&gt;In your terminal, run the following command to invoke the Lambda function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;aws lambda invoke &lt;span class="nt"&gt;--function-name&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="si"&gt;$(&lt;/span&gt;aws lambda list-functions | jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'.Functions[] | select( .FunctionName | contains("sam-app-HelloWorldFunction")).FunctionName'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:live &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nt"&gt;--payload&lt;/span&gt; &lt;span class="s1"&gt;'{}'&lt;/span&gt;  response.json

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1P6YMB11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sy0hlh3luh1q165bnym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1P6YMB11--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sy0hlh3luh1q165bnym.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember: During deployment, only 10% of the traffic will be routed to the new version. So, keep on invoking your lambda many times. 1 out of 10 invocations should trigger the new broken lambda, which is what you want to cause a rollback.&lt;/p&gt;

&lt;p&gt;Here is a command that invokes your function 15 times in a loop. Feel free to run it in your terminal.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$counter&lt;/span&gt; &lt;span class="nt"&gt;-le&lt;/span&gt; 15 &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do
    &lt;/span&gt;aws lambda invoke &lt;span class="nt"&gt;--function-name&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="si"&gt;$(&lt;/span&gt;aws lambda list-functions | jq &lt;span class="nt"&gt;-r&lt;/span&gt; &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'.Functions[] | select( .FunctionName | contains("sam-app-HelloWorldFunction")).FunctionName'&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;:live &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--payload&lt;/span&gt; &lt;span class="s1"&gt;'{}'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    response.json
    &lt;span class="nb"&gt;sleep &lt;/span&gt;1
    &lt;span class="o"&gt;((&lt;/span&gt;counter++&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Navigate to the AWS CodeDeploy Console and go into the deployment In-Progress to view its details.&lt;/p&gt;

&lt;p&gt;After a few minutes, CodeDeploy will detect that the CanaryErrorsAlarm has triggered and it will start rolling back the deployment. The screen will look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXzN3hxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzgcrztam57yqvbsr2hc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXzN3hxu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fzgcrztam57yqvbsr2hc.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cleanup"&gt;
  &lt;/a&gt;
  CLEANUP
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#delete-s3-buckets"&gt;
  &lt;/a&gt;
  DELETE S3 BUCKETS
&lt;/h4&gt;

&lt;p&gt;Empty the buckets by going to the S3 console. And then Delete them (there are 2 buckets).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2vJBs1tn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zin904alx9jl7u4q2ak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2vJBs1tn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8zin904alx9jl7u4q2ak.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tS8s4xxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3v1x2g1r054y1gnyaxa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tS8s4xxC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s3v1x2g1r054y1gnyaxa.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#delete-cf-stacks"&gt;
  &lt;/a&gt;
  DELETE CF STACKS
&lt;/h3&gt;

&lt;p&gt;Now that the buckets are empty, we can delete the Cloudformation stacks:&lt;/p&gt;

&lt;p&gt;Delete the CF stacks in following sequence and please wait for each to complete before going to next one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~ aws cloudformation delete-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; sam-app

~ aws cloudformation delete-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; sam-app-cicd

~ aws cloudformation delete-stack &lt;span class="nt"&gt;--stack-name&lt;/span&gt; aws-sam-cli-managed-default

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can now delete the Cloud9 instance we created:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to your Cloud9 Environment.&lt;/li&gt;
&lt;li&gt;Select the environment (i.e. MyCloud9Workspace) and click delete.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n9XVf2Sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3vnaupbqjpbef9zxrpn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n9XVf2Sm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3vnaupbqjpbef9zxrpn.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#congratulations-you-finished-the-workshop-thank-you-for-reading-all-parts-of-this-workshop-series"&gt;
  &lt;/a&gt;
  Congratulations, you finished the workshop. Thank you for reading all parts of this workshop series.
&lt;/h3&gt;

</description>
      <category>aws</category>
      <category>node</category>
      <category>serverless</category>
      <category>devops</category>
    </item>
    <item>
      <title>Array.splice() &amp; Array.slice()</title>
      <author>Swarnali Roy</author>
      <pubDate>Tue, 17 Aug 2021 18:17:13 +0000</pubDate>
      <link>https://dev.to/swarnaliroy94/array-splice-array-slice-ag</link>
      <guid>https://dev.to/swarnaliroy94/array-splice-array-slice-ag</guid>
      <description>&lt;p&gt;Hello Dear Readers,&lt;/p&gt;

&lt;p&gt;In the previous posts of this series, we've already learnt how to &lt;em&gt;add&lt;/em&gt; elements to an array using &lt;code&gt;array.unshift()&lt;/code&gt; &amp;amp; &lt;code&gt;array.push()&lt;/code&gt; methods and &lt;em&gt;remove&lt;/em&gt; elements from an array using &lt;code&gt;array.shift()&lt;/code&gt; &amp;amp; &lt;code&gt;array.pop()&lt;/code&gt; methods. &lt;br&gt;
[ &lt;a href="https://dev.to/swarnaliroy94/add-items-to-arrays-with-unshift-push-methods-"&gt;https://dev.to/swarnaliroy94/add-items-to-arrays-with-unshift-push-methods-&lt;/a&gt;]&lt;br&gt;
[&lt;a href="https://dev.to/swarnaliroy94/remove-items-from-arrays-with-shift-pop-methods-5caf"&gt;https://dev.to/swarnaliroy94/remove-items-from-arrays-with-shift-pop-methods-5caf&lt;/a&gt; ]&lt;/p&gt;

&lt;p&gt;Now, what if we want &lt;em&gt;one or more than one&lt;/em&gt; item to be removed from somewhere in the &lt;em&gt;middle&lt;/em&gt; of an array, that too at the same time? &lt;br&gt;
Well, that's exactly where &lt;code&gt;array.splice()&lt;/code&gt; comes in. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#arraysplice-method"&gt;
  &lt;/a&gt;
  Array.splice() Method
&lt;/h3&gt;

&lt;p&gt;üëâ This method allows us to &lt;em&gt;remove&lt;/em&gt; any number of &lt;em&gt;consecutive elements&lt;/em&gt; from &lt;em&gt;anywhere&lt;/em&gt; in an array and/or &lt;em&gt;add&lt;/em&gt; new elements in place. &lt;br&gt;
üëâ &lt;em&gt;Array.splice()&lt;/em&gt; can take up to three parameters.&lt;br&gt;
üëâ We can use this method multiple times in a single code snippet , step by step. With each execution , the values of the indices change.&lt;/p&gt;

&lt;p&gt;The basic syntax are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteCount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;deleteCount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;itemN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's know about these parameters and what they mean.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#parameters-of-arraysplice"&gt;
  &lt;/a&gt;
  Parameters of Array.splice()
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;üî∏ splice()'s &lt;em&gt;first parameter&lt;/em&gt; represents the &lt;em&gt;index&lt;/em&gt; on the array from which to &lt;em&gt;begin removing elements&lt;/em&gt;.&lt;br&gt;
üî∏ If greater than the length of the array, &lt;code&gt;start&lt;/code&gt; will be set to the &lt;em&gt;length of the array&lt;/em&gt;. In this case, no element will be removed but the method will behave as an &lt;em&gt;adding function&lt;/em&gt;, adding as many element as provided. &lt;br&gt;
üî∏ splice() can also take &lt;em&gt;negative integers&lt;/em&gt; as parameter. If negative, it will begin that many elements from the &lt;em&gt;end of the array&lt;/em&gt;. In this case, -1 means -n , that is the index of the &lt;em&gt;nth last element&lt;/em&gt;, and is therefore equivalent to the index of &lt;em&gt;array.length - n&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;deleteCount&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;üî∏ The &lt;em&gt;second parameter&lt;/em&gt; indicates the number of elements to be &lt;em&gt;removed&lt;/em&gt; or &lt;em&gt;replaced&lt;/em&gt;.&lt;br&gt;
üî∏ It indicates the number of elements in the array to &lt;em&gt;remove&lt;/em&gt; from &lt;code&gt;start&lt;/code&gt;. &lt;br&gt;
üî∏ If &lt;code&gt;deleteCount&lt;/code&gt; is &lt;em&gt;omitted&lt;/em&gt; or is &lt;em&gt;equal to or greater than&lt;/em&gt; the number of elements left in the array, starting at &lt;code&gt;start&lt;/code&gt;, then all the elements from &lt;code&gt;start&lt;/code&gt; to the end of the array will be &lt;em&gt;eliminated&lt;/em&gt;. &lt;br&gt;
üî∏ If &lt;code&gt;deleteCount&lt;/code&gt; is 0 or &lt;em&gt;negative&lt;/em&gt;, no elements will be &lt;em&gt;removed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;item1, item2, ...., itemN&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;üî∏ The &lt;em&gt;third parameter&lt;/em&gt; of splice() is &lt;em&gt;optional&lt;/em&gt; and &lt;em&gt;only&lt;/em&gt; used when we want to &lt;em&gt;add&lt;/em&gt; elements to the array, beginning from the &lt;code&gt;start&lt;/code&gt;.&lt;br&gt;
üî∏ If no element is &lt;em&gt;specified&lt;/em&gt;, splice() will only &lt;em&gt;remove&lt;/em&gt; elements from the array. &lt;/p&gt;

&lt;p&gt;Let's move on to some &lt;em&gt;examples&lt;/em&gt; to understand this concept better. We need to always remember that index of an array starts at 0.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-1-remove-2-elements-starting-from-index-2-and-insert-two-new-elements"&gt;
  &lt;/a&gt;
  üîπ Example 1: Remove 2 elements starting from index 2 and insert two new elements.
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orchid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;marigold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sunflower&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;belly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'rose', 'orchid', 'belly' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'marigold', 'sunflower' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this example, &lt;code&gt;start&lt;/code&gt; is the index 2 and &lt;code&gt;deleteCount&lt;/code&gt; is also 2 that means, splice() will start removing elements from index 2 and remove the values of index 2 and 3.&lt;/p&gt;

&lt;p&gt;We can see the same example and insert two new elements &lt;em&gt;in place&lt;/em&gt; of the removed elements üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orchid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;marigold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sunflower&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;belly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;almonda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rosemary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'rose', 'orchid', 'almonda', 'rosemary', 'belly' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'marigold', 'sunflower' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, value of index 2 and 3 are removed and &lt;em&gt;in place&lt;/em&gt; of them two new values are added.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-2-remove-elements-using-splice-multiple-times"&gt;
  &lt;/a&gt;
  üîπ Example 2: Remove elements using splice() multiple times
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orchid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;marigold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sunflower&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;belly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;almonda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rosemary&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hibiscus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [ 'marigold' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;// ['rose', 'orchid', 'sunflower', 'belly', 'almonda', 'rosemary', 'hibiscus' ]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removeAgain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removeAgain&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//[ 'rosemary', 'hibiscus' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;// [ 'rose', 'orchid', 'sunflower', 'belly', 'almonda' ]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;include&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tulip&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;include&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//[ 'sunflower' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//[ 'rose', 'orchid', 'tulip', 'belly', 'almonda' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;em&gt;example&lt;/em&gt; at first &lt;em&gt;marigold&lt;/em&gt; is removed from &lt;em&gt;index 2&lt;/em&gt;.&lt;br&gt;
Now, the modified array holds &lt;em&gt;rosemary&lt;/em&gt; and &lt;em&gt;hibiscus&lt;/em&gt; at index 5 and 6. So, removed them using *splice(5,2). Lastly, "sunflower" has been replaced by "tulip". &lt;br&gt;
In the process of changing the original array, with the first execution, the value of the indices has been changed and depending on that we executed the next steps. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-3-remove-0-zero-elements-before-index-3-and-insert-1-new-element"&gt;
  &lt;/a&gt;
  üîπ Example 3: Remove 0 (zero) elements before index 3, and insert 1 new element.
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;rose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orchid&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;marigold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sunflower&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;belly&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;almonda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;flowers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'rose', 'orchid', 'marigold', 'almonda', 'sunflower', 'belly' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: []&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Here, &lt;code&gt;deleteCount&lt;/code&gt; is 0 so nothing is removed but a new element is &lt;em&gt;added&lt;/em&gt; to the array at index 3 as the &lt;em&gt;first parameter&lt;/em&gt; of splice() is 3. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-4-remove-elements-from-index-0-and-insert-elementsnothing"&gt;
  &lt;/a&gt;
  üîπ Example 4: Remove elements from index 0 and insert elements/nothing
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;birds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;crow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pigeon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parrot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;birds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;macaw&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;peacock&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lovebird&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;birds&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//output: [ 'macaw', 'peacock', 'lovebird', 'parrot' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'crow', 'pigeon' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let's see what happens if we take the &lt;em&gt;same&lt;/em&gt; array and &lt;em&gt;remove&lt;/em&gt; all the elements and &lt;em&gt;insert&lt;/em&gt; nothing.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;birds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;crow&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pigeon&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;parrot&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;birds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instruments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: []&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'crow', 'pigeon', 'parrot' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example, there were only 3 values and we &lt;em&gt;removed&lt;/em&gt; 3 items from index 0, so the &lt;em&gt;output&lt;/em&gt; shows an empty array.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-5-remove-elements-from-index-n"&gt;
  &lt;/a&gt;
  üîπ Example 5: Remove elements from index -n
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;colours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;colours&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colours&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'blue', 'black', 'red', 'grey' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'pink', 'yellow' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, &lt;code&gt;start&lt;/code&gt; is -3 which indicates the &lt;em&gt;3rd last element&lt;/em&gt; of the array and &lt;code&gt;deleteCount&lt;/code&gt; is 2 which means the &lt;em&gt;splice()&lt;/em&gt; method will remove 2 elements from the 3rd last element and the other values will be same as before. &lt;/p&gt;

&lt;p&gt;Let's add some new values to the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;colours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grey&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;colours&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pink&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;purple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;colours&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'blue', 'black', 'pink', 'purple', 'grey' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'red' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;start&lt;/code&gt; is -2 which indicates the &lt;em&gt;2nd last element&lt;/em&gt; of the array and &lt;code&gt;deleteCount&lt;/code&gt; is 1 which means the &lt;em&gt;splice()&lt;/em&gt; method will remove 1 element from the 2nd last element and &lt;em&gt;add&lt;/em&gt; two new values starting from &lt;em&gt;index -2&lt;/em&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-6-remove-all-elements-no-deletecount-no-new-insertion"&gt;
  &lt;/a&gt;
  üîπ Example 6: Remove all elements, no deleteCount, no new insertion
&lt;/h4&gt;

&lt;p&gt;Remove all elements starting from index 4 üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;music&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guitar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;drums&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;violin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;piano&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tambourine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;music&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;music&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'guitar', 'drums', 'violin', 'piano' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'tambourine', 'flute' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remove all elements starting from index -4 üëá&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;music&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guitar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;drums&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;violin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;piano&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tambourine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;removed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;music&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;music&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'guitar', 'drums' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//output: [ 'violin', 'piano', 'tambourine', 'flute' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we have known enough of how to &lt;em&gt;modify&lt;/em&gt; an array by adding and removing items. But there is another way which we can use to &lt;em&gt;access part of an array without modifying it&lt;/em&gt;. That concept is known as &lt;strong&gt;Array.slice()&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrayslice-method"&gt;
  &lt;/a&gt;
  Array.slice() Method
&lt;/h3&gt;

&lt;p&gt;üëâ Rather than modifying an array, &lt;code&gt;Array.slice()&lt;/code&gt; copies or extracts a given number of elements to a new array, leaving the &lt;em&gt;original array&lt;/em&gt; unmodified.&lt;br&gt;
üëâ It returns a shallow copy of elements from the original array. Elements of the original array are copied into the returned array.&lt;br&gt;
üëâ It can take only &lt;em&gt;two parameters&lt;/em&gt; and both of them are &lt;em&gt;optional&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The basic syntax are: &lt;br&gt;
&lt;code&gt;slice()&lt;/code&gt;&lt;br&gt;
or&lt;br&gt;
&lt;code&gt;slice(start)&lt;/code&gt;&lt;br&gt;
or&lt;br&gt;
&lt;code&gt;slice(start,end)&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#parameters-of-arrayslice"&gt;
  &lt;/a&gt;
  Parameters of Array.slice()
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;üî∏ &lt;code&gt;start&lt;/code&gt; indicates the &lt;em&gt;index&lt;/em&gt; at which to &lt;em&gt;start extraction&lt;/em&gt;&lt;br&gt;
üî∏ Index can be &lt;em&gt;negative&lt;/em&gt;, indicating an &lt;em&gt;offset&lt;/em&gt; from the &lt;em&gt;end&lt;/em&gt; of the sequence.&lt;br&gt;
üî∏ The process generally starts extracting from index 0 if &lt;code&gt;start&lt;/code&gt; is undefined.&lt;br&gt;
üî∏ If &lt;code&gt;start&lt;/code&gt; is greater than the index range of the sequence, an empty array is returned. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;end&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;üî∏ &lt;code&gt;end&lt;/code&gt; indicates index &lt;em&gt;before which to end extraction&lt;/em&gt;.&lt;br&gt;
üî∏ &lt;code&gt;slice()&lt;/code&gt; extracts &lt;em&gt;up to&lt;/em&gt; but not including &lt;em&gt;end&lt;/em&gt;. For &lt;em&gt;example&lt;/em&gt;, slice(1,4) starts extracting from index 1 through index 3. (elements indexed 1, 2, and 3 will be copied). &lt;br&gt;
üî∏ A negative indexing can be used. For &lt;em&gt;example&lt;/em&gt;, slice(2,-1) extracts the third element through the second-to-last element in the sequence. &lt;br&gt;
üî∏ &lt;code&gt;slice()&lt;/code&gt; extracts through the end of the sequence (array.length), if there is no &lt;code&gt;end&lt;/code&gt; specified.&lt;br&gt;
üî∏ If &lt;code&gt;end&lt;/code&gt; is greater than the &lt;em&gt;length&lt;/em&gt; of the sequence, &lt;code&gt;slice()&lt;/code&gt; extracts through to the end of the sequence (array.length). &lt;/p&gt;

&lt;p&gt;A few examples will clear the concept more. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-1-return-a-copy-of-the-original-array"&gt;
  &lt;/a&gt;
  üîπ Example 1: Return a Copy of the Original Array
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;music&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;guitar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;drums&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;violin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;piano&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tambourine&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flute&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;extracted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;music&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;music&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'guitar', 'drums', 'violin', 'piano', 'tambourine', 'flute' ]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extracted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'guitar', 'drums', 'violin', 'piano', 'tambourine', 'flute' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As &lt;em&gt;no parameter&lt;/em&gt; is passed within &lt;code&gt;slice()&lt;/code&gt;, it returns the whole array unchanged. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-2-return-a-part-of-the-existing-array-only-using-one-parameter"&gt;
  &lt;/a&gt;
  üîπ Example 2: Return a Part of the Existing Array, only using one parameter
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mango&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grape&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lemon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kiwi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;extracted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: ['mango', 'apple', 'orange', 'grape', 'lemon', 'banana', 'kiwi']&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extracted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'grape', 'lemon', 'banana', 'kiwi' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In the above &lt;em&gt;example&lt;/em&gt;, the &lt;em&gt;original array&lt;/em&gt; is unchanged after &lt;em&gt;slice()&lt;/em&gt; being called upon it but the new array &lt;em&gt;extracted&lt;/em&gt; holds the copies of the values starting from &lt;em&gt;index 3&lt;/em&gt;. As no &lt;code&gt;end&lt;/code&gt; is specified, &lt;code&gt;slice()&lt;/code&gt; extracted all the value through &lt;em&gt;array.length&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#smallbluediamond-example-3-return-a-part-of-the-existing-array-using-both-parameters"&gt;
  &lt;/a&gt;
  üîπ Example 3: Return a Part of the Existing Array, using both parameters
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mango&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;grape&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lemon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;kiwi&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;extracted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: ['mango', 'apple', 'orange', 'grape', 'lemon', 'banana', 'kiwi']&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;extracted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="c1"&gt;//output: [ 'orange', 'grape', 'lemon' ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This &lt;em&gt;example&lt;/em&gt; shows, the &lt;em&gt;original array&lt;/em&gt; is unchanged after &lt;em&gt;slice()&lt;/em&gt; being called upon it but the new array &lt;em&gt;extracted&lt;/em&gt; holds the copies of the values starting from &lt;em&gt;index 2&lt;/em&gt; up to &lt;em&gt;index 5&lt;/em&gt; but not including the value of &lt;em&gt;index 5&lt;/em&gt;. The &lt;em&gt;extracted&lt;/em&gt; array holds the copies of values indexed at 2, 3 and 4.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#summarizing-arraysplice-vs-arrayslice"&gt;
  &lt;/a&gt;
  Summarizing Array.splice() vs Array.slice()
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Array.splice()&lt;/th&gt;
&lt;th&gt;Array.slice()&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;The &lt;code&gt;splice()&lt;/code&gt; method returns the removed item(s) in an array.&lt;/td&gt;
&lt;td&gt;The &lt;code&gt;slice()&lt;/code&gt; method returns the selected element(s) in an array, as a new array object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;This method &lt;em&gt;changes&lt;/em&gt; the original array.&lt;/td&gt;
&lt;td&gt;This method &lt;em&gt;doesn‚Äôt change&lt;/em&gt; the original array.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;It &lt;em&gt;does not create any copy&lt;/em&gt; of the existing array, rather &lt;em&gt;modifies&lt;/em&gt; it.&lt;/td&gt;
&lt;td&gt;It just &lt;em&gt;creates a shallow copy&lt;/em&gt; of the existing array &lt;em&gt;without&lt;/em&gt; doing any &lt;em&gt;modification&lt;/em&gt; to it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Can take &lt;em&gt;three&lt;/em&gt; parameters&lt;/td&gt;
&lt;td&gt;Can take &lt;em&gt;two&lt;/em&gt; parameters&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;When we write splice(2,4), it starts removing values from index 2 and remove 4 elements, &lt;em&gt;including&lt;/em&gt; the value of index 4 (removed items will be indexed at 2,3,4 &amp;amp; 5)&lt;/td&gt;
&lt;td&gt;When we write slice(2,4), it extracts values of index 2 up to index 4, &lt;em&gt;excluding&lt;/em&gt; the value of index 4 (removed items will be indexed at 2 &amp;amp; 3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;In this method, the third parameter gives the &lt;em&gt;option to add&lt;/em&gt; one or more new items to the existing array&lt;/td&gt;
&lt;td&gt;There is no such &lt;em&gt;adding option&lt;/em&gt; in this method&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;In the end , I'll give only one problem to solve to my readers. Let's see how you solve this.&lt;/p&gt;

&lt;p&gt;üî≤ Use &lt;code&gt;splice()&lt;/code&gt; to remove &lt;em&gt;"USA"&lt;/em&gt; first and then &lt;em&gt;from "Japan" to "Canada"&lt;/em&gt;. Insert &lt;em&gt;"Bhutan"&lt;/em&gt; in place of &lt;em&gt;"UK"&lt;/em&gt;. Use &lt;code&gt;slice()&lt;/code&gt; to keep a &lt;em&gt;copy&lt;/em&gt; of the original array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;countries&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bangladesh&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;India&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nepal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;USA&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;UK&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Germany&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Japan&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Spain&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Canada&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Expected Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ 'Bangladesh', 'India', 'Nepal', 'Bhutan', 'Germany' ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Readers can post their solutions in the discussion part.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Immutable Databases Are Here to Stay... pun intended</title>
      <author>Cassidy Mountjoy</author>
      <pubDate>Tue, 17 Aug 2021 17:55:49 +0000</pubDate>
      <link>https://dev.to/cassidymountjoy/immutable-databases-are-here-to-stay-pun-intended-388g</link>
      <guid>https://dev.to/cassidymountjoy/immutable-databases-are-here-to-stay-pun-intended-388g</guid>
      <description>&lt;p&gt;If understanding the inner workings of SQL and NoSQL databases didn‚Äôt leave your head spinning, I‚Äôd like to dust off a database relic, the Multi-Version database. These systems are actually a fairly simple concept and have been around for decades. Why haven‚Äôt you heard of them? Unless you spend your time reading academic papers it‚Äôs probably because they never got traction because of hardware constraints. When Multi-Version databases were introduced, storage was for the 1%‚Ä¶ Now that storage is a lot cheaper, Multi-Version systems can be revisited as an applicable and cost-effective database solution.&lt;/p&gt;

&lt;p&gt;Multi-Version databases are important because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;immutable&lt;/strong&gt; datastores enhance security&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;accessible&lt;/strong&gt; versioning provides in-depth analytics and auditing&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;updates&lt;/strong&gt; to your data are faster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On a more technical note they:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;reduce locking overhead&lt;/li&gt;
&lt;li&gt;don‚Äôt require pages to be re-packed&lt;/li&gt;
&lt;li&gt;eliminate the need for manual snapshots&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#multiversion-and-data-storage"&gt;
  &lt;/a&gt;
  Multi-Version and Data Storage
&lt;/h2&gt;

&lt;p&gt;While Uni-Version Systems (SQL and NoSQL) only keep track of the current state of the database, Multi-Version systems track every change that has occurred in the system. Data is never truly altered or removed, updated data is added to the data files; &lt;strong&gt;data is immutable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As a result, an append-only system increases the amount of storage used by an application. Initially, this made Multi-Version systems an expensive data management method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JaBhcpm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecv1l0squd0j5gzh8yyt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JaBhcpm2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecv1l0squd0j5gzh8yyt.png" alt="image"&gt;&lt;/a&gt; &lt;em&gt;Historic prices of hard drive space, from Matt Komorowski.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the 1980s, shortly after the Multi-Version database was conceived, storage cost was upwards of $100,000 per Gb‚Ä¶. today storage costs less than $.05 per Gb. The major decrease in storage costs lets us reconsider the Multi-Version database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#updating-your-data"&gt;
  &lt;/a&gt;
  Updating Your Data
&lt;/h2&gt;

&lt;p&gt;In order to maintain the state of a Uni-Version system, the database management system has to use complicated control measures to coordinate access to recourses and prevent data corruption.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GAkIQX-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v13uj57s85vuu92b0wjf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GAkIQX-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v13uj57s85vuu92b0wjf.png" alt="image"&gt;&lt;/a&gt; &lt;em&gt;(Figure 1)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When access is granted to the resource, the data is said to have a ‚Äúlock‚Äù on it. When User 1 requests to update a value (figure 1), a lock is added to the system. Data can‚Äôt be accessed by another source until the lock is released, hence, User 2 has to wait until the lock is released to perform an update. Locking makes resources inaccessible for an undefined period of time. Locking systems require downtime and compute, increasing the overhead associated with large transaction loads.&lt;/p&gt;

&lt;p&gt;Multi-version systems don‚Äôt require complex locking mechanisms because data can only be added to the end of the file. In this fashion, requests for updates can be handled concurrently. By eliminating traditional locking, removing and updating data is inherently faster, allowing applications to run at higher speeds and certain data cleaning processes become obsolete.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-cleaning"&gt;
  &lt;/a&gt;
  Data Cleaning
&lt;/h2&gt;

&lt;p&gt;When packed data is deleted or updated in a Uni-Version system, the space allotted to the original data is no longer in use and deemed inaccessible.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dRC2R3Oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1kg23elp00tq509atmo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dRC2R3Oq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q1kg23elp00tq509atmo.png" alt="image"&gt;&lt;/a&gt; &lt;em&gt;(figure 2) Red scribbles represent empty space in a data file.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Inaccessible space provides no value until it‚Äôs eventually recycled and made usable by the database management system during a process commonly called database ‚Äúvacuuming‚Äù. For example, when updating a specific value, the system deems the old value unusable, appends the updated data to the end of the file, and cleans the empty space during the next vacuum cycle.&lt;/p&gt;

&lt;p&gt;When data is ‚Äúupdated‚Äù or ‚Äúdeleted‚Äù in a multi-version system, the updated record is simply added to the end of the file. Previous data is never modified, instead, all changes are written to the next free slot. Multi-Version data mutations require only fetching the next free slot, there is no need to find the original tuple. This method decreases the number of data pages that are potentially brought into memory, increasing mutation speed, and reducing the amount of time that resources are locked.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analytics"&gt;
  &lt;/a&gt;
  Analytics
&lt;/h2&gt;

&lt;p&gt;In traditional systems, snapshots are used to track changes to the database after the snapshot was created. Snapshots are commonly used for time-based analytics and auditing. As an application grows and analytics begin to develop, snapshots become a daily routine for teams.&lt;/p&gt;

&lt;p&gt;Since Multi-Version databases track full database history, fine-grain snapshotting can be easily integrated into the system. Snapshots don‚Äôt rely on user commands as all versions of the database are accessible at all times. Fine-grained snapshots provide additional dimensions to your data. For example, in a Multi-Version database, it would be possible to get the state of a table before a specific value was updated. A rich data-history provides the analytics team access to insightful queries that span database versions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FoPzUc6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32g5ksbjxnr3lxa022yo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FoPzUc6z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/32g5ksbjxnr3lxa022yo.png" alt="image"&gt;&lt;/a&gt;&lt;em&gt;(figure 3) A time travel query.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In conclusion, database implementations should adapt to the hardware that supports them. We have been relying on the same Uni-Version systems for the past 30 years. Is this the best implementation? How can we adapt our management systems to capitalize on the efficiency of cloud computing? Multi-Version databases were once an unrealistic and expensive solution, yet revisiting them uncovers a lot of programmatic benefits that are no longer constrained by costs. As the emphasis shifts from storage size to speed and analytics, a Multi-Version implementation becomes an effective choice for data-driven applications.&lt;/p&gt;

</description>
      <category>database</category>
    </item>
    <item>
      <title>#100daysofcode [Day - 07] {Weekly Project - 01}
</title>
      <author>Al Siam</author>
      <pubDate>Tue, 17 Aug 2021 17:51:54 +0000</pubDate>
      <link>https://dev.to/alsiamworld/100daysofcode-day-07-weekly-project-01-19ie</link>
      <guid>https://dev.to/alsiamworld/100daysofcode-day-07-weekly-project-01-19ie</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day-07-weekly-project-01"&gt;
  &lt;/a&gt;
  100daysofcode [Day - 07] {Weekly Project - 01}
&lt;/h1&gt;

&lt;p&gt;Today I've made a one-page website using bootstrap. you can get details about bikes &amp;amp; also can buy the bike.&lt;/p&gt;

&lt;p&gt;still updating the site...!&lt;/p&gt;

&lt;p&gt;live preview: &lt;a href="https://bike-palace.netlify.app"&gt;https://bike-palace.netlify.app&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gPKyqTmz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah656m7dxy2t3tr51q5e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gPKyqTmz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ah656m7dxy2t3tr51q5e.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#javascript-programming-webdevelopement"&gt;
  &lt;/a&gt;
  javascript #programming #webdevelopement
&lt;/h1&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>You Can Now Register for CodeLand 2021 &amp; View the Speaker Lineup üåà </title>
      <author>dev.to staff</author>
      <pubDate>Tue, 17 Aug 2021 17:32:42 +0000</pubDate>
      <link>https://dev.to/devteam/you-can-now-register-for-codeland-2021-view-the-speaker-lineup-7pm</link>
      <guid>https://dev.to/devteam/you-can-now-register-for-codeland-2021-view-the-speaker-lineup-7pm</guid>
      <description>&lt;p&gt;&lt;a href="https://codelandconf.com"&gt;CodeLand&lt;/a&gt; is a special time of year for the DEV and CodeNewbie communities ‚Äî it's our chance to celebrate early-career software developers, people learning to program, mentorship, and form authentic connections with the code-obsessed.&lt;/p&gt;

&lt;p&gt;That's why we're so thrilled to pass along the &lt;a href="https://community.codenewbie.org/codenewbie/register-for-codeland-2021-and-see-who-s-speaking-eek"&gt;news&lt;/a&gt; that &lt;strong&gt;registration for this year's two day, virtual event is now open and speakers and workshops have been announced.&lt;/strong&gt; üéâ Please join us on September 23rd &amp;amp; 24th, 2021 for this unforgettable global gathering.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#gtgt-view-the-lineup-of-keynotes-and-talks"&gt;
  &lt;/a&gt;
  &lt;a href="https://codelandconf.com/#program"&gt;&amp;gt;&amp;gt; View the lineup of keynotes and talks&lt;/a&gt;
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#gtgt-grab-a-ticket-the-cost-whatever-works-for-you-starting-at-0"&gt;
  &lt;/a&gt;
  &lt;a href="https://codelandconf.com/#attend"&gt;&amp;gt;&amp;gt; Grab a ticket&lt;/a&gt;. The cost? Whatever works for you, starting at $0.
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#gtgt-sign-up-for-an-account-on-codenewbie-community-if-you-havent-already-youll-need-it-to-fully-participate-in-codeland"&gt;
  &lt;/a&gt;
  &lt;a href="https://community.codenewbie.org/enter"&gt;&amp;gt;&amp;gt; Sign up for an account on CodeNewbie Community&lt;/a&gt; if you haven't already. You'll need it to fully participate in CodeLand.
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#read-more-details-on-this-exciting-news-here"&gt;
  &lt;/a&gt;
  Read more details on this exciting news &lt;a href="https://community.codenewbie.org/codenewbie/register-for-codeland-2021-and-see-who-s-speaking-eek"&gt;here&lt;/a&gt;.
&lt;/h3&gt;

&lt;p&gt;If you love to code, you'll love &lt;a href="https://codelandconf.com"&gt;CodeLand&lt;/a&gt; ‚Äî hope to see you there!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;P.S. Want this community to hear from you at CodeLand? Organizers are still accepting short videos for "CodeLand Recess" until August 20th. &lt;a href="https://community.codenewbie.org/codenewbie/a-new-codeland-opportunity-for-creative-codenewbies-5e82"&gt;Learn more and submit your entry today&lt;/a&gt;.&lt;/em&gt; üåà  &lt;/p&gt;

</description>
      <category>codeland</category>
      <category>codenewbie</category>
      <category>meta</category>
    </item>
    <item>
      <title>Astro üöÄ üöÄ üöÄ Framework</title>
      <author>sacarvy</author>
      <pubDate>Tue, 17 Aug 2021 17:14:41 +0000</pubDate>
      <link>https://dev.to/sacarvy/astro-framework-je3</link>
      <guid>https://dev.to/sacarvy/astro-framework-je3</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;You can use any framework you want (or none at all)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;#### ü§©  Really Awesome Not!&lt;/li&gt;
&lt;li&gt;#### ü§î  But will it not create a mess&lt;/li&gt;
&lt;li&gt;#### ü§ó  But still pretty powerfull&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes! it is powerful ü¶Ñ for a person who has experience with the framework that he is going to use &lt;br&gt;
but still For Example knowing that &lt;strong&gt;svelte framework&lt;/strong&gt; is very good at animating stuff is pretty powerful to use it with other stuff who have to make your website .&lt;br&gt;
You can use many libraries at the same time in your website from different frameworks, But still use things which you are going to use most of time don't install &lt;br&gt;
4 to 5 UI libraries from different frameworks, If you do then you can't use one of them to it's capacity .&lt;br&gt;
And more libraries will create more confusion So, make a mind map before installing libraries &lt;br&gt;
Take a look at frameworks which you are going to use and Where you like to use with Astro .&lt;br&gt;
In most scenarios One framework is enough or Two framework . &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Comming year there are many tools comming, and already we have a ton of tools So, &lt;br&gt;
The thing that matter is your vesion that how to use them at right place to look and work pretty smooth .&lt;br&gt;
But still these tools are going to make life easier . &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-work-with-an-svelte-exampl"&gt;
  &lt;/a&gt;
  Let's work with an svelte Exampl
&lt;/h2&gt;

&lt;p&gt;In This example I am going to show you how to make a svelte component&lt;br&gt;
that will animate underline with &lt;a href="https://roughnotation.com/"&gt;rough-notation&lt;/a&gt; &lt;br&gt;
Pure Javascript Library&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;annotate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rough-notation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// a for annotation&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;underline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#FFF&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;rtl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;animationDuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;bind:this=&lt;/span&gt;&lt;span class="s"&gt;{e}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;slot/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#now-you-can-use-this-component-in-your-astro-file-like-this"&gt;
  &lt;/a&gt;
  Now you can use this component in your Astro file like this
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;---&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MakeItUnderlineAnimate&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./yourSvelteFile.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
&lt;span class="o"&gt;---&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MakeItUnderlineAnimate&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;visible&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    iAmUnderlined word
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;MakeItUnderlineAnimate&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#making-it-a-reuseable-component"&gt;
  &lt;/a&gt;
  Making it a Reuseable component
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Reuseable components are great only if they are flexible &lt;br&gt;
Let's make our component &lt;strong&gt;&lt;em&gt;Reuseable&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Let's see what we can change in our previous &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#i-think-we-can-use-svelte-props-to-make-it-reuseable"&gt;
  &lt;/a&gt;
  I think we can use svelte props to make it reuseable
&lt;/h4&gt;

&lt;p&gt;we can accept values like color, from our component As,&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;--------&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MakeItUnderlineAnimate&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./yourSvelteFile.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
&lt;span class="o"&gt;--------&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;MakeItUnderlineAnimate&lt;/span&gt; &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"#FF0060"&lt;/span&gt; &lt;span class="na"&gt;client&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="na"&gt;visible&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    iAmUnderlined word
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;MakeItUnderlineAnimate&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And Now use it in our svelte file Like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;annotate&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rough-notation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// a for annotation&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;underline&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;rtl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;animationDuration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;iterations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;bind:this=&lt;/span&gt;&lt;span class="s"&gt;{e}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;slot/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#this-will-work-perfectly-fine-"&gt;
  &lt;/a&gt;
  This will work perfectly fine .
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#so-its-bit-longer-but-you-might-learn-something-new-from-this-example-"&gt;
  &lt;/a&gt;
  So, it's bit longer but You might learn something new from this example .
&lt;/h4&gt;

&lt;p&gt;But still astro is in it's starting stage So, bug are there But to make Astro best by each day you can make issue about there bugs at there &lt;a href="https://github.com/snowpackjs/astro/"&gt;github repo&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;Checkout My personnel portfolio &lt;a href="https://zcz.netlify.app"&gt;WEBSITE&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>svelte</category>
      <category>developer</category>
      <category>javascript</category>
    </item>
    <item>
      <title>‚ú® How to make a Next.js app a PWA with offline support</title>
      <author>Max Programming</author>
      <pubDate>Tue, 17 Aug 2021 17:03:41 +0000</pubDate>
      <link>https://dev.to/maxprogramming/how-to-make-a-next-js-app-a-pwa-with-offline-support-fei</link>
      <guid>https://dev.to/maxprogramming/how-to-make-a-next-js-app-a-pwa-with-offline-support-fei</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-everyone"&gt;
  &lt;/a&gt;
  Hello everyone üëã
&lt;/h2&gt;

&lt;p&gt;In today's article, we will see how we can make a PWA out of a Next.js app! And it is going to be very exciting as the biggest feature will be &lt;strong&gt;offline support&lt;/strong&gt; with a very little configuration!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#index"&gt;
  &lt;/a&gt;
  üìÉ INDEX
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#1-project-code"&gt;Project code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-next-pwa-package"&gt;&lt;code&gt;next-pwa&lt;/code&gt; package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-getting-assets"&gt;Getting assets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-web-manifest-file"&gt;Web manifest file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-pwa-configuration"&gt;PWA Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-offline-fallback-page"&gt;Offline fallback page&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before we move on, I would like to recommend checking my video on YouTube about this if you are comfortable following along with a video. Make sure to leave a comment about any suggestions, or doubts you have üôÇ.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MHjF166fcxw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fSWEt5yC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/HvgCZhfU1zMAAAAM/znarf-lets-go.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fSWEt5yC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://c.tenor.com/HvgCZhfU1zMAAAAM/znarf-lets-go.gif" alt="letsgo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-project-code"&gt;
  &lt;/a&gt;
  1. Project code
&lt;/h2&gt;

&lt;p&gt;For this demo, I already have a simple project setup that we can use to start or test. &lt;/p&gt;

&lt;p&gt;You can download the source or clone the repo:  &lt;a href="https://github.com/max-programming/next-pwa-tut"&gt;GitHub Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PhDpOOuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629043215703/d7NnwUciV.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PhDpOOuW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629043215703/d7NnwUciV.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This repository has 2 branches, the &lt;code&gt;main&lt;/code&gt; one contains the starter code and the &lt;code&gt;pwa&lt;/code&gt; branch contains the complete code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-raw-nextpwa-endraw-package"&gt;
  &lt;/a&gt;
  2.&lt;code&gt;next-pwa&lt;/code&gt; package
&lt;/h2&gt;

&lt;p&gt;The next step is to install the NPM package we need for this. It's a great package that does everything for you automatically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i next-pwa
&lt;span class="c"&gt;# or yarn add next-pwa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-getting-assets"&gt;
  &lt;/a&gt;
  3. Getting assets
&lt;/h2&gt;

&lt;p&gt;If you are familiar with making a PWA, you already know that we need different sizes of logos for our app to function properly on different devices. I found a very good website to generate these images in different sizes. &lt;/p&gt;

&lt;p&gt;You can simply go to &lt;a href="https://cthedot.de/icongen/"&gt;Icongen&lt;/a&gt; and select the types you want. For the sake of this tutorial, I am generating these images. And upload &lt;code&gt;vercel.svg&lt;/code&gt; or your existing logo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nlhSFIvB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629043837535/_1ivI-6oU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nlhSFIvB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629043837535/_1ivI-6oU.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After getting all the images, add them to a new folder named &lt;code&gt;icons&lt;/code&gt; in the project's &lt;code&gt;public&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Rename all the file names with &lt;code&gt;icon-{size}x{size}.png&lt;/code&gt;. For eg, &lt;code&gt;icon-192x192.png&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q457ElKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629044106745/WL7bKR5deB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q457ElKT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629044106745/WL7bKR5deB.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, add a &lt;code&gt;maskable.png&lt;/code&gt; which you can either generate online or for the sake of this tutorial, I used the same &lt;code&gt;192x192&lt;/code&gt; sized icon for the maskable icon.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-web-manifest-file"&gt;
  &lt;/a&gt;
  4. Web manifest file
&lt;/h2&gt;

&lt;p&gt;Now we need to create a file for the metadata about the app. Create a file named &lt;code&gt;manifest.json&lt;/code&gt; in the &lt;code&gt;public&lt;/code&gt; folder and copy the contents of the file from &lt;a href="https://easypastes.tk/pastes/manifest.json"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can fill up the contents as per your project, for this project, this is the data we are using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"short_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Next PWA"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Next PWA Tutorial"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"..."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"icons"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/icons/icon-36x36.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"36x36"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/icons/icon-48x48.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"48x48"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/icons/icon-72x72.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"72x72"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/icons/icon-96x96.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"96x96"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/icons/icon-144x144.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"144x144"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/icons/icon-192x192.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"192x192"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/icons/icon-512x512.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"512x512"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"src"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/icons/maskable.png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"image/png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"sizes"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"192x192"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"purpose"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"maskable"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"background_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#FFFFFF"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"display"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"standalone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scope"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"theme_color"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"#000000"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you need to link the &lt;code&gt;manifest.json&lt;/code&gt; file in your Next.js &lt;code&gt;&amp;lt;Head&amp;gt;&lt;/code&gt; component in all the pages.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;Head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;'manifest'&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;'/manifest.json'&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-pwa-configuration"&gt;
  &lt;/a&gt;
  5. PWA Configuration
&lt;/h2&gt;

&lt;p&gt;In the first step, we installed the &lt;code&gt;next-pwa&lt;/code&gt; NPM package which we will be using now. In your project's root, create a &lt;code&gt;next.config.js&lt;/code&gt; or edit if it already exists.&lt;/p&gt;

&lt;p&gt;We import the &lt;code&gt;withPWA&lt;/code&gt; function from the package and wrap the export in that function, here we can add a &lt;code&gt;pwa&lt;/code&gt; object which we will configure like so üëá&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;dest&lt;/code&gt; property is the destination folder and we added a &lt;code&gt;disable&lt;/code&gt; property which disables creating the service workers while we are in development.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;withPWA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-pwa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;withPWA&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;pwa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;disable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;reactStrictMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#6-offline-fallback-page"&gt;
  &lt;/a&gt;
  6. Offline fallback page
&lt;/h2&gt;

&lt;p&gt;Additionally, we can also add a page to show &lt;strong&gt;if the user is offline&lt;/strong&gt;, this enhances the user experience and makes it work like an actual app.&lt;/p&gt;

&lt;p&gt;Just add a page named &lt;code&gt;_offline.js&lt;/code&gt; in your &lt;code&gt;pages&lt;/code&gt; folder, and &lt;code&gt;next-pwa&lt;/code&gt; will automatically show that page if the user is offline. But the condition is that the user has to visit the website so that the offline page is cached whenever the user first visits the website.&lt;/p&gt;

&lt;p&gt;Here are some examples of offline pages:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N54efggz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629045219320/o_NpKTqqq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N54efggz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629045219320/o_NpKTqqq.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üëÜ &lt;a href="http://easypastes.tk/"&gt;Easy Pastes&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qeGplYnG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629045293755/6Za7xppAu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qeGplYnG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629045293755/6Za7xppAu.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üëÜ &lt;a href="http://youtube.com/"&gt;YouTube&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UmiFZh4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629045327502/AXCT2JuHJ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UmiFZh4v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629045327502/AXCT2JuHJ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üëÜ &lt;a href="https://meet.google.com"&gt;Google Meet&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A final touch would be to add these files to your &lt;code&gt;.gitignore&lt;/code&gt; file to not commit these service worker files created by &lt;code&gt;next-pwa&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# PWA files
&lt;/span&gt;&lt;span class="o"&gt;**/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;precache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
&lt;span class="o"&gt;**/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
&lt;span class="o"&gt;**/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workbox&lt;/span&gt;&lt;span class="o"&gt;-*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
&lt;span class="o"&gt;**/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;-*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
&lt;span class="o"&gt;**/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;-*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
&lt;span class="o"&gt;**/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;precache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;
&lt;span class="o"&gt;**/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;
&lt;span class="o"&gt;**/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workbox&lt;/span&gt;&lt;span class="o"&gt;-*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;
&lt;span class="o"&gt;**/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="o"&gt;-*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;
&lt;span class="o"&gt;**/&lt;/span&gt;&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fallback&lt;/span&gt;&lt;span class="o"&gt;-*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we successfully completed the process, and now your Next.js app can be used offline, is installable as an app, and is also a PWA.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x8JJlPlG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629045944767/fOOLBw6bM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x8JJlPlG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1629045944767/fOOLBw6bM.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9WE7glM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/ImpassionedFrailChimneyswift-size_restricted.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9WE7glM0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/ImpassionedFrailChimneyswift-size_restricted.gif" alt="success"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I hope it helped you make your app a PWA, let me know your experience in the comments and share it with people so that they can do it easily too.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>pwa</category>
      <category>react</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Make your lambda functions lightweight</title>
      <author>Cesar Mu√±oz</author>
      <pubDate>Tue, 17 Aug 2021 16:51:51 +0000</pubDate>
      <link>https://dev.to/cesmunoz/make-your-lambda-functions-lightweight-o8h</link>
      <guid>https://dev.to/cesmunoz/make-your-lambda-functions-lightweight-o8h</guid>
      <description>&lt;p&gt;I see a lot of articles on how to create a lambda with simple steps, always showing the hello world. But every time you start using dependencies in your lambda function, it starts to weigh.&lt;/p&gt;

&lt;p&gt;So, this article will show you how to make your lambda more lightweight and have only the function that we need to execute&lt;/p&gt;

&lt;p&gt;Before jumping into the code you need these requirements:&lt;/p&gt;

&lt;p&gt;1) AWS CLI installed&lt;br&gt;
2) Configure your aws credentials locally with &lt;code&gt;aws configure&lt;/code&gt;. &lt;br&gt;
3) Obviously node installed (We are going to use node v12)&lt;br&gt;
4) Serverless installed &lt;code&gt;npm install -g serverless&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Do you have it all configured? Alright! Let's start coding!! üôÇ&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First, I wanna show you the problem&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a folder or create a repo and clone it. In my case, I created a repo and clone it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--L9EAzWdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yutie17xnduiy1gm8h6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L9EAzWdG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1yutie17xnduiy1gm8h6.png" alt="CreateRepo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will use npm to install the dependencies, you could use yarn if you want to&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lbgSwV5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdfnw0xhejflaet21kgn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lbgSwV5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdfnw0xhejflaet21kgn.png" alt="npmInit"&gt;&lt;/a&gt;&lt;br&gt;
This will create a package.json &lt;/p&gt;

&lt;p&gt;Now we are going to create our lambda function with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; sls init aws-node-rest-api
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XH9_xNOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x768pzc6cvkg48ujh8fd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XH9_xNOB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x768pzc6cvkg48ujh8fd.png" alt="slsInit"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to make a few changes to the project. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;aws-node-rest-api&lt;/code&gt; will change it to &lt;code&gt;src&lt;/code&gt; and copy &lt;code&gt;serveless.yml&lt;/code&gt; from &lt;code&gt;src&lt;/code&gt; in our root folder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;mv &lt;/span&gt;aws-node-rest-api src
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;mv &lt;/span&gt;src/serveless.yml ./serverless.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2nht5VI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mza8zdahaccsjgdsba91.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2nht5VI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mza8zdahaccsjgdsba91.png" alt="Moving Files"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the last thing to change will be the path of where is our lambda function&lt;/p&gt;

&lt;p&gt;Before&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;app: aws-node-rest-api
service: aws-node-rest-api

provider:
  name: aws
  runtime: nodejs12.x

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /
          method: get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;app: aws-node-rest-api
service: aws-node-rest-api

provider:
  name: aws
  runtime: nodejs12.x

functions:
  hello:
    &lt;span class="k"&gt;**&lt;/span&gt;handler: src/handler.hello&lt;span class="k"&gt;**&lt;/span&gt;
    events:
      - http:
          path: /
          method: get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I highlighted the changed path of the lambda function. &lt;/p&gt;

&lt;p&gt;And that's it. Let's deploy our function!!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; serverless deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After a while, you'll get the following picture&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XUGUc8tf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ps93r68gh89j2teufpdz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XUGUc8tf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ps93r68gh89j2teufpdz.png" alt="Deployed"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you go to aws you can see your new lambda function!! YEY!!! GOOD JOB!!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wUS51tQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s4f894t16t0euazo0nl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wUS51tQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s4f894t16t0euazo0nl.png" alt="AwsFunction"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if go to see what is deployed in our lambda function we can see the code&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3VxvVIPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zg9i1ertbs7l8o99o6ke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3VxvVIPx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zg9i1ertbs7l8o99o6ke.png" alt="AwsFunctionCode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we are experts in serverless and lambda functions we want to add some packages&lt;/p&gt;

&lt;p&gt;Our lambdas won't we simple right? most of the time we are using packages, to do some calls to the database, call an aws feature, call an api, manipulate an image, etc.&lt;/p&gt;

&lt;p&gt;Now, let's install some packages. Let's say we are going to manipulate some images, in our case we are going to use &lt;code&gt;jimp&lt;/code&gt; (this is only for the example. I needed a heavy npm package)&lt;/p&gt;

&lt;p&gt;So in our console let's type the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--save&lt;/span&gt; jimp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now let's deploy again a see what's going on&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; severless deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EfSRsWBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2isiql83k1sec0bqzbcb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EfSRsWBk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2isiql83k1sec0bqzbcb.png" alt="AwsFunctionNoCode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait! What? Cannot see the code? What's going on?&lt;/p&gt;

&lt;p&gt;Well, with the simple configuration we are uploading the node_modules folder into our lambda function and the package that we just installed makes the lambda too large to show the code.&lt;/p&gt;

&lt;p&gt;How can avoid this and see my code again!!?  &lt;strong&gt;Lambda Layers&lt;/strong&gt; to the rescue!!&lt;/p&gt;

&lt;p&gt;That's right! serverless has the ability to create Lambda Layers. A Lambda Layer is a ZIP archive that contains libraries or other dependencies. With that, we can make our lambda function smaller again.&lt;/p&gt;

&lt;p&gt;How we can achieve this? We are going to put our node_modules folder in a Lambda Layer.&lt;/p&gt;

&lt;p&gt;For this, we are going to make a few changes to our code.&lt;/p&gt;

&lt;p&gt;First, we are going to install this package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; npm i &lt;span class="nt"&gt;--save-dev&lt;/span&gt; serverless-hooks-plugin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and after that, we are creating a deployment folder and create a script where it has all the things that we need to create the layer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;mkdir &lt;/span&gt;deployment
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;touch &lt;/span&gt;deployment/prepare.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our &lt;a href="http://prepare.sh"&gt;prepare.sh&lt;/a&gt; we are going to copy the following code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'****** Starting Pre Deploy Script ******'&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'1- Creating folder for layers and copy package.json'&lt;/span&gt; 
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; ./.dist
&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; ./.serverless-layers
&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; .serverless-layers/node-layers/nodejs
&lt;span class="nb"&gt;cp &lt;/span&gt;package.json .serverless-layers/node-layers/nodejs/
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'DONE!'&lt;/span&gt; 

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'2 - Change path to serverless-layer, adding LIB dependency, remove npm and yarn files'&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; .serverless-layers/node-layers/nodejs
npm i &lt;span class="nt"&gt;--production&lt;/span&gt;
&lt;span class="nb"&gt;rm &lt;/span&gt;package.json
&lt;span class="nb"&gt;rm &lt;/span&gt;package-lock.json
&lt;span class="nb"&gt;cd&lt;/span&gt; ../../..
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'DONE!'&lt;/span&gt; 

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'****** Finished Pre Deploy Script ******'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically we are creating a nodejs folder inside .serveless-layes/node-layers, copying the package.json from our root folder and install all the dependencies.&lt;/p&gt;

&lt;p&gt;Then, in our package.json we are adding a new script&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="s2"&gt;"deploy:prepare"&lt;/span&gt;: &lt;span class="s2"&gt;"sh deployment/prepare.sh"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Leaving our package.json something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;"name"&lt;/span&gt;: &lt;span class="s2"&gt;"serverless-aws-node-layer-example"&lt;/span&gt;,
  &lt;span class="s2"&gt;"version"&lt;/span&gt;: &lt;span class="s2"&gt;"1.0.0"&lt;/span&gt;,
  &lt;span class="s2"&gt;"description"&lt;/span&gt;: &lt;span class="s2"&gt;""&lt;/span&gt;,
  &lt;span class="s2"&gt;"main"&lt;/span&gt;: &lt;span class="s2"&gt;"index.js"&lt;/span&gt;,
  &lt;span class="s2"&gt;"scripts"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"deploy:prepare"&lt;/span&gt;: &lt;span class="s2"&gt;"sh deployment/prepare.sh"&lt;/span&gt;,
    &lt;span class="s2"&gt;"test"&lt;/span&gt;: &lt;span class="s2"&gt;"echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;"repository"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"type"&lt;/span&gt;: &lt;span class="s2"&gt;"git"&lt;/span&gt;,
    &lt;span class="s2"&gt;"url"&lt;/span&gt;: &lt;span class="s2"&gt;"git+https://github.com/cesmunoz/serverless-aws-node-layer-example.git"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;"keywords"&lt;/span&gt;: &lt;span class="o"&gt;[]&lt;/span&gt;,
  &lt;span class="s2"&gt;"author"&lt;/span&gt;: &lt;span class="s2"&gt;""&lt;/span&gt;,
  &lt;span class="s2"&gt;"license"&lt;/span&gt;: &lt;span class="s2"&gt;"ISC"&lt;/span&gt;,
  &lt;span class="s2"&gt;"bugs"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"url"&lt;/span&gt;: &lt;span class="s2"&gt;"https://github.com/cesmunoz/serverless-aws-node-layer-example/issues"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;"homepage"&lt;/span&gt;: &lt;span class="s2"&gt;"https://github.com/cesmunoz/serverless-aws-node-layer-example#readme"&lt;/span&gt;,
  &lt;span class="s2"&gt;"dependencies"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"jimp"&lt;/span&gt;: &lt;span class="s2"&gt;"^0.16.1"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="s2"&gt;"devDependencies"&lt;/span&gt;: &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"serverless-hooks-plugin"&lt;/span&gt;: &lt;span class="s2"&gt;"^1.1.0"&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the last thing, we need to make this steps in our serveless.yml. &lt;/p&gt;

&lt;p&gt;Adding the following things:&lt;/p&gt;

&lt;p&gt;1) Using the custom hook that the package &lt;code&gt;serverless-hooks-plugin&lt;/code&gt; provides us&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;plugins:
  - serverless-hooks-plugin

custom:
  hooks:
    before:package:createDeploymentArtifacts:
      - npm run deploy:prepare
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2) Creating the layer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;layers:
  nodeModules:
    path: ./.serverless-layers/node-layers
    name: My-App-Node-Dependencies
    description: Node Modules &lt;span class="k"&gt;for &lt;/span&gt;My App
    compatibleRuntimes:
      - nodejs12.x
    package:
      include:
        - ./&lt;span class="k"&gt;**&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3) Make our function package individually and exclude everything&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;package:
  individually: &lt;span class="nb"&gt;true
  &lt;/span&gt;exclude:
    - ./&lt;span class="k"&gt;**&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4) Include only our handler.js in the lambda function and make use of the lambda layer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;functions:
  hello:
    handler: src/handler.hello
    layers:
      - Ref: NodeModulesLambdaLayer
    package:
      include:
        - src/handler.js        
    events:
      - http:
          path: /
          method: get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final serveless.yml will be something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;app: aws-node-rest-api
service: aws-node-rest-api

provider:
  name: aws
  runtime: nodejs12.x

plugins:
  - serverless-hooks-plugin

custom:
  hooks:
    before:package:createDeploymentArtifacts:
      - npm run deploy:prepare

layers:
  nodeModules:
    path: ./.serverless-layers/node-layers
    name: My-App-Node-Dependencies
    description: Node Modules &lt;span class="k"&gt;for &lt;/span&gt;My App
    compatibleRuntimes:
      - nodejs12.x
    package:
      include:
        - ./&lt;span class="k"&gt;**&lt;/span&gt;

package:
  individually: &lt;span class="nb"&gt;true
  &lt;/span&gt;exclude:
    - ./&lt;span class="k"&gt;**&lt;/span&gt;

functions:
  hello:
    handler: src/handler.hello
    layers:
      - Ref: NodeModulesLambdaLayer
    package:
      include:
        - src/handler.js        
    events:
      - http:
          path: /
          method: get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's deploy it again and see what happens&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; serverless deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5kzg06fz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/110d6vpngzkyzxcuwx31.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5kzg06fz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/110d6vpngzkyzxcuwx31.png" alt="AwsFunctionCodeAgain"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Woala! We can see our code again! &lt;/p&gt;

&lt;p&gt;And Where is our lambda layer? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c9L1vVMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sre3hw12wcynwn0dbtem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c9L1vVMS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sre3hw12wcynwn0dbtem.png" alt="AwsLambdaLayer"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see and the lambda function has a dependency on our new lambda layer&lt;/p&gt;

&lt;p&gt;And if we go to lambda layers we can see it's there&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pmCUhE-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix9g1an54u6ol1o3ruth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pmCUhE-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix9g1an54u6ol1o3ruth.png" alt="AwsLayers"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So with that configuration we can view always our code.&lt;/p&gt;

&lt;p&gt;Hope you found it useful as I do.&lt;/p&gt;

&lt;p&gt;I'll leave the code in this repo soon. (I've needed to reinstall macOS in my MacBook Pro, and I've lost the example. Sorry about that!)&lt;br&gt;
Repo: &lt;a href="https://github.com/cesmunoz/serverless-aws-node-layer-example"&gt;https://github.com/cesmunoz/serverless-aws-node-layer-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See you next time!!&lt;/p&gt;

&lt;p&gt;C.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>serverless</category>
      <category>aws</category>
    </item>
    <item>
      <title>Macaw Tabs jQuery Plugin for CSS Tabs</title>
      <author>Imia Hazel</author>
      <pubDate>Tue, 17 Aug 2021 16:47:24 +0000</pubDate>
      <link>https://dev.to/imiahazel/macaw-tabs-jquery-plugin-for-css-tabs-331</link>
      <guid>https://dev.to/imiahazel/macaw-tabs-jquery-plugin-for-css-tabs-331</guid>
      <description>&lt;p&gt;We are excited to launch lightweight and friendly jQuery plugin for HTML, CSS tabs. &lt;a href="https://github.com/htmlcssfreebies/macaw-tabs"&gt;Macaw Tabs&lt;/a&gt; implements the W3 &lt;a href="https://www.w3.org/TR/wai-aria-practices-1.1/#tabpanel"&gt;design patterns for tabs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aLIb235I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tixcak2ubtgvaxbjlpas.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aLIb235I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tixcak2ubtgvaxbjlpas.jpeg" alt="Macaw Tabs jQuery Plugin"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tabs are a set of layered sections of content, known as tab panels, that display one panel of content at a time. Each tab panel has an associated tab element, that when activated, displays the panel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#macaw-tabs-jquery-plugin"&gt;
  &lt;/a&gt;
  Macaw Tabs jQuery Plugin
&lt;/h2&gt;

&lt;p&gt;Here are some major features of &lt;a href="https://github.com/htmlcssfreebies/macaw-tabs"&gt;Macaw Tabs jQuery Plugin&lt;/a&gt;,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flexible HTML Structure&lt;/li&gt;
&lt;li&gt;Vertical Orientation Support&lt;/li&gt;
&lt;li&gt;Horizontal Orientation Support&lt;/li&gt;
&lt;li&gt;Tabs with Automatic Activation Support&lt;/li&gt;
&lt;li&gt;Tabs with Manual Activation Support&lt;/li&gt;
&lt;li&gt;Special Transition Class for Tab Panels&lt;/li&gt;
&lt;li&gt;Keyboard Interaction Support&lt;/li&gt;
&lt;li&gt;AI-ARIA Roles, States, and Properties Support&lt;/li&gt;
&lt;li&gt;Lot of Tabs Themes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please see the &lt;a href="https://htmlcssfreebies.com/macaw-tabs/"&gt;Macaw Tabs&lt;/a&gt; project page for Setup and Documentation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#macaw-tabs-themes"&gt;
  &lt;/a&gt;
  Macaw Tabs Themes
&lt;/h2&gt;

&lt;p&gt;We have launched some cool &lt;a href="https://htmlcssfreebies.com/tag/macaw-tabs/"&gt;CSS Tabs&lt;/a&gt; of Macaw Tabs jQuery Plugin for startup.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#macaw-simple-tabs"&gt;
  &lt;/a&gt;
  Macaw Simple Tabs
&lt;/h3&gt;

&lt;p&gt;Macaw Simple Tabs has vibrant colors. Design is enhanced with &lt;a href="https://fontawesome.com/"&gt;Font Awesome Icons&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7zvTKyyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukbvuh1fmmmzyaucc6im.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zvTKyyj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ukbvuh1fmmmzyaucc6im.jpg" alt="Macaw Simple Tabs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://htmlcssfreebies.com/macaw-simple-tabs/"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codepen.io/htmlcssfreebies/pen/abWrXBq"&gt;Playground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#macaw-silk-tabs"&gt;
  &lt;/a&gt;
  Macaw Silk Tabs
&lt;/h3&gt;

&lt;p&gt;Macaw Silk Tabs has clean look. Design is enhanced with &lt;a href="https://fonts.google.com/icons"&gt;Google Material Icons&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DoXlrsoX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1p28ytynqgl573280ds.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DoXlrsoX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1p28ytynqgl573280ds.jpeg" alt="Macaw Silk Tabs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://htmlcssfreebies.com/macaw-silk-tabs/"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codepen.io/htmlcssfreebies/pen/LYyoqVm"&gt;Playground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#macaw-power-tabs"&gt;
  &lt;/a&gt;
  Macaw Power Tabs
&lt;/h3&gt;

&lt;p&gt;Macaw Power Tabs has minimalistic interface. Design is enhanced with &lt;a href="https://fonts.google.com/icons"&gt;Google Material Icons&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9uPOnhXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3w86d17x3ngdkwov1g0h.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9uPOnhXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3w86d17x3ngdkwov1g0h.jpeg" alt="Macaw Power Tabs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://htmlcssfreebies.com/macaw-power-tabs/"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codepen.io/htmlcssfreebies/pen/eYWabxd"&gt;Playground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#macaw-fresh-tabs"&gt;
  &lt;/a&gt;
  Macaw Fresh Tabs
&lt;/h3&gt;

&lt;p&gt;Macaw Fresh Tabs has vertical orientation on both small and big displays. Design is enhanced with &lt;a href="https://fonts.google.com/icons"&gt;Google Material Icons&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e9grMJTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heb1cicei189zcyv1fow.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e9grMJTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heb1cicei189zcyv1fow.jpeg" alt="Macaw Fresh Tabs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://htmlcssfreebies.com/macaw-fresh-tabs/"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codepen.io/htmlcssfreebies/pen/qBmGLRr"&gt;Playground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#macaw-elegant-tabs"&gt;
  &lt;/a&gt;
  Macaw Elegant Tabs
&lt;/h3&gt;

&lt;p&gt;Macaw Elegant Tabs has simple yet elegant interface. Design is enhanced with &lt;a href="https://fonts.google.com/icons"&gt;Google Material Icons&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lv_n0K_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sw5rsip87cmb8ygguiru.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lv_n0K_J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sw5rsip87cmb8ygguiru.jpeg" alt="Macaw Elegant Tabs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://htmlcssfreebies.com/macaw-elegant-tabs/"&gt;Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codepen.io/htmlcssfreebies/pen/ZEKNmbj"&gt;Playground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#support-the-project"&gt;
  &lt;/a&gt;
  Support the Project
&lt;/h2&gt;

&lt;p&gt;We welcome Dev community to support the &lt;a href="https://github.com/htmlcssfreebies/macaw-tabs"&gt;Macaw Tabs&lt;/a&gt; project. You can contribute,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To improve the Macaw Tabs plugin.&lt;/li&gt;
&lt;li&gt;To add more Macaw Tabs themes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don't forget to give &lt;strong&gt;Star&lt;/strong&gt; at &lt;a href="https://github.com/htmlcssfreebies/macaw-tabs"&gt;Github Page&lt;/a&gt; :)&lt;br&gt;
Looking forward for your comments &amp;lt;3&lt;/p&gt;

</description>
      <category>css</category>
      <category>jquery</category>
      <category>responsive</category>
      <category>accessible</category>
    </item>
  </channel>
</rss>
