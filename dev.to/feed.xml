<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top Python Project Ideas: Beginners Level [2022]</title>
      <author>Naem Azam </author>
      <pubDate>Sun, 23 Jan 2022 04:00:48 +0000</pubDate>
      <link>https://dev.to/naemazam/top-python-project-ideas-beginners-level-2022-jba</link>
      <guid>https://dev.to/naemazam/top-python-project-ideas-beginners-level-2022-jba</guid>
      <description>&lt;h2&gt;
  &lt;a href="#python-is-one-of-the-most-popular-programming-languages-currently-it-looks-like-this-trend-is-about-to-continue-in-2022-and-beyond-so-if-you-are-a-python-beginner-the-best-thing-you-can-do-is-work-on-some-realtime-python-project-ideas"&gt;
  &lt;/a&gt;
  Python is one of the most popular programming languages currently. It looks like this trend is about to continue in 2022 and beyond. So, if you are a Python beginner, the best thing you can do is work on some real-time Python project ideas.
&lt;/h2&gt;

&lt;p&gt;But first, let’s address the more pertinent question that must be lurking in your mind: &lt;strong&gt;why to build Python projects?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When it comes to careers in software development, it is a must for aspiring developers to work on their own projects. Developing real-world projects is the best way to hone your skills and materialize your theoretical knowledge into practical experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you work on live projects, it will help:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;To boost your confidence&lt;/strong&gt;  – As you work with real tools and technologies, you will become more confident about your strengths while also identifying your weak points.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;To experiment&lt;/strong&gt;  – You will need to acquaint yourself with new tools and technologies while working on a python project. The more you learn about cutting-edge development tools, environments, libraries, the broader will be your scope for experimentation with your projects. The more you experiment with different  &lt;strong&gt;python project ideas&lt;/strong&gt;, the more knowledge you gain.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;To know the nitty-gritty of SDLC&lt;/strong&gt;  – When you develop a project from scratch, you will gain a deeper understanding of how the software development life cycle functions. With time you will learn how to plan before writing the code, execute the code, manage the testing process, fix bugs, deploy the code, and also update your software product from time to time.&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;To master the concepts of programming&lt;/strong&gt;  – One of the biggest advantages of building real-world projects is that with continuous practice, you will master the concepts and patterns of programming in different languages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#top-10-projects-idea"&gt;
  &lt;/a&gt;
  Top 10 Projects Idea
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-mad-libs-generator"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Mad Libs Generator&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;One of the best ideas to start experimenting you hands-on  &lt;strong&gt;python projects for students&lt;/strong&gt;  is working on Mad Libs Generator. This is the perfect project for beginners who are just starting out with software development. Primarily focused on strings, variables, and concatenation, this project will teach you how to manipulate user-inputted data. The program design is such that it will ask users to enter a series of inputs that will be considered as a Mad Lib. &lt;/p&gt;

&lt;p&gt;The input could be anything, an adjective, a noun, a pronoun, etc. Once all the inputs are entered, the application will take the data and arrange the inputs into a story template form. Sound fun, right?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-number-guessing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Number Guessing&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is one of the  &lt;strong&gt;simple python projects&lt;/strong&gt;  yet an exciting one. You can even call it a mini-game. Make a program in which the computer randomly chooses a number between 1 to 10, 1 to 100, or any range. Then give users a hint to guess the number. Every time the user guesses wrong, he gets another clue, and his score gets reduced. The clue can be multiples, divisible, greater or smaller, or a combination of all.&lt;br&gt;
You will also need functions to compare the inputted number with the guessed number, to compute the difference between the two, and to check whether an actual number was inputted or not in this python project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-textbased-adventure-game"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Text-based Adventure Game&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is a basic version of the Adventure game. It is completely text-based. In this version of the game, users can move about through different rooms within a single setting, and based on the user input, it will provide descriptions for each room. This is one of the interesting python projects.&lt;br&gt;
Movement direction is crucial here – you must create walls and set the directions in which the users can move through the rooms, set movement restrictions, and also include a tracker that can track how far a user has walked or moved in the game. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-dice-rolling-simulator"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Dice Rolling Simulator&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;As the name of the program suggests, we will be imitating a rolling dice. This is one of the interesting python projects and will generate a random number each dice the program runs, and the users can use the dice repeatedly for as long as he wants. When the user rolls the dice, the program will generate a random number between 1 and 6 (as on a standard dice).&lt;/p&gt;

&lt;p&gt;The number will then be displayed to the user. It will also ask users if they would like to roll the dice again. The program should also include a function that can randomly grab a number within 1 to 6 and print it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-hangman"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Hangman&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is more of a “guess the word” game. The core concepts you have to use while developing this project are variables, random, integer, strings, char, input and output, and boolean. In the game, users have to enter letter guesses, and each user will have a limited number of guesses (a counter variable is needed for limiting the guesses). This is one of the interesting python projects to begin with.&lt;/p&gt;

&lt;p&gt;You can create a pre-organized list of words that users can grab words from. Also, you must include specific functions to check whether or not a user has entered a single letter or if the input letter is in the hidden word, to if the user has actually inputted a single letter, and to print the correct outcomes (letters).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-contact-book"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. Contact Book&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is one of the excellent python projects for beginners. Everyone uses a contact book to save contact details, including name, address, phone number, and even email address. This is a command-line project where you will design a contact book application that users can use to save and find contact details. The application should also allow users to update contact information, delete contacts, and list saved contacts. The SQLite database is the ideal platform for saving contacts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-email-slicer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Email Slicer&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is one of the convenient python projects that has a lot of use in the future. The program helps get you the username and domain name from an email address. You can even customize the application and send a message to the host with this information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-binary-search-algorithm"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. Binary search algorithm&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Have you ever heard the proverb, “finding a needle in a haystack.” This program is designed to do just that- by using a binary search algorithm. You can create a list of random numbers between 0 to 100, with every succeeding number having a difference of 2 between them. When the user inputs a random number, the program will check if that number is included in the list. It will do so by creating two halves of the list. If the program finds the number in the first half of the list, it will eliminate the other half and vice versa. The search will continue until the program finds the number input of the user or until the subarray size becomes 0 (this means that the number is not in the list). This python project idea will help you create an implement an algorithm that searches for an element in a list.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-desktop-notifier-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;9. Desktop Notifier App&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Have you ever wondered how notifications work? This small python project idea will throw some light on this. The desktop notifier apps run on your system and send you a piece of information after a fixed interval of time. We suggest you use libraries such as notify2, requests, etc. to build such a program.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-python-story-generator"&gt;
  &lt;/a&gt;
  &lt;strong&gt;10. Python Story Generator&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is a fun but exciting python project which will work wonders with kids. In a nutshell, the program will ask users for inputs such as the name of a place, action, etc. and then build a story around the data. The story will be the same always but with little variation with the input.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-me-on-github-to-get-all-project-free"&gt;
  &lt;/a&gt;
  Follow Me On &lt;a href="https://github.com/naemazam"&gt;GitHub&lt;/a&gt; To Get All Project Free!!!!
&lt;/h2&gt;

</description>
      <category>python</category>
      <category>project</category>
      <category>beginners</category>
      <category>naemazam</category>
    </item>
    <item>
      <title>How I Make a Dashboard for Our Game Studio Faster than a Portfolio Website</title>
      <author>manushifva</author>
      <pubDate>Sun, 23 Jan 2022 02:56:18 +0000</pubDate>
      <link>https://dev.to/sandbottle/how-i-make-a-dashboard-for-our-game-studio-faster-than-a-portfolio-website-16p6</link>
      <guid>https://dev.to/sandbottle/how-i-make-a-dashboard-for-our-game-studio-faster-than-a-portfolio-website-16p6</guid>
      <description>&lt;p&gt;Yes. This is real. I compare our users' dashboard with a &lt;a href="https://github.com/mmgolden/express-portfolio"&gt;portfolio website&lt;/a&gt; and our website is 40% faster. Here's a small lighthouse test that I perform: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxeOnV-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdz8uv76cssi6ipd8n5k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxeOnV-C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fdz8uv76cssi6ipd8n5k.png" alt="Portfolio website by Melinda Golden" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2cyojClj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm2by33ttivvs38fa6by.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2cyojClj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bm2by33ttivvs38fa6by.png" alt="Our users dashboard" width="880" height="429"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Small note: Both tests are run in localhost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, let me share how we do this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-using-fewer-resources"&gt;
  &lt;/a&gt;
  1. Using fewer resources.
&lt;/h2&gt;

&lt;p&gt;Of course, we all know this. To load faster, you need to use fewer resources. But, this is not easy as said, especially if you using some library or framework that embeds you a lot of unused CSS or Javascript.&lt;/p&gt;

&lt;p&gt;To make this UI, I'm using modified &lt;a href="https://github.com/manushifva/pasta-css"&gt;Pasta CSS&lt;/a&gt;*, Bootstrap-like lightweight library. &lt;/p&gt;

&lt;p&gt;I also use customized icons from &lt;a href="https://fontello.com"&gt;fontello.com&lt;/a&gt;. So, I can pick what icons I would use, without embedding a whole of them.&lt;/p&gt;

&lt;p&gt;Don't forget about Javascript. We using a minified version of JQuery. JQuery makes my code slimmer. It's also helped me code faster, since it has the build-in function for some tasks, like toggling something, finding the nearest element, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-using-prerendered-content"&gt;
  &lt;/a&gt;
  2. Using pre-rendered content.
&lt;/h2&gt;

&lt;p&gt;Rather than render the page content after loading the page, I'm using this pre-rendered content. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sN7Byhwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odh0pgdfag61080pw6jc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sN7Byhwk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/odh0pgdfag61080pw6jc.png" alt="Pre-rendered area" width="880" height="403"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At first, I render the main Html file. Then, I render the pre-rendered content. I'm also using &lt;a href="//swup.js.org"&gt;Swup.js&lt;/a&gt; for swapping pages smoothly. Swup also helps us render fewer things.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-using-koa"&gt;
  &lt;/a&gt;
  3. Using Koa.
&lt;/h2&gt;

&lt;p&gt;Koa.js is one of the most popular Node.js server libraries. Koa was developed by developers who develop Express. Koa is faster than Express, since it developed to be more modular rather than embedding. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-using-fewer-images-and-using-lazy-load"&gt;
  &lt;/a&gt;
  4. Using fewer images and using lazy load.
&lt;/h2&gt;

&lt;p&gt;These are the final tips. Images are hard and slow to load, especially the larger ones. Using lazy load can help the web render faster, because the lazy load pending the load process of images, and load it after the whole page is successfully loaded. &lt;/p&gt;

&lt;p&gt;That's it. Hopefully, this can help you with speeding up your website too ⚡.&lt;/p&gt;

&lt;p&gt;Disclaimer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pasta CSS was made by me.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>story</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>Create a virtual environment for Python Projects</title>
      <author>Elechi George</author>
      <pubDate>Sun, 23 Jan 2022 01:58:58 +0000</pubDate>
      <link>https://dev.to/elechipro/create-a-virtual-environment-for-python-projects-284d</link>
      <guid>https://dev.to/elechipro/create-a-virtual-environment-for-python-projects-284d</guid>
      <description>&lt;p&gt;Hello there, in this short note I'll show you how to create a python virtual environment for a new project and walk you through the process of resolving some common conflicts you might get while creating a virtual environment for your projects. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-things-first-you-will-need-to-make-sure-python-and-pip-are-installed-properly"&gt;
  &lt;/a&gt;
  First things first, you will need to make sure &lt;strong&gt;python&lt;/strong&gt; and &lt;strong&gt;pip&lt;/strong&gt; are installed properly
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#to-check-this-just-run-the-stuff-below-in-your-favourite-terminal"&gt;
  &lt;/a&gt;
  to check this just run the stuff below in your &lt;em&gt;favourite&lt;/em&gt; terminal
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;  $&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;python &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#if-you-an-error-like-the-one-below-it-probably-because-you-dont-have-python-correctly-installed-or-you-it-havent-be-added-to-your-system-environment-variables-path"&gt;
  &lt;/a&gt;
  if you an error like the one below, it probably because you don't have python correctly installed or you it haven't be added to your system &lt;strong&gt;environment variables path&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---1AvTXAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpmiqhvlzeje2o4xga57.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---1AvTXAY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpmiqhvlzeje2o4xga57.png" alt="Image showing how to setup environment variable on windows" width="614" height="111"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heres-how-to-add-it-yourself"&gt;
  &lt;/a&gt;
  Here's how to add it yourself
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#type-edit-system-environment-variable-follow-the-images-below-to-get-it-resolved"&gt;
  &lt;/a&gt;
  type "edit system environment variable" - follow the images below to get it resolved
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#once-you-type-that-stuff-from-before-it-should-land-you-here-look-to-the-bottom-where-it-says-environment-variable-click-it-"&gt;
  &lt;/a&gt;
  Once you type that stuff from before, it should land you here, look to the bottom where it says environment variable CLICK IT !
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cOcZdOZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxnlgv5yu75staekmqoz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cOcZdOZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxnlgv5yu75staekmqoz.png" alt="Image showing how to setup environment variable on windows" width="538" height="556"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That button should land you here, DOUBLE CLICK where that blue color stuff is on [path] just like the image below &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2d8xZi31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpdbd6it5hhr0iznmc1q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2d8xZi31--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xpdbd6it5hhr0iznmc1q.png" alt="Image showing how to setup environment variable on windows" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That double clicking should land you here, make sure yours is like mine in the picture below [especially the first two]&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MQNKx7aE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76himc8nmkxnxteb86ts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQNKx7aE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/76himc8nmkxnxteb86ts.png" alt="Image showing how to setup environment variable on windows" width="779" height="694"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#okay-great-once-you-finish-editing-click-save-and-go-back-to-this-area-and-double-click-where-my-cursor-is-on-the-image-below-that-has-a-blue-background"&gt;
  &lt;/a&gt;
  Okay great, once you finish editing "click save" and go back to this area, and DOUBLE CLICK where my cursor is on the image below that has a blue background
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YT4HZhzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wi4xe0ft4ytzbx0st91q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YT4HZhzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wi4xe0ft4ytzbx0st91q.png" alt="Image showing how to setup environment variable on windows" width="801" height="741"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It should land you here, make sure yours looks like mine, especially the last two variables &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YZkBer7J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbc3azf9cy1ym8q1r73o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YZkBer7J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xbc3azf9cy1ym8q1r73o.png" alt="Image showing how to setup environment variable on windows" width="880" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;when you are done, click save until the boxes disappear, you shouldn't be having error with python and pipenv &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#moving-farward-and-installing-pipenv"&gt;
  &lt;/a&gt;
  MOVING FARWARD and Installing Pipenv
&lt;/h2&gt;

&lt;p&gt;Pipenv manages dependencies on a per-project basis. To install packages, change into your project’s directory (or just an empty directory) and run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;  $&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;code_folder
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;  $&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;pipenv &lt;span class="nt"&gt;--user&lt;/span&gt; 
&lt;span class="go"&gt;
&lt;/span&gt;&lt;span class="gp"&gt;  $&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pipenv &lt;span class="nb"&gt;install &lt;/span&gt;requests
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it does it what it does in creating a virtual environment for your project and out out some that looks like the image below...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9f3OGhe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gifgjqf0nwh855g1szyc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9f3OGhe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gifgjqf0nwh855g1szyc.png" alt="Image success on creating a virtual environment" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-should-be-all-set-if-you-want-to-use-virtualenv-instead-of-pipenv-all-you-need-to-do-is-run-the-commands-below"&gt;
  &lt;/a&gt;
  You should be all set, if you want to use virtualenv instead of pipenv - all you need to do is run the commands below:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;  $&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;virtualenv &lt;span class="nt"&gt;--user&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then to use it, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;  $&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;project_folder
&lt;span class="gp"&gt;  $&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;virtualenv venv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to activate it run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;  $&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#in-summary-to-setup-a-virtual-environment"&gt;
  &lt;/a&gt;
  In summary to setup a virtual environment
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;install python&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;install &lt;code&gt;pipenv&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;change the environment variables to point accordingly&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;then run &lt;code&gt;pipenv install requests&lt;/code&gt; on the folder you want to create your python project&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cheers-if-you-have-questions-let-me-know-in-the-comments"&gt;
  &lt;/a&gt;
  CHEERS, If you have questions, let me know in the comments
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#thanks"&gt;
  &lt;/a&gt;
  Thanks
&lt;/h2&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>beginners</category>
      <category>elechinotes</category>
    </item>
    <item>
      <title>VS Code Extension that Generates Documentation Using AI</title>
      <author>Hahnbee Lee</author>
      <pubDate>Sun, 23 Jan 2022 00:18:01 +0000</pubDate>
      <link>https://dev.to/hahnbeelee/vs-code-extension-that-generates-documentation-using-ai-1cc3</link>
      <guid>https://dev.to/hahnbeelee/vs-code-extension-that-generates-documentation-using-ai-1cc3</guid>
      <description>&lt;p&gt;There's this fairly new extension on the VS Code marketplace called &lt;a href="https://marketplace.visualstudio.com/items?itemName=mintlify.document"&gt;AI Doc Writer for JavaScript, TypeScript, and Python&lt;/a&gt;. Here's what the README says:&lt;/p&gt;

&lt;p&gt;Step 1 Highlight code &lt;br&gt;
Step 2 Click on the Write Docs button (or hit ⌘ + .)&lt;/p&gt;

&lt;p&gt;So, I put it to the test to see how good it really is.&lt;/p&gt;

&lt;p&gt;Here's how it fared on some JS code:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kho3WGRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vohg3i7uha1bwji3cls.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kho3WGRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1vohg3i7uha1bwji3cls.gif" alt="Image description" width="800" height="444"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
 * return a set of all the subjects in the fullCoursesArray.
 * @returns A set of all the subjects.
 */
function getAllSubjects(): ReadonlySet&amp;lt;string&amp;gt; {
  const set = new Set&amp;lt;string&amp;gt;();
  fullCoursesArray.forEach(it =&amp;gt; set.add(it.subject));
  return set;
}

/**
 * For each subject, if it has a color, do nothing. Otherwise, give it a random color from the color
set.
 * @param subjectColors - The subject colors that are currently in use.
 * @returns A new object with the same keys as the original object, but with new values.
 */
export function allocateAllSubjectColor(
  subjectColors: Record&amp;lt;string, string&amp;gt;
): Record&amp;lt;string, string&amp;gt; {
  const subjectsColorsCopy = { ...subjectColors };
  getAllSubjects().forEach(subject =&amp;gt; {
    if (subjectsColorsCopy[subject]) return;
    subjectsColorsCopy[subject] = coursesColorSet[
      Math.floor(Math.random() * coursesColorSet.length)
    ].hex.substring(1);
  });
  return subjectsColorsCopy;
}

/**
 * Update the subjectColors object with the new color for the given subject.
 * @param subjectColors - The current subject colors.
 * @param {string} color - The color to be applied to the subject.
 * @param {string} code - The subject code of the subject to update.
 * @returns A new object with the updated color.
 */
export function updateSubjectColor(
  subjectColors: Record&amp;lt;string, string&amp;gt;,
  color: string,
  code: string
): Record&amp;lt;string, string&amp;gt; {
  const subjectsColorsCopy = { ...subjectColors };
  getAllSubjects().forEach(subject =&amp;gt; {
    if (subject === code) {
      subjectsColorsCopy[subject] = color;
    }
  });
  return subjectsColorsCopy;
}

/**
 * When the user clicks outside of the element, the `clickOutside` event handler is called.
 */
export const clickOutside = {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  beforeMount(el: any, binding: any): void {
    el.clickOutsideEvent = (event: Event) =&amp;gt; {
      if (!(el === event.target || el.contains(event.target))) {
        binding.value(event, el);
      }
    };
    document.body.addEventListener('click', el.clickOutsideEvent);
  },
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  unmounted(el: any): void {
    document.body.removeEventListener('click', el.clickOutsideEvent);
  },
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I also tried it on some Python code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def collect_dataset():
    '''
    The function is used to collect the data from the github repository.


    :return: A matrix of the dataset.
    '''
    response = requests.get(
        "https://raw.githubusercontent.com/yashLadha/"
        + "The_Math_of_Intelligence/master/Week1/ADRvs"
        + "Rating.csv"
    )
    lines = response.text.splitlines()
    data = []
    for item in lines:
        item = item.split(",")
        data.append(item)
    data.pop(0)  # This is for removing the labels from the list
    dataset = np.matrix(data)
    return dataset


def run_steep_gradient_descent(data_x, data_y, len_data, alpha, theta):
    '''
    This function runs the gradient descent algorithm.

    :param data_x: the data matrix
    :param data_y: the actual y values
    :param len_data: the number of data points
    :param alpha: learning rate
    :param theta: The initial value of theta
    :return: Theta
    '''
    n = len_data

    prod = np.dot(theta, data_x.transpose())
    prod -= data_y.transpose()
    sum_grad = np.dot(prod, data_x)
    theta = theta - (alpha / n) * sum_grad
    return theta


def sum_of_square_error(data_x, data_y, len_data, theta):
    '''
    It calculates the sum of squared error for the given data and the given theta.

    :param data_x: the data matrix
    :param data_y: the y values of the data
    :param len_data: the number of data points
    :param theta: theta vector
    :return: The sum of the squares of the errors.
    '''
    prod = np.dot(theta, data_x.transpose())
    prod -= data_y.transpose()
    sum_elem = np.sum(np.square(prod))
    error = sum_elem / (2 * len_data)
    return error


def run_linear_regression(data_x, data_y):
    '''
    Runs gradient descent on the data and returns the final theta vector.

    :param data_x: The training data
    :param data_y: The dependent variable
    :return: Theta
    '''
    iterations = 100000
    alpha = 0.0001550

    no_features = data_x.shape[1]
    len_data = data_x.shape[0] - 1

    theta = np.zeros((1, no_features))

    for i in range(0, iterations):
        theta = run_steep_gradient_descent(
            data_x, data_y, len_data, alpha, theta)
        error = sum_of_square_error(data_x, data_y, len_data, theta)
        print("At Iteration %d - Error is %.5f " % (i + 1, error))

    return theta
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What do you guys think?&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>python</category>
      <category>productivity</category>
      <category>vscode</category>
    </item>
    <item>
      <title>100 Languages Speedrun: Episode 66: Xonsh</title>
      <author>Tomasz Wegrzanowski</author>
      <pubDate>Sun, 23 Jan 2022 00:06:37 +0000</pubDate>
      <link>https://dev.to/taw/100-languages-speedrun-episode-66-xonsh-5ade</link>
      <guid>https://dev.to/taw/100-languages-speedrun-episode-66-xonsh-5ade</guid>
      <description>&lt;p&gt;Unix shells were great for interactive use, but terrible for scripting, where you really should use a language like Python or Ruby.&lt;/p&gt;

&lt;p&gt;There's been so many attempts at creating a better shell scripting language, like &lt;a href="https://dev.to/taw/100-languages-speedrun-episode-48-elvish-3k6l"&gt;Elvish&lt;/a&gt;(&lt;a href="https://taw.hashnode.dev/100-languages-speedrun-episode-48-elvish"&gt;https://taw.hashnode.dev/100-languages-speedrun-episode-48-elvish&lt;/a&gt;) I recently covered.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://xon.sh/"&gt;Xonsh&lt;/a&gt; decided to solve this problem once and for all by going "fuck it, Python is shell".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fizzbuzz"&gt;
  &lt;/a&gt;
  FizzBuzz
&lt;/h3&gt;

&lt;p&gt;As Python in shell now, you can do this in Xonsh:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env xonsh
&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"FizzBuzz"&lt;/span&gt;
  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Fizz"&lt;/span&gt;
  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Buzz"&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fizzbuzz&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's not much point doing the usual examples, as you can just do pretty much any Python code, and it will generally just work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shell"&gt;
  &lt;/a&gt;
  Shell
&lt;/h3&gt;

&lt;p&gt;When not used as Python, you have full shell environment too, with some reasonable autocomplete builtin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git &amp;lt;TAB&amp;gt;
    add             commit          maintenance     rm
    am              config          master          send-email
    amend           describe        merge           shortlog
    apply           diff            mergetool       show
    archive         difftool        mv              show-branch
    bisect          fetch           notes           sparse-checkout
    blame           format-patch    prune           st
    br              fpush           pull            stage
    branch          fsck            push            stash
    bundle          gc              range-diff      status
    cdiff           gitk            rebase          submodule
    checkout        grep            reflog          switch
    cherry          gui             remote          sx
    cherry-pick     help            repack          tag
    ci              init            replace         unstage
    citool          instaweb        request-pull    up
    clean           latexdiff       reset           wdiff
    clone           log             restore         whatchanged
    co              ls              revert          worktree
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can get some help with &lt;a href="https://www.powerlanguage.co.uk/wordle/"&gt;Wordle&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cat /usr/share/dict/words | pcregrep '^[^raton]{2}nce$'
bunce
dunce
fence
hence
mince
pence
sence
since
Vince
wince
yince
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And so on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-it-work"&gt;
  &lt;/a&gt;
  How does it work?
&lt;/h3&gt;

&lt;p&gt;Whenever you type anything, Xonsh checks if the code looks like Python or like Shell. And so it decides what to do.&lt;/p&gt;

&lt;p&gt;You can explicitly request shell mode with &lt;code&gt;$()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ len($(seq 1 20))
51
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or explicitly request Python mode with &lt;code&gt;@()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ say @(60+9)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a rare case where Python has an advantage over Ruby, as Ruby's flexible syntax would actually interfere with this autodetection.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-does-not-work"&gt;
  &lt;/a&gt;
  What does not work?
&lt;/h3&gt;

&lt;p&gt;Xonsh tries its best, but there's enough overlap between Python and Shell syntax that sometimes you need to disambiguate.&lt;/p&gt;

&lt;p&gt;For example this doesn't work:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ LC_ALL=ru_RU date
xonsh: For full traceback set: $XONSH_SHOW_TRACEBACK = True
xonsh: subprocess mode: command not found: LC_ALL=ru_RU
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Fortunately the alternative in this case isn't too bad:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ $LC_ALL='ru_RU' date
суббота, 22 января 2022 г. 23:23:01 (GMT)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Unfortunately some shell features don't seem to have any equivalent. One that I use a lot is redirect-from-command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ diff &amp;lt;(fizzbuzz.scala) &amp;lt;(fizzbuzz.cobol)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Xonsh comes with &lt;a href="https://xon.sh/bash_to_xsh.html"&gt;Bash to Xonsh Translation Guide&lt;/a&gt;, but it only covers basics. I really wished they extended it to more advanced examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cat-facts"&gt;
  &lt;/a&gt;
  Cat Facts
&lt;/h3&gt;

&lt;p&gt;You can fix shell and Python in the same script without much trouble:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env xonsh
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="s"&gt;"https://cat-fact.herokuapp.com/facts"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fact&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./catfacts.xsh
Cats make about 100 different sounds. Dogs make only about 10.
Domestic cats spend about 70 percent of the day sleeping and 15 percent of the day grooming.
I don't know anything about cats.
The technical term for a cat’s hairball is a bezoar.
Cats are the most popular pet in the United States: There are 88 million pet cats and 74 million dogs.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#sigpipe"&gt;
  &lt;/a&gt;
  SIGPIPE
&lt;/h3&gt;

&lt;p&gt;Unfortunately this is completely broken in Xonsh. This is what we'd expect:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ seq 1 1000000 | head -n 5
1
2
3
4
5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we write this Python/Xonsh script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#!/usr/bin/env xonsh
&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000001&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ python3 numbers.xsh | head -n 5
1
2
3
4
5
Traceback (most recent call last):
  File "/Users/taw/100-languages-speedrun/episode-66-xonsh/numbers.xsh", line 4, in &amp;lt;module&amp;gt;
    print(i)
BrokenPipeError: [Errno 32] Broken pipe
Exception ignored in: &amp;lt;_io.TextIOWrapper name='&amp;lt;stdout&amp;gt;' mode='w' encoding='utf-8'&amp;gt;
BrokenPipeError: [Errno 32] Broken pipe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Xonsh should absolutely set up SIGPIPE handlers in its scripts to support this, as this is extremely basic shell programming pattern. It does not (and the error message is even worse). For as shell, I consider this a bug:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ xonsh numbers.xsh | head -n 5
1
2
3
4
5
Traceback (most recent call last):
  File "/usr/local/bin/xonsh", line 8, in &amp;lt;module&amp;gt;
    sys.exit(main())
  File "/usr/local/Cellar/xonsh/0.11.0/libexec/lib/python3.10/site-packages/xonsh/__amalgam__.py", line 21799, in main
    _failback_to_other_shells(args, err)
  File "/usr/local/Cellar/xonsh/0.11.0/libexec/lib/python3.10/site-packages/xonsh/__amalgam__.py", line 21746, in _failback_to_other_shells
    raise err
  File "/usr/local/Cellar/xonsh/0.11.0/libexec/lib/python3.10/site-packages/xonsh/__amalgam__.py", line 21797, in main
    sys.exit(main_xonsh(args))
  File "/usr/local/Cellar/xonsh/0.11.0/libexec/lib/python3.10/site-packages/xonsh/__amalgam__.py", line 21853, in main_xonsh
    run_script_with_cache(
  File "/usr/local/Cellar/xonsh/0.11.0/libexec/lib/python3.10/site-packages/xonsh/__amalgam__.py", line 3662, in run_script_with_cache
    run_compiled_code(ccode, glb, loc, mode)
  File "/usr/local/Cellar/xonsh/0.11.0/libexec/lib/python3.10/site-packages/xonsh/__amalgam__.py", line 3563, in run_compiled_code
    func(code, glb, loc)
  File "./numbers.xsh", line 4, in &amp;lt;module&amp;gt;
    print(i)
BrokenPipeError: [Errno 32] Broken pipe
Exception ignored in: &amp;lt;_io.TextIOWrapper name='&amp;lt;stdout&amp;gt;' mode='w' encoding='utf-8'&amp;gt;
BrokenPipeError: [Errno 32] Broken pipe
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#should-you-use-xonsh"&gt;
  &lt;/a&gt;
  Should you use Xonsh?
&lt;/h3&gt;

&lt;p&gt;Of the new shells I tried, I like Xonsh a lot more than Elvish. It works out of the box a lot better, with features like Ctrl-A / Ctrl-E, git completion etc. just working. The end goal of full support for Python is also much more ambitious than what Elvish is aiming for, and the learning curve is lower as you presumably already know some Python and Shell, so you'll just need a few exceptions Xonsh had to make to make them work together, not a whole new language.&lt;/p&gt;

&lt;p&gt;I don't think Xonsh is ready to recommend it for serious use, but I'm really tempted to give it a go for a few weeks as my primary shell, and that's not something I felt about any shell in a long while. I expect a lot of early adopter pain if I go for it, but it's not like that ever stopped me.&lt;/p&gt;

&lt;p&gt;Just the two biggest issues I ran into - no equivalent of &lt;code&gt;&amp;lt;(...)&lt;/code&gt; and broken SIGPIPE - really stop it from being an acceptable shell now, so I hope they both get fixed soon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun"&gt;All code examples for the series will be in this repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/taw/100-languages-speedrun/tree/master/episode-66-xonsh"&gt;Code for the Xonsh episode is available here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>xonsh</category>
      <category>unix</category>
      <category>shell</category>
      <category>python</category>
    </item>
    <item>
      <title>15 Books I Loved Reading in 2021</title>
      <author>Ho Duc Hieu</author>
      <pubDate>Sat, 22 Jan 2022 23:40:52 +0000</pubDate>
      <link>https://dev.to/hoduchieu01/15-books-i-loved-reading-in-2021-4521</link>
      <guid>https://dev.to/hoduchieu01/15-books-i-loved-reading-in-2021-4521</guid>
      <description>&lt;p&gt;I read a lot of great books this year but these were some of my favorites.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/PKfQgGRW"&gt;Zero to One: Notes on Startups, or How to Build the Future (Không Đến Một)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/A8BTfjzy"&gt;Lee Kun Hee — Những Lựa Chọn Chiến Lược Và Kỳ Tích Samsung&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/b8hC9xms"&gt;Pour Your Heart into It (Dốc Hết Trái Tim — Cách Starbucks Xây Dựng Công Ty Bằng Từng Tách Cà Phê)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/uMRUBeyA"&gt;Hooked: How to Build Habit-Forming Products (Dẫn Dắt Người Dùng)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/Zm1xjA78"&gt;Jeff Bezos and the Age of Amazon (Jeff Bezos Và Kỷ Nguyên Amazon)&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/z1CUXNce"&gt;Elon Musk: Tesla, SpaceX, and the Quest for a Fantastic Future (Elon Musk: Tesla, Spacex Và Sứ Mệnh Tìm Kiếm Một Tương Lai Ngoài Sức Tưởng Tượng)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/AGY4xsjE"&gt;The Warren Buffett Way: Investment Strategies of the World's Greatest Investor (Phương Pháp Đầu Tư Warren Buffett)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/Ym6z7bBn"&gt;Buffett: The Making of an American Capitalist (Warren Buffett - Quá Trình Hình Thành Một Nhà Tư Bản Mỹ)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/mthmp9zv"&gt;Think &amp;amp; Grow Rich: Napoleon Hill's Famous 13 Principles (Think And Grow Rich - 13 Nguyên Tắc Nghĩ Giàu, Làm Giàu)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/7TBHCaQX"&gt;Mindset: The New Psychology of Success (Tâm Lý Học Thành Công)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/uvJqVHaN"&gt;Bushido: The Soul of Japan (Võ Sĩ Đạo - Linh Hồn Nhật Bản)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/8sxs4BN4"&gt;Jerome Becomes a Genius (Trí tuệ do thái)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/5UUbkZ9B"&gt;Sapiens: A Brief History of Humankind  (Sapiens: Lược Sử Loài Người)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/DwWrE7xq"&gt;Homo Deus: A Brief History of Tomorrow (Homo Deus: Lược Sử Tương Lai)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://shorten.asia/KC9hPy2G"&gt;21 Lessons for the 21st Century (21 Bài Học Cho Thế Kỷ 21)&lt;/a&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>books</category>
      <category>startup</category>
      <category>technology</category>
      <category>investment</category>
    </item>
    <item>
      <title>React local development and testing mocking with msw and mswjs/data</title>
      <author>Jerico Pingul</author>
      <pubDate>Sat, 22 Jan 2022 23:35:03 +0000</pubDate>
      <link>https://dev.to/jericopingul/react-local-development-and-testing-mocking-with-msw-and-mswjsdata-obl</link>
      <guid>https://dev.to/jericopingul/react-local-development-and-testing-mocking-with-msw-and-mswjsdata-obl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;Recently, I found myself needing to mock CRUD operations from an API. At that time, the API was being developed by another engineer. We agreed on the API specs which allowed me to progress on building the UI.&lt;/p&gt;

&lt;p&gt;During development, the mocked APIs are useful to build to mock the actual API implementation. &lt;/p&gt;

&lt;p&gt;During testing, it is also valuable to be able to test the actual user interactions. There are amazing blog posts by Kent C. Dodds (author of &lt;code&gt;@testing-library/react&lt;/code&gt;) on &lt;a href="https://kentcdodds.com/blog/testing-implementation-details#implementation-detail-freetesting"&gt;avoiding testing implementation details&lt;/a&gt; and mocking the actual &lt;a href="https://kentcdodds.com/blog/stop-mocking-fetch#example"&gt;API over mocking fetch&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this article, we will go though the approach I went to building this mock server using &lt;code&gt;msw&lt;/code&gt; by building a simple pet dog CRUD application, that has the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;List all dogs&lt;/li&gt;
&lt;li&gt;Create a dog&lt;/li&gt;
&lt;li&gt;Update a dog&lt;/li&gt;
&lt;li&gt;Delete a dog&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, data can be stored in-memory database provided by a standalone data library &lt;code&gt;msw/datajs&lt;/code&gt;. This provides the capabilities of describing our data, persisting them in-memory and read/write operations. We will explore writing REST API handlers backed by the data library methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;In this article, l will be building a simple CRUD React application. To help quickly bootstrap my application I will be using the &lt;code&gt;vitejs&lt;/code&gt; &lt;code&gt;react-ts&lt;/code&gt; template and Chakra UI components. To help simplify and abstract our data-fetching and manage server state, &lt;code&gt;react-query&lt;/code&gt; will be used.&lt;/p&gt;

&lt;p&gt;For this demo, we will need to install the &lt;code&gt;msw&lt;/code&gt; libraries and a mock generator &lt;code&gt;faker&lt;/code&gt;. At the time of writing,  the latest version of &lt;code&gt;faker&lt;/code&gt; has “&lt;a href="https://www.youtube.com/watch?v=R6S-b_k-ZKY"&gt;endgamed&lt;/a&gt;”. For this post, we’ll use version 5.5.3, which still works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;msw&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;mswjs&lt;/span&gt;&lt;span class="sr"&gt;/dat&lt;/span&gt;&lt;span class="err"&gt;a
&lt;/span&gt;&lt;span class="nx"&gt;yarn&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;faker&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;5.3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#data-model"&gt;
  &lt;/a&gt;
  Data model
&lt;/h2&gt;

&lt;p&gt;Models are blueprint of data and entities are instances of models. Each model requires a primary key that is a unique ID in a traditional database.&lt;/p&gt;

&lt;p&gt;Here, we define our dog model. Each property in the model definition has an initializer that seeds a value and infers the type. Each model must have a primary key that is a unique ID, that we may be familiar with in traditional databases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@mswjs/data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;faker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;faker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;modelDictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;primaryKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;faker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;datatype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;faker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;helpers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;randomize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BREEDS&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;faker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;datatype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;faker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lorem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;faker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;faker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;modelDictionary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#seeding-data"&gt;
  &lt;/a&gt;
  Seeding data
&lt;/h2&gt;

&lt;p&gt;Once the database is created, we can seed it with data. Properties that aren’t set in the &lt;code&gt;.create&lt;/code&gt; method will be resolved by the model dictionary definition.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;seedDb&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jerico&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;maltese&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jerry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;breed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pug&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#request-handlers"&gt;
  &lt;/a&gt;
  Request handlers
&lt;/h2&gt;

&lt;p&gt;These are functions that will mock the API requests from our app. In this app, we will be using the &lt;code&gt;rest&lt;/code&gt; handlers to mock our REST API. More information on the syntax can be found in the &lt;a href="https://mswjs.io/docs/basics/request-matching#rest-api"&gt;msw docs&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DefaultRequestBody&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;PathParams&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Dog&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(
    '/api/dogs',
    (_req, res, ctx) =&amp;gt; &lt;span class="si"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;
    &lt;span class="si"&gt;}&lt;/span&gt;
  ),
  rest.post&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Omit&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;Dog&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;, PathParams, Dog&amp;gt;('/api/dogs', (req, res, ctx) =&amp;gt; &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;),
  rest.delete&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;DefaultRequestBody&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;Dog&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(
    '/api/dogs/:id',
    (req, res, ctx) =&amp;gt; &lt;span class="si"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;204&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="si"&gt;}&lt;/span&gt;
  ),
  rest.put&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Omit&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;Dog&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;, &lt;span class="si"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="si"&gt;}&lt;/span&gt;, Dog&amp;gt;(
    '/api/dogs/:id',
    (req, res, ctx) =&amp;gt; &lt;span class="si"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updated&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="si"&gt;}&lt;/span&gt;
  ),
];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, &lt;code&gt;mswjs/data&lt;/code&gt; provides a neat method that actually generates these request handlers using the following. Do note that the generated routes are in the following &lt;a href="https://github.com/mswjs/data#generate-rest-api"&gt;conventional format&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toHandlers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-msw"&gt;
  &lt;/a&gt;
  Running msw
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#in-the-browser"&gt;
  &lt;/a&gt;
  In the browser
&lt;/h3&gt;

&lt;p&gt;In our source code we can execute the following line. Note that we may want to conditionally execute this only on our local dev server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setupWorker&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msw&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;setupWorker&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#in-the-tests"&gt;
  &lt;/a&gt;
  In the tests
&lt;/h3&gt;

&lt;p&gt;Similarly, to mock API requests in our tests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;setupServer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msw/node&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setupServer&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;handlers&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;beforeAll&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;afterAll&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;The implementation will not be included in this post, but the full source code can be found in my &lt;a href="https://github.com/jericopingul/msw-data-testing"&gt;repo&lt;/a&gt; and deployed &lt;a href="https://msw-data-testing.netlify.app/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h2&gt;

&lt;p&gt;Writing a mock API using &lt;code&gt;msw&lt;/code&gt; and &lt;code&gt;mswjs/data&lt;/code&gt; allowed me to develop the UI while the actual API was being developed by another engineer. This setup also allowed me to write the request handlers only once for both my development server and tests. This personally made the effort worthwhile and made writing my tests enjoyable.&lt;/p&gt;

&lt;p&gt;I hope this is something that will be of benefit to you, as much as it was for me.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further reading
&lt;/h2&gt;

&lt;p&gt;In a more complex application, we could have multiple data models and can have relationships with each other. &lt;code&gt;mswjs/data&lt;/code&gt;  allows establishing relationships between our models in the docs &lt;a href="https://github.com/mswjs/data#model-relationships"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Additionally, there are more model methods to &lt;a href="https://github.com/mswjs/data#model-methods"&gt;explore&lt;/a&gt;. I like the way the API is likened to SQL and &lt;a href="https://github.com/mswjs/data#honorable-mentions"&gt;take inspiration&lt;/a&gt; from &lt;a href="http://prisma.io"&gt;prisma.io&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;mswjs/data&lt;/code&gt; &lt;a href="https://github.com/mswjs/data#graphql-handlers"&gt;supports GraphQL&lt;/a&gt; as well, which I’d love to explore in my next project.&lt;/p&gt;

</description>
      <category>react</category>
      <category>msw</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>How I built my own simplified React with Chevrotain, Typescript &amp; Webpack</title>
      <author>nathant</author>
      <pubDate>Sat, 22 Jan 2022 23:18:25 +0000</pubDate>
      <link>https://dev.to/nathant/how-i-built-my-own-simplified-react-with-chevrotain-typescript-webpack-3ja6</link>
      <guid>https://dev.to/nathant/how-i-built-my-own-simplified-react-with-chevrotain-typescript-webpack-3ja6</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;"Know how to solve every problem that has been solved." - Richard Feynman&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Over the past 2 months, I’ve been working on my own very simplified version of React called &lt;em&gt;Syntact&lt;/em&gt;. I wouldn’t call it mature yet, but it already has a couple of features working to be usable, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;variable declaration&lt;/li&gt;
&lt;li&gt;function declaration&lt;/li&gt;
&lt;li&gt;components&lt;/li&gt;
&lt;li&gt;virtual DOM&lt;/li&gt;
&lt;li&gt;dynamic rendering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides that, I’ve also built a custom compiler as a replacement for &lt;a href="https://babeljs.io/"&gt;Babel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I made this project for a course called &lt;em&gt;Advanced Programming&lt;/em&gt; which is a part of my bachelor &lt;em&gt;&lt;a href="https://www.kdg.be/en/programmes/applied-computer-science"&gt;Applied Computer Science&lt;/a&gt;&lt;/em&gt;. When I started this project, I had no idea what I was doing. But thanks to my coach (s/o to Lars Willemsens) and the almighty internet, I somehow managed to create something cool.&lt;/p&gt;

&lt;p&gt;This is not really a tutorial on how to make your own React but it certainly is a good starting point for you if you’d like to do this kind of project yourself. So let’s get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-compiler-our-own-kind-of-babel"&gt;
  &lt;/a&gt;
  1. The Compiler (our own kind of Babel)
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#lexing"&gt;
  &lt;/a&gt;
  Lexing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XMdVKOmy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kto7d02gch00gqpw657g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XMdVKOmy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kto7d02gch00gqpw657g.jpg" alt="Lexing" width="880" height="625"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step is to write a ‘lexer’ or a ‘tokenizer’. ‘Lex’ stands for lexical analysis, which basically means splitting your text into tokens. It's being used in creating programming languages but also for text processing and various other things.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#token"&gt;
  &lt;/a&gt;
  Token
&lt;/h3&gt;

&lt;p&gt;A token is a small unit of the code. It is structured as a pair consisting of a token name and a value. Example: the keywords "let" or "const" are tokens.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lexing-with-chevrotain"&gt;
  &lt;/a&gt;
  Lexing with Chevrotain
&lt;/h3&gt;

&lt;p&gt;Writing a lexer is the first and easiest step of the whole process. I chose to use the toolkit &lt;a href="https://chevrotain.io/docs/"&gt;Chevrotain&lt;/a&gt; to build my lexer.&lt;/p&gt;

&lt;p&gt;To use the Chevrotain lexer we first have to define the tokens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;/// Keywords&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Import&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chevrotain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ITokenConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Import&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/import/&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;From&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chevrotain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ITokenConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;From&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/from/&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Return&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chevrotain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ITokenConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Return&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/return/&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Const&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chevrotain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ITokenConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Const&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/const/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;longer_alt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Identifier&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Let&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chevrotain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ITokenConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createToken&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Let&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sr"&gt;/let/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;longer_alt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Identifier&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="c1"&gt;// We then add all the tokens to an array of tokens&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;allTokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay so we defined our tokens and bundled them in an array. Next, we instantiate the lexer by passing the tokens to the constructor and voila. Just like that the Syntact lexer was born.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;syntactLexer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Lexer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;chevrotain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lexer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allTokens&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can use this lexer to tokenize our input.&lt;/p&gt;

&lt;p&gt;Check out Chevrotain’s docs for more info: &lt;a href="https://chevrotain.io/docs/tutorial/step1_lexing.html"&gt;https://chevrotain.io/docs/tutorial/step1_lexing.html&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#parsing"&gt;
  &lt;/a&gt;
  Parsing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YNDxVare--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkki5ysc5tkvqyyg9pkr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YNDxVare--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fkki5ysc5tkvqyyg9pkr.jpg" alt="Parsing" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The second step of the process is parsing. The parser converts a list of tokens into a Concrete Syntax Tree (CST), a fancy term for a tree data structure that represents source code.&lt;/p&gt;

&lt;p&gt;To prevent ambiguities, the parser must take into account parenthesis and the order of operations. Parsing itself isn’t very difficult, but as more features get added, parsing can become very complex.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parsing-with-chevrotain"&gt;
  &lt;/a&gt;
  Parsing with Chevrotain
&lt;/h3&gt;

&lt;p&gt;Again, I used Chevrotain to build a parser for Syntact. A Chevrotain parser analyses a token that conforms to some grammar.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grammar"&gt;
  &lt;/a&gt;
  Grammar
&lt;/h3&gt;

&lt;p&gt;A grammar is a description of a set of acceptable sentences. Our parser will use this grammar to build its tree. I wrote my grammar with the ANTLR grammar syntax.&lt;/p&gt;

&lt;p&gt;Here are some examples from my grammar file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;importStatement&lt;/span&gt; 
    &lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SEMICOLON&lt;/span&gt;
    &lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nl"&gt;binaryExpression&lt;/span&gt;
    &lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="nx"&gt;atomicExpression&lt;/span&gt; &lt;span class="nx"&gt;operator&lt;/span&gt; &lt;span class="nx"&gt;atomicExpression&lt;/span&gt; 
    &lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example we define how an Identifier should look like, what the escape sequence is and how to recognize an import statement.&lt;/p&gt;

&lt;p&gt;But to be honest, when using Chevrotain, it’s not really necessary to write the grammar in such a way in order to have a working parser. On the other side, it will help you to get a better view on how to build your parser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#writing-a-parser"&gt;
  &lt;/a&gt;
  Writing a parser
&lt;/h3&gt;

&lt;p&gt;Once you've got your grammar mapped out, it's time to start building your parser. As we said before, the parser must transform the output of the lexer into a CST.&lt;/p&gt;

&lt;p&gt;First we start by making a Parser class which we will invoke with the array of tokens that we used to define our Lexer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SyntactParser&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;CstParser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allTokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;performSelfAnalysis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Later on, all grammer rules will come here...&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we write Grammar Rules within our Parser class. Two (shortened) examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;importStatement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;importStatement&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUBRULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONSUME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Semicolon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;RULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONSUME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONSUME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Identifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONSUME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;OpenRoundBracket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUBRULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameterDeclaration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONSUME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CloseRoundBracket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONSUME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;OpenCurlyBracket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MANY&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OR&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;ALT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUBRULE1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;declareVariableStatement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;ALT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUBRULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;functionStatement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;ALT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUBRULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;functionCall&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;OPTION&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SUBRULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;returnStatement&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CONSUME&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;CloseCurlyBracket&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll write grammar rules according to the grammar which we've mapped out earlier using the ANTLR grammar syntax.&lt;/p&gt;

&lt;p&gt;Once that's done - believe me, it takes a while - we can start parsing the tokens. The output will be a CST that Chevrotain builds for us.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ast"&gt;
  &lt;/a&gt;
  AST
&lt;/h3&gt;

&lt;p&gt;Once we have our CST, we are going to convert it to an Abstract Syntax Tree (AST). An AST is like a CST but it contains information specific to our program which means it doesn't contain unnecessary information like &lt;em&gt;Semicolons&lt;/em&gt; or &lt;em&gt;Braces&lt;/em&gt;. In order to obtain an AST, we have to ‘visit’ the CST using a CST Visitor or how I like to call it, an Interpreter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interpreter"&gt;
  &lt;/a&gt;
  Interpreter
&lt;/h3&gt;

&lt;p&gt;The interpreter will traverse our CST and create nodes for our AST. Thanks to Chevrotain, this is a relatively doable step.&lt;/p&gt;

&lt;p&gt;Here is a tiny look at the Syntact interpreter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SyntactInterpreter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;SyntactBaseCstVisitor&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validateVisitor&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="nx"&gt;declareComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;componentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Identifier&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameterDeclaration&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;returnStatement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;returnStatement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;variableStatements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;declareVariableStatement&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;declareVariableStatement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;variableStatements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;COMPONENT_DECLARATION&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IDENTIFIER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;componentName&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;variableStatements&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nx"&gt;returnStatement&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#generator"&gt;
  &lt;/a&gt;
  Generator
&lt;/h3&gt;

&lt;p&gt;Get the point of an AST? Cool! Now we can go on and start with the generator. The generator will actually make JS code based on the AST.&lt;/p&gt;

&lt;p&gt;I find this one of the hardest parts of the whole parsing process. You’ll have to iterate over all the nodes in the AST and make working JS code from it. &lt;/p&gt;

&lt;p&gt;Here is how that might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SyntactGenerator&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Generator&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;convertFunBody&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;returnCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;variableStatements&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;variableStatements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;datatype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;varName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;variableName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="nx"&gt;returnCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;datatype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;varName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; = &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;\n`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;functionCalls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;functionCalls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nx"&gt;fC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="na"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="nx"&gt;returnCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;fC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;);`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;returnCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#err-come-again-please"&gt;
  &lt;/a&gt;
  Err, come again, please.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HfjIp5JX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khgr3csbrfcrnsfyn4f5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HfjIp5JX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khgr3csbrfcrnsfyn4f5.jpg" alt="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/khgr3csbrfcrnsfyn4f5.jpg" width="564" height="630"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Exhausted and a bit confused after reading all this? I get you. Here’s a recap:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Lexer&lt;/strong&gt; =&amp;gt; responsible for transforming raw text into a stream of &lt;strong&gt;tokens&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Parser&lt;/strong&gt; =&amp;gt; transforms the stream of tokens into &lt;strong&gt;Concrete Syntax Tree&lt;/strong&gt; (CST).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CST Visitor/Interpreter&lt;/strong&gt; =&amp;gt; recursively visits each node in CST which results in an &lt;strong&gt;Abstract Syntax Tree&lt;/strong&gt; (AST).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Generator&lt;/strong&gt; = &amp;gt; actually &lt;strong&gt;makes&lt;/strong&gt; JS &lt;strong&gt;code&lt;/strong&gt; based on the provided AST.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once we got the above things working, we can start making something I called a “SyntactEngine”.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#syntactengine"&gt;
  &lt;/a&gt;
  SyntactEngine
&lt;/h3&gt;

&lt;p&gt;Next, I made a SyntactEngine class. It will make it easier for us to orchestrate the different phases of transpiling our JSX to JS. It holds an entrypoint method called “transpileJsxToJs” which we can later use in our &lt;a href="https://webpack.js.org/loaders/"&gt;Webpack loader&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SyntactEngine&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;Engine&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;lexer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Lexer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;parser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SyntactParser&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;interpreter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SyntactInterpreter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Generator&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;transpileJsxToJs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;tokenizeInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ILexingResult&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;parseInput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;lexingResult&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ILexingResult&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ParseResultType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;toAst&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parsedInput&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ParseResultType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;generateJsFromAst&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-syntact-api"&gt;
  &lt;/a&gt;
  2. Syntact API
&lt;/h2&gt;

&lt;p&gt;We have a working compiler that can generate JS code from JSX. Now we need to build a Syntact API that can actually do the things that a framework like React can do. Create a virtual DOM, hold states and so on.&lt;/p&gt;

&lt;p&gt;I just sticked to a simple virtual DOM for now. For this I made a small recursive algorithm that creates a DOM based on the initial given element (a div for example) and all its members.&lt;/p&gt;

&lt;p&gt;Here is a shortened version of the method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;createDom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;members&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="cm"&gt;/* Check if prop type is a function handler
                 * Note: eval might be a security risk here. */&lt;/span&gt;
                &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-webclient-webpack"&gt;
  &lt;/a&gt;
  3. Webclient + Webpack
&lt;/h2&gt;

&lt;p&gt;Once we’ve got the compiler and the Syntact API, we can start integrating both into our client app using a webpack loader.&lt;/p&gt;

&lt;p&gt;The webpack loader will preprocess the Syntact JSX by using the compiler and convert it to JS code. Then, the JS code will use the Syntact API to actually use Syntact’s features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--udsLQ0bm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dji7txtei33383yrf2m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--udsLQ0bm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0dji7txtei33383yrf2m.jpg" alt="Flow" width="880" height="550"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you made it this far thanks for reading! I hope this article helps you understand how React (and Babel) work under the hood.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>react</category>
      <category>programming</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>I found out the NFT police is real, so I made a bot and I'll tell you how to</title>
      <author>Choudhry</author>
      <pubDate>Sat, 22 Jan 2022 23:15:28 +0000</pubDate>
      <link>https://dev.to/itschoudhry/i-found-out-the-nft-police-is-real-so-i-made-a-bot-and-ill-tell-you-how-to-4adj</link>
      <guid>https://dev.to/itschoudhry/i-found-out-the-nft-police-is-real-so-i-made-a-bot-and-ill-tell-you-how-to-4adj</guid>
      <description>&lt;p&gt;I will explain how I built this Twitter bot &lt;a href="https://twitter.com/freenftbot"&gt;freenftbot&lt;/a&gt;, but first allow me to have to floor to tell you how I got here. Like all good internet stories it started with a meme.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TFIc2V2_P3w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;After seeing this meme I went down the rabbit hole and in a shocking turn of events. These scammy influencers got people on Twitter attacking people for using jpgs they don't own the NFT of.&lt;/p&gt;

&lt;p&gt;So I thought it's time to take a stand against the &lt;strong&gt;cringe mining, pixelated dildo jpg having, virtual hypebeasts&lt;/strong&gt;. It's time to use my unique set of skills and terrible prioritization of time and build a Twitter bot.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-you-might-be-asking-what-does-the-bot-do"&gt;
  &lt;/a&gt;
  So you might be asking what does the bot do?
&lt;/h3&gt;

&lt;p&gt;It's simple you follow the instructions here: (I have screenshots of people failing this)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JNmBdYjp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdciqgnskzi8170s1za7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JNmBdYjp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zdciqgnskzi8170s1za7.png" alt='Image "Bot tweet"' width="608" height="277"&gt;&lt;/a&gt; And Profit xD:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UaSb6Vpu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/van9kp655ngcbq9y15ab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UaSb6Vpu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/van9kp655ngcbq9y15ab.png" alt='Image "NFT bro reply"' width="632" height="163"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#how-i-did-it-and-you-can-too"&gt;
  &lt;/a&gt;
  How I did it and you can too
&lt;/h2&gt;

&lt;p&gt;To be clear I'm going going to give tips around places I got stuck and skip the straight forward parts or easy to google parts.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#perquisites"&gt;
  &lt;/a&gt;
  Perquisites
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Some python skills&lt;/li&gt;
&lt;li&gt;Twitter developer access for the API get it and apply for ELEVATED access so you get access to the V1 API because V2 doesn't have media upload yet. &lt;a href="https://developer.twitter.com/"&gt;here&lt;/a&gt; (I create a separate account for my bot. I would say do that too, but live your life Queen)&lt;/li&gt;
&lt;li&gt;Set up Google cloud project if you haven't used your free tier look into it. I'll explain parts of it, but google is your friend.&lt;/li&gt;
&lt;li&gt;Some NFT images I grabed this &lt;a href="https://www.kaggle.com/stanleyjzheng/bored-apes-yacht-club"&gt;kaggle dataset&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To kick off these are my global scope variables&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="c1"&gt;# I put secrets and tokens here
# client is the V2 API
&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;bearer_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BEARER_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;access_token_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ACCESS_TOKEN_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# api is the V1 API
&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ACCESS_TOKEN_SECRET&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"GOOGLE_APPLICATION_CREDENTIALS"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;google service account key json&amp;gt;"&lt;/span&gt;
&lt;span class="n"&gt;storage_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;google cloud project&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;storage_client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"&amp;lt;google storage bucket&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# where all the NFT images are
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
  The documentation is actually really good &lt;a href="https://docs.tweepy.org/en/stable/index.html"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One neat thing about google cloud functions, if the environment hasn't been deleted it'll reuse this variables so they won't be re-assigned every run. Smaller carbon footprint. #OurPlanet&lt;/p&gt;

&lt;p&gt;Now how do you get all mentions from the last 5 minutes?&lt;br&gt;
&lt;code&gt;client.get_users_mentions(id=ID, start_time=&amp;lt;time 5 mins ago&amp;gt;)&lt;/code&gt;&lt;br&gt;
now do it again, but handle pagination&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_nft_mentions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;nft_tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# avoid duplicates
&lt;/span&gt;    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_users_mentions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_results&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;next_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;next_token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tweets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;does_text_have_hashtag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;is_following&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;nft_tweets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;"next_token"&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_users_mentions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;max_results&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;tweet_fields&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"author_id"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;start_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;pagination_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"next_token"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;next_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nft_tweets&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a set of tweets to loop over. We just need to grab a random NFT from our bucket that's easy using our neatfy csv file of all of our NFTs we got with the images and some pandas:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;destination_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/tmp/"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="c1"&gt;# You can use tmp in cloud function for tmp files just like the NFT images for this
&lt;/span&gt;    &lt;span class="n"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download_to_filename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;destination_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;destination_file&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pick_nft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nft_frame&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;nft_row&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nft_frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;nft_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nft_row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"IPFS HASH"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;nft_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;download_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;nft_hash&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;.jpg"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nft_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nft_row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"INITIAL SEQUENCE INDEX"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_media_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nft&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;simple_upload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nft&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;media_id_string&lt;/span&gt; &lt;span class="c1"&gt;# Remember api. uses the V1 API client. uses the V2 API. V2 doesn't have media upload (yet)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we have a tweet to reply to and a image uploaded ready to reply with. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MLsOwS3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cocy7gyef85y0onx3no0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MLsOwS3S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cocy7gyef85y0onx3no0.gif" alt="Image ppap" width="498" height="313"&gt;&lt;/a&gt;(dead meme lol)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;reply_with_nft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;media_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_tweet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_reply_to_tweet_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;media_ids&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;media_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;put it all together in a main function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# Need a parameter for cloud functions
&lt;/span&gt;    &lt;span class="n"&gt;csv_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;download_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"hashes.csv"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;nft_frame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tweets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_nft_mentions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_time_five_mins_ago&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tweets&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# chosen NFT and upload it
&lt;/span&gt;        &lt;span class="n"&gt;nft_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nft_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pick_nft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nft_frame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;media_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_media_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nft_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# reply to tweet
&lt;/span&gt;        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reply_with_nft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;media_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# if response is clean all user to cd file and remove nft
&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;nft_frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nft_index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inplace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;nft_frame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;upload_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csv_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"There's some problems boss"&lt;/span&gt; &lt;span class="c1"&gt;# you need a return statement for cloud functions
&lt;/span&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"all good"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;AND THERE YOU HAVE IT! it's not the prettiest cloud function, but it's a valid cloud function. We set the bar at "it works kinda" around here. Now the one I have in production had a few extra bells and whistles, but let's not get caught up with the devil in the details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-power-of-the-cloud"&gt;
  &lt;/a&gt;
  The Power of the cloud
&lt;/h3&gt;

&lt;p&gt;First we need a cloud function. You can work it out! I believe in you. Well I don't know you, so I don't, but try anyways. There's a few things I can give you tips on.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cloud-function-tips"&gt;
  &lt;/a&gt;
  Cloud Function Tips:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;uncheck "Require HTTPS" is just causes issues I couldn't get it work, but good luck if you want it.&lt;/li&gt;
&lt;li&gt;If you choose to upload your project through zip the main file needs to be in the root of the zip file.&lt;/li&gt;
&lt;li&gt;Under "Runtime, build, connections and security settings" the time out is defaulted to 60 seconds there's a max of 540 seconds.&lt;/li&gt;
&lt;li&gt;Error messages are found under the details tab.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If all goes well and you have a green tick. We now have:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/e_DqV1xdf-Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;But how do we use it? For this case I used Cloud Scheduler!&lt;/p&gt;

&lt;p&gt;Pick a time frequency. Under "Configure the execution" Target Type is HTTP URL you get that from the cloud function then add a "OIDC TOKEN" under Auth Header for the Audience use the HTTP URL again (I don't get it either) and hit the blue button and hope for the best.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#tips-if-it-fails"&gt;
  &lt;/a&gt;
  Tips if it fails:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If the error is "internal" check your cloud function logs.&lt;/li&gt;
&lt;li&gt;If the error is "Permission Denied" your service account permissions are fried. - Confucius (art of war)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks you for reading I hope I made you laugh because God help you if you found me helpful. If you have nothing else better to do go follow me on twitter &lt;a href="https://twitter.com/ItsChoudhry"&gt;@itsChoudhry&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lastly I would like to give credit to a Twitter friend who said "Building a twitter bots is fun" - &lt;a href="https://twitter.com/Talal916"&gt;Talal&lt;/a&gt; check out his bots &lt;a href="https://twitter.com/friendcirclebot"&gt;FriendCircleBot&lt;/a&gt; and &lt;a href="https://twitter.com/wordcloudsbot"&gt;WordCloudBot&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>twitter</category>
      <category>googlecloud</category>
      <category>programming</category>
    </item>
    <item>
      <title>How to Make NFC web app like dot.card or Tappy Card.</title>
      <author>White Sheep 🦅🦅</author>
      <pubDate>Sat, 22 Jan 2022 23:01:12 +0000</pubDate>
      <link>https://dev.to/jhozie_/how-to-make-nfc-web-app-like-dotcard-or-tappy-card-24j7</link>
      <guid>https://dev.to/jhozie_/how-to-make-nfc-web-app-like-dotcard-or-tappy-card-24j7</guid>
      <description>&lt;p&gt;So I am pretty new to front end web development. My first learning project is to build a web base app like dot.card that can program NFC card and users can create a unique profile. The profile link is linked to the card (I dont know how it works but I am hoping I get ideas here. &lt;/p&gt;

&lt;p&gt;The way dot.card nfc and QR code card works is that it is programmed when scanned to direct to user to the web app where he creates signs up and create profile and automatically the generated link it connected to the nfc card and qr code. How is this possible? Is it done using the serial number of the card? How is printed qr code and nfc card automatically linked after user sets profile without scanning the card?&lt;/p&gt;

&lt;p&gt;Pls I need ideas. Thank you!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Encoding, Hashing e Encryption: Qual a diferença?
</title>
      <author>Ste Suzart 🦊 ~</author>
      <pubDate>Sat, 22 Jan 2022 22:34:16 +0000</pubDate>
      <link>https://dev.to/kotlinautas/encoding-hashing-e-encryption-qual-a-diferenca-29gg</link>
      <guid>https://dev.to/kotlinautas/encoding-hashing-e-encryption-qual-a-diferenca-29gg</guid>
      <description>&lt;p&gt;Encoding, hashing e encryption são conceitos comuns aplicados e discutidos ao tentar proteger os dados. Muitos devs afirmam usar métodos e padrões de criptografia fortes, mas é necessário que uma equipe de segurança avalie se realmente é apropriado.👌&lt;/p&gt;

&lt;p&gt;Vamos dar uma olhada nas diferenças entre o uso adequado de encoding, hashing e encryption.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#encoding"&gt;
  &lt;/a&gt;
  Encoding
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Encoding&lt;/em&gt;(codificar) algo é comunicá-lo de uma maneira que o receptor entenda. Existem muitos padrões de codificação, como por exemplo, &lt;strong&gt;Base64&lt;/strong&gt;, &lt;strong&gt;UTF-8&lt;/strong&gt; e &lt;strong&gt;ASCII&lt;/strong&gt;. Cada padrão tem uma finalidade e as aplicações que usam esses padrões de codificação esperam receber dados compatíveis com esse padrão de codificação.&lt;/p&gt;

&lt;p&gt;Uma comparação fácil é a linguagem humana. As palavras, sintaxe e regras da linguagem são diferentes e únicas para cada cultura linguística. Um nativo de português pode não ser capaz de ler ou falar japonês, mas com o tradutor adequado, ele pode decodificar o japonês para o português e até codificar o português para o japonês usando um tradutor.&lt;/p&gt;

&lt;p&gt;As duas linhas a seguir representam os mesmos dados:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Texto:&lt;/strong&gt; Esta linha tem dados secretos que você realmente deve codificar.&lt;br&gt;
&lt;strong&gt;Base64:&lt;/strong&gt; RXN0YSBsaW5oYSB0ZW0gZGFkb3Mgc2VjcmV0b3MgcXVlIHZvY8OqIHJlYWxtZW50ZSBkZXZlIGNvZGlmaWNhci4=&lt;/p&gt;

&lt;p&gt;Para os olhos humanos, essas duas linhas são totalmente diferentes. Para uma aplicação, elas são iguais.&lt;/p&gt;

&lt;p&gt;Se você codificar diversas vezes os mesmos dados, o encode gerado será o mesmo valor, caso mude uma vírgula, irá mudar tudo.&lt;/p&gt;

&lt;p&gt;A codificação de dados é normalmente usada para garantir a integridade e usabilidade dos dados e na maioria das vezes é usada quando os dados não podem ser transferidos em seu formato atual entre sistemas ou aplicações.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A codificação não é usada para proteger dados, porque é fácil de reverter.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Qualquer fornecedor que afirme usar criptografia base64 forte em sua solução é suspeito.&lt;/p&gt;

&lt;p&gt;Exemplo de código em kotlin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.util.*&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mensagem&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Esta linha tem dados secretos que você realmente deve codificar."&lt;/span&gt;

    &lt;span class="c1"&gt;//codifica para base64&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;codificarString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getEncoder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;encodeToString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mensagem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toByteArray&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"string codificada: $codificarString"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;//decodifica&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;decodificarBytes&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getDecoder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;codificarString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;decodificarString&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decodificarBytes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"string decodificada: $decodificarString"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hashing"&gt;
  &lt;/a&gt;
  Hashing
&lt;/h2&gt;

&lt;p&gt;Hashing é um método de validação de integridade. O problema que o hashing se propõe a resolver não é proteger os dados de serem lidos, mas sim validar que os dados em questão não foram alterados.&lt;/p&gt;

&lt;p&gt;Os algoritmos de hash são funções unidirecionais que recebem uma entrada e calculam uma única saída. Os algoritmos de hash são projetados de tal forma que você não pode pegar um valor de hash e trabalhar o algoritmo de volta para obter a entrada original. Caso haja uma invasão na sua base de hash, o invasor teria que gerar muitas entradas em potencial e comparar a saída com a saída do algoritmo de hash para ver se elas estavam corretas.&lt;/p&gt;

&lt;p&gt;Os algoritmos de hash incluem SHA1, SHA256 e SHAKE256, entre outros.&lt;/p&gt;

&lt;p&gt;As três linhas a seguir representam os mesmos dados:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Texto&lt;/strong&gt;: Esta linha tem dados secretos que você realmente deve criptografar.&lt;br&gt;
&lt;strong&gt;MD5&lt;/strong&gt;: ca37111d05a53346b2c14d749e4c4191&lt;br&gt;
&lt;strong&gt;SHA1&lt;/strong&gt;: f6472fbf25720494e4d02d0ec2c94aacee34d602&lt;/p&gt;

&lt;p&gt;Hashing nunca deve ser revertido. Ele não deve ser usado para impedir que as comunicações sejam lidas por partes não autorizadas.&lt;/p&gt;

&lt;p&gt;Um uso comum de hash é para proteger o armazenamento de senhas. Quando um usuário cria uma senha, a senha é colocada por meio de um algoritmo de hash. O hash resultante é então armazenado. Quando um usuário tenta se autenticar, a senha é criptografada novamente e comparada com o hash armazenado.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Novamente, o hash é uma verificação de integridade. Não é criptografia.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Exemplo de código em kotlin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.math.BigInteger&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;java.security.MessageDigest&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;input&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Esta linha tem dados secretos que você realmente deve criptografar."&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;md5&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"o hash do md5 é $md5"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;sha1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"o hash do sha1 é $sha1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;md&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MessageDigest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MD5"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;toByteArray&lt;/span&gt;&lt;span class="p"&gt;())).&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;padStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sha1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;md&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MessageDigest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"SHA-1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;BigInteger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;digest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;toByteArray&lt;/span&gt;&lt;span class="p"&gt;())).&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;padStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#encryption"&gt;
  &lt;/a&gt;
  Encryption
&lt;/h2&gt;

&lt;p&gt;A &lt;em&gt;Encryption&lt;/em&gt;(criptografia) torna os dados ilegíveis por qualquer pessoa, exceto aqueles que conhecem a &lt;em&gt;secret key&lt;/em&gt;(chave secreta). O segredo pode ser uma única &lt;em&gt;shared key&lt;/em&gt;(chave compartilhada) ou pode ser dividido em duas chaves - uma mantida privada e outra fornecida à outra parte.&lt;/p&gt;

&lt;p&gt;Digamos que Quinn e Gary desejam se comunicar com segurança. Eles decidem usar uma &lt;em&gt;shared key&lt;/em&gt;(chave compartilhada) de “chookity” para seu segredo. Ao criptografar uma mensagem, Quinn insere a chave de criptografia. Ao descriptografar a mensagem, Gary digita a chave para poder ler a mensagem.&lt;/p&gt;

&lt;p&gt;Quinn e Gary, no entanto, estão preocupados com o fato da mensagem secreta ser lida por um terceiro que possa adivinhar ou obter essa chave. Eles decidem usar um sistema de duas chaves (criptografia de chave assimétrica - &lt;em&gt;asymmetric key encryption&lt;/em&gt;) para criptografar as mensagens. Quinn quer enviar uma mensagem que somente Gary pode ler. Quinn usa uma chave (chave pública - &lt;em&gt;public key&lt;/em&gt;) que Gary deu a ela com antecedência. Gary recebe essa mensagem criptografada e usa sua outra chave (chave privada - &lt;em&gt;private key&lt;/em&gt;) para descriptografar e ler essa mensagem. Como apenas Gary conhece sua chave privada e nunca a compartilhou com ninguém, ninguém pode descriptografar a mensagem, exceto Gary. Gary também usa sua chave privada para enviar uma mensagem para Quinn e Quinn pode usar a chave pública que Gary deu a ela para lê-la. Esse tipo de criptografia é conhecido como &lt;em&gt;signing&lt;/em&gt;(assinatura). Como a chave pública que Gary deu a Quinn descriptografou a mensagem, Quinn pode presumir com segurança que Gary enviou a mensagem, pois apenas Gary tem a outra chave desse par.&lt;/p&gt;

&lt;p&gt;Algoritmos de criptografia fortes comuns incluem: AES, Blowfish e RSA.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Encoding, hashing e encryption podem ser usados ​​juntos. Uma mensagem codificada em base64 para uma aplicação pode ser hash para que a integridade dessa mensagem possa ser verificada pelo receptor. A mensagem pode então ser criptografada e enviada para o destinatário que irá descriptografar e comparar o hash da mensagem com o valor de hash recebido do remetente para garantir que a mensagem não foi alterada.&lt;/p&gt;

&lt;p&gt;Compreender a diferença entre esses conceitos pode ajudá-lo a considerar o design e a arquitetura de segurança, especialmente quando se trata de aquisição ou revisão de aplicações. Implementar acidentalmente a codificação como um método de criptografia pode ser muito perigoso para uma organização, pois isso significaria que as transmissões são dados reais que podem ser facilmente decodificados por qualquer pessoa, então tomem cuidado senhores &amp;amp; senhoras ✌️&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>braziliandevs</category>
      <category>security</category>
    </item>
    <item>
      <title>The millennial urge to respond online </title>
      <author>JTK</author>
      <pubDate>Sat, 22 Jan 2022 22:01:26 +0000</pubDate>
      <link>https://dev.to/heyjtk/the-millennial-urge-to-respond-online-2jcl</link>
      <guid>https://dev.to/heyjtk/the-millennial-urge-to-respond-online-2jcl</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-response-to-the-classmate-who-in-two-consecutive-weeks-posts-called-millennials-lazy"&gt;
  &lt;/a&gt;
  My response to the classmate who in two consecutive weeks posts called millennials lazy
&lt;/h3&gt;

&lt;p&gt;Hi XXX - found your post this week very interesting. After reading this comment which demonstrates that you have a concern for disrespectful behavior:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I think it is so disrespectful to be on your phone while you are on a date.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I found it surprising that you would yourself offer this statement, which could be perceived as disrespectful to a large swath of people (through use of the descriptor "lazy"):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;They are growing up too fast off this social media and technology.  And it has made them so lazy. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is not new for people to hold broad biases against groups of people based on inherent traits such as ethnicity, race, gender, or age. In this case, this negative and disrespectful bias appears to be based on age. Bias is an issue that pervades society, from media into educational environments such as the one we find ourselves in now. As Reyna explains, in the classroom stereotypes result in biased treatment from teachers in ways such as diminished expectation that female students be intelligent or increased expectation that Black students are lazy (2008).&lt;/p&gt;

&lt;p&gt;Since we are talking about language this week, it is interesting to note that language is a building block in asserting and maintaining stereotype and/or biases. As noted by Burgers and Beukeboom, once language is applied to label a social group it increases the propensity that the recipient become a target of stereotyping (2020). In addition to overtly biased language, there exist what are known as "coded" terms or "dog whistles" which more subtley associate negative stereotypes to certain populations. This might include playing into marginalization of black youth or using terms like "pack animal", "menacing" or "viscious" to describe adolescents suspected of a crime, as edjustice explains (2017).&lt;/p&gt;

&lt;p&gt;In the case of bias against younger generations, it is possible that a twofold linguistic push and pull cause people holding those beliefs to absorb the linguistic tilt used to describe people in this category, and that your perception of these attributes is enhanced when language signifies someone's membership to said group ("millennial", "Gen Z", or similar labels). &lt;/p&gt;

&lt;p&gt;Perhaps it will be interesting to you to re-frame your views based on some third party research. I notice that you did not offer any supporting materials to any of your conclusions about other generations, but the subject was interesting so I took the liberty of finding some sources:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As Koulopoulos explains, when studied millennial phone and face to face communications were found not to be fewer than previous generations. Rather, younger generations are using digital methods of communication in addition to "good old fashioned" methods (2021)&lt;/li&gt;
&lt;li&gt;Research suggests millennials are the most ambitious generation yet (Eisenhauer, 2020)&lt;/li&gt;
&lt;li&gt;Millennials are less likely than other groups to use their vacation, more likely to feel guilty for taking time away from work, and more likely to obsess about work than other generations (Carmichael, 2016)&lt;/li&gt;
&lt;li&gt;Compared to the baby boomer generation, 72% of millennial women vs 40% participate in the workforce, meaning that a given millennial couple may be producing double the labor of a given baby boomer couple (Bialik &amp;amp; Fry, 2019)&lt;/li&gt;
&lt;li&gt;When meaningful study has been put into generational differences in age groups the findings have been that such variation is quite small, rather that erroneous attitudes or beliefs about these differences may represent the largest divide (King et. al, 2019)&lt;/li&gt;
&lt;li&gt;Although often stereotyped as sensitive. a study from the Journal of Psychology and aging suggests that description more fits baby boomers (Cairnduff, 2019)&lt;/li&gt;
&lt;li&gt;as Seigel and Telford explain, millennials work more hours a day than previous generations and are still significantly worse off financially despite having more education (2019)&lt;/li&gt;
&lt;li&gt;Meta-analysis in the Journal of Business and Psychology identify no significant difference in worth ethic between generations (Concordia St. Paul, n.d.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm glad that there was such a comprehensive body of evidence to serve as a shared point of reference for you and I going forward. I can tell that you and I have a shared value from your previous post, which is a respect for work ethic, since you have repeatedly stated distaste for lazy behavior. It is for that reason I knew you would be happy for the opportunity to do the work to critically evaluate your understanding of millennials, since obviously someone keeping the same views in spite of new information might fall into a form of intellectual laziness which of course no one wants!&lt;/p&gt;

&lt;p&gt;Thanks for your post, enjoyed reading and responding.&lt;/p&gt;

&lt;p&gt;-JTK&lt;/p&gt;

&lt;p&gt;References&lt;/p&gt;

&lt;p&gt;Bialik, K., &amp;amp; Fry, R. (2019, February 14). Millennial life: How young adulthood today compares with prior generations. Pew Research Center’s Social &amp;amp; Demographic Trends Project. Retrieved January 22, 2022, from &lt;a href="https://www.pewresearch.org/social-trends/2019/02/14/millennial-life-how-young-adulthood-today-compares-with-prior-generations-2/"&gt;https://www.pewresearch.org/social-trends/2019/02/14/millennial-life-how-young-adulthood-today-compares-with-prior-generations-2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Burgers, C., &amp;amp; Beukeboom, C. J. (2020). How Language Contributes to Stereotype Formation: Combined Effects of Label Types and Negation Use in Behavior Descriptions. Journal of Language and Social Psychology, 39(4), 438–456. &lt;a href="https://doi.org/10.1177/0261927x20933320"&gt;https://doi.org/10.1177/0261927x20933320&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Carmichael, S. (2016, August 22). Millennials Are Actually Workaholics, According to Research. Harvard Business Review. Retrieved January 22, 2022, from &lt;a href="https://hbr.org/2016/08/millennials-are-actually-workaholics-according-to-research"&gt;https://hbr.org/2016/08/millennials-are-actually-workaholics-according-to-research&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;edjustice. (2018, November 2). Coded Language. NEA EdJustice. Retrieved January 22, 2022, from &lt;a href="https://neaedjustice.org/social-justice-issues/racial-justice/coded-language/"&gt;https://neaedjustice.org/social-justice-issues/racial-justice/coded-language/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eisenhauer, T. (2020). Millennial Stereotypes: Fact Or Fiction? 6 Millennial stereotypes and how they stand up to social science. Leadership Excellence, 37(2), 30–34. &lt;/p&gt;

&lt;p&gt;Hoffower, H. (2019, December 16). Baby boomers are the most sensitive generation, a new study says — and it shows exactly what the world is getting wrong about millennials. Business Insider. Retrieved January 22, 2022, from &lt;a href="https://www.businessinsider.com/millennials-less-sensitive-than-baby-boomers-stereotypes-2019-12?international=true&amp;amp;r=US&amp;amp;IR=T"&gt;https://www.businessinsider.com/millennials-less-sensitive-than-baby-boomers-stereotypes-2019-12?international=true&amp;amp;r=US&amp;amp;IR=T&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;King, E., Finkelstein, L., Thomas, C., &amp;amp; Corrington, A. (2019, January 14). Just How Different Are Millennials, Gen Xers, and Baby Boomers at Work? Harvard Business Review. Retrieved January 22, 2022, from &lt;a href="https://hbr.org/2019/08/generational-differences-at-work-are-small-thinking-theyre-big-affects-our-behavior"&gt;https://hbr.org/2019/08/generational-differences-at-work-are-small-thinking-theyre-big-affects-our-behavior&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Koulopoulos, T. (2021, January 5). Why Most of What You’ve Been Told About Millennials and Gen-Z Is Dead Wrong. Inc.Com. Retrieved January 22, 2022, from &lt;a href="https://www.inc.com/thomas-koulopoulos/why-almost-everything-youve-been-told-about-millennials-and-gen-z-is-wrong.html"&gt;https://www.inc.com/thomas-koulopoulos/why-almost-everything-youve-been-told-about-millennials-and-gen-z-is-wrong.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;McCumber, A. (2021, November 24). Dispelling the Myths About Millennials in the Workplace. CSP Online. Retrieved January 22, 2022, from &lt;a href="https://online.csp.edu/resources/article/millennials-in-the-workplace/"&gt;https://online.csp.edu/resources/article/millennials-in-the-workplace/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Reyna, C. (2000). Lazy, Dumb, or Industrious: When Stereotypes Convey Attribution Information in the Classroom. Educational Psychology Review, 12(1), 85–110. &lt;/p&gt;

&lt;p&gt;Siegel, R., &amp;amp; Telford, T. (2019, October 18). More work, more sleep: New study offers glimpse of daily life as a millennial. Washington Post. Retrieved January 22, 2022, from &lt;a href="https://www.washingtonpost.com/business/2019/10/18/more-work-more-sleep-new-study-offers-glimpse-daily-life-millennial/"&gt;https://www.washingtonpost.com/business/2019/10/18/more-work-more-sleep-new-study-offers-glimpse-daily-life-millennial/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
