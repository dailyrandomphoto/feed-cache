<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introducing Quotes App</title>
      <author>Gourav Khunger</author>
      <pubDate>Sat, 22 May 2021 19:58:40 +0000</pubDate>
      <link>https://dev.to/gouravkhunger/introducing-quotes-app-2ih0</link>
      <guid>https://dev.to/gouravkhunger/introducing-quotes-app-2ih0</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was originally published at &lt;a href="https://genicsblog.com/introducing-quotes-app"&gt;my blog&lt;/a&gt;. Please try reading it there for a better experience :)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hi everyone, how are y'all doing 😃&lt;/p&gt;

&lt;p&gt;It's been a long time since I published my last blog post and all that is because it was getting difficult to manage studies and blogging. But in the meantime, I have been working on a really awesome project and this article is all about explaining that ✨&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#introducing-quotes-app"&gt;
  &lt;/a&gt;
  Introducing Quotes App 🚀
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h3&gt;

&lt;p&gt;If you ever read even one of my android articles, you will definitely be knowing I used Java to make android apps.&lt;/p&gt;

&lt;p&gt;And, as we all know Google is going on to promote Kotlin at its level best and encouraging developers to use Kotlin to develop android apps, I too was thinking for a long time of migrating to Kotlin as soon as possible.&lt;/p&gt;

&lt;p&gt;Also, a lot of open-source projects and articles on the internet about android development, these days are based on Kotlin and require you to understand Kotlin! So it was high time for me too to adopt Kotlin and get my hands dirty over it.&lt;/p&gt;

&lt;p&gt;If you too ever thought of starting to learn a new language from scratch, you definitely know how difficult it seems at first, to pick a new topic and start learning it by researching over the internet. And the same happened to me!&lt;/p&gt;

&lt;p&gt;But my learning process of Kotlin is a talk of another article, I will surely write articles about it and update this one to include them.&lt;/p&gt;

&lt;p&gt;So, after learning Kotlin, the thing I had left out was, I had not implemented things I learned in a project and I would say that's a massive mistake that beginners make. It's important to try out stuff in the real world if we wish to get good in any field!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#idea"&gt;
  &lt;/a&gt;
  Idea
&lt;/h3&gt;

&lt;p&gt;As soon I was done with learning modern tools and concepts about android development, like the MVVM pattern(I did not use it much before learning Kotlin), Room Database library, ViewModels, LiveData, and trying few things here and there, I had an idea of integrating all the things I learned into a single android app.&lt;/p&gt;

&lt;p&gt;I really wished to make something useful out of what I learned and not just implement any 3rd world demo app that does nothing.&lt;/p&gt;

&lt;p&gt;And hence it had to lead me to think about making a Quotes App 🎉. The concept of the app is really simple.&lt;/p&gt;

&lt;p&gt;I thought of having just two screens in the app, one for viewing the current quote and the other for viewing all the saved quotes of the user.&lt;/p&gt;

&lt;p&gt;On the quotes page, there would be a card that would show the currently loaded quote and the author of the quote. There would be a button on the bottom of the page to bookmark, or in other words, save the current quote. Look below in the design section to see the design I took inspiration from.&lt;/p&gt;

&lt;p&gt;The second page would be about showing the bookmarked quotes to the user. There we can long-press the quotes to copy them to the clipboard, and swipe them to delete them from our collection. Also, we can undo the action if the quote was deleted in error and it will get back into place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  Design
&lt;/h3&gt;

&lt;p&gt;I thought over the designing aspect a lot, but since I am not that much interested in designing as I am fascinated with programming, I wished to focus on the coding part more than the design part.&lt;/p&gt;

&lt;p&gt;Hence, I looked over the internet for some design inspirations and ideas, I ended up with this image, and most of the design inspiration is taken from it, though not completely, but the major look and feel is derived from it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5mjb6hMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exnq9czxqmnnulky3kgf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5mjb6hMC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exnq9czxqmnnulky3kgf.jpg" alt="app-design-idea.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This design looked great to me and I made up my mind to use it as a reference while designing the whole UI&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h3&gt;

&lt;p&gt;It took me just 2 days to get working with a working base model of the app. I had done implementing Retrofit, Room Database, Recycler View, Navigation, and pretty much everything the basic version of the app would need.&lt;/p&gt;

&lt;p&gt;I have used the &lt;a href="https://zenquotes.io/"&gt;ZenQuotes API&lt;/a&gt; to load quotes into the app. Huge thanks to them for making such a quality API for free usage!!&lt;/p&gt;

&lt;p&gt;As of now, here's a list of tools and frameworks this app uses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Material Design&lt;/li&gt;
&lt;li&gt;Android LifeCycle Components&lt;/li&gt;
&lt;li&gt;Room Database Library&lt;/li&gt;
&lt;li&gt;Kotlin Extensions and Coroutines&lt;/li&gt;
&lt;li&gt;Retrofit Library&lt;/li&gt;
&lt;li&gt;Android Navigation Components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the code for this app is hosted on this Github repository:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/GouravKhunger"&gt;
        GouravKhunger
      &lt;/a&gt; / &lt;a href="https://github.com/GouravKhunger/QuotesApp"&gt;
        QuotesApp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A beautiful Quotes App where you can read and save quotes.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
QuotesApp&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/logo.png"&gt;&lt;img alt="QuotesApp Logo" src="https://res.cloudinary.com/practicaldev/image/fetch/s--EVzZgULE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/logo.png" height="150px" width="150px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A beautiful Quotes App where you can read and save quotes.&lt;/p&gt;
&lt;p&gt;This repository contains source code of a Quotes app, which helps you stay motivated by providing best picked quotes
stated by famous personalities. This app uses &lt;a href="https://zenquotes.io" rel="nofollow"&gt;zen quotes&lt;/a&gt; api, for retrieving quotes.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/GouravKhunger/QuotesApp/releases/latest"&gt;Download&lt;/a&gt; the latest &lt;code&gt;apk&lt;/code&gt; file of this project and do provide feedback 😀&lt;/p&gt;
&lt;h1&gt;
Screenshots&lt;/h1&gt;
&lt;p&gt;Here are some screenshots from the app:&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/one.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FH4BTVnK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/one.png" alt="first"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;th&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/two.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6zhlbm3V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/two.png" alt="second"&gt;&lt;/a&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/three.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f_MZkbV1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/three.png" alt="third"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/four.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSLNVWvh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/GouravKhunger/QuotesApp/main/images/four.png" alt="fourth"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h1&gt;
Details&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://youtu.be/9Kl6WDmTK8g" rel="nofollow"&gt;Watch the demo video on Youtube&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This App has useful features, such as bookmarks, to save the quotes that you find motivating, and keep them in a
separated section. Moreover, there are a number of cool transition and animation affects, which makes navigation much
cooler.&lt;/p&gt;
&lt;p&gt;Long pressing a quote in your Bookmarks copies that quote to the clipboard... More features along the way 🚀.&lt;/p&gt;
&lt;h1&gt;
Have awesome ideas?&lt;/h1&gt;
&lt;p&gt;Feel free to &lt;a href="https://github.com/GouravKhunger/QuotesApp/issues/new"&gt;Create an issue&lt;/a&gt;
if you think you have a great idea that could…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/GouravKhunger/QuotesApp"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Feel free to clone the repository and add new amazing features that you have in your mind 🙂&lt;/p&gt;

&lt;p&gt;Also, Don't forget to smash the star button and show some love!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#end-result"&gt;
  &lt;/a&gt;
  End result
&lt;/h3&gt;

&lt;p&gt;Here's a demo video showing all the features of the app:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/9Kl6WDmTK8g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h1&gt;

&lt;p&gt;It was an overall fun experience implementing all the new things I learned while diving even deeper into Android development.&lt;/p&gt;

&lt;p&gt;I learned a lot of new concepts along the way, also coming up with errors here and there and failing while learning Kotlin, but the quotes themselves from my app kept me motivated to continue the learning process 😇&lt;/p&gt;

&lt;p&gt;Please &lt;a href="https://github.com/GouravKhunger/QuotesApp/releases/latest"&gt;download the latest &lt;code&gt;apk&lt;/code&gt; file&lt;/a&gt;, install it on your device, and provide feedback about what you think  about the app 🔥&lt;/p&gt;

&lt;p&gt;I hope you would love the app as well as the article, thanks a lot for reading this far 😊&lt;/p&gt;

</description>
      <category>android</category>
      <category>kotlin</category>
    </item>
    <item>
      <title>How does CSS works behind the scenes?</title>
      <author>Halisson Alves</author>
      <pubDate>Sat, 22 May 2021 19:29:22 +0000</pubDate>
      <link>https://dev.to/halissonalves/how-does-css-works-behind-the-scenes-2f9g</link>
      <guid>https://dev.to/halissonalves/how-does-css-works-behind-the-scenes-2f9g</guid>
      <description>&lt;p&gt;With the arrival of so much technology and novelty in the development market, many programmers end up leaving aside concepts that are essential for the complete understanding of a web application. One of them is the working of the CSS behind the scenes.&lt;br&gt;
Understanding how a specific technology works is the key to getting everything it has to offer. That is exactly what we are going to discuss here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#opening-a-web-page"&gt;
  &lt;/a&gt;
  Opening a web page
&lt;/h2&gt;

&lt;p&gt;Have you stopped to think about the number of processes that run in the background of a browser while you access a web page? Of course, we will not explore all the details of these processes here, but we will cover enough to understand the path that our beloved CSS travels until reaching its final destination.&lt;/p&gt;

&lt;p&gt;When you open a web page, your browser loads the HTML file and begins scrolling line by line, decoding each of them. Passing through all of them, the browser generates the Document Object Model (DOM), which is basically the entire structure of your website divided into kin (parents, children, etc …) as if it were a family tree.&lt;/p&gt;

&lt;p&gt;Basically, this process is divided into two strands. These are &lt;strong&gt;“Conflict Resolutions in CSS Declarations”&lt;/strong&gt; and &lt;strong&gt;“Final Processing of CSS Values”&lt;/strong&gt;. We will discuss these details later.&lt;/p&gt;

&lt;p&gt;As with HTML, now the browser will generate a structured document for CSS called CSS Object Model (CSSOM). Joining the DOM with CSSOM generates a final structure called the Render Tree.&lt;/p&gt;

&lt;p&gt;At this point, the browser is ready to render all the generated content. This is done using the &lt;strong&gt;“Visual Formatting Model”&lt;/strong&gt;, which is basically an algorithm that analyzes information such as box-model, floats and positioning of elements on the page.&lt;/p&gt;

&lt;p&gt;At this stage, the website is already rendered and ready to be used by the user. Below is an illustration of the processes we have seen so far to better understand the paths we have come to get here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--30yeVhzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j98bgrk5k7vw26qesec.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--30yeVhzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j98bgrk5k7vw26qesec.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-deeper"&gt;
  &lt;/a&gt;
  Getting deeper
&lt;/h2&gt;

&lt;p&gt;We discussed basically all the steps of handling a CSS file, but some terms were still somewhat vague. In this session, we will discuss a little more about them. Remember that I commented about the two sub-divisions during the decoding of a CSS file? Let’s understand how they operate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y0a32lZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgmloqfh38kwpc3x424b.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0a32lZm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgmloqfh38kwpc3x424b.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conflict-resolutions-in-css-declarations"&gt;
  &lt;/a&gt;
  Conflict Resolutions in CSS Declarations
&lt;/h2&gt;

&lt;p&gt;For the resolution of these conflicts CSS uses a term called Cascade, which according to &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance"&gt;MDN web docs&lt;/a&gt; has the following definition:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CSS is an acronym of Cascading Style Sheets, which indicates that the notion of the cascade is important. At its most basic level it indicates that the order of CSS rules matter, but it’s more complex than that. What selectors win out in the cascade depends on three factors (these are listed in order of weight — earlier ones will overrule later ones):&lt;br&gt;
Importance&lt;br&gt;
Specificity&lt;br&gt;
Source order&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before we talk about these factors we need to keep in mind that CSS can come from several different sources, such as author, user and the browser itself. The most common of all is the one that the developers write. They are the sources of the Author. The CSS that comes from the user is about aesthetic modifications that the user makes in the settings of his browser. And last but not least we have the browser’s own presets that already bring with them some CSS rules.&lt;/p&gt;

&lt;p&gt;The Cascade resolves declarations conflicts based on the 3 items cited in MDN Web Docs, in the following order of priority:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Importance&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User &lt;strong&gt;!important&lt;/strong&gt; declarations&lt;/li&gt;
&lt;li&gt;Author &lt;strong&gt;!important&lt;/strong&gt; declarations&lt;/li&gt;
&lt;li&gt;Author declarations&lt;/li&gt;
&lt;li&gt;User declarations&lt;/li&gt;
&lt;li&gt;Default browser declarations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Specifity&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Inline Styles&lt;/li&gt;
&lt;li&gt;IDs&lt;/li&gt;
&lt;li&gt;Classes, pseudo-classes, attributes&lt;/li&gt;
&lt;li&gt;Elements, pseudo-elements&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the conflicts are still not solved, we proceed to the final verification:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Source Order&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The last declaration of the code will override all other declarations and the style will be applied.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#final-processing-of-css-values"&gt;
  &lt;/a&gt;
  Final Processing of CSS Values
&lt;/h2&gt;

&lt;p&gt;The final processing takes place in the following order of precedence:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZgxaEzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h4la8dqd80s39vatk7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZgxaEzj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5h4la8dqd80s39vatk7c.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this stage, the process is somewhat different from what we discussed earlier. Here the values are processed and the units (rem, em,%, etc …) are converted into pixels for the correct rendering in the browser.&lt;/p&gt;

&lt;p&gt;The values declared by the developer are at the top of the chain. These values are evaluated and passed to the next step, which are the values specified by the Cascade.&lt;/p&gt;

&lt;p&gt;If the developer does not declare any specific value, such as font-size, the Cascade sets a default value that in most browsers is 16px.&lt;/p&gt;

&lt;p&gt;We then proceed to the next step which is the specific value if there is no Cascade value. All properties have a pre-set initial value, and if they reach this stage with no user-specified or Cascade value, this pre-set value comes into play. We can cite padding as an example, which if not specified by the user and not obtained in Cascade will have the default value of 0px.&lt;br&gt;
The next step is where the values are computed and converted to pixels, so they can be inherited.&lt;/p&gt;

&lt;p&gt;The process then goes through a more detailed check. Imagine that you declare a width value in percent, but when we convert to pixel the value is 130.8px. What to do with this decimal part? At the time of rendering this value will be converted to 131px by the CSS engine.&lt;/p&gt;

&lt;p&gt;Finally, in the last step, we have all the values processed and ready to be used in the layout.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Understanding the operation of the tools we use most in our daily lives as a developer is extremely useful. We can identify bugs more easily, structure our project better, and make the code legible to other developers.&lt;/p&gt;

&lt;p&gt;Now, let’s coffee + code!&lt;/p&gt;

&lt;p&gt;If this post was helpful to you, leave a comment. I’d love to hear your thoughts.&lt;/p&gt;

</description>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>The Art Of Writing Clean Code: My 5 Go-To Tricks.</title>
      <author>Mohmed Ishak</author>
      <pubDate>Sat, 22 May 2021 19:23:00 +0000</pubDate>
      <link>https://dev.to/ishakmohmed/the-art-of-writing-clean-code-my-5-go-to-tricks-4mcl</link>
      <guid>https://dev.to/ishakmohmed/the-art-of-writing-clean-code-my-5-go-to-tricks-4mcl</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vZE4_MPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9mnnhljui7yow76k46d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vZE4_MPZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v9mnnhljui7yow76k46d.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyone can code, but can you code cleanly? In this article, I'll show you my go-to clean coding techniques for better code understanding and folder structure. This applies to any tech stack you work with.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-use-a-color-palette"&gt;
  &lt;/a&gt;
  [1] Use A Color Palette
&lt;/h3&gt;

&lt;p&gt;This is one of the best decisions you can make. Using a color palette, not only you'll write cleaner code, you'll also be able to change the entire theme of your app by only changing 6 characters of code (referring to hex code). Let's take a look at a color palette I've used in my React Native project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// creating and exporting the color palette&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;black&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#000&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;darkBlue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#090446&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;darkGreen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#002E27&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;green&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#00B14F&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#ede6e6&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;medium&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#6e6969&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#fc5c65&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;purple&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#4530B3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#FFFFFF&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// using the palette (default import as colors)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;StyleSheet&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;foodName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;white&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;foodPrice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;green&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, I can change my green color to a different shade and it wouldn't affect any of my other files, but only the main palette. You can take this to the next level by declaring colors such as primary and secondary. Therefore, if your primary color is red, you can just change it to any other color by just changing your palette.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-sort-parameters-and-keys-alphabetically"&gt;
  &lt;/a&gt;
  [2] Sort Parameters and Keys Alphabetically
&lt;/h3&gt;

&lt;p&gt;It's just clean, you know it. Here are some examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;anArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;anotherArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bIsAfterA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;cIsAfterB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;moreArgument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;zIsTheLastAlphabet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;darkGreen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;borderRadius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;space-around&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-dont-be-afraid-of-expressive-naming-even-if-its-long"&gt;
  &lt;/a&gt;
  [3] Don't Be Afraid Of Expressive Naming Even If It's Long
&lt;/h3&gt;

&lt;p&gt;Everyone talks about writing short and concise codes, and that's important but for naming variables and functions, it can be the exception sometimes. Let's take a look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePress2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePress3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The naming in code snippet above can be preferred if your application is small, but for large-scale projects especially in a company, the codebase is super huge and a whole lot of engineers work on that and the last thing you want to do during a stressful day is to read a poorly written codebase and trying to figure out what it does. Here's a better naming for the above functions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePressAddButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePressCrossButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handlePressCircularView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-create-a-super-extensible-directory-structure-even-if-your-project-is-small"&gt;
  &lt;/a&gt;
  [4] Create A Super Extensible Directory Structure Even If Your Project Is Small
&lt;/h3&gt;

&lt;p&gt;This is probably the most important point in this article. In my opinion, creating an extensible project structure is easy. All you need to do it to Google it for the tech stack you use. It'll help you in every way possible during development including making you happy with your work. Here's a screenshot of one of my project structures (which I learned from a course).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GwuENTqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jibhw1stu4z1r90f7m7k.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GwuENTqy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jibhw1stu4z1r90f7m7k.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-create-small-reusable-extensible-components"&gt;
  &lt;/a&gt;
  [5] Create Small, Reusable, Extensible Components
&lt;/h3&gt;

&lt;p&gt;Here's an example of reusable component in React:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;otherProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{[&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myCustomStyle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt; &lt;span class="p"&gt;{...&lt;/span&gt;&lt;span class="nx"&gt;otherProps&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, the h1 tag is already complete on it's own with default styles. All you need to do is to use it in your app. However, due to the REST parameter as the last parameter, now the Text component may or may not have additional properties as per your wish. Not only that, the component's style is made to be in a way that is complete by itself, but also can be extended/overridden (style parameter). Using reusable components will always speed up your development time.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>reactnative</category>
      <category>react</category>
    </item>
    <item>
      <title>React Hooks Portfolio 😍</title>
      <author>Said Mounaim</author>
      <pubDate>Sat, 22 May 2021 18:50:42 +0000</pubDate>
      <link>https://dev.to/said_mounaim/react-hooks-portfolio-4if9</link>
      <guid>https://dev.to/said_mounaim/react-hooks-portfolio-4if9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#said-mounaim"&gt;
  &lt;/a&gt;
  Said MOUNAIM
&lt;/h1&gt;

&lt;p&gt;
  
    &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2LQgHMuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/N9mXnwr/sm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2LQgHMuw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ibb.co/N9mXnwr/sm.png"&gt;&lt;/a&gt;
  
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-view-a-live-example-click-here"&gt;
  &lt;/a&gt;
  To view a live example, &lt;strong&gt;&lt;a href="https://saidmounaim.netlify.app/"&gt;click here&lt;/a&gt;&lt;/strong&gt;.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;These instructions will get you a copy of the project up and running on your local machine for development and testing purposes.&lt;/p&gt;

&lt;p&gt;You'll need &lt;a href="https://git-scm.com"&gt;Git&lt;/a&gt; and &lt;a href="https://nodejs.org/en/download/"&gt;Node.js&lt;/a&gt; (which comes with &lt;a href="http://npmjs.com"&gt;npm&lt;/a&gt;) installed on your computer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;node@v10.16.0 or higher
npm@6.9.0 or higher
git@2.17.1 or higher
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How To Use
&lt;/h2&gt;

&lt;p&gt;From your command line, clone and run SMPortfolio:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# Clone this repository&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/saidMounaim/SMPortfolio.git

&lt;span class="c"&gt;# Go into the repository&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;SMPortfolio

&lt;span class="c"&gt;# Install dependencies&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="c"&gt;#Start's development server&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#technologies-used"&gt;
  &lt;/a&gt;
  Technologies Used
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://styled-components.com/"&gt;styled-components&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.react-reveal.com/"&gt;react-reveal&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.npmjs.com/package/react-lottie"&gt;react-lottie&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>100daysofcode</category>
      <category>portfolio</category>
    </item>
    <item>
      <title>What Is Simulated Annealing?</title>
      <author>Luke Garrigan</author>
      <pubDate>Sat, 22 May 2021 18:31:47 +0000</pubDate>
      <link>https://dev.to/lukegarrigan/what-is-simulated-annealing-kpn</link>
      <guid>https://dev.to/lukegarrigan/what-is-simulated-annealing-kpn</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-simulated-annealing"&gt;
  &lt;/a&gt;
  What Is Simulated Annealing?
&lt;/h1&gt;

&lt;p&gt;Today I’ve been playing around with  &lt;strong&gt;simulated annealing&lt;/strong&gt;, which is just a  &lt;a href="https://www.wikiwand.com/en/Simulated_annealing#:~:text=Simulated%20annealing%20(SA)%20is%20a,space%20for%20an%20optimization%20problem."&gt;probabilistic technique for approximating the global optimum&lt;/a&gt;. Don’t let that put you off, it sounds far more complicated than it really is.&lt;/p&gt;

&lt;p&gt;The name of the algorithm is stolen from  &lt;a href="https://www.wikiwand.com/en/Annealing_(metallurgy)"&gt;metallurgy&lt;/a&gt;. Annealing is a heat treatment that alters the physical and sometimes chemical properties of a material, it involves heating a metal and then slowly cooling at a specific rate.&lt;/p&gt;

&lt;p&gt;I have put together a really simple example to help explain the purpose and application of such an algorithm.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hill-climbing"&gt;
  &lt;/a&gt;
  Hill climbing
&lt;/h2&gt;

&lt;p&gt;Let’s say our protagonist is a skier. Skiers – I assume – always want to get to the highest point of the mountain so they can ski as fast as possible. Let’s write a very simple algorithm that determines how the skier climbs the mountain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;findHighestPoint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heightOfHillToRight&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Seems simple enough. If the position to our right is the same height or higher let’s move to the right, otherwise let’s move to the left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BQvsp04---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i0.wp.com/codeheir.com/wp-content/uploads/2021/05/1-1.gif%3Fresize%3D716%252C537%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BQvsp04---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i0.wp.com/codeheir.com/wp-content/uploads/2021/05/1-1.gif%3Fresize%3D716%252C537%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve cracked it haven’t we? Our skier can find the top of every mountain?&lt;/p&gt;

&lt;p&gt;Not quite:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QpU_xSYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i2.wp.com/codeheir.com/wp-content/uploads/2021/05/2-1.gif%3Fresize%3D716%252C537%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QpU_xSYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i2.wp.com/codeheir.com/wp-content/uploads/2021/05/2-1.gif%3Fresize%3D716%252C537%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our skier has hit what we call the  &lt;a href="https://www.wikiwand.com/en/Maxima_and_minima"&gt;local maxima&lt;/a&gt;, where it thinks it’s at the highest point. In order for the skier to find the global maxima (Highest point) it’ll first need to go down before it goes up. This is where simulated annealing comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-algorithm"&gt;
  &lt;/a&gt;
  The algorithm
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt; Choose a neighbour&lt;/li&gt;
&lt;li&gt; Calculate the cost of the neighbour &lt;/li&gt;
&lt;li&gt; Compare the new cost with the old cost

&lt;ol&gt;
&lt;li&gt; &lt;code&gt;if (newCost &amp;lt; oldCost)&lt;/code&gt;: move to neighbour&lt;/li&gt;
&lt;li&gt; &lt;code&gt;if (newCost &amp;gt; oldCost&lt;/code&gt;):  &lt;em&gt;potentially&lt;/em&gt;  move to neighbour&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt; Repeat until a solution is found or we reach the maximum iterations&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s put this into plain English for our simple hill climbing example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choose a neighbour&lt;/strong&gt;: This will simply be a position on the hill the skier can move to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calculate the cost of the neighbour&lt;/strong&gt;: This is the height of the hill at that position, so for us the higher the better - meaning the cost goes up as the hill goes down.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compare the new cost with the old cost&lt;/strong&gt;: So if the new position is at a higher point on the mountain then we will move to that position. If the new position is not at a higher point on the mountain we will potentially move to that position (This is the important bit).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-temperature"&gt;
  &lt;/a&gt;
  The temperature
&lt;/h2&gt;

&lt;p&gt;The temperature is very important to the algorithm, it controls the probability of us choosing to go down the hill in the hope to go up at a later point.&lt;/p&gt;

&lt;p&gt;The temperature will start at 1.0 and will be decreased each iteration by some constant, in my example I use 0.99.&lt;/p&gt;

&lt;p&gt;The equation that we’re going to use to determine the acceptance probability, i.e the probability of us going down the hill is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;newScore&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For a given neighbour, the probability will get smaller as the iterations tick by (Because the temperature decreases each iteration). Meaning the likelihood of us choosing to go down decreases.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;simulatedAnnealing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;minTemp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;neighbour&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNeighbours&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;neighbour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;neighbour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;neighbour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;score&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;prob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;neighbour&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;    

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#lets-put-it-to-the-test"&gt;
  &lt;/a&gt;
  Let’s put it to the test
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qOu5x4wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i1.wp.com/codeheir.com/wp-content/uploads/2021/05/3-1.gif%3Fresize%3D716%252C537%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qOu5x4wa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i1.wp.com/codeheir.com/wp-content/uploads/2021/05/3-1.gif%3Fresize%3D716%252C537%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome, in this example you can see how the temperature decreased as it tried to go back down the hill towards the end but eventually decided against it!&lt;/p&gt;

&lt;p&gt;Let’s try a more complicated example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W1ZCASH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i1.wp.com/codeheir.com/wp-content/uploads/2021/05/4-1.gif%3Fresize%3D716%252C537%26ssl%3D1" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W1ZCASH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i1.wp.com/codeheir.com/wp-content/uploads/2021/05/4-1.gif%3Fresize%3D716%252C537%26ssl%3D1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Well, I had a lot of fun implementing that, if you want to have a trawl through the code I wrote or mess with the algorithm yourself –  &lt;a href="https://editor.p5js.org/codeheir/sketches/bGSBBXpdN"&gt;go here&lt;/a&gt;  and have a play!&lt;/p&gt;

&lt;p&gt;I took a lot of inspiration for this blog from this  &lt;a href="http://katrinaeg.com/simulated-annealing.html"&gt;post by Katrina Ellison&lt;/a&gt; &lt;br&gt;
 and got the hill climbing idea from this  &lt;a href="https://www.youtube.com/watch?v=S9vs05eAGN0"&gt;video by Erir Schirtzinger&lt;/a&gt;  so credit to them!&lt;/p&gt;

&lt;p&gt;I hope you've enjoyed this blog, if you do by some miracle enjoy my blabbering then head over to my blogging site at codeheir.com where I write weekly blogs about whatever in the world of programming has my attention!&lt;/p&gt;

</description>
      <category>algorithms</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Weatherify: A Weather App built with React.💙</title>
      <author>Mohammed Farmaan.</author>
      <pubDate>Sat, 22 May 2021 18:02:53 +0000</pubDate>
      <link>https://dev.to/mohammedfarmaan/weatherify-weather-app-built-with-react-3038</link>
      <guid>https://dev.to/mohammedfarmaan/weatherify-weather-app-built-with-react-3038</guid>
      <description>&lt;h1&gt;
  &lt;a href="#hey-there-everyone-hope-youre-all-doing-good"&gt;
  &lt;/a&gt;
  Hey there everyone! Hope you're all doing good.
&lt;/h1&gt;

&lt;p&gt;So it's been a month since I started learning React, and I can say that I'm loving it so far. And to understand it even better, I decided to follow the project-based approach.&lt;/p&gt;

&lt;p&gt;After thinking a lot I decided to make a weather app that can have dynamic backgrounds. So finally after a lot of ups and downs, here it is:&lt;br&gt;
It's called Weatherify. This app gives the current weather details of most of the cities in the world. I've used Open Weather Map API to fetch weather data and Pexels API to get images and dynamically set them as background.&lt;/p&gt;

&lt;p&gt;Here are its screenshots:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v_gq9ljj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxlijpmry9jck211lu00.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v_gq9ljj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxlijpmry9jck211lu00.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It gets a new background image after each search:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YxKKrrsC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04bjw0vzlcwbvlnbzpob.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YxKKrrsC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04bjw0vzlcwbvlnbzpob.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So here it is guys. I've hosted it on Firebase and made it Open-Source so that it'll help someone as a beginner-friendly project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's the link to the live demo:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://weatherify-react.web.app/"&gt;https://weatherify-react.web.app/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here's the link to GitHub repo:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/zxcodes/Weatherify-Web"&gt;https://github.com/zxcodes/Weatherify-Web&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#open-to-suggestions-and-feedback"&gt;
  &lt;/a&gt;
  Open to suggestions and feedback.😄
&lt;/h1&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>showdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Storing Dotfiles in a Git Repo</title>
      <author>Mat Jones</author>
      <pubDate>Sat, 22 May 2021 17:54:21 +0000</pubDate>
      <link>https://dev.to/matjones/storing-dotfiles-in-a-git-repo-342i</link>
      <guid>https://dev.to/matjones/storing-dotfiles-in-a-git-repo-342i</guid>
      <description>&lt;p&gt;Everyone has seen those &lt;code&gt;dotfiles&lt;/code&gt; repositories on GitHub. There's lots of different ways to manage them, but the method I use now requires no extra tooling (other than &lt;code&gt;git&lt;/code&gt; and a command line shell of your choice), no symbolic links to get files into the right locations, can be triggered from any directory on disk, and is easy to replicate on a new system.&lt;/p&gt;

&lt;p&gt;Basically what we're going to do is set up a git repository at &lt;code&gt;~/.cfg&lt;/code&gt; or &lt;code&gt;~/.dotfiles&lt;/code&gt; or any directory within your home directory of your choosing (although you probably &lt;em&gt;don't&lt;/em&gt; want to use &lt;code&gt;~/.config&lt;/code&gt; since that is the default value of &lt;a href="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html"&gt;$XDG_CONFIG_HOME&lt;/a&gt;), and a shell alias to help manage and control it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-repo"&gt;
  &lt;/a&gt;
  Creating the Repo
&lt;/h2&gt;

&lt;p&gt;If you're setting this up the first time, there's a few steps you'll need to take to set up. First, create the repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git init &lt;span class="nt"&gt;--bare&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.dotfiles
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This creates a "bare" git repository at &lt;code&gt;~/.dotfiles&lt;/code&gt;. Now we'll set up an alias to interact with it from any directory on disk. Add the following alias to your &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt; or &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file, then &lt;code&gt;source&lt;/code&gt; the file:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# make sure the --git-dir is the same as the&lt;/span&gt;
&lt;span class="c"&gt;# directory where you created the repo above.&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"git --git-dir=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.dotfiles --work-tree=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;--work-tree=$HOME&lt;/code&gt; option sets the directory that the repository tracks to your home directory. Now, since there's probably more files in your home directory that you &lt;em&gt;don't&lt;/em&gt; want in the repo than files you &lt;em&gt;do&lt;/em&gt; want in the repo, you should configure the repo to not show untracked files by default. We can do that by setting a repository-local configuration option.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;config config &lt;span class="nt"&gt;--local&lt;/span&gt; status.showUntrackedFiles no
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#tracking-files"&gt;
  &lt;/a&gt;
  Tracking Files
&lt;/h2&gt;

&lt;p&gt;To track files in our new &lt;code&gt;~/.dotfiles&lt;/code&gt; repo, we just need to add them. From any directory on disk, you can run the following command to add your &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt; or &lt;code&gt;~/.config/fish/config.fish&lt;/code&gt; file to your new dotfiles repo:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;config add ~/.bashrc
config add ~/.zshrc
config add ~/.config/fish/config.fish

config commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Add .bashrc/.zshrc/config.fish file"&lt;/span&gt;
config push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#installing-on-a-new-system"&gt;
  &lt;/a&gt;
  Installing on a New System
&lt;/h2&gt;

&lt;p&gt;Of course, the main point of doing this is to easily sync your config across new machines. We can easily do this with a small bash script to initialize the system's dotfiles from your git repository.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

git clone &lt;span class="nt"&gt;--bare&lt;/span&gt; git@github.com:mrjones2014/dotfiles.git &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.dotfiles

&lt;span class="c"&gt;# define config alias locally since the dotfiles&lt;/span&gt;
&lt;span class="c"&gt;# aren't installed on the system yet&lt;/span&gt;
&lt;span class="k"&gt;function &lt;/span&gt;config &lt;span class="o"&gt;{&lt;/span&gt;
   git &lt;span class="nt"&gt;--git-dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.dotfiles/ &lt;span class="nt"&gt;--work-tree&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# create a directory to backup existing dotfiles to&lt;/span&gt;
&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; .dotfiles-backup
config checkout
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0 &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Checked out dotfiles from git@github.com:mrjones2014/dotfiles.git"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;else
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Moving existing dotfiles to ~/.dotfiles-backup"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    config checkout 2&amp;gt;&amp;amp;1 | egrep &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="s2"&gt;+&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nb"&gt;awk&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;'print $1'&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt; | xargs &lt;span class="nt"&gt;-I&lt;/span&gt;&lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="nb"&gt;mv&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; .dotfiles-backup/&lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="c"&gt;# checkout dotfiles from repo&lt;/span&gt;
config checkout
config config status.showUntrackedFiles no
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Now, installing your dotfiles on a new system is as simple as running:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl https://raw.githubusercontent.com/mrjones2014/dotfiles/master/scripts/config-init | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#thats-really-it"&gt;
  &lt;/a&gt;
  That's Really It
&lt;/h2&gt;

&lt;p&gt;That's really all there is to it. Now you can easily add and track changes to dotfiles via your new &lt;code&gt;config&lt;/code&gt; shell alias.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;config add ~/.config/something/somefile
config commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"add somefile"&lt;/span&gt;
config push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Comment below with your dotfiles repo links! Feel free to browse mine for inspiration.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mrjones2014"&gt;
        mrjones2014
      &lt;/a&gt; / &lt;a href="https://github.com/mrjones2014/dotfiles"&gt;
        dotfiles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      My UNIX dotfiles; configuration for fish shell, vim/neovim, etc.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Installing on a New System&lt;/h1&gt;
&lt;p&gt;You can run the following to get these dotfiles installed on your system. It will make a backup of your existing dotfiles.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;curl https://raw.githubusercontent.com/mrjones2014/dotfiles/master/scripts/config-init &lt;span class="pl-k"&gt;|&lt;/span&gt; bash&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Manual Config&lt;/h2&gt;
&lt;h3&gt;
Package Manamement&lt;/h3&gt;
&lt;p&gt;You'll need/want to install &lt;a href="https://brew.sh" rel="nofollow"&gt;Homebrew&lt;/a&gt;. For Apple Silicon Macs you'll need to run the &lt;code&gt;brew&lt;/code&gt; install script
as well as &lt;code&gt;brew&lt;/code&gt; itself through Rosetta until Homebrew is updated to support Apple Silicon natively
See &lt;a href="https://stackoverflow.com/questions/64882584/how-to-run-the-homebrew-installer-under-rosetta-2-on-m1-macbook/64883440" rel="nofollow"&gt;here&lt;/a&gt; for how to do so.&lt;/p&gt;
&lt;h3&gt;
Packages&lt;/h3&gt;
&lt;p&gt;There are some global installations that are required for some of the shell and nvim CoC configuration. The &lt;code&gt;check-globals.fish&lt;/code&gt; script should output help text
for installing them if they're missing.&lt;/p&gt;
&lt;h3&gt;
Shell&lt;/h3&gt;
&lt;p&gt;You'll need to install &lt;a href="https://github.com/fish-shell/fish-shell"&gt;Fish Shell&lt;/a&gt; before the shell config will work, since its a Fish config.&lt;/p&gt;
&lt;h2&gt;
Neovim Config&lt;/h2&gt;
&lt;p&gt;The Neovim configuration is using some Lua-based plugins, like TreeSitter for syntax highlighting, Telescope for file finding and live grep
which means you…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mrjones2014/dotfiles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>bash</category>
      <category>vim</category>
      <category>dotfiles</category>
      <category>git</category>
    </item>
    <item>
      <title>Virtualizing the CPU</title>
      <author>thesystemsprogrammer</author>
      <pubDate>Sat, 22 May 2021 17:40:51 +0000</pubDate>
      <link>https://dev.to/thesystemsprogrammer/virtualizing-the-cpu-30a8</link>
      <guid>https://dev.to/thesystemsprogrammer/virtualizing-the-cpu-30a8</guid>
      <description>&lt;p&gt;Have you ever wondered how your 6-core MacBook is able to run more than 6 programs at once? Each core is executing one instruction at a time, it’s bizarre to me that it’s able to run more than 6 applications. That’s the magic of the operating system.&lt;/p&gt;

&lt;p&gt;The most fundamental piece of hardware in a computer is its CPU. The CPU (central processing unit) executes instructions given to it and performs logic computations very quickly. In this article, we’ll talk about how the operating system makes it seem like all the programs on your computer have exclusive access to the CPU resource, when in reality, it’s shared across all of them.&lt;/p&gt;

&lt;p&gt;To do this, the operating system uses an abstraction called a process. A process is an executing instance of a program. Each process is given some time to use the CPU and then that access is revoked and another process is given some time to use the CPU. This happens so quickly, humans don’t notice a pause when using these programs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#process-initialization"&gt;
  &lt;/a&gt;
  Process Initialization
&lt;/h2&gt;

&lt;p&gt;So how does a program get run in the first place? A program is just a file with data in it. The data is stored on a computer’s disk. To run a program, the operating system must first take the data on disk and move it to memory since a CPU cannot directly access the disk. For a CPU to interact with the disk, it must initiate an I/O request which, at a high level, involves sending messages back and forth between itself and the disk’s controller. The I/O is complete once the data is moved from disk into memory. Additionally, the operating system will allocate some stack and heap memory for the process to use during run-time.&lt;/p&gt;

&lt;p&gt;Once a process has been created it is put into the READY state. The operating system groups processes into different states which can be generically categorized as READY, RUNNING, or BLOCKED. READY implies that the operating system can schedule it to be run on a CPU. Once the operating system has scheduled a program to run it is put in the RUNNING state as its instructions are executed on the CPU. Now, say the program wants to interact with disk, instead of waiting for the disk I/O to complete, which can take awhile, the process is put in a BLOCKED state in which it is descheduled from the CPU. During this time, another READY process can run on the CPU. Once disk I/O is completed, the process is put back into the READY state where the operating system can choose to schedule it again.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resource-sharing"&gt;
  &lt;/a&gt;
  Resource Sharing
&lt;/h2&gt;

&lt;p&gt;Wait a minute...if the operating system schedules a process to run on the CPU and the CPU is running the instructions of that process, how is the operating system able to tell the CPU to start executing the instructions of a different process? What if that process runs in an infinite-loop, does that mean no other processes on the operating system will be able to run? After all, the operating system is also just software running on the CPU. The answer to this question is a hardware-based timer-interrupt. This timer-interrupt runs at a predetermined interval and when it is run, the CPU jumps to a specific location in memory and starts executing instructions at that memory address. This memory address is the operating systems timer interrupt handler. At a high-level, the interrupt handler will determine whether or not the currently running process has been running too long and needs to be descheduled in favor of another READY process. If that’s the case, then the operating system will make the switch.&lt;/p&gt;

&lt;p&gt;But what does “make the switch” even mean? The operating system has to take the state of the currently running process, save it into the operating system’s memory, take the state of the to-be-scheduled process from the operating system’s memory, load it and then run it on the CPU. The state that we’re referring to here is the CPUs registers. When a CPU does logical operations, it operates on values stored in registers on the CPU. Things like the memory address of the currently executing instruction are stored in a register.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scheduling"&gt;
  &lt;/a&gt;
  Scheduling
&lt;/h2&gt;

&lt;p&gt;One thing we didn’t talk about in detail is how the operating system decides what program should be run next. Scheduling is a widely studied discipline but we will only touch a brief part of it. The goals of an operating system scheduler are generally to minimize the amount of idle time (the amount of time a process isn’t running) while also ensuring fairness (all processes get an equal chunk of time to run). Let’s look at a couple scheduling policies and understand their pros and cons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First-in First-Out&lt;/strong&gt; This implies that a process that is scheduled will run to completion before another process is scheduled on the operating system. The benefit is that there is no overhead of context switching (saving registers into memory and then loading them again later) so it may minimize the amount of time necessary for all programs to reach completion. However, it’s not necessarily fair. What happens if program A is constantly running and never stops? Program B which was added after program A will never run!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Round Robin&lt;/strong&gt; Round robin works by always switching the scheduled process during a timer interrupt. It gives each process a time slice and once that time slice has expired, the next process in line is scheduled. This scheduling policy is the most fair but the constant context switches could drastically degrade performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now that we understand how the physical resource of the CPU is virtualized by the operating system, it should make more sense how the operating system is able to give the illusion that all processes have exclusive access to the CPU. One burning question you may have is: how does the operating give each process the illusion that it each has its own address space?&lt;/p&gt;

&lt;p&gt;If you have any questions, don’t hesitate to email me at &lt;a href="//mailto:contact@thesystemsprogrammer.com"&gt;contact@thesystemsprogrammer.com&lt;/a&gt; or DM me on Twitter &lt;a href="https://twitter.com/asystemshacker"&gt;@asystemshacker&lt;/a&gt;&lt;/p&gt;

</description>
      <category>systems</category>
      <category>hardware</category>
      <category>computerscience</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Vim Reference</title>
      <author>Richard</author>
      <pubDate>Sat, 22 May 2021 17:37:33 +0000</pubDate>
      <link>https://dev.to/merichard123/the-vim-reference-55b8</link>
      <guid>https://dev.to/merichard123/the-vim-reference-55b8</guid>
      <description>&lt;p&gt;Recently I decided to learn vim after hearing how much Ben Awad loves it. I though maybe it could boost my productivity too. I am still getting use to it, but right now it seems pretty fun.&lt;/p&gt;

&lt;p&gt;Now to the reference. Here are some useful commands and what they do: &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-vim"&gt;
  &lt;/a&gt;
  Using Vim
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Open Vim: &lt;code&gt;vim filename&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Closing Vim:

&lt;ul&gt;
&lt;li&gt; &lt;code&gt;:wq&lt;/code&gt; -&amp;gt; save and quit&lt;/li&gt;
&lt;li&gt; &lt;code&gt;:q&lt;/code&gt; -&amp;gt;  quit and not save&lt;/li&gt;
&lt;li&gt; &lt;code&gt;:w&lt;/code&gt; -&amp;gt; save and not quit&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#movements"&gt;
  &lt;/a&gt;
  Movements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; Hitting gg will take you to the top of file&lt;/li&gt;
&lt;li&gt; G takes you to the bottom&lt;/li&gt;
&lt;li&gt; } and { navigate code blocks&lt;/li&gt;
&lt;li&gt; o adding a new line and put into insert mode&lt;/li&gt;
&lt;li&gt; O adding a new line above and put into insert mode&lt;/li&gt;
&lt;li&gt; w will jump to next word b will take you back&lt;/li&gt;
&lt;li&gt; &lt;code&gt;:number&lt;/code&gt; will take you to line number&lt;/li&gt;
&lt;li&gt; 0 will take you to the start of the line&lt;/li&gt;
&lt;li&gt; 0 + w  or ^ will take you to the first word of a line&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;h j k l&lt;/code&gt; to move up down left and right &lt;/li&gt;
&lt;li&gt;
a move over by  1 and set insert mode&lt;/li&gt;
&lt;li&gt;
A  jump to end and set insert mode &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#editing"&gt;
  &lt;/a&gt;
  Editing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Hitting "i" in command mode lets you insert &lt;/li&gt;
&lt;li&gt;Hitting shift + i will set insert mode at the beginning of the line &lt;/li&gt;
&lt;li&gt;Then esc puts you back into command mode &lt;/li&gt;
&lt;li&gt;Hitting dd  will delete a line and copy to clip board &lt;/li&gt;
&lt;li&gt;Hitting d + } will delete a whole block of code&lt;/li&gt;
&lt;li&gt;Hitting 10 dd will delete 10 lines&lt;/li&gt;
&lt;li&gt;Hitting &lt;code&gt;u&lt;/code&gt; will undo &lt;/li&gt;
&lt;li&gt;Hitting ctrl + r will redo&lt;/li&gt;
&lt;li&gt; Hitting yy will copy a line&lt;/li&gt;
&lt;li&gt; p to paste bellow P to paste above&lt;/li&gt;
&lt;li&gt; x remove a letter where the cursor is&lt;/li&gt;
&lt;li&gt; number x remove number letters before cursor&lt;/li&gt;
&lt;li&gt; ~ swap the case of the letter prefix with number for multiple characters&lt;/li&gt;
&lt;li&gt;&lt;p&gt;. redo&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;$ will take you to the end of a line&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;W will jump spaces and B reverses that&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;f + char find and place cursor on char&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;t + charfind and place cursor before char&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;% take you to and from closing brackets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;d + % remove code between brackets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;c + w change mode and word will remove a word and set insert mode&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;D remove everthing from cursor onwards&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;c + t + char edit from cursor to char&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C change whole line&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;d + t + char delete from cursor to char&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;* take you to occurances of the word where your cursor is&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;; take you to next instance after using a find command&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;r + char replace letter at cursor with char prefix with number for multiple replaces&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;R allow to replace lots of letters into replace mode&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;/word highlight all occurances of word&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#macros"&gt;
  &lt;/a&gt;
  Macros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Press q to start recording then select a hotkey. Now run some commands and hit q to end. Then hit @ hotkey to replay a command. Prefix &lt;code&gt;@&lt;/code&gt; with a number to replace that many times&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#visual-mode-v"&gt;
  &lt;/a&gt;
  Visual Mode: V
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Select text with movement commands then you can hit:

&lt;ul&gt;
&lt;li&gt;
d to delete&lt;/li&gt;
&lt;li&gt;After selected &amp;gt; or &amp;lt; to indent code.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
shift + v selects the whole line and puts you into visual mode.&lt;/li&gt;
&lt;li&gt;
v + move select from cursor while move&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#visual-block-mode"&gt;
  &lt;/a&gt;
  Visual Block Mode
&lt;/h4&gt;

&lt;p&gt;ctrl + v enter visual block mode. Now you can select columns and hit &lt;code&gt;r&lt;/code&gt; to replace things.&lt;br&gt;
In visual block mode hitting shift i will allow you to type and then after you hit esc the text will appear in all places selected.&lt;/p&gt;




&lt;p&gt;Thank you for referring to this guide, I hope you found it useful.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Photo by Bich Tran from Pexels&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>vim</category>
      <category>productivity</category>
      <category>programming</category>
    </item>
    <item>
      <title>⭐Building a Quiz Application in Python [video]</title>
      <author>The Nerdy Dev</author>
      <pubDate>Sat, 22 May 2021 17:18:54 +0000</pubDate>
      <link>https://dev.to/thenerdydev/building-a-quiz-application-in-python-video-17k2</link>
      <guid>https://dev.to/thenerdydev/building-a-quiz-application-in-python-video-17k2</guid>
      <description>&lt;p&gt;In this video, we will learn how we can create a Quiz Application using Python. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kqa-BYI46ss"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Follow me on:&lt;br&gt;
👉 Twitter: &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;br&gt;
👉 Instagram: &lt;a href="https://instagram.com/thenerdydev"&gt;https://instagram.com/thenerdydev&lt;/a&gt;&lt;br&gt;
👉 YouTube: &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - Make sure to subscribe to my YouTube Channel for FREE content on Web Development and loads of other technologies. &lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Creating Our First Controller</title>
      <author>Lev Eidelman Nagar</author>
      <pubDate>Sat, 22 May 2021 16:45:53 +0000</pubDate>
      <link>https://dev.to/eidellev/creating-our-first-controller-2cjk</link>
      <guid>https://dev.to/eidellev/creating-our-first-controller-2cjk</guid>
      <description>&lt;p&gt;In my last post we set up Inertia and Adonis. Now that we have a solid foundation to build upon, let us continue fleshing out our CRM app.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-first-controller"&gt;
  &lt;/a&gt;
  Our First Controller
&lt;/h2&gt;

&lt;p&gt;In my previous post we used a closure route to test everything worked end-to-end. This is fine for simple one-off routes (things like the "about" page for instance), but for more demanding routes, we'll usually reach for a controller.&lt;br&gt;
Let us therefore use &lt;code&gt;ace&lt;/code&gt; to scaffold a resourceful controller:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node ace make:controller user &lt;span class="nt"&gt;-r&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Sg8cS5E3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e169boywjot3mkoaywmu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sg8cS5E3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e169boywjot3mkoaywmu.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a moment to look at the new controller, &lt;code&gt;Ace&lt;/code&gt; created for you. This is a basic template for our future CRUD operations:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;HttpContextContract&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@ioc:Adonis/Core/HttpContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UsersController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="p"&gt;({}:&lt;/span&gt; &lt;span class="nx"&gt;HttpContextContract&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="p"&gt;({}:&lt;/span&gt; &lt;span class="nx"&gt;HttpContextContract&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="p"&gt;({}:&lt;/span&gt; &lt;span class="nx"&gt;HttpContextContract&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;show&lt;/span&gt; &lt;span class="p"&gt;({}:&lt;/span&gt; &lt;span class="nx"&gt;HttpContextContract&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;edit&lt;/span&gt; &lt;span class="p"&gt;({}:&lt;/span&gt; &lt;span class="nx"&gt;HttpContextContract&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="p"&gt;({}:&lt;/span&gt; &lt;span class="nx"&gt;HttpContextContract&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;destroy&lt;/span&gt; &lt;span class="p"&gt;({}:&lt;/span&gt; &lt;span class="nx"&gt;HttpContextContract&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's connect some routes to the users controller.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-resource-routes"&gt;
  &lt;/a&gt;
  Configuring Resource Routes
&lt;/h2&gt;

&lt;p&gt;Open &lt;code&gt;start/routes.ts&lt;/code&gt; and delete the route we previously created. Instead add this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;UsersController&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This doesn't look like much, but let's see what routes were automatically created for us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;node ace list:routes
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ACG9WyBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j91tvyd7jpjp0m7jo99.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ACG9WyBC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j91tvyd7jpjp0m7jo99.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty neat! Adonis automatically created a route for each controller method.&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Consecutive difference of elements in an Array</title>
      <author>Mayank Pathak</author>
      <pubDate>Sat, 22 May 2021 16:39:07 +0000</pubDate>
      <link>https://dev.to/mayankpathak/consecutive-difference-of-elements-in-an-array-3hih</link>
      <guid>https://dev.to/mayankpathak/consecutive-difference-of-elements-in-an-array-3hih</guid>
      <description>&lt;p&gt;Hi👋 guys, In this post we gonna check a most basic but most important programming problem in which we have to find the consecutive difference of elements in a given Array. This problem I came across when I was giving a coding👨‍💻 test🧪 during my placement 👨‍✈️ season.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem-description"&gt;
  &lt;/a&gt;
  Problem description
&lt;/h3&gt;

&lt;p&gt;You are given with a circular array. Your task is calculate the difference between two consecutive number. And if difference is greater than ‘k’, print 1 else print 0&lt;/p&gt;

&lt;p&gt;Input Description: You are given two numbers ‘n’, ’m’. Next line contains n space separated integers.&lt;/p&gt;

&lt;p&gt;Output Description: Print 1 if the difference is greater than ‘m’.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sample Input :&lt;/em&gt;&lt;br&gt;
5 15&lt;br&gt;
50 65 85 98 35&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sample Output :&lt;/em&gt;&lt;br&gt;
 0 1 0 1 0&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cjTk1xYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ey26wxo1vv0r2oxkt6rg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cjTk1xYn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ey26wxo1vv0r2oxkt6rg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#logic-to-follow-to-comeup-with-the-solution-"&gt;
  &lt;/a&gt;
  Logic to follow to come-up with the solution :
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Declare the required sets of variables to use in the code.&lt;/li&gt;


&lt;li&gt;Input the user input size of the array and its elements.&lt;/li&gt;

&lt;li&gt;Now iterate from initialization as 0 till the second last element.&lt;/li&gt;

&lt;li&gt;And inside it finds the absolute difference of two consecutive numbers, also if the difference is greater than the inputted value then prints 1 or in other case print 0.&lt;/li&gt;

(Absolute convert the -ve computed value into +ve. Ex. abs (-15) to (15)

&lt;li&gt;Now iterate from second last element till the last element, this is done to compute the difference of last and first element of the array.&lt;/li&gt;

&lt;li&gt;Similarly, inside it find the absolute difference of two consecutive numbers, also if the difference is greater than the inputted value then prints 1 or in other case print 0.&lt;/li&gt;

&lt;li&gt;At last we get the required set of the 1’s and 0’s by computing the absolute difference.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#now-lets-come-to-the-coding-part-of-the-problem"&gt;
  &lt;/a&gt;
  Now let's come to the coding part of the problem👨‍💻
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Code ✍&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
int main() {
    int n,k;
    cin&amp;gt;&amp;gt;n&amp;gt;&amp;gt;k;
    int a[n];
    for(int i=0;i&amp;lt;n;i++)
    {
        cin&amp;gt;&amp;gt;a[i];
    }
    for(int i=0;i&amp;lt;n-1;i++)
    {
        if(abs(a[i]-a[i+1])&amp;gt;k)
        {
            cout&amp;lt;&amp;lt;"1 ";
        }
        if(abs(a[i]-a[i+1])&amp;lt;=k)
        {
            cout&amp;lt;&amp;lt;"0 ";
        }
    }
      for(int i=n-1;i&amp;lt;n;i++)
    {
        if(abs(a[n-1]-a[0])&amp;gt;k)
        {
            cout&amp;lt;&amp;lt;"1";
        }
        if(abs(a[n-1]-a[0])&amp;lt;=k)
        {
            cout&amp;lt;&amp;lt;"0";
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Sample Input&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;5 15
50 65 85 98 35
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Sample Output&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;0 1 0 1 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hence with the required set of problem we came across to know one of the important problem in Array and we can make the concept array strong with practicing such kinds of problem as much as we can.&lt;/p&gt;

&lt;p&gt;Hope with this you learned and acquired some basic knowledge on C++ Programming.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drop a Love❤&lt;/strong&gt; if you liked👍 this post, then share 🤝this with your friends and if anything is confusing or incorrect then let me know in the comment section.&lt;/p&gt;

&lt;p&gt;Thanks from my side, this is Mayank, keep learning and exploring !!&lt;/p&gt;

&lt;p&gt;Support Me to write great articles by Clicking👇&lt;br&gt;
&lt;a href="https://www.buymeacoffee.com/mayankpathak"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Meet you in the next article......till than see ya🤚&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>cpp</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
