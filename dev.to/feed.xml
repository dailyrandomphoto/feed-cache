<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Azure DevOps: Terraform variables with Azure Key Vault</title>
      <author>James Cook</author>
      <pubDate>Mon, 09 Aug 2021 07:23:36 +0000</pubDate>
      <link>https://dev.to/officialcookj/azure-devops-terraform-variables-with-azure-key-vault-1m1</link>
      <guid>https://dev.to/officialcookj/azure-devops-terraform-variables-with-azure-key-vault-1m1</guid>
      <description>&lt;p&gt;We use variables when creating Terraform configuration files to be able to change and adapt our code to be reusable. When configuring variables, the best method for me was selecting a single location for both sensitive (secrets) and non-sensitive (resource names, etc..) information, allowing me to manage variables in one place. In this post I will cover how to use variables in Terraform, how to store variables in Azure Key Vault and how to use these variables in Azure DevOps as part of a deployment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-configure-variables-using-terraform"&gt;
  &lt;/a&gt;
  How to configure variables using Terraform
&lt;/h2&gt;

&lt;p&gt;First you need to declare a variable in the Terraform code you are writing. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;variable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"VMPASS"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;string&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I would usually put all my variables in a separate file but in the same directory to make it easier for myself to locate and manage them.&lt;/p&gt;

&lt;p&gt;Once configured, you can use the variable in the code by replacing the string you would enter with the variable, for example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;password&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;var.VMPASS&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure you commit your code to a repository in Azure DevOps.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storing-variables-in-azure-key-vault"&gt;
  &lt;/a&gt;
  Storing variables in Azure Key Vault
&lt;/h2&gt;

&lt;p&gt;Very simple, create your Azure Key Vault if you haven't done so already. From within the Key Vault resource you will need to create a secret by selecting &lt;strong&gt;Secrets&lt;/strong&gt; from the side menu.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--syoVhWAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628261195095/G4mmUp9uG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--syoVhWAz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628261195095/G4mmUp9uG.png" alt="secrets.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now select &lt;strong&gt;Generate/Import&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--05PfQT_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628261376220/_dp-mvhc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05PfQT_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628261376220/_dp-mvhc0.png" alt="generate and import.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here create the name of the secret for the variable and the value you require for your code. Please note Azure Key Vault does not support curtain characters, for example underscore which is something we require when using external sources for variables. Click &lt;a href="https://docs.microsoft.com/en-us/azure/key-vault/general/about-keys-secrets-certificates#vault-name-and-object-name"&gt;here&lt;/a&gt; for more information but we will cover in the next section how we remap these.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#link-azure-devops-to-key-vault"&gt;
  &lt;/a&gt;
  Link Azure DevOps to Key Vault
&lt;/h2&gt;

&lt;p&gt;We now need to link our Azure DevOps to Azure Key Vault. Open your project within Azure DevOps and from the side menu select &lt;strong&gt;Pipelines&lt;/strong&gt; then &lt;strong&gt;Library&lt;/strong&gt;. Here select &lt;strong&gt;Variable group&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GEpbJBbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628262311809/zwJRMrREz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GEpbJBbJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628262311809/zwJRMrREz.png" alt="variable group.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give your Variable Group a name and enable the &lt;strong&gt;Link secrets from an Azure key vault as variables&lt;/strong&gt; toggle. From here you want to select the Azure Subscription and Key Vault you created your Terraform variables in (if you haven't linked your Azure subscription to Azure DevOps, use the &lt;strong&gt;Manage&lt;/strong&gt; link to create a Service Principal).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lPkFfGri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628262521525/LPiU_HRXw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lPkFfGri--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628262521525/LPiU_HRXw.png" alt="link key vault.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You might be asked to &lt;strong&gt;Authorize&lt;/strong&gt; the access to the Key Vault but once this is done, you can select the &lt;strong&gt;Add&lt;/strong&gt; option to add secrets to your variable library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G7c-DjCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628262888632/d6o-DbmVU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7c-DjCf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628262888632/d6o-DbmVU.png" alt="add.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now click &lt;strong&gt;Save&lt;/strong&gt; to complete the library creation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-variables-in-your-pipeline"&gt;
  &lt;/a&gt;
  How to use variables in your pipeline
&lt;/h2&gt;

&lt;p&gt;Finally we need to either edit an existing pipeline or create a new one. We need to include the variable library we created that connects to Key Vault, to do this you need to select the &lt;strong&gt;Variables&lt;/strong&gt; tab and then select &lt;strong&gt;Variable groups&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oZKYVKfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628428342719/EQyK6Rwku.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZKYVKfJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1628428342719/EQyK6Rwku.png" alt="variable-variablegroups.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here select the &lt;strong&gt;Link variable group&lt;/strong&gt; and select the newly created variable group.&lt;/p&gt;

&lt;p&gt;Now we need to add a &lt;strong&gt;Bash Script&lt;/strong&gt; task to run remap commands so the Azure Key Vault variables are in the supported format. Terraform expects from an external source the format to be &lt;strong&gt;TF_VAR_NAME&lt;/strong&gt; (underscores not supported in Azure Key Vault and why we have to remap), where name is the variable name. Below is an example of the command we need to add to the bash script task, repeated for each variable that needs to be remapped for Terraform.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"##vso[task.setvariable variable=TF_VAR_VMPASS;]&lt;/span&gt;&lt;span class="nv"&gt;$tf&lt;/span&gt;&lt;span class="s2"&gt;-var-vmpass"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once this is done, you can add the Terraform tasks to install, initialize and plan/deploy. Once the pipeline runs, the script will map the Azure Key Vault variables to new names that can be identified by Terraform.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>devops</category>
      <category>terraform</category>
      <category>codequality</category>
    </item>
    <item>
      <title>JS Array Methods ! 🐱‍🏍</title>
      <author>Mayank Kumar</author>
      <pubDate>Mon, 09 Aug 2021 07:08:06 +0000</pubDate>
      <link>https://dev.to/mayank0508/js-array-methods-1pk1</link>
      <guid>https://dev.to/mayank0508/js-array-methods-1pk1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-a-js-array-"&gt;
  &lt;/a&gt;
  WHAT IS A JS ARRAY ?
&lt;/h2&gt;

&lt;p&gt;The JavaScript Array class is a global object that is used in the construction of arrays; which are high-level, list-like objects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#arrays-provide-a-lot-of-methods-to-make-things-easier"&gt;
  &lt;/a&gt;
  &lt;em&gt;Arrays provide a lot of methods. To make things easier.&lt;/em&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#we-will-be-talking-about-4-array-methods-"&gt;
  &lt;/a&gt;
  We will be talking about 4 Array Methods :
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1map"&gt;
  &lt;/a&gt;
  &lt;em&gt;1.map&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#2filter"&gt;
  &lt;/a&gt;
  &lt;em&gt;2.filter&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#3sort"&gt;
  &lt;/a&gt;
  &lt;em&gt;3.sort&lt;/em&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#4reduce"&gt;
  &lt;/a&gt;
  &lt;em&gt;4.reduce&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/rRxFKMpDq4Ez6/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/rRxFKMpDq4Ez6/giphy.gif" alt="gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-arrayprototypemap"&gt;
  &lt;/a&gt;
  1) Array.prototype.map()
&lt;/h1&gt;

&lt;p&gt;So the basic need for using the map() method is to modify a given data, the map() method creates a new array populated with the results of calling a provided function on every element in the calling array. it return the same amount of data passed by the array but in a modified form&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inventors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Albert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Einstein&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1879&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1955&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Isaac&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Newton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1643&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1727&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Galileo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Galilei&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1564&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1642&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Marie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Curie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1867&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1934&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Johannes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kepler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1571&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1630&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nicolaus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Copernicus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1473&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1543&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inventors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;inventor&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;inventor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;inventor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// it returns the full name of the inventors using the map method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-arrayprototypefilter"&gt;
  &lt;/a&gt;
  2) Array.prototype.filter()
&lt;/h1&gt;

&lt;p&gt;So the basic need for using the filter() method is to filter out a given data, the filter() method creates a new array with all elements that pass the test implemented by the provided function.&lt;br&gt;
Its returns the filtered arrays which might not include every element you have passed init.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inventors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Albert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Einstein&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1879&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1955&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Isaac&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Newton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1643&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1727&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Galileo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Galilei&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1564&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1642&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Marie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Curie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1867&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1934&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Johannes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kepler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1571&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1630&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nicolaus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Copernicus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1473&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1543&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inventors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="nx"&gt;inventor&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;inventor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1500&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;inventor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;1599&lt;/span&gt;
      &lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// filter helps us here to filter out the list of inventors year dates&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-arrayprototypesort"&gt;
  &lt;/a&gt;
  3) Array.prototype.sort()
&lt;/h1&gt;

&lt;p&gt;So the basic need for using the sort() method is to sort out a given data, the sort() method sorts the elements of an array in place and returns the sorted array. The default sort order is ascending. It will return the same amount of data that has been passed !&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inventors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Albert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Einstein&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1879&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1955&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Isaac&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Newton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1643&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1727&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Galileo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Galilei&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1564&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1642&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Marie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Curie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1867&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1934&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Johannes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kepler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1571&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1630&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nicolaus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Copernicus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1473&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1543&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inventors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passed&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passed&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// this method helps with the sorting of the results/arrays&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-arrayprototypereduce"&gt;
  &lt;/a&gt;
  3) Array.prototype.reduce()
&lt;/h1&gt;

&lt;p&gt;So the basic need for using the reduce() method is to sort out a given data, the reduce() method executes a reducer function i.e (that you provide) on each element of the array, resulting in a single output value, It returns a single value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inventors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Albert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Einstein&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1879&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1955&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Isaac&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Newton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1643&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1727&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Galileo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Galilei&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1564&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1642&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Marie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Curie&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1867&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1934&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Johannes&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kepler&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1571&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1630&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Nicolaus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Copernicus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;year&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1473&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;passed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1543&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;inventors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;inventor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inventor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;inventor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// this method helps us to calculate the total number of years that were lived by the inventors using the reduce method&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's IT
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/h6rYAbLpkRvFUg6O5y/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/h6rYAbLpkRvFUg6O5y/giphy.gif" alt="gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This Blog was inspired was Wes Bos JavaScript30 course&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#bonus-meme"&gt;
  &lt;/a&gt;
  BONUS MEME
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ibUZava6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hawwyafr6w5gs4x574td.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ibUZava6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hawwyafr6w5gs4x574td.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  HAPPY CODING 🚀
&lt;/h1&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>programming</category>
    </item>
    <item>
      <title>Store files in cloud and On premises using Storage Gateway</title>
      <author>Ajit Singh</author>
      <pubDate>Mon, 09 Aug 2021 07:06:51 +0000</pubDate>
      <link>https://dev.to/this-is-learning/store-files-in-cloud-and-on-premises-using-storage-gateway-4knk</link>
      <guid>https://dev.to/this-is-learning/store-files-in-cloud-and-on-premises-using-storage-gateway-4knk</guid>
      <description>&lt;p&gt;What if we want to store some of our data on premises and some on the cloud. AWS has some options for it for storage there is &lt;code&gt;Storage Gateway&lt;/code&gt;. AWS Storage Gateway is a set of hybrid cloud services that gives you on-premises access to virtually unlimited cloud storage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storage-gateway"&gt;
  &lt;/a&gt;
  Storage Gateway
&lt;/h2&gt;

&lt;p&gt;It helps you to bridge the gap between on premise data and cloud storage. It simplifies and seamlessly connect your on premises storage to cloud storage.  This service includes an optimized and efficient data transfer mechanism, with bandwidth and automated resilience, and which provides a consistent experience using the AWS Console on-premises and in the AWS Cloud. It is mostly used to move backups to the cloud, using on-premises file shares backed by cloud storage, and providing low latency access to data in AWS for on-premises applications. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#benefits"&gt;
  &lt;/a&gt;
  Benefits
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Simple - It is very simple to use your applications will use your cloud environment storage same as your on premises data once its setup&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Efficient access - AWS Storage Gateway caches data in the local VM or gateway hardware appliance, providing low-latency disk and network performance for your most active data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scalable - Using the infinite scale of storage of S3 you can use any amount of storage you want.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Durable - All the data using AWS storage leverages same benefits of cloud storage for a very durable experience&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>aws</category>
      <category>devops</category>
      <category>cloudskills</category>
      <category>cloud</category>
    </item>
    <item>
      <title>S3 types of storage - Hands on</title>
      <author>Ajit Singh</author>
      <pubDate>Mon, 09 Aug 2021 06:59:10 +0000</pubDate>
      <link>https://dev.to/this-is-learning/s3-types-of-storage-hands-on-28ba</link>
      <guid>https://dev.to/this-is-learning/s3-types-of-storage-hands-on-28ba</guid>
      <description>&lt;p&gt;To check how to add files to different storage classes. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the bucket we have been working on 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4q2tUeAq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jj5u8y4thc46qwa0oqu9.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Upload a new file.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V0zTj91D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d71ykv5q1qtboaeuskfc.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Scroll down and open properties. It will show you all the different storage classes in S3.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r7Ackrbm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwl4quej300uktjnkkba.png" alt="Alt Text"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7CGJuCpx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l0rnuhpiygw1871vvmdt.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Let us update the file in one zone IA.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1mv2x6bt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3h1wr3fzgb779njc95u.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have uploaded the S3 object in a different storage class.&lt;/p&gt;

&lt;p&gt;If you don't want to do this manually S3 also has an option of changing all this automatically.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To do this open management tab in S3 bucket. Click on create lifecycle rule.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6wid6Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zn9g2qq6n5g6kfq40d4n.png" alt="Alt Text"&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IpYzT5mI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wsyhr01r5st2mtsui2rk.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Give a rule name. Select to which objects you want to apply this rule via prefix or you can select the entire bucket. I'll select the entire bucket
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lEY-RN3r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3088g5omrld9gh0nw5m.png" alt="Alt Text"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v09KvP0n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n95alkst25hsfzdb6p3n.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Then we will have different lifecycle rule options. Like transitioning the current object into infrequent access after 30 days. And after 60 days added to glacier.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UF8uA1nO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6fq1hwc3tlt1lcfj36r.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;S3 will show you a time line summary.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NPOKfY9C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzjnqfocxb4txp9u6pjq.png" alt="Alt Text"&gt;
&lt;/li&gt;
&lt;li&gt;Click on create rule.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zQsvfToH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreb1qrff9ardd3ozddn.png" alt="Alt Text"&gt;
This way we can automate our object transitions into various tiers. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this we have completed our S3 series. Next I will work on databases.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>devops</category>
    </item>
    <item>
      <title>The Frontend Agency</title>
      <author>Mads Stoumann</author>
      <pubDate>Mon, 09 Aug 2021 06:54:07 +0000</pubDate>
      <link>https://dev.to/madsstoumann/the-frontend-agency-3pfa</link>
      <guid>https://dev.to/madsstoumann/the-frontend-agency-3pfa</guid>
      <description>&lt;p&gt;After 7 years working as a &lt;em&gt;Technical Director&lt;/em&gt; for Valtech, I've decided to go freelance … again (I was self-employeed for 15 years before Valtech)! &lt;/p&gt;

&lt;p&gt;A new role requires … a new company &lt;strong&gt;and&lt;/strong&gt; a new website!&lt;/p&gt;

&lt;p&gt;I've just returned from my summer holidays, so the website is still &lt;em&gt;work-in-progress&lt;/em&gt; and so far it has &lt;strong&gt;no content&lt;/strong&gt;, but it &lt;strong&gt;does&lt;/strong&gt; have some features, you can have fun playing around with!&lt;/p&gt;

&lt;p&gt;Therefore, I've decided to do an “early release”.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://thefrontend.agency"&gt;thefrontend.agency&lt;/a&gt; and click on the spinning cog-wheel at the top left corner:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hi69RAAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enetvdbdyua4pthof53o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hi69RAAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/enetvdbdyua4pthof53o.png" alt="The Frontend Agency Editor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do you prefer polygons over blobs?&lt;/li&gt;
&lt;li&gt;Less or more shapes?&lt;/li&gt;
&lt;li&gt;Slow animations, fast animations … or &lt;strong&gt;no&lt;/strong&gt; animations?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Try to drag the color-slider at the top of the page, and then play arund with &lt;code&gt;saturation&lt;/code&gt;, &lt;code&gt;lightness&lt;/code&gt; and &lt;code&gt;opacity&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the upcoming version of Safari, you can specify a &lt;code&gt;theme-color&lt;/code&gt; – and you can use &lt;em&gt;CSS Custom Properties&lt;/em&gt; with it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"theme-color"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"hsl(var(--h, 192), var(--s, 40%), var(--l, 25%))"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Notice how the main browser window/address-bar now has the same &lt;code&gt;background-color&lt;/code&gt; as the main page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kd8846zy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdplg6n71to5vsmf84qh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kd8846zy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qdplg6n71to5vsmf84qh.png" alt="Safari Theme"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Then, if you drag the color-slider, notice how &lt;em&gt;both&lt;/em&gt; the &lt;code&gt;background-color&lt;/code&gt; &lt;em&gt;and&lt;/em&gt; the &lt;code&gt;theme-color&lt;/code&gt; change:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vwvPhCJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qej7bzs0sieodiibiowk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vwvPhCJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qej7bzs0sieodiibiowk.png" alt="Safari Theme Modified"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think this is pretty cool – let's hope other browser-vendors implements this as well!&lt;/p&gt;



&lt;p&gt;Now, typically, I'd never release “half-baked” code, but in this case, I had to release &lt;em&gt;something&lt;/em&gt; – and I'm really looking forward to your comments, suggestions etc.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#the-logo"&gt;
  &lt;/a&gt;
  The Logo
&lt;/h2&gt;

&lt;p&gt;The logo is handdrawn by Danish illustrator, Rasmus Meisler. &lt;/p&gt;

&lt;p&gt;Last year, he drew one of the most &lt;a href="https://fantask.dk/browse.asp?category=comics&amp;amp;aid=4731"&gt;beautiful comic books&lt;/a&gt;, I've ever seen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UWuNMsyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ik41s6dgso6akx1atckt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UWuNMsyA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ik41s6dgso6akx1atckt.jpeg" alt="den-magiske-spinel-2605502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.rasmusmeisler.dk/weekendavisen"&gt;Take a look&lt;/a&gt; at some of his amazing illustrations for the danish paper &lt;em&gt;Weekendavisen&lt;/em&gt;, too.&lt;/p&gt;

&lt;p&gt;Rasmus actually sent me a whole bunch of sketches and ideas for the logo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NriqqLz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p5pfhhgmw2xat50j4mj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NriqqLz0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5p5pfhhgmw2xat50j4mj.png" alt="Logo sketches"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I like them all, but ended up picking “the agent”, as in “agen(t)-cy”!&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#type-of-work"&gt;
  &lt;/a&gt;
  Type of Work
&lt;/h2&gt;

&lt;p&gt;So what will I be doing? Frontend consulting, obviously – but also much more Graphic Design and UX/UI work, than I've been doing at Valtech. &lt;/p&gt;

&lt;p&gt;I will not work as a comicbook-letterer again, but I'd like to use my “crossover-knowledge” of JavaScript and Graphic Design, as I write about here:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/madsstoumann" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JoLwOpQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S8Kp4bXC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/515396/61d796b8-f5ce-468b-8cb5-808b2bbb9279.jpeg" alt="madsstoumann"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/madsstoumann/comics-graphic-design-and-the-power-of-javascript-2kap" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Comics, Graphic Design — and the Power of JavaScript&lt;/h2&gt;
      &lt;h3&gt;Mads Stoumann ・ Jul 9 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#comics&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#scripting&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;I'll also spend more time on sustainability:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/madsstoumann" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JoLwOpQB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--S8Kp4bXC--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/515396/61d796b8-f5ce-468b-8cb5-808b2bbb9279.jpeg" alt="madsstoumann"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/madsstoumann/making-sustainable-websites-hd3" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Making Sustainable Websites&lt;/h2&gt;
      &lt;h3&gt;Mads Stoumann ・ Feb 10 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sustainability&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;I'm planning to write an extension for &lt;em&gt;Lighthouse&lt;/em&gt;, and much, much more.&lt;/p&gt;

&lt;p&gt;Finally, I'll be spending time on art, coding algorithms with random art, like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/stoumann/embed/dyvprJM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The plan is to launch a webshop, where you can design, tweak and order a print of a unique piece of art.&lt;/p&gt;

&lt;p&gt;Here are two examples, printed on canvas:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rMq4MDpE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwucz0tkbk2uw5dvsf60.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rMq4MDpE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwucz0tkbk2uw5dvsf60.jpeg" alt="Art"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;So: exiting times ahead! &lt;/p&gt;

&lt;p&gt;Naturally, I'll be writing about it all here on dev.to – as well as writing my usual tutorials and guides!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>showdev</category>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>Part 1: Concepts of Code Quality in Sonar Cloud</title>
      <author>Jeiman Jeya</author>
      <pubDate>Mon, 09 Aug 2021 06:50:48 +0000</pubDate>
      <link>https://dev.to/jeiman/part-1-concepts-of-code-quality-in-sonar-cloud-318j</link>
      <guid>https://dev.to/jeiman/part-1-concepts-of-code-quality-in-sonar-cloud-318j</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QD_m4pnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hleub980wkbdv6ssws23.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QD_m4pnS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hleub980wkbdv6ssws23.png" alt="Placeholder image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In engineering teams/tribes, we often find ourselves stuck in a dilemma of choosing a suitable and efficient code analysis tool. A tool that will provide us all of the essential features and metrics to analyse codebases using best design practices in mind. Teams would want to prevent code problems from being merged by detecting code smells, bugs, and vulnerabilities sooner. Furthermore, they would want to view fast and accurate feedback from their respective pull requests and code merges in their repositories.&lt;/p&gt;

&lt;p&gt;The primary goals of software quality engineering are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Process control and oversight&lt;/li&gt;
&lt;li&gt;Implementing standards and metrics&lt;/li&gt;
&lt;li&gt;Data collection and analysis&lt;/li&gt;
&lt;li&gt;Test development&lt;/li&gt;
&lt;li&gt;Identification of issues and solutions&lt;/li&gt;
&lt;li&gt;Follow-up to ensure corrective actions&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h1&gt;

&lt;p&gt;Over the years, I have worked with many code analysis tools to help developers in various teams such as Codacy, Code Climate, DeepScan, and Sonar Cloud. After spending a considerable amount of time experimenting and setting up Sonar Cloud projects, I realised it stands out from the crowd. It has a comprehensive analysis engine that offers features encompassing all of the aforementioned software quality engineering goals. Some of those features which fascinated me and my team was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pull Request decorators

&lt;ul&gt;
&lt;li&gt;Inline commenting through report annotations&lt;/li&gt;
&lt;li&gt;Pull request widgets: Provides overall code quality health on your Pull requests&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Repository widgets: Provides overall code quality health on your project&lt;/li&gt;
&lt;li&gt;Scanning Old code vs New code

&lt;ul&gt;
&lt;li&gt;Code Coverage&lt;/li&gt;
&lt;li&gt;Code Duplications&lt;/li&gt;
&lt;li&gt;Maintainability Ratings&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Defining custom Quality Gate checks for different projects&lt;/li&gt;
&lt;li&gt;Defining New Code definitions for different projects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the aforementioned features (Quality Gate, Profile, New Code Definitions) are in fact settings that need to be configured in Sonar Cloud. You will need to give your attention to configuring these settings as you will not reap the benefits of fully utilising Sonar Cloud.&lt;/p&gt;

&lt;p&gt;We are going to explore the Sonar Cloud ecosystem and how all of its core features come together to provide you a comprehensive code analysis experience.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#sonar-cloud-ecosystem"&gt;
  &lt;/a&gt;
  Sonar Cloud Ecosystem
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#projects"&gt;
  &lt;/a&gt;
  Projects
&lt;/h2&gt;

&lt;p&gt;In Sonar Cloud, a single repository corresponds to a single project. It is how they maintain a unique set of code quality data and metrics for each repository you have. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#monorepo-support"&gt;
  &lt;/a&gt;
  Monorepo Support
&lt;/h3&gt;

&lt;p&gt;Sonar Cloud does support monorepo projects. You can create multiple projects, each corresponding to a separate monorepo project which are all bounded to the same repository. This will allow you to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configure one Quality Gate per project&lt;/li&gt;
&lt;li&gt;Receive multiple Quality Gate results&lt;/li&gt;
&lt;li&gt;Read project-labeled messages from SonarCloud&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each monorepo project must have a unique project key in Sonar Cloud, which will be used to uniquely identify your projects using your CI tool.&lt;/p&gt;

&lt;p&gt;The standard practice is to have the following naming convention: &lt;code&gt;{organisationName-project-monorepoName}&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;Project 1&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sampleorg-domain-frontend&lt;/span&gt;
&lt;span class="na"&gt;Project 2&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sampleorg-domain-backend&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is useful if your organisation maintains a big number of monorepo projects across various engineering tribes so the projects can be easily identified in Sonar Cloud. However, you can follow any naming convention you see fit that suits your needs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-code-definitions"&gt;
  &lt;/a&gt;
  New Code Definitions
&lt;/h2&gt;

&lt;p&gt;Sonar Cloud follows the concept of &lt;a href="https://sonarcloud.io/documentation/improving/clean-as-you-code/"&gt;Clean As You Code&lt;/a&gt;. The core idea is that you focus your attention and effort on new code. As you work on features and improvements, &lt;strong&gt;SonarCloud analyses your code on each new commit&lt;/strong&gt; and alerts you to any code quality problems and vulnerabilities. This allows you to address the issues right away and ensure that all new code added to the project is always clean. You may read their documentation to find out more information.&lt;/p&gt;

&lt;p&gt;Accompanying this are New Code Definitions. Setting up the right New Code definition for your project is vital to getting the most out of SonarCloud by determining which changes to your code are considered recent enough to merit your full focus and allow you to use the Clean as You Code methodology when addressing issues in your code. There are several options to consider when configuring your New Code Definitions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Previous version:&lt;/strong&gt; Issues in the code that have appeared since the most recent version increment of the project&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Specific version:&lt;/strong&gt; Issues that have occurred on a specific version of the project&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Number of days:&lt;/strong&gt; Issues that have appeared on your code since the specified number of days (A numerical number)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Specific date:&lt;/strong&gt; Issues that have appeared on your code since the specified date&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eeGsA1HB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiafufxtatfeb3ec0v8u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eeGsA1HB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kiafufxtatfeb3ec0v8u.png" alt="New Code Definition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you perform initial code analysis, it does not provide you a "New Code" analysis. Instead, it scans the whole project, providing you with an overall code quality health. As you go along and start analysing new commits, Sonar Cloud will present you with both an &lt;strong&gt;Overall&lt;/strong&gt; and &lt;strong&gt;New&lt;/strong&gt; code quality health analysis (depicted from the picture above).&lt;/p&gt;

&lt;p&gt;You can set a New Code Definition either on a project level or an organisation level, with the latter providing you a way of automatically applying the definitions to new projects that are created.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quality-gates"&gt;
  &lt;/a&gt;
  Quality Gates
&lt;/h2&gt;

&lt;p&gt;A quality gate is technically a metric of sorts that informs you whether your code meets a minimum level of quality required for the project. This consists of a set of conditions that are applied to the results of each analysis performed. If the results meet or exceed the quality gate conditions, it will show one of the following statuses accordingly: &lt;strong&gt;Passed&lt;/strong&gt; or &lt;strong&gt;Failed&lt;/strong&gt;. You can define conditions on &lt;strong&gt;New Code&lt;/strong&gt; and &lt;strong&gt;Overall Code&lt;/strong&gt;. Some examples of the conditions are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Coverage is less than 80.0%&lt;/li&gt;
&lt;li&gt;Duplicated Lines is greater than 3.0%&lt;/li&gt;
&lt;li&gt;Maintainability Rating is worse than A&lt;/li&gt;
&lt;li&gt;Reliability Rating is worse than A&lt;/li&gt;
&lt;li&gt;Security Hotspots Reviewed is less than 100%&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The quality gates are analysed and calculated on &lt;strong&gt;Main Branch (&lt;code&gt;master&lt;/code&gt; by default)&lt;/strong&gt;, &lt;strong&gt;other Branches,&lt;/strong&gt; and &lt;strong&gt;Pull Requests&lt;/strong&gt;. You can create any number of Quality Gates for your projects and enable them per project, or create a default Quality Gate that will be applied to all projects that have been or will be created.&lt;/p&gt;

&lt;p&gt;An example of a customised Quality Gate is shown below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SD1GMJv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ys1e2e7r7gqg2nk6col.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SD1GMJv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ys1e2e7r7gqg2nk6col.png" alt="Quality Gates"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quality-profiles"&gt;
  &lt;/a&gt;
  Quality Profiles
&lt;/h2&gt;

&lt;p&gt;Quality profiles as you may have guessed it are programming language rules that are applied during code analysis. By default, the programming languages that are supported on Sonar Cloud have a built-in profile, called "Sonar way", using the standard best practices that are currently in the market. Although the "Sonar way" is best suited for most projects, there are cases where engineering tribes would want to customise their profiles that best suit their needs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--55NYk7q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arkrrd7k2rmerogqfrio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--55NYk7q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/arkrrd7k2rmerogqfrio.png" alt="Quality Profiles"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#branches"&gt;
  &lt;/a&gt;
  Branches
&lt;/h2&gt;

&lt;p&gt;In Sonar Cloud, there are 2 types of branch analysis: &lt;strong&gt;Short-lived branches&lt;/strong&gt; and &lt;strong&gt;Long-lived branches&lt;/strong&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shortliving-branches"&gt;
  &lt;/a&gt;
  Short-Living Branches
&lt;/h3&gt;

&lt;p&gt;As the name suggests, these branches are meant to be used to temporarily perform analysis on them, usually via pull requests. Short-lived branches are deleted automatically after 30 days with no analysis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#longliving-branches"&gt;
  &lt;/a&gt;
  Long-Living Branches
&lt;/h3&gt;

&lt;p&gt;These branches are useful for when tribes follow Agile methodology, utilising Git flow techniques to maintain a set of upstream branches (sprint, release). These branches will remain in your Sonar Cloud project history until it is deleted. Some companies maintain upstream branches for a very long time, hence this option is extremely useful to conduct code analysis on these branches alongside your main branch (&lt;code&gt;master&lt;/code&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-longliving-branches"&gt;
  &lt;/a&gt;
  Defining long-living branches
&lt;/h3&gt;

&lt;p&gt;Long-living branches are defined on a project level. Simply navigate to your &lt;strong&gt;Project Settings &amp;gt; Administration &amp;gt; Branches &amp;amp; Pull Requests&lt;/strong&gt;. The long-living branches follow a regular expression pattern.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UIHSWfq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbj7w1r1rb2uu8r78awu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UIHSWfq_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbj7w1r1rb2uu8r78awu.png" alt="Branch regex"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By default, the pattern is &lt;code&gt;(branch|release)-.*&lt;/code&gt;. This means that when the name of the branch starts with &lt;code&gt;branch-&lt;/code&gt; or &lt;code&gt;release-&lt;/code&gt;, it will be considered a long-living branch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-settings"&gt;
  &lt;/a&gt;
  Project Settings
&lt;/h3&gt;

&lt;p&gt;All of the aforementioned concepts and terminologies are in fact project and organisation settings (Quality Gates, Quality Profiles, Long-living branches, New Code Definitions, Monorepo Support). Accompanied with are general settings such as Code Coverage Exclusions, Test File Inclusions and Exclusions, Duplication Inclusions, Source File Exclusions and Inclusions, and many more. You may refer to their &lt;a href="https://docs.sonarqube.org/latest/project-administration/narrowing-the-focus"&gt;documentation&lt;/a&gt; to set these up.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;I hope this Part 1 article has provided you with insights on how Sonar Cloud operates and the software engineering quality it follows. Part 2 of this article will provide you a walkthrough on how to set up a Sonar Cloud project with a GitHub repository and perform code analysis using GitHub Actions.&lt;/p&gt;

&lt;p&gt;Image Source: &lt;a href="https://alexandrebrisebois.files.wordpress.com/2014/05/2011-09-18_code_reviews.png"&gt;https://alexandrebrisebois.files.wordpress.com/2014/05/2011-09-18_code_reviews.png&lt;/a&gt;&lt;/p&gt;

</description>
      <category>sonarcloud</category>
      <category>codequality</category>
      <category>cloud</category>
      <category>github</category>
    </item>
    <item>
      <title>How to Create Public And Private Routes using React Router</title>
      <author>Nilanth</author>
      <pubDate>Mon, 09 Aug 2021 06:50:34 +0000</pubDate>
      <link>https://dev.to/nilanth/how-to-create-public-and-private-routes-using-react-router-72m</link>
      <guid>https://dev.to/nilanth/how-to-create-public-and-private-routes-using-react-router-72m</guid>
      <description>&lt;p&gt;Steps for writing public and private routes in React app using &lt;a href="https://reactrouter.com/web/guides/quick-start"&gt;React Router&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When developing a React Application with Authentication, we might require public and private routes. Let's first see what they are?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#public-routes"&gt;
  &lt;/a&gt;
  Public Routes
&lt;/h2&gt;

&lt;p&gt;Public routes are Log in, SignUp, Forgot Password, Reset Password. In simple words, These routes can be accessed before login into the App.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#private-routes"&gt;
  &lt;/a&gt;
  Private Routes
&lt;/h2&gt;

&lt;p&gt;Private Routes vary based on the Apps, For example, Dashboard, User Profile, App Settings, Home etc. In simple words, These routes can be accessed only after login.&lt;/p&gt;

&lt;p&gt;The constraints for Public and Private routes are that Public routes should not be accessed after login and Private routes should not be accessible before login.&lt;/p&gt;

&lt;p&gt;In this article, we can see. How to create public and private routes using react-router for your react apps. Let's start&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#public-routes"&gt;
  &lt;/a&gt;
  Public Routes
&lt;/h2&gt;

&lt;p&gt;First, let us create a &lt;code&gt;PublicRoute.js&lt;/code&gt; component to handle public route conditions as below&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;As you can see in the above code, The Public route component receives 3 props like &lt;code&gt;children&lt;/code&gt;, &lt;code&gt;isAuthenticated&lt;/code&gt; and &lt;code&gt;…rest&lt;/code&gt; . &lt;/p&gt;

&lt;p&gt;If the user is authenticated, He will be redirected to the Home screen and he can only access the public routes if he is not authenticated(Logged in).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#private-routes"&gt;
  &lt;/a&gt;
  Private Routes
&lt;/h2&gt;

&lt;p&gt;The private route component is similar to the public route, the only change is that redirect URL and authenticate condition. &lt;/p&gt;

&lt;p&gt;If the user is not authenticated he will be redirected to the login page and the user can only access the authenticated routes If he is authenticated (Logged in).&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#protected-routes"&gt;
  &lt;/a&gt;
  Protected Routes
&lt;/h2&gt;

&lt;p&gt;The protected Route component is used to map all the authenticated routes as below&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Authenticated routes are defined as below in routes.js&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#integrating-routes"&gt;
  &lt;/a&gt;
  Integrating Routes
&lt;/h2&gt;

&lt;p&gt;Now let's integrate our route components to App.js as below&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Here we have wrapped non authenticated routes with &lt;code&gt;&amp;lt;PublicRoute /&amp;gt;&lt;/code&gt; component and authenticated routes with &lt;code&gt;&amp;lt;PrivateRoute /&amp;gt;&lt;/code&gt; component. &lt;/p&gt;

&lt;p&gt;We have used suspense to add lazy loading to components. &lt;br&gt;
Now we have configured Private and Public Routes. If there is no match &lt;code&gt;&amp;lt;NoFoundComponent /&amp;gt;&lt;/code&gt; will be rendered.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Public and Private routes will also restrict accessing the previously visited routes using the browser back button after logout. I hope you have found this useful. Thank you for reading.&lt;/p&gt;

&lt;p&gt;Get more updates on &lt;a href="https://twitter.com/Nilanth"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-blogs"&gt;
  &lt;/a&gt;
  More Blogs
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/redux-toolkit-the-standard-way-to-write-redux-2g32"&gt;Redux Toolkit - The Standard Way to Write Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/5-packages-to-optimize-and-speed-up-your-react-app-during-development-4h5f"&gt;5 Packages to Optimize and Speed Up Your React App During Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-use-axios-in-an-optimized-and-scalable-way-with-react-518n"&gt;How To Use Axios in an Optimized and Scalable Way With React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/15-custom-hooks-to-make-your-react-component-lightweight-17cd"&gt;15 Custom Hooks to Make your React Component Lightweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/10-ways-to-host-your-react-app-for-free-27ga"&gt;10 Ways to Host Your React App For Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-secure-jwt-in-a-single-page-application-cko"&gt;How to Secure JWT in a Single-Page Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/react-18-alpha-a-quick-overview-349n"&gt;React 18 Alpha: A Quick Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/redux-auth-starter-a-zero-config-cra-template-9c0"&gt;Redux Auth Starter: A Zero Config CRA Template&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 things I learned from writing 500 tech articles</title>
      <author>Chris Bongers</author>
      <pubDate>Mon, 09 Aug 2021 06:40:42 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/5-things-i-learned-from-writing-500-tech-articles-55co</link>
      <guid>https://dev.to/dailydevtips1/5-things-i-learned-from-writing-500-tech-articles-55co</guid>
      <description>&lt;p&gt;Wow, this is article 500!! 🎉&lt;/p&gt;

&lt;p&gt;I wish I could say I did an article a day, like &lt;a href="https://seths.blog/"&gt;Seth Godin&lt;/a&gt; or &lt;a href="https://flaviocopes.com/"&gt;Flavio Copes&lt;/a&gt;. However, I did miss writing on my wedding days and had zero regrets about that 🥳.&lt;/p&gt;

&lt;p&gt;I did write 500 tech-related articles already...&lt;br&gt;
Can you believe it? That means we went into lockdown about 500 days ago (How time flies, right?).&lt;/p&gt;

&lt;p&gt;This article contains the five most important things I've learned from writing 500 articles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-plan-your-content-and-life"&gt;
  &lt;/a&gt;
  1. Plan your content and life
&lt;/h2&gt;

&lt;p&gt;It might look simple on paper, write some words every day, but the struggle is real. It can be a mental drain at times, so the best thing you can do is plan around your content and life.&lt;/p&gt;

&lt;p&gt;You might get the part about content. Every time you have an idea &lt;a href="https://daily-dev-tips.com/posts/%F0%9F%A4%AB-the-secret-to-my-writing-process/"&gt;write it down in Notion&lt;/a&gt;. This way, you should never run out of ideas.&lt;/p&gt;

&lt;p&gt;A second side to doing such a crazy challenge is your personal life.&lt;/p&gt;

&lt;p&gt;Every single day ~ Yes, every single day, you have to write content. That means holidays, weekends, days you don't feel like it. And it can not just be hard on yourself, but on your partner, friends and family as well.&lt;/p&gt;

&lt;p&gt;The main thing I learned is to keep them informed. When going on a holiday, I try to do some work in advance to enjoy some time off.&lt;br&gt;
My wife is luckily super supportive and lets me do my blog on the weekend. However, some days we need to communicate when I'm writing and when we do something fun.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-you-dont-need-to-write-perfect-content"&gt;
  &lt;/a&gt;
  2. You don't need to write perfect content
&lt;/h2&gt;

&lt;p&gt;Before we dive into this point, let me tell you a bit about my motives for writing:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keep up to date with tech&lt;/li&gt;
&lt;li&gt;Imprint techniques in my brain&lt;/li&gt;
&lt;li&gt;Improve my English writing&lt;/li&gt;
&lt;li&gt;Improve my technical writing&lt;/li&gt;
&lt;li&gt;Learn in public&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we take these points, you can see my goals are far from your other blog goals like: Get x million views, or Sell x amount of ads.&lt;/p&gt;

&lt;p&gt;I write for myself to become better, and with that comes a side effect that people are intrigued by my way of learning and want to learn with me.&lt;/p&gt;

&lt;p&gt;I have days where people reach out and say I made a mistake. This can be anything from typos to having the wrong Codepen linked to the article.&lt;/p&gt;

&lt;p&gt;I appreciate people telling me these things. It's yet another way of learning. I always thank these people and change that part of the article.&lt;/p&gt;

&lt;p&gt;If you are that person who is procrastinating putting out their first article, run it through Grammarly, read it once more yourself and GO! Put that content out there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-write-for-your-best-readers"&gt;
  &lt;/a&gt;
  3. Write for your best readers
&lt;/h2&gt;

&lt;p&gt;As you may have seen above, I'm a big fan of writing for myself and like-minded people.&lt;br&gt;
I know from myself that I like small bite-sized articles. I don't read super long articles as they don't get to the point quickly enough for my liking.&lt;/p&gt;

&lt;p&gt;My writing style reflects my reading style in that sense. It's small, to-the-point articles that solve problems quickly.&lt;br&gt;
And I know that's why a lot of people like reading my articles.&lt;/p&gt;

&lt;p&gt;Moral of the story: Write content you would read, as you know best, to write it like that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-motivate-yourself"&gt;
  &lt;/a&gt;
  4. Motivate yourself
&lt;/h2&gt;

&lt;p&gt;You can't write 500... let's even make that 30 articles consecutive when you're not motivated.&lt;/p&gt;

&lt;p&gt;If you don't enjoy writing and it's a struggle, don't do it. For me writing down my ideas and learnings is such a liberating feeling. This, in turn, motivates me to write more.&lt;/p&gt;

&lt;p&gt;There are days where my brain is overflowing with the idea after idea. I open up my Notion and write down all of those ideas.&lt;/p&gt;

&lt;p&gt;When the next writing session comes, I often read the headlines I wrote down and immediately get re-motivated by my enthusiasm when coming up with the ideas.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-enjoy-what-youre-doing"&gt;
  &lt;/a&gt;
  5. Enjoy what you're doing
&lt;/h2&gt;

&lt;p&gt;With motivating comes enjoyment. Like I said before: If you don't like writing, don't do it.&lt;/p&gt;

&lt;p&gt;This doesn't mean you can't put out content, but maybe you like making videos more? Or just publishing ebooks?&lt;/p&gt;

&lt;p&gt;Do whatever makes you happy as a person.&lt;br&gt;
And don't worry about sucking at it first, pretty sure we all do in the beginning.&lt;/p&gt;

&lt;p&gt;Find your passion and use that to put out content people (and you) love.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h2&gt;

&lt;p&gt;If you are keen to put out a lot of content, keep in mind it's not easy. There's a lot of planning around it, not just in content but also in your life in general.&lt;br&gt;
Don't be afraid that you have to be perfect, nobody is!&lt;br&gt;
Write for your best readers, which are people like-minded often. That said, it comes down to writing content you would read yourself.&lt;br&gt;
And lastly, enjoy the process!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to write postman tests and execute them as a part of your CI</title>
      <author>Mohammed Ali</author>
      <pubDate>Mon, 09 Aug 2021 06:31:23 +0000</pubDate>
      <link>https://dev.to/alichherawalla/how-to-write-postman-tests-and-execute-them-as-a-part-of-your-ci-1enn</link>
      <guid>https://dev.to/alichherawalla/how-to-write-postman-tests-and-execute-them-as-a-part-of-your-ci-1enn</guid>
      <description>&lt;p&gt;Traditionally building, deploying, and testing (white box) the API were done in a decoupled manner. The builder wrote unit tests and ensured the APIs functioned as per spec. The DevOps team handled deployments while the QA team wrote white box test using tools like Chai HTTP, Blue tape, etc.&lt;/p&gt;

&lt;p&gt;Postman has become the standard for collaborating, sharing, and documenting APIs. If you're building an API, chances are you are using Postman.&lt;/p&gt;

&lt;p&gt;Not many know that Postman also allows you to write tests. This feature allows the backend developer to write tests as part of the collection. These tests can later be run in the continuous integration pipeline. These automations bring certainty to the deployment. &lt;/p&gt;

&lt;p&gt;In this tutorial we'll use a todo (&lt;a href="https://pyher2ne7raefaz22vgl2pr2ku.appsync-api.ap-south-1.amazonaws.com/graphql"&gt;https://pyher2ne7raefaz22vgl2pr2ku.appsync-api.ap-south-1.amazonaws.com/graphql&lt;/a&gt;) GraphQL API as a starting point and cover the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing tests using Postman&lt;/li&gt;
&lt;li&gt;Run tests using Github actions on push to the default branch&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#starter-project"&gt;
  &lt;/a&gt;
  Starter Project
&lt;/h2&gt;

&lt;p&gt;Please clone the following repository: &lt;a href="https://github.com/wednesday-solutions/postman-tests-starter"&gt;https://github.com/wednesday-solutions/postman-tests-starter&lt;/a&gt;. The todo API exposes a few endpoints, in this tutorial we will only focus on the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CreateUser&lt;/li&gt;
&lt;li&gt;CreateList&lt;/li&gt;
&lt;li&gt;CreateNote&lt;/li&gt;
&lt;li&gt;QueryNotes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: If you're not familiar with GraphQL please take a few minutes to read the spec here.(&lt;a href="https://graphql.org/"&gt;https://graphql.org/&lt;/a&gt;)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-tests"&gt;
  &lt;/a&gt;
  Writing Tests
&lt;/h2&gt;

&lt;p&gt;As a first step start Postman, go to &lt;strong&gt;File → Import&lt;/strong&gt; and drag and drop the collection and the environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GBqzROsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/987zm90t3tojyq00s79h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GBqzROsf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/987zm90t3tojyq00s79h.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#createuser-test"&gt;
  &lt;/a&gt;
  CreateUser Test
&lt;/h3&gt;

&lt;p&gt;This API creates a user. Testing this is simple we just need to ensure a &lt;strong&gt;user_id&lt;/strong&gt; is generated. &lt;/p&gt;

&lt;p&gt;Now that you have your collections loaded and ready follow these steps to add a test. &lt;/p&gt;

&lt;p&gt;1.Open the &lt;strong&gt;mutation&lt;/strong&gt; folder and select &lt;strong&gt;createUsers.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--96g2qhOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6sds1bo8e0ph43cx9lt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--96g2qhOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6sds1bo8e0ph43cx9lt.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.Go to the &lt;strong&gt;Body&lt;/strong&gt; tab and add this to the GraphQL variables section on the right&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "createUserInput": {
      "name": "Mac",
      "userRef": "mac-123"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above variables will be passed to the API. Feel free to change the values in these to something you prefer.&lt;/p&gt;

&lt;p&gt;3.Go to the Tests tab and add the following snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pm.test("if createUser API creates a valid user", function() { // 1
    const response = JSON.parse(responseBody); 
    pm.expect(response.errors).to.be.undefined // 2
    const jsonData = JSON.parse(responseBody)
    postman.setEnvironmentVariable("user_id", jsonData.data.createUser.id) // 3
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code might be difficult to understand at first. Let's look at the tough bits.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;pm&lt;/code&gt; here stands for Postman. It's an object that postman provides with a test method that you can execute.&lt;/li&gt;
&lt;li&gt;Here we check if the response from the API has an error. If there is no error it means that user creation was successful.&lt;/li&gt;
&lt;li&gt;Here we set the environment variable to the &lt;code&gt;user_id&lt;/code&gt; we received from the API.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At this point select the &lt;strong&gt;Send&lt;/strong&gt; button. The API will return a response, select the preview button and note that the environment variable has the same &lt;strong&gt;user_id&lt;/strong&gt; as was returned by the API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--llK7BnY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apfyue3mlfrdoywgkeqs.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--llK7BnY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apfyue3mlfrdoywgkeqs.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#createlist-test"&gt;
  &lt;/a&gt;
  CreateList Test
&lt;/h2&gt;

&lt;p&gt;This API creates a list of Todos. To test this API we will write a test that will create a list for the &lt;strong&gt;user_id&lt;/strong&gt; we created in the previous test.&lt;/p&gt;

&lt;p&gt;1.Select &lt;strong&gt;createList&lt;/strong&gt; from the &lt;strong&gt;mutations&lt;/strong&gt; folder&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F4nUAl2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nk4g4hgco8rsx2ltj3s1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F4nUAl2C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nk4g4hgco8rsx2ltj3s1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.Go to the Body tab and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "createListInput": {
      "name": "House chores",
      "userId": {{user_id}}
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.Go to the Tests tab and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pm.test("if createList API creates a valid list", function() {
    const response = JSON.parse(responseBody);
    pm.expect(response.errors).to.be.undefined
    const jsonData = JSON.parse(responseBody)

    pm.expect(jsonData.data.createList.userId)
            .to.be.equal(parseInt(pm.environment.get("user_id"), 10));

    postman.setEnvironmentVariable("list_id", 
            jsonData.data.createList.id)
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code should now be easy to understand. We check if the user_id is the same and set the list_id we receive from the API in the environment variable to use further. The drill must be clear by now, any dependancy goes in the environment which you can use to test a related API.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---9jxe2MY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/564b8ui8m0zpfodrenp3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---9jxe2MY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/564b8ui8m0zpfodrenp3.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#createnote-test"&gt;
  &lt;/a&gt;
  CreateNote Test
&lt;/h2&gt;

&lt;p&gt;This API allows users to create a Todo. Let’s write the test for this&lt;br&gt;
1.Select createNote in the mutations folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BWl4MeyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59h85elh7js0d2won4eg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BWl4MeyN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/59h85elh7js0d2won4eg.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.Go to the Body tab and add the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "createNoteInput": {
      "note": "Mow the lawn",
      "listId": {{list_id}},
      "deadline": "2021-01-01T00:00:00.000Z"
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.Go to the Tests tab and write the test as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pm.test("if queryNotes API returns the correct note and associated data", function() {
    const response = JSON.parse(responseBody);
    pm.expect(response.errors).to.be.undefined
    const jsonData = JSON.parse(responseBody)
    const notes = jsonData.data.notes;
    pm.expect(notes.items.length).to.be.equal(1);
    pm.expect(notes.items[0].id).to.be.equal(pm.environment.get("note_id"));
    pm.expect(notes.items[0].note).to.be.equal("Mow the lawn");
    pm.expect(notes.items[0].done).to.be.equal(false);
    pm.expect(notes.items[0].deadline).to.be.equal("2021-01-01T00:00:00.000Z");

    pm.expect(notes.items[0].listId)
        .to.be.equal(pm.environment.get("list_id"));
        pm.expect(notes.items[0].list.id)
            .to.be.equal(pm.environment.get("list_id"));    
        pm.expect(notes.items[0].list.user.id)
            .to.be.equal(pm.environment.get("user_id"));
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above test case checks if the note is created successfully with the right list and user id.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--20aQdhsM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whee58gyw0ci1wp30gvn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--20aQdhsM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whee58gyw0ci1wp30gvn.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes-test"&gt;
  &lt;/a&gt;
  Notes Test
&lt;/h2&gt;

&lt;p&gt;As the name suggests this API is used to query for notes that are created. Similar to the above you can write a test to check if the created note is stored correctly. I won’t go into the details of how you can write this test and leave this as an exercise for you to do.&lt;br&gt;
You can take a look at the completed test here: &lt;a href="https://github.com/wednesday-solutions/postman-tests"&gt;https://github.com/wednesday-solutions/postman-tests&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-actions"&gt;
  &lt;/a&gt;
  Github Actions
&lt;/h2&gt;

&lt;p&gt;Until this point, you should have a working collection of APIs with tests. In this section, you will learn how to set up a Github action to run these tests on a merge to master.&lt;br&gt;
Note: Github actions are out of the scope of this tutorial. If you’d like to know more about them please read this(&lt;a href="https://github.com/features/actions"&gt;https://github.com/features/actions&lt;/a&gt;)&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a yml file using this command
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir -p ./github/workflows
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Add the following code to the yml file
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Postman tests
on:
  push:
    branches: [master]
jobs:
  run-and-test:
    runs-on: ubuntu-latest
    steps:
      - name:
        uses: actions/checkout@v2
#1
      - name: Run API Tests
        id: run-newman
        uses: anthonyvscode/newman-action@v1
        with:
          collection: todo-application.postman_collection.json
          environment: todo-application.postman_environment.json
          reporters: cli
#2
      - name: Output summary to console
        run: echo ${{ steps.run-newman.outputs.summary }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the explanation of the above code:&lt;/p&gt;

&lt;p&gt;1.This uses the &lt;code&gt;newman-action&lt;/code&gt; github action that will execute the collection runner. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;collection&lt;/code&gt; expects the path to the collection file.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;environment&lt;/code&gt; expects the path to the environment file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read about all of the different options it supports here: &lt;a href="https://github.com/marketplace/actions/newman-action"&gt;https://github.com/marketplace/actions/newman-action&lt;/a&gt;&lt;br&gt;
2.This will print the summary of the #1 to the console&lt;/p&gt;

&lt;p&gt;Push the above file to your github repo and watch the actions run on every merge.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PZ_yOWEA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hu13v6kaktyczplt3tsk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PZ_yOWEA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hu13v6kaktyczplt3tsk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  Where to go from here
&lt;/h2&gt;

&lt;p&gt;Postman has become the de-facto collaboration platform for API development. Backend developers can write integration tests while they are manually testing their APIs.&lt;/p&gt;

&lt;p&gt;In its most nascent form, this is the first step in ensuring that your APIs pass a basic sanity test.&lt;/p&gt;

&lt;p&gt;As you add more test cases and emulate various scenarios this can remove the need to use another framework for integration testing.&lt;/p&gt;

&lt;p&gt;You can check out the complete working solution &lt;br&gt;
➤here: &lt;a href="https://github.com/wednesday-solutions/postman-tests"&gt;https://github.com/wednesday-solutions/postman-tests&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you know how to write tests and set environment variables dynamically in Postman take a look at the following articles to unlock the full potential of Postman!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learning.postman.com/docs/writing-scripts/test-scripts/"&gt;https://learning.postman.com/docs/writing-scripts/test-scripts/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://learning.postman.com/docs/writing-scripts/script-references/test-examples/"&gt;https://learning.postman.com/docs/writing-scripts/script-references/test-examples/
-&lt;/a&gt; &lt;a href="https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/"&gt;https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope you enjoyed this tutorial on postman-tests. If you have any questions or comments, please join the forum discussion below.&lt;/p&gt;

&lt;p&gt;➤This blog was originally posted on &lt;a href="https://wednesday.is"&gt;https://wednesday.is&lt;/a&gt; To know more about what it’s like to work with Wednesday follow us on: &lt;a href="https://www.instagram.com/wednesday.sol/"&gt;Instagram&lt;/a&gt;|&lt;a href="https://twitter.com/wednesdaysol"&gt;Twitter&lt;/a&gt;|&lt;a href="https://www.linkedin.com/company/wednesday-solutions"&gt;LinkedIn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>postman</category>
      <category>devops</category>
      <category>githubactions</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Introduction to Object Types in TypeScript Pt2</title>
      <author>Alex Devero</author>
      <pubDate>Mon, 09 Aug 2021 06:11:56 +0000</pubDate>
      <link>https://dev.to/alexdevero/introduction-to-object-types-in-typescript-pt2-4h75</link>
      <guid>https://dev.to/alexdevero/introduction-to-object-types-in-typescript-pt2-4h75</guid>
      <description>&lt;p&gt;TypeScript introduces a new type called "object type". This type is created specifically for objects and makes it working with them easier. In this tutorial, you will learn about how to extend object types and how to use intersection types. You will also learn how to create object types using generics.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#extending-object-types"&gt;
  &lt;/a&gt;
  Extending object types
&lt;/h2&gt;

&lt;p&gt;As you work with objects, you will often have to handle types that are different, but only slightly. For example, you might create one object that contains a number of properties. So, you will create an object type for it. Then, you will create another object that is slightly different.&lt;/p&gt;

&lt;p&gt;Since this second object is slightly different, you can't use the previous object type. Now, you have two options. The first option is to create new object type for this second object. This is okay, but since those two object are similar, part of this type will be duplicating code of the first type.&lt;/p&gt;

&lt;p&gt;The second option is also about creating new object type. However, this time, you will build it on top of the previous. This means that the second object type will inherit properties defined in the first object type. Then, it will add some additional, those you need just for the second object.&lt;/p&gt;

&lt;p&gt;This process of building on top of existing interfaces is called extending. It is very similar to extending &lt;a href="https://blog.alexdevero.com/javascript-classes-pt1/#class-inheritance-extends"&gt;JavaScript classes&lt;/a&gt;. In this case, you are extending object types. The result is the same, the combination of new interface you are extending and the old you are extending with.&lt;/p&gt;

&lt;p&gt;You can extend object types, or interfaces, with the &lt;code&gt;extends&lt;/code&gt; keyword. This keyword follows after the object type name. It is then followed by the existing object type you want to extend the new type with. The rest is like defining new object type with an interface. You add curly braces and add additional properties inside the body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create some default object type/interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Guest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create new object type by extending Guest:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Guest&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;canPost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// interface User {&lt;/span&gt;
&lt;span class="c1"&gt;//   username: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   email: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   password: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   canPost: boolean;&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Create another object type by extending User:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Admin&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;securityClearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;low&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;medium&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;high&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Admin {&lt;/span&gt;
&lt;span class="c1"&gt;//   username: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   email: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   password: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   canPost: boolean;&lt;/span&gt;
&lt;span class="c1"&gt;//   role: 'admin';&lt;/span&gt;
&lt;span class="c1"&gt;//   securityClearance: 'low' | 'medium' | 'high';&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Create new object of type Guest:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;guest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Guest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joe0001&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joe@joe.co&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;joe_joe_12345&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create new object of type User:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tom0001&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tom@tom.eu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tom_tom_12345&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;canPost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create new object of type Admin:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dick0001&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dick@dick.bz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dick_dick_12345&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;canPost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;securityClearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;medium&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One important thing to mention. You can extend object types defined with interfaces only when you define them. You can't extend them when you use them to annotate some object. This will not work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#combining-type-aliases-and-interfaces-or-intersection-types"&gt;
  &lt;/a&gt;
  Combining type aliases and interfaces, or intersection types
&lt;/h2&gt;

&lt;p&gt;In the previous part, you've learned about &lt;a href="https://blog.alexdevero.com/introduction-to-object-types-in-typescript/#named-object-types"&gt;type aliases&lt;/a&gt;. You've learned what they are and how to use them to define object types, as an alternative to interfaces. One thing you should know about type aliases is that you can combine them. You can take one alias, combine it with another, or multiple, and create a new type alias.&lt;/p&gt;

&lt;p&gt;This also works with interfaces. This means that you are not limited to extending interfaces. You don't have to create one by building on top of another. You can also combine two or more existing interfaces. This can be useful when you have two existing object types and need properties that match their intersection or combination.&lt;/p&gt;

&lt;p&gt;You can combine type aliases or interfaces by using the &lt;code&gt;&amp;amp;&lt;/code&gt; operator. The result of this is a TypeScript construct called "intersection type". It is a new type that combines all type aliases or interfaces you've specified. When you define new intersection type, you have to declare it staring with &lt;code&gt;type&lt;/code&gt; keyword, similarly to &lt;a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-aliases"&gt;aliases&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create first interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;BasicSet&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;monitorModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;keyboardModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;mouseModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create second interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;AdvancedSet&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;headphonesModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;gameControllerModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create intersection type based on Square and Cube:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;GamerSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BasicSet&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;AdvancedSet&lt;/span&gt;
&lt;span class="c1"&gt;// Translates to:&lt;/span&gt;
&lt;span class="c1"&gt;// type GamerSet = {&lt;/span&gt;
&lt;span class="c1"&gt;//   monitorModel: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   keyboardModel: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   mouseModel: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   headphonesModel: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   gameControllerModel: string;&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Intersection types have an advantage over extending. You can use them when you define new object types as well as when you annotate object with existing types. The syntax in both cases is the same.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create first interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;BasicObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create second interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;numberOfPages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Annotate object with intersection type&lt;/span&gt;
&lt;span class="c1"&gt;// of BasicObject and Book:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hardcover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BasicObject&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;7.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;9.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The Four Steps to the Epiphany&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Steve Blank&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;numberOfPages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;384&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Intersection types also allow you to combine interfaces with type aliases and vice versa.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create an interface:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;BasicBook&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;sizeInMB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;numberOfPages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create a type alias:&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Annotate object with intersection type&lt;/span&gt;
&lt;span class="c1"&gt;// of BasicObject interface and Book type:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ebook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BasicBook&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;sizeInMB&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;numberOfPages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Good to Great&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jim Collins&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#object-types-and-generics"&gt;
  &lt;/a&gt;
  Object types and generics
&lt;/h2&gt;

&lt;p&gt;Basic type aliases and interfaces work well when you know what type this or that property will be. This may not apply to all situations. It can happen that at the time you define an object type you will know only that some property will be expected. However, you will not know what type this property will be, not at that moment.&lt;/p&gt;

&lt;p&gt;You could solve this problem by using multiple possible types. You could also use &lt;code&gt;any&lt;/code&gt; or &lt;code&gt;unknown&lt;/code&gt;, but neither of these will be really helpful. TypeScript gives you third option you can use in situations like these. When you define a new object type, you can also specify any parameters it accepts.&lt;/p&gt;

&lt;p&gt;When you specify a parameter for an object type, you can then reference it inside the body of the object type. You can think about this basically as about a function. If you define a function and specify a parameter you can then work with that parameter inside the function itself.&lt;/p&gt;

&lt;p&gt;What's more, when you define a parameter, you don't have to know its value at that very moment. You will know it when you call the function and pass the value as an argument. Object types allow you to do the same thing. In case of object types, interfaces, type aliases and types in general, these constructs are called "generic".&lt;/p&gt;

&lt;p&gt;This name may sound strange and cryptic. Stripped to the essentials, generics are basically just types that work with parameters. You can define a parameter for interface or type aliases using angle brackets notation. These angle brackets follow after the name of the type and contain all parameters the type accepts.&lt;/p&gt;

&lt;p&gt;If you have multiple parameters, you separate them by commas. The important thing comes when you want to use that type. When you define a parameter for a type and you want to use it, you have to specify some value for the parameter and pass it as an argument. This allows you specify types at the moment of annotation, not declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Example no.1: Interfaces&lt;/span&gt;
&lt;span class="c1"&gt;// Create a generic interface with one parameter called "Type":&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Robot&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Referencing the "Type" parameter&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Specify "Type" parameter to be type of number:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;factoryBot&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Robot&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;26598&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// The interface for "factoryBot" will be:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Robot&amp;lt;number&amp;gt; {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: number;&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;

&lt;span class="c1"&gt;// Specify "Type" parameter to be type of string:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;humanoid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Robot&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// The interface for "humanoid" will be:&lt;/span&gt;
&lt;span class="c1"&gt;// interface Robot&amp;lt;string&amp;gt; {&lt;/span&gt;
&lt;span class="c1"&gt;//   name: string;&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;


&lt;span class="c1"&gt;// Example no.2: Type aliases&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BookType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BookType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Specify "BookType" parameter to be type of 'electronic':&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ebook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electronic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;A Game of Thrones&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;George R. R. Martin&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;bookType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;electronic&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// The type for "ebook" will be:&lt;/span&gt;
&lt;span class="c1"&gt;// type Book&amp;lt;'electronic'&amp;gt; = {&lt;/span&gt;
&lt;span class="c1"&gt;//   title: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   author: string;&lt;/span&gt;
&lt;span class="c1"&gt;//   bookType: 'electronic';&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#generics-beyond-simple-type-parameters"&gt;
  &lt;/a&gt;
  Generics beyond simple type parameters
&lt;/h3&gt;

&lt;p&gt;When you work with generic, you can also use parameters to pass another types or interfaces. This can be useful when you have complex objects where some parts will change. For example, different types of payload. One type of a payload might be object of one shape. Another type of a payload might be object of a different shape.&lt;/p&gt;

&lt;p&gt;You could solve this by using multiple variants of types or interfaces. This would lead to duplicate code, even if you used extending. Another solution is to create one generic type or interface and use the parameter to specify the payload type.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a generic interface with "Payload" parameter:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;ServerResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Payload&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Payload&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create interface for the first type of payload:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;PayloadUser&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create interface for the second type of payload:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;PayloadPost&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create interface for the third type of payload:&lt;/span&gt;
&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;PayloadImage&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;fileType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create object for response with payload of type user:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serverResponseWithUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ServerResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PayloadUser&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;200&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sandy Jones&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sandy@jones.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create object for response with payload of type post:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serverResponseWithPost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ServerResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PayloadPost&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;200&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Anonymous&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;January 1, 1970 00:00:00&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create object for response with payload of type image:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serverResponseWithImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ServerResponse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;PayloadImage&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;200&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Success&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;fileType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion-introduction-to-object-types-in-typescript-pt2"&gt;
  &lt;/a&gt;
  Conclusion: Introduction to object types in TypeScript pt2
&lt;/h2&gt;

&lt;p&gt;With the help of extending interfaces and intersection types, work with even complex objects becomes easier. When you add generics, even temporarily unknown types are no longer a problem. It is my hope that this tutorial helped you understand all these concepts, how they work and how to use them.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>🎯 Level Up JavaScript Skills By Building Games.</title>
      <author>Chetan Atrawalkar👉CA.</author>
      <pubDate>Mon, 09 Aug 2021 05:50:32 +0000</pubDate>
      <link>https://dev.to/chetan_atrawalkar/level-up-javascript-skills-by-building-games-2cp1</link>
      <guid>https://dev.to/chetan_atrawalkar/level-up-javascript-skills-by-building-games-2cp1</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2B13LCL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzbmb8zam39bl5poz4kl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q2B13LCL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zzbmb8zam39bl5poz4kl.png" alt="javascript"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;JavaScript&lt;/strong&gt; is mainly used for web-based applications and web browsers. But JavaScript is also used beyond the Web in software, servers and embedded hardware controls. Here are some basic things JavaScript is used for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding interactive behavior to web pages&lt;/li&gt;
&lt;li&gt;Creating web and mobile apps&lt;/li&gt;
&lt;li&gt;Building web servers and developing server applications&lt;/li&gt;
&lt;li&gt;Game development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In this article&lt;/strong&gt; will share some interesting games to level up your javascript skills from zero to hero.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SxXiPJ2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hayj2i9gp0f2vyfinmd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SxXiPJ2E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hayj2i9gp0f2vyfinmd.gif" alt="level"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;⏩ Here some best open source JavaScript games.&lt;/strong&gt; As the source code of these games is publicly available so it allows you to get an understanding of the actual procedure behind creating such games.&lt;/p&gt;

&lt;p&gt;The best thing about these open source JavaScript games is that you can &lt;strong&gt;easily download their source code&lt;/strong&gt; in your computer, modify it according to your needs, run it using the web browser.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-hextris"&gt;
  &lt;/a&gt;
  1. Hextris
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XJbnIQ4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/548vuzqmhkhzw7ti5yiu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XJbnIQ4I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/548vuzqmhkhzw7ti5yiu.jpg" alt="hex"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Hextris&lt;/strong&gt; is an awesome puzzle game that is according to its developer inspired by the famous game Tetris.&lt;/li&gt;
&lt;li&gt;The game steadily increases its pace as it progresses which makes it very addictive. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/Hextris/hextris"&gt;Source Code&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Hextris"&gt;
        Hextris
      &lt;/a&gt; / &lt;a href="https://github.com/Hextris/hextris"&gt;
        hextris
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Fast paced HTML5 puzzle game inspired by Tetris!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#2-flexbox-froggy"&gt;
  &lt;/a&gt;
  2. Flexbox Froggy
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ub3JVjMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwg2d08mjd866j6hdst0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ub3JVjMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jwg2d08mjd866j6hdst0.jpg" alt="Froggy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Flexbox Froggy&lt;/strong&gt; is the game developed. This game allows you to enter CSS styles in order to move the frog and reach the bottom where the pond is situated. &lt;/li&gt;
&lt;li&gt;The game is developed simply using HTML5, JavaScript, CSS styles, and some images.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/thomaspark/flexboxfroggy"&gt;Source Code&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/thomaspark"&gt;
        thomaspark
      &lt;/a&gt; / &lt;a href="https://github.com/thomaspark/flexboxfroggy"&gt;
        flexboxfroggy
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A game for learning CSS flexbox 🐸
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#3-2048"&gt;
  &lt;/a&gt;
  3. 2048
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JErf3Wts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07t3c4mm8hqac71cdih4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JErf3Wts--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/07t3c4mm8hqac71cdih4.jpg" alt="Al2048"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;2048&lt;/strong&gt; is a clone of popular Play Store game 1024. Its source code is written in HTML5, CSS3, and JavaScript.&lt;/li&gt;
&lt;li&gt;If you are familiar with these languages then I would suggest you to contribute in this stunning game and display your skills to the whole world. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/gabrielecirulli/2048"&gt;Source Code&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gabrielecirulli"&gt;
        gabrielecirulli
      &lt;/a&gt; / &lt;a href="https://github.com/gabrielecirulli/2048"&gt;
        2048
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A small clone of 1024 (https://play.google.com/store/apps/details?id=com.veewo.a1024)
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#4-clumsy-bird"&gt;
  &lt;/a&gt;
  4. Clumsy Bird
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLiNEe7_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2dntbo6wr2igk6hyzaz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLiNEe7_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2dntbo6wr2igk6hyzaz.jpg" alt="Bird"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Clumsy Bird&lt;/strong&gt; is a clone of the “Flappy Bird” game and it makes use of the open source and lightweight HTML5 game engine MelonJS. &lt;/li&gt;
&lt;li&gt;The game works by you controlling a flying character and the mission is to successfully pass it from in-between the incoming walls without hitting them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/ellisonleao/clumsy-bird"&gt;Source Code&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ellisonleao"&gt;
        ellisonleao
      &lt;/a&gt; / &lt;a href="https://github.com/ellisonleao/clumsy-bird"&gt;
        clumsy-bird
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🐦 🎮 A MelonJS port of the famous Flappy Bird Game
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#5-snake-game"&gt;
  &lt;/a&gt;
  5. Snake Game
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SG_rl3nE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4d5ikttnwafh16ib8yv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SG_rl3nE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4d5ikttnwafh16ib8yv.png" alt="snake"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;The Snake game&lt;/strong&gt;, created using JavaScript, and The HTML5 canvas.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/CodeExplainedRepo/Snake-JavaScript"&gt;Source Code&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/CodeExplainedRepo"&gt;
        CodeExplainedRepo
      &lt;/a&gt; / &lt;a href="https://github.com/CodeExplainedRepo/Snake-JavaScript"&gt;
        Snake-JavaScript
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Snake game, created using JavaScript, and The HTML5 canvas.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#6-tic-tac-toe"&gt;
  &lt;/a&gt;
  6. Tic Tac Toe
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ec6_L6J1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o4q5zoijrh89ie62u5v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ec6_L6J1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8o4q5zoijrh89ie62u5v.jpg" alt="tac toe"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Tic Tac Toe&lt;/strong&gt; is one of the most simple and addictive available out there. This game is developed using HTML5, JavaScript, and CSS for some styling. &lt;/li&gt;
&lt;li&gt;The developer has made use of Google fonts to make this game more visually appealing. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://codepen.io/timrijkse/pen/XjLGKv"&gt;Source Code&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/timrijkse/embed/XjLGKv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-canvas-tetris"&gt;
  &lt;/a&gt;
  7. Canvas Tetris
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PaGzE_W1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iro6rc70o3lo6xw6zti8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PaGzE_W1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iro6rc70o3lo6xw6zti8.jpg" alt="Canvas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Canvas Tetris&lt;/strong&gt; is a really simple illustration of the Tetris game which is written in HTML5 and JavaScript to give beginner developers a basic understanding of 2D game concepts. &lt;/li&gt;
&lt;li&gt;The developer has mentioned that he created this game in just 45 minutes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/dionyziz/canvas-tetris"&gt;Source Code&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dionyziz"&gt;
        dionyziz
      &lt;/a&gt; / &lt;a href="https://github.com/dionyziz/canvas-tetris"&gt;
        canvas-tetris
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A 2D tetris game in HTML5 canvas
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#8-pacmancanvas"&gt;
  &lt;/a&gt;
  8. Pacman-canvas
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rs9dXWYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfde8zvzb17etqb6gbiu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rs9dXWYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kfde8zvzb17etqb6gbiu.jpg" alt="Pacman"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Pacman-canvas&lt;/strong&gt; is completely re-written from scratch in HTML5 and JavaScript. &lt;/li&gt;
&lt;li&gt;In Pacman-canvas you have to control a character using arrow keys on the keyboard and collect the items placed in a maze while protecting yourself from enemy units.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/platzhersh/pacman-canvas"&gt;Source Code&lt;/a&gt;
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/platzhersh"&gt;
        platzhersh
      &lt;/a&gt; / &lt;a href="https://github.com/platzhersh/pacman-canvas"&gt;
        pacman-canvas
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An old classic, re-written in HTML5.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;JavaScript and modern browsers are improving everyday with excitingly new features that are very powerful, using javascript and HTML5 you can create breathtaking games that do not require Flash to work and it's helpful to level up your javascript skills. &lt;/li&gt;
&lt;li&gt;We hope these JavaScript Games will surely give you fun and also inspire you to create something new in your next projects. Share your thoughts with me in comment section and stay tuned for more interesting articles.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;👍 Don't forget to like, keep following 🤗&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mr2mASwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4awijdtgg2grwjpzei6r.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mr2mASwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4awijdtgg2grwjpzei6r.gif" alt="like"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keep-claim-and-just-code-it-"&gt;
  &lt;/a&gt;
  Keep Claim And Just Code It 😎.
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>gamedev</category>
    </item>
    <item>
      <title>Artificial Intelligence</title>
      <author>Kouluru Nanda Kishore Reddy</author>
      <pubDate>Mon, 09 Aug 2021 04:55:56 +0000</pubDate>
      <link>https://dev.to/koulurunandakishorereddy/artificial-intelligence-3f7m</link>
      <guid>https://dev.to/koulurunandakishorereddy/artificial-intelligence-3f7m</guid>
      <description>&lt;h1&gt;What is Artificial Intelligence(AI) ?&lt;/h1&gt;

&lt;p&gt;Artificial intelligence (AI) is a wide-ranging branch of computer science concerned with building smart machines capable of performing tasks that typically require human intelligence. AI is an interdisciplinary science with multiple approaches, but advancements in machine learning and deep learning are creating a paradigm shift in virtually every sector of the tech industry. &lt;/p&gt;

&lt;p&gt; AI is the future. It is shaping many industries even when it’s new compared to other technologies. AI is also growing as scientists and engineers are doing research at a rapid pace. Companies such as Google, Facebook, Microsoft, and others are also investing heavily in AI research, and the results are quite evident. The release of self-driving cars is just an example of rapid AI growth.&lt;/p&gt;

&lt;h2&gt;History and Evolution of Artificial Intelligence&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jy_odt2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625234809634/eDEONIrqv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jy_odt2W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625234809634/eDEONIrqv.jpeg" alt="History-of-Artificial-Intelligence-1200x720.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea of Artificial Intelligence is believed to be born back in 1940s and 1950s when some scientists came up with the idea of creating artificial brain. Since then, there is no turning back.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Turing test(1950s)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Xm4YQNT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625234881052/8WTxKqj1h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Xm4YQNT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625234881052/8WTxKqj1h.png" alt="turing-test-in-ai.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
- Turing test is a very famous and the very first one performed by a British computer scientist Alan Turing. In this test, Turing tried to replace a machine with a human in a conversation over a teleprinter and checked whether a computer can replace human with a significant level of intelligence.&lt;/p&gt;
&lt;p&gt;
- He published his research in the famous landmark paper "Computing Machinery and intelligence" in 1950s.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;ELIZA(1960s)&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;
- LIZA was a chatterbot created by Joseph Weizenbaum which is believed to have been one of the first programs to pass Turing test.&lt;/p&gt;
&lt;p&gt;
- It managed to mislead many people by mimicking the role of a therapist. It encouraged the people to speak more by cross questioning them. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;IBM's Deep Blue&lt;/b&gt;&lt;/p&gt;


&lt;p&gt;In 1997, AI achieved a remarkable goal when the world chess champion and grand master Gary Kasparov was defeated by IBM’s Deep Blue, a chess playing computer program.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Kismet(1990s)&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;Kismet is a robot made in late 1990s. This robot had the capability to recognize and simulate facial expressions. It responded by making different facial expression like those of happiness, excitement, sorrow and so on for different scenarios.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Sony's AIBO(1999)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;
- AIBO(The Artificial Intelligence robot) was a robotic dog created by Sony in 1999 originally for entertainment purposes.&lt;/p&gt;
&lt;p&gt;
- This Robotic dog, AIBO has the capability to develop its own personality over time. It also has face recognition capability which helps it to detect different members of your family.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;ASIMO(2000)&lt;/b&gt;&lt;/p&gt;



&lt;p&gt;
- ASIMO(Advanced Step in Innovative Mobility) is a humanoid robot which was designed by Honda in 2000. ASIMO has the capability to recognize and simulate the surrounding environment such as recognition of moving objects, postures, sounds and faces etc.&lt;/p&gt;
&lt;p&gt;
- It is basically designed to help people. It can even recognize when a person offers it a handshake or calls it by the name.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Siri(2011)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bzHruEnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625236154431/qwcNcrNn6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bzHruEnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625236154431/qwcNcrNn6.png" alt="Screen-shot-2011-10-04-at-1.34.33-PM.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
- Siri was the first digital virtual assistant designed originally by SRI International and is widely used in iOS, macOS, iPadOS and watchOS.&lt;/p&gt;

&lt;p&gt;
- Siri has many amazing features like scheduling events and reminders, Navigation, device settings, Phone and text actions, handle payments through Apple Pay and much more.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Google DeepMind's AlphaGo(2016)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5hqgGyAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625236373944/1blVg-Zwq.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5hqgGyAi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625236373944/1blVg-Zwq.jpeg" alt="google-deepmind-go.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In 2016, Google DeepMind's AlphaGo defeated a professional Korean 'Go champion' who won 27 major tournaments from 2002 to 2016.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Microsoft's Cortana and Amazon's Alexa&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WG8bxFvI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625236483874/fbFVzfkj2.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WG8bxFvI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625236483874/fbFVzfkj2.jpeg" alt="cortana-larger-user-base-amazon-alexa.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;
- The era of virtual assistants started with the release of Apple's Siri. Since then, many developments were made in this field. Alexa, a virtual assistant by Amazon, first came into existence in November,2014 whereas Microsoft announced the availability of Cortana for Windows 10 desktops and mobile devices in January,2015.    &lt;/p&gt;
&lt;p&gt;
- In today's times, these virtual assistants are capable of performing so many daily based tasks with a remarkable level of efficiency&lt;/p&gt;

&lt;h1&gt;HOW DOES ARTIFICIAL INTELLIGENCE WORK?&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SEzD4kIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625236824567/wdhwv9Xdi.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SEzD4kIq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625236824567/wdhwv9Xdi.jpeg" alt="AI 1_0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AI works by combining large amounts of data with fast, iterative processing and intelligent algorithms, allowing the software to learn automatically from patterns or features in the data. AI is a broad field of study that includes many theories, methods and technologies, as well as the following major subfields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;b&gt;&lt;em&gt;Machine learning&lt;/em&gt;&lt;/b&gt; automates analytical model building. It uses methods from neural networks, statistics, operations research and physics to find hidden insights in data without explicitly being programmed for where to look or what to conclude.&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;&lt;em&gt;A neural network&lt;/em&gt;&lt;/b&gt; is a type of machine learning that is made up of interconnected units (like neurons) that processes information by responding to external inputs, relaying information between each unit. The process requires multiple passes at the data to find connections and derive meaning from undefined data.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;&lt;em&gt;Deep learning &lt;/em&gt;&lt;/b&gt;uses huge neural networks with many layers of processing units, taking advantage of advances in computing power and improved training techniques to learn complex patterns in large amounts of data. Common applications include image and speech recognition.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;&lt;em&gt; Cognitive computing&lt;/em&gt;&lt;/b&gt; is a subfield of AI that strives for a natural, human-like interaction with machines. Using AI and cognitive computing, the ultimate goal is for a machine to simulate human processes through the ability to interpret images and speech – and then speak coherently in response&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;&lt;em&gt;Computer vision&lt;/em&gt;&lt;/b&gt; relies on pattern recognition and deep learning to recognize what’s in a picture or video. When machines can process, analyze and understand images, they can capture images or videos in real time and interpret their surroundings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;&lt;em&gt; Natural language processing (NLP) &lt;/em&gt;&lt;/b&gt;is the ability of computers to analyze, understand and generate human language, including speech. The next stage of NLP is natural language interaction, which allows humans to communicate with computers using normal, everyday language to perform tasks.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;HOW IS AI USED?&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b8KI1cvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625240202143/VIJnDYQbv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b8KI1cvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625240202143/VIJnDYQbv.jpeg" alt="2156889_1588010158_politics.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;"AI is a computer system able to perform tasks that ordinarily require human intelligence... Many of these artificial intelligence systems are powered by machine learning, some of them are powered by deep learning and some of them are powered by very boring things like rules."&lt;/p&gt;

&lt;p&gt;Artificial intelligence generally falls under two broad categories: &lt;/p&gt;

&lt;p&gt;-&lt;b&gt; Narrow AI:&lt;/b&gt; Sometimes referred to as "Weak AI," this kind of artificial intelligence operates within a limited context and is a simulation of human intelligence. Narrow AI is often focused on performing a single task extremely well and while these machines may seem intelligent, they are operating under far more constraints and limitations than even the most basic human intelligence. &lt;/p&gt;

&lt;p&gt;-&lt;b&gt;Artificial General Intelligence (AGI): &lt;/b&gt;AGI, sometimes referred to as "Strong AI," is the kind of artificial intelligence we see in the movies, like the robots from Westworld or Data from Star Trek: The Next Generation. AGI is a machine with general intelligence and, much like a human being, it can apply that intelligence to solve any problem.  &lt;/p&gt;

&lt;h1&gt;Advantages of Artificial Intelligence&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LNg0U9-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625240628748/mol3-YfxQ.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LNg0U9-f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625240628748/mol3-YfxQ.jpeg" alt="Advantages-of-Artificial-Intelligence.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1) Reduction in Human Error&lt;/p&gt;

&lt;p&gt;2) Takes risks instead of Humans&lt;/p&gt;

&lt;p&gt;3) Available 24x7&lt;/p&gt;

&lt;p&gt;4) Helping in Repetitive Jobs&lt;/p&gt;

&lt;p&gt;5) Digital Assistance&lt;/p&gt;

&lt;p&gt;6) Faster Decisions&lt;/p&gt;

&lt;p&gt;7) Daily Applications&lt;/p&gt;

&lt;p&gt;8) New Inventions&lt;/p&gt;

&lt;h1&gt;Disadvantages of Artificial Intelligence&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OkzQnsgr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625240963976/guiYR5O5l.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OkzQnsgr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625240963976/guiYR5O5l.jpeg" alt="download.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1)High cost of implementation&lt;/p&gt;

&lt;p&gt;2)Doesn't improve with experience&lt;/p&gt;

&lt;p&gt;3)Lacks creativity&lt;/p&gt;

&lt;p&gt;4)Risk of unemployment&lt;/p&gt;

&lt;h2&gt;Finally :&lt;/h2&gt;

&lt;p&gt;I am going to close by giving some general conclusions about Artificial Intelligence (AI). AI is the ability of machines to adapt to external inputs by forming rational behaviors based on that input. Using AI, we can create systems that can perform tasks that would otherwise require human intelligence.&lt;/p&gt;

&lt;p&gt;Thank you for reading 😊&lt;/p&gt;

&lt;p&gt;If you have enjoyed this article and would like to buy me a coffee you can do it here 😊👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/koulurunanda"&gt;Buy me a Coffee&lt;/a&gt; &lt;/p&gt;

</description>
      <category>ai</category>
      <category>techtalks</category>
      <category>programming</category>
      <category>computerscience</category>
    </item>
  </channel>
</rss>
