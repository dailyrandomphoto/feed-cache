<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>#100daysofcode [Day-14]
</title>
      <author>Al Siam</author>
      <pubDate>Fri, 27 Aug 2021 17:18:56 +0000</pubDate>
      <link>https://dev.to/alsiamworld/100daysofcode-day-14-48a9</link>
      <guid>https://dev.to/alsiamworld/100daysofcode-day-14-48a9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#100daysofcode-day14"&gt;
  &lt;/a&gt;
  100daysofcode [Day-14]
&lt;/h1&gt;

&lt;p&gt;I'm trying to gain more knowledge about ES6 and today I've learnt es6 filter, destructuring, map, forEach and something more. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YNGqnWe_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axhgij23gt4hg0lgiu95.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YNGqnWe_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/axhgij23gt4hg0lgiu95.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Practical guide to parsing your Date and Time in Go</title>
      <author>Rajkumar</author>
      <pubDate>Fri, 27 Aug 2021 17:00:08 +0000</pubDate>
      <link>https://dev.to/rajkumargosavi/practical-guide-to-parsing-your-date-and-time-in-go-5blb</link>
      <guid>https://dev.to/rajkumargosavi/practical-guide-to-parsing-your-date-and-time-in-go-5blb</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Cjl1sP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gasknkntr6pkmrn656z5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Cjl1sP1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gasknkntr6pkmrn656z5.png" alt="Gopher with a watch"&gt;&lt;/a&gt;&lt;br&gt;
Often we find ourselves with a Date Time that is not in some standard format. This is where we identify the pattern of the date time and then try to write a custom layout.&lt;/p&gt;

&lt;p&gt;Let us see how we can achieve this in go using the standard &lt;strong&gt;time&lt;/strong&gt; package. The &lt;strong&gt;time&lt;/strong&gt; package provides us with several functionalities which includes functions like &lt;strong&gt;Parse&lt;/strong&gt; and &lt;strong&gt;Format&lt;/strong&gt; that serves our purpose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parse&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Parse parses a formatted string and returns the time value it represents.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"time"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;longForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Jan 2, 2006 at 3:04pm (MST)"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Feb 3, 2013 at 7:54pm (PST)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;shortForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"2006-Jan-02"&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shortForm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"2013-Feb-03"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
2013-02-03 19:54:00 +0000 PST
2013-02-03 00:00:00 +0000 UTC
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go Playground Link: &lt;a href="https://play.golang.org/p/jYyQtEPTW--"&gt;Parse Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Format&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Format returns a textual representation of the time value formatted according to the layout defined by the argument.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnixDate&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Wed Feb 25 11:06:39 PST 2015"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c"&gt;// Always check errors even if they should not happen.&lt;/span&gt;
        &lt;span class="nb"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"default format:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Unix format:"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnixDate&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Output:
default format: 2015-02-25 11:06:39 +0000 PST
Unix format: Wed Feb 25 11:06:39 PST 2015
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go Playground Link: &lt;a href="https://play.golang.org/p/QnOrTVGpGLI"&gt;Format Example&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#predefined-layouts-available-in-time-package"&gt;
  &lt;/a&gt;
  &lt;a href="https://pkg.go.dev/time#pkg-constants"&gt;Predefined Layouts&lt;/a&gt; available in &lt;strong&gt;time&lt;/strong&gt; package
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Label&lt;/th&gt;
&lt;th&gt;Definition&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Layout&lt;/td&gt;
&lt;td&gt;01/02 03:04:05PM '06 -0700&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ANSIC&lt;/td&gt;
&lt;td&gt;Mon Jan _2 15:04:05 2006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UnixDate&lt;/td&gt;
&lt;td&gt;Mon Jan _2 15:04:05 MST 2006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RubyDate&lt;/td&gt;
&lt;td&gt;Mon Jan 02 15:04:05 -0700 2006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC822&lt;/td&gt;
&lt;td&gt;02 Jan 06 15:04 MST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC822Z&lt;/td&gt;
&lt;td&gt;02 Jan 06 15:04 -0700&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC850&lt;/td&gt;
&lt;td&gt;Monday, 02-Jan-06 15:04:05 MST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC1123&lt;/td&gt;
&lt;td&gt;Mon, 02 Jan 2006 15:04:05 MST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC1123Z&lt;/td&gt;
&lt;td&gt;Mon, 02 Jan 2006 15:04:05 -0700&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC3339&lt;/td&gt;
&lt;td&gt;2006-01-02T15:04:05Z07:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFC3339Nano&lt;/td&gt;
&lt;td&gt;2006-01-02T15:04:05.999999999Z07:00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Kitchen&lt;/td&gt;
&lt;td&gt;3:04PM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Stamp&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StampMilli&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05.000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StampMicro&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05.000000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StampNano&lt;/td&gt;
&lt;td&gt;Jan _2 15:04:05.000000000&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#building-blocks-for-creating-your-own-layout"&gt;
  &lt;/a&gt;
  Building Blocks for creating your own layout
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Options&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Year&lt;/td&gt;
&lt;td&gt;"2006", "06"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Month&lt;/td&gt;
&lt;td&gt;"Jan", "January", "1", "01"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Textual day of the week&lt;/td&gt;
&lt;td&gt;"Mon", "Monday"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Numeric day of the month&lt;/td&gt;
&lt;td&gt;"2", "_2", "02"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Numeric day of the year&lt;/td&gt;
&lt;td&gt;"__2", "002"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hour&lt;/td&gt;
&lt;td&gt;"15", "3", "03" (PM or AM)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Minute&lt;/td&gt;
&lt;td&gt;"4", "04"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Second&lt;/td&gt;
&lt;td&gt;"5", "05"&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AM/PM mark&lt;/td&gt;
&lt;td&gt;"PM"&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;For layouts specifying the two-digit year 06, a value NN &amp;gt;= 69 will be treated as 19NN and a value NN &amp;lt; 69 will be treated as 20NN.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#numeric-time-zone-offsets-format-as-follows"&gt;
  &lt;/a&gt;
  Numeric time zone offsets format as follows:
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;"-0700"&lt;/td&gt;
&lt;td&gt;±hhmm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"-07:00"&lt;/td&gt;
&lt;td&gt;±hh:mm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"-07"&lt;/td&gt;
&lt;td&gt;±hh&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Replacing the sign in the format with a Z triggers the ISO 8601 behavior of printing Z instead of an offset for the UTC zone. Thus:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;"Z0700"&lt;/td&gt;
&lt;td&gt;Z or ±hhmm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"Z07:00"&lt;/td&gt;
&lt;td&gt;Z or ±hh:mm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"Z07"&lt;/td&gt;
&lt;td&gt;Z or ±hh&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#final-example"&gt;
  &lt;/a&gt;
  Final Example
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ipTimes&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"24 Aug 2021 7:20:50 PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Aug 24 2021 07:20:50PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"24-08-2021 17:20:50"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"08-24-2021 13:12:32"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"24/8/21 9:00:12"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"8/24/2021 10:10:10"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"1993-11-23 7**12**44PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"24 October 97 7:12:45PM+05:30"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;// 24 th January 1997&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;layouts&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"2 Jan 2006 3:04:05 PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"Jan 2 2006 03:04:05PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"2-01-2006 15:04:05"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"01-02-2006 15:4:5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"2/1/06 3:4:5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"1/2/2006 3:4:5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"2006-01-02 3**4**5PM"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"2 January 06 3:4:5PMZ07:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipTimes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layouts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ipTimes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c"&gt;// parsing to get time value&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                              &lt;span class="c"&gt;// check for errors&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"    Input DateTime String: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ipTimes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"                   Layout: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layouts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Time value Default Format: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"   Time in RFC3339 Format: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RFC3339&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let us take one such example to iterate through it&lt;/p&gt;

&lt;p&gt;Input:  "24 October 97 7:12:45PM+05:30"&lt;br&gt;
Layout: "2 January 06 3:4:5PMZ07:00"&lt;/p&gt;

&lt;p&gt;From the building blocks listed above we can map things &lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Layout Key&lt;/th&gt;
&lt;th&gt;Actual Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;td&gt;Numeric day of the month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;January&lt;/td&gt;
&lt;td&gt;October&lt;/td&gt;
&lt;td&gt;month&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;06&lt;/td&gt;
&lt;td&gt;97&lt;/td&gt;
&lt;td&gt;Year (1997)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Hour&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;Minute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;Second&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Z07:00&lt;/td&gt;
&lt;td&gt;+05:30&lt;/td&gt;
&lt;td&gt;Offset&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Since PM is specified 7:12:45 is in 12 hour format.&lt;/p&gt;

&lt;p&gt;Using the Layout blocks specified we can easily see the pattern and can create our own layout.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#fun-tip"&gt;
  &lt;/a&gt;
  Fun Tip
&lt;/h4&gt;

&lt;p&gt;Ever wondered why &lt;code&gt;time.Now()&lt;/code&gt; on &lt;a href="https://play.golang.org/"&gt;golang playground&lt;/a&gt; prints the same time (2009-11-10 23:00:00 +0000 UTC m=+0.000000001) ?&lt;/p&gt;

&lt;p&gt;Drum roll!!!!!!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;It is the time and date of Go Lang's birthday.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hope you learnt something new or had your concepts revised.&lt;/p&gt;

&lt;p&gt;Let me know if I missed something.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://play.golang.org/p/_D90gfCLnDS"&gt;Complete Working Date Time Example&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://pkg.go.dev/time@go1.17#Time.Format"&gt;Time Format&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pkg.go.dev/time@go1.17#Parse"&gt;Time Parse&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pkg.go.dev/time@go1.17#pkg-constants"&gt;Constants&lt;/a&gt;&lt;/p&gt;

</description>
      <category>go</category>
    </item>
    <item>
      <title>Meet PreviewDevice 0.7.0</title>
      <author>Anton Paliakou</author>
      <pubDate>Fri, 27 Aug 2021 16:56:35 +0000</pubDate>
      <link>https://dev.to/toni777772/meet-previewdevice-0-7-0-1dpg</link>
      <guid>https://dev.to/toni777772/meet-previewdevice-0-7-0-1dpg</guid>
      <description>&lt;p&gt;&lt;strong&gt;PreviewDevice&lt;/strong&gt; - a library with elegant syntax for preview device in SwiftUI.&lt;/p&gt;

&lt;p&gt;The first question that comes to mind is,&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-i-need-to-use-the-thirdparty-library-for-swiftui-preview-"&gt;
  &lt;/a&gt;
  Why do I need to use the third-party library for SwiftUI preview ?
&lt;/h3&gt;

&lt;p&gt;For answer this question will compare Apple API for preview with PreviewDevice library. Let's look at real cases on projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case"&gt;
  &lt;/a&gt;
  Case:
&lt;/h3&gt;

&lt;p&gt;Preview on device. Let's say you want to see a preview in the iPhone SE 2 Generation (4.7 inch screen size) with preview device name.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple way&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone SE (2nd generation)"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone SE (2nd generation)"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PreviewDevice lib&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphoneSE_2Gen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is easy make mistake in iphone device name when use standard Apple way. Also you need to know and keep in your brain the correct iPhone name. PreviewDevice library provides a type-safe way for preview devices. The library has &lt;code&gt;Device&lt;/code&gt; enum with all devices types: all iphones, all ipads, all apple watches, ipod, mac.&lt;/p&gt;

&lt;p&gt;Result: &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1XF6weEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdxobakjgnu0bqv437fj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1XF6weEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pdxobakjgnu0bqv437fj.png" alt="Result"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#case"&gt;
  &lt;/a&gt;
  Case:
&lt;/h3&gt;

&lt;p&gt;Make preview on some devices. As example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;iPhone 8&lt;/li&gt;
&lt;li&gt;iPhone 8 Plus&lt;/li&gt;
&lt;li&gt;iPhone12 Pro&lt;/li&gt;
&lt;li&gt;iPhone 12&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Apple way&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;Group&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 8 Plus"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 8 Plus"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12 Pro"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12 Pro"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PreviewDevice lib&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;devices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone8Plus&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone12Pro&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone12&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The library awesome managed this case! Single line solution 💪&lt;/p&gt;

&lt;p&gt;Result:&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tkpOOqpS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ciz0rd74ur57c4u6u33m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tkpOOqpS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ciz0rd74ur57c4u6u33m.png" alt="Result2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#case"&gt;
  &lt;/a&gt;
  Case:
&lt;/h3&gt;

&lt;p&gt;Make preview on the device for light and night mode. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple way&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;Group&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;preferredColorScheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;preferredColorScheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PreviewDevice lib&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;colorSchemes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;light&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dark&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Single line solution from the library 💪 💪&lt;/p&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xCiOQEpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix0z0fobp0mlroebza8j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xCiOQEpa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ix0z0fobp0mlroebza8j.png" alt="Result3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#case"&gt;
  &lt;/a&gt;
  Case:
&lt;/h3&gt;

&lt;p&gt;Make preview on the device with different interface orientations (portrait, landscape left, landscape right). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apple way&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;@available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iOS&lt;/span&gt; &lt;span class="mf"&gt;15.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;Group&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portrait&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;landscapeLeft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PreviewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;rawValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDisplayName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"iPhone 12"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewInterfaceOrientation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;landscapeRight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;PreviewDevice lib&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;@available&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iOS&lt;/span&gt; &lt;span class="mf"&gt;15.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ContentView_Previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PreviewProvider&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;previews&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;some&lt;/span&gt; &lt;span class="kt"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;ContentView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;previewDevice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iphone12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;orientations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;landscapeLeft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;landscapeRight&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tpf0cXOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8688y8hn0v2gppioqlr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tpf0cXOF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w8688y8hn0v2gppioqlr.png" alt="Result4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One line code 💪 💪 💪&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installation-library"&gt;
  &lt;/a&gt;
  Installation library
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Requearements&lt;/em&gt; &lt;em&gt;Xcode13&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#cocoapods"&gt;
  &lt;/a&gt;
  &lt;a href="https://guides.cocoapods.org/using/using-cocoapods.html"&gt;CocoaPods&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Specify next line in Podfile:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;pod&lt;/span&gt; &lt;span class="no"&gt;PreviewDevice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#swift-package-manager"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/apple/swift-package-manager"&gt;Swift Package Manager&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Open Xcode, File -&amp;gt; Swift Packages -&amp;gt; Add Packages.. and paste library git url:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://github.com/Toni77777/PreviewDevice.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;PreviewDevice&lt;/strong&gt; is a type-safe syntax sugar for preview device on SwiftUI.&lt;/p&gt;

&lt;p&gt;Do you have a cool idea for a preview? Welcome to &lt;a href="https://github.com/Toni77777/PreviewDevice"&gt;contribute&lt;/a&gt;!&lt;br&gt;
Thanks for reading! See you soon. 👋&lt;/p&gt;

</description>
      <category>swift</category>
      <category>ios</category>
      <category>swiftui</category>
      <category>xcode</category>
    </item>
    <item>
      <title>love -von</title>
      <author>Antwan R. Wimberly-Jackson</author>
      <pubDate>Fri, 27 Aug 2021 16:56:16 +0000</pubDate>
      <link>https://dev.to/armw4/love-von-30k7</link>
      <guid>https://dev.to/armw4/love-von-30k7</guid>
      <description>&lt;p&gt;big-pussy-cat-low-mein-chow&lt;/p&gt;

&lt;p&gt;must go bye bye - aka Adios&lt;/p&gt;

&lt;p&gt;for my great grandfather Diego has a checkpoint around the bend on the rendezvous fretting Lindsey and zeh big unit and zeh african women are sooo genrerioussss I mean it's not like bald head is already going swaffor and Luka coach shaw Howard Adina is so son is Dwight Howard's nat naeeee&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>firebase</category>
      <category>bad</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>Buy database registered passports, https://supportdocuments24hrs.com</title>
      <author>Dimitri</author>
      <pubDate>Fri, 27 Aug 2021 16:47:01 +0000</pubDate>
      <link>https://dev.to/dimitri97720292/buy-database-registered-passports-https-supportdocuments24hrs-com-4jh1</link>
      <guid>https://dev.to/dimitri97720292/buy-database-registered-passports-https-supportdocuments24hrs-com-4jh1</guid>
      <description>&lt;p&gt;Buy database registered passports, &lt;a href="https://supportdocuments24hrs.com"&gt;https://supportdocuments24hrs.com&lt;/a&gt; driver's license, ID cards, residence permits, visa, certificates online&lt;/p&gt;

&lt;p&gt;You know that now you can now buy Registered database passport Online legally and get the citizenship of other countries?  &lt;a href="https://supportdocuments24hrs.com"&gt;https://supportdocuments24hrs.com&lt;/a&gt;   Every year thousands of people buy passports for travel or recreational purpose. So, if you need to buy a Fake passport, but you are scared of the legal issue, don’t worry, you would get the best solution for a passport online at an affordable price. You can also buy a real passport online without legal issues.&lt;/p&gt;

&lt;p&gt;Our website, &lt;a href="https://supportdocuments24hrs.com"&gt;https://supportdocuments24hrs.com&lt;/a&gt; &lt;br&gt;
Our website, &lt;a href="https://supportdocuments24hrs.com"&gt;https://supportdocuments24hrs.com&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Email……&lt;a href="mailto:.Documents24hrs@gmail.com"&gt;.Documents24hrs@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Buy Drivers license online&lt;/p&gt;

&lt;p&gt;Buy Passports online&lt;/p&gt;

&lt;p&gt;Buy ID cards online&lt;/p&gt;

&lt;p&gt;Apply For A Visa online&lt;/p&gt;

&lt;p&gt;Buy Genuine passports online&lt;/p&gt;

&lt;p&gt;Buy Fake drivers license online&lt;br&gt;
Our website, &lt;a href="https://supportdocuments24hrs.com"&gt;https://supportdocuments24hrs.com&lt;/a&gt; &lt;br&gt;
Our website, &lt;a href="https://supportdocuments24hrs.com"&gt;https://supportdocuments24hrs.com&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Email……&lt;a href="mailto:.Documents24hrs@gmail.com"&gt;.Documents24hrs@gmail.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Buy Fake certificates online&lt;/p&gt;

&lt;p&gt;Real and fake drivers license&lt;/p&gt;

&lt;p&gt;Real and fake passports for sale&lt;/p&gt;

&lt;p&gt;Genuine Visas for sale online&lt;/p&gt;

&lt;p&gt;Our website, &lt;a href="https://legalpaperline.com"&gt;https://legalpaperline.com&lt;/a&gt;&lt;br&gt;
Our website, &lt;a href="https://legalpaperline.com"&gt;https://legalpaperline.com&lt;/a&gt;&lt;br&gt;
Our website, &lt;a href="https://legalpaperline.com"&gt;https://legalpaperline.com&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Best Practices for Deploying Microsoft SQL Server on Amazon EC2 | Summary</title>
      <author>Haytham Mostafa</author>
      <pubDate>Fri, 27 Aug 2021 16:45:16 +0000</pubDate>
      <link>https://dev.to/awsmenacommunity/best-practices-for-deploying-microsoft-sql-server-on-amazon-ec2-summary-jjg</link>
      <guid>https://dev.to/awsmenacommunity/best-practices-for-deploying-microsoft-sql-server-on-amazon-ec2-summary-jjg</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-high-availability-and-disaster-recovery"&gt;
  &lt;/a&gt;
  1. High availability and disaster recovery
&lt;/h1&gt;

&lt;p&gt;Every business seeks data solutions that can address their operational requirements. These requirements translate to specific values of the Recovery Time Objective (RTO), and Recovery Point Objective (RPO). &lt;br&gt;
• The RTO indicates how long the business can endure database and application outages.&lt;br&gt;
• The RPO determines how much data loss is tolerable. &lt;br&gt;
The combination of RTO and RPO requirements dictates what solution should be adopted. &lt;br&gt;
Typically, applications with RPO and RTO values close to zero should use a high availability (HA) solution, whereas disaster recovery (DR) solutions can be used for those with higher values. In many cases, HA and DR solutions can be mixed to address more complex requirements.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hImbnrEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knjzvnzr4s6hw8sjsgc0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hImbnrEP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/knjzvnzr4s6hw8sjsgc0.png" alt="Table 1"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Table 1: HA/DR options in Microsoft SQL Server&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;br&gt;
• Always On basic availability groups in SQL Server 2019 Standard edition support a single passive replicas (in addition to the primary replica) for a single database per availability group. For multiple databases in HA mode, a separate availability group needs to be defined for each database. &lt;br&gt;
• MSSQL Failover Cluster Instance is often used as a pure HA solution. &lt;br&gt;
These solutions rely on one or more secondary servers, with SQL Server running as active or passive standby. Based on the specific HA/DR requirements, these servers can be located in close proximity to each other or far apart. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-availability-zones-and-multiaz-deployment"&gt;
  &lt;/a&gt;
  1.1   Availability Zones and multi-AZ deployment
&lt;/h2&gt;

&lt;p&gt;• AWS Availability Zone are a good solution for synchronous replication of your databases using Mirroring, Always On Availability Groups, Basic Availability Groups, or Failover Cluster Instances.&lt;br&gt;
• SQL Server provides zero data loss and, when combined with the low-latency infrastructure of AZs, provides high performance. This is one of the main differences between most on-premises deployments and AWS. For example, Always On Failover Cluster Instance (FCI) is often used inside a single data center, because all nodes in an FCI cluster must have access to the same shared storage. Locating these nodes in different data centers could degrade performance. &lt;br&gt;
• In AWS, FCI nodes can be located in separate AZs and still provide high performance because of the low-latency network link between all AZs within a Region. &lt;br&gt;
• SQL Server FCI relies on shared storage being accessible from all nodes participating in FCI.&lt;br&gt;
• Amazon FSx for Windows File Server is a fully managed service providing shared storage that automatically replicates the data synchronously across two AZs, provides high availability with automatic failure detection, failover, and failback, and fully supports the Server Message Block (SMB) Continuous Availability (CA) feature.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C9CITImg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uny6tjzkuiqbqiiymo1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C9CITImg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uny6tjzkuiqbqiiymo1c.png" alt="Figure 1"&gt;&lt;/a&gt;&lt;em&gt;Figure 1: Using Amazon FSx as file-share for Failover Cluster Instance, or as file-share witness in Windows Server Failover Cluster&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-using-aws-launch-wizard-to-deploy-microsoft-sql-server-on-amazon-ec2-instances"&gt;
  &lt;/a&gt;
  2. Using AWS Launch Wizard to deploy Microsoft SQL Server on Amazon EC2 instances
&lt;/h1&gt;

&lt;p&gt;AWS Launch Wizard is a service that offers a guided way of sizing, configuring, and deploying AWS resources for third party applications, such as Microsoft SQL Server. &lt;br&gt;
You can use this service to deploy MS SQL Server with following configurations: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  SQL Server single instance on Windows &lt;/li&gt;
&lt;li&gt;  SQL Server single instance on Linux &lt;/li&gt;
&lt;li&gt;  SQL Server HA using Always On Availability Groups on Windows &lt;/li&gt;
&lt;li&gt;  SQL Server HA using Always On Availability Groups on Linux &lt;/li&gt;
&lt;li&gt;  SQL Server HA using Always On Failover Cluster Instance on Windows 
AWS Launch Wizard:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;a.&lt;/strong&gt;  Provides an estimated cost of deployment, and enables you to modify your resources to instantly view an updated cost assessment.&lt;br&gt;
&lt;strong&gt;b.&lt;/strong&gt;  Handles all the heavy-lifting, including installation and configuration of Always On Availability Groups or Failover Cluster Instance.&lt;br&gt;
&lt;strong&gt;c.&lt;/strong&gt;  Creates CloudFormation templates that can serve as a baseline to accelerate subsequent deployments. For post-deployment management, AWS Systems Manager (SSM) Application Manager automatically imports application resources created by AWS Launch Wizard. From the Application Manager console, you can view operations and perform operations tasks.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b43LdelE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufks5zsyfogqcp7ajtas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b43LdelE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufks5zsyfogqcp7ajtas.png" alt="Figure 2"&gt;&lt;/a&gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Figure 2: AWS Launch Wizard deploys MS SQL FCI using Amazon FSx for Windows File Server&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#21-multiregion-deployments"&gt;
  &lt;/a&gt;
  2.1   Multi-Region deployments
&lt;/h2&gt;

&lt;p&gt;You can leverage the global scale of AWS to ensure availability under almost any circumstances. By default, Amazon VPC is confined within a single Region. Therefore, for a multi-region deployment, you need to establish connectivity between your SQL Server instances that are deployed in different Regions. In AWS, there are a number of ways to do this: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  VPC peering &lt;/li&gt;
&lt;li&gt;  AWS Transit Gateway&lt;/li&gt;
&lt;li&gt;  VPN connections&lt;/li&gt;
&lt;li&gt;  VPC sharing &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;• If applications or users were deployed in remote Regions which need to connect to your SQL Server instances, you can use the AWS Direct Connect. &lt;br&gt;
• It is possible to have synchronous replication in a multi-region SQL Server deployment, the farther apart your selected Regions are, the more severe the performance penalty is for a synchronous replication.&lt;br&gt;
• The best practice for multi-region deployments is to establish an asynchronous replication, especially for Regions that are geographically distant. &lt;br&gt;
• For those workloads that come with aggressive RPO requirements, asynchronous multi-Region deployment can be combined with a Multi-AZ or Single-AZ synchronous replication. &lt;br&gt;
• You can also combine all three methods into a single solution. &lt;br&gt;
• In cases involving several replicas across two or more Regions, distributed availability groups might be the most suitable option. &lt;br&gt;
• Distributed availability groups can also be used to increase the number of read replicas.&lt;br&gt;
• A traditional availability group allows up to 8 read replicas. This means you can have a total of 9 replicas, including the primary. Using a distributed availability group, a second availability group can be added to the first, increasing the total number of replicas to 18. This process can be repeated with a third availability group and a second distributed availability group. &lt;br&gt;
• The second distributed availability group can be configured to include either the first or second availability groups as its primary. &lt;br&gt;
• Distributed availability group is the means through which SQL Server Always On can achieve virtually unlimited scale.&lt;br&gt;
• Another use of a distributed availability group is zero downtime database migrations. The independence of SQL Server Distributed Availability Group from Active Directory and Windows Server Failover Cluster (WSFC) is the main benefactor for these cases. It enables you to keep both sides of the migration synchronized without having to worry about the complexities of Active Directory or WSFC.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GM5sBJ43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxqiptvsmtzy7rjeqq2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GM5sBJ43--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxqiptvsmtzy7rjeqq2l.png" alt="Figure 2"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Figure 2: SQL Server distributed availability group in AWS&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#22-disaster-recovery"&gt;
  &lt;/a&gt;
  2.2   Disaster recovery
&lt;/h2&gt;

&lt;p&gt;• DR solutions require a replica of SQL Server databases in another server. The other server is often in a remote site far away from the primary site. This means higher latency, and therefore, lower performance if you rely on HA solutions that use synchronous replication. &lt;br&gt;
• DR solutions often rely on asynchronous replication of data. &lt;br&gt;
• DR solutions are based on either block-level or database-level replication. &lt;br&gt;
• AWS also provides CloudEndure Disaster Recovery. You can use CloudEndure DR to reduce downtime to a few minutes, protect against data loss for sub-second RPO, simplify implementation, increase reliability, and decrease the total cost of ownership. &lt;br&gt;
• CloudEndure is an agent-based solution that replicates entire virtual machines, including the operating system, all installed applications, and all databases, into a staging area. &lt;br&gt;
• The staging area contains low-cost resources automatically provisioned and managed by CloudEndure Disaster Recovery. Because the staging area does not run a live version of your workloads, you don’t need to pay for duplicate software licenses or high-performance compute. Rather, you pay for low-cost compute and storage. &lt;br&gt;
• The fully provisioned recovery environment, with the right-sized compute and higher-performance storage required for recovered workloads, is launched only during a disaster or drill. AWS also makes CloudEndure available at no additional cost for migration projects.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8hT9KNut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilu5pycz13loilmo0wez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8hT9KNut--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilu5pycz13loilmo0wez.png" alt="Figure 3"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Figure 3: CloudEndure disaster recovery&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-performance-optimization"&gt;
  &lt;/a&gt;
  3. Performance optimization
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#31-using-amazon-elastic-block-store-amazon-ebs"&gt;
  &lt;/a&gt;
  3.1   Using Amazon Elastic Block Store (Amazon EBS)
&lt;/h2&gt;

&lt;p&gt;• Amazon EBS is a Single-AZ block storage service with a number of flexible options to cater to diverse requirements. &lt;br&gt;
• For maximizing performance on a single volume, use a Provisioned IOPS Solid State Drive (SSD). &lt;br&gt;
• You can provision up to 64,000 IOPS per io2 EBS volume, along with 1000-MiB/s throughput. &lt;br&gt;
• For more demanding workloads, the io2 Block Express EBS volumes guarantee 256,000 IOPS and 4,000 MiB/s throughput per volume. &lt;br&gt;
• For more IOPS and throughput than provided by a single EBS volume, you can create multiple volumes and stripe them in your Windows or Linux instance. &lt;br&gt;
• Remember to use EBS-optimized EC2 instance types, this means a dedicated network connection is allocated to serve requests between your EC2 instance and the EBS volumes attached to it. &lt;br&gt;
• gp2 and gp3 volumes offer a better balance of price and performance for SQL Server workloads. gp2 volumes deliver single-digit ms latencies and the ability to burst to 16,000 IOPS for extended periods. The IOPS load generated by SQL Server database tends to spike frequently. &lt;br&gt;
• One of the major benefits of using EBS volumes is the ability to create point-in-time and instantaneous EBS snapshots. This feature copies the EBS snapshot to Amazon S3 infrastructure, which provides 99.999999999% durability. &lt;br&gt;
• Despite EBS volumes being confined to a single AZ, EBS snapshots can be restored to any AZ within the same Region. &lt;br&gt;
• The block-level snapshots are not the same as database backups, and not all features of database backups are attainable this way. Therefore, this method is often combined and complemented with a regular database backup plan. &lt;br&gt;
• Although each EBS volume can be as large as 64 TB, and therefore, could take a long time to transfer all its data to Amazon S3, EBS snapshots are always point-in-time. &lt;br&gt;
• After restore a volume from a snapshot, the volume is immediately available to applications for read and write but it takes some time to get its full performance capacity. Using Amazon EBS fast snapshot restore, helps in eliminate the latency of I/O operations on a block when it is accessed for the first time. &lt;br&gt;
• You can use AWS Systems Manager Run Command to take application-consistent EBS snapshots of your online SQL Server files at any time, with no need to offline your database or put it in read-only mode. The snapshot process uses Windows Volume Shadow Copy Service (VSS) to take image-level backups of VSS-aware applications. MS SQL Server is VSS-aware and perfectly compatible with this technique. It is also possible to take VSS snapshots of Linux instances.&lt;br&gt;
• You can also take crash-consistent EBS snapshots across multiple EBS volumes, attached to a Windows or Linux EC2 instance, without using orchestrator applications. Using this method, only lose uncommitted transactions and writes that are not flushed to the disk. &lt;br&gt;
• SQL Server is capable of restoring databases to a consistent point before the crash time, this feature is also supported through AWS Backup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#32-instance-storage"&gt;
  &lt;/a&gt;
  3.2   Instance storage
&lt;/h2&gt;

&lt;p&gt;• Storage-optimized EC2 instance types choosing storage-optimized EC2 instance types for maximum performance, it is essential to understand that some of the smaller instance types provide instance storage that is shared with other instances. &lt;br&gt;
• These are virtual disks that reside on a physical disk attached to the physical host.&lt;br&gt;
• By selecting instance type, such as i3.2xlarge, you ensure that there is a 1:1 correspondence between your instance store disk and the underlying physical disk. &lt;br&gt;
• Instance disks are ephemeral and live only as long as their associated EC2 instance. &lt;br&gt;
• If the EC2 instance fails, or stopped or ended, all of its instance storage disks are wiped out and the data stored on them is irrecoverable. Unlike EBS volumes, instance storage disks cannot be backed up using a snapshot. Therefore, if you choose to use EC2 instance storage for your permanent data, you need to provide a way to increase its durability. &lt;br&gt;
• One suitable use for instance storage may be the tempdb system database files, those files are recreated each time the SQL Server service is restarted. &lt;br&gt;
&lt;strong&gt;a.&lt;/strong&gt;  As a best practice, the tempdb files should be stored on a fast volume, separate from user databases. &lt;br&gt;
&lt;strong&gt;b.&lt;/strong&gt;  For the best performance, ensure that the tempdb data files within the same filegroup are the same size and stored on striped volumes. Another use for EC2 instance storage is the buffer pool extension. This feature uses fast random-access disks (SSD) as a secondary cache between RAM and persistent disk storage, striking a balance between cost and performance when running workloads on SQL Server. &lt;br&gt;
• Although instance storage disks are the fastest available to EC2 instances, their performance is capped at the speed of the physical disk. &lt;br&gt;
• You can go beyond the single disk maximum by striping across several disks. You could also use instance storage disks as the cache layer in Storage Spaces (for single Windows instances) and Storage Spaces Direct (for Windows Server failover clusters) storage pools.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#33-amazon-fsx-for-windows-file-server"&gt;
  &lt;/a&gt;
  3.3   Amazon FSx for Windows File Server
&lt;/h2&gt;

&lt;p&gt;Amazon FSx for Windows File Server is another storage option for SQL Server on Amazon EC2. This option is suitable for three major use-cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  As shared storage used by SQL Server nodes participating in a Failover Cluster Instance. &lt;/li&gt;
&lt;li&gt;  As file-share witness to be used with any SQL Server cluster on top of Windows Server Failover Cluster.&lt;/li&gt;
&lt;li&gt;  As an option to attain higher throughput levels than available in dedicated EBS optimization
To better understand the third case:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;a.&lt;/strong&gt;  Notice that EBS throughput depends on EC2 instance size.&lt;br&gt;
&lt;strong&gt;b.&lt;/strong&gt;  Smaller EC2 instance sizes provide lower EBS throughput; therefore, to attain EBS higher throughput, you need bigger instance sizes.&lt;br&gt;
&lt;strong&gt;c.&lt;/strong&gt;  If a workload leaves a big portion of its network bandwidth unused, but requires higher throughput to access underlying storage, using a shared file system over SMB may unlock its required performance, while reducing cost by using smaller EC2 instance sizes. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Amazon FSx provides fast performance with baseline throughput up to 2 GB/second per file system, hundreds of thousands of IOPS, and consistent sub-millisecond latencies. &lt;/li&gt;
&lt;li&gt;  To provide the right performance for your SQL instances, you can choose a throughput level that is independent of your file system size. Higher levels of throughput capacity also come with higher levels of IOPS that the file server can serve to the SQL Server instances accessing it. &lt;/li&gt;
&lt;li&gt;  The storage capacity determines not only how much data you can store, but also how many IOPS you can perform on the storage – each GB of storage provides three IOPS. You can provision each file system to be up to 64 TB in size.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#34-bandwidth-and-latency"&gt;
  &lt;/a&gt;
  3.4   Bandwidth and latency
&lt;/h2&gt;

&lt;p&gt;It is important to remember the difference between latency and bandwidth. You should find a balance between network latency and availability. To gain the highest bandwidth on AWS, you can leverage enhanced networking and Elastic Network Adapter (ENA), or the new Elastic Fabric Adapter (EFA) which, when combined with new generation of EC2 instances such as C6gn, C5n, R5n, I3en, or G4dn instances, can provide up to 100Gbps bandwidth. But this quite high bandwidth has no effect on latency. Network latency changes in direct correlation with the distance between interconnecting nodes. Clustering nodes is a way to increase availability, but placing cluster nodes too close to each other increases the probability of simultaneous failure, reducing availability. Putting them too far apart yields the highest availability, but at the expense of higher latency. AWS AZs within each AWS Region are engineered to provide a balance that fits most practical cases. Each AZ is engineered to be physically separated from other AZs, while keeping in close geographic proximity to provide low network latency. Therefore, in the overwhelming number of cases, the best practice is to spread cluster nodes across multiple AZ.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#35-read-replicas"&gt;
  &lt;/a&gt;
  3.5   Read replicas
&lt;/h2&gt;

&lt;p&gt;You might determine that many of your DB transactions are read-only queries, and that the sheer number of incoming connections is flooding your database. Read replicas are a known solution for this situation. You can offload your read-only transactions from your primary SQL Server instance to one or more read replica instances. Read replicas can also be used to perform backup operations, relieving primary instance from performance hits during backup windows. When using availability group listeners, if you mark your connection strings as read-only, SQL Server routes incoming connections to any available read replicas and only sends read/write transactions to the primary instance. &lt;br&gt;
Always On Availability Groups supports up to four secondary replicas. There might be cases where you have users or applications connecting to your databases from geographically dispersed locations. If latency is a concern, you can locate read replicas close to your users and applications. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-security-optimization"&gt;
  &lt;/a&gt;
  4. Security optimization
&lt;/h1&gt;

&lt;p&gt;AWS security features can be combined with the built-in security features of MS SQL Server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#41-amazon-vpc"&gt;
  &lt;/a&gt;
  4.1   Amazon VPC
&lt;/h2&gt;

&lt;p&gt;A best practice is to deploy your SQL Server instances in private subnets inside a VPC, and only allow access to the internet through a VPC NAT gateway, or a custom NAT instance. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#42-encryption-at-rest"&gt;
  &lt;/a&gt;
  4.2   Encryption at rest
&lt;/h2&gt;

&lt;p&gt;If you are using EBS volumes to store your SQL Server database files, you have the option to enable block-level encryption. Amazon EBS transparently handles the encryption and decryption. This is available through a simple check box. Amazon FSx for Windows File Server also includes built-in encryption at rest. Both EBS and Amazon FSx are integrated with AWS KMS for managing encryption keys. So, through AWS KMS, you can either use keys provided by AWS, or bring your own keys. At the database level, you can use SQL Server Transparent Data Encryption (TDE), a feature available in MS SQL Server that provides transparent encryption of your data at rest. TDE is available on Amazon RDS for SQL Server, and you can also enable it on your SQL Server workloads on EC2 instances. Previously, TDE was only available on SQL Server Enterprise Edition. However, SQL Server 2019 has also made it available on Standard Edition. If you want to have encryption-at-rest for your database files on Standard Edition on an earlier version of SQL Server, you can use EBS encryption instead. It’s important to understand the tradeoffs and differences between EBS encryption and TDE. EBS encryption is done at the block level, that is, data is encrypted when it is stored and decrypted when it is retrieved. However, with TDE, the encryption is done at the file level. Database files are encrypted, and can only be decrypted using the corresponding certificate. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#43-encryption-in-transit"&gt;
  &lt;/a&gt;
  4.3   Encryption in transit
&lt;/h2&gt;

&lt;p&gt;You can enable encryption in transit for your SQL Server workloads using the SSL/TLS protocol. MS SQL Server supports encrypted connections, and SQL Server workloads in AWS are no exception. When using SMB protocol for SQL Server storage layer, Amazon FSx automatically encrypts all data in transit using SMB encryption as you access your file system, without the need for you to modify SQL Server or other applications’ configurations. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#44-encryption-in-use"&gt;
  &lt;/a&gt;
  4.4   Encryption in use
&lt;/h2&gt;

&lt;p&gt;MS SQL Server offers Always Encrypted to protect sensitive data using client certificates. This provides a separation between those who own the data and can view it, and those who manage the data but should have no access. This feature is also available on both Amazon RDS for SQL Server, as well as SQL Server workloads on Amazon EC2. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#45-aws-key-management-service-aws-kms"&gt;
  &lt;/a&gt;
  4.5   AWS Key Management Service (AWS KMS)
&lt;/h2&gt;

&lt;p&gt;AWS KMS is a fully managed service to create and store encryption keys. You can use KMS-generated keys or bring your own keys. In either case, keys never leave AWS KMS and are protected. You can use KMS keys to encrypt your SQL Server backup files when you store them on Amazon S3, Amazon S3 Glacier, or any other storage service. Amazon EBS encryption also integrates with AWS KMS. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#46-security-patches"&gt;
  &lt;/a&gt;
  4.6   Security patches
&lt;/h2&gt;

&lt;p&gt;In AWS, you can use AWS Systems Manager Patch Manager to automate this process. Note that use cases for Patch Manager are not restricted to security patches. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-cost-optimization"&gt;
  &lt;/a&gt;
  5. Cost optimization
&lt;/h1&gt;

&lt;p&gt;SQL Server can be hosted on AWS through License Included (LI) and Bring Your Own License (BYOL) licensing models. The advantage of LI model is that you do not need to have any long-term commitments and can stop using the product at any time and stop paying for its usage. &lt;br&gt;
However, many businesses already have considerable investments in SQL Server licenses and might want to reuse their existing licenses on AWS. This is possible using BYOL: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  If you have Software Assurance (SA), one of its benefits is the Microsoft License Mobility through Software Assurance program. This program enables you to use your licenses on server instances running anywhere, including on Amazon EC2 instances. &lt;/li&gt;
&lt;li&gt;  If you don’t have SA, you may still be able to use your own licenses on AWS using Amazon EC2 Dedicated Hosts.
The BYOL option on EC2 Dedicated Hosts can significantly reduce costs, as the number of physical cores on an EC2 host is about half of the total number of vCPU available on that host. However, it’s difficult to track the license usage and compliance. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#51-using-sql-server-developer-edition-for-nonproduction"&gt;
  &lt;/a&gt;
  5.1   Using SQL Server Developer Edition for non-production
&lt;/h2&gt;

&lt;p&gt;One of the easiest ways to save licensing costs is to use MS SQL Developer Edition for environments that are not going to be used by application end-users. For this, you can download SQL Server Developer Edition installation media and install it on your EC2 instances. SQL Server Developer Edition is equivalent to SQL Server Enterprise Edition, with full features and functionality.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#52-amazon-ec2-cpu-optimization"&gt;
  &lt;/a&gt;
  5.2   Amazon EC2 CPU optimization
&lt;/h2&gt;

&lt;p&gt;The z1d instance types provide the maximum CPU power, enabling you to reduce the number of CPU cores for compute-intensive SQL Server deployments. The SQL Server deployments might not be compute-intensive and require an EC2 instance type that provides intensity on other resources, such as memory or storage. Because EC2 instance types that provide these resources are also providing a fixed number of cores that might be more than your requirement, AWS offers to use EC2 CPU optimization to reduce the number of cores available to an EC2 instance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#53-switch-to-sql-server-standard-edition"&gt;
  &lt;/a&gt;
  5.3   Switch to SQL Server Standard Edition
&lt;/h2&gt;

&lt;p&gt;• Enterprise-grade features of SQL Server are exclusively available in the Enterprise edition.&lt;br&gt;
• Many of these features have also been available in the Standard edition, enabling you to switch to the Standard edition if you’ve been using Enterprise edition only for those features. &lt;br&gt;
• One of the most common reasons for using Enterprise edition has always been its mission-critical HA capabilities. &lt;br&gt;
• Now, there are alternative options that enable switching to Standard edition without degrading availability. One option is using Always On Basic Availability Groups. This option is similar to Always On Availability Groups, but comes with a number of limitations. The most important limitation is that you can have only one database in a basic availability group. The other option is using Always On Failover Cluster Instance (FCI). &lt;br&gt;
• Since FCI provides HA at the instance level, it doesn’t matter how many databases are hosted on your SQL Server instance. Traditionally this option was restricted to HA within a single DC. &lt;br&gt;
To simplify the complexity and cost of running MS SQL FCI deployments using Amazon FSx in the following scenarios: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Due to the complexity and cost of implementing a shared storage solution for FCI, you might have opted to use availability groups and SQL Server Enterprise Edition. &lt;/li&gt;
&lt;li&gt;  You might already use SQL Server FCI with shared storage using a third-party storage replication software solution. That implies that you purchased a license for the storage replication solution, and then deployed, administered, and maintained the shared storage solution yourself. You can now switch to using a fully managed shared storage solution with Amazon FSx, simplifying and reducing costs for your SQL Server FCI deployment. &lt;/li&gt;
&lt;li&gt;  You ran your SQL Server Always On deployment on-premises, using a combination of FCI and AG-FCI to provide HA within your primary data center site, and AG provided a DR solution across sites.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#54-z1d-and-r5b-ec2-instance-types"&gt;
  &lt;/a&gt;
  5.4   Z1d and R5b EC2 instance types
&lt;/h2&gt;

&lt;p&gt;This instance type is optimized for workloads with high licensing costs, such as MS SQL Server and Oracle databases. For example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hQjYh-Th--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwxrf6xl48bxxxd7ikf6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hQjYh-Th--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwxrf6xl48bxxxd7ikf6.png" alt="Figure 4"&gt;&lt;/a&gt; &amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Figure 4: TCO comparison between SQL Server on r4.4xlarge and z1d.3xlarge&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#55-eliminating-active-replica-licenses"&gt;
  &lt;/a&gt;
  5.5   Eliminating active replica licenses
&lt;/h2&gt;

&lt;p&gt;Another opportunity for cost optimization is through applying a combination of BYOL and LI models. Active replicas are used primarily for: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Reporting &lt;/li&gt;
&lt;li&gt;  Backup &lt;/li&gt;
&lt;li&gt;  OLAP Batch jobs &lt;/li&gt;
&lt;li&gt;  HA
The first three options are often performed intermittently. This means you would not need an instance continuously up and dedicated to running those operations. In a traditional on-premises environment, you would have to create an active replica that is continuously synchronized with the primary instance. This means you need to obtain an additional license for the active replica.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RICDs_Q5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0oz0plgi2dowegxzupo.png" alt="Figure 5"&gt; &amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Figure 5: SQL Server active replication on-premises&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;
In AWS, you can optimize this architecture by replacing the active replica with a passive replica, therefore relegating its role solely to the purpose of HA. Other operations can be performed on a separate instance using License Included, which could run for a few hours and then be shut down or ended. The data can be restored through an EBS snapshot of the primary instance.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FqQaV-Yb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/okkvclfk0p1jicg0x0j2.png" alt="Figure 6"&gt; &amp;gt;&amp;gt;&amp;gt; &lt;em&gt;Figure 6: Eliminating active replica licenses in AWS&lt;/em&gt; &amp;lt;&amp;lt;&amp;lt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This solution is applicable when jobs on the active replica run with a low frequency. If you need a replica for jobs that run continuously or at a high frequency, consider using AWS Database Migration Service to continuously replicate data from your primary instance into a secondary. The primary benefit of this method is because you can do it using SQL Server Standard edition.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-sql-server-on-linux"&gt;
  &lt;/a&gt;
  6. SQL Server on Linux
&lt;/h1&gt;

&lt;p&gt;Deploying SQL Server on Linux is a way to eliminate Windows license costs. Installation and configuration of MS SQL on Linux can be non-trivial.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-operational-excellence"&gt;
  &lt;/a&gt;
  7. Operational excellence
&lt;/h1&gt;

&lt;p&gt;It must considering the post-deployment operating and maintaining of the MSSQL Server workloads in AWS. The best practice is to assume that failures and incidents happen all the time. It’s important to be prepared and equipped to respond to these incidents. This objective is composed of three subobjectives: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Observe and detect anomaly&lt;/li&gt;
&lt;li&gt;  Detect the root cause &lt;/li&gt;
&lt;li&gt;  Act to resolve the problem &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#71-observability-and-root-cause-analysis"&gt;
  &lt;/a&gt;
  7.1   Observability and root cause analysis
&lt;/h2&gt;

&lt;p&gt;Amazon CloudWatch is a service that enables real-time monitoring of AWS resources &lt;br&gt;
and other applications. Amazon CloudWatch Application Insights for .NET and SQL Server is a feature of Amazon CloudWatch that is designed to enable operational excellence for Microsoft SQL Server and .NET applications. It continuously monitors the metrics and logs to detect anomalies and errors, while using AI / ML to correlate detected errors and anomalies.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#72-reducing-mean-time-to-resolution-mttr"&gt;
  &lt;/a&gt;
  7.2   Reducing mean time to resolution (MTTR)
&lt;/h2&gt;

&lt;p&gt;The automated dashboards generated by Amazon CloudWatch Application Insights help you to take swift remedial actions to keep your applications healthy and to prevent impact to the end users of your application. It also creates OpsItems so you can resolve problems using AWS Systems Manager OpsCenter. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#73-patch-management"&gt;
  &lt;/a&gt;
  7.3   Patch management
&lt;/h2&gt;

&lt;p&gt;AWS Systems Manager Patch Manager is a comprehensive patch management solution, fully integrated with native Windows APIs, and supporting Windows Server and Linux operating systems, as well as Microsoft applications, including Microsoft SQL Server&lt;/p&gt;

</description>
      <category>aws</category>
      <category>database</category>
    </item>
    <item>
      <title>8 Great Plugins ⚙️ for Web Developers 🧑‍💻</title>
      <author>Roden</author>
      <pubDate>Fri, 27 Aug 2021 16:44:55 +0000</pubDate>
      <link>https://dev.to/kerthin/8-great-plugins-for-web-developers-3701</link>
      <guid>https://dev.to/kerthin/8-great-plugins-for-web-developers-3701</guid>
      <description>&lt;h1&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Today I would like to talk about browser plugins that help make the life of a web developer easier.&lt;/p&gt;

&lt;p&gt;In this post, I decided to give an example of 8 plugins that I often use while working or if I surf in the browser.&lt;/p&gt;

&lt;p&gt;So let's get started&lt;/p&gt;

&lt;h1&gt;1. &lt;a href="https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp"&gt;ColorZilla&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;With ColorZilla you can get a color reading from any point in your browser, quickly adjust this color and paste it into another program.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a great plugin that will help you &lt;code&gt;determine the code of any color on any pixel that you have pointed at with a special pipette&lt;/code&gt;. This works with both websites and images. If you can't point the eyedropper at the image, because the image begins to disappear, then open the image in a separate window.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;a)&lt;/strong&gt; Click &lt;code&gt;Pick Color From Page&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dRwtPKSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeh3q558pbhojnow3567.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dRwtPKSk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qeh3q558pbhojnow3567.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b)&lt;/strong&gt; We point the &lt;code&gt;pipette&lt;/code&gt; at the &lt;code&gt;desired area&lt;/code&gt; and &lt;code&gt;click&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1WI7va_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhamkwks8dn690nekz3e.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1WI7va_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qhamkwks8dn690nekz3e.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c)&lt;/strong&gt; Open the &lt;code&gt;Color Picker&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9LUMR0Qh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lt72dybh95vqv1nunb8.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9LUMR0Qh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lt72dybh95vqv1nunb8.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;2. &lt;a href="https://chrome.google.com/webstore/detail/perfectpixel-by-welldonec/dkaagdgjmgdmbnecmcefdhjekcoceebi?hl=en"&gt;PerfectPixel&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;PerfectPixel allows developers and markup designers put a semi-transparent image overlay over the top of the developed HTML and perform pixel perfect comparison between them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_9jNvIaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46386j3kiqf9iefaht44.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_9jNvIaR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/46386j3kiqf9iefaht44.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;3. &lt;a href="https://chrome.google.com/webstore/detail/window-resizer/kkelicaakdanhinjdeammmilcgefonfh?hl=en"&gt;Window Resizer&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;This extension re-sizes the browser's window in order to emulate various resolutions. It is particularly useful for web designers and developers by helping them test their layouts on different browser resolutions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RsJ1oE8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvzdgfcg9e8pu3q1d309.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RsJ1oE8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvzdgfcg9e8pu3q1d309.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;4. &lt;a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg?hl=en"&gt;Wappalyzer&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Wappalyzer is a browser extension that uncovers the technologies used on websites. It detects content management systems, eCommerce platforms, web servers, JavaScript frameworks, analytics tools and many more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-vNuAQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8m9zk69ss7jyyr003z1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-vNuAQT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c8m9zk69ss7jyyr003z1.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;5. &lt;a href="https://chrome.google.com/webstore/detail/take-webpage-screenshots/mcbpblocgmgfnpjjppndjkmgjaogfceg?hl=en"&gt;FireShot&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Take FULL webpage screenshots. Capture, edit and save them to &lt;code&gt;PDF/JPEG/GIF/PNG&lt;/code&gt;, upload, print, send to OneNote, clipboard or email.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WspUwwIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7r6dlc7hq2yzgt1qd35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WspUwwIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c7r6dlc7hq2yzgt1qd35.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;6. &lt;a href="https://chrome.google.com/webstore/detail/pinterest-save-button/gpdjojdkbbmdfjfahjcgigfpmkopogic?hl=en"&gt;Pinterest Save Button&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Save your favorite ideas online so you can easily get back to them later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With this plugin, you can add any images you like from any to yours collections to your &lt;code&gt;Pinterest account&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When you hover over the image, you will see a red button in the upper right corner with which you can select the Pinterest collection to which you want to save the image.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;a)&lt;/strong&gt; Choosing the image&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-Qq5bIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2ybfbdj97i3fbvd94pz.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-Qq5bIK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2ybfbdj97i3fbvd94pz.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;b)&lt;/strong&gt; Save&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3_-ilLAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4cjuseoxefz13azof7h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3_-ilLAM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4cjuseoxefz13azof7h.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;7. &lt;a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=en"&gt;Vue.js devtools&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Chrome and Firefox DevTools extension for debugging Vue.js applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An amazing plugin that simplifies your work in the browser. Allows you to see your &lt;code&gt;component tree&lt;/code&gt;, as well as the &lt;code&gt;data of the components&lt;/code&gt; themselves. I believe that this plugin is necessary for any Vue developer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Utjtvu2j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppzv5pulvxe2bo79hnoa.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Utjtvu2j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ppzv5pulvxe2bo79hnoa.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;8. &lt;a href="https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en"&gt;JSON Formatter&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;A very convenient plugin that makes JSON files more readable, and also makes &lt;code&gt;links clickable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--75HQ6xNT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkhr3fuuix8vckq5x2xr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--75HQ6xNT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lkhr3fuuix8vckq5x2xr.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;The End&lt;/h1&gt;

&lt;p&gt;Thank you for devoting your time to my post. You can also recommend plugins that you use. Or suggest a better alternative to the plugins that are presented in the post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transform your browsers&lt;strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K2GGN_9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/R9zXHWAHyTjnq/giphy.gif%3Fcid%3Decf05e471wxmdw8bmsl5ci988ji3ahyck34ar7pvcrnn27ut%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K2GGN_9b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/R9zXHWAHyTjnq/giphy.gif%3Fcid%3Decf05e471wxmdw8bmsl5ci988ji3ahyck34ar7pvcrnn27ut%26rid%3Dgiphy.gif%26ct%3Dg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Observable Infrastructure as Code</title>
      <author>K</author>
      <pubDate>Fri, 27 Aug 2021 16:35:29 +0000</pubDate>
      <link>https://dev.to/fllstck/observable-infrastructure-as-code-52ha</link>
      <guid>https://dev.to/fllstck/observable-infrastructure-as-code-52ha</guid>
      <description>&lt;p&gt;Last few weeks, I procrastinated doing real product-related things with setting up monitoring for my infrastructure deployment.&lt;/p&gt;

&lt;p&gt;I'm using &lt;a class="mentioned-user" href="https://dev.to/pulumidev"&gt;@pulumidev&lt;/a&gt;
, a cloud-provider independent IaC framework that allows me to define my infrastructure in TypeScript and use whatever provider I need.&lt;/p&gt;

&lt;p&gt;I read something about &lt;a href="https://www.honeycomb.io/"&gt;Honeycomb's&lt;/a&gt; observability approach to monitoring, and it got me thinking about my deployment code. Later, it will probably run with something like GitHub Actions, so it's not on my machine when it executes. This means I need some insights in case things go wrong. But it would also be good to see how the deployment behaves over time. How do new resources affect deployment durations etc.?&lt;/p&gt;

&lt;p&gt;This is what a trace could look like in Honeycomb:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yo-U5Xd0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g544ax4i1pi9rvwk4bar.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yo-U5Xd0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g544ax4i1pi9rvwk4bar.png" alt="Example Trace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why not setting things up before I move deployment from my development machine to the cloud? &lt;/p&gt;

&lt;p&gt;This article will show you how to make your Pulumi deployment observable with &lt;a class="mentioned-user" href="https://dev.to/honeycomb_io"&gt;@honeycomb_io&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-Requisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nodejs.org/en/"&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pulumi.com/"&gt;A Pulumi account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pulumi.com/docs/get-started/install/"&gt;The Pulumi CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A Pulumi stack&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.honeycomb.io/"&gt;A Honeycomb account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-pulumi-automationapi"&gt;
  &lt;/a&gt;
  The Pulumi Automation-API
&lt;/h2&gt;

&lt;p&gt;This API is a programmatical interface to the Pulumi CLI. Think Puppeteer for Pulumi instead of Chrome.&lt;/p&gt;

&lt;p&gt;Since it controls the CLI, it can do everything the CLI can and more.&lt;/p&gt;

&lt;p&gt;For our use case, we need information about which resource is deployed to tell Honeycomb about it, and it will create nice trace graphs for us.&lt;/p&gt;

&lt;p&gt;To run a &lt;code&gt;pulumi up&lt;/code&gt; command with the automation API, we need the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LocalWorkspace&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pulumi/pulumi/automation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;LocalWorkspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createOrSelectStack&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;stackName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;workDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;@pulumi/pulumi&lt;/code&gt; package already includes the automation API, so it's the only one we need.&lt;/p&gt;

&lt;p&gt;We use the &lt;code&gt;LocalWorkspace&lt;/code&gt; object to load our stack. This leaves the wholes stack intact; we can still deploy/destroy it with the CLI.&lt;/p&gt;

&lt;p&gt;Then we call &lt;code&gt;stack.up()&lt;/code&gt; and wait. The outputs generated from the API aren't as pretty as the ones from the CLI, but they contain the same information.&lt;/p&gt;

&lt;p&gt;Also, the up command of the API allows us to catch all events that are happening during the deployment. This is the data we're after.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-deployment-events"&gt;
  &lt;/a&gt;
  The Deployment Events
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;up&lt;/code&gt; method of the &lt;code&gt;stack&lt;/code&gt; object takes a config object. We can use the &lt;code&gt;onEvent&lt;/code&gt; attribute to listen to all the changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;onEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we log out every event. If we look at the output, we notice there are different types of events. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;preludeEvent&lt;/code&gt; fires at the start with information about the stack config.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;resourcePreEvent&lt;/code&gt; fires before a resource is deployed, and the &lt;code&gt;resOutputsEvent&lt;/code&gt; fires after it has been deployed.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;diagnosticEvent&lt;/code&gt; contains eventual errors that could happen.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;summaryEvent&lt;/code&gt; includes info about what has been done and if e everything was successful. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The event structure is a bit strange. The events don't have a type attribute we could &lt;code&gt;switch&lt;/code&gt; over, but an attribute called like the type of the event.&lt;/p&gt;

&lt;p&gt;The following code shows how to get the right event, and where the data hides in that event:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;onEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preludeEvent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preludeEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resourcePreEvent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resourcePreEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resOutputsEvent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resOutputsEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;diagnosticEvent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;diagnosticEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;summaryEvent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;summaryEvent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we run things like this, we get all the information we need to send to Honeycomb. The next step is to tell Honeycomb what's up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sending-data-to-honeycomb"&gt;
  &lt;/a&gt;
  Sending Data to Honeycomb
&lt;/h2&gt;

&lt;p&gt;Honeycomb provides us with two libraries. The &lt;a href="https://docs.honeycomb.io/getting-data-in/javascript/beeline-nodejs/"&gt;Node.js Beeline&lt;/a&gt; and &lt;a href="https://docs.honeycomb.io/getting-data-in/javascript/libhoney/"&gt;Libhoney&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Libhoney is a low-level Honeycomb client that allows sending raw events to their service API. The Beeline is an abstraction on top of Libhoney to help with instrumentation and traces. &lt;/p&gt;

&lt;p&gt;Usually, it would be best if you used the Beeline because it's easy to set up and works with Node.js's internal HTTP module and the Express framework out of the box.&lt;/p&gt;

&lt;p&gt;In this case, we aren't building an HTTP server, so the Beelines instrumentation doesn't help much.&lt;/p&gt;

&lt;p&gt;So for our deployment example, I will stick to Libhoney.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#honeycomb-events-amp-traces"&gt;
  &lt;/a&gt;
  Honeycomb Events &amp;amp; Traces
&lt;/h2&gt;

&lt;p&gt;Honeycomb uses events to figure out what's happening in your system. Suppose the events have special attributes, like &lt;code&gt;trace.trace_id&lt;/code&gt; and &lt;code&gt;trace.span_id&lt;/code&gt;, Honeycomb can correlate them. This way, it can tell you things like, "The trace for your request took 300ms and consisted of 100ms authentication and 200ms database access." &lt;/p&gt;

&lt;p&gt;So you can pump all your information to Honeycomb via events. Sometimes it doesn't need to be correlated; you only want to tell Honeycomb that your server uses 20% of memory. But in our case, we want to tie up all events related to one deployment into a trace, so we can figure out what we deploy, how long it takes, and if something goes wrong, what resource was responsible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#linking-up-pulumi-amp-honeycomb"&gt;
  &lt;/a&gt;
  Linking up Pulumi &amp;amp; Honeycomb
&lt;/h2&gt;

&lt;p&gt;We need to initialize Libhoney and send the correct "Honeycomb event" for every "Pulumi event."&lt;/p&gt;

&lt;p&gt;But let's start with getting one event into Honeycomb. The pulumi up event.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Libhoney&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;libhoney&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;LocalWorkspace&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@pulumi/pulumi/automation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hny&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Libhoney&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;writeKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;HONEYCOMB_API_KEY&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;example-iac&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;traceId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="s2"&gt;`trace`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootSpanId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="s2"&gt;`trace-root-span`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startTimestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;LocalWorkspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createOrSelectStack&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;stackName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;workDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;onEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;hny&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendNow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;service_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pulumi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.trace_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;traceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.span_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rootSpanId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;duration_ms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startTimestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We define a &lt;code&gt;traceId&lt;/code&gt;, a &lt;code&gt;rootSpanId&lt;/code&gt;, and a &lt;code&gt;startTimestamp&lt;/code&gt; at the beginning, and then we send it off when everything is done. &lt;/p&gt;

&lt;p&gt;An event with &lt;code&gt;trace.trace_id&lt;/code&gt; will be grouped up with all other events with the same trace ID. In this case, we only have one event.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; is usually the action you perform and want to measure, and the &lt;code&gt;service_name&lt;/code&gt; is, well, the service that performs this action. In this case, we run &lt;code&gt;pulumi up&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the end, we also send a &lt;code&gt;duration_ms&lt;/code&gt; attribute to track how long things take.&lt;/p&gt;

&lt;p&gt;The result will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7xpbaI3p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rq0zudq2j4ls3uxgn3sv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7xpbaI3p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rq0zudq2j4ls3uxgn3sv.png" alt="Honeycomb trace graph"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not very interesting, but at least we know it run without crashing and how long it took.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-more-details"&gt;
  &lt;/a&gt;
  Getting More Details
&lt;/h2&gt;

&lt;p&gt;The next step is to get the details. What were the config parameters? How long did different parts of the deployment take?&lt;/p&gt;

&lt;p&gt;For this, we need to look into two events, the &lt;code&gt;preludeEvent&lt;/code&gt; and the &lt;code&gt;summaryEvent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Until now, we only send one Honeycomb event for the Pulumi up command.&lt;/p&gt;

&lt;p&gt;Now, we will send three events for the stack.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;init&lt;/code&gt; event will contain the time it took to get to the actual deployment of resources and the config parameters of the stack&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;run&lt;/code&gt; event will contain the duration all resources took to do their thing.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;finish&lt;/code&gt; event will contain the duration of shutting down the automation API and the summary data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's look at the updated example code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;traceId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="s2"&gt;`trace`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootSpanId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="s2"&gt;`trace`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startTimestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stackFinishStartTimestamp&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initStartTimestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;runStackSpanId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="s2"&gt;`stack`&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stackRunStartTimestamp&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;LocalWorkspace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createOrSelectStack&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;stackName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;workDir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;onEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;preludeEvent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hnyEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hny&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newEvent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initStartTimestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;init&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;service_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Stack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.trace_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;traceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.parent_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rootSpanId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.span_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="s2"&gt;`stack`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;duration_ms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;initStartTimestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preludeEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;stackRunStartTimestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;summaryEvent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hnyEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hny&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newEvent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stackRunStartTimestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;run&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;service_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Stack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.trace_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;traceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.parent_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rootSpanId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.span_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;runStackSpanId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;duration_ms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;stackRunStartTimestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;stackFinishStartTimestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;hnyEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hny&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newEvent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stackFinishStartTimestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;finish&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;service_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Stack&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.trace_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;traceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.parent_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rootSpanId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.span_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="s2"&gt;`stack`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;duration_ms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;stackFinishStartTimestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="nx"&gt;hnyEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hny&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newEvent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startTimestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;service_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Pulumi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.trace_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;traceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.span_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;rootSpanId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;duration_ms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startTimestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First, we need to sprinkle variables on the code that capture the start times of our three events.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;init&lt;/code&gt; event starts before the call to the up command and takes until the &lt;code&gt;preludeEvent&lt;/code&gt; is fired by the automation API.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;run&lt;/code&gt; event starts right after the &lt;code&gt;init&lt;/code&gt; event finishes and takes until the &lt;code&gt;summaryEvent&lt;/code&gt; fires.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;finish&lt;/code&gt; event starts right after &lt;code&gt;run&lt;/code&gt; finishes and stops right before the parent event for Pulumi up is finished.&lt;/p&gt;

&lt;p&gt;These events all get the &lt;code&gt;trace.parent_id&lt;/code&gt; of the Pulumi up event, so they get nested in the Honeycomb view later.&lt;/p&gt;

&lt;p&gt;Also, the &lt;code&gt;init&lt;/code&gt; event gets the &lt;code&gt;event.preludeEvent.config&lt;/code&gt; object, so we can see how the stack was configured inside Honeycomb.&lt;/p&gt;

&lt;p&gt;If we run that example, we should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t7KSf49D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2a45a2ktni049wjw5hl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t7KSf49D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m2a45a2ktni049wjw5hl.png" alt="Honeycomb span with details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-resource-deployment-durations"&gt;
  &lt;/a&gt;
  Getting Resource Deployment Durations
&lt;/h2&gt;

&lt;p&gt;The resources have additional details for us. As a &lt;code&gt;name&lt;/code&gt; for the event, we will use the operation (create, update, delete) and as &lt;code&gt;service_name&lt;/code&gt; we use the name of the resource in the Pulumi definition.&lt;/p&gt;

&lt;p&gt;To get the parent of a resource, we have to save the URNs of every resource for later. But since we have to keep the start times anyway, we can do this in one step when the &lt;code&gt;resourcePreEvent&lt;/code&gt; is fired.&lt;/p&gt;

&lt;p&gt;Let's look at the example code. This time I removed some boilerplate code and the other events to make things a bit more readable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;resourceSpans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;up&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;onEvent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// ...&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resourcePreEvent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resourcePreEvent&lt;/span&gt;
        &lt;span class="nx"&gt;resourceSpans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;spanId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="s2"&gt;`span`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;startTimestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resOutputsEvent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resOutputsEvent&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;serviceName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;::&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;spanId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;startTimestamp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resourceSpans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;urn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parentUrn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;old&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parentId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;resourceSpans&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;parentUrn&lt;/span&gt;&lt;span class="p"&gt;)?.&lt;/span&gt;&lt;span class="nx"&gt;spanId&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;runStackSpanId&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hnyEvent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hny&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;newEvent&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;startTimestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;op&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;service_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;serviceName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.trace_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;traceId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.parent_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;parentId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;trace.span_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;spanId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;duration_ms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startTimestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;op&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;update&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;diffs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;diffs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="nx"&gt;hnyEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, what's going on here?&lt;/p&gt;

&lt;p&gt;First, the resources are deployed by their hierarchy, but siblings can be deployed in a different order. That's why we need to save their &lt;code&gt;spanId&lt;/code&gt; and &lt;code&gt;startTimestamp&lt;/code&gt; when we get a &lt;code&gt;resourcePreEvent&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;I used a &lt;code&gt;Map&lt;/code&gt; for this and keyed it with the URN of the resource because URNs are used for parent-child relationships and are part of all events we care about here.&lt;/p&gt;

&lt;p&gt;Later, when the &lt;code&gt;resOutputsEvent&lt;/code&gt; fires, it's time to wrap it all up and send it to Honeycomb.&lt;/p&gt;

&lt;p&gt;The event has the URN to find the related &lt;code&gt;spanId&lt;/code&gt; and &lt;code&gt;startTimestamp&lt;/code&gt;. We can also use the URN in the parent attribute of our resource to fetch the &lt;code&gt;spanId&lt;/code&gt; of our resource's parent. This way, our spans are correctly nested in Honeycomb later.&lt;/p&gt;

&lt;p&gt;If the operation for the resource is an &lt;code&gt;update&lt;/code&gt;, we also add the &lt;code&gt;diffs&lt;/code&gt; to that event. This way, we can see in Honeycomb what inputs have changed since the last deployment.&lt;/p&gt;

&lt;p&gt;The final trace should look a bit like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8jtWxyGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lduuzdupq4ok5ns75g7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8jtWxyGS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1lduuzdupq4ok5ns75g7.png" alt="Final Honeycomb trace"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-errors"&gt;
  &lt;/a&gt;
  Getting Errors
&lt;/h2&gt;

&lt;p&gt;The last step, getting deployment errors, I leave as an exercise for the reader. &lt;/p&gt;

&lt;p&gt;But I'll give you a few hints!&lt;/p&gt;

&lt;p&gt;First, the interesting event is the &lt;code&gt;diagnosticEvent&lt;/code&gt;, which comes with a &lt;code&gt;severity&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; attribute. If you only need errors, you have to filter out &lt;code&gt;debug&lt;/code&gt; and &lt;code&gt;info&lt;/code&gt; severity.&lt;/p&gt;

&lt;p&gt;Also, the event includes an &lt;code&gt;urn&lt;/code&gt; that can be used to correlate the error to a Honeycomb span later (&lt;code&gt;resourceSpans&lt;/code&gt; etc.). If the errors isn't related to an URN, you can simply use the run stack event as target.&lt;/p&gt;

&lt;p&gt;If you add an &lt;code&gt;error&lt;/code&gt; field to a Honeycomb event, it will automatically counted to your errors in Honeycomb.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;IaC observability becomes rather simple when using Pulumi and Honeycomb.&lt;/p&gt;

&lt;p&gt;Pulumi's automation API allows us to control the CLI with JavaScript, and Honeycomb's Libhoney is low-level enough to instrument every part of our deployment process.&lt;/p&gt;

&lt;p&gt;This way we can keep track which resources are slowing our deployment down, or which was responsible for a failed deployment.&lt;/p&gt;

</description>
      <category>cloud</category>
      <category>monitoring</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Introduction to  REST API</title>
      <author>Pratham 👨‍💻✨</author>
      <pubDate>Fri, 27 Aug 2021 16:16:26 +0000</pubDate>
      <link>https://dev.to/rapidapi/introduction-to-rest-api-1a9h</link>
      <guid>https://dev.to/rapidapi/introduction-to-rest-api-1a9h</guid>
      <description>&lt;p&gt;The abbreviation REST stands for &lt;strong&gt;"REpresentational State Transfer"&lt;/strong&gt;.    &lt;/p&gt;

&lt;p&gt;REST APIs are used to call resources and allow the software to communicate based on standardized principles, properties, and constraints.    &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-rest-apis-work"&gt;
  &lt;/a&gt;
  How REST APIs work
&lt;/h3&gt;

&lt;p&gt;REST APIs operate on a simple request/response system. You can send a request using these HTTP methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;POST&lt;/li&gt;
&lt;li&gt;PUT&lt;/li&gt;
&lt;li&gt;PATCH&lt;/li&gt;
&lt;li&gt;DELETE &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REST APIs can include endpoints, headers, URL parameters, and the request body. The endpoints perform a specific action on the URL, take some optional parameters and might return the data. Think of it like an automated answering machine that asks you to press 1 for service, press 2 for another service, 3 for yet another service, and so on. When you send a request to an endpoint, it responds with the relevant data, which is generally formatted as JSON, XML, plain text, images, HTML, and more.    &lt;/p&gt;

&lt;p&gt;REST APIs can also be designed with many different endpoints that return different types of data. Accessing multiple REST API endpoints require multiple API calls.   &lt;/p&gt;

&lt;p&gt;A true RESTful API will also conform to the REST architectural constraints outlined by Fielding's dissertation, including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Client-Server Architecture&lt;br&gt;
The client and server are decoupled to improve scalability and allow the components to evolve independently.   &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Statelessness&lt;br&gt;
Statelessness means that every HTTP request happens in complete isolation. Each request contains the information necessary to service the request. The server never relies on information from previous requests. There's no state.   &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cacheability&lt;br&gt;
Responses can be explicitly or implicitly defined as cacheable or non-cacheable to improve scalability and performance. For example, enabling the cache of GET requests can improve the response times of requests for resource data.     &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Layering&lt;br&gt;
Different layers of the API architecture should work together, creating a scalable system that is easy to update or adjust.     &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Uniform Interface&lt;br&gt;
Communication between the client and the server must be done in a standardized language that is independent of both. This improves scalability and flexibility.     &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-rest%C2%A0apis"&gt;
  &lt;/a&gt;
  When to Use REST APIs
&lt;/h3&gt;

&lt;p&gt;As you can see from the constraints of the REST architectural style, REST APIs are a good fit for projects that need to be&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Flexible&lt;/li&gt;
&lt;li&gt;Scalable&lt;/li&gt;
&lt;li&gt;Fast&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;REST APIs are particularly well-suited for web applications. In addition, if you are looking for the following characteristics, REST is a strong option:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Familiarity&lt;br&gt;
Most people in your engineering team have already interacted with  a REST API. This type of API, being the most common, has the shortest learning curve.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interoperability&lt;br&gt;
Due to the popularity of REST, many platforms and frameworks have a built-in library capable of interfacing with a REST API that has wide support.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Development efficiency&lt;br&gt;
REST APIs are reusable, enabling developers to easily create independent microservices that work independently of one another as they are decoupled from clients and accessible by multiple applications.    &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;REST APIs have become the most popular type of API due to their flexible and fast performance. We anticipate REST APIs will continue to be a popular choice for years to come. With that being said, this is pretty much it for this article.&lt;/p&gt;

&lt;p&gt;Head over to &lt;a href="https://RapidAPI.com?utm_source=dev.to/rapidapi&amp;amp;utm_medium=DevRel&amp;amp;utm_campaign=DevRel"&gt;RapidAPI Hub&lt;/a&gt; and explore tens of thousands of REST APIs you can use with a single API Key.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Best Practices Are The Best For Whom?</title>
      <author>Kevin Murphy</author>
      <pubDate>Fri, 27 Aug 2021 16:01:18 +0000</pubDate>
      <link>https://dev.to/kevin_j_m/best-practices-are-the-best-for-whom-5hm8</link>
      <guid>https://dev.to/kevin_j_m/best-practices-are-the-best-for-whom-5hm8</guid>
      <description>&lt;p&gt;I had a great time talking to Andrew Mason, Jason Charnes , and Chris Oliver on Remote Ruby. The episode was just released, and you can listen to it &lt;a href="https://remoteruby.transistor.fm/143"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There's something bothering me that I feel I didn't say all that clearly. I mention that these rules (test coverage, DRY, and performant code are the examples given in the conversation) feel easy, but are hard to apply in practice.&lt;/p&gt;

&lt;p&gt;Who am I saying they're easy for? You may think I'm talking about the people who we ask to use them. And that may be true - it may be easy, or easier, to follow the rule.&lt;/p&gt;

&lt;p&gt;However, that's not what gets me worked up about this. Instead, I think it's easy or easier for the people who &lt;strong&gt;say&lt;/strong&gt; the rule, and does a disservice to those who we ask to apply it, unless it's backed up with a lot more support.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-for-coverage"&gt;
  &lt;/a&gt;
  Testing for coverage
&lt;/h2&gt;

&lt;p&gt;My thoughts here apply in a lot of scenarios, but let's use a tangible example. I'll choose test coverage because we spend a lot of the episode talking about it, and metrics in general, and I think it's pretty illustrative for what I want to say.&lt;/p&gt;

&lt;p&gt;I like writing tests. They give me fast feedback. They allow me to validate my architecture and design. They give me confidence to make future changes. I'm bought in. Writing tests is part of my workflow. Having a test coverage bar or metric that we track isn't likely to change the way I write code - at least, not in what I consider a materially valuable way. No, the apps I work with don't have 100% test coverage. My goal is to have sufficient coverage that I feel confident making a change and documenting current behavior. That's a lot harder to quantify - but if you know how to quantify confidence - let me know!&lt;/p&gt;

&lt;p&gt;But what about the person who doesn't write tests? Mandating tests will be good for the project, right? People who aren't as familiar with writing tests will do so, and the project will be better off because there are tests now, right? Maybe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#impacts-of-best-practices-as-mandates"&gt;
  &lt;/a&gt;
  Impacts of best practices as mandates
&lt;/h2&gt;

&lt;p&gt;The person who isn't familiar with or comfortable writing tests likely still has ways that they get confidence that their code works or validates their assumptions or gets feedback on their progress. A new tester isn't going to start getting that comfort from tests solely because they have to write them.&lt;/p&gt;

&lt;p&gt;Why is the team writing tests now? Because a computer will yell at them if they don't, and/or their code won't get merged. It's a box to check. Without the training and backing of why testing is important and valuable, and giving people the space to learn, grow, and experiment - they can resent it.&lt;/p&gt;

&lt;p&gt;What good are the tests you have then? They made your metric look good, but what are you going to use them for? It's unclear, beyond demonstrating that they exist and giving your CI provider more money if you're billed by minute usage.&lt;/p&gt;

&lt;p&gt;Are these tests going to help you catch a bug before it gets into production, or fix one that's already there? Did these tests help inform the choices developers made while writing the code that accompanies the test? Did these tests allow for immediate, small steps with fast feedback?&lt;/p&gt;

&lt;p&gt;I don't know - and neither do you probably. Those things are hard to measure. They're also a lot of the value people believe they get out of testing. Capturing or enforcing test coverage metrics in a vacuum does nothing to help inform how much better off you are than if you had no tests at all. It's a proxy measure that's difficult to draw conclusions from without digging deeper.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-bother-following-the-rules"&gt;
  &lt;/a&gt;
  Why bother following the rules?
&lt;/h2&gt;

&lt;p&gt;This doesn't mean don't write tests. It can give you insights you didn't have before! Chris Oliver talked about the pay gem, and how different vendors may support features differently, or not at all. Testing can reveal that to you in a quicker/safer way than other explorations. Not only because a test may fail - but because the work Chris does, and things he researched, in order to have that test fail, gives more information about how the vendor's feature works. If you want to know more about that, I have another talk about testing (and designing interactions with) third-party dependencies &lt;a href="https://kevinjmurphy.com/posts/railsconf-2020/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'm on "team testing". My process of getting there came from a lot of opportunities to learn from testing, experiencing it, and having the chance to be "saved" by them. Forcing tests may increase the likelihood those things happen, but I think you'll have a harder time convincing people on the value of tests if they exist to appease a number.&lt;/p&gt;

&lt;p&gt;A test you wish you'd written may have more impact on your career than one you wrote perfectly. The experience of not having that safety net, of not having that immediate feedback, and coming to terms with the consequences of that over the life of a project will stick with you. That doesn't mean don't write tests. But recognize it might not click for someone until they &lt;em&gt;know&lt;/em&gt; this concept exists, they &lt;em&gt;know&lt;/em&gt; they didn't use it, and now they &lt;em&gt;know&lt;/em&gt; how much worse off they are right now without it.&lt;/p&gt;

&lt;p&gt;This doesn't mean don't track test coverage. It can be motivating! Jason Charnes mentioned using it to drive an increase in coverage on a project. Once he got the value he sought out of the tests, the metric/number itself didn't matter as much, so he moved on. Jason got the benefit he wanted, and the metric may have helped drive him there, but I'm betting that the benefit wasn't seeing a bigger number on his test coverage %.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#put-in-the-work"&gt;
  &lt;/a&gt;
  Put in the work
&lt;/h2&gt;

&lt;p&gt;It's easy to say these rules and walk away feeling like we've shared some wisdom. What's harder is putting in the work to help a person grow so they happen upon their own wisdom. We need to have support structures in place so people can learn about these things, and wrestle with them, and gain familiarity. Then they're not rules to be followed - they become shared values we benefit from, and they're used when we see a benefit.&lt;/p&gt;

&lt;p&gt;Thanks Andrew, Jason, and Chris for having me on.&lt;/p&gt;

</description>
      <category>leadership</category>
      <category>testing</category>
      <category>ruby</category>
    </item>
    <item>
      <title>Brain Time vs. Butt Time: Improve Developer Productivity </title>
      <author>Nick Hodges</author>
      <pubDate>Fri, 27 Aug 2021 15:57:13 +0000</pubDate>
      <link>https://dev.to/linearb/brain-time-vs-butt-time-improve-developer-productivity-4468</link>
      <guid>https://dev.to/linearb/brain-time-vs-butt-time-improve-developer-productivity-4468</guid>
      <description>&lt;p&gt;Many moons ago, I tweeted the following about how to improve developer productivity:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XzsD1Dvu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wzr4k3f95ta3ncs19mm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XzsD1Dvu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7wzr4k3f95ta3ncs19mm.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tracking-time"&gt;
  &lt;/a&gt;
  Tracking Time
&lt;/h2&gt;

&lt;p&gt;There is a pretty big controversy in the software development community about logging time. Of course, if you are billable, you need to log your time, but what if you aren’t? Should you have to keep track of the time you spend writing code? Does tracking time do anything to improve &lt;a href="https://linearb.io/blog/engineering-productivity/"&gt;developer productivity&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Now I know that no one really likes to track their time. It’s a pain. It’s challenging to be accurate. It’s hard to get time properly categorized. But it can be invaluable for making those important business decisions. I’m not going to solve that argument here.&lt;/p&gt;

&lt;p&gt;But there is a bigger problem with measuring time. The only thing you can really measure is “Butt Time”. Butt Time is the actual amount of time someone has their butt in a chair while working on a project.&lt;/p&gt;

&lt;p&gt;You need Butt Time to get any work done, of course. But managers should not be insisting on a lot of Butt Time. Butt Time isn’t really what you want to maximize. What you really want to foster is Brain Time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-do-you-really-want-to-measure"&gt;
  &lt;/a&gt;
  What Do You Really Want to Measure?
&lt;/h2&gt;

&lt;p&gt;Butt Time isn’t at all equivalent to productive development time. Butt Time includes reading email, answering questions and generally handling any number of interruptions, daydreaming, personal calls, meetings, and other distractions. And those distractions, however minor, break a developer’s concentration. It is also time spent not working on the task at hand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0AkPwcYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyksmcxc3q66ic9vo9es.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0AkPwcYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xyksmcxc3q66ic9vo9es.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you get right down to it, development is all about concentration — Brain Time. With a coding project of any size at all, doing development requires complete focus and attention. You need to build up complex data structures and patterns in your mind in order to really be productive.&lt;/p&gt;

&lt;p&gt;Doing this takes time — I’ve heard it described as building a house of cards in your mind. Building that house of cards can take upwards of fifteen minutes depending upon the project. But here’s the bummer: It only takes a second for that house of cards to come tumbling down. One distraction can make your fifteen minute investment disappear.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-zone"&gt;
  &lt;/a&gt;
  The Zone
&lt;/h2&gt;

&lt;p&gt;And of course, time spent in “The Zone” — with that house of cards constructed and true, highly productive work getting done — is what we all are seeking. We’ve all probably had that awesome experience of getting into that zone for hours at a time and wondering where the time went. We know how cool that is — and how precious. That’s what we want to measure — Brain Time.&lt;/p&gt;

&lt;p&gt;But that’s a really hard — if not impossible — thing to do. Getting accurate, meaningful Butt Time measurements is difficult enough. But how in the world can you actually measure Brain Time?&lt;/p&gt;

&lt;p&gt;I’ll argue that you really can’t. In the end, Butt Time is only a poor proxy for Brain Time. And all too often, managers will use Butt Time as a measure of productivity. What we need to do is to try to increase the Butt Time to Brain Time ratio by providing an environment where Brain Time is maximized as a percentage of total Butt Time. It’s critical to improve developer productivity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-can-you-do-to-improve-developer-productivity"&gt;
  &lt;/a&gt;
  What Can You Do to Improve Developer Productivity?
&lt;/h2&gt;

&lt;p&gt;There are ways to do that — ensuring that your developers have an office with a door that they can close is an important first step. The book &lt;a href="https://www.amazon.com/Peopleware-Productive-Projects-Teams-3rd/dp/0321934113/"&gt;Peopleware &lt;/a&gt;is really the Bible for this, and &lt;a href="https://www.geekwire.com/2016/just-shut-let-devs-concentrate-programming-expert-advises/"&gt;Joel Spolsky has talked a lot about it as well&lt;/a&gt;. Uninterrupted quiet time is the key. Leaving developers alone is critical to maximizing Brain Time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hvu0K0xi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgfxm86znlbpxbtu66g3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hvu0K0xi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sgfxm86znlbpxbtu66g3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Developers inherently know that “Butt Time” isn’t really important. They know that time spent thinking is way more valuable. I’ve known developers that do some of their best thinking while wandering the halls, allegedly “doing nothing” (Heaven forbid that a developer isn’t sitting in their chair!), or making a cup of coffee.&lt;/p&gt;

&lt;p&gt;Managers should make sure that they aren’t expecting developers to be sitting and typing all the time. Sometimes great work gets done while simply staring at the screen doing nothing. Sometimes walking the dog brings about an epiphany.&lt;/p&gt;

&lt;p&gt;Join in on the discussion about all things Software Development on the &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Dev Interrupted Discord Server&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Managers should recognize this and encourage their team to do what they need to do to do their best thinking. If a developer can concentrate at night from 10:00pm to 3:00am, then she should be encouraged to work then. Every developer is different, and a good manager will learn what works for their team members and provide for that.&lt;/p&gt;

&lt;p&gt;Another thing we need to do is to respect — indeed, celebrate — those developers that are quiet and don’t say much. Many developers are introverts that don’t say much at all. They come to work, write great code, and go home. But sadly, we don’t always respect this. Being quiet is a very valuable virtue in a software developer — both because they themselves are being productive and they aren’t breaking other’s concentration. We should give honor and respect to that.&lt;/p&gt;

&lt;p&gt;Butt Time is easy to come by and fairly easy to measure. Brain Time, however, is a precious and hard to measure commodity that needs to be nurtured and respected. If you really want to improve developer productivity, optimize for Brain Time.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;If you haven't already heard&lt;/strong&gt;, Dev Interrupted is hosting &lt;strong&gt;INTERACT&lt;/strong&gt;: The interactive, community-driven, digital conference that takes place September 30th. Designed by engineering leaders, for engineering leaders, INTERACT will feature 10 speakers, 100s of engineers and engineering leaders, and is totally free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Register Now&lt;/a&gt;
&lt;/h1&gt;




&lt;p&gt;If you haven’t already joined the best developer discord out there, WYD?&lt;/p&gt;

&lt;p&gt;Look, I know we talk about it a lot but we love our developer discord community. With over 1500 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No salespeople allowed. &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gBWLfe0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AxR_ViPMd2T8ljTzt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gBWLfe0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AxR_ViPMd2T8ljTzt.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://linearb.io/blog/improve-developer-productivity-with-brain-time/"&gt;https://linearb.io&lt;/a&gt; on April 23, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>productivity</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>Is Remote Work better than In-Office for Developers? </title>
      <author>Conor Bronsdon</author>
      <pubDate>Fri, 27 Aug 2021 15:56:09 +0000</pubDate>
      <link>https://dev.to/linearb/is-remote-work-better-than-in-office-for-developers-43ha</link>
      <guid>https://dev.to/linearb/is-remote-work-better-than-in-office-for-developers-43ha</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was written exclusively for the Dev Interrupted by Krzysztof Waraksa, an active and participating member of the Dev Interrupted Discord.&lt;/em&gt;&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
In the past year-and-a-half, going remote has been the primary goal and focus for many companies and individuals. The beginning of the remote work overhaul was rocky to say the least but now that all this time has passed and workplaces have figured out how to work with it and not make it an utter mess- Is it worth keeping? Is it better than being in-office? Should remote work be a standard for dev teams, and in-office be secondary?&lt;/p&gt;

&lt;p&gt;Well, that depends on a couple of factors. With some feedback from the Dev Interrupted Discord community, let’s dive into the advantages and disadvantages of remote work.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-disadvantages"&gt;
  &lt;/a&gt;
  The Disadvantages
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Team bonding is difficult&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“It’s not impossible or anything, but I’ve found it’s so unbelievably easy to bond with a team in person doing regular lunches and such. (…) I miss being able to see someone frustrated or struggling with something and walking over to them with a couple other people and saying “let’s head to lunch and clear our heads.” You build bonds very quickly when you do demonstrable human things to reduce someone’s stress.” — Discord User The Panda#2143&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Jumping off from what The Panda said, the first major disadvantage that many people will voice is a lack of genuine team bonding when your team is fully remote. It requires much more active effort to bond with your teammates over Zoom. Being around another person naturally speeds up the bonding process much more than occasionally messaging someone because you need something.&lt;/p&gt;

&lt;p&gt;When working remote, your team needs to be intentional about team bonding. An excellent way of maintaining some form of social bonding is to have a weekly meeting where you can just sit down and chat with your colleagues, talk about what you did on the weekend, maybe occasionally host a “show and tell” of your own. Figure out what fun little trinkets your colleagues collect! Another popular weekly meeting idea are &lt;a href="https://www.techrepublic.com/article/how-to-successfully-work-remotely-in-an-engineering-organization/"&gt;“coffee talks” &lt;/a&gt;, which are informal breakout rooms hosted on Zoom that can be hopped into or out of at will.&lt;/p&gt;

&lt;p&gt;Team leaders also need to be sure to regularly schedule fun events — whether in person or online — to bond team members. This could be a happy hour where everyone gets shipped a cocktail kit and makes them together, or a digital magic show, an in-person meet up, or something else.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xhf7Vvx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AgX17Zteb10o0bYCe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xhf7Vvx0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2AgX17Zteb10o0bYCe.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Video Call Dread&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, it is just the most inconvenient thing to be forced to have to sit around in a conference call several times a day to get things done. Text is confusing, unclear. But you have to discuss things somehow, so you end up calling. And calling. And calling- is it just me or is it simply exhausting to sit around with the “important work meeting” looming overhead in between everything you do? Even many industry leaders and remote work proponents discuss what they often refer to as “Zoom fatigue.” In a recent &lt;a href="https://devinterrupted.com/video/the-new-leaders-of-remote-engineering-panel/"&gt;remote work panel hosted by LinearB &lt;/a&gt;, video call dread was highlighted as a major downside of remote work.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“My kid’s school over the last year has been trying to keep us involved, and one of the ways they’ve done that is booking these Zoom sessions in the evening. I notice when I get [to the meeting] I just don’t want to be there. I’ve been on video all day long.” — Lawrence Mandel, Director of Engineering at Shopify&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;One of the biggest appeals of remote work is that you have so much freedom to do things on your own time and create focus time, but it is nearly impossible to feel comfortable doing a different activity for a while when you’re still in “work mode”.&lt;/p&gt;

&lt;p&gt;So while in reality you do focused work for 4–5 hours, mentally you’re still working the whole 8–9 hours. The meetings and work you do aren’t consecutive and are instead the equivalent of a car starting and stopping in a traffic jam. Every hour or two, you have to sit up and move .5 metres before you sit around and do something else again. It gets exhausting.&lt;/p&gt;

&lt;p&gt;Despite everything, remote work is still built around the idea of being in an office for nearly half the day. Which really shouldn’t be a surprise, as remote work was never about changing the working hours, but the expectation often comes with it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lack of printer access.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Okay, Really, this isn’t the biggest disadvantage but it’s something that I, as a young man under the age of thirty, found highly amusing. I can guarantee that a majority of people today just don’t own a printer. And that makes sense, you generally don’t have to print a lot these days! Though, in many cases, having an on-paper copy of a digital file is reassuring to have. (At least for me, I prefer having paper copies of important documents over a file on my desktop!) If you’re going to be working remotely, you may have to invest in a printer. Or hope there’s a copy-shop near you. You really don’t realize how convenient having a printer at work can be until you’re forced to work from home.&lt;/p&gt;

&lt;p&gt;You’ll also likely be forced to learn the true cost of printer ink if you haven’t already. Oh dear.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The commute was a benefit!?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“I miss my commute. It was a 10–20 minute bike ride depending on the route and the weather. I would do it year round in a winter climate, and I always was very happy about the forced fresh air in the winter. The idea of jumping on a bike in subzero snowy weather seems terrible until you’re out there, so it made the fresh air and exercise happen.” — Discord User ParksideBrad#9930&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For many people, the commute is a huge issue. Especially if you have to drive a car, or take public transport. In cases like those, getting to work remotely and avoiding that mess is great!&lt;/p&gt;

&lt;p&gt;To some hardy souls like ParksideBrad, the commute was actually a beneficial and nice thing. Either way, losing that two-birds-one-stone manner of exercising and getting to work can be a noticeable hit to your daily schedule. While this can be solved by just exercising on your own time- it’s harder to have to intentionally build that into your routine. It’s hard to exercise without reason ( &lt;a href="https://www.verywellfit.com/why-arent-you-motivated-to-exercise-1231389"&gt;“Getting healthier” isn’t really the best motivator for many, even if it’s important. &lt;/a&gt;), so using “Going from point A to point B while exercising” as a manner of getting that important movement in is a very valid way of keeping yourself healthy mentally and physically.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-advantages"&gt;
  &lt;/a&gt;
  The Advantages
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;No commute? Perfect! (Sorry, cyclists!)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Alright, so sure, I did just write that the commute could be a benefit for those that like to exercise. But really, for a majority of people it was always a pain. Getting an extra hour to yourself in the morning is a significant bonus as you don’t feel the need to rush yourself out of bed to avoid any traffic. And getting extra time to yourself just throughout the day? Honestly, the following words by some of our community members emphasize how much better a lack of a commute is for many people:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“With no commute and no office tying me down, it’s easy to work from just about anywhere the internet exists. This facilitates living in new places, experiencing new things — which is amazing! — Discord user NobilityPNW#7631&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“One big disadvantage of Remote Work: avoiding commute times! I do not miss commuting at all! I save a ton of time that I can use for work or for work/life balance and necessary tasks. I’m also significantly more flexible.” — Discord User Conor#3700&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;More hours in the day are dedicated to &lt;em&gt;you&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your 24 hours in the day are not the same as Beyoncé.&lt;/p&gt;

&lt;p&gt;This is a sentence that often gets thrown around in the following way: &lt;em&gt;“You have the same 24 hours in the day like [insert celebrity or billionaire here]”&lt;/em&gt;. Sure, you both have 24 hours to do everything in the day. But the allocation of those hours is vastly different. Because unlike Beyoncé, you can’t hire people to do your cooking, laundry, cleaning, etc, for you. You don’t get to leave all the painstakingly long chores and commutes to others.&lt;/p&gt;

&lt;p&gt;But thanks to remote work, a lot of these things get a little less bad. Sure, you’re still working at home, but you can take breaks. You can control your activity, your time. You decide if you want to go take a brief pause to play a short game with your kids, or if you want to have a coffee with your partner. You get a chance to spend more time with your home social groups, your family, your loved ones.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“I was on a call with Dan Lines recently talking about Linear B and my 6 year old came into the room and attacked me with a nerf sword. It was short lived, not terribly disruptive, but it felt good to me knowing he had access when he needed it (I survived unscathed). For most of his life I was gone 60–80 hours a week or traveling around the country. Since we went fully remote, we are very close and he feels sad if I have to go downtown for the odd meeting once a month. It has changed our family for the better and when I feel a stronger connection to my family and like their needs are being met, I can focus all my excess energy on whatever I want.” — Discord User The Panda#2143&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You finally get a printer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! You have a reason to buy a printer. Hopefully it’ll last you for the next two decades at minimum. May the prices of ink cartridges remain low for you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The flexibility of work-locations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WHr674Ja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2A6bXZp3TWbYy464Ye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WHr674Ja--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2A6bXZp3TWbYy464Ye.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Being able to work wherever at any point in your workday is an incredible advantage, especially if you struggle to stay focused being in an office environment. Having the chance to get away from the “ADHD poison” that noisy offices often are… Sitting at a quiet cafe in the park, or working from the couch at home with your beloved cat purring away, it all makes for a much better environment. And then being able to change that on a whim when you decide you’re no longer comfortable? Even better. &lt;a href="https://devinterrupted.com/adhd-in-the-workplace-3-ways-you-can-help/"&gt;After all, this is the easiest way for a company to support employees that may need a calmer environment to work in.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But this isn’t even just about being comfortable- it also means that if there are any issues you’re having in your home (such as construction), or your internet is down, you can still stay in touch by being able to connect anywhere else. Rather than having a whole office-outage take out several hours (or potentially, days) of work because something went wrong with the network or power.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Allowing for remote work makes you disability-friendly&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is not just for people who are disabled that apply for the job, but also for those that may become disabled during their time working in your teams. Unfortunately, life isn’t perfect, and a sudden health issue could turn out to heavily impair your wellbeing. Before remote work was standardized, if you could no longer go into work on a daily basis you would most likely end up having to quit your job. But now, maybe you can still work with your disability as long as you’re at home. Or as long as you can take frequent breaks, which are made far easier in the comfort of your own home.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Conclusion&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;There’s certainly more advantages to remote work compared to the disadvantages, but this is a case where the disadvantages shouldn’t be left unaddressed.&lt;/p&gt;

&lt;p&gt;The disadvantages often fall into real problems that have some half-solutions. But honestly? The best solution might be to reduce the amount of in-office days, and have an option and support for full remote for those that need it. Most people would be happy to go into the office for just a few days a week while staying remote for the rest. And let’s not forget that this’d be the perfect way to allow people to continue wasting printer ink at the office instead of having to invest in their own.&lt;/p&gt;

&lt;p&gt;In the end, you must admit that giving employees agency over their hours tends to leave them happier and with a more positive outlook on their jobs.&lt;/p&gt;

&lt;p&gt;Consider checking out Shweta Saraf’s thoughts on the topic of remote first, and not remote friendly, in the video below!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ovJ5hkUGO4U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://discord.gg/devinterrupted"&gt;&lt;strong&gt;Liked this topic? Have anything you’d like to add? Join our discussions in the Dev Interrupted Discord today!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2esj52Mx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2Ad8w3ALr6Ybm4tvxt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2esj52Mx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2048/0%2Ad8w3ALr6Ybm4tvxt.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;If you haven't already heard&lt;/strong&gt;, Dev Interrupted is partnering with Dzone to host &lt;strong&gt;INTERACT:&lt;/strong&gt; An interactive, community-driven, digital conference on September 30th - by engineering leaders, for engineering leaders. 1 day, 10 speakers, 100s of engineers and engineering leaders, all free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2QYQCtGe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2400/0%2AnHzak-kDc0MzrG55.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#register-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;Register Now&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;.&lt;br&gt;
.&lt;br&gt;
.&lt;br&gt;
&lt;em&gt;Originally published at &lt;a href="https://devinterrupted.com/is-remote-work-better-than-in-office-for-developers/"&gt;https://devinterrupted.com&lt;/a&gt; on August 25, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>productivity</category>
      <category>devops</category>
      <category>mentalhealth</category>
    </item>
  </channel>
</rss>
