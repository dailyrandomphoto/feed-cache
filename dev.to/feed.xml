<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Implement Chain of Responsibility/Commands in C# Using ChainRunner</title>
      <author>Mohammad Shafie-Zadeh</author>
      <pubDate>Wed, 16 Jun 2021 20:24:33 +0000</pubDate>
      <link>https://dev.to/litenova/implement-chain-of-responsibility-commands-in-c-using-chainrunner-2420</link>
      <guid>https://dev.to/litenova/implement-chain-of-responsibility-commands-in-c-using-chainrunner-2420</guid>
      <description>&lt;p&gt;I have been working on an ASP.NET Core Web API application which is responsible for users' comments. This application needs to reject or censor new comments based on multiple business criteria. In simple words, each new comment must go through the following steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Censor curse words&lt;/li&gt;
&lt;li&gt;Modify incorrect words&lt;/li&gt;
&lt;li&gt;Reject if it has improper tone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The steps are not that complex and must be executed sequentially. To implement these steps, I decided to go for &lt;a href="https://refactoring.guru/design-patterns/chain-of-responsibility"&gt;chain of responsibility pattern&lt;/a&gt;. However, I could not find a simple and proper library to implement this pattern so I created a library called &lt;a href="https://github.com/litenova/ChainRunner"&gt;ChainRunner&lt;/a&gt; to make all this work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wVxMqRt8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdd21e32wmd4nx7is0tg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wVxMqRt8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rdd21e32wmd4nx7is0tg.jpg" alt="ChainRunner Schema"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This picture depicts how ChainRunner works&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;For each step I created a responsibility handler:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CensorCurseWordsHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IResponsibilityHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;HandleAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comment&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// process comment ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ModifyIncorrectWordsHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IResponsibilityHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;HandleAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comment&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// process comment ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ImproperToneHandler&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IResponsibilityHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;HandleAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comment&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CancellationToken&lt;/span&gt; &lt;span class="n"&gt;cancellationToken&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// process comment ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I configured the chain in startup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;services&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddChain&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;CensorCurseWordsHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ModifyIncorrectWordsHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ImproperToneHandler&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, I injected the chain into my class and ran the chain like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ApiController&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;Route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"[controller]"&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CommentController&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;IChain&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_chain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;CommentController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IChain&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Comment&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_chain&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;HttpPost&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IActionResult&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Comment&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_chain&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;RunAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/litenova/ChainRunner"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/ChainRunner"&gt;NuGet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>csharp</category>
      <category>dotnet</category>
      <category>programming</category>
      <category>designpatterns</category>
    </item>
    <item>
      <title>The Beginner's Guide to Declaring Variables in JavaScript</title>
      <author>Leepzig</author>
      <pubDate>Wed, 16 Jun 2021 20:10:30 +0000</pubDate>
      <link>https://dev.to/leepzig/the-beginner-s-guide-to-declaring-variables-in-javascript-5ckf</link>
      <guid>https://dev.to/leepzig/the-beginner-s-guide-to-declaring-variables-in-javascript-5ckf</guid>
      <description>&lt;p&gt;If you're new to programming and new to javascript, it can be confusing when to use the three declaration key words. We're going to talk about when to use &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, and why you should never use &lt;code&gt;var&lt;/code&gt; to declare variables. Hopefully by the end of this post, you'll be an expert.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brief-history"&gt;
  &lt;/a&gt;
  Brief History
&lt;/h2&gt;

&lt;p&gt;Before ECMAScript 2015 - ES6 there was only &lt;code&gt;var&lt;/code&gt;, but people found problems with var because you could easily overwrite variables without knowning it.  So &lt;code&gt;const&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; were introduced.  But first let's look at the particular problems of &lt;code&gt;var&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problems-with-raw-var-endraw-"&gt;
  &lt;/a&gt;
  Problems with &lt;code&gt;Var&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Let's say you are writing some code about books, and so you assign a variable called &lt;code&gt;book&lt;/code&gt; to "Harry Potter", but later in you code you forget you already used &lt;code&gt;book&lt;/code&gt; as a variable so you assign &lt;code&gt;book&lt;/code&gt; to "Lord of the Rings". And then a third time you assign &lt;code&gt;book&lt;/code&gt; to "The Hobbit". So now you've just overwritten the variable 2 times.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var book = "Harry Potter"

//Now book = "Lord of the Rings"
var book = "Lord of the Rings"

//And now book = "The Hobbit"
book = "The Hobbit"

book
--&amp;gt; "The Hobbit"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since &lt;code&gt;var&lt;/code&gt; is unreliable, we should never use it. If you need to declare a variable use &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-in-doubt-use-raw-const-endraw-"&gt;
  &lt;/a&gt;
  When in Doubt, Use &lt;code&gt;const&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;const&lt;/code&gt; is the most strict with declaratation, a variable can only be assigned once, and it can't ever be changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const x = 0

const x = 5
---&amp;gt; SyntaxError: Identifier 'x' has already been declared

x = 5
---&amp;gt; TypeError: Assignment to constant variable.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;const&lt;/code&gt; is your friend, it'll save you countless hours searching for a bug because that can be prevented by just using const.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-just-raw-let-endraw-it-be"&gt;
  &lt;/a&gt;
  When to just &lt;code&gt;let&lt;/code&gt; it be
&lt;/h2&gt;

&lt;p&gt;When we use &lt;code&gt;let&lt;/code&gt; we are declaring a variable that we plan on changing later.  The best example is if we need to use a variable as a counter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let x = 5
---------&amp;gt; 5

x + 1
--------&amp;gt; 6

x = 2
---------&amp;gt; 2

let x = 2
---------&amp;gt; SyntaxError: Identifier 'x' has already been declared
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In Conclusion
&lt;/h2&gt;

&lt;p&gt;-When in doubt of which one to use, use &lt;code&gt;const&lt;/code&gt;.&lt;br&gt;
-Use let when you know the variable's contents are going to be added to or changed in some form.&lt;br&gt;
-Never use var.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Make Fathom Analytics work with Turbolinks / Turbo in your Rails project</title>
      <author>rinas</author>
      <pubDate>Wed, 16 Jun 2021 19:45:38 +0000</pubDate>
      <link>https://dev.to/onerinas/make-fathom-analytics-work-with-turbolinks-turbo-in-your-rails-project-2d2i</link>
      <guid>https://dev.to/onerinas/make-fathom-analytics-work-with-turbolinks-turbo-in-your-rails-project-2d2i</guid>
      <description>&lt;p&gt;If you have Turbolinks or Turbo in your Rails project, only the first page view would be counted and tracked by Fathom Analytics. Here is how you can make use of &lt;code&gt;load&lt;/code&gt; event to track the page views.&lt;/p&gt;

&lt;p&gt;For turbolinks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;turbolinks:load&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fathom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fathom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trackPageview&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For turbo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;turbo:load&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fathom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fathom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trackPageview&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;I had recently confirmed the same with Fathom team:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4ljoyAUA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/ExlA-x5UUAgK3rN.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ldVVmSRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1405208648536657921/ZQAgfiIq_normal.png" alt="rinas 🧑‍💻 profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        rinas 🧑‍💻
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/onerinas"&gt;@onerinas&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/usefathom"&gt;@usefathom&lt;/a&gt; I'm using Turbolinks and after navigating to another page, it doesn't get updated in the dashboard. After having a look at the script.js, came up with the solution below. Anything else to do other than this?&lt;br&gt;cc &lt;a href="https://twitter.com/JackEllis"&gt;@JackEllis&lt;/a&gt; / &lt;a href="https://twitter.com/pjrvs"&gt;@pjrvs&lt;/a&gt;&lt;br&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:27 PM - 28 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1376209437094895620" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1376209437094895620" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1376209437094895620" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
and looks like this is the way to go:&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ZipmTYE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1341510067238006784/5oV_bWrr_normal.jpg" alt="Fathom Analytics profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Fathom Analytics
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @usefathom
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/onerinas"&gt;@onerinas&lt;/a&gt; &lt;a href="https://twitter.com/JackEllis"&gt;@JackEllis&lt;/a&gt; &lt;a href="https://twitter.com/pjrvs"&gt;@pjrvs&lt;/a&gt; Because turbolinks runs its own events, this is the way we typically recommend. I don’t think the spa option works with turbolinks. - Jack
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:33 PM - 28 Mar 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1376210757218562053" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1376210757218562053" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1376210757218562053" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>rails</category>
      <category>analytics</category>
      <category>turbolinks</category>
    </item>
    <item>
      <title>Reasons why Django is the best web framework</title>
      <author>Nishant Mittal</author>
      <pubDate>Wed, 16 Jun 2021 19:35:45 +0000</pubDate>
      <link>https://dev.to/nishantwrp/reasons-why-django-is-the-best-web-framework-3f4h</link>
      <guid>https://dev.to/nishantwrp/reasons-why-django-is-the-best-web-framework-3f4h</guid>
      <description>&lt;p&gt;Choosing a web framework is hard especially now when there are a lot of frameworks on the market, each designed to address different project needs. Here is why I think that Django is the best choice in most cases.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-django"&gt;
  &lt;/a&gt;
  What is Django?
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Django - The web framework for perfectionists with deadlines.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; is an open source and powerful web framework written in Python that encourages rapid development and clean, pragmatic design. It takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel.&lt;/p&gt;

&lt;p&gt;It is being used by a lot of companies including &lt;em&gt;Instagram, Pinterest, Spotify, Disqus, Dropbox, Mozilla, Reddit&lt;/em&gt; which makes it obvious that the applications built with this framework are &lt;strong&gt;exceedingly scalable&lt;/strong&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-can-you-do-with-django"&gt;
  &lt;/a&gt;
  What can you do with Django?
&lt;/h1&gt;

&lt;p&gt;If you are a beginner, you'll love the approach the platform takes for making web development easier. If you want to make robust web apps with a minimal amount of coding, you will appreciate what Django framework has to offer.&lt;/p&gt;

&lt;p&gt;You can do anything web-based using Django. From building e-commerce systems, CRM Systems, Email Systems to developing a REST/GraphQL based API server for your frontend application there's nothing that you can't do using Django.&lt;/p&gt;

&lt;p&gt;The most awesome thing about Django that I'll talk about later too in this article is it's large community. Most of the times the features you need are already present in Django. However, if there not there's a very high probability that you'll find a Django plugin or package developed by the community that does that task for you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h1&gt;

&lt;p&gt;There are a lot of things about Django that I like. I won't be able to write about all of them, So, here are some of the most awesome features among them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#batteries-included"&gt;
  &lt;/a&gt;
  Batteries Included
&lt;/h2&gt;

&lt;p&gt;You don’t need to code basic stuff, it comes pre-packaged. These packages were developed by professional developers, so you won’t need to spend time making sure they work correctly. Some of the features included in this framework are as follows.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It has a very &lt;strong&gt;powerful ORM&lt;/strong&gt;. Once you’ve created your data models, Django automatically gives you a database-abstraction API that lets you create, retrieve, update and delete objects.&lt;/li&gt;
&lt;li&gt;It makes handling the &lt;strong&gt;database migrations easy&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It has in-built &lt;strong&gt;Session handling&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It also handles &lt;strong&gt;URL Routing&lt;/strong&gt; for you along with dynamic URLs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#admin-panel"&gt;
  &lt;/a&gt;
  Admin panel
&lt;/h2&gt;

&lt;p&gt;Django has an customizable admin interface, so you can manage data using basic CRUD operations. It’s a very useful feature so you can start your project right away, without having to code this functionality. The admin panel can also be configured to have customized filters, or the data can be grouped using a particular field.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#template-system"&gt;
  &lt;/a&gt;
  Template System
&lt;/h2&gt;

&lt;p&gt;Django has it's own in-built templating system also known as Django template language (DTL). However, if you want you can also use any other template engine like &lt;em&gt;Jinja2&lt;/em&gt;. Moreover, you also have an option to write your own custom template system. How cool is that?&lt;/p&gt;

&lt;p&gt;Your template can be divided into further re-useable components, which also alignes with one of Django’s core template design principles and it’s a design pattern that stands for Don’t-Repeat-Yourself (DRY). It’s exactly what it sounds like, it means that you shouldn’t, at least in most cases, by copying and pasting the code. Your template, can be divided into reusable components such as the side navigation bar, the main navigation bar, the header of the page, the footer of the page and so on. This minimizes repetition and makes for writing efficient and cleaner code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#super-customizable"&gt;
  &lt;/a&gt;
  Super Customizable
&lt;/h2&gt;

&lt;p&gt;You can tackle just about any web app development project, whether it is a basic website or a high-end web app. It is also compatible with all major databases and even works with multiple database management systems at the same time like &lt;em&gt;PostgreSQL, SQLite, Oracle, etc&lt;/em&gt;. It’s fully loaded with extras and scalable, so you can make applications that handle heavy traffic and large volumes of information. &lt;/p&gt;

&lt;p&gt;Django offers a large amount of custom web development options. Since Django is built around Python, the design rules of the coding language dictate that web development time needs to be optimized. You can get your custom apps developed in a much smaller time frame than any other framework would allow you to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h2&gt;

&lt;p&gt;Django takes security seriously and helps developers avoid many common security mistakes. You do not have to implement security features manually to keep web development going. he framework has protection against XSS and CSRF attacks, SQL injections, clickjacking, etc. A Django web application is fully secured with industry-standard user authentication systems.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scalable-and-reliable"&gt;
  &lt;/a&gt;
  Scalable and Reliable
&lt;/h2&gt;

&lt;p&gt;As said above, some of the largest web applications like &lt;em&gt;Instagram, Reddit, Spotify&lt;/em&gt; use Django as a backend framework, we can agree that it's both scalable and reliable.  If you’re just starting, Django provides the functionality that enables you to create a small project and scale it as needed. You can handle more user requests and greater volumes of data if your web app goes through a growth spurt.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#community"&gt;
  &lt;/a&gt;
  Community
&lt;/h2&gt;

&lt;p&gt;Django has been around for a while now, and its large community makes the platform even better.  As it's an open source project, Django is supported by active volunteers who constantly work on stabilizing and improving the framework. It has about &lt;em&gt;58k&lt;/em&gt; Github stars.&lt;/p&gt;

&lt;p&gt;Apart from the developers that directly contribute to Django, there are people in the community who develop great plugins to make app development easier for budding developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h2&gt;

&lt;p&gt;As a result of super huge community, Django has a suberb documentation. It has detailed quick-start guides, detailed release notes, backward-compatible changes. There are dedicated websites for the platform where you can find help for any issues that you may run into. If you need help with your projects, the community support can always be banked on.&lt;/p&gt;




&lt;p&gt;That's it for this article. I would love to know what do you think about Django and this article. Please feel free to comment below or reach out. Thanks for reading!&lt;/p&gt;

</description>
      <category>django</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>python</category>
    </item>
    <item>
      <title>Python and Headless: How to make interactive, adaptable, affordable reports</title>
      <author>Michael Berry</author>
      <pubDate>Wed, 16 Jun 2021 19:31:01 +0000</pubDate>
      <link>https://dev.to/kentico-kontent/python-and-headless-how-to-make-interactive-adaptable-affordable-reports-1gb3</link>
      <guid>https://dev.to/kentico-kontent/python-and-headless-how-to-make-interactive-adaptable-affordable-reports-1gb3</guid>
      <description>&lt;p&gt;In this article, I'll show you how to pull data from a headless CMS and create a content type report using the Python framework: &lt;a href="https://dash.plotly.com/introduction"&gt;Dash&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#seeing-is-believing"&gt;
  &lt;/a&gt;
  Seeing is believing
&lt;/h2&gt;

&lt;p&gt;I am a visual learner. I really appreciate when a graph or diagram accompanies data, or when a visual aid gets to "the point" in a presentation. Not everyone is as much of a fan of charts as I am, but representing data visually is universally helpful. For example, which is easier to understand in a presentation:&lt;/p&gt;

&lt;p&gt;these side-by-side numbers: &lt;em&gt;101 | 443 | 102 | 320 | 82&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;or &lt;/p&gt;

&lt;p&gt;this graph:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XoZBIiZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22txws4ogu1gyfdmbtok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XoZBIiZR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/22txws4ogu1gyfdmbtok.png" alt="Sample visual learning graphic"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With just the delimited list of numbers, you don't get a good idea of how the values compare to one another. The graph makes differences and similarities more obvious. &lt;/p&gt;

&lt;p&gt;Let's say that you are a new manager or member of a marketing team that uses a headless CMS to produce content.  Knowing what types of content the team has been producing will be useful for better understanding their current content strategy. However, when you are looking at content models in a headless CMS, you're normally met with a long running list of names and numbers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FNVdwtS7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rafvk11x4rny7ab5h9a0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FNVdwtS7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rafvk11x4rny7ab5h9a0.png" alt="Kontent content type listing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To assess the kinds of content in the project, you're forced to scan the entire content type listing and mentally compare the values. Without a visual aid, it's hard to tell what topics are prevalent in your project. Furthermore, once you've finished your analysis, you can't easily share your findings with other members of your team. Making them believe your analysis is correct is much easier with a visual report.&lt;/p&gt;

&lt;p&gt;But what if you don't have the time or resources to integrate a commercial reporting tool into your project? Luckily, there are open source frameworks and libraries for building web analytic applications, like Dash.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-dash"&gt;
  &lt;/a&gt;
  What is Dash?
&lt;/h2&gt;

&lt;p&gt;Dash is framework built upon the popular &lt;a href="https://plotly.com/python/getting-started/#:~:text=Basic%20Charts%20tutorials.-,Overview,3%2Ddimensional%20use%2Dcases."&gt;Plotly&lt;/a&gt; graphing library, that allows you to build interactive visual applications and render them in a browser. Although it uses JavaScript libraries behind the scenes, Dash apps are written purely in Python and don't require familiarity with JavaScript. &lt;/p&gt;

&lt;p&gt;If you know some Python, Dash is well suited to create reports from headless CMS data because it supports a wide variety of &lt;a href="https://plotly.com/python/basic-charts/"&gt;well-documented&lt;/a&gt; graph types, and the open-source edition is completely free.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-create-a-report-from-a-headless-cms"&gt;
  &lt;/a&gt;
  How to create a report from a headless CMS
&lt;/h2&gt;

&lt;p&gt;Let's create a content report using the &lt;a href="https://kontent.ai/"&gt;Kentico Kontent headless CMS&lt;/a&gt;, the &lt;a href="https://github.com/kentico-michaelb/kontent-delivery-python-sdk"&gt;open source Kontent Python SDK&lt;/a&gt;, and &lt;a href="https://dash.plotly.com/introduction"&gt;Dash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In our sample scenario, we'll create three reports about a coffee shop website, and aggregate them in a tabbed report.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O14qPrCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bk5v8gwkzzggx2f5xwcw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O14qPrCR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bk5v8gwkzzggx2f5xwcw.png" alt="Sample tabbed report"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our report we want to show: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what type of content exists in the project&lt;/li&gt;
&lt;li&gt;the audiences our articles are targeting&lt;/li&gt;
&lt;li&gt;the timeline showing when they were published. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These reports will give us more insight into the "who, what, when" strategy surrounding our previously published articles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#application-setup"&gt;
  &lt;/a&gt;
  Application setup
&lt;/h2&gt;

&lt;p&gt;First we need to install Dash, our SDK, and dependencies. I recommend that you do this in a &lt;a href="https://docs.python.org/3/tutorial/venv.html"&gt;virtual environment&lt;/a&gt;. In the terminal run:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pip install dash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install kontent_delivery&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install pandas&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Alternatively, you can download and then install this &lt;a href="https://github.com/kentico-michaelb/kontent-dash-blog/blob/master/requirements.txt"&gt;requirements.txt&lt;/a&gt; using &lt;code&gt;pip install -r /path/to/requirements.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By the end of the exercise, we will have a file structure that looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;kontent-dash-blog (root)/
    reports/
        article_timeline.py
        content_types.py
        personas.py
    report_dashboard.py
    requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dash-and-kontent-initialization"&gt;
  &lt;/a&gt;
  Dash and Kontent Initialization
&lt;/h2&gt;

&lt;p&gt;Once we've installed the requirements, we need to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;setup our Flask application for running Dash &lt;/li&gt;
&lt;li&gt;initialize our Kontent SDK delivery client using our &lt;a href="https://docs.kontent.ai/tutorials/develop-apps/get-content/get-content-items#a-getting-content-items"&gt;Kontent project ID&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;setup some methods to build our three reports &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We'll do this in a file called &lt;strong&gt;report_dashboard.py&lt;/strong&gt; and create it in the root of the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import dash
import flask
from kontent_delivery.client import DeliveryClient
# report methods
from reports.content_types import build_types_chart
from reports.personas import build_personas_pie
from reports.article_timeline import build_post_timeline

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

# dash
server = flask.Flask(__name__)
app = dash.Dash(server=server, external_stylesheets=external_stylesheets)

# kontent
client = DeliveryClient("your_Kontent_Project_ID")

# custom methods to create reports
bar = build_types_chart(client)
pie = build_personas_pie(client)
timeline = build_post_timeline(client)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#report-1-bar-chart-showing-content-types"&gt;
  &lt;/a&gt;
  Report 1: bar chart showing content types
&lt;/h2&gt;

&lt;p&gt;In this chart, we'll call the Kontent API and count how many content types exist of a given type. We'll create the file &lt;strong&gt;content_types.py&lt;/strong&gt; in a &lt;strong&gt;reports&lt;/strong&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import plotly.express as px

def build_types_chart(client):
    type_response = client.get_content_types()
    item_response = client.get_content_items()

    types = {}

    # add Kontent type counts to a dictionary
    for content_type in type_response.types:
        types[content_type.codename] = 0

    # increment content type count per item of respective type
    for item in item_response.items:
        types[item.content_type] += 1 

    data = {"content types":types.keys(), "count": types.values()}

    fig = px.bar(data, x="content types", y="count")

    return fig
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;em&gt;build_types_chart&lt;/em&gt; method, we create key value pairs from the codename of our content types, and a count of how many items are published of that type. With that data, we use Plotly Express to create and return a bar graph to our Dash application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CnPjqMQy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxsrqi2b0pv8ks8fpj4n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnPjqMQy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxsrqi2b0pv8ks8fpj4n.png" alt="Content types bar chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#report-2-pie-chart-showing-article-personas"&gt;
  &lt;/a&gt;
  Report 2: pie chart showing article personas
&lt;/h2&gt;

&lt;p&gt;In our second chart, we want to show what percentage of personas our article content targets. Let's assume we know that the article content type uses a &lt;a href="https://docs.kontent.ai/tutorials/manage-kontent/content-modeling/create-taxonomies"&gt;taxonomy group&lt;/a&gt; called &lt;em&gt;personas&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YYn8BXJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6faxv7a8rw0puz3w8dr6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YYn8BXJ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6faxv7a8rw0puz3w8dr6.png" alt="Kontent taxonomy group"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll create the file &lt;strong&gt;personas.py&lt;/strong&gt; in the &lt;strong&gt;reports&lt;/strong&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from kontent_delivery.builders.filter_builder import Filter
import plotly.express as px

def build_personas_pie(client):
    # only return "article" content items
    item_response = client.get_content_items(
        Filter("system.type", "[eq]", "article")
    )

    # get the taxonomy group that articles use
    personas_response = client.get_taxonomy("personas")
    chart_personas = {}

    # identify personas to be counted
    def get_taxonomy_terms(terms):
        for persona in terms:
            chart_personas[persona.name] = 0
            if persona.terms:
                get_taxonomy_terms(persona.terms)


    get_taxonomy_terms(personas_response.terms)

    # increment persona count per item
    for item in item_response.items:
        for persona in item.elements.personas.value:
            chart_personas[persona.name] += 1 

    data = {"personas":chart_personas.keys(), "count": chart_personas.values()}

    fig = px.pie(data, names="personas", values="count",
                title='Assigned article personas')
    return fig
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;em&gt;build_personas_pie&lt;/em&gt; method, we pull all of our article content items.  We then create key value pairs from the name of taxonomy terms that exist in our Personas taxonomy group, and a count of how many items are tagged with a particular term. With that data, we use Plotly Express to create and return a pie graph to our Dash application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tctBPpue--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5or1j7sz6dwu1iaq8laq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tctBPpue--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5or1j7sz6dwu1iaq8laq.png" alt="Personas pie chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#report-3-timeline-showing-date-posted"&gt;
  &lt;/a&gt;
  Report 3: timeline showing date posted
&lt;/h2&gt;

&lt;p&gt;Information about when these articles were published could provide more context about what our content strategy was previously, or how it changed over time. Let's assume we have a "posted date" element on our articles that we can use to create our timeline:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RP7Ygvis--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rovnhw9v15tv3s4a5r0l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RP7Ygvis--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rovnhw9v15tv3s4a5r0l.png" alt="Kontent content item posted date"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We'll create the file &lt;strong&gt;article_timeline.py&lt;/strong&gt; in the &lt;strong&gt;reports&lt;/strong&gt; directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from kontent_delivery.builders.filter_builder import Filter
import pandas as pd
import plotly.express as px

def build_post_timeline(client):
    # only return "article" content items
    item_response = client.get_content_items(
        Filter("system.type", "[eq]", "article")
    )

    # setup two arrays for Plotly scatter
    chart_items = []
    chart_post_date = []

    # populate arrays with respective item name and post date
    for item in item_response.items:
        chart_items.append(item.name)
        chart_post_date.append(item.elements.post_date.value)

    df = pd.DataFrame(dict(item=chart_items, post_date=chart_post_date))

    # use column names of df for the different parameters x, y, ...
    fig = px.scatter(df, x="post_date", y="item",
                    title="Article post timeline",
                    labels={"Post Date":"Date item posted"} # customize axis label
                    )

    return fig
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like the other methods, we retrieve the article items from Kontent, but in this example we take an extra step to convert two arrays into a dictionary and pass them into a &lt;a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html"&gt;pandas DataFrame&lt;/a&gt;. This is only for the sake of matching the &lt;a href="https://plotly.com/python/dot-plots/"&gt;basic dot plot example&lt;/a&gt; in the Plotly documentation. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ijSJzvZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlqtepnjpdkglrfzxgtp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ijSJzvZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlqtepnjpdkglrfzxgtp.png" alt="Dash timeline report"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tying-it-all-together-in-a-tabbed-report-with-dash"&gt;
  &lt;/a&gt;
  Tying it all together in a tabbed report with Dash
&lt;/h2&gt;

&lt;p&gt;It's time to pull all the visual aids together in a single report and add some interactivity with Dash. We created the &lt;strong&gt;report_dashboard.py&lt;/strong&gt; file earlier to add the Kontent client and our chart building methods, and now we'll add a layout with some interactive components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ... other imports from before
# add these for components:
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

# dash
server = flask.Flask(__name__)
app = dash.Dash(server=server, external_stylesheets=external_stylesheets)

# kontent
client = DeliveryClient(config.project_id, options=config.delivery_options)

bar = build_types_chart(client)
pie = build_personas_pie(client)
timeline = build_post_timeline(client)

# -- end of "Dash and Kontent Initialization" code --

# -- start of "Tying it all together..." code --

# adding the dash layout
app.layout = html.Div([
    # dash tabs component that wraps individual tabs
    dcc.Tabs(id='tabs-example', value='tab-1', children=[
        dcc.Tab(label='Content Types', value='tab-1'),
        dcc.Tab(label='Article Personas', value='tab-2'),
        dcc.Tab(label='Article Post Timeline', value='tab-3'),
    ]),
    # div used as a canvas to show reports
    html.Div(id='tabs-example-content')
])

# onclick events that call our chart building methods
@app.callback(Output('tabs-example-content', 'children'),
              Input('tabs-example', 'value'))
def render_content(tab):
    if tab == 'tab-1':
        return html.Div([
            dcc.Graph(figure=bar)
        ])
    elif tab == 'tab-2':
        return html.Div([
             dcc.Graph(figure=pie)
        ])
    elif tab == 'tab-3':
        return html.Div([
             dcc.Graph(figure=timeline)
        ])

# run the application when report_dashboard.py is called
if __name__ == '__main__':
    app.run_server(debug=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the final code file of our report, we use &lt;a href="https://dash.plotly.com/dash-html-components"&gt;Dash's core HTML components&lt;/a&gt; to create a simple two div layout. The first div contains Dash "Tab" components that we use to toggle between graphs, and the second div acts as a canvas to show the graphs we generated.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TYa_pXYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsg43f8p5r30ain4cpse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TYa_pXYU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsg43f8p5r30ain4cpse.png" alt="Dash report with tabs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Following the layout, we use &lt;a href="https://dash.plotly.com/basic-callbacks"&gt;Dash callbacks&lt;/a&gt; to generate a different graph depending upon which tab we click. More information about Dash's core components, including "Graph" and "Tabs" can be seen in the &lt;a href="https://dash.plotly.com/dash-core-components"&gt;Dash documentation here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point, you can run &lt;code&gt;report_dashboard.py&lt;/code&gt; in your terminal and watch Dash spin up a localhost server for your newly created reporting application.  Follow the link in the terminal, and VOILA! You've created your own interactive, custom report for free.  &lt;/p&gt;

&lt;p&gt;You can check out a &lt;a href="https://kontent-dash-report.herokuapp.com"&gt;live hosted example&lt;/a&gt; or the &lt;a href="https://github.com/kentico-michaelb/kontent-dash-blog"&gt;full source code on GitHub&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this article we discussed what Dash is, and how you can use it to create interactive reports from your headless CMS data. Now you know with a little Python knowledge, and an open-source framework like Dash, you don't have to miss out on having headless CMS reports.&lt;/p&gt;

&lt;p&gt;Want more Dash and headless samples? Check out this &lt;a href="https://github.com/kentico-michaelb/kontent-linked-report"&gt;Dash + Kontent app&lt;/a&gt; for making modular content graphs.&lt;/p&gt;

&lt;p&gt;Are you having issues with the samples from the article? &lt;a href="https://discord.com/invite/SKCxwPtevJ"&gt;Get in touch on our Discord&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>python</category>
      <category>headlesscms</category>
      <category>reports</category>
      <category>free</category>
    </item>
    <item>
      <title>Start a SPA and it's API in one click</title>
      <author>Patrick M</author>
      <pubDate>Wed, 16 Jun 2021 19:25:43 +0000</pubDate>
      <link>https://dev.to/binarypatrick/start-a-spa-and-it-s-api-in-one-click-5cg3</link>
      <guid>https://dev.to/binarypatrick/start-a-spa-and-it-s-api-in-one-click-5cg3</guid>
      <description>&lt;p&gt;I've been using start or jump scripts for a long time to start up my API and SPA at the same time. With &lt;a href="https://devblogs.microsoft.com/aspnet/introducing-project-tye/"&gt;project TYE&lt;/a&gt; on the horizon, I thought I would share more about my more simplistic, "poor man", implementation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;p&gt;It is important to note, a lot of configuration information is specified ahead of time in different files to make this work. For ASP.Net, the ports are configured in the &lt;em&gt;launch.json&lt;/em&gt; and for node, proxy information is set up in a &lt;em&gt;proxy.config.json&lt;/em&gt; file. Below is a simple example of the proxy config I use most often to route api requests to the ASP.Net port. It is also good to remember both apps are running locally under localhost.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;proxy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;config&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:5000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"secure"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"logLevel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"debug"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"changeOrigin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it's also important to declare the script you want node to run in scripts section of your package.json. Typically I use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ng serve --proxy-config proxy.config.json"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#humble-beginnings"&gt;
  &lt;/a&gt;
  Humble beginnings
&lt;/h2&gt;

&lt;p&gt;For my first attempt at makin my start script, I created a batch file that started two scripts. One new Powershell window for &lt;code&gt;dotnet watch run&lt;/code&gt; and another for &lt;code&gt;npm run start&lt;/code&gt;. This had some hiccups initially. The windows would close if the Powershell stopped running, which was problematic for collecting errors. Also the command prompt window would linger. After a few iterations, I was able to solve those problems and landed on this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ./src/api
&lt;span class="nb"&gt;start&lt;/span&gt; &lt;span class="kd"&gt;powershell&lt;/span&gt;&lt;span class="err"&gt;.exe&lt;/span&gt; &lt;span class="na"&gt;-NoExit &lt;/span&gt;&lt;span class="kd"&gt;dotnet&lt;/span&gt; &lt;span class="kd"&gt;watch&lt;/span&gt; &lt;span class="nb"&gt;run&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; ../spa
&lt;span class="nb"&gt;start&lt;/span&gt; &lt;span class="kd"&gt;powershell&lt;/span&gt;&lt;span class="err"&gt;.exe&lt;/span&gt; &lt;span class="na"&gt;-NoExit &lt;/span&gt;&lt;span class="kd"&gt;npm&lt;/span&gt; &lt;span class="nb"&gt;run&lt;/span&gt; &lt;span class="nb"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;![Original script result](I've been using start or jump scripts for a long time to start up my API and SPA at the same time. With &lt;a href="https://devblogs.microsoft.com/aspnet/introducing-project-tye/"&gt;project TYE&lt;/a&gt; on the horizon, I thought I would share more about my more simplistic, "poor man", implementation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h2&gt;

&lt;p&gt;It is important to note, a lot of configuration information is specified ahead of time in different files to make this work. For ASP.Net, the ports are configured in the &lt;em&gt;launch.json&lt;/em&gt; and for node, proxy information is set up in a &lt;em&gt;proxy.config.json&lt;/em&gt; file. Below is a simple example of the proxy config I use most often to route api requests to the ASP.Net port. It is also good to remember both apps are running locally under localhost.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;proxy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;config&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"target"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://localhost:5000"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"secure"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"logLevel"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"debug"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"changeOrigin"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;it's also important to declare the script you want node to run in scripts section of your package.json. Typically I use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"ng serve --proxy-config proxy.config.json"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#humble-beginnings"&gt;
  &lt;/a&gt;
  Humble beginnings
&lt;/h2&gt;

&lt;p&gt;For my first attempt at makin my start script, I created a batch file that started two scripts. One new Powershell window for &lt;code&gt;dotnet watch run&lt;/code&gt; and another for &lt;code&gt;npm run start&lt;/code&gt;. This had some hiccups initially. The windows would close if the Powershell stopped running, which was problematic for collecting errors. Also the command prompt window would linger. After a few iterations, I was able to solve those problems and landed on this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ./src/api
&lt;span class="nb"&gt;start&lt;/span&gt; &lt;span class="kd"&gt;powershell&lt;/span&gt;&lt;span class="err"&gt;.exe&lt;/span&gt; &lt;span class="na"&gt;-NoExit &lt;/span&gt;&lt;span class="kd"&gt;dotnet&lt;/span&gt; &lt;span class="kd"&gt;watch&lt;/span&gt; &lt;span class="nb"&gt;run&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; ../spa
&lt;span class="nb"&gt;start&lt;/span&gt; &lt;span class="kd"&gt;powershell&lt;/span&gt;&lt;span class="err"&gt;.exe&lt;/span&gt; &lt;span class="na"&gt;-NoExit &lt;/span&gt;&lt;span class="kd"&gt;npm&lt;/span&gt; &lt;span class="nb"&gt;run&lt;/span&gt; &lt;span class="nb"&gt;start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="/images/autostart-api-spa-app-1.png" class="article-body-image-wrapper"&gt;&lt;img src="/images/autostart-api-spa-app-1.png" alt="Original script result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-evolution"&gt;
  &lt;/a&gt;
  Next evolution
&lt;/h2&gt;

&lt;p&gt;This script worked well from ASP.Net Core 1.3 and Angular 2, all the way through today with .Net 5 and Angular 12. Recently though, I started to dabble in Powershell Core and Windows Terminal which led me to a more efficient approach to starting and managing my scripts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="kd"&gt;wt&lt;/span&gt; &lt;span class="na"&gt;--title &lt;/span&gt;&lt;span class="s2"&gt;"dotnet watch run"&lt;/span&gt; &lt;span class="na"&gt;-d &lt;/span&gt;&lt;span class="s2"&gt;"./src/api"&lt;/span&gt; &lt;span class="kd"&gt;powershell&lt;/span&gt; &lt;span class="na"&gt;-noExit &lt;/span&gt;&lt;span class="s2"&gt;"dotnet watch run"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="na"&gt;--title &lt;/span&gt;&lt;span class="s2"&gt;"npm run start"&lt;/span&gt; &lt;span class="na"&gt;-d &lt;/span&gt;&lt;span class="s2"&gt;"./src/spa/"&lt;/span&gt; &lt;span class="kd"&gt;powershell&lt;/span&gt; &lt;span class="na"&gt;-noExit &lt;/span&gt;&lt;span class="s2"&gt;"npm run start"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this one line, I can start a Windows Terminal with both scripts running in tabs. This allows me to keep both together and but also manage the window as one unit. The commands are similar, but the tabs are labeled, so I can quickly jump where I need to look. Also, this is far more expandable if I needed to run other startup scripts together in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WJMWZB1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://patrickmoore.dev/images/autostart-api-spa-app-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJMWZB1L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://patrickmoore.dev/images/autostart-api-spa-app-1.png" alt="New script result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-evolution"&gt;
  &lt;/a&gt;
  Next evolution
&lt;/h2&gt;

&lt;p&gt;This script worked well from ASP.Net Core 1.3 and Angular 2, all the way through today with .Net 5 and Angular 12. Recently though, I started to dabble in Powershell Core and Windows Terminal which led me to a more efficient approach to starting and managing my scripts.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight batchfile"&gt;&lt;code&gt;&lt;span class="kd"&gt;wt&lt;/span&gt; &lt;span class="na"&gt;--title &lt;/span&gt;&lt;span class="s2"&gt;"dotnet watch run"&lt;/span&gt; &lt;span class="na"&gt;-d &lt;/span&gt;&lt;span class="s2"&gt;"./src/api"&lt;/span&gt; &lt;span class="kd"&gt;powershell&lt;/span&gt; &lt;span class="na"&gt;-noExit &lt;/span&gt;&lt;span class="s2"&gt;"dotnet watch run"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="na"&gt;--title &lt;/span&gt;&lt;span class="s2"&gt;"npm run start"&lt;/span&gt; &lt;span class="na"&gt;-d &lt;/span&gt;&lt;span class="s2"&gt;"./src/spa/"&lt;/span&gt; &lt;span class="kd"&gt;powershell&lt;/span&gt; &lt;span class="na"&gt;-noExit &lt;/span&gt;&lt;span class="s2"&gt;"npm run start"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this one line, I can start a Windows Terminal with both scripts running in tabs. This allows me to keep both together and but also manage the window as one unit. The commands are similar, but the tabs are labeled, so I can quickly jump where I need to look. Also, this is far more expandable if I needed to run other startup scripts together in the future.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--egRXdsvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://patrickmoore.dev/images/autostart-api-spa-app-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--egRXdsvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://patrickmoore.dev/images/autostart-api-spa-app-2.png" alt="New script result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Originally posted to &lt;a href="https://patrickmoore.dev/autostart-api-spa-app/"&gt;https://patrickmoore.dev/autostart-api-spa-app/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>windows</category>
      <category>terminal</category>
      <category>angular</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Home automation with Lars Richter</title>
      <author>Ben Halpern</author>
      <pubDate>Wed, 16 Jun 2021 19:09:55 +0000</pubDate>
      <link>https://dev.to/devteam/home-automation-with-lars-richter-2bdo</link>
      <guid>https://dev.to/devteam/home-automation-with-lars-richter-2bdo</guid>
      <description>&lt;p&gt;This week on the show, you'll meet a new guest co-host, &lt;a href="https://dev.to/jgaskins"&gt;Jamie Gaskins&lt;/a&gt;. &lt;a class="mentioned-user" href="https://dev.to/jgaskins"&gt;@jgaskins&lt;/a&gt;
 is the Principal Site Reliability Engineer at Forem. We are very lucky to have Jamie helping us make Forem scalable and highly reliable ✨ &lt;/p&gt;

&lt;p&gt;On this week's episode, we talked about something that &lt;em&gt;is&lt;/em&gt; very nerdy but &lt;em&gt;isn't&lt;/em&gt; directly related to either of our work. In other words, we had a lot of fun with this. &lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s5-e6-home-automation-nerd-out"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S5:E6 - Home Automation Nerd-Out!&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s5-e6-home-automation-nerd-out" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s5-e6-home-automation-nerd-out" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s5-e6-home-automation-nerd-out" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s5-e6-home-automation-nerd-out" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s5-e6-home-automation-nerd-out"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s5-e6-home-automation-nerd-out"&gt;
      &lt;img id="episode-profile-image" alt="S5:E6 - Home Automation Nerd-Out!" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;Our guest this week was &lt;strong&gt;&lt;a href="https://twitter.com/n_develop"&gt;Lars Richter&lt;/a&gt;, Application Developer at Parship Group.&lt;/strong&gt; I have been excited to chat with Lars about all things home automation for a while now and he did not disappoint!&lt;/p&gt;

&lt;p&gt;As I describe in the episode, I am really fascinated by home automation — so much so that I created a new Forem community dedicated to this topic called &lt;a href="https://www.hometechnica.com/"&gt;Hometechnica&lt;/a&gt;. I hope you'll take a look and consider joining!&lt;/p&gt;

&lt;p&gt;Take a listen to DevDiscuss S5E6 to hear us define, nerd out, and complain about home automation. &lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s5-e6-home-automation-nerd-out/id1513053883?i=1000525725291"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/0GZkjHIl0ZGfdpaCxUHWCA"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzM5?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjYquuH7ZzxAhUAAAAAHQAAAAAQCA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s5e6-home-automation-nerd-out-dHfmCZM-nK6/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=163810390"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.herokuapp.com/podcasts/devdiscuss/episodes/171"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season five sponsors: &lt;a href="//cockroachlabs.com/devdiscuss"&gt;CockroachDB&lt;/a&gt;, &lt;a href="https://www.cloudways.com/en/?id=893892"&gt;Cloudways&lt;/a&gt;, &amp;amp; &lt;a href="https://rudderstack.com/?utm_source=devto&amp;amp;utm_medium=podcast&amp;amp;utm_campaign=CMPGN_3_PS&amp;amp;utm_content=None&amp;amp;utm_term=%7Bkeyword%7D&amp;amp;raid=6dbc05eeb293b421f68d02ce12648240"&gt;Rudderstack&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  🗣️🗣️🗣️
&lt;/h1&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
      <category>hardware</category>
    </item>
    <item>
      <title>Advanced HTML to PDF API features</title>
      <author>Anvil Engineering</author>
      <pubDate>Wed, 16 Jun 2021 19:04:15 +0000</pubDate>
      <link>https://dev.to/useanvil/advanced-html-to-pdf-api-features-4g75</link>
      <guid>https://dev.to/useanvil/advanced-html-to-pdf-api-features-4g75</guid>
      <description>&lt;p&gt;We recently announced our &lt;a href="https://www.useanvil.com/blog/2021-04-26-html-to-pdf-generation"&gt;HTML to PDF API&lt;/a&gt; feature allowing you to create PDFs with your own HTML and CSS. In this post I'll touch on a handful of advanced PDF-specific HTML &amp;amp; CSS features that give you full control over your PDF's output.&lt;/p&gt;

&lt;p&gt;Generally the advanced features covered here will help you control page-level rendering on a PDF. HTML and CSS don't have the concept of a page in the same way a PDF does, so there are no mechanisms built into vanilla HTML / CSS to help with page-level rendering. Our HTML renderer has a few extensions that make working with pages a lot easier.&lt;/p&gt;

&lt;p&gt;We'll dive right into the features; if you haven't already, make sure you are up to speed on generating PDFs by checking out the &lt;a href="https://www.useanvil.com/docs/api/generate-pdf#html--css-to-pdf"&gt;HTML to PDF API docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post we'll cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Repeating table headers on each page&lt;/li&gt;
&lt;li&gt;Forcing page breaks&lt;/li&gt;
&lt;li&gt;Rendering page numbers&lt;/li&gt;
&lt;li&gt;Rendering HTML elements in the page margins&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#repeating-table-headers-on-each-page"&gt;
  &lt;/a&gt;
  Repeating table headers on each page
&lt;/h2&gt;

&lt;p&gt;Say you have an HTML table with 100 rows. When you render a long table like this in a browser, the table content can expand forever. In the browser world, you don't need to worry about pages at all—which page your table rows land on, how many can fit on a page, etc.&lt;/p&gt;

&lt;p&gt;Render this same table in a PDF, however, and you'll need to deal with page breaks. If a table is longer than a single page, or starts half way down a page, rows will need to be broken up and rendered across multiple pages.&lt;/p&gt;

&lt;p&gt;Turns out a page full of table rows without header context isn't very user friendly. For example, if you printed out the following, its second page would be a little confusing without the headers. What is that 3rd column again?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--feQswqpv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnhhnknedfc8wwxjjdsh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--feQswqpv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lnhhnknedfc8wwxjjdsh.png" alt="HTML table in PDF"&gt;&lt;/a&gt;&lt;br&gt;
Ideally we'd render the table headers on each page that shows the table's rows, then someone doesn't need to look at a previous page to understand the headers.&lt;/p&gt;

&lt;p&gt;Table header repeating like this is supported and is turned on by default! All you have to do is make sure you put your header &lt;code&gt;th&lt;/code&gt; in a &lt;code&gt;thead&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Qty&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Description&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Price&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Subtotal&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Blue large widgets&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;$15.00&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;$30.00&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- ...Many more rows... --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then the headers render again on pages that get the overflow rows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hVg3LtK---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74v7mvwhsgjimuofj1in.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hVg3LtK---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/74v7mvwhsgjimuofj1in.png" alt="HTML table in PDF with paginated headers"&gt;&lt;/a&gt;&lt;br&gt;
Repeating also works with table footers when a &lt;code&gt;tfoot&lt;/code&gt; element is used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;2&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Blue large widgets&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;$15.00&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;$30.00&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- ...Many more rows... --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tfoot&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Table Footer&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tfoot&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the header and footer repeating:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MXxz-5qZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itwus5i8ttybqnoulqip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXxz-5qZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itwus5i8ttybqnoulqip.png" alt="HTML table in PDF with paginated footer"&gt;&lt;/a&gt;&lt;br&gt;
All the table context, all the time!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#turning-header-repeating-off"&gt;
  &lt;/a&gt;
  Turning header repeating off
&lt;/h3&gt;

&lt;p&gt;While table header repeating is on by default, you can turn it off with a custom CSS rule &lt;code&gt;-fs-table-paginate&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="nc"&gt;.no-header-repeat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;-fs-table-paginate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or you can disable it by simply not using &lt;code&gt;thead&lt;/code&gt;, &lt;code&gt;tbody&lt;/code&gt;, and &lt;code&gt;tfoot&lt;/code&gt; elements.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#forcing-page-breaks"&gt;
  &lt;/a&gt;
  Forcing page breaks
&lt;/h2&gt;

&lt;p&gt;Sometimes you need a piece of content to always start on its own page, no matter the content that came before it. You can force page breaks with the &lt;code&gt;page-break-before: always&lt;/code&gt; rule on any element. It will create a new page, then set the element with the &lt;code&gt;page-break-before&lt;/code&gt; CSS rule as the first element of that page.&lt;/p&gt;

&lt;p&gt;Here's a simple example with three pages:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- Page 1--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Lonely Page 1 content&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- .new-page causes a page break --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"new-page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Page 2 content&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- .new-page causes another page break --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"new-page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Page 3 content&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.new-page&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;page-break-before&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;always&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DxZWP9XH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j7hkhp8wg90ccq4016g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DxZWP9XH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j7hkhp8wg90ccq4016g.png" alt="HTML to PDF page break"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering-page-numbers"&gt;
  &lt;/a&gt;
  Rendering page numbers
&lt;/h2&gt;

&lt;p&gt;Page numbers are a fixture in most PDFs. Often PDFs will have a &lt;code&gt;Page 2 of 3&lt;/code&gt; style numbering scheme on each page.&lt;/p&gt;

&lt;p&gt;You achieve this by injecting page numbers into any element by using a bit of special CSS. You target the &lt;code&gt;content&lt;/code&gt; of your chosen element's &lt;code&gt;::after&lt;/code&gt; pseudo-element with a special directive:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"page-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Page
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  of
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"pages"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the CSS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.page-container&lt;/span&gt; &lt;span class="nc"&gt;.page&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.page-container&lt;/span&gt; &lt;span class="nc"&gt;.pages&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The targeted elements can be on any page you'd like. But it's likely most important to render the page number information on each page, in one of the margins, which brings us to our next section...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rendering-html-elements-in-the-page-margins"&gt;
  &lt;/a&gt;
  Rendering HTML elements in the page margins
&lt;/h2&gt;

&lt;p&gt;Many PDFs have content in the margins on every page. For example, page numbers, your company name, phone number, etc. The HTML renderer allows rendering anything your heart desires in the margins by way of a "running" element.&lt;/p&gt;

&lt;p&gt;You render an element in the body like any other element, define the element as a "running" element, then tell each page to use that element in one of the defined margin areas.&lt;/p&gt;

&lt;p&gt;Here's an example that uses the page number example above and renders it in the bottom right margin on every page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!--
    We'll make this a "running" element in the css.
    This element should be the first element after the body
    to show on all pages.
  --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"page-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Page &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- other elements --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;...content...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.page-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Define this element as a running element called "pageContainer" */&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pageContainer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@page&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/*
  Use any of these locations to place your margin elements:
  @top-left, @top-left-corner
  @top-center
  @top-right, @top-right-corner
  @bottom-left, @bottom-left-corner
  @bottom-center
  @bottom-right, @bottom-right-corner
  */&lt;/span&gt;
  &lt;span class="k"&gt;@bottom-right&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/*
    Reference "pageContainer" to be the content for the
    bottom right page margin area
    */&lt;/span&gt;
    &lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;element&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;pageContainer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output using the page breaks and applying a little styling to the page numbers:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ay1kB-Oz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syrjqljgdowna8be4ev8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ay1kB-Oz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/syrjqljgdowna8be4ev8.png" alt="HTML to PDF page break with page number"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#element-location"&gt;
  &lt;/a&gt;
  Element location
&lt;/h3&gt;

&lt;p&gt;A "running" element's location in the HTML determines which pages it shows on. If you want it in a margin element on all pages, just make sure to place the "running" element before all non-running HTML elements in the HTML code. For example, place all your margin elements that show on all pages right after the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;To see this behavior in action, using the page number and page break examples above, we can start the page numbering on the &lt;em&gt;2nd page&lt;/em&gt; by placing the running &lt;code&gt;pageContainer&lt;/code&gt; element on the second page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Lonely Page 1 content&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"new-page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Page 2 content&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!--
  The page numbering will start on the 2nd page because
  we're rendering it after page 2's pagebreak
--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"page-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Page &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- Page 3 will also have the page number in the margin --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"new-page"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Page 3 content&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.page-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* Define the this element as a running element called "pageContainer" */&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pageContainer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.new-page&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;page-break-before&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;always&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@page&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@bottom-right&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* Reference "pageContainer" to be the content for the bottom right page margin area */&lt;/span&gt;
    &lt;span class="nt"&gt;content&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;element&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;pageContainer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the output. Notice there is no &lt;code&gt;Page 1&lt;/code&gt; on the first page:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JLG9qfyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1istyhjzkfeyefwaam0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLG9qfyc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1istyhjzkfeyefwaam0.png" alt="HTML to PDF page break with page number"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#positioning-margin-elements"&gt;
  &lt;/a&gt;
  Positioning margin elements
&lt;/h3&gt;

&lt;p&gt;Margin elements may not render exactly where you want them to. It's possible to place them exactly where you want with &lt;code&gt;margin-top&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"margin-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Margin Content
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.margin-content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;running&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marginContent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c"&gt;/* Position the element with margins */&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c"&gt;/* Style margin element like any other */&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#c00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@page&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@top-left&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;marginContent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;margin-top: 0&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TJLazFP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i950qmmwdgi6qoljaw1d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TJLazFP6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i950qmmwdgi6qoljaw1d.png" alt="Top Margin 0"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;margin-top: -25px&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LdOHrGWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1rua5qmsglezzgw1jut.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LdOHrGWE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1rua5qmsglezzgw1jut.png" alt="Top Margin -25px"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;margin-top: 25px&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W-5oGx3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2shgx9j5ef4catrh0q7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W-5oGx3o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u2shgx9j5ef4catrh0q7.png" alt="Top Margin 25px"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-made-it"&gt;
  &lt;/a&gt;
  You made it!
&lt;/h2&gt;

&lt;p&gt;Hopefully these features go a long way to giving you full control in creating PDFs that look exactly as you want.&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;even more&lt;/em&gt; advanced features in there that we'll be talking about in coming months. If you experiment and are struggling to accomplish what you'd like with the HTML to PDF API, don't hesitate to contact us:&lt;br&gt;
&lt;a href="//mailto:support@useanvil.com"&gt;support@useanvil.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>tutorial</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Snake VS. Blocks | A snake game.</title>
      <author>FRADAR</author>
      <pubDate>Wed, 16 Jun 2021 19:01:40 +0000</pubDate>
      <link>https://dev.to/fradar/snake-vs-blocks-a-snake-game-o98</link>
      <guid>https://dev.to/fradar/snake-vs-blocks-a-snake-game-o98</guid>
      <description>&lt;p&gt;Eat all the food (circles) in this 15 level snake game! Don't hit blocks and lasers, and eat the white blocks that randomly flicker around the map. They give you powerups. Use WASD or the arrow keys to move, P to pause, and C to copy the save code. The sound/volume might crash the game. More levels in this game will be added soon.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S&lt;/em&gt;  I would love to improve to this game, so if there are any glitches/bugs in this game, please tell me about them in the comments.&lt;/p&gt;

&lt;p&gt;Try it here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR/full/JjWwOZX"&gt;https://codepen.io/FRADAR/full/JjWwOZX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For more games,&lt;br&gt;
Click here:&lt;br&gt;
&lt;a href="https://codepen.io/FRADAR"&gt;https://codepen.io/FRADAR&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>gamedev</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>GIT Basics / Cheatsheet</title>
      <author>Andre Reus</author>
      <pubDate>Wed, 16 Jun 2021 18:50:40 +0000</pubDate>
      <link>https://dev.to/andrereus/git-basics-cheatsheet-50hh</link>
      <guid>https://dev.to/andrereus/git-basics-cheatsheet-50hh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-git"&gt;
  &lt;/a&gt;
  What is GIT?
&lt;/h2&gt;

&lt;p&gt;Best short and also official description:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Benefits / Comparison:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Git is easy to learn and has a tiny footprint with lightning fast performance. It outclasses SCM tools like Subversion, CVS, Perforce, and ClearCase with features like cheap local branching, convenient staging areas, and multiple workflows.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;Download and install it from &lt;a href="https://git-scm.com/"&gt;https://git-scm.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-commands"&gt;
  &lt;/a&gt;
  GIT Commands
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#basic-commands"&gt;
  &lt;/a&gt;
  Basic Commands
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git status // Show the current status
git init // Initialize project folder with GIT
git add // Add changes to the stage
git commit // Commit changes in the stage to the history / log
git log // Show the commit history
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#git-help"&gt;
  &lt;/a&gt;
  GIT Help
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git help // Help Overview
git help -a // GIT Commands
git help -g // GIT Guides
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#git-branching-in-visual-form"&gt;
  &lt;/a&gt;
  GIT Branching in visual form
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RzJGkll5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pu5h21m48akfpolc913.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RzJGkll5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pu5h21m48akfpolc913.png" alt="GIT Branching"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#branching-commands"&gt;
  &lt;/a&gt;
  Branching Commands
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git branch // Create a branch
git checkout (in future "git switch") // Switch to a branch
git merge // Merge a branch into an other one
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Playground for GIT Commands: &lt;a href="https://git-school.github.io/visualizing-git/"&gt;https://git-school.github.io/visualizing-git/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#git-client"&gt;
  &lt;/a&gt;
  GIT Client
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--idRPVteE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3zkin9m10zbiihkj7do.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--idRPVteE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w3zkin9m10zbiihkj7do.jpg" alt="GIT Client"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some good free GIT Clients (GUIs) are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git-fork.com/"&gt;https://git-fork.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sourcetreeapp.com/"&gt;https://www.sourcetreeapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Optional useful Diff Tool: Beyond Compare&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#collaboration"&gt;
  &lt;/a&gt;
  Collaboration
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#collaboration-or-cloud-backup"&gt;
  &lt;/a&gt;
  Collaboration (or cloud backup)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a-el7vmC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9izaxoz4ibechdeucxgm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a-el7vmC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9izaxoz4ibechdeucxgm.png" alt="GIT Collaboration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosting-services"&gt;
  &lt;/a&gt;
  Hosting services
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/"&gt;https://github.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bitbucket.org/"&gt;https://bitbucket.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://about.gitlab.com/"&gt;https://about.gitlab.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://azure.microsoft.com/"&gt;https://azure.microsoft.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#collaboration-commands"&gt;
  &lt;/a&gt;
  Collaboration Commands
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone // Download a repository to your PC
git fetch // Download the latest content from the server
git pull // Download the latest content from the server and merge it with your local content
git push // Upload your content to the server
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/en/articles/github-glossary"&gt;https://help.github.com/en/articles/github-glossary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.github.com/training-kit/"&gt;https://github.github.com/training-kit/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rogerdudler.github.io/git-guide/"&gt;http://rogerdudler.github.io/git-guide/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.atlassian.com/git/tutorials/setting-up-a-repository"&gt;https://www.atlassian.com/git/tutorials/setting-up-a-repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://try.github.io/"&gt;https://try.github.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>git</category>
      <category>tutorial</category>
      <category>productivity</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What's new in React 18? </title>
      <author>Shruti Kapoor</author>
      <pubDate>Wed, 16 Jun 2021 18:44:46 +0000</pubDate>
      <link>https://dev.to/shrutikapoor08/what-s-new-in-react-18-1713</link>
      <guid>https://dev.to/shrutikapoor08/what-s-new-in-react-18-1713</guid>
      <description>&lt;p&gt;&lt;a href="https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html"&gt;React 18 alpha version was just announced&lt;/a&gt;. The theme of React 18 is to make the UI more performant by removing janky user experiences by introducing out of the box features and improvements powered by "concurrent rendering". React 18 introduces minimal breaking changes.&lt;/p&gt;

&lt;p&gt;Let's take a look at the major updates of React 18: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#root-api"&gt;
  &lt;/a&gt;
  Root API
&lt;/h2&gt;

&lt;p&gt;React 18 introduces Root API &lt;code&gt;ReactDOM.createRoot&lt;/code&gt;. Before React 18, we used &lt;code&gt;ReactDOM.render&lt;/code&gt; to render a component to the page. Going forward with React 18, we will use ReactDOM.createRoot to create a root, and then pass the root to the render function. The good news is that your current code with &lt;code&gt;ReactDOM.render&lt;/code&gt; will still work, however, it is strongly recommended to start transitioning to &lt;code&gt;createRoot&lt;/code&gt; as &lt;code&gt;render&lt;/code&gt; will be marked &lt;code&gt;deprecated&lt;/code&gt; starting React 18. The current &lt;code&gt;ReactDOM.render&lt;/code&gt; is only provided to ease the transition to React 18.&lt;/p&gt;

&lt;p&gt;React 17:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React 18:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// create a root&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//render app to root&lt;/span&gt;
&lt;span class="nx"&gt;root&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#automatic-batching-out-of-the-box-optout-available"&gt;
  &lt;/a&gt;
  Automatic batching ( Out of the box, opt-out available):
&lt;/h2&gt;

&lt;p&gt;Batching is the process of grouping multiple state updates into one to prevent multiple re-renders. Previously, React batched state updates that happened in a single event callback managed by React event system, however state updates that happened outside the event were not batched. &lt;/p&gt;

&lt;p&gt;However, with automatic batching, all updates, even within promises, setTimeouts, will be batched. Check this example -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;=== click ===&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Does not re-render yet&lt;/span&gt;
    &lt;span class="nx"&gt;setFlag&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Does not re-render yet&lt;/span&gt;
    &lt;span class="c1"&gt;// React will only re-render once at the end (that's batching!)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;timeoutCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Previously, batching didn't work inside timeouts, fetch, promises.&lt;/span&gt;
      &lt;span class="c1"&gt;// These two setStates causesd re-render in React 17.&lt;/span&gt;
      &lt;span class="c1"&gt;// With React 18, these are now batched.&lt;/span&gt;
      &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;setFlag&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeoutCallback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/romantic-pare-efklq?file=/src/index.js:192-695"&gt;See codesanbox link for full example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Opt-out:&lt;/strong&gt; You can opt-out of automatic batching by using &lt;code&gt;flushSync&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starttransition-optin"&gt;
  &lt;/a&gt;
  startTransition (opt-in)
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;startTransition&lt;/code&gt; can be used to mark UI updates that do not need urgent resources for updating. For eg: when typing in a typeahead field, there are two things happening - a blinking cursor that shows visual feedback of your content being typed, and a search functionality in the background that searches for the data that is typed. &lt;/p&gt;

&lt;p&gt;Showing a visual feedback to the user is important and therefore urgent. Searching is not so urgent, and hence can be marked as non-urgent. This is where &lt;code&gt;startTransition&lt;/code&gt; comes into play. &lt;/p&gt;

&lt;p&gt;By marking non-urgent UI updates as "transitions" , React will know which updates to prioritize making it easier to optimize rendering and get rid of stale rendering. Updates marked in non-urgent &lt;code&gt;startTransition&lt;/code&gt; can be interrupted by urgent updates such as clicks or key presses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;startTransition&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="c1"&gt;// Urgent: Show what was typed&lt;/span&gt;
&lt;span class="nx"&gt;setInputValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Mark any state updates inside as transitions&lt;/span&gt;
&lt;span class="nx"&gt;startTransition&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Transition: Show the results&lt;/span&gt;
  &lt;span class="nx"&gt;setSearchQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;How is it different from debouncing or setTimeout?&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;startTransition executes immediately unlike setTimeout. setTimeout has a guaranteed delay, whereas startTransition's delay depends on the speed of the device, and other urgent renders.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;startTransition updates can be interrupted unlike setTimeout and won't freeze the page. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;React can track the pending state for you when marked with startTransition.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-move-to-react-18"&gt;
  &lt;/a&gt;
  How to move to React 18?
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;alpha&lt;/span&gt; &lt;span class="nx"&gt;react&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;alpha&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Change React.render to React.createRoot&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createRoot&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;a href="https://github.com/reactwg/react-18/discussions/categories/announcement"&gt;Checkout the full list of updates on React Working Group's GitHub&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://tinyletter.com/shrutikapoor"&gt;Get articles like this in your inbox&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Creating layouts with CSS grids</title>
      <author>Juhana Jauhiainen</author>
      <pubDate>Wed, 16 Jun 2021 18:44:36 +0000</pubDate>
      <link>https://dev.to/juhanakristian/creating-layouts-with-css-grids-1hpa</link>
      <guid>https://dev.to/juhanakristian/creating-layouts-with-css-grids-1hpa</guid>
      <description>&lt;p&gt;&lt;strong&gt;Grids are a powerfull feature of CSS but they can be a little overwhelming at first. There are rows, columns, areas, lines, and multiple syntaxes for defining layouts. How do these concepts fit together and how to use them effectively?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this article, we'll go through some basic concepts of CSS grids and learn how we can use grids to build layouts. My goal is to shed some light on how to define grid areas grid lines, which I found somewhat confusing when learning CSS grids.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basics-and-terminology"&gt;
  &lt;/a&gt;
  Basics and terminology
&lt;/h2&gt;

&lt;p&gt;A CSS grid is a &lt;code&gt;display&lt;/code&gt; type that sets the layout of its children according to the grid &lt;a href="https://www.w3.org/TR/css-grid-1/"&gt;specification.&lt;/a&gt;&lt;br&gt;
Grids are built of &lt;strong&gt;columns&lt;/strong&gt;, &lt;strong&gt;rows&lt;/strong&gt;, &lt;strong&gt;areas&lt;/strong&gt;, &lt;strong&gt;cells&lt;/strong&gt;, &lt;strong&gt;lines&lt;/strong&gt;, &lt;strong&gt;tracks&lt;/strong&gt;, and &lt;strong&gt;gutters&lt;/strong&gt;. To understand how these relate to each other, let's go through some definitions. So, bear with me 🐻&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Columns&lt;/strong&gt; are vertical tracks and contain the space between two vertical &lt;strong&gt;grid lines&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rows&lt;/strong&gt; then are horizontal tracks and contain the space between two horizontal &lt;strong&gt;grid lines&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What are &lt;strong&gt;tracks&lt;/strong&gt; and &lt;strong&gt;grid lines&lt;/strong&gt; then? Well, &lt;strong&gt;tracks&lt;/strong&gt; and &lt;strong&gt;lines&lt;/strong&gt; are how we specify our grid. A &lt;strong&gt;track&lt;/strong&gt; is a space between two parallel lines and &lt;strong&gt;lines&lt;/strong&gt; are created when we define the tracks for our grid. Tracks can be defined using &lt;code&gt;grid-template-columns&lt;/code&gt;, &lt;code&gt;grid-template-rows&lt;/code&gt;, and &lt;code&gt;grid-template-areas&lt;/code&gt; CSS rules.&lt;/p&gt;

&lt;p&gt;The smallest element in a CSS grid is a &lt;strong&gt;cell&lt;/strong&gt;. It's an area defined by grid lines in all directions with no lines running through it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gutters&lt;/strong&gt; are spacing between tracks and are defined using &lt;code&gt;column-gap&lt;/code&gt;, &lt;code&gt;row-gap&lt;/code&gt;, and &lt;code&gt;gap&lt;/code&gt; CSS rules.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/interactive-grid-example-pfxmo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The grid in the example above is defined with the following CSS declarations&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;grid-template-columns&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;first-col-start&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;first-col-end&lt;/span&gt; &lt;span class="nt"&gt;second-col-start&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;second-col-end&lt;/span&gt; &lt;span class="nt"&gt;third-col-start&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;third-col-end&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="nt"&gt;grid-template-rows&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;first-row-start&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;first-row-end&lt;/span&gt; &lt;span class="nt"&gt;second-row-start&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;second-row-end&lt;/span&gt; &lt;span class="nt"&gt;third-row-start&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;fr&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;third-row-end&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;grid-template-columns&lt;/code&gt; property defines our grid columns. The syntax for &lt;code&gt;grid-template-colums&lt;/code&gt; has &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns#syntax"&gt;multiple ways to define the columns&lt;/a&gt;. In it's simplest form, &lt;code&gt;grid-template-colums&lt;/code&gt; takes a list of sizes to use as column widths. For example, &lt;code&gt;grid-template-colums: 1fr 1fr 1fr&lt;/code&gt; would create a grid with 3 columns of equal width. &lt;code&gt;fr&lt;/code&gt; is a special grid unit that means a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout#the_fr_unit"&gt;fraction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In our example, we are using a &lt;code&gt;grid-template-columns&lt;/code&gt; syntax which has &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Layout_using_Named_Grid_Lines#naming_lines_when_defining_a_grid"&gt;named grid lines&lt;/a&gt; using the bracket &lt;code&gt;[line-name]&lt;/code&gt; syntax. Notice that some of the lines we've defined have &lt;strong&gt;two&lt;/strong&gt; names, such as &lt;code&gt;[first-col-end second-col-start]&lt;/code&gt;. Giving two names will make it easier to define our grid areas later on because of a special feature of CSS grids called &lt;strong&gt;implicit grid areas&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#implicit-grid-areas"&gt;
  &lt;/a&gt;
  Implicit grid areas
&lt;/h3&gt;

&lt;p&gt;While you can name your grid lines with any &lt;a href="https://drafts.csswg.org/css-values-4/#custom-idents"&gt;name&lt;/a&gt;, I've chosen to end them with &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt;. This may seem like a minor detail, but it unlocks 🔓 a "hidden" feature. Grid area names will now be &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Layout_using_Named_Grid_Lines#implicit_grid_areas_from_named_lines"&gt;created for us&lt;/a&gt;. So using grid line names &lt;code&gt;first-col-start&lt;/code&gt; and &lt;code&gt;first-col-end&lt;/code&gt; on adjacent lines will create a grid area named &lt;code&gt;first-col&lt;/code&gt; 🥳 We can now use &lt;code&gt;first-col&lt;/code&gt; when we are defining grid areas with &lt;code&gt;grid-column&lt;/code&gt; or &lt;code&gt;grid-area&lt;/code&gt; properties.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#side-panel-layout-with-named-grid-lines"&gt;
  &lt;/a&gt;
  Side panel layout with named grid lines
&lt;/h2&gt;

&lt;p&gt;Next, let's take a look at a layout example with a navigation header, content area, sider panel, and a footer. We will define our &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Grid_Lines"&gt;grid lines&lt;/a&gt; by name and using those names when we define the areas of the different layout components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xrOy4bW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6o5m9q55i26dknlxs18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xrOy4bW5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v6o5m9q55i26dknlxs18.png" alt="Side bar nav example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The thing to note is that the browser will automatically create &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Grid_Template_Areas"&gt;grid areas&lt;/a&gt; for us when we define grid lines. Vice versa, if we define our grid using &lt;code&gt;grid-template-areas&lt;/code&gt;, we will automatically get named grid lines generated for us.&lt;/p&gt;

&lt;p&gt;To get started, here's the HTML structure we will be working with.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"ie=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Side panel layout&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;nav&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
      main
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;aside&amp;gt;&lt;/span&gt;
      side
    &lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
      footer
    &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will set the &lt;code&gt;html&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; height to 100% with no &lt;code&gt;padding&lt;/code&gt; or &lt;code&gt;margin&lt;/code&gt; so the grid will have the full size of the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll add &lt;code&gt;display: grid&lt;/code&gt; to the body and define our column &lt;strong&gt;grid lines&lt;/strong&gt; using the &lt;code&gt;grid-template-columns&lt;/code&gt; CSS rule. This declares two columns that are defined by four named grid lines: &lt;code&gt;side-start&lt;/code&gt;, &lt;code&gt;side-end&lt;/code&gt;, &lt;code&gt;main-start&lt;/code&gt;, and &lt;code&gt;main-end&lt;/code&gt;. The first column will be &lt;code&gt;200px&lt;/code&gt; wide, while the other column has a width of &lt;code&gt;auto&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* ... */&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;side-start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;side-end&lt;/span&gt; &lt;span class="n"&gt;main-start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;main-end&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nav-start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nav-end&lt;/span&gt; &lt;span class="n"&gt;content-start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;content-end&lt;/span&gt; &lt;span class="n"&gt;footer-start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;80px&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;footer-end&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we use &lt;code&gt;grid-template-colums&lt;/code&gt; and &lt;code&gt;grid-template-rows&lt;/code&gt; with grid line names like this, named columns and rows will be automatically generated for us 🥳. In this case, the grid we will get the columns &lt;code&gt;start&lt;/code&gt;, &lt;code&gt;side&lt;/code&gt;, and &lt;code&gt;main&lt;/code&gt; and the rows &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, and &lt;code&gt;footer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we didn't care about the column and row names, we could just write &lt;code&gt;grid-template-columns: 200px auto&lt;/code&gt; and &lt;code&gt;grid-template-rows: 50px auto 80px&lt;/code&gt; to define the same layout.&lt;/p&gt;

&lt;p&gt;Next we will define how our HTML elements will fit into the columns and rows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;nav&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;side&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we have the generated row and column names, declaring the nav-element position and size can be done with &lt;code&gt;grid-row&lt;/code&gt; and &lt;code&gt;grid-column&lt;/code&gt; declarations. We are setting &lt;code&gt;grid-column&lt;/code&gt; to &lt;code&gt;side / main&lt;/code&gt; which tells the browser to extend the nav element from the start of the &lt;code&gt;side&lt;/code&gt; column to the end of the &lt;code&gt;main&lt;/code&gt; column.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Defining the position and size of the main-element can be done using a single &lt;code&gt;grid-area&lt;/code&gt; declaration. &lt;code&gt;grid-area&lt;/code&gt; is a shorthand for setting &lt;code&gt;grid-row-start&lt;/code&gt;, &lt;code&gt;grid-column-start&lt;/code&gt;, &lt;code&gt;grid-row-end&lt;/code&gt;, and &lt;code&gt;grid-column-end&lt;/code&gt;. Because we are setting only two values (content and main) this is the equivalent of setting the row and column ending to the same values as start.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could also use the &lt;strong&gt;grid lines&lt;/strong&gt; to define these values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content-end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;main-start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;main-end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the sidebar we will use &lt;code&gt;grid-area&lt;/code&gt; and &lt;code&gt;grid-row-end&lt;/code&gt; to define the area.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;aside&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;side&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;grid-area&lt;/code&gt; declaration is similar to the one we used before. With the &lt;code&gt;grid-row-end&lt;/code&gt; declaration, we make the sidebar extend to the bottom of the screen to the end of the &lt;strong&gt;footer&lt;/strong&gt; row. This is cool, because it shows how powerful CSS grids can be 😎&lt;/p&gt;

&lt;p&gt;Lastly, we define the footer CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;footer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we're using the &lt;code&gt;grid-row&lt;/code&gt; and &lt;code&gt;grid-column&lt;/code&gt; declarations. This is the equivalent of writing &lt;code&gt;grid-area: footer / main&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we have all the CSS we need for our layout 🥳 If you want to check out the full HTML/CSS code, you can check the out at &lt;a href="https://codesandbox.io/s/damp-smoke-7yfpy?file=/side-panel.html"&gt;codesandbox.io&lt;/a&gt;. There you'll also find two other layout examples made using CSS grids.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/amp-smoke-7yfpy?initialpath=side-panel.html"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theres-more-to-it"&gt;
  &lt;/a&gt;
  There's more to it
&lt;/h2&gt;

&lt;p&gt;I hope this article has shed some light on creating layouts using CSS grids. There are, however many features we didn't cover. I've compiled here a few resources which you might find interesting if you want to dig deeper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"&gt;MDN on CSS Grid Layout&lt;/a&gt;&lt;br&gt;
&lt;a href="https://css-tricks.com/snippets/css/complete-guide-grid/"&gt;CSS-Tricks - A complete guide to grid&lt;/a&gt;&lt;br&gt;
&lt;a href="https://egghead.io/courses/build-modern-layouts-with-css-grid-d3f5"&gt;Build Modern Layouts using CSS Grid - Hiroko Nishimura&lt;/a&gt;&lt;br&gt;
&lt;a href="https://egghead.io/courses/build-complex-layouts-with-css-grid-layout"&gt;Build Complex Layouts with CSS Grid Layout - Rory Smith&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@sharonmccutcheon?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Sharon McCutcheon&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/grid?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>grid</category>
      <category>layout</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
