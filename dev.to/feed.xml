<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Technical interviews devs enjoy</title>
      <author>Mage</author>
      <pubDate>Tue, 26 Oct 2021 01:57:28 +0000</pubDate>
      <link>https://dev.to/mage_ai/technical-interviews-devs-enjoy-2828</link>
      <guid>https://dev.to/mage_ai/technical-interviews-devs-enjoy-2828</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Structure your interview to emulate what it’s like to work together on your team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;How technical interviews are conducted today&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why developers don’t enjoy the current process&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why the current process isn’t great for companies&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mage’s technical interview process&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why developers enjoy this process&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Why this process is great for Mage&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Conclusion&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-technical-interviews-are-conducted-today"&gt;
  &lt;/a&gt;
  How technical interviews are conducted today
&lt;/h2&gt;

&lt;p&gt;Most technical interviews today involve a few coding challenges. These coding challenges can be take home assignments, on-site interviews, or coding in real-time via screen sharing or services like &lt;a href="https://www.hackerrank.com/"&gt;HackerRank&lt;/a&gt;. These coding challenges usually involve building an algorithm that solves an esoteric problem. The purpose of these types of challenges is to test the individual’s logical ability to understand a problem and code a general solution that solves it.&lt;/p&gt;

&lt;p&gt;In addition to coding challenges, technical interviews can include architecture design. This interview tests the ability of the developer to design something from a technical perspective. For example, design a key-value store like &lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-developers-dont-enjoy-the-current-process"&gt;
  &lt;/a&gt;
  Why developers don’t enjoy the current process
&lt;/h2&gt;

&lt;p&gt;Take home coding challenges require the developer to spend their own personal time taking a test. Developers don’t have time for that. It also tells them that the company is too busy to interview them in real-time. This isn’t a great experience for the developer.&lt;/p&gt;

&lt;p&gt;Ask any developer what book they read when preparing for interviews and most will tell you &lt;a href="https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/0984782850"&gt;Cracking the Coding Interview&lt;/a&gt;. Why is that? It’s because algorithmic coding challenges feel like taking a standardized test like the SAT or ACT. Developers dread the technical interview process because it has been reduced to memorization instead of creativity.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ux4p9BC4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n40o7t9u7ky9zuwu3i78.gif" alt="Image description"&gt;&lt;em&gt;(Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#why-the-current-process-isnt-great-for-companies"&gt;
  &lt;/a&gt;
  Why the current process isn’t great for companies
&lt;/h2&gt;

&lt;p&gt;Testing developers on how well they can memorize algorithms isn’t a strong indicator of whether or not they will be able to build end-to-end features. There can be great test takers that don’t adapt well to fast moving environments.&lt;/p&gt;

&lt;p&gt;Reviewing a take home coding challenge doesn’t reveal much about how well the developer can collaborate with others and their thought process when problem solving. There are developers who can build their own apps very well, but may struggle building things in tandem with other developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mages-technical-interview-process"&gt;
  &lt;/a&gt;
  Mage’s technical interview process
&lt;/h2&gt;

&lt;p&gt;If the position is for an intern (L2), junior developer (L2), or new graduate level (L3), there are 2 parts. The 1st part is a coding challenge where the developer is asked to define a class with multiple methods. The problem is simple, but the devil is in the details. The 2nd part of the technical interview is for us to watch the candidate build a small portion of an existing feature. What they write doesn’t need to be complete or production ready.&lt;/p&gt;

&lt;p&gt;If the position is for a level with 2 or more years of work experience (L4 and above), then there are 2 parts. The 1st part involves a technical design. The candidate will be asked to walk us through how they would design an existing feature from a technical perspective. In the 2nd part of the interview, the candidate will build a small portion of their technical design. What they write doesn’t need to be complete or production ready.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-developers-enjoy-this-process"&gt;
  &lt;/a&gt;
  Why developers enjoy this process
&lt;/h2&gt;

&lt;p&gt;Unlike taking a test that tests your memorization, the ideal technical interview tests the candidate’s creativity. There is no right or wrong answer to the coding challenges, there is only a sliding scale of effort and innovation. This interview process removes the necessity to “study” for it and allows the developer to do what they do best: code and build things. This creates a more natural environment where the candidate can express their thought process and how they approach building features. There is no studying, there is just doing.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H6zkiNkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kbvj55w75k4acy0h2du.gif" alt="Image description"&gt;&lt;em&gt;Just code and build things. (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#why-this-process-is-great-for-mage"&gt;
  &lt;/a&gt;
  Why this process is great for Mage
&lt;/h2&gt;

&lt;p&gt;The 1st coding challenge of building a class with methods is something that Mage developers do regularly day-to-day. Most people can finish a majority of this challenge. However, the assessment isn’t whether they can finish but how they defined the methods and whether they applied basic software engineering practices while doing it.&lt;/p&gt;

&lt;p&gt;The 2nd coding challenge of building a feature is something Mage developers do everyday. Watching the candidate build a small portion of a feature reveals how they would operate as a team member sitting next to you on any given day.&lt;/p&gt;

&lt;p&gt;The technical design challenge is something Mage developers do with their team before any coding starts on a new feature. Having the candidate walk us through their plan reveals how they share ideas with other people, how they ask questions, how they collect feedback, and how creative their problem solving process is.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RYKnN_Wg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q5a7lvi5z8vrzepzbtje.gif" alt="Image description"&gt;&lt;em&gt;(Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The goal of this technical interview process is to emulate a day in the life of a developer at Mage. Crafting your interview process to best emulate a typical work day at your company can make the interview process for the candidate both enjoyable and gives them a better sense of what they’re getting into. In addition, it helps you assess whether or not the candidate can perform their responsibilities under the same conditions as reality.&lt;/p&gt;

</description>
      <category>technicalinterview</category>
      <category>developer</category>
      <category>interview</category>
      <category>hiring</category>
    </item>
    <item>
      <title>How do Websites Work?</title>
      <author>Josh</author>
      <pubDate>Tue, 26 Oct 2021 01:16:15 +0000</pubDate>
      <link>https://dev.to/jryther/how-do-websites-work-326p</link>
      <guid>https://dev.to/jryther/how-do-websites-work-326p</guid>
      <description>&lt;p&gt;Last week I went over the basics of the hardware and protocols that allow the internet to function.  In this second part of the series I am going to deep dive into the steps that go into displaying a website so that we can better understand the protocols in place.  The steps are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;DNS Query&lt;/li&gt;
&lt;li&gt;TCP Handshake&lt;/li&gt;
&lt;li&gt;TLS Handshake&lt;/li&gt;
&lt;li&gt;HTTP Request&lt;/li&gt;
&lt;li&gt;HTTP Response&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A DNS query is your computers way of taking a domain name and finding the correct IP address of the site you are trying to visit.  A request is sent to a DNS resolver chosen by the user which then queries the IP address from its DNS servers and returns it to the client that sent the request.  The default DNS resolver is usually your internet service provider.  The URL is broken up into different servers such as a  Top Level Domain (TLD) server which would contain directories for each .com extension.  This example is  known as a recursive DNS query whereas a non-recursive query follows the same procedure but the DNS client (user’s computer) will take on the responsibilities of the resolver and directly ask the servers itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---aa_UuJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4mruro8brdih3g1efrb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---aa_UuJR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4mruro8brdih3g1efrb.png" alt="DNS Query Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A TCP handshake is a way of establishing a connection with the host destination.  It is a three-way handshake used to synchronize and acknowledge the packet transmission before the process starts.  The client initiates the transfer by sending a a Synchronize message used to establish a connection and advise of the sequence numbers used to keep track of the packets being sent over.  The host server then responds back with an acknowledge message.  The last message is another acknowledge message sent back to the server and then the connection is established.  After the connection is completed a FIN message is sent to the server to disconnect the session.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PCKA5l9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqluyuy5f0lhbny0k4u4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCKA5l9m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hqluyuy5f0lhbny0k4u4.png" alt="TCP Handshake Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step in the process is the TLS handshake.  TLS is an encryption protocol for internet communication.  It is the evolution of the previous protocol used, SSL.  The steps of the handshake are to first specify which version of TLS will be used.  Next is to establish the cipher suites utilized.  Third,  authentication of the server through the server’s public key and the SSL certificate authority’s digital signature.  Lastly, generate session keys to use symmetric encryption for the duration of the connection.  This is a generalized version of the exchange which is broken up into more steps and is dependent on the key exchange algorithm and cipher suites supported.  See this &lt;a href="https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/"&gt;link&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;The last two steps to view a web page are HTTP requests and responses.  HTTP is a protocol used to request and receive information from a web server.  A request is sent with a method it wishes the server to perform and relevant information needed in order to execute that action.  Common request methods are GET, POST, and UPDATE.  A GET method asks the server for the information at the provided URL  in the header.  Your browser will send a GET method in order to get the HTML and CSS for a website to render.  Once the request is received by the server it will send a response back as a status code.  Status code 200 means the request is OK and the server starts sending over packets of data.  Click &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"&gt;here&lt;/a&gt; for a list of request methods and &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;here&lt;/a&gt; for status codes.&lt;/p&gt;

&lt;p&gt;What I have provided is a high overview of how an internet web page is rendered.  Each section has a lot more you can spend time researching if you choose to do so.  Below I have provided links to the resources I used to write the post.  I hope you learned something and if you did please feel free to like the post or leave a comment below.  Have a great week and happy programming!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- DNS Query:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.cloudns.net/wiki/article/254/"&gt;https://www.cloudns.net/wiki/article/254/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallbusiness.chron.com/primary-secondary-dns-65413.html"&gt;https://smallbusiness.chron.com/primary-secondary-dns-65413.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smallbusiness.chron.com/domain-name-system-dns-resolvers-work-76639.html"&gt;https://smallbusiness.chron.com/domain-name-system-dns-resolvers-work-76639.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;- TCP Handshake&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.guru99.com/tcp-3-way-handshake.html"&gt;https://www.guru99.com/tcp-3-way-handshake.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;- TLS Handshake&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/"&gt;https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;- HTTP Request/Response:&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status"&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Status&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>todayilearned</category>
      <category>html</category>
    </item>
    <item>
      <title>How to identify items in an Amazon DynamoDB table that haven't been accessed for a time and move them to Amazon S3.</title>
      <author>Kirk Kirkconnell</author>
      <pubDate>Mon, 25 Oct 2021 23:49:55 +0000</pubDate>
      <link>https://dev.to/nosqlknowhow/how-to-identify-items-in-an-amazon-dynamodb-table-that-havent-been-accessed-for-a-time-and-move-them-to-amazon-s3-fam</link>
      <guid>https://dev.to/nosqlknowhow/how-to-identify-items-in-an-amazon-dynamodb-table-that-havent-been-accessed-for-a-time-and-move-them-to-amazon-s3-fam</guid>
      <description>&lt;p&gt;Question: How to identify items in an Amazon DynamoDB table that haven't been accessed for a time and move them to Amazon S3.&lt;/p&gt;

&lt;p&gt;Answer: There is no built in way for DynamoDB to know which items have or have not been accessed lately. More than likely, your best option is to do the following:&lt;/p&gt;

&lt;p&gt;Prerequisites:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Have TTL enabled on the table and a TTL attribute on every item in the table. If not, you will have to do that first.&lt;/li&gt;
&lt;li&gt;If you do not already update TTL attributes on items when they are accessed, you must change your application code to update the TTL attribute on an item when you access that item. Otherwise none of this will work.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that in place, enable DynamoDB Streams. Then create a Lambda function that &lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/time-to-live-ttl-streams.html"&gt;watches DDB Streams specifically for TTL Deletes&lt;/a&gt; which reads from the table's stream, then write the expired items to S3. &lt;a href="https://aws.amazon.com/blogs/database/automatically-archive-items-to-s3-using-dynamodb-time-to-live-with-aws-lambda-and-amazon-kinesis-firehose/"&gt;Here is an older blog post which should still be mostly relevant for this purpose&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Avoid Duplication! GitHub Actions Reusable Workflows</title>
      <author>Davide 'CoderDave' Benvegnù</author>
      <pubDate>Mon, 25 Oct 2021 23:42:59 +0000</pubDate>
      <link>https://dev.to/n3wt0n/avoid-duplication-github-actions-reusable-workflows-3ae8</link>
      <guid>https://dev.to/n3wt0n/avoid-duplication-github-actions-reusable-workflows-3ae8</guid>
      <description>&lt;p&gt;Thanks to the new GitHub Actions feature called "&lt;strong&gt;&lt;em&gt;Reusable Workflows&lt;/em&gt;&lt;/strong&gt;" you can now reference an existing workflow with a single line of configuration rather than copying and pasting from one workflow to another.&lt;/p&gt;

&lt;p&gt;Basically &lt;strong&gt;GitHub Actions Templates on steroids&lt;/strong&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-reusable-workflows"&gt;
  &lt;/a&gt;
  What Are Reusable Workflows
&lt;/h3&gt;

&lt;p&gt;So, Reusable Workflows in GitHub Actions. Thanks to this feature you can now reference an entire Actions workflow in another workflow, like if it were a single action.&lt;/p&gt;

&lt;p&gt;This new feature builds on top of the Composite Actions introduced a while back. If you don't know what Composite Actions are, check &lt;a href="https://dev.to/n3wt0n/github-composite-actions-nest-actions-within-actions-3e5l"&gt;this post&lt;/a&gt; or &lt;a href="https://youtu.be/4lH_7b5lmjo"&gt;this video&lt;/a&gt;, but in short they are &lt;strong&gt;one or more steps packaged together&lt;/strong&gt; which can be then referenced in an Actions workflows by a single line.&lt;/p&gt;

&lt;p&gt;Reusable Workflows extend this concept, allowing you to &lt;strong&gt;reference an entire workflow in another one&lt;/strong&gt;. If Composite Actions can be thought of as Templates, Reusable Workflows is on another new level.&lt;/p&gt;

&lt;p&gt;Right, let's see how to create a reusable workflow.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation and demo&lt;/strong&gt;, which to be fair is much &lt;strong&gt;&lt;em&gt;more complete&lt;/em&gt;&lt;/strong&gt; than this post.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lRypYtmbKMs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/lRypYtmbKMs"&gt;Link to the video: https://youtu.be/lRypYtmbKMs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-reusable-workflow"&gt;
  &lt;/a&gt;
  Create a Reusable Workflow
&lt;/h3&gt;

&lt;p&gt;Reusable workflows are &lt;em&gt;normal&lt;/em&gt; Actions YAML files, and as such they have to reside in the &lt;code&gt;.github/workflows&lt;/code&gt; folder in the root of a repo.&lt;/p&gt;

&lt;p&gt;The only particular thing they have to have is a &lt;em&gt;special trigger&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The workflow file can also have different triggers, but to make it reusable one of those must be the &lt;code&gt;workflow_call&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also &lt;strong&gt;pass data&lt;/strong&gt; to a reusable workflow, via the trigger &lt;strong&gt;parameters&lt;/strong&gt; which can be of 2 types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;inputs&lt;/li&gt;
&lt;li&gt;secrets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;inputs&lt;/strong&gt; are used to pass &lt;em&gt;normal&lt;/em&gt; data (aka not sensitive information):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the example above, where I want to use a reusable workflow as template to build and push a Docker Image to a registry, we can see that we have 2 inputs of type &lt;code&gt;string&lt;/code&gt;, with one required and one not required.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: if a required input has not been passed to the reusable workflow, it will fail &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Other available types are &lt;code&gt;boolean&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;secrets&lt;/strong&gt;, instead, as the name says, are used to pass secret values to the workflow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;registry_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;registry_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case you can see that there is no &lt;code&gt;type&lt;/code&gt;, every secret is treated as string.&lt;/p&gt;

&lt;p&gt;Finally, you can use those parameters in your workflow by using &lt;code&gt;{{inputs.NAME_OF_THE_INPUT}}&lt;/code&gt; and &lt;code&gt;{{secrets.NAME_OF_THE_SECRET}}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, in the abovementioned example where I want to use a reusable workflow to build and push a Docker image to a registry, the reusable workflow will look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create and Publish Docker Image&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_call&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;registry_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;registry_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;      
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup BuildX&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/setup-buildx-action@v1&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Login to the Registry&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/login-action@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.registry_username}}&lt;/span&gt;
          &lt;span class="na"&gt;password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.registry_password}}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Set the tag&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;if [ -z "${{inputs.tag}}" ]&lt;/span&gt;
          &lt;span class="s"&gt;then&lt;/span&gt;
            &lt;span class="s"&gt;echo "final_tag=latest" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;else&lt;/span&gt;
            &lt;span class="s"&gt;echo "final_tag=${{inputs.tag}}" &amp;gt;&amp;gt; $GITHUB_ENV&lt;/span&gt;
          &lt;span class="s"&gt;fi&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build and Push the Image&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;docker/build-push-action@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
          &lt;span class="na"&gt;push&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
          &lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.registry_username}}/${{inputs.image_name}}:${{env.final_tag}}&lt;/span&gt;


  &lt;span class="na"&gt;do-something-else&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "Hello"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also note that &lt;strong&gt;reusable workflows can have multiple jobs&lt;/strong&gt;, as you can see in the example (where the &lt;code&gt;do-something-else&lt;/code&gt; does nothing, but it is to show it off)&lt;/p&gt;

&lt;p&gt;Easy right? One thing to keep in mind is that if the reusable workflow has other triggers apart from the &lt;code&gt;workflow_call&lt;/code&gt; you may want to make sure it doesn't accidentally run multiple times.&lt;/p&gt;

&lt;p&gt;Now that we have our reusable workflow, let's see how to use it in another workflow. And stay with me until the end because I will talk about the &lt;strong&gt;limitations&lt;/strong&gt; of reusable workflows and when they can be useful.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-a-reusable-workflow"&gt;
  &lt;/a&gt;
  Using a Reusable Workflow
&lt;/h3&gt;

&lt;p&gt;Now that we have our reusable workflow ready, it is time to use it in another workflow.&lt;/p&gt;

&lt;p&gt;To do so, just &lt;strong&gt;add it directly in a job&lt;/strong&gt; of your workflow with this syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="na"&gt;job_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;USER_OR_ORG_NAME/REPO_NAME/.github/workflows/REUSABLE_WORKFLOW_FILE.yml@TAG_OR_BRANCH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's analyse this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You create a job with no steps&lt;/li&gt;
&lt;li&gt;You don't add a &lt;code&gt;runs-on&lt;/code&gt; clause, because it is contained in the reusable workflow&lt;/li&gt;
&lt;li&gt;You reference it as &lt;code&gt;uses&lt;/code&gt; passing:&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;the name of the user or organization that owns the repo where the reusable workflow is stored&lt;/li&gt;
&lt;li&gt;the repo name&lt;/li&gt;
&lt;li&gt;the base folder&lt;/li&gt;
&lt;li&gt;the name of the reusable workflow yaml file&lt;/li&gt;
&lt;li&gt;and the tag or the branch where the file is store (if you haven't created a tag/version for it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In my real example above, this is how I'd reference it in a job called &lt;em&gt;docker&lt;/em&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="na"&gt;docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;n3wt0n/ReusableWorkflow/.github/workflows/buildAndPublishDockerImage.yml@main&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now of course we have to pass the parameters. Let's start with the &lt;strong&gt;inputs&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-awesome-app&lt;/span&gt;
      &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$GITHUB_RUN_NUMBER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we just use the &lt;code&gt;with&lt;/code&gt; clause, and we specify the name of the inputs.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Needless to say, the names have to be the same as the ones in the reusable workflow definition.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the secrets, instead, we use a new &lt;code&gt;secrets&lt;/code&gt; section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;registry_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.REGISTRY_USERNAME}}&lt;/span&gt;
      &lt;span class="na"&gt;registry_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.REGISTRY_PASSWORD}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is it. So the complete example would look like this (you can find it &lt;a href="https://github.com/n3wt0n/ActionsTest/blob/main/.github/workflows/reusableWorkflowsUser.yml"&gt;here&lt;/a&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# This is a basic workflow to showcase the use of Reusable Workflows&lt;/span&gt;

&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Reusable Workflow user&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;do-it&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run a one-line script&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo Hello, world!&lt;/span&gt;

  &lt;span class="na"&gt;docker&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;n3wt0n/ReusableWorkflow/.github/workflows/buildAndPublishDockerImage.yml@main&lt;/span&gt;
    &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;image_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my-awesome-app&lt;/span&gt;
      &lt;span class="na"&gt;tag&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;$GITHUB_RUN_NUMBER&lt;/span&gt;
    &lt;span class="na"&gt;secrets&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;registry_username&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.REGISTRY_USERNAME}}&lt;/span&gt;
      &lt;span class="na"&gt;registry_password&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{secrets.REGISTRY_PASSWORD}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once again, as you can see the caller workflow can have multiple jobs as well.&lt;/p&gt;

&lt;p&gt;If we run the workflow, this is what we get:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i5tThZBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gklfn5vy2mklzhhcjbs1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i5tThZBo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gklfn5vy2mklzhhcjbs1.png" alt="Workflow run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see in the image that we have the logs for the &lt;code&gt;do-it&lt;/code&gt; job that is present in the caller, and then for both the jobs in the reusable workflow.&lt;br&gt;
Since those 2 jobs &lt;em&gt;are run&lt;/em&gt; within the &lt;code&gt;docker&lt;/code&gt; job in the caller workflow, they are referenced in the log as &lt;code&gt;docker / build&lt;/code&gt; and &lt;code&gt;docker /do-something-else&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But apart from that, the logs are complete:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KwLbl8SS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onltrx96m0d3fxlpffe4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KwLbl8SS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/onltrx96m0d3fxlpffe4.png" alt="Logs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We get &lt;strong&gt;the full details&lt;/strong&gt; of everything that has happened.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#limitations-and-caveats"&gt;
  &lt;/a&gt;
  Limitations and Caveats
&lt;/h3&gt;

&lt;p&gt;So, let's start with a few &lt;strong&gt;notes&lt;/strong&gt;. First, remember that the Reusable Workflows are currently in &lt;strong&gt;beta&lt;/strong&gt;, so things might change by the time they go GA.&lt;/p&gt;

&lt;p&gt;Second, for a workflow to be able to use it, a reusable workflow must be stored in the same repo as the call, or in a public repo, or yet in an internal repo with settings that allow it to be accessed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z4B4_QtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hw795lt2gzplxe64bfrp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z4B4_QtA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hw795lt2gzplxe64bfrp.png" alt="Repo access settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's talk now about &lt;strong&gt;limitations&lt;/strong&gt;. As direct result of what we have just said, reusable workflows stored in a private repository can be used only by other workflows in the same repo.&lt;/p&gt;

&lt;p&gt;Also, Reusable workflows &lt;strong&gt;cannot call and consume other Reusable workflows&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, and this is big one you need to remember, environment variables set at workflow level in the caller workflow are &lt;strong&gt;not passed to the reusable workflow&lt;/strong&gt;. So if you need use any of those variables in the reusable workflow, you'll have to pass them to the workflow via the parameters as I've shown above.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Reusing workflows avoids duplication&lt;/strong&gt;. This makes workflows easier to maintain and allows you to create new workflows more quickly by building on the work of others, just as you do with actions. &lt;/p&gt;

&lt;p&gt;Workflow reuse also promotes &lt;strong&gt;best practices&lt;/strong&gt; by helping you to use workflows that are well designed, have already been tested, and have been proved to be effective. Your organization can build up a library of reusable workflows that can be &lt;strong&gt;centrally maintained&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below what you think about these new reusable workflows, if and how you plan to use them, and if there is any feature that you think is missing.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/4lH_7b5lmjo"&gt;this video&lt;/a&gt; where I talk about the Composite Actions as templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
📧 &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
🌐 &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/lRypYtmbKMs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>github</category>
      <category>actions</category>
      <category>devops</category>
      <category>cicd</category>
    </item>
    <item>
      <title>Secret dev tools for every code newbie</title>
      <author>Jason Leow ~ golifelog.com</author>
      <pubDate>Mon, 25 Oct 2021 23:36:52 +0000</pubDate>
      <link>https://dev.to/jasonleowsg/secret-dev-tools-for-every-code-newbie-5a8a</link>
      <guid>https://dev.to/jasonleowsg/secret-dev-tools-for-every-code-newbie-5a8a</guid>
      <description>&lt;p&gt;I’d been learning a lot of new programming tricks lately and picking up new tools too. Some of these tools got me really excited that I have to share them! These tools are not commonly recommended in online tutorials or articles and might not be well-known to code newbies:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#coding-hosting-glitch"&gt;
  &lt;/a&gt;
  Coding, hosting - &lt;a href="https://glitch.com/"&gt;Glitch&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This really blew my mind. It sounded like just another Github alternative on paper, but when I arrived on the site, all the vibrant colors, cool whimsical illustrations……! It’s like Github but with unicorns and rainbows; like Willy Wonka’s chocolate factory but for coders! It’s got so much personality and confidence in their branding, that I’m super impressed. Such a fun and delightful experience just browsing through all the code repos. And it’s not just a prettier Github, but a better one too. Glitch allows you to code collaboratively in realtime, much like Google Docs. This makes Github feel like Windows 95 Microsoft Word (oh wait, Github was acquired by Microsoft lol). You also see your site or app deployed live in a preview window with a unique subdomain (or custom domain), much like Codepen and JSFiddle. There’s definitely something of a trend here, where community-generated content is built around a collaborative tool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#command-line-hyper"&gt;
  &lt;/a&gt;
  Command Line - &lt;a href="https://hyper.is/"&gt;Hyper&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Using the terminal used to scare me a lot, but since having to learn Rails and Vue, I had to start using terminal quite a lot and am slowly coming round to it. But not the user experience of it though. The developer experience of using this dark mode interface with neon green characters isn’t the best, so I decided to try out Hyper. It’s an alternative to using your native terminal, and comes with themes to add color to the text, and plugins like search that allows you to search for a particular command you used in the past. Much better UX now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-apis-insomnia"&gt;
  &lt;/a&gt;
  Testing APIs - &lt;a href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Postman is a popular tool for testing APIs, but it feels bloated. I chanced on Insomnia from a tutorial and loved the simple and well-designed interface for it. Sometimes simple with less features is better for beginners, because it’s not so overwhelming. Coding a Ruby on Rails API is completely new ground for me. It was scary initially, but after following a few tutorials, I feel more confident, and being able to now set up the GET/POST/PUT/DELETE requests and test the API easily had really boosted my morale. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#database-tableplus"&gt;
  &lt;/a&gt;
  Database - &lt;a href="https://tableplus.com/"&gt;TablePlus&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This was a real life-saver. I hated trying to access my database over the terminal. A database is best visualised as a table, but command line returns it in text! It just doesn’t go. TablePlus shows the data you have in a table format, allows you to query and search easily, and more.I’ve not even touched the depth of the features available. I’m just so relieved to be able to see my data now in a table format, in a way I can understand, and manipulate my data much more easily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design-figma-community"&gt;
  &lt;/a&gt;
  Design - &lt;a href="https://www.figma.com/community/"&gt;Figma Community&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This new Community tab in Figma is still in beta, but I can see that it’s going to be a huge hit amongst designers. Figma is a collaborative UI/UX design tool, kind of like Photoshop remixed with Google Docs, but ten times better. I always felt it had an edge over Sketch (which is another design tool popular with UX designers), but now with the Community feature it’ll really stand out, because the Community feature is like Dribble remixed with Github rolled into one - a bank of Figma templates made by notable tech companies (like Spotify) and great designers. Browsing through all the different templates made available for free, I almost feel like I don’t ever need to design anything original ever again, because all I need to do is to search, and then duplicate and customize to my own project. And it’s not just templates for designing UI for phones or desktop screens, but also lots of cool collaborative tools and templates to hold a remote brainstorming session together, resume templates, everything! It’s like a designer’s dream come through!&lt;/p&gt;




&lt;p&gt;Follow my daily writings on &lt;a href="https://golifelog.com/goals/30"&gt;Lifelog&lt;/a&gt;, where I write about learning to code, goals, productivity, indie hacking and tech for good.&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>beginners</category>
      <category>coding</category>
      <category>decodingcoding</category>
    </item>
    <item>
      <title>Aprendendo sobre testes em Java com as princesas da Disney</title>
      <author>Aleatório</author>
      <pubDate>Mon, 25 Oct 2021 23:34:16 +0000</pubDate>
      <link>https://dev.to/lucasscharf/aprendendo-sobre-testes-em-java-com-as-princesas-da-disney-1jk5</link>
      <guid>https://dev.to/lucasscharf/aprendendo-sobre-testes-em-java-com-as-princesas-da-disney-1jk5</guid>
      <description>&lt;p&gt;&lt;em&gt;"Era uma vez, um jovem Aleatório que achou que existia muitos conteúdos legais sobre testes, mas resolveu adicionar seus dois centavos. O resto da história, vocês verão a seguir..."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;O post de hoje será um dos mais legais e mais densos que eu já tive o prazer de fazer. Falaremos sobre um dos assuntos que eu mais gosto que são a̶s̶ ̶p̶r̶i̶n̶c̶e̶s̶a̶s̶ ̶d̶a̶ ̶D̶i̶s̶n̶e̶y̶ os testes. Juro que vou tentar ser o mais sucinto possível, mas conteúdo é tão legal que é capaz que eu me empolgue. Para conseguir me ajudar nessa tarefa, eu trouxe a minha princesa da Disney favorita:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FpG310M---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xij38hkrxsv9wtrcbrb9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpG310M---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xij38hkrxsv9wtrcbrb9.jpg" alt="Image Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#o-que-%C3%A9-um-teste"&gt;
  &lt;/a&gt;
  O que é um teste?
&lt;/h1&gt;

&lt;p&gt;No contexto de desenvolvimento, um teste de software consiste em um conjunto de ações que garantem que o software fará o que está se propondo a fazer. As ações realizadas variam de acordo com o projeto, a importância, o tempo disponível, complexidade, etc...&lt;/p&gt;

&lt;p&gt;Nesse ponto, trago um revelação: colocar o código em produção para ser utilizado pelos clientes já é um teste. Não é o melhor teste, tem vários riscos, mas acaba acontecendo ;/ &lt;br&gt;
Num mundo ideal, nosso sistema tem boa cobertura e conseguimos garantir que a nossa aplicação funcione e encontramos os casos de erro antes dos clientes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---gwZgQpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnosasagpajd3carzgpp.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---gwZgQpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vnosasagpajd3carzgpp.jpg" alt="Image jasmine meme"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#o-que-testar"&gt;
  &lt;/a&gt;
  O que testar?
&lt;/h1&gt;

&lt;p&gt;Esse ponto é polêmico e existem pessoas que defendem as mais diferentes opiniões. Alguns vão dizer que é para testar todos os casos possíveis, outros dirão que só precisa pegar os casos representativos, outros dirão que é necessário testar as interfaces, outros dirão que é preciso testar as aplicações usando sistemas reais outros dirão que os sistemas não precisam ser reais e por aí vai...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4oW3A1tj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1e4mf8ejyl8o4zgd2ez4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oW3A1tj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1e4mf8ejyl8o4zgd2ez4.jpg" alt="Image Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como tudo na vida do dev, a resposta é: &lt;strong&gt;depende&lt;/strong&gt;. Depende do tempo, recursos, tamanho do time, conhecimento e importância do seu projeto. No &lt;strong&gt;meu caso&lt;/strong&gt;, eu prefiro testar o fluxo básico (também chamado de caminho feliz) com testes automatizados e alguns fluxos que eu acho que podem ocorrer erros. &lt;/p&gt;

&lt;p&gt;Conforme a aplicação é utilizada e os bugs vão sendo encontrados, então adiciono mais e mais testes automatizados que simulem esses erros e essa parte esteja coberta. Afinal, &lt;a href="https://dev.to/lucasscharf/usando-o-fault-tolerance-no-quarkus-porque-errar-e-umano-mas-tem-limites-4n2l"&gt;errar é umano, mas tem limites&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sempre achei que essa abordagem é bom ponto de começo para os testes, trazendo o equilíbrio bom entre o que deve ser testado e os recursos disponíveis.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#o-que-n%C3%A3o-testar"&gt;
  &lt;/a&gt;
  O que não testar
&lt;/h1&gt;

&lt;p&gt;Existe uma linha muito tênue entre você testar a sua aplicação e testar os frameworks que você está utilizando. O ideal é testar apenas o nosso código. E c̶o̶n̶f̶i̶a̶r̶ assumir que os frameworks estão bem testados e cobertos. &lt;/p&gt;

&lt;p&gt;Para exemplificar isso, vamos imaginar um método que recebe uma princesa, verifica se o nome está nulo e salva no banco.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;salvarPrincesa&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Princesa&lt;/span&gt; &lt;span class="n"&gt;princesa&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;princesa&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getNome&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;RuntimeException&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Princesa com nome nulo"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;princesaDao&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;salvar&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;princesa&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Olhando esse método, você diria que um teste deve verificar se a princesa foi salva no banco?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2BwQefqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqbp4bfwni5hdncjgpdb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2BwQefqH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kqbp4bfwni5hdncjgpdb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A resposta é &lt;strong&gt;NÃO&lt;/strong&gt;. Esse método não tem nenhuma relação com banco de dados. Ele lida com uma abstração (o &lt;a href="https://pt.wikipedia.org/wiki/Objeto_de_acesso_a_dados#:~:text=Objeto%20de%20acesso%20a%20dados%20(acr%C3%B4nimo%20do%20ingl%C3%AAs%20Data%20Access,por%20exemplo%20Java)%20e%20arquitetura"&gt;DAO&lt;/a&gt;). Logo, um teste deve verificar se o DAO foi chamado. Se o DAO vai realmente salvar no banco, vai colocar em memória ou vai dar uma maçã envenenada para que a princesa durma para todo o sempre, não é problema da nossa regra e negócio. Nossa regra testa apenas nome nulo e passa adiante.&lt;/p&gt;

&lt;p&gt;Caso seja necessário fazer um teste que verifica se o método salvar realmente salva no banco ou não, então esse teste deve ser feito em cima da classe PrincesaDao.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tipos-de-testes"&gt;
  &lt;/a&gt;
  Tipos de testes
&lt;/h1&gt;

&lt;p&gt;Da mesma forma que existem vários tipos de princesas, existem vários tipos de testes. E podemos classificar eles de diferentes formas. A lista abaixo traz algumas classificações possíveis.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#automatizados"&gt;
  &lt;/a&gt;
  Automatizados
&lt;/h2&gt;

&lt;p&gt;Nesses testes, todo o processo de análise, execução dos testes e geração de relatórios é feito por um ou mais scripts diferentes. Isso permite que o mesmo teste possa ser repetido várias e várias vezes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#manuais"&gt;
  &lt;/a&gt;
  Manuais
&lt;/h2&gt;

&lt;p&gt;Por outro lado, os testes manuais são testes realizados com a interação humana. Nem tudo pode ser validado através de scripts ou o custo de automatizar pode não valer a pena. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qr1GeILC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2t464g079c38o2tifde.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qr1GeILC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2t464g079c38o2tifde.png" alt="Image tiana com dinheiro"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testes-funcionais"&gt;
  &lt;/a&gt;
  Testes funcionais
&lt;/h2&gt;

&lt;p&gt;Esses testes buscam garantir que o sistema faz o que ele se propõe a fazer. Existem várias formas de fazermos esses testes e por isso os testes funcionais são divididos de acordo com a granularidade. A divisão que eu apresento é um pouco diferente do que é visto na litaratura. Normalmente, os testes &lt;em&gt;mockeados&lt;/em&gt; ficam em algum limbo entre os testes unitários e os de integração.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teste-unit%C3%A1rio"&gt;
  &lt;/a&gt;
  Teste unitário
&lt;/h3&gt;

&lt;p&gt;Esses testes são muito legais de fazer porque eles são rápidos, leves e permitem que você consiga cobrir um monte de situação diferente. &lt;br&gt;
Porém, eles duas pegadinhas. A) Muito código que você faz não pode ser testado de forma unitária. Pois ele acaba tendo dependências com objetos externos. B) Existem coisas que você não consegue testar com teste unitário.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teste-mockeado"&gt;
  &lt;/a&gt;
  Teste &lt;em&gt;mockeado&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Uma saída para lidar com os objetos externos é criar um &lt;em&gt;mock&lt;/em&gt;. Um objeto de &lt;strong&gt;mentirinha&lt;/strong&gt; que vai reagir da forma que nós queremos e dando os retornos que nós esperamos. As duas principais bibliotecas de mock que nós temos é a &lt;a href="https://site.mockito.org/"&gt;Mockito&lt;/a&gt; e a &lt;a href="https://github.com/powermock/powermock"&gt;Powermock&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teste-de-integra%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Teste de integração
&lt;/h3&gt;

&lt;p&gt;Ao invés de usar um &lt;em&gt;mock&lt;/em&gt; para simular os objetos e ambientes externos, por que não usar algo de verdade? &lt;br&gt;
Seguindo a linha dos &lt;a href="https://12factor.net/pt_br/"&gt;12 fatores para desenvolvimento de software&lt;/a&gt;, os ambientes de devsenvolvimento e produção devem ser semelhantes. Logo, se a aplicação funcionará usando um banco de dados de verdade, vamos testar usando um banco de dados de verdade.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teste-ponta%C3%A0ponta"&gt;
  &lt;/a&gt;
  Teste ponta-à-ponta
&lt;/h3&gt;

&lt;p&gt;Esse é o suprassumo dos testes. Muitas pessoas são contra fazê-los porque eles são caros ou difíceis de serem realizados. Mas esses testes são os mais próximos da realidade. &lt;br&gt;
Nesse tipo de teste levantamentos todos os sistemas e dependências de verdade. Buscando chegar o mais próximo do que é feito no mundo real. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teste-caixa-preta"&gt;
  &lt;/a&gt;
  Teste caixa preta
&lt;/h2&gt;

&lt;p&gt;Essa nomenclatura serve mais para dizer que o teste é criado/planejado/executado sem saber as estruturas internas da aplicação.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teste-caixa-branca"&gt;
  &lt;/a&gt;
  Teste caixa branca
&lt;/h2&gt;

&lt;p&gt;Ao contrário dos testes caixa-preta, nos testes caixa-branca, os testes são criados já tendo em mente as estruturas internas da aplicação.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teste-de-performance"&gt;
  &lt;/a&gt;
  Teste de performance
&lt;/h2&gt;

&lt;p&gt;Esses testes buscam descobrir como é o desempenho do sistema em diferentes cenários. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teste-de-carga"&gt;
  &lt;/a&gt;
  Teste de carga
&lt;/h3&gt;

&lt;p&gt;Visa medir os tempos de resposta e vazões do sistema em diferentes cargas.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#teste-de-stress"&gt;
  &lt;/a&gt;
  Teste de &lt;em&gt;stress&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Semelhante a teste anterior em termos de execução, mas totalmente em sua filosofia. Esse teste busca tanto descobrir quais são os limites da aplicação bem como o comportamento do sistema atuando no limite. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teste-de-regress%C3%A3o"&gt;
  &lt;/a&gt;
  Teste de regressão
&lt;/h2&gt;

&lt;p&gt;Consiste em executar todos testes funcionais criados (ou demais testes quando relevante) para garantir que novas mudanças e alterações não introduzam novos erros.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teste-de-seguran%C3%A7a"&gt;
  &lt;/a&gt;
  Teste de segurança
&lt;/h2&gt;

&lt;p&gt;Também conhecido com &lt;a href="https://pt.wikipedia.org/wiki/Teste_de_intrus%C3%A3o"&gt;teste de penetração&lt;/a&gt;. Geralmente é feito por alguma empresa externa e visa encontrar falhas de segurança tanto no código quanto nos processos executados pela aplicação/empresa. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teste-de-usabilidade"&gt;
  &lt;/a&gt;
  Teste de usabilidade
&lt;/h2&gt;

&lt;p&gt;Mais focado para aplicações que tem telas, esse tipo de teste consiste em navegar pelas telas feitas (ou por ideias de telas) para verificar se elas atenderão o usuário. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#teste-de-aceita%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Teste de aceitação
&lt;/h2&gt;

&lt;p&gt;O sonho de consumo de todo o software. Os testes de aceitação vão dizer se o software está pronto ou não para receber o aceite do cliente. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#por-que-testar"&gt;
  &lt;/a&gt;
  Por que testar?
&lt;/h1&gt;

&lt;p&gt;Qualidade. Fazer testes é o que permite dizer que nossa aplicação funciona ou não. Como vocês viram no outro tópico, existem várias formas de fazer isso.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dicas-gerais-de-como-testar"&gt;
  &lt;/a&gt;
  Dicas gerais de como testar
&lt;/h1&gt;

&lt;p&gt;Caso você seja a Aurora ou Cinderella, você tem uma fada madrinha que te dará uma mão para resolver os problemas. Caso você não seja, você precisa se ajudar. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DTF7XU5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvg1cf4x7m9i280of4dr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DTF7XU5O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zvg1cf4x7m9i280of4dr.jpg" alt="Image aleatório de fado madrinho"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Separei algumas dicas para trabalhar tanto em ferramentas que podem te ajudar a fazerem bonito nesse baile dos testes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fa%C3%A7a-que-os-testes-rodem-de-forma-r%C3%A1pida"&gt;
  &lt;/a&gt;
  Faça que os testes rodem de forma rápida
&lt;/h2&gt;

&lt;p&gt;Desenvolver é algo estressante então as coisas precisam ser rápidas. Se cada vez que você precisar rodar os testes, você levar 10 minutos esperando, a tendência é que você pare de testar. &lt;br&gt;
Parando de testar, as coisas começam a dar ruim. Dando ruim, os prazos vão se apertar. Apertando os prazos, você vai tirar  o que for menos necessárias para o sistema ir pra produção. Tirando o menos necessário, você tirará os testes e as coisas vão ficando &lt;strong&gt;pior&lt;/strong&gt;.  Então é MUITO importante que você consiga fazer com que os testes rodem rápido. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escreva-um-c%C3%B3digo-que-facilite-os-testes"&gt;
  &lt;/a&gt;
  Escreva um código que facilite os testes
&lt;/h2&gt;

&lt;p&gt;Se o seu código não for pensado para testes, quando você for escrevê-los você provavelmente terá dificuldades. Tendo dificuldade para testar, você vai parar de testar. Parando de testar, as coisas começam a dar ruim...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#evite-o-uso-de-static"&gt;
  &lt;/a&gt;
  Evite o uso de &lt;em&gt;static&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Métodos estáticos como &lt;code&gt;LocalDate.now()&lt;/code&gt; ou &lt;code&gt;Objects.isNull()&lt;/code&gt; não podem ser &lt;em&gt;mockeados&lt;/em&gt; facilmente. Então, se você precisa testar com algum comportamento específico, fica complicado. &lt;/p&gt;

&lt;p&gt;Sempre que aparecer um método estático, pense se isso pode afetar os testes. Caso afete, utilize um objeto para encapsular esse método.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#saiba-o-porque-do-teste-estar-ali"&gt;
  &lt;/a&gt;
  Saiba o porque do teste estar ali
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nfxOwdUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l38ncuembd1qv7t0v6jq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nfxOwdUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l38ncuembd1qv7t0v6jq.gif" alt="Image ariel pentendo o cabelo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Muitas vezes nós fazemos as coisas sem saber bem o que estamos fazendo ou o porquê das coisas. Com isso, nós podemos testar umas 10 vezes a mesma lógica e deixar de testar algo importante. Então, antes de escrever qualquer coisa crie algum tipo de "plano" onde você define o que você quer testar e o motivo desse teste.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#utilize-ferramentas-para-verificar-a-cobertura-de-testes"&gt;
  &lt;/a&gt;
  Utilize ferramentas para verificar a cobertura de testes
&lt;/h2&gt;

&lt;p&gt;Se nós não conseguimos medir, nós nem podemos dizer se estamos fazendo um bom trabalho (provavelmente, nosso trabalho está ruim).&lt;br&gt;
O &lt;a href="https://www.eclemma.org/jacoco/"&gt;JaCoCo&lt;/a&gt; é uma ferramenta ótima para dizer como está nossa cobertura. O que estamos esquecendo e o que precisamos melhorar.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mas-n%C3%A3o-se-prenda-muito-a-isso"&gt;
  &lt;/a&gt;
  Mas não se prenda muito a isso
&lt;/h2&gt;

&lt;p&gt;É importante ter uma boa cobertura de teste. Particularmente, eu acho que 80% para um projeto maduro é um bom número. Existem coisas que simplesmente são caras demais para serem testadas, ou que só não tem motivo para testar. &lt;br&gt;
Além disso, buscar os 100% pode dar a falsa sensação de que você tem todos os casos possíveis mapeados e que nunca vai acontecer um erro. Spoiler: a menos que o seu nome seja Mulan e você esteja lutando contra os Hunos, você vai errar. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p1vW7l4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/058lsrdv1uh6ptxmhya3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p1vW7l4B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/058lsrdv1uh6ptxmhya3.png" alt="Image mulan"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#considera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Considerações
&lt;/h1&gt;

&lt;p&gt;Esse post foi mais teórico. Nos próximos, vamos ver como fazer testes unitários, mockeados e de integração. Tudo isso trabalhando com Quarkus. Aguardem a continuação /o/&lt;/p&gt;

</description>
      <category>testing</category>
      <category>braziliandevs</category>
      <category>java</category>
    </item>
    <item>
      <title>New project starting. </title>
      <author>Nelson Malbone</author>
      <pubDate>Mon, 25 Oct 2021 22:17:30 +0000</pubDate>
      <link>https://dev.to/nelsonmalbonecoding/new-project-starting-g8b</link>
      <guid>https://dev.to/nelsonmalbonecoding/new-project-starting-g8b</guid>
      <description>&lt;p&gt;Day one of many to come, my name is Nelson I’m just recently starting to pull myself out of tutorial hell. I’m starting a password generator with a list option and a copy function with custom toggle switches. If I can find a way to record a day to day process a time lapse I will post it on my Instagram. Today I’m starting to hand write the code out on paper. &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Code Smell 96 - My Objects</title>
      <author>Maxi Contieri</author>
      <pubDate>Mon, 25 Oct 2021 22:12:37 +0000</pubDate>
      <link>https://dev.to/mcsee/code-smell-96-my-objects-5cij</link>
      <guid>https://dev.to/mcsee/code-smell-96-my-objects-5cij</guid>
      <description>&lt;p&gt;&lt;em&gt;You don't own objects.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR: don't use &lt;em&gt;my&lt;/em&gt; as a name prefix.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#problems"&gt;
  &lt;/a&gt;
  Problems
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Lack of context&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bijection Fault&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#solutions"&gt;
  &lt;/a&gt;
  Solutions
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Remove &lt;em&gt;my&lt;/em&gt; prefix. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change to a role suggesting name.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h1&gt;

&lt;p&gt;Several old tutorials use the word 'my' as a lazy name. &lt;br&gt;
This is vague and lead to context mistakes.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#sample-code"&gt;
  &lt;/a&gt;
  Sample Code
&lt;/h1&gt;
&lt;h2&gt;
  &lt;a href="#wrong"&gt;
  &lt;/a&gt;
  Wrong
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;MainWindow&lt;/span&gt; &lt;span class="n"&gt;myWindow&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainWindow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;MainWindow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#right"&gt;
  &lt;/a&gt;
  Right
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;MainWindow&lt;/span&gt; &lt;span class="n"&gt;salesWindow&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MainWindow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;MainWindow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*

Since window is instanciated, we are currently working
with a specialized window playing a special role

*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h1&gt;
  &lt;a href="#detection"&gt;
  &lt;/a&gt;
  Detection
&lt;/h1&gt;

&lt;p&gt;[x] Automatic&lt;/p&gt;

&lt;p&gt;We can tell our linters and static checkers to search for this prefix and warn us.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#tags"&gt;
  &lt;/a&gt;
  Tags
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Naming&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Avoid using &lt;em&gt;my&lt;/em&gt;. Objects change according to the usage context.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#more-info"&gt;
  &lt;/a&gt;
  More Info
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/what-exactly-is-a-name-part-ii-rehab-20gd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;What exactly is a name - Part II Rehab&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ May 23 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h1&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@bozu"&gt;Michał Bożek&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/kid-toy"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;



&lt;blockquote&gt;
&lt;p&gt;Thinking about my experience of modifying code, I see that I spend much more time reading the existing code than I do writing new code. If I want to make my code cheap, therefore, I should make it easy to read.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Kent Beck&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/software-engineering-great-quotes-26ci" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Software Engineering Great Quotes&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ Dec 28 '20 ・ 13 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#quotes&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#software&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;This article is part of the CodeSmell Series.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mcsee" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--goWt_06h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--qOJvl4uX--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/366059/1b94891f-70d7-43cd-9531-4a58aa009115.jpg" alt="mcsee"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mcsee/how-to-find-the-stinky-parts-of-your-code-1dbc" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Find the Stinky parts of your Code&lt;/h2&gt;
      &lt;h3&gt;Maxi Contieri ・ May 21 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codequality&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>oop</category>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Dropdown for GitHub workflows input parameters</title>
      <author>Arthur Diniz</author>
      <pubDate>Mon, 25 Oct 2021 22:09:59 +0000</pubDate>
      <link>https://dev.to/arthurbdiniz/dropdown-for-github-workflows-input-parameters-1e8d</link>
      <guid>https://dev.to/arthurbdiniz/dropdown-for-github-workflows-input-parameters-1e8d</guid>
      <description>&lt;h1&gt;
  &lt;a href="#dropdown-for-github-workflows-input-parameters"&gt;
  &lt;/a&gt;
  Dropdown for GitHub workflows input parameters
&lt;/h1&gt;

&lt;p&gt;Sometimes when we look at &lt;code&gt;CI/CD tools&lt;/code&gt; embedded within git-based software repository manager like &lt;code&gt;GitHub&lt;/code&gt;, &lt;code&gt;GitLab&lt;/code&gt; or &lt;code&gt;Bitbucket&lt;/code&gt;, we ran into a lack of some features.&lt;/p&gt;

&lt;p&gt;This time me and my DevOps/SRE team were facing a pain of not being able to have the option to create &lt;code&gt;drop-downs&lt;/code&gt; within GitHub workflows using input parameters. Although this functionality is already available on other platforms such as Bitbucket, the specific client we were working on stored the code inside GitHub.&lt;/p&gt;

&lt;p&gt;At first I thought that someone has already solved this problem somehow, but doing an extensive search on the internet I found several angry GitHub users opening requests within the Support Community and even in the stack overflow.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGk1bXUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZGk1bXUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-1.png" alt="comment-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cju1B9Of--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cju1B9Of--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-2.png" alt="comment-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7RZIfhXm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7RZIfhXm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-3.png" alt="comment-3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3QdEUxKG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3QdEUxKG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-5.png" alt="comment-5"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qqWXtv5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qqWXtv5Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/comment-4.png" alt="comment-4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So I decided to create a solution for this, always thinking about simplicity and in a way that makes it easy to get this missing functionality. I started by creating an input array pattern using &lt;code&gt;commas&lt;/code&gt; and using a &lt;code&gt;tag&lt;/code&gt; (the selector) e.g &lt;code&gt;brackets&lt;/code&gt; as the default value marker. Here is an example of what an input string would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;gh-action-dropdown-list-input&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Environment'&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;dev,staging,[uat],prod'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the final question that would turn out to be the most complicated to deal with. How can I change the GitHub Actions interface to replace the input pattern we created earlier to a dropdown?&lt;/p&gt;

&lt;p&gt;The simplest answer I thought was to create a &lt;code&gt;chrome and firefox extension&lt;/code&gt; that would do all this logic behind the scenes and replace the &lt;code&gt;HTML input element&lt;/code&gt; with the &lt;code&gt;selected tag&lt;/code&gt; containing the array values and leaving the tag value (selector) always as the default.&lt;/p&gt;

&lt;p&gt;All code was developed in pure JavaScript, open-source licensed under Apache 2.0 and available at &lt;a href="https://github.com/arthurbdiniz/gh-action-dropdown-list-input"&gt;https://github.com/arthurbdiniz/gh-action-dropdown-list-input&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-extension"&gt;
  &lt;/a&gt;
  Install extension
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrome.google.com/webstore/detail/github-action-dropdown-in/deogklnblohhopmnkllaeinijefddcnm"&gt;Chrome&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Firefox: is still in review process to be published.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once installed, the extension is ready to use and the final result we see is the Actions interface with drop-downs. :)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C9h66RA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/showcase-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C9h66RA_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/showcase-1.png" alt="showcase-1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oGlVHD1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/showcase-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oGlVHD1e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/showcase-2.png" alt="showcase-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-selectors"&gt;
  &lt;/a&gt;
  Configuring selectors
&lt;/h3&gt;

&lt;p&gt;Go to the top right corner of the browser you are using and click on the extension logo. A screen will popup with tag options. Choose the right tags for you and save it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This action might require reloading the GitHub workflow tab.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5FGzNRTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/config.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5FGzNRTy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/arthurbdiniz/arthurbdiniz/master/dev-to/gh-action-dropdown/assets/config.png" alt="config"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Have fun using drop-downs inside GitHub. If you liked this project please share this post and if possible "star" within the repository.&lt;/p&gt;

&lt;p&gt;Also feel free to connect with me on LinkedIn: &lt;a href="https://www.linkedin.com/in/arthurbdiniz"&gt;https://www.linkedin.com/in/arthurbdiniz&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.community/t/can-workflow-dispatch-input-be-option-list/127338"&gt;https://github.community/t/can-workflow-dispatch-input-be-option-list/127338&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/69296314/dropdown-for-github-workflows-input-parameters"&gt;https://stackoverflow.com/questions/69296314/dropdown-for-github-workflows-input-parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>github</category>
      <category>actions</category>
      <category>dropdown</category>
    </item>
    <item>
      <title>⚡️Combining Serverless Framework &amp; AWS CDK</title>
      <author>Sebastian Bille</author>
      <pubDate>Mon, 25 Oct 2021 21:51:11 +0000</pubDate>
      <link>https://dev.to/aws-builders/combining-serverless-framework-aws-cdk-1dg0</link>
      <guid>https://dev.to/aws-builders/combining-serverless-framework-aws-cdk-1dg0</guid>
      <description>&lt;p&gt;Serverless Framework is a fantastic tool for defining and managing your Lambda functions. But let's face it; it's not very good at handling other types of resources and infrastructure. CDK is though. This post will take a look at how we can combine the two!&lt;/p&gt;




&lt;p&gt;Serverless has excellent utility for describing and managing Lambda functions, but as soon as you need basically any other type of infrastructure, you'll have to resort to raw CloudFormation. Using the CDK with its declarative and straightforward constructs to define infrastructure is more expressive and easy to understand once the infrastructure stack grows. What if we could use them together and utilize each of them for its respective strengths, and what it does best? Unfortunately, there's no native way to use the two tools together, like &lt;a href="https://aws.amazon.com/blogs/compute/better-together-aws-sam-and-aws-cdk/"&gt;there is for SAM&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Let's look at how we can work around that and whether or not it makes sense!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TL;DR - give me the &lt;a href="https://github.com/TastefulElk/sls-cdk-combined"&gt;code&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%8F%97-setting-up-the-project"&gt;
  &lt;/a&gt;
  🏗 Setting up the project
&lt;/h2&gt;

&lt;p&gt;Let's start by initializing a Typescript Serverless app. To keep things simple, we'll use a Yeoman generator to get us started with a project. Install it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-g&lt;/span&gt; yo generator-sls-node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then, in an empty folder, run the generator with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yo sls-node
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since we'll be using CDK to manage our infrastructure, we'll want to manage CDK, its dependencies, and transpiling the infrastructure code separately from our actual application. Therefore, let's create a folder called &lt;code&gt;infrastructure&lt;/code&gt; in the root of our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;infrastructure
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, navigate to the created folder and initialize a CDK project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;infrastructure
npx cdk init &lt;span class="nt"&gt;--language&lt;/span&gt; typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now have a project with the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- infrastructure # Our CDK infrastructure
    ↳ bin     # CDK executable
    ↳ lib     # infrastructure stack definition
    ↳ test    # infrastructure tests
- src                    # application code
- tests                  # application tests
- serverless.yml # Serverless config

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-our-app"&gt;
  &lt;/a&gt;
  🔨 Building our app
&lt;/h2&gt;

&lt;p&gt;The app we're building will contain a Lambda function, exposed in a HTTP API, which will put an item on an SQS queue for another Lambda to finally process the item.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---dtJvVhb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uqdp7q58o0ikvgzw18z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---dtJvVhb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1uqdp7q58o0ikvgzw18z.png" alt="architecture diagram"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let's start by adding an SQS queue to our CDK stack. To do that, we need to first add the &lt;code&gt;@aws-cdk/aws-sqs&lt;/code&gt; package:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add @aws-cdk/aws-sqs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;I prefer Yarn over NPM, which is the default of the CDK init boilerplate. If you prefer to use Yarn too, remove the &lt;code&gt;package-lock.json&lt;/code&gt; so you don't get conflicting lock files.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Then add a queue to &lt;code&gt;infrastructure/lib/infrastructure-stack.ts&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// infrastructure/lib/infrastructure-stack.ts&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Queue&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@aws-cdk/aws-sqs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;InfrastructureStack&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stack&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StackProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SQS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;queueName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sls-cdk-demo-queue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As discussed earlier, we want to use Serverless and CDK for what they do best respectively. That means our API and Lambda functions will be defined in our &lt;code&gt;serverless.yml&lt;/code&gt;, seeing as Serverless handles those very capably and brings lots of functionality to interact with them once deployed. They're also the resources most likely to change often, meaning they don't really belong in our more long-living infrastructure stack. &lt;/p&gt;

&lt;p&gt;For this simple demo use case, all we need to do to set up our API Gateway, Lambda function and to map the function to the &lt;code&gt;/todo&lt;/code&gt; path, is to add the following to our &lt;code&gt;serverless.yml&lt;/code&gt;, using the &lt;code&gt;events&lt;/code&gt; mapping:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# serverless.yml&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;createTodo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/createTodo.handler&lt;/span&gt;
    &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/todos&lt;/span&gt;
          &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the &lt;code&gt;createTodo&lt;/code&gt; function to send anything to our SQS buffer, it's going to need the URL of the queue. It's also going to need the queue's ARN to set up the necessary  &lt;code&gt;sqs:SendMessage&lt;/code&gt; IAM permission. However, since the SQS queue is not defined in the same CloudFormation stack as our Lambda function, we'll need to export those two properties from our CDK stack so that we can reference them in our Serverless stack.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cross-stack-references"&gt;
  &lt;/a&gt;
  Cross Stack References
&lt;/h3&gt;

&lt;p&gt;CloudFormation stacks can export a set of properties, as "Outputs" which can then be referenced in other CloudFormation stacks. Conveniently, Serverless has built-in support to reference Outputs of other stacks, which means we can use this to easily transfer information from our CDK stack to our Serverless stack.&lt;/p&gt;

&lt;p&gt;In the CDK stack, we start by creating our output variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// infrastructure/lib/infrastructure-stack.ts&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CfnOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;queueUrl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueUrl&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CfnOutput&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;queueArn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;queueArn&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, back in our &lt;code&gt;serverless.yml&lt;/code&gt;, we can reference those two variables with the &lt;code&gt;${cf:stackName.variableName}&lt;/code&gt; syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# serverless.yml&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;aws&lt;/span&gt;
  &lt;span class="na"&gt;region&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;eu-north-1&lt;/span&gt;
  &lt;span class="na"&gt;runtime&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nodejs14.x&lt;/span&gt;
  &lt;span class="na"&gt;iam&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Set up IAM permission for sending messages to the queue&lt;/span&gt;
    &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;statements&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;Effect&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Allow&lt;/span&gt;
          &lt;span class="na"&gt;Action&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;sqs:SendMessage&lt;/span&gt;
          &lt;span class="na"&gt;Resource&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${cf:InfrastructureStack.queueArn}&lt;/span&gt;

&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;createTodo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/createTodo.handler&lt;/span&gt;
    &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/todos&lt;/span&gt;
          &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;post&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# Set environment variable with the queue URL&lt;/span&gt;
      &lt;span class="na"&gt;QUEUE_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${cf:InfrastructureStack.queueUrl}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and while we're at it, lets also add the definition for our second Lambda, the queue processor, again by using the cross stack reference to the queue ARN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;# serverless.yml&lt;/span&gt;
&lt;span class="nn"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;functions&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;createTodo&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="s"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;queueProcessor&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;handler&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;src/queueProcessor.handler&lt;/span&gt;
        &lt;span class="na"&gt;events&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;sqs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;arn&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${cf:InfrastructureStack.queueArn}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should be all we need for the infrastructure, all that's left is writing the actual Lambda code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lambda-code"&gt;
  &lt;/a&gt;
  Lambda Code
&lt;/h3&gt;

&lt;p&gt;Our Lambda code is going to be very simple. The &lt;code&gt;createTodo&lt;/code&gt; handler, the one exposed in the API, will take the &lt;code&gt;body&lt;/code&gt; of the request and put it directly on the SQS queue. The &lt;code&gt;queueProcessor&lt;/code&gt; will then automatically consume the queue. Starting with the &lt;code&gt;createTodo&lt;/code&gt; function, add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/createTodo.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SQS&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aws-sdk&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SQS&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;sqs&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;QueueUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;QUEUE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;MessageBody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;promise&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then let's just pretend to do some processing of the item in the &lt;code&gt;queueProcessor.js&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/queueProcessor.js&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Doing some heavy processing right now. I promise! Don&lt;/span&gt;&lt;span class="se"&gt;\'&lt;/span&gt;&lt;span class="s1"&gt;t come in!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, now all we need is to be able to deploy our app along with the infrastructure!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying"&gt;
  &lt;/a&gt;
  🚀 Deploying
&lt;/h2&gt;

&lt;p&gt;Since our application will live in two separate CloudFormation stacks, we need to do two separate deployments. The Serverless stack will depend on our infrastructure stack, but never the other way around - meaning we should always deploy the infrastructure stack first.&lt;/p&gt;

&lt;p&gt;To be able to deploy our app in one step, rather than manually first having to navigate to the infrastructure folder, deploy it,  navigate back to the project root and then deploy our Serverless app, we can add a script to our root &lt;code&gt;package.json&lt;/code&gt; that does us for us in one swift motion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"deploy"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cd infrastructure &amp;amp;&amp;amp; yarn cdk deploy &amp;amp;&amp;amp; cd .. &amp;amp;&amp;amp; yarn sls deploy"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also add a CDK wrapper script that lets us easily run any CDK command without having to navigate to the infrastructure folder.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;package.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cdk"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"cd infrastructure &amp;amp;&amp;amp; yarn cdk"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;cdk&lt;/code&gt; script utilizes the fact that Yarn forwards arguments, and thus we can run, for example, &lt;code&gt;yarn cdk diff&lt;/code&gt; from the root of our app, even though CDK isn't actually in the root. Neat! 👵&lt;/p&gt;

&lt;p&gt;What's even neater, though, is that we can now just run &lt;code&gt;yarn deploy&lt;/code&gt;. Since it's the first time we're deploying the app, it'll take a little longer than on subsequent deploys but after about half the time it takes refill your coffee, the app will be up and running! We can verify that it works by sending a &lt;code&gt;POST&lt;/code&gt; request to the API Gateway endpoint printed in the output, and by then looking at the logs of the final &lt;code&gt;queueProcessor&lt;/code&gt; lambda:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'Content-type: application/json'&lt;/span&gt; &lt;span class="nt"&gt;--data&lt;/span&gt; &lt;span class="s1"&gt;'{"text":"Hello, World!"}'&lt;/span&gt; https://abcdefghij.execute-api.eu-north-1.amazonaws.com/dev/todos

yarn serverless logs &lt;span class="nt"&gt;--function&lt;/span&gt; queueProcessor
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;CDK is excellent at defining and making sense of complex infrastructure and resources. However it does come with quite a bit of overhead. The CDK project itself has dependencies that you'll need to manage, and, most importantly; the infrastructure code is, well, code, which you'll need to maintain, lint and test. On the other hand, being able to test it, is definitely also one of the strengths. It's also generally a good idea to &lt;a href="https://twitter.com/JefClaes/status/1450795830542229504"&gt;separate your more long-living infrastructure into a separate CloudFormation stack&lt;/a&gt;. It minimizes the risk of accidentally modifying, or even deleting, important stateful resources such as a DynamoDB table.&lt;/p&gt;

&lt;p&gt;There are ongoing projects that tries to bring CDK constructs natively right into Serverless via plugins, one example being &lt;a href="https://github.com/getlift/lift"&gt;Lift&lt;/a&gt;, and other frameworks that are built on top of the CDK, such as &lt;a href="https://serverless-stack.com/"&gt;Serverless Stack&lt;/a&gt;. Lift looks promising, but it doesn't yet support using custom constructs, and many organizations and projects have invested a lot into Serverless Framework and aren't ready to jump ship to an alternative like Serverless Stack.&lt;/p&gt;

&lt;p&gt;For smaller projects, or projects where the infrastructure and/or the interaction between the infrastructure isn't complex, using CDK and Serverless together is unlikely to be worth the overhead. For larger, more complex apps, though, where you might want to unit test your resources or just be able to describe them better than with CloudFormation, which quickly gets very messy - it might be worth considering!&lt;/p&gt;




&lt;p&gt;If you enjoyed this post and want to see more, follow me on Twitter at &lt;a href="https://twitter.com/TastefulElk"&gt;@TastefulElk&lt;/a&gt; where I frequently write about serverless tech, AWS, and developer productivity!&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>cloud</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Azure SQL Awesome List</title>
      <author>Davide Mauri</author>
      <pubDate>Mon, 25 Oct 2021 21:33:29 +0000</pubDate>
      <link>https://dev.to/azure/azure-sql-awesome-list-4pd5</link>
      <guid>https://dev.to/azure/azure-sql-awesome-list-4pd5</guid>
      <description>&lt;p&gt;It's been a while now I've been collecting links to resources I found useful for a developer working with Azure SQL, and today I realized that the list I've created become quite big and nice over the last months.&lt;/p&gt;

&lt;p&gt;I so decided to turn it into an official Awesome List, which, by GitHub definition is &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An awesome list is a list of awesome things curated by the community. There are awesome lists about everything from CLI applications to fantasy books. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here you go:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/yorek"&gt;
        yorek
      &lt;/a&gt; / &lt;a href="https://github.com/yorek/awesome-azure-sql"&gt;
        awesome-azure-sql
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      An awesome list of Azure SQL samples for Developers of any Language and Platform
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;as of now it contains a list of more than 50 curated links. I'll keep the list updated, and I really count on community's help here. If you have something you think it is worth and valuable to add to the list, please just submit a PR.&lt;/p&gt;

&lt;p&gt;The list is focused on Azure SQL and developers, and contains links to resources for every language, platform, tool and needs.&lt;/p&gt;

&lt;p&gt;Hope this is helpful to you as it has been to me!&lt;/p&gt;




&lt;p&gt;Photo by &lt;a href="https://www.pexels.com/@belart84?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Artem Beliaikin&lt;/a&gt; from &lt;a href="https://www.pexels.com/photo/come-in-we-re-awesome-sign-1051747/?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Pexels&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>cloud</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How to Ace Data Science Interview by Working on Portfolio Projects</title>
      <author>Abid</author>
      <pubDate>Mon, 25 Oct 2021 20:52:47 +0000</pubDate>
      <link>https://dev.to/kingabzpro/how-to-ace-data-science-interview-by-working-on-portfolio-projects-4cd</link>
      <guid>https://dev.to/kingabzpro/how-to-ace-data-science-interview-by-working-on-portfolio-projects-4cd</guid>
      <description>&lt;p&gt;Recruiters of Data Science professionals around the world focus on portfolio projects rather than resumes and LinkedIn profiles. So, learning early how to contribute and share your work on GitHub, Deepnote, and Kaggle can help you perform your best during data science interviews.&lt;br&gt;
&lt;a href="https://www.kdnuggets.com/2021/10/ace-data-science-interview-portfolio-projects.html"&gt;How to Ace Data Science Interview by Working on Portfolio Projects&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>datascience</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
