<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introduction to Flutter</title>
      <author>Baransel</author>
      <pubDate>Fri, 01 Oct 2021 08:17:08 +0000</pubDate>
      <link>https://dev.to/baransel/introduction-to-flutter-263p</link>
      <guid>https://dev.to/baransel/introduction-to-flutter-263p</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-flutter"&gt;
  &lt;/a&gt;
  What is Flutter?
&lt;/h3&gt;

&lt;p&gt;Flutter is a framework developed by Google. It is used to develop applications on cross-platform. So our application we wrote with Flutter; web and performs on both ios and android devices. In other words, we can have an application that can run on many platforms with a single code. In this way, we can save both cost and time. Google first used Flutter when developing the &lt;strong&gt;&lt;em&gt;&lt;a href="https://fuchsia.dev/" rel="nofollow"&gt;Fuschia&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; operating system.&lt;/p&gt;

&lt;p&gt;Flutter doesn't work with any development tools, but includes editor plugins for &lt;strong&gt;Visual Studio Code&lt;/strong&gt; and &lt;strong&gt;IntelliJ/Android Studio&lt;/strong&gt;. It is also open source. You can review their code on &lt;em&gt;&lt;strong&gt;&lt;a href="https://github.com/flutter/flutter" rel="nofollow"&gt;GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;, and you can contribute by adding code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-flutter"&gt;
  &lt;/a&gt;
  Why Flutter?
&lt;/h3&gt;

&lt;p&gt;Continue this post on my blog! &lt;a href="https://baransel.dev/post/what-is-flutter/"&gt;Introduction to Flutter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Getting started with Laravel and Vue js</title>
      <author>John Wanjema</author>
      <pubDate>Fri, 01 Oct 2021 08:15:58 +0000</pubDate>
      <link>https://dev.to/1njema/getting-started-with-laravel-and-vue-js-2hc6</link>
      <guid>https://dev.to/1njema/getting-started-with-laravel-and-vue-js-2hc6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ever-wondered-how-to-setup-vue-in-your-laravel-project"&gt;
  &lt;/a&gt;
  Ever wondered how to setup Vue in your laravel project.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FpvAAScs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmtm25h4rb9sgsw3505z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpvAAScs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmtm25h4rb9sgsw3505z.png" alt="laravel and vue js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laravel"&gt;
  &lt;/a&gt;
  Laravel
&lt;/h2&gt;

&lt;p&gt;Laravel is a web application framework with expressive, elegant syntax. We’ve already laid the foundation — freeing you to create without sweating the small things.&lt;br&gt;
Here is a link to their Documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x"&gt;Laravel&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue
&lt;/h2&gt;

&lt;p&gt;Vue.js is a progressive, incrementally-adoptable JavaScript framework for building UI on the web.&lt;br&gt;
Here is the link to their documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vue-js"&gt;
  &lt;/a&gt;
  &lt;a href="https://vuejs.org/"&gt;Vue js&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#why-use-laravel-with-vue"&gt;
  &lt;/a&gt;
  Why use Laravel with Vue
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#streamline-the-development-process"&gt;
  &lt;/a&gt;
  Streamline the Development Process
&lt;/h3&gt;

&lt;p&gt;This structure allows for one to be a full stack developer within a single project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#singlepage-application-development"&gt;
  &lt;/a&gt;
  Single-Page Application Development
&lt;/h3&gt;

&lt;p&gt;Both Vue js and Laravel support single page applications.This allows the application assets get loaded once, all that your application does as the user engages with it is request data which typically requires low bandwidth to fulfill.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-optimal-complex-frontend-pages"&gt;
  &lt;/a&gt;
  Building Optimal Complex Front-end Pages
&lt;/h3&gt;

&lt;p&gt;With Vuejs a developer does not need to use jquery to manipulate blade templates.Vue allows for easier managment of DOM using a virtual Dom.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-to-learn-and-use"&gt;
  &lt;/a&gt;
  Easy to Learn and Use
&lt;/h3&gt;

&lt;p&gt;Both Laravel and Vue have a robust documentation that is easy to learn and integrate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-ensure-that-laravel-is-installed"&gt;
  &lt;/a&gt;
  First ensure that Laravel is installed.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#here-is-link-to-install-laravel-if-you-havent"&gt;
  &lt;/a&gt;
  Here is link to install Laravel if you haven't.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#laravel-8-installation"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/installation"&gt;Laravel 8 Installation&lt;/a&gt;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#create-a-laravel-project"&gt;
  &lt;/a&gt;
  Create a laravel project
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer create-project laravel/laravel laravel-vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#scaffolding-vue-js"&gt;
  &lt;/a&gt;
  Scaffolding Vue js
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#install-laravelui-package"&gt;
  &lt;/a&gt;
  Install laravel/ui package
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require laravel/ui
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-the-frontend-scaffolding-using-the-ui-artisan-command"&gt;
  &lt;/a&gt;
  Install the frontend scaffolding using the ui Artisan command
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#basic-scaffolding"&gt;
  &lt;/a&gt;
  Basic scaffolding
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan ui vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#generate-auth-scaffolding"&gt;
  &lt;/a&gt;
  Generate Auth scaffolding.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan ui vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#compile-your-fresh-scaffolding"&gt;
  &lt;/a&gt;
  Compile your fresh scaffolding.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configure-blade"&gt;
  &lt;/a&gt;
  Configure Blade
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#import-appjs-and-add-app-id"&gt;
  &lt;/a&gt;
  Import app.js and add app id
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;doctype html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{{ str_replace('_', '-', app()-&amp;gt;getLocale()) }}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; CSRF Token &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"csrf-token"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{{ csrf_token() }}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;title&amp;gt;Laravel Vue&amp;lt;/title&amp;gt;
    &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Scripts &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;script &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{{ asset('js/app.js') }}"&lt;/span&gt; defer&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Fonts &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"dns-prefetch"&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"//fonts.gstatic.com"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://fonts.googleapis.com/css?family=Nunito"&lt;/span&gt; &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"stylesheet"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Styles &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{{ asset('css/app.css') }}"&lt;/span&gt; &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"stylesheet"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"app"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &amp;lt;main &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"py-3"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &amp;lt;h3&amp;gt;Laravel Vue&amp;lt;/h3&amp;gt;
            &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
        &amp;lt;/main&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-vue-components"&gt;
  &lt;/a&gt;
  Add Vue components
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#add-new-vuejs-file-in-resourcesjscomponents-called-appvue-and-add-the-following-code"&gt;
  &lt;/a&gt;
  Add new vue.js file in resources/js/components called app.vue and add the following code.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &lt;span class="o"&gt;{{&lt;/span&gt;message&lt;span class="o"&gt;}}&lt;/span&gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
&lt;span class="nb"&gt;export &lt;/span&gt;default &lt;span class="o"&gt;{&lt;/span&gt;
    data&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            message: &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-vue-router"&gt;
  &lt;/a&gt;
  Setup Vue router
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#install-vue-router"&gt;
  &lt;/a&gt;
  Install Vue router
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install vue-router --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-a-routes-folder-and-add-a-homejs-fileadd-the-following-code"&gt;
  &lt;/a&gt;
  Create a routes folder and add a home.js file.Add the following code.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const home = () =&amp;gt;import ( '../components/app.vue')

export default [
    {
        path: '/home',
        component: home,
        name: 'home',
    },
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#head-over-to-the-resourcesjs-folder-and-create-a-file-called-routesjs-and-add-the-following-code"&gt;
  &lt;/a&gt;
  Head over to the resources/js folder and create a file called routes.js and add the following code.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Vue from 'vue'
import VueRouter from 'vue-router'
import home from './routes/home';

Vue.use(VueRouter);
export default new VueRouter({
    mode: 'history',
    scrollBehavior: (to, from, savedPosition) =&amp;gt; ({ y: 0 }), 
    routes: [
        ...home,
    ],
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-routes-to-appjs"&gt;
  &lt;/a&gt;
  Add routes to app.js
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#replace-the-code-in-your-resourcesjsappjs-with-the-code-below"&gt;
  &lt;/a&gt;
  Replace the code in your resources/js/app.js with the code below.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require('./bootstrap');
require('../sass/app.scss')
import Vue from 'vue'

window.Vue = require('vue');

// router
import router from './routes.js';
window.router = router;
window.Fire = new Vue();

const app = new Vue({
    el: '#app',
    router,
}).$mount('#app');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setup-laravel-routes"&gt;
  &lt;/a&gt;
  Setup Laravel routes
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#update-laravel-routes-in-webphp"&gt;
  &lt;/a&gt;
  Update Laravel routes in web.php
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('/{any?}', [
    function () {
        return view('welcome');
    }
])-&amp;gt;where('any', '.*');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run-the-application"&gt;
  &lt;/a&gt;
  Run the application
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#start-laravel-app"&gt;
  &lt;/a&gt;
  Start Laravel app
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#compile-components"&gt;
  &lt;/a&gt;
  Compile components
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#access-the-application-at-localhost8000"&gt;
  &lt;/a&gt;
  Access the application at localhost:8000
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#open-localhost8000"&gt;
  &lt;/a&gt;
  Open &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#link-to-github-repo"&gt;
  &lt;/a&gt;
  Link to Github repo.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#github-repository"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/johnwanjema/Getting-startes-with-Laravel-and-Vue-js"&gt;Github repository&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy coding
&lt;/h3&gt;

</description>
      <category>laravel</category>
      <category>vue</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building a Chrome Extension in Minutes</title>
      <author>Saji Wang</author>
      <pubDate>Fri, 01 Oct 2021 07:52:35 +0000</pubDate>
      <link>https://dev.to/codesphere/building-a-chrome-extension-in-minutes-3662</link>
      <guid>https://dev.to/codesphere/building-a-chrome-extension-in-minutes-3662</guid>
      <description>&lt;p&gt;Ever wondered how you can build your own Chrome Extension? It's not as hard as you might think!&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll create a simple Chrome Extension that converts all the text on a webpage into comic sans. Why would you ever want to do that? Because some people just like to see the world burn.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setting-up-our%C2%A0manifest"&gt;
  &lt;/a&gt;
  Setting up Our Manifest
&lt;/h3&gt;

&lt;p&gt;First, let's create an empty folder to house the contents of our extension. The minimum necessary file to define your extension is your manifest, which tells Chrome the defining characteristics of your extension.&lt;/p&gt;

&lt;p&gt;Create a file in your folder called &lt;code&gt;manifest.json&lt;/code&gt; and fill it with the following fields:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let's go over what the non-straightforward ones mean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Manifest_version&lt;/strong&gt;: You're most likely going to want to put 3, but in case you might need to have your manifest in a different format you can check out the other Manifest versions that Chrome accepts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt;: Here you can put scripts that run in the background of your extension&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Permissions&lt;/strong&gt;: These are the APIs that you are accessing with your extension. Here we are going to use &lt;em&gt;storage&lt;/em&gt;, to store persistent data, &lt;em&gt;activeTab&lt;/em&gt;, to check the active tab, and &lt;em&gt;scripting&lt;/em&gt;, to run operations on our active tab&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Action&lt;/strong&gt;: Here you can put different types of components of your extension. For this example, we are just going to create a popup menu, and tell Chrome to grab the popup menu from &lt;code&gt;popup.html&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h3&gt;

&lt;p&gt;The first part of this is by no means necessary, but I think it's helpful to show you how persistent data storage and background scripts work. Let's create a file called &lt;code&gt;background.js&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, let's create our &lt;code&gt;popup.html&lt;/code&gt; file. You can of course create a separate CSS file, but for simplicity's sake, we'll just use style tags.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Finally, let's actually do the conversion to Comic Sans when the button is pressed. Create a &lt;code&gt;popup.js&lt;/code&gt; file with the following code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And there you have it! The next step is loading it into Chrome.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#using-our-extension"&gt;
  &lt;/a&gt;
  Using Our Extension
&lt;/h3&gt;

&lt;p&gt;Loading our extension into chrome couldn't be easier. Go to the extensions menu with the url:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chrome://extensions/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure developer mode is enabled (can be done in the top right corner), and then press "Load unpacked".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ReIZGKrK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/641jfkygw95jvd7490v9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ReIZGKrK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/641jfkygw95jvd7490v9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From there, you can select the folder where all of our extension files are, and the extension will be loaded in!&lt;/p&gt;

&lt;p&gt;We can now use it like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQE1f26o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gygftv2fu0iuc53e8rq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQE1f26o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gygftv2fu0iuc53e8rq.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uploading-to-the-chrome%C2%A0store"&gt;
  &lt;/a&gt;
  Uploading to the Chrome Store
&lt;/h3&gt;

&lt;p&gt;Getting your app in the public Chrome store is a whole different ordeal, that Chrome documents very well. You can learn more about that here:&lt;br&gt;
&lt;a href="https://developer.chrome.com/docs/webstore/publish/"&gt;https://developer.chrome.com/docs/webstore/publish/&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h3&gt;

&lt;p&gt;So what extension are you going to make? At Codesphere, we actually just released an extension that allows you to open a Github repo in Codesphere straight from Github. You can check it out &lt;a href="https://chrome.google.com/webstore/detail/open-in-codesphere/ckanolmgmldllabkgmnalmgjhihohhog?hl=en-US"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--luDUHHHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58l1wpxx3pm9jkmdemfu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--luDUHHHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58l1wpxx3pm9jkmdemfu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading! Happy Coding from your good friends at &lt;a href="https://link.codesphere.com/EE"&gt;Codesphere&lt;/a&gt;, the next-generation cloud platform.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How I landed a job at Daily.dev</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 01 Oct 2021 07:49:22 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/how-i-landed-a-job-at-daily-dev-50ii</link>
      <guid>https://dev.to/dailydevtips1/how-i-landed-a-job-at-daily-dev-50ii</guid>
      <description>&lt;p&gt;You read it right. I got a new job!&lt;br&gt;
I'm now a software engineer at &lt;a href="http://daily.dev/"&gt;daily.dev&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I decided to write this article about getting hired and how it all came to be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-before"&gt;
  &lt;/a&gt;
  The before
&lt;/h2&gt;

&lt;p&gt;Let's first take some time to sketch my previous job.&lt;br&gt;
I was a senior full-stack developer working in the healthcare sector. Mainly focused on building apps (web/mobile) with PHP backends.&lt;/p&gt;

&lt;p&gt;And I really loved doing it!&lt;/p&gt;

&lt;p&gt;However, I also really like writing articles, being an active community member, and developing in general.&lt;/p&gt;

&lt;p&gt;It's the 5th of August, and daily.dev posted a job ad on Twitter, saying they were searching for a dev advocate.&lt;/p&gt;

&lt;p&gt;It sounded like the exact thing I was looking for. However, I knew I had no experience being an advocate.&lt;br&gt;
What I do have is years of experience in development and a major interest in being one.&lt;/p&gt;

&lt;p&gt;Besides that, I love their product. I've written about it, written for them, and I enjoy what they are doing for the developer community.&lt;/p&gt;

&lt;p&gt;So I applied for the job!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-waiting-game"&gt;
  &lt;/a&gt;
  The waiting game
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sEpQ4M9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1513530534585-c7b1394c6d51%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1471%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sEpQ4M9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1513530534585-c7b1394c6d51%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1471%26q%3D80" alt="Man waiting for results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seeing as I wasn't too sure if the job I applied for would fit me, I had a chat with my boss at the time, and we discussed my current contract.&lt;/p&gt;

&lt;p&gt;He offered me a permanent contract, which was amazing!&lt;br&gt;
I was over the moon as this gives one so much stability and recognition for the hard work.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;🎉 I got offered a permanent contract 🎉&lt;/p&gt;— Chris Bongers 🤓💻⚡️ (&lt;a class="mentioned-user" href="https://dev.to/dailydevtips1"&gt;@dailydevtips1&lt;/a&gt;
) &lt;a href="https://twitter.com/DailyDevTips1/status/1428639004157677568?ref_src=twsrc%5Etfw"&gt;August 20, 2021&lt;/a&gt;
&lt;/blockquote&gt; 
&lt;h2&gt;
  &lt;a href="#back-to-the-process"&gt;
  &lt;/a&gt;
  Back to the process
&lt;/h2&gt;

&lt;p&gt;Between applying and getting this offer, I got invited to a chat with the CTO daily.dev Ido Shamun.&lt;/p&gt;

&lt;p&gt;I was excited to make it to this step, as I was sure many people applied for the position.&lt;/p&gt;

&lt;p&gt;This first chat was quite casual. Ido has some questions for me, and we talked about my skills, views on things, and general things.&lt;/p&gt;

&lt;p&gt;Together we also talked about the fact I had no experience in the dev advocate world. Ido mentioned they also had an opening coming up for a developer.&lt;/p&gt;

&lt;p&gt;That sparked my interest! And we discussed if that would be a better fit for me.&lt;/p&gt;

&lt;p&gt;Perhaps you remember that tweet I sent out about getting the permanent contract?&lt;br&gt;
Ido saw that as well and mailed me back congratulating me, but also mentioning they would also like to offer me a position.&lt;/p&gt;

&lt;p&gt;And that we could progress to the technical interview step!&lt;/p&gt;

&lt;p&gt;I was over the moon but also a bit in doubt about what to do next.&lt;/p&gt;

&lt;p&gt;I had this permanent contract on one side and this fantastic dream job on the other.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-technical-interview"&gt;
  &lt;/a&gt;
  The technical interview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--690j-kzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1486312338219-ce68d2c6f44d%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1472%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--690j-kzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1486312338219-ce68d2c6f44d%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1472%26q%3D80" alt="Technical interview process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, it was a no-brainer to continue to the technical interview as that might stop the whole process.&lt;/p&gt;

&lt;p&gt;For this interview, a zoom meeting was planned for three hours. I would have to build a new feature on the daily.dev codebase.&lt;/p&gt;

&lt;p&gt;Seeing it was a lot of time investment, the guys over at daily.dev offered a 100$ for the session. I think this gives them as a company such cool and modern character!&lt;/p&gt;

&lt;p&gt;They value people and their time, even in interview steps.&lt;/p&gt;

&lt;p&gt;The interview started, and I was pretty nervous. By this time, I set up the codebase on my laptop with Ido's help because of some M1 issues.&lt;/p&gt;

&lt;p&gt;I was guided through the element I was making. Ido shared an online design file. At first, we talked about what needed to be done and how to tackle the process.&lt;/p&gt;

&lt;p&gt;From there, it was up to me to develop this new element.&lt;br&gt;
I had some guidance and was able to reflect with Ido on some of the ideas.&lt;/p&gt;

&lt;p&gt;In the end, we had a working new feature!&lt;/p&gt;

&lt;p&gt;It didn't all go according to plan, as my React was a bit rusty 😅.&lt;/p&gt;

&lt;p&gt;However, I think we both enjoyed the process and were on the same mind about it all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-what"&gt;
  &lt;/a&gt;
  Now what?
&lt;/h2&gt;

&lt;p&gt;After the technical interview, I might even be more nervous because now what?&lt;/p&gt;

&lt;p&gt;At this time, I got even more excited about this fantastic company, and having worked on the codebase made me super excited.&lt;/p&gt;

&lt;p&gt;Luckily, I didn't have to wait long, as the next day I got an email with the subject line: You made it 🚀&lt;/p&gt;

&lt;p&gt;It stated Ido found it great working with me and felt my technical skills.&lt;br&gt;
It did mention some concerns about my rusty React fundamentals, but nothing major.&lt;/p&gt;

&lt;p&gt;And that they would like to process to the next step: the CEO interview with Nimrod!&lt;/p&gt;

&lt;p&gt;I was super stoked!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ceo-interview"&gt;
  &lt;/a&gt;
  The CEO interview
&lt;/h2&gt;

&lt;p&gt;We didn't waste much time, and that same day I had a chat with Nimrod Kramer, CEO of daily.dev.&lt;/p&gt;

&lt;p&gt;This, again, was a pretty informal talk. Nimrod talked about the company, where they are at, and where they want to grow to.&lt;/p&gt;

&lt;p&gt;He had some questions to evaluate me as a person, and eventually, there was time for some questions from my side.&lt;/p&gt;

&lt;p&gt;In the end, I was super happy with the talk, and I felt like Nimrod had a mutual feeling about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-boom"&gt;
  &lt;/a&gt;
  And boom 💥
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9lbZDYc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632723236785/YwR1KtVKT.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lbZDYc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632723236785/YwR1KtVKT.jpeg" alt="Chris celebrating new job"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just like that, another day later, I got the fantastic news that all that was left to do was to send me an offer!&lt;/p&gt;

&lt;p&gt;And here we are. Today is my first day at daily.dev.&lt;br&gt;
I can't express how happy I am to be here and start my work as a software engineer for daily.dev.&lt;/p&gt;

&lt;p&gt;I would also like to thank Ido and Nimrod for this fantastic process.&lt;br&gt;
Even if I didn't get the job, I would have been happy with how they approached this. They value people and see them as actual people instead of resumes.&lt;/p&gt;

&lt;p&gt;It was a first going through a process like this, and I must say this is a way of hiring that many companies can learn from!&lt;/p&gt;

&lt;p&gt;Thank you, guys, and happy to be part of the team ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Adopt the right testing strategies for AI/ML applications</title>
      <author>GravelSoft</author>
      <pubDate>Fri, 01 Oct 2021 07:21:44 +0000</pubDate>
      <link>https://dev.to/gravelsoft/adopt-the-right-testing-strategies-for-ai-ml-applications-22m7</link>
      <guid>https://dev.to/gravelsoft/adopt-the-right-testing-strategies-for-ai-ml-applications-22m7</guid>
      <description>&lt;p&gt;The reception of frameworks dependent on Artificial Intelligence (AI) and Machine Learning (ML) has seen a dramatic ascent in the beyond couple of years and is relied upon to keep on doing as such. According to the figure by Markets and Markets, the worldwide AI market size will develop from USD 58.3 billion out of 2021 to USD 309.6 billion by 2026, at a CAGR of 39.7% during the previously mentioned conjecture time frame. In a new Algorithmia Survey, 71% of respondents referenced an increment in spending plans for AI/ML drives. A few associations are in any event, checking out multiplying their interests there. With the inconsistent development in these applications, the QA practices and testing techniques for AI/ML applications models likewise need to keep pace. &lt;/p&gt;

&lt;p&gt;A ML model life-cycle includes various advances. The first is preparing the model dependent on a bunch of capabilities. The second includes conveying the model, surveying model execution, and changing the model continually to make more exact forecasts. This is unique in relation to the conventional applications, where the model's result isn't really a precise number yet can be correct contingent upon the capabilities utilized for its preparation. The ML motor is based on certain prescient results from datasets and centers around consistent refining dependent on genuine information. Further, since it's difficult to get all potential information for a model, utilizing a little level of information to sum up outcomes for the bigger picture is foremost. &lt;/p&gt;

&lt;p&gt;Since ML frameworks have their design saturated with consistent change, customary QA strategies should be supplanted with those zeroing in on bringing the accompanying subtleties into the image. &lt;/p&gt;

&lt;p&gt;The QA approach in ML &lt;/p&gt;

&lt;p&gt;Conventional QA approaches require a well-informed authority to comprehend conceivable use case situations and results. These cases across modules and applications are reported in reality, which makes it simpler for experiment creation. Here the accentuation is more on understanding the usefulness and conduct of the application under test. Further, computerized instruments that draw from information bases empower the fast making of experiments with blended information. In a Machine Learning (ML) world, the attention is fundamentally on the choice made by the model and understanding the different situations/information that might have prompted that choice. This requires an inside and out comprehension of the potential results that lead to an end and information on information science. &lt;/p&gt;

&lt;p&gt;Besides, the information that is accessible for making a Machine Learning model is a subset of this present reality information. Subsequently, there is a requirement for the model to be re-designed reliably through genuine information. A thoroughness of manual follow-up is fundamental once the model is sent to upgrade the model's forecast abilities persistently. This additionally assists with beating trust issues inside the model as the choice would have been taken through human intercession, all things considered. QA concentrate should be more toward this path with the goal that the model is nearer to true precision. &lt;/p&gt;

&lt;p&gt;At long last, business acknowledgment testing in a conventional QA approach includes the making of an executable module and being tried underway. This customary QA approach is more unsurprising as similar arrangement of situations keep on being tried until another expansion is made to the application. In any case, the situation is distinctive with ML motors. Business acknowledgment testing, in such cases, ought to be viewed as a fundamental piece of refining the model to work on its precision, utilizing true utilization of the model.&lt;br&gt;
&lt;a href="https://gravelsoft.com/contact-us"&gt;https://gravelsoft.com/contact-us&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>AWS Database Migration</title>
      <author>john methew</author>
      <pubDate>Fri, 01 Oct 2021 06:55:14 +0000</pubDate>
      <link>https://dev.to/johnmethew18/aws-database-migration-2gjm</link>
      <guid>https://dev.to/johnmethew18/aws-database-migration-2gjm</guid>
      <description>&lt;p&gt;The word cloud is most commonly people are hearing now a days because of its technology revolutionize. Cloud technology is biggest change in IT industry as its reduce your almost all tress of infrastructure management including server, database, security, on time support team and etc. &lt;/p&gt;

&lt;p&gt;Cloud technology is one advance technique where just you can access all your business operation features in remote location with full security of database transformation.&lt;/p&gt;

&lt;p&gt;If you are looking for such a &lt;b&gt;expert cloud migration service&lt;/b&gt; for migrating your on side server database to cloud then Amazon AWS is the best option. &lt;/p&gt;

&lt;p&gt;Before you choose any &lt;a href="https://www.devitpl.com/cloud-migration/"&gt;AWS database migration service provider&lt;/a&gt; you should know some benefits of AWS database.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cost Effective&lt;/li&gt;
&lt;li&gt;Easy &lt;/li&gt;
&lt;li&gt;Reliable &lt;/li&gt;
&lt;li&gt;Minimal Downtime&lt;/li&gt;
&lt;li&gt;Supports a wide range of Databases&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Types of AWS Database Migration&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Homogeneous Database Migration&lt;/li&gt;
&lt;li&gt;Heterogeneous Database Migration&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Read full post with require screenshot about &lt;b&gt;&lt;a href="https://www.blog.devitpl.com/a-step-by-step-guide-to-aws-database-migration/"&gt;Step By Step Guide To AWS Database Migration&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>awsdatabasemigration</category>
      <category>cloudmigration</category>
      <category>devit</category>
      <category>cloudapplicationmigration</category>
    </item>
    <item>
      <title>Fullstack app (workshop) with distributed tracing and monitoring</title>
      <author>Dalibor Kundrat</author>
      <pubDate>Fri, 01 Oct 2021 06:41:48 +0000</pubDate>
      <link>https://dev.to/damikun/fullstack-app-workshop-with-distributed-tracing-and-monitoring-3i45</link>
      <guid>https://dev.to/damikun/fullstack-app-workshop-with-distributed-tracing-and-monitoring-3i45</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;I would like to announce the OpenSource Fullstack App Example (Workshop) that shows a specific stack implementation from frontend to backend, including identity and distributed tracing, logging and monitoring.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1RKqHd6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxc3x0zgrgpzumpxpfqp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1RKqHd6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxc3x0zgrgpzumpxpfqp.gif" alt="Fullstack NetCore and React workshop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-idea-behind-this"&gt;
  &lt;/a&gt;
  What is the idea behind this?
&lt;/h3&gt;

&lt;p&gt;There are many courses, trainings (paid/opensource) online that show you specific things, but not many that show you a fullstack implementation. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gJ14qwRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvyisv7tybemytl0zdkk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJ14qwRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvyisv7tybemytl0zdkk.png" alt="TroubleTraining architecture example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is not perfectly done! Take this as my notes. Some parts were exported from my custom CCMS that I use for factory automation field, and I remember when I was just starting out and did not have snippets to help me solve certain problems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-its-about"&gt;
  &lt;/a&gt;
  What it's about.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Showing simple frontend integration for a webhooks management app with login/logout via backend bff using React, Relay, Typescript.&lt;/li&gt;
&lt;li&gt;Shows exporting telemetry and logs to distributed monitoring endpoints with Opentelemetry and ElasticStack&lt;/li&gt;
&lt;li&gt;Shows a full backend implementation for webhooks, including self-hosted identityServer and protected Graphql API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JL76dKNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00va17s6ipyj99gmnq6q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JL76dKNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00va17s6ipyj99gmnq6q.png" alt="FullStack request distributed tracing example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#for-who-it-is"&gt;
  &lt;/a&gt;
  For who it is
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;You are a full-stack developer (an attempt is made to explain advanced topics).&lt;/li&gt;
&lt;li&gt;You are a .Net developer and use modern technologies.&lt;/li&gt;
&lt;li&gt;Or you are implementing a modern React and Relay frontend based on a .Net backend.&lt;/li&gt;
&lt;li&gt;You want to understand the advanced concept of security patterns as BFF.&lt;/li&gt;
&lt;li&gt;You want to know how to trace and monitor a distributed application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#topics"&gt;
  &lt;/a&gt;
  Topics
&lt;/h3&gt;

&lt;p&gt;This release contains 4 main topics that you can read about in detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/damikun/trouble-training/blob/main/Doc/Logging.md"&gt;Configuring Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/damikun/trouble-training/blob/main/Doc/OpenTelemetry.md"&gt;Configuring Telemetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/damikun/trouble-training/blob/main/Doc/Identity.md"&gt;Configure identity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/damikun/trouble-training/blob/main/Doc/ElasticSearch.md"&gt;Configure Monitoring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Some topics are language specific, others relate to a specific platform).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#repository"&gt;
  &lt;/a&gt;
  Repository:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/damikun/trouble-training"&gt;https://github.com/damikun/trouble-training&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>My Hacktoberfest Repos</title>
      <author>ZigRazor</author>
      <pubDate>Fri, 01 Oct 2021 06:40:00 +0000</pubDate>
      <link>https://dev.to/zigrazor/my-hacktoberfest-repos-2gm7</link>
      <guid>https://dev.to/zigrazor/my-hacktoberfest-repos-2gm7</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFDUvZmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nuvxbwdhxhbfwsazd7ka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFDUvZmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nuvxbwdhxhbfwsazd7ka.png" alt="Hacktoberfest"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-hacktoberfest-repos"&gt;
  &lt;/a&gt;
  My Hacktoberfest Repos
&lt;/h2&gt;

&lt;p&gt;👋🏻 Hi everyone, and Happy Hacktoberfest! &lt;/p&gt;

&lt;p&gt;This is my repos ready for the Hacktoberfest:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C++
&lt;/h3&gt;

&lt;p&gt;Header-Only C++ library for Graph Representation and Algorithms with a simple interface.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ZigRazor"&gt;
        ZigRazor
      &lt;/a&gt; / &lt;a href="https://github.com/ZigRazor/CXXGraph"&gt;
        CXXGraph
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Header-Only C++ Library for Graph Representation and Algorithms
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/ZigRazor/CXXGraph/blob/master/Icon.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--om3usTQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ZigRazor/CXXGraph/raw/master/Icon.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
CXXGraph&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/0d3ae99a9dcced770f5a2e6d2395999c121d9975f3f1816ee3b3902a3c8e6a92/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f632b2b2532302d2532333030353939432e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d63253242253242266f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/0d3ae99a9dcced770f5a2e6d2395999c121d9975f3f1816ee3b3902a3c8e6a92/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f632b2b2532302d2532333030353939432e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d63253242253242266f676f436f6c6f723d7768697465"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/6aea43d076c7bf00489f1b347caa33fe5c4d84a8af2983804f8702632f2669ec/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6769746875622532302d2532333132313031312e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d676974687562266c6f676f436f6c6f723d7768697465"&gt;&lt;img src="https://camo.githubusercontent.com/6aea43d076c7bf00489f1b347caa33fe5c4d84a8af2983804f8702632f2669ec/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6769746875622532302d2532333132313031312e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d676974687562266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://codecov.io/gh/ZigRazor/CXXGraph" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e0b9841f69ef29cc485b3d302097010f2d296ed1dde60f3adac4ba71370dcd04/68747470733a2f2f636f6465636f762e696f2f67682f5a696752617a6f722f43585847726170682f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d37373341513248395251" alt="codecov"&gt;&lt;/a&gt;
&lt;a href="https://www.codefactor.io/repository/github/zigrazor/cxxgraph" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0c66e00601b49f804758f834a946e1329891101b719d307d83d5566b5701a982/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f7a696772617a6f722f63787867726170682f6261646765" alt="CodeFactor"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph/blob/master/LICENSE"&gt;&lt;img src="https://camo.githubusercontent.com/a5f922a2d34eec75f084349c6c747c69d94eccd0935dc93e295a4a686d1c4564/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f5a696752617a6f722f43585847726170682e737667" alt="GitHub license"&gt;&lt;/a&gt; &lt;a href="https://GitHub.com/ZigRazor/CXXGraph/releases/"&gt;&lt;img src="https://camo.githubusercontent.com/e3a3bede7aca95abde3fcdbf4645750e7da6aa728bdbd9cd655771c9a244d670/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f5a696752617a6f722f43585847726170682e737667" alt="GitHub release"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/885c6402353e401234ea76f317d84186d70716c9db53a43b8a6d9daf037c712c/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f6769746875622f5a696752617a6f722f43585847726170683f7374796c653d706c6173746963"&gt;&lt;img src="https://camo.githubusercontent.com/885c6402353e401234ea76f317d84186d70716c9db53a43b8a6d9daf037c712c/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f616c657274732f6769746875622f5a696752617a6f722f43585847726170683f7374796c653d706c6173746963" alt="LGTM Alerts"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/6c41a6d75b013b0b28757348218ecf27f68e512a987e82bc9882fd3ab5021943/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f6370702f6769746875622f5a696752617a6f722f43585847726170683f7374796c653d706c6173746963"&gt;&lt;img src="https://camo.githubusercontent.com/6c41a6d75b013b0b28757348218ecf27f68e512a987e82bc9882fd3ab5021943/68747470733a2f2f696d672e736869656c64732e696f2f6c67746d2f67726164652f6370702f6769746875622f5a696752617a6f722f43585847726170683f7374796c653d706c6173746963" alt="LGTM Grade"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/57a85d2ce2ebfa08308aa0e27c14e3e668b0075ece44e2d030a4298c089c85e0/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657175697265642d472b2b372e332e302d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt; &lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d28ad01b651a380285f9c75dea25963780875fcea989db81cf85ef6a29adc048/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f72657175697265642d432b2b31372d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt; &lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e17b5a84de0de988ba21d8a70cd9bec1e3ef9c33bc75be3ec44c1cbff4b73604/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f52657175697265642d434d616b65332e392d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ae88698a90d8466f4372f695b517d9a65fc5b3f70cb781531c2074876047c846/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4275696c642d5061737365642d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt; &lt;a href="https://shields.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/35a3866fb1a06659337b8fe3e8bfb6ff6705c702e1fae78d400d47217b00b766/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f556e6974546573742d5061737365642d477265656e2e737667" alt="Generic badge"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Share on &lt;a href="https://twitter.com/intent/tweet?text=Header-Only%20C++%20Library%20for%20Graph%20Representation%20and%20Algorithms%204&amp;amp;url=https://github.com/ZigRazor/CXXGraph&amp;amp;hashtags=cpp,headeronly,library,opensource,developers" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c" alt="Tweet"&gt;&lt;/a&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#cxxgraph"&gt;CXXGraph&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#algorithm-explanation"&gt;Algorithm Explanation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#dijkstra"&gt;Dijkstra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#dial"&gt;Dial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#bfs"&gt;BFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#dfs"&gt;DFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#cycle-detection"&gt;Cycle Detection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#partition-algorithm-explanation"&gt;Partition Algorithm Explanation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#vertex-cut"&gt;Vertex-Cut&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#greedy-vertex-cut"&gt;Greedy Vertex-Cut&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#classes-explanation"&gt;Classes Explanation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#how-to-use"&gt;How to use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#unit-test-execution"&gt;Unit-Test Execution&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#google-test-installation"&gt;Google Test Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#how-to-compile-test"&gt;How to Compile Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#how-to-run-test"&gt;How to Run Test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#benchmark-execution"&gt;Benchmark Execution&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#google-benchmark-installation"&gt;Google Benchmark Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#how-to-compile-benchmark"&gt;How to Compile Benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#how-to-run-benchmark"&gt;How to Run Benchmark&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#packaging"&gt;Packaging&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#tarballs"&gt;Tarballs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#rpm"&gt;RPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#deb"&gt;DEB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ZigRazor/CXXGraph#install-and-uninstall"&gt;Install and Uninstall&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#install-linux-tarballs"&gt;Install Linux Tarballs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#install-rpm"&gt;Install RPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#install-deb"&gt;Install DEB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#install-from-source"&gt;Install From Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#example"&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#how-to-contribute"&gt;How to contribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#site"&gt;Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#support"&gt;Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#credits"&gt;Credits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ZigRazor/CXXGraph#we-are-looking-for"&gt;We are Looking for...&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Introduction&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;CXXGraph&lt;/strong&gt; is a small library, header only, that manages the Graph and it's algorithms in &lt;strong&gt;C++&lt;/strong&gt;. In other words a "Comprehensive C++ Graph Library".&lt;/p&gt;
&lt;h2&gt;
Algorithm Explanation&lt;/h2&gt;
&lt;h4&gt;
Dijkstra&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm" rel="nofollow"&gt;Graph Dijkstras Shortest Path Algorithm(Dijkstra's Shortest Path)&lt;/a&gt;
&lt;strong&gt;Dijkstra's Algorithm&lt;/strong&gt; is used to find the shortest path from a source node to all other reachable nodes in the graph. The algorithm initially assumes all the…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ZigRazor/CXXGraph"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;A C++ Library to which implements the structures and algorithms for finite automata, pushdown automata, and Turing machines. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ZigRazor"&gt;
        ZigRazor
      &lt;/a&gt; / &lt;a href="https://github.com/ZigRazor/CXXAutomata"&gt;
        CXXAutomata
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A C++ library for simulating automata and Turing machines
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
CXXAutomata&lt;/h1&gt;
&lt;p&gt;A C++ library for simulating automata and Turing machines&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ZigRazor/CXXAutomata"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#python"&gt;
  &lt;/a&gt;
  Python
&lt;/h3&gt;

&lt;p&gt;A Python implementation of simply configurable State Machines.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ZigRazor"&gt;
        ZigRazor
      &lt;/a&gt; / &lt;a href="https://github.com/ZigRazor/PyStateMachine"&gt;
        PyStateMachine
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Python State Machine 
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
PyStateMachine&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.python.org" rel="nofollow"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ka8K9yX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/devicons/devicon/master/icons/python/python-original.svg" alt="python" width="40" height="40"&gt;&lt;/a&gt;  Python State Machine&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.codefactor.io/repository/github/zigrazor/pystatemachine" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c18f6428bc5b47e3f0c90e5fb3408f7af11683972b0f65c895db8a2ef41a80ab/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f7a696772617a6f722f707973746174656d616368696e652f6261646765" alt="CodeFactor"&gt;&lt;/a&gt;
&lt;a href="https://www.codacy.com/gh/ZigRazor/PyStateMachine/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=ZigRazor/PyStateMachine&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/aae204bcacee65214897ed9c5e95fa14b752f3823be289937d1193701fb633d9/68747470733a2f2f6170702e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3137636130376636376261343430383962663238616633376261333638653162" alt="Codacy Badge"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://deepsource.io/gh/ZigRazor/PyStateMachine/?ref=repository-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6dff22b71afdc6e33ee9b6b8a286a2d32bc91ffec9cec6e53031a06172112530/68747470733a2f2f64656570736f757263652e696f2f67682f5a696752617a6f722f507953746174654d616368696e652e7376672f3f6c6162656c3d6163746976652b6973737565732673686f775f7472656e643d74727565" alt="DeepSource"&gt;&lt;/a&gt;
&lt;a href="https://deepsource.io/gh/ZigRazor/PyStateMachine/?ref=repository-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/d9055d4e631078870a9a68cef0fe504192ce72d465e2208c43093f743066bac3/68747470733a2f2f64656570736f757263652e696f2f67682f5a696752617a6f722f507953746174654d616368696e652e7376672f3f6c6162656c3d7265736f6c7665642b6973737565732673686f775f7472656e643d74727565" alt="DeepSource"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Introduction&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;PyStateMachine&lt;/strong&gt; is a Framework that support state machines in &lt;strong&gt;Python&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python3&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
How to Run&lt;/h3&gt;
&lt;p&gt;Work in Progess&lt;/p&gt;
&lt;h2&gt;
Example&lt;/h2&gt;
&lt;p&gt;Work in Progess&lt;/p&gt;
&lt;h2&gt;
Test Suite&lt;/h2&gt;
&lt;p&gt;Work in Progress&lt;/p&gt;
&lt;h2&gt;
How to contribute &lt;a href="https://GitHub.com/ZigRazor/PyStateMachine/graphs/contributors/"&gt;&lt;img src="https://camo.githubusercontent.com/581fe7a30c9fddc871a0aca71a3096401c38d12ed169cd14a74efaf5010bebe2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f5a696752617a6f722f507953746174654d616368696e652e737667" alt="GitHub contributors"&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Read the &lt;a href="https://github.com/ZigRazor/PyStateMachine/blob/main/CONTRIBUTING.md"&gt;CONTRIBUTING GUIDE&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Contact&lt;/h2&gt;
&lt;p&gt;E-Mail : &lt;a href="https://github.com/ZigRazor/PyStateMachinemailto:zigrazor@gmail.com"&gt;zigrazor@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/ZigRazor"&gt;GitHub Profile&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/fafcc15adae98d433dd7f7e4810d1985dd756e19c0995b129eb819c700b8bccc/68747470733a2f2f677076632e6172747572696f2e6465762f5a696752617a6f72"&gt;&lt;img src="https://camo.githubusercontent.com/fafcc15adae98d433dd7f7e4810d1985dd756e19c0995b129eb819c700b8bccc/68747470733a2f2f677076632e6172747572696f2e6465762f5a696752617a6f72" alt="Profile views"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/82bea85177f2d542509b6e27cfb5681787d2cad5853c8f0e7a502a3c0a82ac9b/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d5a696752617a6f722673686f775f69636f6e733d74727565267468656d653d746f6b796f6e69676874"&gt;&lt;img src="https://camo.githubusercontent.com/82bea85177f2d542509b6e27cfb5681787d2cad5853c8f0e7a502a3c0a82ac9b/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d5a696752617a6f722673686f775f69636f6e733d74727565267468656d653d746f6b796f6e69676874" alt="ZigRazor's github stats"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Support&lt;/h2&gt;
&lt;p&gt;To support me just add &lt;em&gt;&lt;strong&gt;Star&lt;/strong&gt;&lt;/em&gt; the project  &lt;a href="https://GitHub.com/ZigRazor/PyStateMachine/stargazers/"&gt;&lt;img src="https://camo.githubusercontent.com/12e7e3d53b015ad56b976644b5cc2bc8bcba021ae2891cf0ef910706a740e3d5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f5a696752617a6f722f507953746174654d616368696e652e7376673f7374796c653d736f6369616c266c6162656c3d53746172266d61784167653d32353932303030" alt="GitHub stars"&gt;&lt;/a&gt; or &lt;em&gt;&lt;strong&gt;follow me&lt;/strong&gt;&lt;/em&gt;  &lt;a href="https://github.com/ZigRazor?tab=followers"&gt;&lt;img src="https://camo.githubusercontent.com/8a8e16662b6c2f65545e7c5bb08b3c2a74c43b3d7f6632de86312c2a53935a78/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f5a696752617a6f722e7376673f7374796c653d736f6369616c266c6162656c3d466f6c6c6f77266d61784167653d32353932303030" alt="GitHub followers"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To get updated &lt;em&gt;&lt;strong&gt;watch&lt;/strong&gt;&lt;/em&gt; the project  &lt;a href="https://GitHub.com/ZigRazor/PyStateMachine/watchers/"&gt;&lt;img src="https://camo.githubusercontent.com/311c72805a48f13ebfb677fc8d7fbbf94b76ee150096a70b14e5b7277ab4de9d/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f77617463686572732f5a696752617a6f722f507953746174654d616368696e652e7376673f7374796c653d736f6369616c266c6162656c3d5761746368266d61784167653d32353932303030" alt="GitHub watchers"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Project Info&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/ZigRazor/PyStateMachine"&gt;&lt;img src="https://camo.githubusercontent.com/ad744e2f8ac3f48e6b6496b93f7bd7569a022e218c4a0d18204654328f813189/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f70696e2f3f757365726e616d653d5a696752617a6f72267265706f3d507953746174654d616368696e65" alt="Readme Card"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Used Languages&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ZigRazor/PyStateMachine"&gt;&lt;img src="https://camo.githubusercontent.com/bd07f2023452d723442011a7912ddf1ae6fe3f21217db404c19ce1481da9cb33/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170692f746f702d6c616e67732f3f757365726e616d653d5a696752617a6f72266c61796f75743d636f6d70616374" alt="Top Langs"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ZigRazor/PyStateMachine"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;p&gt;Happy Coding! 💻&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>githunt</category>
      <category>opensource</category>
      <category>contributorswanted</category>
    </item>
    <item>
      <title>Android — Basic Hilt setup with viewmodel + fragment</title>
      <author>Mahendran</author>
      <pubDate>Fri, 01 Oct 2021 06:31:07 +0000</pubDate>
      <link>https://dev.to/mahendranv/android-basic-hilt-setup-with-viewmodel-fragment-32fd</link>
      <guid>https://dev.to/mahendranv/android-basic-hilt-setup-with-viewmodel-fragment-32fd</guid>
      <description>&lt;p&gt;Hilt is a modern android DI framework for dependency injection. It is merely a wrapper around Dagger2. Forget &lt;a href="https://www.techyourchance.com/dagger-android-dead/"&gt;dagger-android&lt;/a&gt;, hilt brings a lot to our plate. This article covers steps to add hilt to the project and use along with viewmodel-fragment. &lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;This is the first installment in three part series.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part1: Android — Basic Hilt setup with viewmodel + fragment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part2:&lt;/strong&gt; Smoke, mirrors &amp;amp; HiltViewModel&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part3:&lt;/strong&gt; Fakes and espresso&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Sample project used for this article is available in github.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mahendranv"&gt;
        mahendranv
      &lt;/a&gt; / &lt;a href="https://github.com/mahendranv/hilt-espresso"&gt;
        hilt-espresso
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Sample app demonstrates usage of hilt and espresso
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;...&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-are-we-injecting"&gt;💉 What are we injecting?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#little-about-scope"&gt;🔘 Little about scope&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#code-it"&gt;💻 Code it&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#build-setup"&gt;Build setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#hiltandroidapp-setup-application-context"&gt;HiltAndroidApp setup (application context)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-data-source-and-modules"&gt;Creating data source and modules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#viewmodel-setup"&gt;Viewmodel setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fragment-setup"&gt;Fragment setup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;📖 Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-are-we-injecting"&gt;
  &lt;/a&gt;
  💉 What are we injecting?
&lt;/h2&gt;

&lt;p&gt;For this example, we're going to provide &lt;code&gt;Profile&lt;/code&gt; (a POJO) to a fragment through &lt;code&gt;ViewModel&lt;/code&gt;. For simplicity let's not use &lt;code&gt;LiveData&lt;/code&gt; in here. This is how the dependency graph looks like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ylnB8zX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6584143/135462794-dfc37daa-96e7-49f3-bcda-35cc8f911e7d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ylnB8zX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6584143/135462794-dfc37daa-96e7-49f3-bcda-35cc8f911e7d.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#little-about-scope"&gt;
  &lt;/a&gt;
  🔘 Little about scope
&lt;/h2&gt;

&lt;p&gt;Dependencies could be of different scope (how long it can be in memory/when it can be garbage collected). When we speak about the scope of a dependency, we can easily define it in terms of android components. Below is the oversimplified version of commonly used scopes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A user session details should be available throughout the app (Singleton)&lt;/li&gt;
&lt;li&gt;I have a tabbed screen and want to share some in-memory fields between fragments (Activity)&lt;/li&gt;
&lt;li&gt;My data is bound to current screen/fragment. When it is destroyed purge the dependency as well (Fragment)&lt;/li&gt;
&lt;li&gt;Associate my dependency with ViewModel. Depends on the viewmodel's scope (activity / fragment) let my dependency live (ViewModelScope)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For our use-case, we'll inject DataRepository to the viewmodel using hilt. And there are few improvements on creating viewmodel for the fragment. We'll see it end to end in the following section.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#code-it"&gt;
  &lt;/a&gt;
  💻 Code it
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#build-setup"&gt;
  &lt;/a&gt;
  Build setup
&lt;/h3&gt;

&lt;p&gt;Like any framework we write less with hilt because most of the code is &lt;code&gt;generated&lt;/code&gt; for us. For that purpose, we'll use hilt gradle plugin. And, hilt is expected to be used in multiple modules, so extract out the version to project level gradle file and use it in submodules.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="c1"&gt;// File: build.gradle&lt;/span&gt;

&lt;span class="k"&gt;buildscript&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ext&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;hilt_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'2.38.1'&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;repositories&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// redacted&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// redacted&lt;/span&gt;
        &lt;span class="n"&gt;classpath&lt;/span&gt; &lt;span class="s2"&gt;"com.google.dagger:hilt-android-gradle-plugin:${hilt_version}"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight gradle"&gt;&lt;code&gt;&lt;span class="c1"&gt;// File: app/build.gradle&lt;/span&gt;

&lt;span class="n"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="s1"&gt;'com.android.application'&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="s1"&gt;'kotlin-android'&lt;/span&gt;
    &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="s1"&gt;'dagger.hilt.android.plugin'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Hilt&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s2"&gt;"com.google.dagger:hilt-android:${hilt_version}"&lt;/span&gt;
    &lt;span class="n"&gt;kapt&lt;/span&gt; &lt;span class="s2"&gt;"com.google.dagger:hilt-compiler:${hilt_version}"&lt;/span&gt;

    &lt;span class="c1"&gt;// Fragment / viewmodel&lt;/span&gt;
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;lifecycle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"2.3.1"&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s2"&gt;"androidx.lifecycle:lifecycle-viewmodel-ktx:${lifecycle}"&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s2"&gt;"androidx.lifecycle:lifecycle-livedata-ktx:${lifecycle}"&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s2"&gt;"androidx.fragment:fragment-ktx:1.3.6"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the project level gradle we tell the build system to use hilt. And the app level gradle applies the plugin so that it can skim through our codebase and generate dependencies for us. &lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hiltandroidapp-setup-application-context"&gt;
  &lt;/a&gt;
  HiltAndroidApp setup (application context)
&lt;/h3&gt;

&lt;p&gt;A singleton is expected to be alive through the app session.  Here, the dependency lives with application. In order to tell hilt about the application scope, create and annotate application class with &lt;code&gt;HiltAndroidApp&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.app.Application&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dagger.hilt.android.HiltAndroidApp&lt;/span&gt;

&lt;span class="nd"&gt;@HiltAndroidApp&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above step is needed because the application context is provided through generated application class. Make the project and inspect the contents of &lt;code&gt;Hilt_MyApp&lt;/code&gt; class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// generated source&lt;/span&gt;
&lt;span class="nc"&gt;DaggerMyApp_HiltComponents_SingletonC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;applicationContextModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ApplicationContextModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Hilt_MyApp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above steps enables smoother injection of application context to RoomDB / SharedPreference - what not.&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-data-source-and-modules"&gt;
  &lt;/a&gt;
  Creating data source and modules
&lt;/h3&gt;

&lt;p&gt;Code speaks &lt;a href="https://fnune.com/2020/12/05/code-is-worth-a-thousand-words/"&gt;thousand words&lt;/a&gt;. Below code block shows resource and the data source.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="c1"&gt;// A resource&lt;/span&gt;
&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// A simple interface which returns the resource. &lt;/span&gt;
&lt;span class="c1"&gt;// This will help us mock the data source when executing tests.&lt;/span&gt;
&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;DataRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getProfile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Profile&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Simple implementation of data source&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DataRepoImpl&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DataRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getProfile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Profile&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="nc"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Bruce Wayne"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From here, we'll work towards creating dependencies that can be recognized by Hilt. &lt;/p&gt;

&lt;p&gt;First, annotate &lt;code&gt;DataRepoImpl&lt;/code&gt; constructor with &lt;code&gt;@Inject&lt;/code&gt;.  This puts our class under Dagger/Hilt's radar.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DataRepoImpl&lt;/span&gt; &lt;span class="nd"&gt;@Inject&lt;/span&gt; &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DataRepository&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second, create a module that can provide dependency to view model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@InstallIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ViewModelComponent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Scope our dependencies&lt;/span&gt;
&lt;span class="nd"&gt;@Module&lt;/span&gt;
&lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProfileModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// To be read as — When someone asks for DataRepository, create a DataRepoImpl and return it.&lt;/span&gt;
    &lt;span class="nd"&gt;@Binds&lt;/span&gt;
    &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getProfileSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DataRepoImpl&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;DataRepository&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#viewmodel-setup"&gt;
  &lt;/a&gt;
  Viewmodel setup
&lt;/h3&gt;

&lt;p&gt;ViewModels can tell ask hilt to provide dependencies. A simple way to ask dependencies is to mark viewmodel with &lt;code&gt;HiltViewModel&lt;/code&gt; annotation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@HiltViewModel&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProfileViewModel&lt;/span&gt; &lt;span class="nd"&gt;@Inject&lt;/span&gt; &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DataRepository&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getProfile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;Profile&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getProfile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we're doing constructor injection on viewmodel. Doing the same without Hilt will require a &lt;a href="https://developer.android.com/reference/androidx/lifecycle/ViewModelProvider.Factory"&gt;Factory&lt;/a&gt; which pass on the dependencies to the constructor. Reason is the lifecycle of the viewmodel is managed by a lifecycle owner like activity/fragment. Internal mechanics of this injection is covered in last section. On to the fragment...&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fragment-setup"&gt;
  &lt;/a&gt;
  Fragment setup
&lt;/h3&gt;

&lt;p&gt;Fragment or activity is identified as &lt;code&gt;AndroidEntryPoint&lt;/code&gt; in hilt. A fragment which is maked with &lt;code&gt;AndroidEntryPoint&lt;/code&gt; will inject the dependencies without much boilerplate code. And this is our ProfileFragment which consumes the viewmodel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@AndroidEntryPoint&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProfileFragment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;viewModel&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;viewModels&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProfileViewModel&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;// redacted&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onViewCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onViewCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// Here we go -- the profile resource is shown to the UI&lt;/span&gt;
        &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextView&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name_label&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;viewModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getProfile&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it!!&lt;/p&gt;

&lt;p&gt;Nothing much changed, instead of creating a factory and use it in &lt;code&gt;viewModels&lt;/code&gt; delegate we annotated with &lt;code&gt;AndroidEntryPoint&lt;/code&gt;. And the resource is available to us and components are less coupled now.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ux4UptHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6584143/135462680-9b99230e-ae7e-4170-88c9-c7fb5907a40f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ux4UptHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6584143/135462680-9b99230e-ae7e-4170-88c9-c7fb5907a40f.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  📖 Resources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mahendranv/hilt-espresso"&gt;Sample project source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dagger.dev/"&gt;dagger.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mahendranv/hilt-espresso/commit/2ea5e386283ee4064d11b73e03fe8b31dfa69c25"&gt;Commit: migrating from manual injection to hilt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>android</category>
      <category>hilt</category>
      <category>dagger</category>
    </item>
    <item>
      <title>RxJS - Multicast Operator</title>
      <author>Luca Del Puppo</author>
      <pubDate>Fri, 01 Oct 2021 06:23:32 +0000</pubDate>
      <link>https://dev.to/this-is-learning/rxjs-multicast-operator-1k9i</link>
      <guid>https://dev.to/this-is-learning/rxjs-multicast-operator-1k9i</guid>
      <description>&lt;p&gt;Hi Folk 👋,&lt;br&gt;
in the previous articles we've seen that when we subscribe to an observable, the observable restarts every time and do not remember the last value emitted.&lt;br&gt;
In some cases, this behaviour can not be the right solution, so today I'll show you how to share the values using the Multicast Operators.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://rxjs.dev/api/operators/share"&gt;share&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream hot.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
marble share
{
    source a:           +--0-1-2-3-4-#
    operator share:     {
        +--0-1-2-3-4-#
        ......+2-3-4-#
    }
}
*/&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;share&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Processing: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="nx"&gt;share&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;source1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subscription 1: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subscription 1 complete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;source1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subscription 2: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subscription 2 complete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;


&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;source1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subscription 3: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subscription 3 complete&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;7000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;Processing:  0
subscription 1:  0
Processing:  1
subscription 1:  1
Processing:  2
subscription 1:  2
subscription 2:  2
Processing:  3
subscription 1:  3
subscription 2:  3
Processing:  4
subscription 1:  4
subscription 2:  4
subscription 1 complete
subscription 2 complete
Processing:  0
subscription 3:  0
Processing:  1
subscription 3:  1
Processing:  2
subscription 3:  2
Processing:  3
subscription 3:  3
Processing:  4
subscription 3:  4
subscription 3 complete
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DtWgObyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7kq3wgsd7p6daltyihrd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DtWgObyx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7kq3wgsd7p6daltyihrd.jpg" alt="share Marble Diagram"&gt;&lt;/a&gt;&lt;br&gt;
This operator can help us when we need to share the value of an observable during its execution. But what does it mean? It means that the first subscription starts the observable and all the next subscriptions that subscribe to this observable do not run a new instance of the observable but they receive the same values of the first subscription, thus losing all the previous values emitted before their subscription.&lt;br&gt;
It's important to remember that when the observable is completed, and another observer subscribes itself to the observable, the shared operator resets the observable and restarts its execution from the beginning.&lt;br&gt;
Anyway, sometimes our code needs to prevent the restarting of our observables, but what can we do in these cases?&lt;br&gt;
It's simple! The share operator exposes us some options: resetOnComplete, resetOnError, resetOnRefCountZero, and each of these options can help us to prevent the resetting of the observables in different cases. These options can work or with a simple boolean value that enables or disables the behaviour, or we can pass a notifier factory that returns an observable which grants more fine-grained control over how and when the reset should happen.&lt;br&gt;
The resetOnComplete option prevents the resetting after the observable's completion. So, if it is enabled when another observer subscribes to an observable already completed this observer receives immediately the complete notification.&lt;br&gt;
The resetOnError option prevents the resetting of the observable after an error notification.&lt;br&gt;
The resetOnRefCountZero option works with the number of observers subscribed instead. It prevents the resetting if there aren't any observer subscribed. To better understand, if all the subscriptions of our observable are unsubscribed, and this option is enabled, the observable isn't reset. otherwise, if this option is disabled, the observable restarts from the beginning at the next subscription.&lt;br&gt;
Here's an example using the resetOnRefCountZero option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;share&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;take&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nx"&gt;share&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;resetOnRefCountZero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscriptionOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subscription 1: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;subscriptionOne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;1300&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subscription 2: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="mi"&gt;1700&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;subscription 3: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;subscription 1:  0
subscription 2:  1
subscription 2:  2
subscription 3:  0
subscription 3:  1
subscription 3:  2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8-UbwY9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6ebecgs8rcymrtwz8is.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8-UbwY9o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q6ebecgs8rcymrtwz8is.jpg" alt="shared with resetOnRefCountZero option Marble Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://rxjs.dev/api/operators/shareReplay"&gt;shareReplay&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Share source and replay specified number of emissions on subscription.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;shareReplay&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tap&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs/operators&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obs$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;shared$&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obs$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;tap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="nx"&gt;shareReplay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;shared$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub A: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;shared$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sub B: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;0
sub A:  0
1
sub A:  1
2
sub A:  2
sub B:  0
sub B:  1
sub B:  2
3
sub A:  3
sub B:  3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PWfL3HAU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kud1ghis4m39geeqsuvf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PWfL3HAU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kud1ghis4m39geeqsuvf.jpg" alt="shareReplay Marble Diagram"&gt;&lt;/a&gt;&lt;br&gt;
In some cases, when we share the values between multiple observers, if an observer subscribes to an already started observable, we also need to replay all the previous already emitted values. To resolve this problem we can use the shareReplay operator.&lt;br&gt;
This operator shares the emitted values and if another observer subscribes to the observable it replays the previous values.&lt;br&gt;
The number of values replayed can be configured: by default all the values already emitted are emitted again, but we can also indicate or a maximum number of elements to remember or a maximum time length.&lt;/p&gt;

&lt;p&gt;Ok guys, that's all for today.&lt;br&gt;
If you are interested in trying the code of this article, you can find it &lt;a href="https://github.com/puppo/rxjs-getting-started/tree/12-multicasting-operators"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next article, I'll show you how to create your custom operators.&lt;/p&gt;

&lt;p&gt;See you soon!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>rxjs</category>
    </item>
    <item>
      <title>Responsive Syntax Highlighter Using Highlighter JS</title>
      <author>Bhavyashah</author>
      <pubDate>Fri, 01 Oct 2021 06:11:45 +0000</pubDate>
      <link>https://dev.to/bhavyashah/responsive-syntax-highlighter-using-highlighter-js-2079</link>
      <guid>https://dev.to/bhavyashah/responsive-syntax-highlighter-using-highlighter-js-2079</guid>
      <description>&lt;p&gt;I have created responsive Syntax highlighter for website &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/blogtriggers/embed/powYWvY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>html</category>
      <category>codepen</category>
    </item>
    <item>
      <title>Develop An Azure Chatbot using QnA Maker</title>
      <author>john methew</author>
      <pubDate>Fri, 01 Oct 2021 06:05:03 +0000</pubDate>
      <link>https://dev.to/johnmethew18/develop-an-azure-chatbot-using-qna-maker-3628</link>
      <guid>https://dev.to/johnmethew18/develop-an-azure-chatbot-using-qna-maker-3628</guid>
      <description>&lt;p&gt;Azure Chatbot services is an Artificial intelligent (AI) powered by Microsoft. The Azure chatbot intelligent agent are enough capable to making conversation with real human without any developer help require. and in now a days most the website have such a AI based chatbot to answered regular asked questions.&lt;/p&gt;

&lt;p&gt;The chatbot is mainly useful in healthcare, real estate, eCommerce and banking sector to speedy solving basic query of customer.&lt;/p&gt;

&lt;p&gt;If you’re someone looking to build a chatbot for your service, this post is just for you.&lt;/p&gt;

&lt;p&gt;The post is written by DEV Information Technology Ltd developer with detailed explanations of &lt;a href="https://www.blog.devitpl.com/how-to-develop-an-azure-chatbot-using-qna-maker/"&gt;Azure bot development with QnA maker&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>chatbotdevelopment</category>
      <category>azure</category>
    </item>
  </channel>
</rss>
