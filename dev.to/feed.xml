<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Weekly web development resources #89</title>
      <author>Vincent Will</author>
      <pubDate>Wed, 29 Sep 2021 06:23:53 +0000</pubDate>
      <link>https://dev.to/vincenius/weekly-web-development-resources-89-5chl</link>
      <guid>https://dev.to/vincenius/weekly-web-development-resources-89-5chl</guid>
      <description>

&lt;h2&gt;
  &lt;a href="#burdy"&gt;
  &lt;/a&gt;
  &lt;a href="https://burdy.io/"&gt;Burdy&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://burdy.io/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H8NkJKIU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/89/burdy.jpg" alt="Burdy"&gt;&lt;/a&gt;&lt;br&gt;
An open-source headless CMS, which integrates well with Next.js.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#basic-pattern-repository"&gt;
  &lt;/a&gt;
  &lt;a href="https://patterns.helloyes.dev/"&gt;Basic Pattern Repository&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://patterns.helloyes.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ssfgynHY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/89/patterns.jpg" alt="Basic Pattern Repository"&gt;&lt;/a&gt;&lt;br&gt;
A collection of hand-coded SVG 's, ready to be used in inline SVG or however you like.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-i-make-css-art"&gt;
  &lt;/a&gt;
  &lt;a href="https://yosracodes.hashnode.dev/how-i-make-css-art"&gt;How I Make CSS Art&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://yosracodes.hashnode.dev/how-i-make-css-art"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OWWtMIF4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/89/css-art.jpg" alt="How I Make CSS Art"&gt;&lt;/a&gt;&lt;br&gt;
A nice article by Yosra Emad on how she approaches CSS Art.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cccreate"&gt;
  &lt;/a&gt;
  &lt;a href="https://cccreate.co/"&gt;cccreate&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cccreate.co/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FRp7MfJ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/89/cccreate.jpg" alt="cccreate"&gt;&lt;/a&gt;&lt;br&gt;
A carefully curated collection of tools &amp;amp; resources for web creators.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#saveddit"&gt;
  &lt;/a&gt;
  &lt;a href="https://saveddit4reddit.herokuapp.com/"&gt;Saveddit&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://saveddit4reddit.herokuapp.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dr4WCCdQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/89/saveddit.jpg" alt="Saveddit"&gt;&lt;/a&gt;&lt;br&gt;
A tool to search and filter your saved Reddit posts and comments.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#todays-28-best-react-blogs"&gt;
  &lt;/a&gt;
  &lt;a href="https://bloggingfordevs.com/react-blogs/"&gt;Today's 28 Best React Blogs&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://bloggingfordevs.com/react-blogs/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ORrdoneF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/89/react-blogs.jpg" alt="Today's 28 Best React Blogs"&gt;&lt;/a&gt;&lt;br&gt;
A list of React blogs, where you'll find news and tutorials about React.js, Gatsby, Next.js, and React Native.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#launchin30html"&gt;
  &lt;/a&gt;
  &lt;a href="https://launchin30html.carrd.co/"&gt;#launchin30HTML&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://launchin30html.carrd.co/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CCgnhysT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/89/build-product.jpg" alt="#launchin30HTML"&gt;&lt;/a&gt;&lt;br&gt;
A project by Lucian Tartea, where he builds and launches a product in 30 days with just HTML and CSS.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#animated-backgrounds"&gt;
  &lt;/a&gt;
  &lt;a href="https://animatedbackgrounds.me/"&gt;Animated Backgrounds&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://animatedbackgrounds.me/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y50s-tYh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/89/backgrounds.jpg" alt="Animated Backgrounds"&gt;&lt;/a&gt;&lt;br&gt;
A collection of 30+ animated backgrounds for websites and blogs.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#guide-to-browser-cookies"&gt;
  &lt;/a&gt;
  &lt;a href="https://prateeksurana.me/blog/javascript-developer-guide-to-browser-cookies/"&gt;Guide to browser cookies&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://prateeksurana.me/blog/javascript-developer-guide-to-browser-cookies/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nb_bIUMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/89/browser-cookies.jpg" alt="Guide to browser cookies"&gt;&lt;/a&gt;&lt;br&gt;
Learn how browser cookies work and how you can access, manipulate and control their visibility across browser with JavaScript.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#partytown"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/BuilderIO/partytown"&gt;Partytown&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/BuilderIO/partytown"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2w9PGAgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://wweb.dev/weekly/content/89/partytown.jpg" alt="Partytown"&gt;&lt;/a&gt;&lt;br&gt;
A lazy-loaded 6kb library to help relocate resource intensive scripts into a web worker.&lt;/p&gt;




&lt;p&gt;To see all the weeklies check: &lt;a href="https://wweb.dev/weekly"&gt;wweb.dev/weekly&lt;/a&gt;&lt;/p&gt;

</description>
      <category>weekly</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 10 Windows keyboard Shortcut Keys üöÄüöÄ</title>
      <author>Shubham Jadhav</author>
      <pubDate>Wed, 29 Sep 2021 05:54:39 +0000</pubDate>
      <link>https://dev.to/dev_shubham/top-10-windows-keyboard-shortcut-keys-4o7g</link>
      <guid>https://dev.to/dev_shubham/top-10-windows-keyboard-shortcut-keys-4o7g</guid>
      <description>&lt;p&gt;Hello Guys, Today in this article I am showing top 10 windows shortcut key for beginners. &lt;br&gt;
  So, Let's start today's article... &lt;/p&gt;

&lt;p&gt;‚Ä¢ Top 10 Windows Keyboard &lt;br&gt;
  Shortcut key üëá&lt;br&gt;
  ( "Win" mean Windows Key )&lt;/p&gt;

&lt;p&gt;üëâ Win + E :- &lt;br&gt;
   This shortcut key quickly open your file manager.&lt;/p&gt;

&lt;p&gt;üëâ Win + UP/DOWN Arrow :- &lt;br&gt;
   Win + Down arrow key minimize working window and Win + Up arrow used to full screen working window. &lt;/p&gt;

&lt;p&gt;üëâ Win + Left/Right Arrow :- &lt;br&gt;
   This short cut key used to split screen in two parts when you press Win + Left arrow keys working window take place in left side of screen and when you press Win + Right arrow working window in right side of screen. &lt;/p&gt;

&lt;p&gt;üëâ Win + D :- &lt;br&gt;
   This keys use for minimize all open tabs or window in your pc.&lt;/p&gt;

&lt;p&gt;üëâ Ctrl + N :- &lt;br&gt;
   Quick creating new file in your desktop. &lt;/p&gt;

&lt;p&gt;üëâ Ctrl + Shift + N :- &lt;br&gt;
   This keys create quick new folder in your desktop. &lt;/p&gt;

&lt;p&gt;üëâ Win + ";" :- &lt;br&gt;
   How to open emoji panel in your desktop?? Then press Win + ";" and see your emoji panel. &lt;/p&gt;

&lt;p&gt;üëâ Win + Shift + S :- &lt;br&gt;
   Take a advance screenshot in your pc by using Win + Shift + S. You can take rectangle, square and free-form screen shots.&lt;/p&gt;

&lt;p&gt;üëâ Win + V :- &lt;br&gt;
   You need copied text which you copy 5-6 hours before then press Win + V and see your clipboard history. &lt;/p&gt;

&lt;p&gt;üëâ Win + L :- &lt;br&gt;
   Lock your pc quickly by pressing Win + L keys. &lt;/p&gt;

&lt;p&gt;üôè Thanks for reading.... &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Is there any way on how we can integrate todoist or any Kanban board service in our laravel app? </title>
      <author>SYAUQIZAIDAN KHAIRAN KHALAF</author>
      <pubDate>Wed, 29 Sep 2021 05:28:28 +0000</pubDate>
      <link>https://dev.to/syaufy/is-there-any-way-on-how-we-can-integrate-todoist-or-any-kanban-board-service-in-our-laravel-app-35hi</link>
      <guid>https://dev.to/syaufy/is-there-any-way-on-how-we-can-integrate-todoist-or-any-kanban-board-service-in-our-laravel-app-35hi</guid>
      <description>&lt;p&gt;Right now, I would love to have a kanban board feature in my laravel app. But most tutorials on the internet explain how we make it with vue, where my application is built with laravel completely without vue. Then I thought what if we look for a kanban board application that provides integration services on our website?&lt;/p&gt;

&lt;p&gt;Therefore I want to ask, is there a way or is there an application that provides this service? if so, can you show me how?&lt;/p&gt;

&lt;p&gt;Regards, Syauqi&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>todoist</category>
      <category>api</category>
    </item>
    <item>
      <title>Replace std::find_if in 80% of the cases</title>
      <author>Sandor Dargo</author>
      <pubDate>Wed, 29 Sep 2021 05:25:52 +0000</pubDate>
      <link>https://dev.to/sandordargo/replace-std-findif-in-80-of-the-cases-2kl2</link>
      <guid>https://dev.to/sandordargo/replace-std-findif-in-80-of-the-cases-2kl2</guid>
      <description>&lt;p&gt;If you've been following the posts on this blog, you know that &lt;a href="https://www.sandordargo.com/blog/2020/05/13/loops-vs-algorithms"&gt;I'm a big fan of using standard algorithms&lt;/a&gt; in any programming language, in particular in C++.&lt;/p&gt;

&lt;p&gt;They contain fewer bugs, in general they have better performance and the standard algorithms are more expressive.&lt;/p&gt;

&lt;p&gt;The last point on expressiveness is very important to me and after I saw a not-so-ideal example of using &lt;code&gt;std::find_if&lt;/code&gt; in our codebase, I wanted to have a deeper look.&lt;/p&gt;

&lt;p&gt;So I went through all our usages of &lt;code&gt;find_if&lt;/code&gt; and I found that it was only used in a proper way in about 20% of all the cases.&lt;/p&gt;

&lt;p&gt;This means that the Pareto principle applies here too. In 80% of the cases, &lt;code&gt;std::find_if&lt;/code&gt; should not have been used.&lt;/p&gt;

&lt;p&gt;But what else should have been used? And why?&lt;/p&gt;

&lt;p&gt;I brought some examples, where I changed the variable names.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-there-any-such-element"&gt;
  &lt;/a&gt;
  Is there any such element?
&lt;/h2&gt;

&lt;p&gt;Here is the first example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
           &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;find_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="n"&gt;myType&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ENUM_ELEMENT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
              &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You might also see a close variant of the above example in your code base. Sometimes, there is a temporary variable to store the returned value of &lt;code&gt;find_if&lt;/code&gt;, even if it's used only once:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;foundElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;find_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="n"&gt;myType&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ENUM_ELEMENT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;foundElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what goes on here? &lt;/p&gt;

&lt;p&gt;First of all, what does &lt;code&gt;find_if&lt;/code&gt; return? &lt;/p&gt;

&lt;p&gt;It returns an iterator to the first element of the searched range that satisfies the condition. If there is no such item, it returns an iterator pointing beyond the last element, in other words, to &lt;code&gt;end()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The function's return value in the above examples is a boolean, we simply compare whether &lt;code&gt;find_if&lt;/code&gt; returns anything else than the &lt;code&gt;end()&lt;/code&gt; of the examined collection. In other words, it checks whether the &lt;code&gt;find _if&lt;/code&gt; returns an iterator to any of the elements in &lt;code&gt;myCollection&lt;/code&gt;. Yet in other words, we check if &lt;em&gt;any of&lt;/em&gt; &lt;code&gt;myCollection&lt;/code&gt;'s elements satisfy the condition passed to &lt;code&gt;find_if&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alright, this last sentence should give us the hint. We can replace the above expression with &lt;code&gt;std::any_of&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;any_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;myCollection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[](&lt;/span&gt;      &lt;span class="n"&gt;myType&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ENUM_ELEMENT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What did we gain? We have a comparison less and potentially a temporary variable less as well. At the same time, our code is shorter, more expressive and we didn't even have to touch the lambda we wrote.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-is-no-such-element"&gt;
  &lt;/a&gt;
  There is no such element!
&lt;/h2&gt;

&lt;p&gt;A bit different, yet similar example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;aPotentialItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;find_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;iName&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;iName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aPotentialItem&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;aPotentialItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we don't use &lt;code&gt;!=&lt;/code&gt; as a comparison between the &lt;code&gt;end()&lt;/code&gt; of the collection and the return value of &lt;code&gt;find_if&lt;/code&gt;, but &lt;code&gt;==&lt;/code&gt; instead. Which means that we check whether there is no element in a given range complying to our condition.&lt;/p&gt;

&lt;p&gt;In other words, we check whether &lt;em&gt;none of&lt;/em&gt; the elements satisfy our condition.&lt;/p&gt;

&lt;p&gt;You guessed it right, in such cases we can replace &lt;code&gt;find_if&lt;/code&gt; with &lt;code&gt;none_of&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;none_of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;iName&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;anItem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inItem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;iName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nb"&gt;nullptr&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;aPotentialItem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our gains are similar. We still spare comparison and potentially a temporary as well. Besides, our code is more terse, more expressive and we didn't even have to touch the lambda we use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-to-do"&gt;
  &lt;/a&gt;
  So what to do?
&lt;/h2&gt;

&lt;p&gt;Based on the cases I saw, I came up with this rule rule of thumb:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the result of &lt;code&gt;find_if&lt;/code&gt; is compared using &lt;code&gt;!= end()&lt;/code&gt; use &lt;code&gt;any_of&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;if the result of &lt;code&gt;find_if&lt;/code&gt; is compared using &lt;code&gt;== end()&lt;/code&gt; use &lt;code&gt;none_of&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep &lt;code&gt;find_if&lt;/code&gt; only if you want to interact with the object pointed by the returned iterator. If the outcome is just a boolean, like in the above example, you have an alternative still in the standard library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This was a short post on how to use the C++ standard algorithms in a better way than often it is used. &lt;code&gt;std::find_if&lt;/code&gt; is often misused, probably because it's something more people know about than the alternatives.&lt;/p&gt;

&lt;p&gt;In the vast majority of the cases I saw, it can be replaced either with &lt;code&gt;std::any_of&lt;/code&gt; or &lt;code&gt;std::none_of&lt;/code&gt; which improves the readability of the given piece of code a lot.&lt;/p&gt;

&lt;p&gt;Go and check in your codebases how &lt;code&gt;std::find_if&lt;/code&gt; is used. Do you have similar findings?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-deeper"&gt;
  &lt;/a&gt;
  Connect deeper
&lt;/h2&gt;

&lt;p&gt;If you liked this article, please &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hit on the like button,
&lt;/li&gt;
&lt;li&gt;
&lt;a href="http://eepurl.com/gvcv1j"&gt;subscribe to my newsletter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;and let's connect on &lt;a href="https://twitter.com/SandorDargo"&gt;Twitter&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>cpp</category>
      <category>stl</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>I made 100 CSS loaders for your next project</title>
      <author>Tous</author>
      <pubDate>Wed, 29 Sep 2021 05:24:42 +0000</pubDate>
      <link>https://dev.to/hyshah/i-made-100-css-loaders-for-your-next-project-16m2</link>
      <guid>https://dev.to/hyshah/i-made-100-css-loaders-for-your-next-project-16m2</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;You either make a super fast website/application or you use loaders. I think most of us fall into the second category.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now the question is: what loader should I use? the "loading" text, the 3 dots, a progress bar, the Batman symbol??&lt;/p&gt;
&lt;p&gt;You no more need to bother yourself searching for loaders. Find below a collection of 100 different CSS loaders. From the simple one to the more fancy one, you will find the most suitable for your project.&lt;/p&gt;
&lt;p&gt;Each loader is done using a¬†&lt;span&gt;single&lt;/span&gt;¬†element. Yes, only one¬†&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, nothing more. You don't have to copy a ton of code. Add a class to your div and start loading!¬†&lt;/p&gt;

&lt;p&gt;Read More:&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwjRwJLBuKPzAhX9xzgGHRRPBagQFnoECCIQAQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt; I made 100 CSS loaders for your next project¬†&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/20-best-css3-library-for-developers/&amp;amp;ved=2ahUKEwjRwJLBuKPzAhX9xzgGHRRPBagQFnoECCIQAQ&amp;amp;usg=AOvVaw2AtoxfMkY_y5JPLB2VuSdV"&gt;&lt;br&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;





</description>
      <category>css</category>
    </item>
    <item>
      <title>7 Best Tools For Developers - They Can't Live Without It</title>
      <author>Tous</author>
      <pubDate>Wed, 29 Sep 2021 05:11:53 +0000</pubDate>
      <link>https://dev.to/hyshah/7-best-tools-for-developers-they-can-t-live-without-it-13mb</link>
      <guid>https://dev.to/hyshah/7-best-tools-for-developers-they-can-t-live-without-it-13mb</guid>
      <description>&lt;p&gt;¬†&lt;span&gt;The&lt;/span&gt;&lt;span&gt;¬†&lt;/span&gt;&lt;b&gt;best tools for developers¬†&lt;/b&gt;&lt;span&gt;are a priority for them to work. As a developer, he always works with code editors, browsers, terminals, etc. to improve his productivity. VS Code is one of the best editors, every developer would like to work with it. I've also listed the&lt;/span&gt;&lt;span&gt;¬†&lt;/span&gt;VS Code extensions for JS¬†&lt;span&gt;that are useful for a developer. And browser extensions are also a great way to improve productivity and I've also listed&lt;/span&gt;&lt;span&gt;¬†&lt;/span&gt;&lt;b&gt;Chrome extensions for a developer&lt;/b&gt;&lt;span&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;If you are a junior programmer, this will give you an idea the improve your coding skills, and if you are a senior developer, you are still learn something new from it. Extensions are one the¬†&lt;b&gt;best tools for developers.&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;Let's see the best tools for developers.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/7-best-tools-for-developers-they-cant-live-without-it/"&gt;7 Best Tools For Developers - They Can't Live Without It&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>CBDCs Shed Light on Challenges and Innovation for Developers</title>
      <author>David Fuelling</author>
      <pubDate>Wed, 29 Sep 2021 05:07:27 +0000</pubDate>
      <link>https://dev.to/ripplexdev/cbdcs-shed-light-on-challenges-and-innovation-for-developers-2c0l</link>
      <guid>https://dev.to/ripplexdev/cbdcs-shed-light-on-challenges-and-innovation-for-developers-2c0l</guid>
      <description>&lt;p&gt;Ripple recently announced its partnership with the Royal Monetary Authority of Bhutan to pilot that nation‚Äôs first central bank digital currency (CBDC) using the technology underlying the XRP Ledger. The technical requirements for this project, as for all CBDCs, are demanding ‚Äî we‚Äôre pushing the limits of conventional blockchain technologies, and inventing new technologies along the way. Though we can‚Äôt talk about many details of Ripple‚Äôs CBDC solution, some general reflections around CBDC development can help illuminate the full potential of this area.&lt;/p&gt;

&lt;p&gt;Some key considerations for CBDC Ledgers include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Financial inclusion&lt;/li&gt;
&lt;li&gt;Speed, throughput, transaction cost, sustainability&lt;/li&gt;
&lt;li&gt;Interoperability &amp;amp; liquidity (e.g., via sidechains)&lt;/li&gt;
&lt;li&gt;Smart contracts and programmability&lt;/li&gt;
&lt;li&gt;Robust security (key management, threat models, and more)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CBDCs help close existing gaps in commercial financial systems in a variety of ways, but perhaps the most important benefit is their ability to provide convenient, affordable access to basic financial services ‚Äî such as payments ‚Äî to every citizen, regardless of their ability to access the banking system. Bhutan has excellent existing financial infrastructure, and the vast majority of its citizens have access to it, but having a digital currency that can support universal access for every citizen is still an important goal.&lt;/p&gt;

&lt;p&gt;Performance is also critical for CBDCs. Because Ripple‚Äôs CBDC solution leverages the same software as the public, decentralized XRP Ledger, we‚Äôll be able to deliver incredible features like low transaction commit times, high throughput, and ultra-low fees ‚Äî all the while doing it in a sustainable manner using one of the most energy efficient consensus mechanisms in the world. &lt;/p&gt;

&lt;p&gt;Capable of sustaining thousands of transactions per-second, our CBDC Ledger is orders of magnitude more performant than many industry leading blockchains, and also much more performant than most legacy payments systems. While this type of performance will undoubtedly suffice for most central banking scenarios, we will continue to expand the capabilities of our solution to accommodate even the largest of nationalities. For example, any system powering a retail CBDC in the United States would likely need to sustain upwards of 100,000 transactions per second during peak times ‚Äî all while maintaining high security, resilience and correctness of operation.&lt;/p&gt;

&lt;p&gt;In addition to performance, interoperability of CBDCs with other token types, including other CBDCs, will be a key attribute of any successful future financial system. This is because increased mobility of assets will lead to increased and more efficient token liquidity, streamlining both domestic and cross-border payments by shrinking FX and other operational costs. To facilitate this vision, developers could build CBDC sidechains to allow value to move between chains that provide differing operational characteristics. For example, a developer may want to use sidechain X because it‚Äôs very fast and cheap. Later, that same developer may wish to use sidechain Y, possibly because that chain is more innovative and provides more features (but maybe is a bit more expensive from a fee perspective). No matter what the use-case, we envision a future where central banks have a menu of interoperability choices when providing programmable money to their citizens while at the same time maintaining full control of the system to meet their own policy objectives.&lt;/p&gt;

&lt;p&gt;Another appealing component of systems running on Ripple‚Äôs CBDC solution is our proposed vision for smart-contract technology. Ledger programmability could make the execution of fiscal and monetary policy both extensible and even automated because developers will have the opportunity to build custom functionality into their ledgers. For example, streamlined tax systems, instant stimulus check deposits, improved and streamlined insurance claim processes ‚Äî the possibilities are endless.&lt;/p&gt;

&lt;p&gt;Of course, despite all of the amazing capabilities these technologies can enable, one crucial element to underscore is the elevated security risk that accompanies any CBDC Ledger. The system must be able to handle potential nation-state attack vectors that could compromise the health of an entire economy, and even a nation‚Äôs political equilibrium. To mitigate these threats, we have a variety of tools in our toolkit, such as: robust cryptography, multi-signed transaction submission, state of the art key-management and recovery systems, robust auditing, and a variety of other security and transaction approval mechanisms to help ensure that any CBDC Ledger system is safe for operators, developers, and end-users alike.&lt;/p&gt;

&lt;p&gt;To allow for further exploration, Ripple has created a CBDC Ledger sandbox, which provides an ideal test environment to explore new ideas and solutions to these and other challenges involved in CBDC deployment. The extreme requirements that come with CBDCs are proving again how solid the underlying XRPL technology is, and providing developers with new opportunities to tune and innovate for the unique needs of each country.&lt;/p&gt;

&lt;p&gt;Let us know in the comments what you think of these insights. And, when it comes to scalability, let the community know your thoughts ‚Äî which is a better path for the XRPL for maximum scalability: sidechains, or a potential Layer-2 solution?&lt;/p&gt;

</description>
    </item>
    <item>
      <title>10 Awesome Github Repos Every Web Developer Should Know</title>
      <author>Tous</author>
      <pubDate>Wed, 29 Sep 2021 05:04:07 +0000</pubDate>
      <link>https://dev.to/hyshah/10-awesome-github-repos-every-web-developer-should-know-4i35</link>
      <guid>https://dev.to/hyshah/10-awesome-github-repos-every-web-developer-should-know-4i35</guid>
      <description>&lt;p&gt;&lt;span&gt;Here I list 10 excellent JavaScript based GitHub resources that will help you to understand the language better and help you to write clean code. This list is based on my personal preference.¬†&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;ReadUI&amp;amp;quot More: &lt;b&gt;&lt;a href="https://news.google.com/articles/CAIiEHRNZDbK-6L3wLhhd1mvgX8qGQgEKhAIACoHCAow7-ynCzDc978DMKOIlgc?hl=en-US&amp;amp;gl=US&amp;amp;ceid=US%3Aen"&gt;10 Awesome Github Repos Every Web Developer Should Know&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;

</description>
    </item>
    <item>
      <title>I wrote a fully-functioning File Explorer, using TypeScript.</title>
      <author>Tous</author>
      <pubDate>Wed, 29 Sep 2021 05:01:53 +0000</pubDate>
      <link>https://dev.to/hyshah/i-wrote-a-fully-functioning-file-explorer-using-typescript-35ac</link>
      <guid>https://dev.to/hyshah/i-wrote-a-fully-functioning-file-explorer-using-typescript-35ac</guid>
      <description>&lt;p&gt;I am very happy to introduce¬†&lt;a href="https://xplorer.vercel.app/"&gt;Xplorer&lt;/a&gt;¬†to help you organize your files and/or folders.&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3Tr9i8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecv6gk12ld5lij18gmeu.png"&gt;&lt;img alt="Xplorer win" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hBmk6MCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N3Tr9i8d--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecv6gk12ld5lij18gmeu.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;br&gt;&lt;/h2&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/kimlimjustin/i-wrote-a-fully-functioning-file-explorer-using-typescript-1e4n#features"&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/kimlimjustin/i-wrote-a-fully-functioning-file-explorer-using-typescript-1e4n#designed-out-of-the-box"&gt;&lt;/a&gt;Designed Out Of The Box&lt;/h3&gt;
&lt;p&gt;Xplorer is not written on traditional language like C, C++ or C#. It is written on TypeScript, HTML and SCSS, using the Electron framework, this makes Xplorer looks much more modern, and it will support theme customization in the future release. There are four available default themes for now.&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/kimlimjustin/i-wrote-a-fully-functioning-file-explorer-using-typescript-1e4n#cross-platform"&gt;&lt;/a&gt;Cross Platform&lt;/h3&gt;
&lt;p&gt;As I mentioned, Xplorer is powered by the web because it's written with the Electron framework, this makes it possible to run Xplorer from any platform.¬†&lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/ethical-hacking-roadmap-a-beginners-guide/&amp;amp;ved=2ahUKEwjPiI64s6PzAhW4wjgGHTZOBx0QFnoECB8QAQ&amp;amp;usg=AOvVaw3-vFooaWUJypOS-FfvXpjK"&gt;I wrote a fully-functioning File Explorer, using TypeScript&lt;/a&gt;&lt;/b&gt;.¬†&lt;/p&gt;






</description>
    </item>
    <item>
      <title>5 Common HTML Mistakes you should avoid.</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Wed, 29 Sep 2021 04:59:11 +0000</pubDate>
      <link>https://dev.to/abhirajb/5-common-html-mistakes-you-should-avoid-35he</link>
      <guid>https://dev.to/abhirajb/5-common-html-mistakes-you-should-avoid-35he</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-semantic-header-and-footer"&gt;
  &lt;/a&gt;
  1. Semantic Header and Footer
&lt;/h2&gt;

&lt;p&gt;Divs have no semantic structure. Instead of using divs to create headers or footer structures, use "header" and "footer" elements.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
...
&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-use-figure-element"&gt;
  &lt;/a&gt;
  2. Use Figure Element
&lt;/h2&gt;

&lt;p&gt;If you need to add a caption to your image, use the "figure" element combined with the "figcaption" element.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image url"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"image description"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Lorem Ipsum Description &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image url"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"image description"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;
         &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt; Lorem Ipsum Description &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-dont-use-bold-or-italic-tags"&gt;
  &lt;/a&gt;
  3. Don't use bold or italic tags
&lt;/h2&gt;

&lt;p&gt;The "b" and "i" tags are presentational tags, and have no semantic meaning, instead either change the font-weight/font-style in the CSS or use the "strong" or "em" element.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;Bold&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;i&amp;gt;&lt;/span&gt;Italics&lt;span class="nt"&gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;Bold&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;Italics&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-using-descriptive-links"&gt;
  &lt;/a&gt;
  4. Using descriptive links
&lt;/h2&gt;

&lt;p&gt;A link‚Äôs text should be explicit and convey where is redirecting the user to, both users and search engines can more easily understand your content and how it relates to other pages.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Check our pricing...
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;Check our &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"url"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; pricing &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-using-inline-styles"&gt;
  &lt;/a&gt;
  5. Using inline styles
&lt;/h2&gt;

&lt;p&gt;Writing inline styles violates the principle of having the structure (HTML) separate from the presentation (CSS). Instead write the styles in a stylesheet.&lt;/p&gt;

&lt;p&gt;Don't do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: 24"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 Header
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;24&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Read my blog @ &lt;a href="https://abhirajb.netlify.app"&gt;abhirajb.netlify.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Top 10 VS Code extensions you need to install right now!</title>
      <author>Avneesh Agarwal</author>
      <pubDate>Wed, 29 Sep 2021 04:31:23 +0000</pubDate>
      <link>https://dev.to/byteslash/top-10-vs-code-extensions-you-need-to-install-right-now-2m67</link>
      <guid>https://dev.to/byteslash/top-10-vs-code-extensions-you-need-to-install-right-now-2m67</guid>
      <description>&lt;h3&gt;
  &lt;a href="#prettier-code-formatter"&gt;
  &lt;/a&gt;
  Prettier - Code formatter
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--67baK3Oe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632840482623/tvWvse0hD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--67baK3Oe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632840482623/tvWvse0hD.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Prettier is one of the most used code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;Install&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#gitlens-git-supercharged"&gt;
  &lt;/a&gt;
  GitLens ‚Äî Git supercharged
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1mskxCIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632882714995/POS8TDbKN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1mskxCIb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632882714995/POS8TDbKN.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
GitLens is a great extension that makes working in a group easier. It shows you which piece of code was committed when and by whom and also the commit message.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;Install&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#live-share"&gt;
  &lt;/a&gt;
  Live Share
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WUjwx8eN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632882970018/V5urCY0i5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WUjwx8eN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632882970018/V5urCY0i5.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to code together with your friend or get some help from a person and want them to see your code easily and code in real-time in front of you then this is what you need. This extension allows you to code together with someone else.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare"&gt;Install&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#import-cost"&gt;
  &lt;/a&gt;
  Import Cost
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6A7H9YBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632887403661/w3h0zgRck.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6A7H9YBn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632887403661/w3h0zgRck.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Whenever you import something from a package, it will show its size and the gzip like this-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0HOxJBjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632887387510/0DibnxsxTK.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0HOxJBjd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632887387510/0DibnxsxTK.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost"&gt;Install&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#image-preview"&gt;
  &lt;/a&gt;
  Image Preview
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ySILPME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632887490339/qmv4qBr4Y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ySILPME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632887490339/qmv4qBr4Y.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension shows you a small image in the sidebar when you give the path of an image and a bigger image if you hover over the link. It is quite useful and it is also a way to check if the image path is correct :P&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview"&gt;Install&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#codesnap"&gt;
  &lt;/a&gt;
  CodeSnap
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qeGmKHn4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632888957808/qxLP6ABmZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qeGmKHn4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632888957808/qxLP6ABmZ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CodeSnap allows you to take beautiful screenshots of your code and share it with someone easily that too inside VS Code. Here is an example-&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ssBHiq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632888196146/chdgiGe10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ssBHiq2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632888196146/chdgiGe10.png" alt="code.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap"&gt;Install&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript-es6-code-snippets"&gt;
  &lt;/a&gt;
  JavaScript (ES6) code snippets
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w2G-RhpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632888526653/GhEknGXPD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w2G-RhpW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632888526653/GhEknGXPD.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension provides various commonly used code snippets and saves a lot of time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets"&gt;Install&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#htmltagwrap"&gt;
  &lt;/a&gt;
  Htmltagwrap
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--plOG9NWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632889109557/6lr2zCJKW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--plOG9NWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632889109557/6lr2zCJKW.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a small extension but pretty useful. If you select some tags or text then click Alt + W or Option + W for Mac then it will wrap it around a tag.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=bradgashler.htmltagwrap"&gt;Install&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#auto-rename-tag"&gt;
  &lt;/a&gt;
  Auto rename tag
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q-ShN_wC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632889136001/2sNt6BEjQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q-ShN_wC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632889136001/2sNt6BEjQ.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you use XML or HTML then this extension is a lifesaver. Whenever you need to change the tag, if you just edit the opening or closing tag it will automatically change the other one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;Install&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#es7-reactreduxgraphqlreactnative-snippets"&gt;
  &lt;/a&gt;
  ES7 React/Redux/GraphQL/React-Native snippets
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--unXBM1HO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632889083726/WzxMDexWF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--unXBM1HO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632889083726/WzxMDexWF.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This extension provides you with commonly used React, Redux, GraphQL, and React Native snippets and saves a lot of time. For example, writing _rafce gives me a React arrow function component-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const Home = () =&amp;gt; {
    return (
        &amp;lt;div&amp;gt;

        &amp;lt;/div&amp;gt;
    )
}

export default Home;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets"&gt;Install&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links-&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://avneesh-links.vercel.app/"&gt;Connect with me&lt;/a&gt; &lt;/p&gt;

</description>
      <category>vscode</category>
      <category>extensions</category>
      <category>productivity</category>
      <category>tooling</category>
    </item>
    <item>
      <title>[Solved]: non-default argument follows default argument</title>
      <author>Rajesh Joshi</author>
      <pubDate>Wed, 29 Sep 2021 03:59:09 +0000</pubDate>
      <link>https://dev.to/rajeshj3/solved-non-default-argument-follows-default-argument-400d</link>
      <guid>https://dev.to/rajeshj3/solved-non-default-argument-follows-default-argument-400d</guid>
      <description>&lt;p&gt;Once in your life, you must have faced this error in &lt;code&gt;Python&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;non-default argument follows default argument&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why?
&lt;/h2&gt;

&lt;p&gt;In Python, normally you can't define &lt;code&gt;non-default&lt;/code&gt; arguments after &lt;code&gt;default&lt;/code&gt; arguments in a function, method or class.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;non-default arguments
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;default arguments
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Rajesh'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, a combination of both of these looks something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Home'&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above code is 100% correct. It works great.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Rajesh'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Executing this code will log, &lt;strong&gt;non-default argument follows default argument&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution?
&lt;/h2&gt;

&lt;p&gt;The solution is very simple, just use &lt;code&gt;*&lt;/code&gt; at 0th index in the definition.&lt;/p&gt;

&lt;p&gt;Example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'Rajesh'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Welcome &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was introduced in &lt;code&gt;Python 3.4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Don;t forget to pass required keyword arguments while calling the function, method or class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'School'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Welcome&lt;/span&gt; &lt;span class="n"&gt;Rajesh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;School&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you&lt;br&gt;
Cheers&lt;/p&gt;

</description>
      <category>python</category>
      <category>help</category>
      <category>errors</category>
      <category>solved</category>
    </item>
  </channel>
</rss>
