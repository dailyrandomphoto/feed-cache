<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Async Redis key mutation notifications in Rails</title>
      <author>leastbad</author>
      <pubDate>Sun, 27 Jun 2021 14:55:42 +0000</pubDate>
      <link>https://dev.to/leastbad/async-redis-key-mutation-notifications-in-rails-4hng</link>
      <guid>https://dev.to/leastbad/async-redis-key-mutation-notifications-in-rails-4hng</guid>
      <description>&lt;p&gt;I am a huge fan of &lt;a href="https://github.com/rails/kredis"&gt;Kredis&lt;/a&gt;. It allows Rails developers to see Redis as far more than just a fragment cache and "where jobs are".&lt;/p&gt;

&lt;p&gt;Working with Kredis made me want to be able to run &lt;a href="https://cableready.stimulusreflex.com/reference/operations"&gt;arbitrary operations&lt;/a&gt; in my Rails app when specific keys are modified via specific Redis commands. &lt;a href="https://redis.io/topics/pubsub"&gt;Redis has an excellent pub/sub infrastructure&lt;/a&gt;, and all &lt;a href="https://redis.io/topics/notifications"&gt;Redis commands publish messages&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-would-someone-want-this"&gt;
  &lt;/a&gt;
  Why would someone want this?
&lt;/h1&gt;

&lt;p&gt;While it's true that changes to data that occur within a typical Rails app are already well covered by model callbacks, state machines and other standard tooling, an entire world of real-time stream processing, ETL and multi-application use cases open up when you can run &lt;code&gt;redis-cli set leastbad rules&lt;/code&gt; on your terminal and pick it up in your app.&lt;/p&gt;

&lt;p&gt;Problem #1: Listening for messages blocks execution.&lt;br&gt;
Solution #1: Spin up a thread!&lt;/p&gt;

&lt;p&gt;Problem #2: Every dyno/server is going to receive the same messages, causing mayhem as developers respond to those messages with database updates. Side-effect chaos!&lt;br&gt;
Solution #2: A standalone process that can be registered as a &lt;code&gt;worker&lt;/code&gt; in &lt;code&gt;Procfile&lt;/code&gt;... &lt;em&gt;sort of like Sidekiq.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At first, I was just planning on borrowing 95% of Mike Perham's battle-hardened code. Then I realized that the Venn diagram of "people who want a Redis changeset firehose" and "Sidekiq users" is close to 100%... &lt;strong&gt;so I just bolted what I needed onto Sidekiq&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#try-it-out"&gt;
  &lt;/a&gt;
  Try it out!
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;What follows is the MVP of my new gem. In fact, it's not a gem, yet: it's an initializer! It has no tests and is hours old. My janky code would make poor Mike &lt;a href="https://youtu.be/W7JyjZI3LUM?t=333"&gt;bleed out&lt;/a&gt;. The goal is to see if folks actually need/want this to exist. &lt;strong&gt;I'm looking for feedback on what the ideal Rails-side API would actually look like&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Your Rails app needs to be up and running with Sidekiq. Just stick this in &lt;code&gt;config/initializers/sidekiq.rb&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Sidekiq&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Subscriber&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Util&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
      &lt;span class="vi"&gt;@done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="vi"&gt;@thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start&lt;/span&gt;
      &lt;span class="vi"&gt;@thread&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;safe_thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"subscriber"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;until&lt;/span&gt; &lt;span class="vi"&gt;@done&lt;/span&gt;
          &lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;redis&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
            &lt;span class="c1"&gt;# https://redis.io/topics/notifications#configuration&lt;/span&gt;
            &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"notify-keyspace-events"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"E$lshz"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="c1"&gt;# https://redis.io/topics/notifications#events-generated-by-different-commands&lt;/span&gt;
            &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;psubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"__key*__:*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
              &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;psubscribe&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="vi"&gt;@firehose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Firehose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
              &lt;span class="k"&gt;end&lt;/span&gt;
              &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pmessage&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
                &lt;span class="vi"&gt;@firehose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;":"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;last&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="k"&gt;end&lt;/span&gt;
              &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;punsubscribe&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="vi"&gt;@firehose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
              &lt;span class="k"&gt;end&lt;/span&gt;
            &lt;span class="k"&gt;end&lt;/span&gt;
          &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
        &lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Subscriber exiting..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;terminate&lt;/span&gt;
      &lt;span class="vi"&gt;@done&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@thread&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@thread&lt;/span&gt;
        &lt;span class="no"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;kill&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@thread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
        &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;CoreExtensions&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Sidekiq&lt;/span&gt;
    &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Launcher&lt;/span&gt;
      &lt;span class="nb"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:subscriber&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="vi"&gt;@subscriber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;
        &lt;span class="n"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;quiet&lt;/span&gt;
        &lt;span class="n"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;terminate&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;

      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;stop&lt;/span&gt;
        &lt;span class="n"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;terminate&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure_server&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"sidekiq/launcher"&lt;/span&gt;
  &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Launcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;prepend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;CoreExtensions&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Sidekiq&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Launcher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm using &lt;a href="https://cableready.stimulusreflex.com"&gt;CableReady&lt;/a&gt; to send console log notifications to the Console Inspector whenever a key is updated with the Redis &lt;code&gt;SET&lt;/code&gt; command. I have a simple &lt;code&gt;AllUsers&lt;/code&gt; ActionCable Channel in play for testing. This lives in &lt;code&gt;app/lib/firehose.rb&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Firehose&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;CableReady&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Broadcaster&lt;/span&gt;

  &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:redis&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="c1"&gt;# https://github.com/rails/kredis#examples&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:set&lt;/span&gt;    &lt;span class="c1"&gt;# string, integer, json&lt;/span&gt;
      &lt;span class="n"&gt;cable_ready&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"all_users"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;console_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; was just updated to &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;broadcast&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:rpush&lt;/span&gt;  &lt;span class="c1"&gt;# list&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:lrem&lt;/span&gt;   &lt;span class="c1"&gt;# unique_list&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:sadd&lt;/span&gt;   &lt;span class="c1"&gt;# set&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:incr&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:decr&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:incrby&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:decrby&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:exists&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="ss"&gt;:del&lt;/span&gt;
      &lt;span class="n"&gt;cable_ready&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"all_users"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;console_log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;message: &lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; was deleted"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;broadcast&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As Seinfeld would say, &lt;strong&gt;is this anything?&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>rails</category>
      <category>redis</category>
    </item>
    <item>
      <title>You are coding the wrong way in Python if you aren't using these two libraries</title>
      <author>Rohith Gilla</author>
      <pubDate>Sun, 27 Jun 2021 14:48:49 +0000</pubDate>
      <link>https://dev.to/gillarohith/you-are-coding-the-wrong-way-in-python-if-you-aren-t-using-these-two-libraries-42bi</link>
      <guid>https://dev.to/gillarohith/you-are-coding-the-wrong-way-in-python-if-you-aren-t-using-these-two-libraries-42bi</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/4OBq5v6J4pgJuZ2Cnj/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/4OBq5v6J4pgJuZ2Cnj/giphy.gif" alt="https://media.giphy.com/media/4OBq5v6J4pgJuZ2Cnj/giphy.gif"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Hello amazing developers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Table of Contents&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Motivation&lt;/li&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Typing

&lt;ul&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Lists&lt;/li&gt;
&lt;li&gt;Dictionary&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;li&gt;Resources&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;What makes people love (sometimes hate 😛) TypeScript more than JavaScript?&lt;/p&gt;

&lt;p&gt;It's the typing, the type safety. They know that there will be a safety net beneath them that catches many bugs and shouts at us if we do mistakes. &lt;/p&gt;

&lt;p&gt;It's not just that it's the auto-suggestion that matters too, it would feel amazing right when you get the best auto completes and the methods for the variable.&lt;/p&gt;

&lt;p&gt;Now what if I say we can you could kinda get it in python. It feels great right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/aWPGuTlDqq2yc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/aWPGuTlDqq2yc/giphy.gif" alt="https://media.giphy.com/media/aWPGuTlDqq2yc/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now since we know python is an interpreted language and it doesn't have complier for itself so we can't entirely replicate typescript but at least try to use types wherever possible.&lt;/p&gt;

&lt;p&gt;TL;DR on how typescript works, it takes the entire entire script code complies it into a JavaScript file, the complier does all the type checking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python is a dynamically typed language&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;From python 3.5 we have this amazing library which is build inside python, it's the  &lt;code&gt;typing&lt;/code&gt; library. We can't cover entire library but applying Pareto principle (80-20 rule) I will try to cover a few important parts of the library.&lt;/p&gt;

&lt;p&gt;We use it along with a power type checking library &lt;code&gt;mypy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will be sliding over the following topics in brief&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic Variables&lt;/li&gt;
&lt;li&gt;Lists&lt;/li&gt;
&lt;li&gt;Dictionary&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/cAhGmJPBqsXAlDTYHi/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/cAhGmJPBqsXAlDTYHi/giphy.gif" alt="https://media.giphy.com/media/cAhGmJPBqsXAlDTYHi/giphy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start &lt;/p&gt;

&lt;p&gt;IDE Setup&lt;/p&gt;

&lt;p&gt;Please install the following extensions for VSCode&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=matangover.mypy"&gt;MyPy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens"&gt;Error Lens&lt;/a&gt; (Optional)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#typing"&gt;
  &lt;/a&gt;
  Typing
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Integer&lt;/li&gt;
&lt;li&gt;Float&lt;/li&gt;
&lt;li&gt;String
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;int_typed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="n"&gt;float_typed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;

&lt;span class="n"&gt;string_typed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Let us see what happens if we try to assign them a different value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzxNqMF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4rjz7dvmg9s3vtx23c6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzxNqMF_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u4rjz7dvmg9s3vtx23c6.png" alt="Int Error"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lists"&gt;
  &lt;/a&gt;
  Lists
&lt;/h3&gt;

&lt;p&gt;To know more about Lists you have to know about &lt;code&gt;Sequence&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Sequence&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Python, sequence is the generic term for an ordered set. There are several types of sequences in Python, the following three are the most important.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Lists&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lists are the most versatile sequence type. The elements of a list can be any object, and lists are mutable - they can be changed. Elements can be reassigned or removed, and new elements can be inserted.&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;
&lt;span class="n"&gt;int_typed_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oyfo765e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuzvqcmwhbl6c34sg1og.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oyfo765e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kuzvqcmwhbl6c34sg1og.png" alt="List"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Shouts for type errors&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But but but but in &lt;code&gt;TypeScript&lt;/code&gt; we have &lt;code&gt;any&lt;/code&gt; keyword if we want dynamic array&lt;/p&gt;

&lt;p&gt;Yes the golden &lt;code&gt;Any&lt;/code&gt; even exists here too&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="n"&gt;int_typed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;

&lt;span class="n"&gt;float_typed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;

&lt;span class="n"&gt;string_typed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"hello"&lt;/span&gt;

&lt;span class="n"&gt;int_typed_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;int_typed_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int_typed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;any_typed_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;any_typed_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int_typed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;any_typed_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_typed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;any_typed_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float_typed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;any_typed_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;int_typed_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PmHcLNFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sz4sqqgzhn68en4oq472.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PmHcLNFV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sz4sqqgzhn68en4oq472.png" alt="Power of any"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;No shouting 🤫&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dictionary"&gt;
  &lt;/a&gt;
  Dictionary
&lt;/h3&gt;

&lt;p&gt;For this section &lt;em&gt;Picture speaks louder than words&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'followers'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1110&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 

&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'abc'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-p0kkWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzf36nnr10i3ohw0p8zq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-p0kkWL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzf36nnr10i3ohw0p8zq.png" alt="Overall"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;It reads the keys if we define in code and help us in auto complete&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GskJ_ikg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18l3x81x3k50nm2b8syd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GskJ_ikg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/18l3x81x3k50nm2b8syd.png" alt="Keys"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Now we know that &lt;code&gt;keys()&lt;/code&gt; returns a list of &lt;code&gt;str&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WR5Bz7pz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcs2gw6m3atd8yu0csaq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WR5Bz7pz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcs2gw6m3atd8yu0csaq.png" alt="Values"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Now we know that &lt;code&gt;values()&lt;/code&gt; returns a list of &lt;code&gt;int&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h3&gt;

&lt;p&gt;My all time favourite definition of function is depicted in the picture below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ccSILnIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5hr8nplxionk7ojmu8t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ccSILnIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5hr8nplxionk7ojmu8t.png" alt="Function"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;get_avg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rjcNZQ7E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hhzz1zcdgsv4lj1r1xa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rjcNZQ7E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hhzz1zcdgsv4lj1r1xa.png" alt="Function shouts"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Function shouts&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#classes"&gt;
  &lt;/a&gt;
  Classes
&lt;/h3&gt;

&lt;p&gt;We may need a solution when we require custom classes to hold and use our data. Then we could similar to this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_magnitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xcNYVAsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v68cydwksox7ya2t8dja.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xcNYVAsI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v68cydwksox7ya2t8dja.png" alt="Vector Class"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You get the beautiful autocomplete again with details 💫&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PykP3MmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djulqav3533qk13c5021.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PykP3MmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/djulqav3533qk13c5021.png" alt="With great power comes great responsibility"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As said in the picture, with great power comes great responsibility.&lt;br&gt;
Python dynamic types gives us very easy to get started with learning python but at the same time increases the chances to create bugs unintentionally.&lt;/p&gt;

&lt;p&gt;The typing gets even better in Python 3.9 and I hope it gets better and better as we progress.&lt;/p&gt;

&lt;p&gt;Small changes can great a huge impact in the code, so please start using types, MyPy and feel safe.&lt;/p&gt;

&lt;p&gt;I kept it brief but please do let me know if diving deeper helps, feedback is really appreciated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mypy.readthedocs.io/en/stable/index.html"&gt;MyPY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.python.org/3/library/typing.html"&gt;Typing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;P.S My &lt;a href="https://twitter.com/gillarohith"&gt;Twitter&lt;/a&gt; DMs are always open if you want to discuss collaboration opportunities or request on writing for a topic &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nT16isXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/40317e3f3b28d57c89edceb1d75832c2/tenor.gif%3Fitemid%3D16119732" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nT16isXH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media1.tenor.com/images/40317e3f3b28d57c89edceb1d75832c2/tenor.gif%3Fitemid%3D16119732" alt="https://media1.tenor.com/images/40317e3f3b28d57c89edceb1d75832c2/tenor.gif?itemid=16119732"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks&lt;br&gt;
Rohith Gilla&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>todayilearned</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Is there a right way to learn to code?</title>
      <author>Saji Wang</author>
      <pubDate>Sun, 27 Jun 2021 14:48:16 +0000</pubDate>
      <link>https://dev.to/codesphere/is-there-a-right-way-to-learn-to-code-3fn4</link>
      <guid>https://dev.to/codesphere/is-there-a-right-way-to-learn-to-code-3fn4</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;A huge reason that we are so passionate about the developer community is there isn't a singular path that developers have taken to get where they are now. One might expect that a career as technical as software engineering requires the right CS degree and the right technical experience, but this couldn't be further from the truth.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to &lt;a href="https://insights.stackoverflow.com/survey/2020"&gt;Stack Overflow's 2020 Developer Survey&lt;/a&gt;, only about 60% of college-educated developers actually got their degree in Computer Science. However, over 80% of developers still think that some kind of formal education is at least somewhat important in your success as a software engineer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vb9zTMFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6n46e86uptg6w31zbab.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vb9zTMFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e6n46e86uptg6w31zbab.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the same time, the internet is filled to the brim with informal development education, including youtube tutorials, forums, and personal portfolios.&lt;br&gt;
It is therefore worth taking a deeper look at the different ways developers learn, as well as the benefits and drawbacks of each.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#academia"&gt;
  &lt;/a&gt;
  Academia
&lt;/h3&gt;

&lt;p&gt;As stated before, despite all the different resources, the majority of professional developers still hold some kind of computer science degree. The Stack Overflow survey does in fact put to numbers what most developers know to be true: That academic classes can only teach you so much. Only about 10% of developers said that formal education was critical to their job.&lt;/p&gt;

&lt;p&gt;Among many developers, formal classes are generally regarded as a pretty strong way to learn theoretical CS concepts, but not necessarily the best method of learning to apply these concepts. For example, one can ideally expect a developer who comes from academia to have a very strong grasp of topics like algorithms, data structures, and time complexity. In addition, when it comes to constantly evolving subfields, like Artificial Intelligence and Cybersecurity, many CS students have the opportunity to conduct academic research.&lt;/p&gt;

&lt;p&gt;While academic experiences are obviously going to differ from institution to institution, there is generally a lack of real-world application of these concepts. A developer who exclusively learns through academia may therefore not be incredibly strong at building real software.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#online-courses-and-tutorials"&gt;
  &lt;/a&gt;
  Online Courses and Tutorials
&lt;/h3&gt;

&lt;p&gt;Those for whom academia is too costly or time prohibitive often turn to online tutorials and courses for the equivalent theoretical education. Sites like Youtube, Udemy, and Coursera offer thousands of different courses on the same sort of theoretical topics that one would study at a university. Though it may not have the same prestige to many hiring managers, these courses are almost always free or only cost the price of a nice dinner.&lt;/p&gt;

&lt;p&gt;In addition to these theoretical topics, online resources can teach programmers about new and specific languages, technologies, and frameworks that usually aren't covered in a college curriculum. Online courses and tutorials are therefore essential to keeping up to date with the latest trends in software engineering.&lt;/p&gt;

&lt;p&gt;As with Academia, there is a risk with online courses and tutorials of only being able to regurgitate what you learned, and not actually apply it to real projects. One should therefore not expect to be ready to code professionally with a technology after watching a two-hour course on it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#bootcamps"&gt;
  &lt;/a&gt;
  Bootcamps
&lt;/h3&gt;

&lt;p&gt;A nice midpoint between the credibility of a degree and the accessibility of online resources is Coding Bootcamps. These programs are typically only a couple of months long and are a fraction of the price. In addition, they tend to focus more on teaching marketable tech stacks rather than theoretical concepts.&lt;/p&gt;

&lt;p&gt;Bootcamps are especially great for people looking to make a career switch without the full investment of an additional degree. The major drawback is that while it might help you land your first development job, by giving you a working proficiency in the most popular web framework or database technology, a Bootcamp alone won't necessarily help you keep that job.&lt;/p&gt;

&lt;p&gt;Being able to succeed in a development role often requires fundamentals that aren't hidden beneath the latest technology. For example, knowing how to use ReactJS without a strong foundation in HTML and CSS can only get you so far. While that certainly doesn't diminish the educational quality of a Bootcamp, you should just have realistic expectations of what you are going to get out of it.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#personal-projects"&gt;
  &lt;/a&gt;
  Personal Projects
&lt;/h3&gt;

&lt;p&gt;There are few professions where project-based learning is as accessible as it is for software engineering. One of the best ways to learn how to do something is to just do it. The issue is that if you want to be a doctor or a mechanical engineer, accountability and financial constraints are often going to prevent you from getting real-world experience. In contrast, all you need is a working computer and an internet connection to get real-world experience building software.&lt;/p&gt;

&lt;p&gt;Working on pet projects is an amazing way to work through the actual kinds of problems that you would encounter on a job. While its value may sometimes be harder to convey to a hiring manager than a GPA, that real-world experience is going to be instrumental to the value you can bring to a company. And hey, you never know, your next pet project might become the next billion-dollar company, like Github or Facebook.&lt;/p&gt;

&lt;p&gt;The one thing that people should be hesitant about when relying on personal projects is only programming in a way that gets the job done, and not necessarily in a way that gets the job done well. It's great that you made a cool Web App that works, but if all your code is inefficient, horribly documented, and riddled with security vulnerabilities, it might be worth learning some more fundamentals. This kind of coding style might be fine for your pet project, but it is probably going to make you a nightmare to work with.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#community-participation"&gt;
  &lt;/a&gt;
  Community Participation
&lt;/h3&gt;

&lt;p&gt;A huge way that programmers learn that often gets taken for granted is participation in developer communities. This can come in a number of forms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Asking and Answering questions on Stack Overflow&lt;/li&gt;
&lt;li&gt;Participating in Open Source projects&lt;/li&gt;
&lt;li&gt;Writing and Reading developer blogs on platforms like Medium and Dev.to&lt;/li&gt;
&lt;li&gt;Keeping up to date with the newest technologies and trends on Reddit, Twitter, and Hacker News&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if you already landed your dream job, participating in the community is an important part of being a developer and an important part of sharpening your coding skills.&lt;/p&gt;

&lt;p&gt;As the Greek historian, Plutarch once said "Education is the kindling of a flame, not the filling of a vessel". Learning is a lifelong process, so staying active in the community through methods like these can make sure that you are always learning.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;So is there a singular right way to learn to code? Probably not, but there is certainly a wrong way. Relying on either exclusively theoretical education (Academia, Tutorials, Bootcamps) or exclusively application(Projects, Community Participation) is going to limit your success as a developer. A strong developer is someone who has both a good grasp of theoretical concepts and has the ability to apply these concepts to real-world software.&lt;/p&gt;

&lt;p&gt;Thanks for reading! What do you think? Is there a right way to learn to code? Is there a wrong way? How'd you learn?&lt;/p&gt;

&lt;p&gt;To learn about how Codesphere is revolutionizing cloud services, you can check out &lt;a href="https://link.codesphere.com/AN"&gt;Codesphere.com&lt;/a&gt;. :)&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>bootcamp</category>
      <category>learntocode</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>150+ users registered in 24 hours on website created for fun</title>
      <author>Naman vyas</author>
      <pubDate>Sun, 27 Jun 2021 14:43:41 +0000</pubDate>
      <link>https://dev.to/namanvyas/150-users-registered-in-24-hours-on-website-created-for-fun-f1a</link>
      <guid>https://dev.to/namanvyas/150-users-registered-in-24-hours-on-website-created-for-fun-f1a</guid>
      <description>&lt;p&gt;Hello everyone,&lt;/p&gt;

&lt;p&gt;for some days i was working on a simple social media website created using NextJS, TailwindCSS and firebase for learning and fun and yesterday created a Dev post about making that project(website) public to internet.&lt;br&gt;
Dev post Link : &lt;a href="https://dev.to/namanvyas/build-a-social-media-website-with-next-js-tailwindcss-and-firebase-in-8-days-2j65"&gt;Post&lt;/a&gt;&lt;br&gt;
Website Link : &lt;a href="https://noob.study"&gt;noob.study&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was not expecting much attention from that post so after writing i did go to sleep, after waking up i was checking my phone as normal and open that website to check how it is going and find out there was around 10-11 new posts which is amazing after that i rush to my Dev post and Firebase console and find out 69 peoples registered on website and 10 stars in my GitHub repo which was too amazing for me, got very good response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lt6rKe0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlszd83cdr9w0r3fc8mn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lt6rKe0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dlszd83cdr9w0r3fc8mn.gif" alt="wowww"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the end of day i got &lt;strong&gt;158 users&lt;/strong&gt; registered and also some bugs to fix&lt;/p&gt;

&lt;p&gt;now main challenge for me is to fix all bugs as fast as possible and optimize Firebase integration because i got around 22,000 read request which is not good for me if website grow like that maybe i will have to close that project because i can't afford to pay for this project right now.&lt;/p&gt;

&lt;p&gt;It is a great experience for me. Love Dev community.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/namanvyas" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9VZ0Zkbv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--6iUx5n2K--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/420414/11894cc1-249a-4c52-a119-9603e07eeca4.jpg" alt="namanvyas"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/namanvyas/build-a-social-media-website-with-next-js-tailwindcss-and-firebase-in-8-days-2j65" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a social media website with Next JS, TailwindCss and Firebase in 8 days&lt;/h2&gt;
      &lt;h3&gt;Naman vyas ・ Jun 26 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#showdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#nextjs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tailwindcss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#firebase&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>How I made a mini filter app with Vanilla JavaScript</title>
      <author>Raquel Santos | RS-coding</author>
      <pubDate>Sun, 27 Jun 2021 14:03:31 +0000</pubDate>
      <link>https://dev.to/raquelsartwork/how-i-made-a-mini-filter-app-with-vanilla-javascript-15kb</link>
      <guid>https://dev.to/raquelsartwork/how-i-made-a-mini-filter-app-with-vanilla-javascript-15kb</guid>
      <description>&lt;p&gt;I have been doing the JavaScript30 from Wes Bos and one of the challenges is to change CSS Variables using JS.&lt;br&gt;
I found the challenge so interesting that I decided to try myself and create a mini-filter image app by using the same concept that he used on the challenge.&lt;br&gt;
Also, I decided to go further and made functionality to display an uploaded image and then change it with the filters available.&lt;/p&gt;

&lt;p&gt;I will show you step by step what I did. You can check the &lt;a href="https://rs-coding.github.io/FilterImageApp/"&gt;Demo&lt;/a&gt; and full code here &lt;a href="https://github.com/RS-coding/FilterImageApp"&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First of all, I sketched what I wanted to look like in the end to help me trace a path.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3P23BQOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5i53g3lm2s1jaakqrpy.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3P23BQOs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5i53g3lm2s1jaakqrpy.jpg" alt="sketch"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having the sketch done I created an HTML file with elements I wanted. As you can see I write a div container with 3 divs inside:   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;header-container&lt;/strong&gt; - for the title and uploading  icon,&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;img-container&lt;/strong&gt; - for the displayed image,
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;controls&lt;/strong&gt; - for the filters controls.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UHM_PQhW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apbo72ypk0xgcleqb9b9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UHM_PQhW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apbo72ypk0xgcleqb9b9.jpg" alt="HTML structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-display-uploaded-image-in-html-using-javascript"&gt;
  &lt;/a&gt;
  How To Display Uploaded Image In Html Using Javascript
&lt;/h2&gt;

&lt;p&gt;Let's focus first on how to display an uploaded image. So let's take a look at the two first containers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XmEhvkBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g93odyksokv0nd32qy5j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XmEhvkBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g93odyksokv0nd32qy5j.jpg" alt="HTML structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Inside &lt;strong&gt;header-container&lt;/strong&gt; I created a div called &lt;strong&gt;upload-img&lt;/strong&gt; that contains label and input elements. &lt;br&gt;
 The input has some attributes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;type='file'&lt;/strong&gt; because we want to add a file&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;accept=' image/*'&lt;/strong&gt; that takes as a value all the type of files permitted to upload  (* - global). If we wanted only permit jpg files we would have to write accept='image/jpg'.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;style='display: none;'&lt;/strong&gt; because I wanted to show only the icon on the label instead of the input.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the div &lt;strong&gt;img-container&lt;/strong&gt; I added an img HTML tag without a source attribute but an id named "output" that will retrieve the image source from javaScript.&lt;br&gt;
It's time to do JavaScript code to display the image in HTML element &lt;strong&gt;img&lt;/strong&gt; :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A7hYKjzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n517ddgs99p18gao4qkn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A7hYKjzA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n517ddgs99p18gao4qkn.jpg" alt="JavaScript code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing I did was to get the element &lt;strong&gt;input&lt;/strong&gt; from the DOM and stored it in a variable named &lt;strong&gt;fileUpload&lt;/strong&gt;.&lt;br&gt;
Further, I added an event listener with event &lt;strong&gt;change&lt;/strong&gt; and a function called &lt;strong&gt;loadFile&lt;/strong&gt;.&lt;br&gt;
Inside the loadFile function, I  get the element &lt;strong&gt;img&lt;/strong&gt; from DOM and store it in a variable called  &lt;strong&gt;img&lt;/strong&gt; ( you could call it an image or something else. I decided to call the same name as the tag). &lt;br&gt;
After that, I created a source URL for that variable &lt;strong&gt;img&lt;/strong&gt; that by using &lt;strong&gt;URL.createObjectURL()&lt;/strong&gt;, a static method that creates a string containing URL representing the specific file inside the parameters that, in this case, is the selected file or files of the input:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;e.target&lt;/strong&gt; is the &lt;strong&gt;input type="file"&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;files[0]&lt;/strong&gt;  represents the file or the files that were selected&lt;/p&gt;

&lt;p&gt;This part is Done!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-change-css-variables-in-javascript"&gt;
  &lt;/a&gt;
  How to change CSS Variables in JavaScript
&lt;/h2&gt;

&lt;p&gt;Inside the third container &lt;strong&gt;controls&lt;/strong&gt; let's just focus on the construction of the &lt;strong&gt;input&lt;/strong&gt; element.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xLsfY4ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bws0wp04fdgsmyd5oplb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xLsfY4ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bws0wp04fdgsmyd5oplb.jpg" alt="HTML"&gt;&lt;/a&gt;&lt;br&gt;
As you can see in the image there are a couple of Attributes important that I added. let's talk about each one:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;id&lt;/strong&gt; - the id of the element (example id="sepia")&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;type ="range"&lt;/strong&gt; - it is the type of the input. in this case, I wanted a slider control&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;name&lt;/strong&gt; - it is the name of the specific filter which is the same as the id (example name="sepia")&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;min&lt;/strong&gt;, &lt;strong&gt;max&lt;/strong&gt; &lt;strong&gt;value&lt;/strong&gt; - min and max are the minima and maximum values the input range has and the value is the default value we want to point to at the beginning. To set the values for the min, max and value attributes for each filter control I researched here [filters characteristics]((&lt;a href="https://www.w3schools.com/cssref/css3_pr_filter.asp"&gt;https://www.w3schools.com/cssref/css3_pr_filter.asp&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;data-sizing="%"&lt;/strong&gt; - it is a custom attribute that has as value an % because all filters that I will use in CSS end with percentage.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's take a look at CSS file :&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pBMUFV6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6cwrkv1uc0bugifkr1f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pBMUFV6m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t6cwrkv1uc0bugifkr1f.jpg" alt="CSS file"&gt;&lt;/a&gt;&lt;br&gt;
Here I created CSS variables in the : root pseudo-class and added those named variables in the img element.&lt;/p&gt;

&lt;p&gt;Now its time to code in JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--467WWCyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4lyruapcgvpgkiitkls.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--467WWCyI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4lyruapcgvpgkiitkls.jpg" alt="JavaScript"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, I stored in a variable all the inputs(plural). &lt;br&gt;
Then I wanted to make an event listener for each input(individual) with change and input event.&lt;br&gt;
So I did a forEach loop at the 'inputs' variable to get each input and add the event listener.&lt;/p&gt;

&lt;p&gt;Why did I want to use two events and not just the first one &lt;strong&gt;change&lt;/strong&gt;? &lt;br&gt;
Because the &lt;strong&gt;change&lt;/strong&gt; event only updates the result when the movement ended, and I wanted also to show changes in the image while I move the input range.&lt;/p&gt;

&lt;p&gt;In the &lt;strong&gt;updateStyle&lt;/strong&gt; function first, I made a variable called suffix that stores the value '%' of data-sizing or if there are none stores an empty string ' '.&lt;br&gt;
After that, I set a new property value for the root element that takes the value of the input.&lt;/p&gt;

&lt;p&gt;That is it!&lt;/p&gt;

</description>
      <category>devjournal</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Abstract Syntax Tree (AST)</title>
      <author>Rahul Khinchi</author>
      <pubDate>Sun, 27 Jun 2021 14:03:10 +0000</pubDate>
      <link>https://dev.to/rk7/abstract-syntax-tree-ast-43p0</link>
      <guid>https://dev.to/rk7/abstract-syntax-tree-ast-43p0</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-ast"&gt;
  &lt;/a&gt;
  What is AST?
&lt;/h3&gt;

&lt;p&gt;It is a tree representation of the abstract syntactic structure of source code written in a programming language. Each node of the tree denotes a construct occurring in the source code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#application-in-compilers"&gt;
  &lt;/a&gt;
  Application in compilers
&lt;/h3&gt;

&lt;p&gt;Abstract syntax trees are data structures widely used in compilers to represent the structure of program code. An AST is usually the result of the syntax analysis phase of a compiler. It often serves as an intermediate representation of the program through several stages that the compiler requires, and has a strong impact on the final output of the compiler.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-example-this-is-a-source-code"&gt;
  &lt;/a&gt;
  For Example, This is a Source Code.
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class GFG {
    public static void main (String[] args) {
        System.out.println("Hello World!");
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ast-of-above-source-code"&gt;
  &lt;/a&gt;
  AST of above source code:
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;CLASS_DEF -&amp;gt; CLASS_DEF [1:0]
|--MODIFIERS -&amp;gt; MODIFIERS [1:0]
|   `--LITERAL_PUBLIC -&amp;gt; public [1:0]
|--LITERAL_CLASS -&amp;gt; class [1:7]
|--IDENT -&amp;gt; GFG [1:13]
`--OBJBLOCK -&amp;gt; OBJBLOCK [1:17]
    |--LCURLY -&amp;gt; { [1:17]
    |--METHOD_DEF -&amp;gt; METHOD_DEF [2:4]
    |   |--MODIFIERS -&amp;gt; MODIFIERS [2:4]
    |   |   |--LITERAL_PUBLIC -&amp;gt; public [2:4]
    |   |   `--LITERAL_STATIC -&amp;gt; static [2:11]
    |   |--TYPE -&amp;gt; TYPE [2:18]
    |   |   `--LITERAL_VOID -&amp;gt; void [2:18]
    |   |--IDENT -&amp;gt; main [2:23]
    |   |--LPAREN -&amp;gt; ( [2:27]
    |   |--PARAMETERS -&amp;gt; PARAMETERS [2:34]
    |   |   `--PARAMETER_DEF -&amp;gt; PARAMETER_DEF [2:34]
    |   |       |--MODIFIERS -&amp;gt; MODIFIERS [2:34]
    |   |       |--TYPE -&amp;gt; TYPE [2:34]
    |   |       |   `--ARRAY_DECLARATOR -&amp;gt; [ [2:34]
    |   |       |       |--IDENT -&amp;gt; String [2:28]
    |   |       |       `--RBRACK -&amp;gt; ] [2:35]
    |   |       `--IDENT -&amp;gt; args [2:37]
    |   |--RPAREN -&amp;gt; ) [2:41]
    |   `--SLIST -&amp;gt; { [2:43]
    |       |--EXPR -&amp;gt; EXPR [3:26]
    |       |   `--METHOD_CALL -&amp;gt; ( [3:26]
    |       |       |--DOT -&amp;gt; . [3:18]
    |       |       |   |--DOT -&amp;gt; . [3:14]
    |       |       |   |   |--IDENT -&amp;gt; System [3:8]
    |       |       |   |   `--IDENT -&amp;gt; out [3:15]
    |       |       |   `--IDENT -&amp;gt; println [3:19]
    |       |       |--ELIST -&amp;gt; ELIST [3:27]
    |       |       |   `--EXPR -&amp;gt; EXPR [3:27]
    |       |       |       `--STRING_LITERAL -&amp;gt; "Hello World!" [3:27]
    |       |       `--RPAREN -&amp;gt; ) [3:41]
    |       |--SEMI -&amp;gt; ; [3:42]
    |       `--RCURLY -&amp;gt; } [4:4]
    `--RCURLY -&amp;gt; } [5:0]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#how-to-make-an-ast"&gt;
  &lt;/a&gt;
  How to Make an AST:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run the Source Code in your local Environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download the Checkstyle Command line: checkstyle-8.43-all.jar from &lt;a href="https://checkstyle.org/cmdline.html"&gt;Here&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Audit the Program with the help of Checkstyle in your Terminal: java -jar checkstyle-8.43-all.jar -c /google_checks.xml YourFile.java&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After Audit, Run this command in your terminal to get the AST of your preferred  Code: java -jar checkstyle-8.43-all.jar -t YourFile.java&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your AST is Ready.&lt;/p&gt;


&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#to-learn-more-about-ast-and-checkstyle-click-here"&gt;
  &lt;/a&gt;
  To learn More about AST and Checkstyle: &lt;a href="https://checkstyle.org/cmdline.html"&gt;Click Here&lt;/a&gt;
&lt;/h2&gt;

</description>
      <category>opensource</category>
      <category>java</category>
      <category>contributorswanted</category>
      <category>testing</category>
    </item>
    <item>
      <title>Branching Out (With Git)</title>
      <author>Jenna Toff</author>
      <pubDate>Sun, 27 Jun 2021 14:02:36 +0000</pubDate>
      <link>https://dev.to/larkceresin/branching-out-with-git-m28</link>
      <guid>https://dev.to/larkceresin/branching-out-with-git-m28</guid>
      <description>&lt;p&gt;When thinking of a branch: the first thing to come to mind is the part of a tree that is growing out from another part of the same tree. As a tree grows, branches are sent out from the trunk or from other branches. They grow leaves and help with supplying nourishment to the tree to become a better tree. When a specific branch dies, it might fall off or be pruned so another branch can grow in its place.&lt;/p&gt;

&lt;p&gt;When it comes to git: branches work similarly. You have your trunk: but it's called Main (or Master if your repository was created before Oct 2020) that is the primary living portion of your code. You can create branches that copy the current Main code to allow you to build on it, make changes, and test things without effecting your live environment. Once you're done and successfully made changes, you can merge them into your Main. Branches can also be used to create other branches, and can be areas to merge other code into as well. After you're done with the branch, it can be deleted.&lt;/p&gt;

&lt;p&gt;To get started with branches: there's a few common commands to learn:&lt;br&gt;
&lt;code&gt;git branch&lt;/code&gt; Will list all branches, with an indicator on which one you're on. (Depending on your system this can be a symbol or different coloring)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch &amp;lt;nameOfBranch&amp;gt;&lt;/code&gt; Will create a branch by the name of &lt;/p&gt;

&lt;p&gt;&lt;code&gt;git checkout &amp;lt;nameOfBranch&amp;gt;&lt;/code&gt; Will change your &lt;em&gt;pointer&lt;/em&gt; to the branch specified at &lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;git checkout -b &amp;lt;nameOfBranch&amp;gt;&lt;/code&gt; will create and switch you over to the new branch in one line!&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git merge &amp;lt;nameOfBranch&amp;gt;&lt;/code&gt; will combine content of branch specified in  with the branch you're currently on. In the case of changes in the same areas from when both points were at similar states, you'll be notified of a merge conflict where you'll either be directed to select which changes to keep or have to manually correct the conflicting area.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;git branch -d &amp;lt;nameOfBranch&amp;gt;&lt;/code&gt; removes/deletes the specified branch. You do need to be on a different branch than the one you're trying to delete.&lt;/p&gt;

&lt;p&gt;If you want to learn more about git branches be sure to check out additional documentation on branches. This includes different flags you can use, which can give more visibility to how you're displaying information about your branches, as well as extra things you can do!&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Running a Java Application as a Service</title>
      <author>Davey</author>
      <pubDate>Sun, 27 Jun 2021 13:50:26 +0000</pubDate>
      <link>https://dev.to/davey/running-a-java-application-as-a-service-1c0o</link>
      <guid>https://dev.to/davey/running-a-java-application-as-a-service-1c0o</guid>
      <description>&lt;p&gt;With the advent of cloud computing, we now have many ways that we can deploy Java applications. For example, we can deploy them to an Iaas (Infrastructure as a service) such as Amazon &lt;a href="https://aws.amazon.com/ec2"&gt;EC2&lt;/a&gt;, or to a Paas (Platform as a service) such as &lt;a href="https://aws.amazon.com/elasticbeanstalk"&gt;Amazon Elastic Beanstalk&lt;/a&gt; or also to a variety of other solutions.&lt;/p&gt;

&lt;p&gt;In this article, I'm going to show how to deploy an application to a service such as EC2 where we have full control over the platform. I'll be deploying onto a Linux EC2 instance that already has Java installed and concentrating on configuring a stable environment for a Java application.&lt;/p&gt;

&lt;p&gt;There are many ways that a Java application can be controlled within Linux. It can be started manually via the &lt;code&gt;java&lt;/code&gt; command, or it can be deployed and ran as an executable (for example, via SpringBoot), or it can be ran as a service.&lt;/p&gt;

&lt;p&gt;In this post, I'm going to show how to run a Java application (or any other application for that matter) as a system service. When running as a system service, we get the following benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We can specify the user the application runs as&lt;/li&gt;
&lt;li&gt;We can easily start and stop the application&lt;/li&gt;
&lt;li&gt;We can configure the application to automatically start up when the system boot&lt;/li&gt;
&lt;li&gt;We can configure the application to start again in the case of failure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#creating-a%C2%A0service"&gt;
  &lt;/a&gt;
  Creating a Service
&lt;/h2&gt;

&lt;p&gt;To create a service, I'm going to assume that we have a Jar packaged version of the application. This can be created by Maven with the package command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;mvn package
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To control our application, we're going to run it as a systemd service. Wikipedia defines systemd as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a software suite that provides an array of system components for Linux operating systems. Its main aim is to unify service configuration and behavior across Linux distributions; systemd's primary component is a "system and service manager" - an init system used to bootstrap user space and manage user processes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To create a service, we need to have the relevant access to the server, so we need to ensure we have &lt;code&gt;sudo&lt;/code&gt; access.&lt;/p&gt;

&lt;p&gt;The first stage in defining the application as a service, is to create a file within the &lt;code&gt;/etc/systemd/system&lt;/code&gt; directory with a name of &lt;code&gt;myapp.service&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/etc/systemd/system/myapp.service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Within this file, we need to add 3 sections. &lt;code&gt;[Unit]&lt;/code&gt; defines the description of the service, &lt;code&gt;[Service]&lt;/code&gt; defines how the service is executed and &lt;code&gt;[Install]&lt;/code&gt; tells the operating system when to run the application. For example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[Unit]
Description=My Application As A Service

[Service]
User=myapp_user 
Group=myapp_group 
Type=simple 
ExecStart= java -jar /home/ubuntu/myapp/myapp.jar -Xmx512m –Xms512m -XX:MaxNewSize=384m -XX:MaxPermSize=128m  
SuccessExitStatus=143

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's take a look at each of these sections in turn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unit"&gt;
  &lt;/a&gt;
  [Unit]
&lt;/h2&gt;

&lt;p&gt;This section simply contains one entry which is the description of the service. Note, the name of the service is defined by the name of the file within the &lt;code&gt;/etc/systemd/system&lt;/code&gt; directory.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#service"&gt;
  &lt;/a&gt;
  [Service]
&lt;/h2&gt;

&lt;p&gt;This section defines details that the operating system requires to be able to start the service. Firstly, the User and Group specify the security details for the application to run. The application is run as this specified user and group and has their permissions.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Type&lt;/code&gt; can be set to &lt;code&gt;simple&lt;/code&gt; for most cases. This defines that the application will run immediately without forking any other processes. For a definition of the other options available here, check out the &lt;a href="http://manpages.ubuntu.com/manpages/cosmic/man5/systemd.service.5.html"&gt;man pages&lt;/a&gt; for systemd.&lt;/p&gt;

&lt;p&gt;Next, &lt;code&gt;ExecStart&lt;/code&gt; specifies the command that is used to run the application. Here, we specify the entire command line (including &lt;code&gt;java&lt;/code&gt; and any parameters) to run the application. This can be very useful as we can specify which version of Java to use here, so an application can be configured to run with any required JVM, and not only with the system's default JVM. Any JVM properties or application variables can be configured here.&lt;/p&gt;

&lt;p&gt;Finally, as we're running a Java application, we need to tell it how to play properly with systemd. When a Java application is killed via a SIGTERM event, the JVM will close down cleanly but will return an exit code of 143. Adding this as a &lt;code&gt;SuccessExitStatus&lt;/code&gt; tells systemd that the application has closed cleanly in this situation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install"&gt;
  &lt;/a&gt;
  [Install]
&lt;/h2&gt;

&lt;p&gt;The last section basically tells systemd that if the application is configured to start at server boot time, then do so as part of the normal boot process. This tells systemd that the application can start at boot time, but not that it necessarily will. Read on for how we do that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#controlling-the%C2%A0service"&gt;
  &lt;/a&gt;
  Controlling the Service
&lt;/h2&gt;

&lt;p&gt;Once the &lt;code&gt;.service&lt;/code&gt; file has been created, we need to tell systemd that we have a new service. This is achieved by executing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl daemon-reload
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once executed, we can start and stop the service via:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl start myapp
sudo systemctl stop myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can get the status of the application by executing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl status myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, if we want to tell the systemd to start the application at boot time, we can execute the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl enable myapp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#restarting-upon%C2%A0failure"&gt;
  &lt;/a&gt;
  Restarting upon Failure
&lt;/h2&gt;

&lt;p&gt;Now that we've seen how to create and manage a service, the only thing remaining is to tell systemd to restart the service in case of a failure.&lt;/p&gt;

&lt;p&gt;That can be achieved by adding the following entries into the &lt;code&gt;[Service]&lt;/code&gt; section of the file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Restart=on-failure
RestartSec=10s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This configuration tells systemd to restart the service 10s after a failure (you can obviously customise this to your required time interval).&lt;/p&gt;

&lt;p&gt;There are other options available here, for example, when the service is to restart and how many attempts to be made. For more information, check out the &lt;a href="http://manpages.ubuntu.com/manpages/cosmic/man5/systemd.service.5.html"&gt;man pages&lt;/a&gt; for systemd.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this post we've seen how to run a Java application as a service using systemd, and how to control it. We've seen how to start the service at boot time and how to restart the service upon failure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@introspectivedsgn?utm_source=medium&amp;amp;utm_medium=referral"&gt;Erik Mclean&lt;/a&gt; on &lt;a href="https://unsplash.com?utm_source=medium&amp;amp;utm_medium=referral"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>ec2</category>
      <category>systemd</category>
      <category>services</category>
    </item>
    <item>
      <title>Add a 'Slider' to your Website using CSS and Javascript</title>
      <author>Devang Saklani</author>
      <pubDate>Sun, 27 Jun 2021 13:38:11 +0000</pubDate>
      <link>https://dev.to/devang/add-a-slider-to-your-website-using-css-and-javascript-238e</link>
      <guid>https://dev.to/devang/add-a-slider-to-your-website-using-css-and-javascript-238e</guid>
      <description>&lt;p&gt;In this article I will tell you several ways to &lt;strong&gt;add a Slider to your website&lt;/strong&gt; and how you can use these sliders to make your website look more Attractive and more Functional.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-of-all-what-is-meant-by-slider"&gt;
  &lt;/a&gt;
  First of all, What is meant by slider?
&lt;/h2&gt;

&lt;p&gt;A slider is a term that refers to a slideshow on a website. An example of a slider can be a revolving carousel that displays products or photos.&lt;/p&gt;

&lt;p&gt;Types of Sliders we are going to build:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;With plain CSS and JS (not recommended)&lt;/li&gt;
&lt;li&gt;Using CSS frameworks (like Bootstrap)&lt;/li&gt;
&lt;li&gt;Using JS libraries (best way)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#slider-using-plain-css-and-js"&gt;
  &lt;/a&gt;
  Slider using plain CSS and JS
&lt;/h1&gt;

&lt;p&gt;In this method we will use only CSS and a little bit of JS for making a slider. This is a simple demo of it :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MvUTcywa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64rqh5qsc01hqumylg56.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MvUTcywa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64rqh5qsc01hqumylg56.png" alt="W3Scchools slider example"&gt;&lt;/a&gt;&lt;br&gt;
Codepen example: &lt;a href="https://codepen.io/devang47/pen/OJmLELR"&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also customize it as much as you want (if you know how to).&lt;br&gt;
I won't do deeper into its working as it is already full explained by W3Schools in &lt;a href="https://www.w3schools.com/howto/howto_js_slideshow.asp"&gt;this article.&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;And a person Named &lt;a href="https://www.toptal.com/css/full-page-slider-css-and-javascript"&gt;Stefan Vitasovic&lt;/a&gt; has made  a cool slider using plain CSS and JS. I would recommened you to check-out his method, If you are making it with plain JS. Check out what he made &lt;a href="http://stefan.lynxdev.io/projects/fullscreen-slider/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I would suggest not to use this method if you are a beginner as this method is most complicated. But it can be really helpful to you in some way! i.e. you will get deeper knowledge of It's working and I am sure you will learn many things from it.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#using-css-libraries-bootstrap"&gt;
  &lt;/a&gt;
  Using CSS libraries (Bootstrap)
&lt;/h1&gt;

&lt;p&gt;In this method we will use &lt;strong&gt;Bootstrap&lt;/strong&gt; to make a Image slider.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pR3_-hJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s48fjyhnt26vb5dc8gh0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pR3_-hJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s48fjyhnt26vb5dc8gh0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all, import bootstrap CSS and JS files from any CDN network (for a quick setup).&lt;br&gt;
Then go to &lt;a href="https://getbootstrap.com/docs/5.0/components/carousel/"&gt;this page&lt;/a&gt; to get the HTML Markup or just copy this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="carouselExampleControls" class="carousel slide" data-bs-ride="carousel"&amp;gt;
  &amp;lt;div class="carousel-inner"&amp;gt;
    &amp;lt;div class="carousel-item active"&amp;gt;
      &amp;lt;img src="https://images.unsplash.com/photo-1623646230868-48e8e88b38e4?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=crop&amp;amp;fm=jpg&amp;amp;h=720&amp;amp;ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;w=1280" class="d-block w-100" alt="..."&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="carousel-item"&amp;gt;
      &amp;lt;img src="https://images.unsplash.com/photo-1599636647429-8cbd70bead58?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=crop&amp;amp;fm=jpg&amp;amp;h=720&amp;amp;ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;w=1280" class="d-block w-100" alt="..."&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="carousel-item"&amp;gt;
      &amp;lt;img src="https://images.unsplash.com/photo-1622556474520-59904a30f654?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=crop&amp;amp;fm=jpg&amp;amp;h=720&amp;amp;ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;w=1280" class="d-block w-100" alt="..."&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="prev"&amp;gt;
    &amp;lt;span class="carousel-control-prev-icon" aria-hidden="true"&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;span class="visually-hidden"&amp;gt;Previous&amp;lt;/span&amp;gt;
  &amp;lt;/button&amp;gt;
  &amp;lt;button class="carousel-control-next" type="button" data-bs-target="#carouselExampleControls" data-bs-slide="next"&amp;gt;
    &amp;lt;span class="carousel-control-next-icon" aria-hidden="true"&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;span class="visually-hidden"&amp;gt;Next&amp;lt;/span&amp;gt;
  &amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;

// Bootstrap CSS and JS files 
&amp;lt;link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"&amp;gt;
&amp;lt;script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Codepen example: &lt;a href="https://codepen.io/devang47/pen/vYmBrXN"&gt;click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can do many customizations like: add Controls, Indicators, Captions, Custom Transition effects etc. by reading their documentation &lt;a href="https://getbootstrap.com/docs/5.0/components/carousel/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All I have to say about this is that this is a really easy and fast way to add/make a slider in your Website without compromising anything. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-javascript-library-to-add-a-slider"&gt;
  &lt;/a&gt;
  Using Javascript library to add a slider
&lt;/h1&gt;

&lt;p&gt;This is (according to me) the best way to add a Image/Normal Slider with good Animations in your website.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cbd31G7B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g4i3ntecjr5k8uubjur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cbd31G7B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3g4i3ntecjr5k8uubjur.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
 In this we will use a JS library called &lt;strong&gt;&lt;a href="https://swiperjs.com/"&gt;SwiperJS&lt;/a&gt;&lt;/strong&gt;. You can use others too, but this one is &lt;strong&gt;maintained&lt;/strong&gt; and really popular among developers. Also the things and customizations you can do with it are just Amazing.&lt;/p&gt;

&lt;p&gt;Also, This library has support for Swipe gestures (which is a really difficult thing to make with plain JS). Check example &lt;a href="https://swiperjs.com/demos"&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#but-how-to-make-it-work"&gt;
  &lt;/a&gt;
  &lt;strong&gt;But, How to make it work?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;First of all import it's CSS and JS files from any CDN network, or just copy these links:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;// Both are same (import any one)
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/swiper/swiper-bundle.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/swiper/swiper-bundle.min.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

// Same here (import any one)
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/swiper/swiper-bundle.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://unpkg.com/swiper/swiper-bundle.min.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Basic HTML markup:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="swiper-container"&amp;gt;
  &amp;lt;!-- Additional required wrapper --&amp;gt;
  &amp;lt;div class="swiper-wrapper"&amp;gt;
    &amp;lt;!-- Slides --&amp;gt;
    &amp;lt;div class="swiper-slide"&amp;gt;  &amp;lt;img src="https://images.unsplash.com/photo-1623646230868-48e8e88b38e4?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=crop&amp;amp;fm=jpg&amp;amp;h=720&amp;amp;ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;w=1280" style="width:100%"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class="swiper-slide"&amp;gt;  &amp;lt;img src="https://images.unsplash.com/photo-1599636647429-8cbd70bead58?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=crop&amp;amp;fm=jpg&amp;amp;h=720&amp;amp;ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;w=1280" style="width:100%"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;div class="swiper-slide"&amp;gt;  &amp;lt;img src="https://images.unsplash.com/photo-1622556474520-59904a30f654?crop=entropy&amp;amp;cs=tinysrgb&amp;amp;fit=crop&amp;amp;fm=jpg&amp;amp;h=720&amp;amp;ixlib=rb-1.2.1&amp;amp;q=80&amp;amp;w=1280" style="width:100%"&amp;gt;&amp;lt;/div&amp;gt;
    ...
  &amp;lt;/div&amp;gt;
  &amp;lt;!-- If we need pagination --&amp;gt;
  &amp;lt;div class="swiper-pagination"&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;!-- If we need navigation buttons --&amp;gt;
  &amp;lt;div class="swiper-button-prev"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div class="swiper-button-next"&amp;gt;&amp;lt;/div&amp;gt;

  &amp;lt;!-- If we need scrollbar --&amp;gt;
  &amp;lt;div class="swiper-scrollbar"&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These images in &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; are placeholders, you can change these.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Basic CSS:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
.swiper-container {
  width: calc(1280px/2);
  height: calc(720px/2);
}


//buttons
.swiper-button-next, .swiper-container-rtl .swiper-button-prev {
  color: white;
}
.swiper-button-prev, .swiper-container-rtl .swiper-button-next{
  color: white;
}

//swiper bullets
.swiper-pagination-bullet-active{
  background-color: white;
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Basic JS:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const swiper = new Swiper('.swiper-container', {
  // Optional parameters
  direction: 'horizontal',
  loop: true,

  // If we need pagination
  pagination: {
    el: '.swiper-pagination',
  },

  // Navigation arrows
  navigation: {
    nextEl: '.swiper-button-next',
    prevEl: '.swiper-button-prev',
  },

  // And if we need scrollbar
  scrollbar: {
    el: '.swiper-scrollbar',
  },
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is really Easy to setup and it is highly maintained library. You can do many customizations in this library such as: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;turn off Preloading Images to get Lazyload&lt;/li&gt;
&lt;li&gt;use &lt;code&gt;swiper.activeIndex&lt;/code&gt; in JS to get current index of frame&lt;/li&gt;
&lt;li&gt;Add a slider inside a Slider and many more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would recommened you to read their &lt;strong&gt;Official Documentation&lt;/strong&gt; &lt;a href="https://github.com/nolimits4web/swiper"&gt;here&lt;/a&gt; or Check out some &lt;strong&gt;Examples&lt;/strong&gt; &lt;a href="https://swiperjs.com/demos"&gt;here&lt;/a&gt; to get more information about this Library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-implement-these-sliders-for-better-uiux"&gt;
  &lt;/a&gt;
  How to Implement these Sliders for better UI/UX:
&lt;/h2&gt;

&lt;p&gt;TBH I don't know much about Design, so I would recommened you to read these articles to get proper information about &lt;strong&gt;Where/How to use Sliders for better UI and UX&lt;/strong&gt; : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.shift4shop.com/sliders-web-design"&gt;https://blog.shift4shop.com/sliders-web-design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smartslider3.com/blog/homepage-slider-examples/"&gt;https://smartslider3.com/blog/homepage-slider-examples/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A post by Devang. Hope it helps!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>html</category>
    </item>
    <item>
      <title>Building a SaaS App: Beyond the Basics (Part III)</title>
      <author>zchtodd</author>
      <pubDate>Sun, 27 Jun 2021 13:31:25 +0000</pubDate>
      <link>https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-iii-4am6</link>
      <guid>https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-iii-4am6</guid>
      <description>&lt;p&gt;Once you've finished this post, you'll have a foundation on which to build the data model of your applications, using SQLAlchemy and Postgres.&lt;/p&gt;

&lt;p&gt;If you haven't read the &lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-1jh"&gt;first post in the series&lt;/a&gt;, this is a step by step guide on building a SaaS app that goes beyond the basics, showing you how to do everything from accept payments to manage users.  The example project is a Google rank tracker that we'll build together piece by piece, but you can apply these lessons to any kind of SaaS app.&lt;/p&gt;

&lt;p&gt;In the last post, &lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-ii-1h90"&gt;we set up NGINX and Flask&lt;/a&gt; using Docker, with both a local development version, as well as a version suitable for production deployment.  In this post, we'll set up SQLAlchemy and explore a few of the performance pitfalls that lurk behind the scenes. Then we'll move to setting up our first real route handler, so that the scraper we built in part one can report its results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/zchtodd/open-rank-tracker"&gt;You can find the complete code on GitHub.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-1jh#building-the-google-search-scraper"&gt;Part I: Building the Google Search Scraper&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-1jh#setting-up-puppeteer-on-an-aws-instance"&gt;Setting up Puppeteer on an AWS instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-1jh#making-a-simple-google-search-request"&gt;Making a simple Google search request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-1jh#using-a-proxy-network-for-scraper-requests"&gt;Using a proxy network for scraper requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-1jh#gathering-the-search-results"&gt;Gathering the search results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-1jh#scraper-error-handling"&gt;Scraper error handling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-ii-1h90"&gt;Part II: Production Ready Deployment with NGINX, Flask, and Postgres&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-ii-1h90#setting-up-docker-and-docker-compose"&gt;Setting up Docker and Docker Compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-ii-1h90#deploying-the-development-version"&gt;Deploying the development version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-ii-1h90#understanding-how-nginx-and-flask-work-together"&gt;Understanding how NGINX and Flask work together&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-ii-1h90#testing-the-nginx-and-flask-configuration"&gt;Testing the NGINX and Flask configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-ii-1h90#postgres-configuration"&gt;Postgres configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-ii-1h90#setting-up-ssl-with-lets-encrypt"&gt;Setting up SSL with Let's Encrypt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-ii-1h90#deploying-the-production-version"&gt;Deploying the production version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-iii-4am6"&gt;Part III: Flask, SQLAlchemy, and Postgres&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-iii-4am6/#setting-up-sqlalchemy-and-postgres"&gt;Setting up SQLAlchemy and Postgres&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-iii-4am6/#sqlalchemy-performance-pitfalls-to-avoid"&gt;SQLAlchemy performance pitfalls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/zchtodd_79/building-a-saas-app-beyond-the-basics-part-iii-4am6/#setting-up-our-first-api-route-handler"&gt;Setting up our first API route handler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-sqlalchemy-and-postgres"&gt;
  &lt;/a&gt;
  Setting up SQLAlchemy and Postgres
&lt;/h3&gt;

&lt;p&gt;Back in the first post, we built a working Google search scraper, but we didn't have anywhere to put the results.  We're going to fix that problem now with the help of SQLAlchemy – by far the most popular ORM library for Python.  &lt;/p&gt;

&lt;p&gt;If you haven't used one before, using an ORM will allow us to work in terms of objects, instead of working with messy raw SQL strings in the Python code.  Luckily, setting up SQLAlchemy to work with a Flask application is very straightforward, thanks to the Flask-SQLAlchemy package.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;app/__init__.py&lt;/code&gt; file contains all of the configuration necessary to get started.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.util&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_db_uri&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_app&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"SQLALCHEMY_DATABASE_URI"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_db_uri&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"SQLALCHEMY_ECHO"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;  &lt;span class="c1"&gt;# noqa
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a reduced version of the init file containing just the minimum needed to set up Flask-SQLAlchemy. The config value &lt;code&gt;SQLALCHEMY_DATABASE_URI&lt;/code&gt; tells Flask-SQLAlchemy how to connect to the database.  This ultimately depends on the environment variables we saw in Part 2, such as &lt;code&gt;POSTGRES_USER&lt;/code&gt; and &lt;code&gt;POSTGRES_HOST&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;SQLALCHEMY_ECHO&lt;/code&gt; value is useful when debugging – when set to true, every SQL statement is logged, so you can see what's happening at every step.  We'll see a lot of the global db variable throughout the application, because we'll import it wherever we need to interact with the database.  &lt;/p&gt;

&lt;p&gt;You might also notice the seemingly odd import at the bottom of the file, but it serves an important purpose.  As you'll see soon, each of our models resides in its own file.  Until a model is imported, SQLAlchemy won't know that it exists, even though we created the definition.  Thus, the wildcard import at the bottom ensures that all of our models are imported at runtime.&lt;/p&gt;

&lt;p&gt;Defining a model is easy.  Model classes inherit from &lt;code&gt;db.Model&lt;/code&gt; and define the columns, indexes, and constraints that belong to that model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProxyConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"proxyconn"&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;proxy_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;allow_parallel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;usage_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;block_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;consecutive_fails&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;engaged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"f"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;min_wait_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;random_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;last_used&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we discussed in the first part of the series, we'll need to use proxy connections for the scraper – we'll keep track of those proxies in the database, as well as how they are performing.  We can set a threshold, for instance, so that if a proxy has a certain number of &lt;code&gt;consecutive_fails&lt;/code&gt; we take it out of rotation. The project will eventually have many tables, with a model for everything from users to ranking results.&lt;/p&gt;

&lt;p&gt;At the moment, however, the database is empty.  We need to create the tables defined in our models.  To do that, we can use &lt;code&gt;manage.py&lt;/code&gt; to create an interactive shell.  This shell session is almost the same as an interactive Python session, but within the context of the Flask application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker exec -it openranktracker_app_1 python manage.py shell
&amp;gt;&amp;gt;&amp;gt; db.create_all()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The shell makes the &lt;code&gt;db&lt;/code&gt; global available, and the create_all function will initialize the entire schema within Postgres.  Once that step is complete, you can verify that the tables were created using a &lt;code&gt;psql&lt;/code&gt; session.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker exec -it openranktracker_database_1 psql -U pguser -d openranktracker

psql (11.4 (Debian 11.4-1.pgdg90+1))
Type "help" for help.

openranktracker=# \d
               List of relations
 Schema |       Name       |   Type   | Owner  
-------------+------------------+----------+--------
 public | domain           | table    | pguser
 public | domain_id_seq    | sequence | pguser
 public | keyword          | table    | pguser
 public | keyword_id_seq   | sequence | pguser
 public | proxyconn        | table    | pguser
 public | proxyconn_id_seq | sequence | pguser
(6 rows)

openranktracker=#
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The tables have been created!  Now we just need to put some data in there.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sqlalchemy-performance-pitfalls-to-avoid"&gt;
  &lt;/a&gt;
  SQLAlchemy performance pitfalls to avoid
&lt;/h2&gt;

&lt;p&gt;We want our users to have a fast and responsive experience with the application.  In my experience, the most common source of slowness is mistakes made with the ORM. SQLAlchemy allows for great convenience and speed of development, but it's easy to lose track of what's happening behind the scenes.&lt;/p&gt;

&lt;p&gt;So before moving on, let's cover some of the biggest performance killers, and how to avoid them in our application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-n1-problem"&gt;
  &lt;/a&gt;
  The N+1 Problem
&lt;/h3&gt;

&lt;p&gt;Relationship loading is one of the killer features of any ORM.  Instead of manually writing SQL, we can treat data more like objects and object properties.  To take an example, think of artists, their albums, and the songs that make up those albums.&lt;/p&gt;

&lt;p&gt;This would be a fairly typical way to represent such a problem.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Artist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Album&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;artist_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"artist.id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ondelete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"CASCADE"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;artist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Artist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;backref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"albums"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Album.name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cascade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"delete-orphan,all"&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Song&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;album_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"album.id"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ondelete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"CASCADE"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;    

    &lt;span class="n"&gt;album&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Album&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;backref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"songs"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Song.name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cascade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"delete-orphan,all"&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now say we wanted to show a big list of all artists, their albums, and songs in one place. Because of the relationships that we have defined, this would be one possible way of doing that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;artist&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Artist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;album&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;artist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;albums&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;song&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;album&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;songs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;artist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;album&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may seem innocent enough, and in fact might work perfectly well with a small amount of data, but there is a lot happening behind the scenes.  After setting &lt;code&gt;SQLALCHEMY_ECHO&lt;/code&gt; to true, we see a surprising number of queries sent to the database for such a simple program.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-06-26 17:03:27,602] INFO in log: SELECT artist.id AS artist_id, artist.name AS artist_name 
FROM artist
[2021-06-26 17:03:27,607] INFO in log: SELECT album.id AS album_id, album.name AS album_name, album.artist_id AS album_artist_id 
FROM album 
WHERE %(param_1)s = album.artist_id ORDER BY album.name
[2021-06-26 17:03:27,610] INFO in log: SELECT song.id AS song_id, song.name AS song_name, song.album_id AS song_album_id 
FROM song 
WHERE %(param_1)s = song.album_id ORDER BY song.name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is just with one artist and a single album!  For each new artist or album, you can expect to see another query.  The N+1 problem refers to the idea that an ORM is constantly issuing yet another query for each related object that you want to load.&lt;/p&gt;

&lt;p&gt;This is a real problem, because each database round-trip quickly adds up, and that means our user is growing impatient as they stare at a loading spinner.&lt;/p&gt;

&lt;p&gt;There are many variations on this problem, but the general idea is that we should aim to accomplish the task with fewer queries to the database.  This isn't always worth obsessing over, especially if we're certain that the amount of data is always going to remain limited. When we know that a serious amount of data is expected, however, it's worth thinking in terms of how many queries are involved.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How can we speed up the code we saw above?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is no one absolute best answer, but instead solutions that fit different scenarios.  If we know, for instance, that we're almost always going to fetch artists, albums, and songs together, then we can change how the relationships are loaded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;    &lt;span class="n"&gt;artist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Artist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;backref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"albums"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"Album.name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lazy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"joined"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cascade&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"delete-orphan,all"&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Adding &lt;code&gt;lazy="joined"&lt;/code&gt; instructs SQLAlchemy to always load the related data upfront by issuing a query with a JOIN.  This means fewer queries to the database, because the data is already available when accessing the relationship attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[2021-06-26 17:21:44,224] INFO in log: SELECT artist.id AS artist_id, artist.name AS artist_name, album_1.id AS album_1_id, album_1.name AS album_1_name, album_1.artist_id AS album_1_artist_id, song_1.id AS song_1_id, song_1.name AS song_1_name, song_1.album_id AS song_1_album_id 
FROM artist LEFT OUTER JOIN album AS album_1 ON artist.id = album_1.artist_id LEFT OUTER JOIN song AS song_1 ON album_1.id = song_1.album_id ORDER BY album_1.name, song_1.name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all of the albums and songs are loaded alongside the artist data, and in a single query, instead of separate queries that waste round-trip time.  Of course, if the relationships are rarely loaded, this becomes wasteful, because we're asking the database to do this extra work regardless.&lt;/p&gt;

&lt;p&gt;You can also do the join yourself, which makes sense when always joining up-front is overkill.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Artist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Album&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Song&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#calling-commit-too-many-times"&gt;
  &lt;/a&gt;
  Calling commit too many times
&lt;/h3&gt;

&lt;p&gt;Understanding when to call commit is also important.  Performance and data integrity are two key reasons to call commit at the proper point in the code.  Commit marks all of your changes as permanent (i.e. visible outside of your current transaction), and does so by forcing all of your updates to disk.&lt;/p&gt;

&lt;p&gt;You want your changes persisted to disk, but calling commit multiple times repeats this process unnecessarily.  Call commit only once, typically once you're done making all changes.  This is usually simple in a web application, where you should expect to see &lt;code&gt;commit()&lt;/code&gt; called near the end of a route handler.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#great-convenience-but-with-caution-required"&gt;
  &lt;/a&gt;
  Great convenience, but with caution required
&lt;/h3&gt;

&lt;p&gt;SQLAlchemy brings great convenience, but also the ability to shoot yourself in the foot. Be mindful of what's happening in the background, and just because some code works fine now, doesn't ensure it won't grind to a halt later when flooded with real data.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up-our-first-api-route-handler"&gt;
  &lt;/a&gt;
  Setting up our first API route handler
&lt;/h3&gt;

&lt;p&gt;Now that SQLAlchemy is set up, we're almost ready to start storing some real data.  The scraper agent from part one is already collecting ranking data, so let's build an API endpoint that can store those results.&lt;/p&gt;

&lt;p&gt;First we'll make a slight modification of &lt;code&gt;app/__init__.py&lt;/code&gt; to register the Flask blueprint that represents the API.  A blueprint is a Flask concept that allows for endpoints sharing a common prefix (i.e. &lt;code&gt;/api&lt;/code&gt; in our case) to be grouped together.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.api&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;api_blueprint&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_blueprint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Importing the api_blueprint object within the init_app function prevents circular import issues, since the code within those endpoints will need to import the global &lt;code&gt;db&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;We'll need a place to wire up routes to their respective handlers, and &lt;code&gt;app/api/__init__.py&lt;/code&gt; is where that happens.  We'll start off with just one route, for handling data coming back from the Puppeteer search scraper.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_restful&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Api&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.api.keywords.scan_callback&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ScanCallbackView&lt;/span&gt;

&lt;span class="n"&gt;api_blueprint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Blueprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"/api"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Api&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;api_blueprint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScanCallbackView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"/keywords/&amp;lt;int:keyword_id&amp;gt;/callback/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;&amp;lt;int:keyword_id&amp;gt;&lt;/code&gt; in the URL path is a placeholder for a variable that we expect to receive.  The value will be passed along to the handler method, as we'll see in the next snippet of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;abort&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_restful&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Resource&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.services.keyword&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;handle_scraper_response&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ScanCallbackView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keyword_id&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Keyword scan callback initiated"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"secret_key"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"SECRET_KEY"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s"&gt;"Scan callback did not provide correct secret key: {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"secret_key"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;handle_scraper_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keyword_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;201&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This project uses Flask-RESTful, so the handlers are class based instead of functions – this allows us to handle GET, PUT, POST, and DELETE a little more elegantly.  The scraper sends a POST request, and the handler extracts the data via &lt;code&gt;request.get_json()&lt;/code&gt; before processing the results within the &lt;code&gt;handle_scraper_response&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;We haven't covered users or authentication yet, so how do we prevent abuse of this endpoint?  The app has a &lt;code&gt;SECRET_KEY&lt;/code&gt; config value, which it will pass to scraper sessions. When a scraper sends its POST request, it will include that same secret key for verification.&lt;/p&gt;

&lt;p&gt;That's all it takes to add a route handler!  At this point we have some real functionality: the scraper runs, collects results, and now has a place to report those results.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next?
&lt;/h3&gt;

&lt;p&gt;In part four, we'll break ground on the user interface for OpenRankTracker using React. We'll start off with the user sign-up and login flow and build from there!  I hope you'll join me for part four.&lt;/p&gt;

</description>
      <category>python</category>
      <category>javascript</category>
      <category>docker</category>
    </item>
    <item>
      <title>Understanding Kubernetes in a visual way (in 🎥 video): part 18 – Pod &amp; Node (Anti) Affinities</title>
      <author>Aurélie Vache</author>
      <pubDate>Sun, 27 Jun 2021 13:19:24 +0000</pubDate>
      <link>https://dev.to/aurelievache/understanding-kubernetes-in-a-visual-way-in-video-part-18-pod-node-anti-affinities-1fa2</link>
      <guid>https://dev.to/aurelievache/understanding-kubernetes-in-a-visual-way-in-video-part-18-pod-node-anti-affinities-1fa2</guid>
      <description>&lt;p&gt;Understanding Kubernetes can be difficult or time-consuming. In order to spread knowledges about Cloud technologies I started to create sketchnotes about Kubernetes, then I've auto-published a book and since now I've started a new serie of video! :-)&lt;/p&gt;

&lt;p&gt;I imagined a serie of short videos with a mix of sketchnotes and speech.&lt;/p&gt;

&lt;p&gt;I think it could be a good way, more visual, with audio &amp;amp; video to explain Kubernetes (and others technologies).&lt;/p&gt;

&lt;p&gt;In this new episode, let's talk about Pod &amp;amp; Node Affinities and Anti Afinities.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2_nQGrO6New"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;The video is in French BUT I done the subtitles in english (and french too).&lt;/p&gt;

&lt;p&gt;If you liked the video and are interested to watch another ones, please give me some feedbacks (and you can also subscribe to &lt;a href="https://www.youtube.com/channel/UCrRk0kOP58lBMl9B8ZS8Vlg"&gt;my Youtube channel&lt;/a&gt;, if you want to ❤️).&lt;/p&gt;

&lt;p&gt;If you are interested, I published all the sketchnotes on Kubernetes (and new ones!) to make a "book" of 165 pages: &lt;a href="https://gumroad.com/aurelievache#uCxcr"&gt;"Understanding Kubernetes in a visual way"&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you like theses sketchnotes, you can follow me, I will publish others sketchs shortly :-).&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>devops</category>
      <category>docker</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Run creat-react-app with HTTPS</title>
      <author>Pranjal Jain</author>
      <pubDate>Sun, 27 Jun 2021 13:19:00 +0000</pubDate>
      <link>https://dev.to/pranjaljain0/run-creat-react-app-with-https-4ep6</link>
      <guid>https://dev.to/pranjaljain0/run-creat-react-app-with-https-4ep6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;In current days we host websites on &lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt; and &lt;a href="https://www.netlify.com"&gt;Netlify&lt;/a&gt; and we are automatically assigned a generated SSL to provide with Secured connection(HTTPS), but in the development period we are unaware of the process to run it with HTTPS and we miss out on some testing which works only on HTTPS like google apis, etc.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Configure creat-react-app project to handle https&lt;/li&gt;
&lt;li&gt;Generate SSL Certificates for localhost&lt;/li&gt;
&lt;li&gt;Add certificates to the project&lt;/li&gt;
&lt;li&gt;Trust certificate in browser&lt;/li&gt;
&lt;li&gt;Run the project secured&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#configure-creatreactapp-project-to-handle-https"&gt;
  &lt;/a&gt;
  Configure creat-react-app project to handle https
&lt;/h3&gt;

&lt;p&gt;Add a file &lt;code&gt;.env&lt;/code&gt; in the root directory of the project with the line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;HTTPS=true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#generate-ssl-certificates-for-localhost"&gt;
  &lt;/a&gt;
  Generate SSL Certificates for localhost
&lt;/h3&gt;

&lt;p&gt;Follow this article to generate a SSL certificate for localhost. and place the certificates in the root directory.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/pranjaljain0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3T-ID9xX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bxfA76Io--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/476007/fd6c70da-c0dc-434e-9956-fc722081b87c.png" alt="pranjaljain0"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pranjaljain0/generate-an-ssl-certificate-with-the-root-certificate-for-localhost-18je" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Generate an SSL Certificate With the Root Certificate for localhost&lt;/h2&gt;
      &lt;h3&gt;Pranjal Jain ・ Jun 24 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#security&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webassembly&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
after following this article you must have 8 new files in your directory, which are&lt;br&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;rootCA.key
rootCA.pem
rootCA.srl
server.crt
server.csr
server.csr.cnf
server.key
v3.ext
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-certificates-to-the-project"&gt;
  &lt;/a&gt;
  Add certificates to the project
&lt;/h3&gt;

&lt;p&gt;in the &lt;code&gt;.env&lt;/code&gt; file add these two properties and there paths.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SSL_CRT_FILE=server.crt
SSL_KEY_FILE=server.key
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you will be using the &lt;code&gt;server.crt&lt;/code&gt; as your certificate file &amp;amp; &lt;code&gt;server.key&lt;/code&gt; as your key for certificate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trust-certificate-in-browser"&gt;
  &lt;/a&gt;
  Trust certificate in browser
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.techrepublic.com/article/how-to-add-a-trusted-certificate-authority-certificate-to-chrome-and-firefox/"&gt;Follow this article&lt;/a&gt; to trust the certificate on your browser &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#run-the-project-secured"&gt;
  &lt;/a&gt;
  Run the project secured
&lt;/h3&gt;

&lt;p&gt;Hence you have HTTPS enabled for your project.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oBy64XZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1310j6p88oh03b0nqrx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oBy64XZe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z1310j6p88oh03b0nqrx.png" alt="HTTPS Enabled"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you're stuck anywhere do leave a comment.&lt;/p&gt;

&lt;p&gt;Follow me on Twitter at &lt;a href="https://twitter.com/pranjaljain0"&gt;Twitter/pranjaljain0&lt;/a&gt;&lt;br&gt;
Follow me on Github at &lt;a href="https://github.com/pranjaljain0"&gt;github/pranjaljain0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Hacking!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>webpack</category>
      <category>security</category>
    </item>
  </channel>
</rss>
