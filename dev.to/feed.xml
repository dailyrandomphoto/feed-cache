<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How we choose programming languages at Typeable</title>
      <author>Catherine Galkina</author>
      <pubDate>Tue, 11 May 2021 14:03:40 +0000</pubDate>
      <link>https://dev.to/typeable/how-we-choose-programming-languages-at-typeable-3mnc</link>
      <guid>https://dev.to/typeable/how-we-choose-programming-languages-at-typeable-3mnc</guid>
      <description>&lt;p&gt;Author: Denis Redozubov&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QGHT372L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/pls.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QGHT372L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.typeable.io/images/pls.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I was asked several times, why I prefer using such programming languages as Haskell and Rust since they are not the most widely used and popular tools. I’ve written this post to demystify what is going on in my head when I think about the technology selection.&lt;/p&gt;

&lt;p&gt;Developing software that must meet the requirements for long-term operation and defined reliability level is in a sense similar to a chess play. In both cases, it’s rather difficult for the human brain to comprehend scenarios. Experience is of great importance, and every move/choice can be critical. Further resemblance implies that, just like in chess, development is very much positional, i.e. a whole set of moves can be focused on preparation for a maneuver which results in winning a single pawn. It might appear that it’s merely one pawn but in a serious game it may become a considerable advantage. Similarly to a positional game over the chess board, the development and evolution of large-scale projects involve constant decision-making focused on solving major tasks or implementing the project requirements. The effect of all, even minor, solutions tends to accumulate by the endgame or by the moment the software product is in operation. However, the difference complicating the situation is that, unlike chess, software development is not solved using a computer. You can’t find the best moves just by running a computer engine. That is why it is necessary to make many decisions incrementally leading us to this goal, and all means of improving our position are worth using.&lt;/p&gt;

&lt;p&gt;In the nutshell, solutions can be divided into several categories: architectural, procedural, and instrumental. Architectural solutions show the way we structure the project. Procedures define how we organize the work process and assure the implementation quality and correctness. Instruments, in their turn, determine what the development team should use to achieve the goal. Today, the end-to-end software development is carried out using a large number of tools: you need to formalize the requirements and the development process, write the software code and test it, assemble the release etc. Despite this flow of tasks, selection of programming language can be of the greatest importance because this choice determines the following set of parameters:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Performance baseline.&lt;/li&gt;
&lt;li&gt;Peculiarities of the software distribution and operation, for example, the interpreter’s requirement or the static linking ability.&lt;/li&gt;
&lt;li&gt;Ecosystem of reusable libraries and components. I’d like to note that it is not only the number of libraries that matters but also the quality of those relevant for you.&lt;/li&gt;
&lt;li&gt;Possibilities of parallel/concurrent/asynchronous operation of the programs, which may be important for many systems.&lt;/li&gt;
&lt;li&gt;The difficulty people face when learning the technology, which influences significantly both the language community and the developer retraining.&lt;/li&gt;
&lt;li&gt;Language expressiveness which is somewhat subjective, but still being felt by developers.
Additionally, the selection of programming language can have a strong influence on the structure of development. For instance, the language ecosystem tools may determine the way unit tests are written and the tests scope. A good infrastructure for property tests can give a boost to move in this direction, while the lack of good infrastructure for unit tests can make their development and support more challenging.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The tools also influence architecture-related issues – reuse of the system modules is linked to how easy it is from the conceptual viewpoint to divide the units and structure the code. For instance, explicit work with the effect systems enables better code generalization and allows making sure that the software code unit doesn’t perform any input/output operations, such as network and disk operations. This allows talking about the safety and architecture.&lt;/p&gt;

&lt;p&gt;Considering this, you should be aware that the correct selection of programming language for your project and team may have far-reaching implications. Keeping in mind the chess analogy, we remember that every minor advantage contributes a point in favor of the language and can play a significant role in a large-scale development. It should also be noted that I’m talking about selecting the development tools in situations which set no strict constraints on technology selection relating, for instance, to a large ecosystems already written in a certain language. At Typeable, we are guided by the following reasons for general-purpose languages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The programming language should support static typing. This allows the developer to reduce the duration of each iteration of the code modification and validation. This also allows reducing the number of bugs significantly, both in terms of functional requirements and software safety.&lt;/li&gt;
&lt;li&gt;Algebraic data types – it’s difficult to overestimate the influence of this feature as soon as you start using it. This is a simple feature, absolutely necessary for invariant modeling. Sum types are also so indispensable that selecting a language where you need to simulate them using other constructs means creating obstacles at the first step.&lt;/li&gt;
&lt;li&gt;Flexibility of support and execution of multithreaded programs. Languages with GIL (Global Interpreter Lock) fail to meet this requirement from the very beginning. It’s desirable to be able to maximize the hardware utilization and work with sufficiently high-level abstractions.&lt;/li&gt;
&lt;li&gt;A sufficient ecosystem of libraries. We also subjectively assess their quality. We don’t think it necessary to connect everything in the form of libraries, but such basic things as bindings to popular databases should be available.&lt;/li&gt;
&lt;li&gt;Clear minds in the community of developers who work with this language. A developer we would like to see in our team should be interested in CS and development. This is opposed by “easy-to-learn” technologies tempting people to join IT for the sake of easy money, which greatly dilutes the workforce.&lt;/li&gt;
&lt;li&gt;We should have programming languages in our toolbox that allow creating the software meeting strict time and memory requirements.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Considering all of the above, our toolbox should allow us to hold a steady position in any project going our way. Going back to the chess analogy, these are our principles that let us play a highly positional game. Positional game is a game aimed at creating a long-term position that opens up possibilities for the player and minimizes the weaknesses. It is opposed to an attack-oriented game, i.e. “sharp game” associated with higher risks. The attacking player strives to end the game before the opponent is able to take up a strong defense. Sharp development includes programming contests, MVP for marketing experiments, many data science tasks and, in many cases, software development for Computer Science publications. They are similar in that they usually don’t require any long-term support as they just have to work for a definite period of time. On the other hand, positional game means a long-term play where maintainability and updateability are the key characteristics. This is exactly what we do, and we need a solid foundation to be sure that the software we write and update can operate for a long time. Though such projects can also start as MVP, they are based on quite different assumptions.&lt;/p&gt;

&lt;p&gt;So why do we select the technology based on exactly these considerations? Multiple reasons can be given. First of all, it’s a good idea to exclude the issues of technology fashion and trendiness to improve predictability over a large timespan. Even though a time-proven compiler with an active community is a conservative option, this choice is reliable in contrast to new flashing options popping up every year. Surely, some of them will move from the last category to the first one but we will know this only later, probably in a number of years. Instead of the fashion trends, we strive to use the fundamental Computer Science and the great number of research works devoted to this topic which have been applied in the programming languages we use. For example, the type theory is a discipline close to both mathematics and CS, dealing with the fundamental issues of requirements formalization. This is exactly what we need to write software. Besides, this is the combined experience of other people engaged in "exact" sciences, and I believe, it's absurd to ignore this experience. It makes more sense to take such discipline as a basis rather than use nothing or use a subjective opinion based on the personal experience of a particular individual.&lt;/p&gt;

&lt;p&gt;Secondly, we are looking for the programming languages and compilers embracing the largest possible number of our principles. This is why, in addition to our favorite Haskell, we’ve put Rust in our toolbox. For real-time requirements and strict constraints on memory utilization, we need something rather low-level. The typing strictness in C is still far from perfect, so if we can use Rust for such tasks, we’d prefer doing this.&lt;/p&gt;

&lt;p&gt;The third reason is that we create software primarily for our clients and we’d like to protect them from our biases. That’s why can’t exceed a certain risk level agreed with the client when we select a tool. But even under these conditions we’ve got rather marginal technologies such as GHCJS, because the complex analysis of pros and cons still produced an attractive picture for us and our clients. We wrote already about how we arrived at this decision: &lt;a href="https://dev.to/typeable/comparing-elm-with-reflex-2mme"&gt;Elm vs. Reflex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All means and theoretical justifications are worth using when you work with large code bases and complex software as you have to keep this complexity in check somehow. Our idea of a correct approach is to protect every pawn, improve our position gradually and carefully, so that the project could exist in a good and stable state until the moment it’ll play pivotal role for our clients’ businesses.&lt;/p&gt;

</description>
      <category>functional</category>
      <category>programming</category>
      <category>haskell</category>
      <category>rust</category>
    </item>
    <item>
      <title>🎉🎉7000 subscribers on my Dev YouTube Channel. </title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 11 May 2021 13:28:12 +0000</pubDate>
      <link>https://dev.to/thenerdydev/7000-subscribers-on-my-dev-youtube-channel-2172</link>
      <guid>https://dev.to/thenerdydev/7000-subscribers-on-my-dev-youtube-channel-2172</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0fIbvz1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2d85mrqniuv74f54j0m.JPG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0fIbvz1O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a2d85mrqniuv74f54j0m.JPG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I just completed &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7000-i-have-worked-very-hard-to-reach-this-small-number-nothing-big-but-enough-to-carry-the-momentum-forward-"&gt;
  &lt;/a&gt;
  7000 (I have worked very hard to reach this small number. Nothing big but enough to carry the momentum forward 😉)
&lt;/h2&gt;

&lt;p&gt;subscribers on my YouTube Channel. If you are looking to learn programming, make sure to check out my YouTube Channel. I have loads of tutorials on &lt;strong&gt;JavaScript&lt;/strong&gt;, &lt;strong&gt;Python&lt;/strong&gt;, &lt;strong&gt;Machine Learning&lt;/strong&gt; (&lt;em&gt;to name a few&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In case you haven't checked out the channel yet&lt;/em&gt;, &lt;/p&gt;

&lt;p&gt;👉🏻 Check out my YouTube Channel : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Lastly I would like to thank 🙏🏻 creators like &lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__412316"&gt;
  
    .ltag__user__id__412316 .follow-action-button {
      background-color: #212121 !important;
      color: #ffffff !important;
      border-color: #212121 !important;
    }
  
    &lt;a href="/thenetninja" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzXxYhGh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--NtwgwZi---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/412316/ef33827e-3f6a-4ed3-bd30-bcba089fa66a.jpeg" alt="thenetninja image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/thenetninja"&gt;Shaun&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/thenetninja"&gt;Shaun, aka the Net Ninja on YouTube. Enjoy coding, travelling, coffee, gaming &amp;amp; astronomy.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
, &lt;div class="ltag__user ltag__user__id__137487"&gt;
  
    .ltag__user__id__137487 .follow-action-button {
      background-color: #0030b3 !important;
      color: #ffffff !important;
      border-color: #0030b3 !important;
    }
  
    &lt;a href="/traversymedia" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AhIoWcIS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--A_-VNNFb--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/137487/f8c1607f-f10b-4bf2-b719-0bac0e29068c.jpg" alt="traversymedia image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/traversymedia"&gt;Brad Traversy&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/traversymedia"&gt;/traversymedia&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
 for inspiring me to start my own Dev Channel. I have myself learnt a lot from them. 

&lt;p&gt;👉🏻 &lt;strong&gt;UPDATE&lt;/strong&gt; : I am working on a &lt;strong&gt;BRAND&lt;/strong&gt; new &lt;strong&gt;FREE&lt;/strong&gt;- &lt;strong&gt;Web Developer Full Course&lt;/strong&gt; on YouTube , check the below article to know more about the topics that we cover in this course:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Also if you have a few spare hours then utilize them by creating these &lt;strong&gt;10 JavaScript Projects in under 2 Hours&lt;/strong&gt; &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/10-javascript-projects-in-2-hours-3p1c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 JavaScript Projects in 2 Hours&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Oct 26 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;👉🏻 Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;/p&gt;

</description>
    </item>
    <item>
      <title>Why use a css framework when you can use vanilla css?</title>
      <author>Akshat Singhania</author>
      <pubDate>Tue, 11 May 2021 13:08:49 +0000</pubDate>
      <link>https://dev.to/akshatsinghania/why-use-a-css-framework-when-you-can-use-vanilla-css-3n81</link>
      <guid>https://dev.to/akshatsinghania/why-use-a-css-framework-when-you-can-use-vanilla-css-3n81</guid>
      <description>&lt;h3&gt;
  &lt;a href="#using-a-css-framework-for-projects-is-quite-common-these-days-whether-it-be-big-projects-or-small-side-projects-but-why-do-devs-use-a-css-framework-anyway"&gt;
  &lt;/a&gt;
  Using a CSS framework for projects is quite common these days whether it be big projects or small side projects but why do dev's use a CSS framework anyway
&lt;/h3&gt;

&lt;p&gt;While making a website, it is a tough job to make headers/navbars with minor feature like disappearing it on mobiles and making a menu instead, handle pads and tablets screen sizes, dropdowns so talking about these we come to our first point&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Premade features for easy use and faster development times&lt;br&gt;
though implementing a normal feature like a login page might be easy and quick, adding elements like errors and dialog boxes might be a long and time-consuming task especially dealing with edge cases like overlapping on different screen sizes, messed up animations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Huge community/organization support for bug fixes, and implementation for many browsers, screen sizes over the years the framework has existed, that means you can get relieved for common problems in older browsers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Help to learn CSS , just getting started with CSS and styling , well it takes a lot of time to learn CSS and proper styling of webpages, you might not know about flex boxes and the new grid layout, well the CSS framework already the easier way to implement it&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;They come with documentation. If you need help getting started, the framework generally comes with some support files. This can be particularly nice if you are designing a site you will be handing off to a client. You can just let them know what framework you used and refer them to that documentation for support requests.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>css</category>
      <category>bootstrap</category>
      <category>libary</category>
      <category>readthis</category>
    </item>
    <item>
      <title>Project: Basic Authentication System</title>
      <author>Ulzahk</author>
      <pubDate>Tue, 11 May 2021 13:05:22 +0000</pubDate>
      <link>https://dev.to/ulzahk/project-basic-authentication-system-2mjp</link>
      <guid>https://dev.to/ulzahk/project-basic-authentication-system-2mjp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#project-structure"&gt;Project Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#authentication-level-zero"&gt;Authentication Level Zero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#authentication-level-one"&gt;Authentication Level One&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#authentication-level-one-advantages-disadvantages"&gt;Authentication Level One Advantages and Disadvantages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you hear or see the word authentication you relate it to identification and that is a correct approach to this term. We just need to add permissions to perform a specific action in an app and we will have a more complete definition for the technology area.&lt;/p&gt;

&lt;p&gt;In this project we are going to have a series of authentication systems in order to better understand what they need, how they are built and how they work. &lt;/p&gt;

&lt;p&gt;Of course being these kind of security systems, they need something to protect, in this occasion we established a list of Pokémon cards with which the user will get the permission to see them and interact with the search engine to sort them in order of pokemon type or by the name of the pokemon.&lt;/p&gt;

&lt;p&gt;For this post we will cover the first authentication structure. So let's get started&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We will use two repositories, one to manage the visual part, user interface and forms with technologies such as React for the development of interfaces, Sass to style those interfaces and Webpack to compile the application in a lighter and more adaptable format for browsers.&lt;/p&gt;

&lt;p&gt;The second repository will be used to handle requests, database queries and information transformation. We will use technologies such as Node to be able to handle JavaScript from the Backend side, Express to create endpoints faster and PostgreSQL to handle the connection to this type of database and queries.&lt;/p&gt;

&lt;p&gt;Finally we have the servers these would be the platforms, Vercel to host both parts working and ElephantSQL that offers PostgreSQL databases ideal for projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication-level-zero"&gt;
  &lt;/a&gt;
  Authentication Level Zero &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nBkM5le4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk2q90lr7vafsz3gq92j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nBkM5le4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rk2q90lr7vafsz3gq92j.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to understand how the project would be if it did not have authentications, this section is created where it is simulated that the data is exposed and any user can manipulate it without having permissions to do so.&lt;/p&gt;

&lt;p&gt;It is also a quick way to know what we are protecting, a list of cards of the first generation Pokémons. By fetching the information from PokéAPI, we get pokémons with their name, types, an image that represents them and their identifier as a label.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#authentication-level-one"&gt;
  &lt;/a&gt;
  Authentication Level One &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0WOh7q2Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g32y7d0lsj2wwk728kv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0WOh7q2Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4g32y7d0lsj2wwk728kv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this first level we are going to build a simple login with username and password without email verification. In order to understand how it would be useful to us and what disadvantages it presents.&lt;/p&gt;

&lt;p&gt;This will start to work the moment the user fills the form for the creation of an account correctly and presses the create account button. This will send a request to the Backend, to confirm if the data is correct, mainly that all the data is complete. &lt;/p&gt;

&lt;p&gt;If so, the password is encrypted first, then the new user's information is written into the database, and then a correct response is sent to the Frontend to redirect the user to the login form.&lt;/p&gt;

&lt;p&gt;This can be seen in the following diagram:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nocYMQXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqcxavew58uw064o6irx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nocYMQXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqcxavew58uw064o6irx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here I share the function that handles the endpoint (file UsersController.js):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class UsersController{
  async createUser(req, res){
    const {body: user} = req;
    try {
      const createdUser = await usersService.createUser({ user });
      res.status(201).json({
        message: 'User created',
        user: createdUser
      });
    } catch (err) {
      console.log(err);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is the function in the Backend, where we verify the table fields, add a unique identifier and encrypt the password before writing the information (file UsersService.js):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { client } = require('../../config/database');
const { v4: uuid }  = require('uuid');
const bcrypt = require('bcrypt');

class UsersService {
  constructor(){
    this.table = 'users',
    this.fields = 'id, username, password, email'
  }

  async createUser({ user }){
    const { username, password, email, fullName } = user
    try {
      const id = uuid();
      const encriptedPassword = await bcrypt.hash(password, 10);
      const lowerCaseEmail = email.toLowerCase();
      const userCreated = await client.query(
        `INSERT INTO ${this.table}(${this.fields}) VALUES (
          '${id}',
          '${username}',
          '${encriptedPassword}',
          '${lowerCaseEmail}',
        )`
      )
      return userCreated.rowCount;
    } catch (err) {
      console.error(err);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Vab2gdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06iv64pprgvs9d5nud5g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Vab2gdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06iv64pprgvs9d5nud5g.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the login a very similar process is done, what varies is the Backend processing where the existence of that user is confirmed, the password is verified to be correct and if everything is OK a response is sent with a JSON Web Token.&lt;/p&gt;

&lt;p&gt;This token will be stored locally in Frontend with the browser's window.localStorage.setItem() function so that it can be used in requests that require it as a value in a header.&lt;/p&gt;

&lt;p&gt;Diagram of the login process:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wL8_8jcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7tduehn5gch1fq8su83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wL8_8jcD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d7tduehn5gch1fq8su83.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Function that handles the login endpoint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  async loginUser (req, res){
    const { user, password } = req.body;
    try {
      if(!user || !password) res.status(401).send('Invalid information');

      let userData;

      const userDataByUsername = await usersService.getUserByUsername({user});
      if(userDataByUsername.length === 0) {
        const userDataByEmail = await usersService.getUserByEmail({user});
        if(userDataByEmail.length === 0) res.status(401).send('Invalid information');
        userData = userDataByEmail;
      } else {
        userData = userDataByUsername;
      };

      const comparedPassword = await bcrypt.compare(password, userData.password);
      if(!comparedPassword) res.status(401).send('Invalid information');
      const token = jwtAuthenticationService.JWTIssuer({user: userData.id}, '15 min');
      res.status(200).json({ token: token })
    } catch (err) {
      console.log(err)
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Function to consult users by username:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  async getUserByUsername({ user }){
    try {
      const userData = await client.query(`SELECT * FROM ${this.table} WHERE username='${user}'`)
      return userData.rows[0] || [];
    } catch (err) {
      console.error(err)
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Function to consult users by email:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  async getUserByEmail({ user }){
    try {
      const lowerCaseEmail = user.toLowerCase()
      const userData = await client.query(`SELECT * FROM ${this.table} WHERE email='${lowerCaseEmail}'`)
      return userData.rows[0] || [];
    } catch (err) {
      console.error(err)
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, the last thing that happens is that Frontend performs a query using the token to bring the user information and display the username.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KM4FgUDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkuqin9jggf5pjevojtl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KM4FgUDR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mkuqin9jggf5pjevojtl.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the function that takes care of this endpoint:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  async listUserById(req, res){
    const { bearertoken } = req.headers;
    if(!bearertoken) res.status(401).json({message: 'Request without token'})

    const tokenData = await jwtAuthenticationService.JWTVerify(bearertoken)
    if(tokenData === undefined) res.status(401).json({message: 'Invalid token'})

    const userId = tokenData.user;

    try {
      const userData = await usersService.getUserById({ userId });
      res.status(200).json({
        message: 'User listed',
        user: {
          id: userData.id,
          username: userData.username,
          email: userData.email,
        }
      })
    } catch (err) {
      console.log('listUserById error: ', err);
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#authentication-level-one-advantages-and-disadvantages"&gt;
  &lt;/a&gt;
  Authentication Level One Advantages and Disadvantages &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#advantages"&gt;
  &lt;/a&gt;
  Advantages
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Easy to implement in any application&lt;/li&gt;
&lt;li&gt;Quick way to create users and be able to relate them to the other services of the application.&lt;/li&gt;
&lt;li&gt;Gradually more verifications and safety elements can be added.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#disadvantages"&gt;
  &lt;/a&gt;
  Disadvantages
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;It has a low level of security compared to other authentication structures.&lt;/li&gt;
&lt;li&gt;In case of password loss, it is necessary to contact support directly to change the password.&lt;/li&gt;
&lt;li&gt;If maintained in this manner without implementing further security measures, there is a risk of being breached.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you noticed the account creation endpoint has no user verification so someone can create an account with the same email and username without any restriction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did we prevent this situation from happening? Share your answer in the comments&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lastly, now that you know the functionality of this application I invite you to review it, try it and leave me your suggestions to improve it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App Demo: &lt;a href="https://frontend-bas-ulzahk.vercel.app/"&gt;https://frontend-bas-ulzahk.vercel.app/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;﻿If you want to review the application documentation, here I share the repositories:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App Repository: &lt;a href="https://github.com/Ulzahk/Frontend-BAS"&gt;https://github.com/Ulzahk/Frontend-BAS&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;API Repository: &lt;a href="https://github.com/Ulzahk/Backend-BAS"&gt;https://github.com/Ulzahk/Backend-BAS&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;PokéAPI: &lt;a href="https://pokeapi.co/"&gt;https://pokeapi.co/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;ElephantSQL: &lt;a href="https://www.elephantsql.com/"&gt;https://www.elephantsql.com/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;JSON Web Token: &lt;a href="https://jwt.io/"&gt;https://jwt.io/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;bcrypt for NodeJs: &lt;a href="https://www.npmjs.com/package/bcrypt"&gt;https://www.npmjs.com/package/bcrypt&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>node</category>
      <category>react</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Crossposting to dev.to Made Easy</title>
      <author>Atibhi Agrawal</author>
      <pubDate>Tue, 11 May 2021 12:59:16 +0000</pubDate>
      <link>https://dev.to/asquare14/crossposting-to-dev-to-made-easy-58f6</link>
      <guid>https://dev.to/asquare14/crossposting-to-dev-to-made-easy-58f6</guid>
      <description>&lt;p&gt;Do you often write your articles on Google Docs, Notion or Medium and then have to manually convert it to markdown to post on dev.to?&lt;/p&gt;

&lt;p&gt;If yes, then checkout &lt;a href="https://euangoddard.github.io/clipboard2markdown/"&gt;Paste to Markdown&lt;/a&gt;. Simply paste any text and it will be converted to markdown along with proper formatting!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>markdown</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Git-flow, non-technical intro.</title>
      <author>Shaquil Maria</author>
      <pubDate>Tue, 11 May 2021 12:56:10 +0000</pubDate>
      <link>https://dev.to/theowlsden/git-flow-non-technical-intro-3ahh</link>
      <guid>https://dev.to/theowlsden/git-flow-non-technical-intro-3ahh</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@yancymin?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Yancy Min&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/github?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Howdy DEV clan? &lt;/p&gt;

&lt;p&gt;We've all heard of the recommendation and best practice: "Use a version control for your project." While this is true, it might save you from F*CK-ups, not many blogs proclaiming the use of version control mention how to use it or the best way to use it.&lt;/p&gt;

&lt;p&gt;Here comes Git-flow. Git-flow is a git workflow you can use to streamline your use of version control for your whole application. In today's post, I'll go over the basics of Git-flow and how it can improve your git-flow.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-gitflow"&gt;
  &lt;/a&gt;
  What is git-flow?
&lt;/h2&gt;

&lt;p&gt;Git-flow is a git workflow proposed in 2010 by this &lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;post&lt;/a&gt;. This workflow is supposed to help you with your software development and DevOps practices. Git-flow defines a branching strategy and releases management for your software.&lt;/p&gt;

&lt;p&gt;Git-flow uses git as its base (it's in the name!). Git was proposed for its distributed nature and "ease of use". Git allows for a simpler branching and merging mechanism compared to some other version control systems. More on &lt;a href="https://git-scm.com/about"&gt;git here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gitflow-branches"&gt;
  &lt;/a&gt;
  Git-flow branches
&lt;/h3&gt;

&lt;p&gt;When you create a project and initiate git in it, you have by default your main branch (go on, try it don't be shy). In git-flow, this &lt;em&gt;main&lt;/em&gt; branch HEAD (latest changes committed) should always contain the production-ready software.&lt;/p&gt;

&lt;p&gt;You might be asking: If the main branch is for production-ready code, in which branch should I develop the application then? You guessed it! Your main development branch is called &lt;em&gt;develop&lt;/em&gt;. The &lt;em&gt;develop&lt;/em&gt; branch should always contain the latest changes that are ready for release (ready to be sent to production).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uJ1UYcgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nvie.com/img/main-branches%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJ1UYcgl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nvie.com/img/main-branches%402x.png" alt="https://nvie.com/img/main-branches.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To make sure that your &lt;em&gt;develop&lt;/em&gt; branch only has the code that is ready to be sent to production, you need to separate your development into phases that work towards release. And guess what, git-flow has a solution for that.&lt;/p&gt;

&lt;p&gt;Git-flow consist of three types of branches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Feature branches&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Release branches&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hotfix branches&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On a technical level, each branch is the same as the other. But for usage distinction, each type of branch has its specific use and is bound to strict rules for their originated branch (which branch they can be branched off) and their merging targets (which branch they are allowed to branch into).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--60lknffe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nvie.com/img/git-model%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--60lknffe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://nvie.com/img/git-model%402x.png" alt="https://nvie.com/img/git-model.png"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://nvie.com/posts/a-successful-git-branching-model/"&gt;source&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#feature-branches"&gt;
  &lt;/a&gt;
  Feature branches
&lt;/h3&gt;

&lt;p&gt;Feature branches are used to develop well, features. Do you want to develop the login feature of your software? You do that in the feature branch. You use feature branches to develop the features you want to add to your software, for a new release or a distant one (maybe you just want to set the base to develop and publish later). &lt;/p&gt;

&lt;p&gt;The feature branch should always branch off from the &lt;em&gt;develop&lt;/em&gt; branch. Why? So that you have the latest version of your to work with. Likewise, the feature branch should always be merged into the &lt;em&gt;develop&lt;/em&gt; branch, this will make the feature ready to be released.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#release-branches"&gt;
  &lt;/a&gt;
  Release branches
&lt;/h3&gt;

&lt;p&gt;Release branches, well they are there to do final tinkering on a release before it goes to production. In these branches, you make minor fixes and final tinkering. Why do you use a release branch if your &lt;em&gt;develop&lt;/em&gt; branch has the latest code?&lt;/p&gt;

&lt;p&gt;Glad you asked (even if you didn't), this is to separate the release from the concurrent development. Let's say you finished three features at the same time (thus merged them into the &lt;em&gt;develop&lt;/em&gt; branch), but you want to release only one. You create a release branch for that specific feature, do the final tinkering, and merge that to the main branch. Easy peasy lemon squeezy, you separated the release of the feature while keeping your &lt;em&gt;develop&lt;/em&gt; branch available to changes from new features.&lt;/p&gt;

&lt;p&gt;Since you are working with code that is ready for release, you can only make a &lt;em&gt;release&lt;/em&gt; branch by branching from &lt;em&gt;develop&lt;/em&gt;. When you are done with the branch, you must merge it into the &lt;em&gt;main&lt;/em&gt; branch and release the code and into the &lt;em&gt;develop&lt;/em&gt; branch (so that your develop branch has the latest changes).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hotfix-branches"&gt;
  &lt;/a&gt;
  Hotfix branches
&lt;/h3&gt;

&lt;p&gt;Finally, we have hotfix branches. They have the same functionality as release branches, prepare your code for production, but they are used specifically for unplanned changes/ improvements. &lt;/p&gt;

&lt;p&gt;Imagine you tested your software against the major ways your software can break, and it passes them all and you released the new feature. Just a day or two after the release, your users start complaining that they get X instead of Y when they click on a button. &lt;/p&gt;

&lt;p&gt;To fix that bug, you don't need to create a feature branch, then merge it into &lt;em&gt;develop&lt;/em&gt; and create a release branch. No! you create a hotfix branch from your main branch and fix that bug, hence &lt;em&gt;hotfix&lt;/em&gt;. After fixing the bug in your code, you must merge the changes into the &lt;em&gt;develop&lt;/em&gt; branch and the &lt;em&gt;main&lt;/em&gt; branch for production.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q9GuVZBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/ClearcutWeightyHartebeest-size_restricted.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q9GuVZBp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://thumbs.gfycat.com/ClearcutWeightyHartebeest-size_restricted.gif" alt="https://thumbs.gfycat.com/ClearcutWeightyHartebeest-size_restricted.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, there you have it. Git-flow is a very strict workflow for version controlling your project, and to some, it might look over-engineered and daunting. I recommend to not follow it to the letter, pick bits and pieces, and Frankenstein your way to a development structure that you and your team can easily work with and integrate into your projects.&lt;/p&gt;

&lt;p&gt;I hope that you learned something from this post. Go on and structure your side projects!🤟&lt;/p&gt;

</description>
      <category>devops</category>
      <category>todayilearned</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Bulk SMS Provider in Tanzania</title>
      <author>Alpha Olomi</author>
      <pubDate>Tue, 11 May 2021 12:36:29 +0000</pubDate>
      <link>https://dev.to/alphaolomi/bulk-sms-provider-in-tanzania-1dj4</link>
      <guid>https://dev.to/alphaolomi/bulk-sms-provider-in-tanzania-1dj4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#key-areas-of-concern"&gt;
  &lt;/a&gt;
  Key areas of concern
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Price&lt;/li&gt;
&lt;li&gt;Integration/Development experience&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Up time&lt;/li&gt;
&lt;li&gt;Time required to successfully register Sender ID&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#other-areas"&gt;
  &lt;/a&gt;
  Other areas
&lt;/h3&gt;

&lt;p&gt;We won't be looking into these at this scope&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;API limits&lt;/li&gt;
&lt;li&gt;Auth strategy&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#key-providers"&gt;
  &lt;/a&gt;
  Key Providers
&lt;/h2&gt;

&lt;p&gt;Without any order&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AfricasTalking&lt;/li&gt;
&lt;li&gt;NextSMS&lt;/li&gt;
&lt;li&gt;Beem africa&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#africastalking"&gt;
  &lt;/a&gt;
  &lt;a href="https://africastalking.com/"&gt;AfricasTalking&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#pricing-plans"&gt;
  &lt;/a&gt;
  Pricing Plans
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tier&lt;/th&gt;
&lt;th&gt;Price&lt;/th&gt;
&lt;th&gt;Plan Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0 - 499,999&lt;/td&gt;
&lt;td&gt;TZS 22&lt;/td&gt;
&lt;td&gt;Basic Plan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;500,000 - 2,499,999&lt;/td&gt;
&lt;td&gt;TZS 20&lt;/td&gt;
&lt;td&gt;Plus Plan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2,500,000+&lt;/td&gt;
&lt;td&gt;Contact Sales&lt;/td&gt;
&lt;td&gt;Max Plan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#integrationdevelopment-experience"&gt;
  &lt;/a&gt;
  Integration/Development experience
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Plenty of Official SDK's for all major languages and frameworks&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Well documented&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#up-time"&gt;
  &lt;/a&gt;
  Up time
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;99%&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#time-required-to-successfully-register-sender-id"&gt;
  &lt;/a&gt;
  Time required to successfully register Sender ID
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A week / 5 business days&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#nextsms"&gt;
  &lt;/a&gt;
  &lt;a href="https://nextsms.co.tz/"&gt;NextSMS&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#price"&gt;
  &lt;/a&gt;
  Price
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plan name&lt;/th&gt;
&lt;th&gt;Price&lt;/th&gt;
&lt;th&gt;Tier&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PACKAGE A&lt;/td&gt;
&lt;td&gt;16 TSH /sms&lt;/td&gt;
&lt;td&gt;1 or more SMS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PACKAGE B&lt;/td&gt;
&lt;td&gt;15 TSH /sms&lt;/td&gt;
&lt;td&gt;6,000 or more SMS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PACKAGE C&lt;/td&gt;
&lt;td&gt;14 TSH /sms&lt;/td&gt;
&lt;td&gt;55,000 or more SMS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PACKAGE D&lt;/td&gt;
&lt;td&gt;13 TSH /sms&lt;/td&gt;
&lt;td&gt;110,000 or more SMS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PACKAGE E&lt;/td&gt;
&lt;td&gt;Contact Sales&lt;/td&gt;
&lt;td&gt;500,001 or more&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#integrationdevelopment-experience"&gt;
  &lt;/a&gt;
  Integration/Development experience
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A week / 5 bussiness days&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Only API endpoints are documented&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#up-time"&gt;
  &lt;/a&gt;
  Up time
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;99%&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#time-required-to-successfully-register-sender-id"&gt;
  &lt;/a&gt;
  Time required to successfully register Sender ID
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A week / 5 business days&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#beem-africa"&gt;
  &lt;/a&gt;
  &lt;a href="https://sms.beem.africa/"&gt;Beem africa&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#price"&gt;
  &lt;/a&gt;
  Price
&lt;/h4&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tier&lt;/th&gt;
&lt;th&gt;Price&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1 - 1000&lt;/td&gt;
&lt;td&gt;TZS 25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1001 - 2500&lt;/td&gt;
&lt;td&gt;TZS 23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2501 - 5000&lt;/td&gt;
&lt;td&gt;TZS 22&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5001 - 10000&lt;/td&gt;
&lt;td&gt;TZS 20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10001 - 25000&lt;/td&gt;
&lt;td&gt;TZS 19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25001 - 50000&lt;/td&gt;
&lt;td&gt;TZS 18&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;50001 - 100000&lt;/td&gt;
&lt;td&gt;TZS 17&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#integrationdevelopment-experience"&gt;
  &lt;/a&gt;
  Integration/Development experience
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  Documentation
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#up-time"&gt;
  &lt;/a&gt;
  Up time
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;99%&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#time-required-to-successfully-register-sender-id"&gt;
  &lt;/a&gt;
  Time required to successfully register Sender ID
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;A week / 5 business days&lt;/li&gt;
&lt;/ul&gt;



&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;All Data was retrieved on May, 11 , 2021 from official websites, Am not affiliated with any vendor mention.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>sms</category>
      <category>bulksms</category>
      <category>vendors</category>
    </item>
    <item>
      <title>JavaScript Interview Question #39: How does setTimeout work inside the loop?</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Tue, 11 May 2021 12:27:06 +0000</pubDate>
      <link>https://dev.to/coderslang/javascript-interview-question-39-how-does-settimeout-work-inside-the-loop-33lc</link>
      <guid>https://dev.to/coderslang/javascript-interview-question-39-how-does-settimeout-work-inside-the-loop-33lc</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dCGpWAXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-39.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dCGpWAXP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://learn.coderslang.com/js-test-39.png" alt="js-test-39"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What will be logged to the console?&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;.&lt;/p&gt;

&lt;p&gt;Before we analyze the code snippet, let’s try to simplify it by removing the &lt;code&gt;setTimeout&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we just leave the plain &lt;code&gt;console.log&lt;/code&gt; in the loop, then the output is all the values of &lt;code&gt;i&lt;/code&gt; from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;4&lt;/code&gt; printed on each iteration of the loop.&lt;/p&gt;

&lt;p&gt;However, when the &lt;code&gt;setTimeout&lt;/code&gt; is added, the &lt;code&gt;console.log&lt;/code&gt; will be executed after the loop has already been processed and the value of &lt;code&gt;i&lt;/code&gt; is 5.&lt;/p&gt;

&lt;p&gt;As &lt;code&gt;i&lt;/code&gt; was declared with &lt;code&gt;var&lt;/code&gt;, it has the global scope and the intermediary values aren’t stored in closure around the arrow function &lt;code&gt;() =&amp;gt; console.log(i)&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;ANSWER&lt;/strong&gt;: the value &lt;code&gt;5&lt;/code&gt; will be printed on the screen 5 times. Each time on the new line.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://js.coderslang.com"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>webdev</category>
    </item>
    <item>
      <title>
A container or a package???</title>
      <author>Emanuel Allely</author>
      <pubDate>Tue, 11 May 2021 12:26:30 +0000</pubDate>
      <link>https://dev.to/emanuel_allely/a-container-or-a-package-30af</link>
      <guid>https://dev.to/emanuel_allely/a-container-or-a-package-30af</guid>
      <description>&lt;p&gt;Fellow developers, I need your help. We are working on something new, and we need your help deciding how we should call one of our features.&lt;/p&gt;

&lt;p&gt;According to you, which word describes the best: " &lt;strong&gt;A sharable folder containing cross-platform code files managing one or more services.&lt;/strong&gt; " ?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A container&lt;/li&gt;
&lt;li&gt;A package&lt;/li&gt;
&lt;li&gt;Other, share in comment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks a lot for your help&lt;/p&gt;

</description>
      <category>embedded</category>
      <category>opensource</category>
      <category>wording</category>
      <category>microservices</category>
    </item>
    <item>
      <title>How I started coding, got a job as a dev, built an audience on Twitter, and made my first income online</title>
      <author>Pasca Vlad</author>
      <pubDate>Tue, 11 May 2021 12:18:55 +0000</pubDate>
      <link>https://dev.to/pascavld/how-i-started-coding-got-a-job-as-a-dev-built-an-audience-on-twitter-and-made-my-first-income-online-4e8e</link>
      <guid>https://dev.to/pascavld/how-i-started-coding-got-a-job-as-a-dev-built-an-audience-on-twitter-and-made-my-first-income-online-4e8e</guid>
      <description>&lt;p&gt;&lt;em&gt;If you found value in this thread you will most likely enjoy my tweets too so make sure you follow me on &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt;  for more information about web development and how to improve as a developer. This article was first published on my &lt;a href="https://vladpasca.hashnode.dev/"&gt;Blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Everything started in the last week of 2019&lt;/p&gt;

&lt;p&gt;I was in my first year of high school and my uncle started talking to me about programming&lt;/p&gt;

&lt;p&gt;He was already a senior web developer with over 10 years of experience&lt;/p&gt;

&lt;p&gt;At that time I already wrote a few lines of code at school in C++ but I had no idea what Web Development was&lt;/p&gt;

&lt;p&gt;He told me that I should give this a try and told me to learn Python first&lt;/p&gt;

&lt;p&gt;In the first week of 2020, I started learning Python&lt;/p&gt;

&lt;p&gt;I searched on Reddit for some tutorials I could follow and someone recommended me Codecademy&lt;/p&gt;

&lt;p&gt;I went on their website and started coding&lt;/p&gt;

&lt;p&gt;For one week all I did was code on there&lt;/p&gt;

&lt;p&gt;I fell in love with it in less than a day&lt;/p&gt;

&lt;p&gt;3 months later I was still doing some small Python projects in my free time&lt;/p&gt;

&lt;p&gt;Then the Pandemic came&lt;/p&gt;

&lt;p&gt;Suddenly I had a lot of free time&lt;/p&gt;

&lt;p&gt;So I called my uncle and he told me to continue learning Web Development&lt;/p&gt;

&lt;p&gt;So I went to  &lt;a href="//freecodecamp.org"&gt;FreeCodeCamp&lt;/a&gt; and started learning HTML and CSS&lt;/p&gt;

&lt;p&gt;At that time I was spending a lot of time on Reddit, talking with other developers&lt;/p&gt;

&lt;p&gt;One day I found a subreddit with developers from my country&lt;/p&gt;

&lt;p&gt;I joined it and decided to share my journey on there&lt;/p&gt;

&lt;p&gt;At the end of that post, I said that I'm looking for work to learn more about web development and gain more experience&lt;/p&gt;

&lt;p&gt;A few hours later a developer that had a start-up messaged me and said that they would love to work with me&lt;/p&gt;

&lt;p&gt;The next day we talked on the phone&lt;/p&gt;

&lt;p&gt;I was excited to work with them&lt;/p&gt;

&lt;p&gt;They gave me a few tasks which I solved in a few hours and I got hired&lt;/p&gt;

&lt;p&gt;You can read more about this story from this article I made: &lt;a href="https://blog.vlddev.live/how-i-got-a-job-as-a-developer-at-16-1"&gt;https://blog.vlddev.live/how-i-got-a-job-as-a-developer-at-16-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During the next 3 months, I learned a lot from that job&lt;/p&gt;

&lt;p&gt;From JavaScript to Docker and how to work with Git&lt;/p&gt;

&lt;p&gt;After 3 months I left that job since the school was about to start and I wanted to focus more on that&lt;/p&gt;

&lt;p&gt;At that time I wasn't coding that much anymore and my motivation faded away&lt;/p&gt;

&lt;p&gt;One day I decided to join Twitter since lots of developers were talking about it&lt;/p&gt;

&lt;p&gt;So I joined Tech Twitter and started documenting my journey&lt;/p&gt;

&lt;p&gt;I was writing about the concepts I was learning about HTML, CSS, and JavaScript&lt;/p&gt;

&lt;p&gt;In the beginning, no one saw my tweets but I was happy to be part of a community&lt;/p&gt;

&lt;p&gt;Slowly I realized that I would like to create content so I bought a Twitter course and started growing my account&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gumroad.com/a/886314099"&gt;This &lt;/a&gt; is the Twitter course I bought (highly recommended)&lt;/p&gt;

&lt;p&gt;By the end of 2020, I reached 1000 followers&lt;/p&gt;

&lt;p&gt;I was already building lots of projects with JavaScript at that time while creating content on Twitter&lt;/p&gt;

&lt;p&gt;3 months later and I made my first income online&lt;/p&gt;

&lt;p&gt;How?&lt;/p&gt;

&lt;p&gt;Through affiliate marketing. Why?&lt;/p&gt;

&lt;p&gt;I realized that everyone was asking me what courses they could use to grow on Twitter, to learn Web Design and Web Development&lt;/p&gt;

&lt;p&gt;By that time I already had around 6k followers on Twitter&lt;/p&gt;

&lt;p&gt;For 30 days I continued doing that and hit $1000 in sales&lt;/p&gt;

&lt;p&gt;You can read more about how you can do it  &lt;a href="https://twitter.com/VladPasca5/status/1371823566858035205"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One month later I released my first info product, an eBook for Web Developers&lt;/p&gt;

&lt;p&gt;Over 50 people Pre-Ordered it and after one month it made almost $600 in revenue (with almost 80 customers)&lt;/p&gt;

&lt;p&gt;Now, another month later I'm at over 10k followers&lt;/p&gt;

&lt;p&gt;I made over $1500 online&lt;/p&gt;

&lt;p&gt;All of this because I was consistent&lt;/p&gt;

&lt;p&gt;I took no week off&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Because I love what I'm doing&lt;/p&gt;

&lt;p&gt;So my only advice for you is...find something &lt;br&gt;
you enjoy doing and do that!&lt;/p&gt;

&lt;p&gt;Hard work pays off!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The end
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;I hope found this useful and if you did please let me know. If you have any question feel free to DM me on  &lt;a href="https://twitter.com/VladPasca5"&gt;Twitter&lt;/a&gt; .&lt;/em&gt;&lt;/p&gt;

</description>
      <category>motivation</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Draw Beautiful Chart like Matplotlib in Java or Scala?</title>
      <author>Sho Nakamura</author>
      <pubDate>Tue, 11 May 2021 12:15:18 +0000</pubDate>
      <link>https://dev.to/sh0nk/how-to-draw-beautiful-chart-like-matplotlib-in-java-or-scala-587j</link>
      <guid>https://dev.to/sh0nk/how-to-draw-beautiful-chart-like-matplotlib-in-java-or-scala-587j</guid>
      <description>&lt;p&gt;I am sure many of you have experienced that when you try to do machine learning with Java or Scala, there is no cool graphing tool unlike that Python has &lt;strong&gt;Matplotlib&lt;/strong&gt;. Did you wonder if you could draw Matplotlib chart with Java..?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sh0nk/matplotlib4j"&gt;Matplotlib4j&lt;/a&gt; is a library which gives you the power!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sh0nk"&gt;
        sh0nk
      &lt;/a&gt; / &lt;a href="https://github.com/sh0nk/matplotlib4j"&gt;
        matplotlib4j
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Matplotlib for java: A simple graph plot library for java with powerful python matplotlib
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="#how-to-use"&gt;How to use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#draw-graphs"&gt;Draw Graphs&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#scatter-plot"&gt;Scatter Plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contour-plot"&gt;Contour Plot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#histogram"&gt;Histogram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#save-image-to-file"&gt;Save Image To File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#switch-python"&gt;Switch Python with pyenv, pyenv-virtualenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scala"&gt;Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extra"&gt;Extra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use"&gt;
  &lt;/a&gt;
  How to Use &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#add-library"&gt;
  &lt;/a&gt;
  Add Library
&lt;/h3&gt;

&lt;p&gt;From here I will introduce Java examples. Of course, it can also be used from other JVM languages ​​such as Scala and Kotlin. The examples will be described later.&lt;/p&gt;

&lt;p&gt;First, add Matplotlib4j to the Java project where you want to use Matplotlib.&lt;/p&gt;

&lt;p&gt;For Maven, add the following dependency.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.github.sh0nk&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;matplotlib4j&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.5.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Similarly, for Gradle:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight groovy"&gt;&lt;code&gt;&lt;span class="n"&gt;compile&lt;/span&gt; &lt;span class="s1"&gt;'com.github.sh0nk:matplotlib4j:0.5.0'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's all. Let's begin drawing!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#draw-graphs"&gt;
  &lt;/a&gt;
  Draw Graphs &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The usage is similar to Matplotlib's API, so we can write it intuitively. First, create a &lt;code&gt;Plot&lt;/code&gt; object, call the &lt;code&gt;pyplot&lt;/code&gt; method on it to add an arbitrary graph, and finally call the &lt;code&gt;show()&lt;/code&gt; method; since it is a Builder pattern, we will add options behind it using IDE completion.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#scatter-plot"&gt;
  &lt;/a&gt;
  Scatter Plot &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;As a starting point, let's draw a scatter plot.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;NumpyUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;linspace&lt;/span&gt;&lt;span class="o"&gt;(-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="err"&gt;　&lt;/span&gt;&lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;random&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Collectors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

&lt;span class="nc"&gt;Plot&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"o"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sin"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;legend&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"upper right"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"scatter"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Some Numpy methods, such as &lt;code&gt;linspace&lt;/code&gt; and &lt;code&gt;meshgrid&lt;/code&gt;, have been prepared as &lt;code&gt;NumpyUtils&lt;/code&gt; classes to help with graph drawing. The first block generates the x and y data for plotting. Here we give a random value to the sin curve. After that, we create a plot object, add the generated x and y data to the &lt;code&gt;plot()&lt;/code&gt; method, and call &lt;code&gt;show()&lt;/code&gt; at the end to draw the graph.&lt;/p&gt;

&lt;p&gt;This is almost equivalent to the Python implementation below (almost, because the data generation part of numpy is strictly different). The method calls are similar, making it easy to use in case you are a Pythonista.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"o"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"sin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"upper right"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"scatter"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;With the above Java code, we can draw the following graph.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pkA3E6z2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qiita-image-store.s3.amazonaws.com/0/29632/f961339a-c074-6d25-ba70-73763dc5a3fe.png" class="article-body-image-wrapper"&gt;&lt;img alt="scatter.png" src="https://res.cloudinary.com/practicaldev/image/fetch/s--pkA3E6z2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qiita-image-store.s3.amazonaws.com/0/29632/f961339a-c074-6d25-ba70-73763dc5a3fe.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#contour-plot"&gt;
  &lt;/a&gt;
  Contour Plot &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Next, let's draw a contour plot (contour line).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;NumpyUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;linspace&lt;/span&gt;&lt;span class="o"&gt;(-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;NumpyUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;linspace&lt;/span&gt;&lt;span class="o"&gt;(-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;NumpyUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Grid&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;NumpyUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;meshgrid&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;zCalced&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calcZ&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;yj&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;

&lt;span class="nc"&gt;Plot&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="nc"&gt;ContourBuilder&lt;/span&gt; &lt;span class="n"&gt;contour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contour&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;zCalced&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;clabel&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contour&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;inline&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"contour"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XCQaJMsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qiita-image-store.s3.amazonaws.com/0/29632/6a445c15-fa6c-51c9-5604-1e954df6b1db.png" class="article-body-image-wrapper"&gt;&lt;img alt="contour.png" src="https://res.cloudinary.com/practicaldev/image/fetch/s--XCQaJMsH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qiita-image-store.s3.amazonaws.com/0/29632/6a445c15-fa6c-51c9-5604-1e954df6b1db.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#histogram"&gt;
  &lt;/a&gt;
  Histogram &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Histograms can be drawn in the same way.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Random&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;IntStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;range&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;mapToObj&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextGaussian&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Collectors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;IntStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;range&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;mapToObj&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextGaussian&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Collectors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

&lt;span class="nc"&gt;Plot&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hist&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;stacked&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#66DD66"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"#6688FF"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;xlim&lt;/span&gt;&lt;span class="o"&gt;(-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"histogram"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;show&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2zx9pWzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qiita-image-store.s3.amazonaws.com/0/29632/9fae2fb5-4f5a-36e6-545d-8117342262ea.png" class="article-body-image-wrapper"&gt;&lt;img alt="histogram.png" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2zx9pWzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qiita-image-store.s3.amazonaws.com/0/29632/9fae2fb5-4f5a-36e6-545d-8117342262ea.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#save-image-to-file"&gt;
  &lt;/a&gt;
  Save Image to File &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Matplotlib4j also supports saving to a file. Saving images to a file would be convenient for use cases that do not have a GUI, such as batch processing of machine learning on a server.&lt;/p&gt;

&lt;p&gt;Similar to the original Matplotlib, by using the &lt;code&gt;.savefig()&lt;/code&gt; method instead of &lt;code&gt;.show()&lt;/code&gt;, the image is saved to a file without popping up a plot window. The only difference is that &lt;code&gt;plt.executeSilently()&lt;/code&gt; needs to be called after &lt;code&gt;.savefig()&lt;/code&gt;, which is necessary as a termination process since the savefig command can also be a part of a method chain.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Random&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Random&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;IntStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;range&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;mapToObj&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;nextGaussian&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Collectors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

&lt;span class="nc"&gt;Plot&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hist&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;orientation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;HistBuilder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Orientation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;horizontal&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;(-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"histogram"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;savefig&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/tmp/histogram.png"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;dpi&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Necessary to output the file&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;executeSilently&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will output an image like the one below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZN6p3VO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qiita-image-store.s3.amazonaws.com/0/29632/f6c824dd-6f0f-e709-9f13-5b223b63b02b.png" class="article-body-image-wrapper"&gt;&lt;img alt="histogram.png" src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZN6p3VO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://qiita-image-store.s3.amazonaws.com/0/29632/f6c824dd-6f0f-e709-9f13-5b223b63b02b.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#switch-python-with-pyenv-pyenvvirtualenv"&gt;
  &lt;/a&gt;
  Switch Python with pyenv, pyenv-virtualenv &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;To use Matplotlib4j, you need to install Matplotlib with Python environment; by default, Matplotlib4j will use the Python that is in your environment path, but in many cases you may not have Matplotlib installed in the system default Python.&lt;/p&gt;

&lt;p&gt;In that case, you can switch to a Python environment with Matplotlib installed, such as Anaconda, using pyenv or pyenv-virtualenv.&lt;/p&gt;

&lt;p&gt;To use Python according to the Pyenv environment, specify &lt;code&gt;PythonConfig&lt;/code&gt; when creating the &lt;code&gt;Plot&lt;/code&gt; object as follows.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Plot&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;PythonConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pyenvConfig&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Arbitrary pyenv name"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Similarly, you can specify the environment name of pyenv-virtualenv.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Plot&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;create&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;PythonConfig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pyenvVirtualenvConfig&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Arbitrary pyenv name"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Arbitrary virtualenv name"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#scala"&gt;
  &lt;/a&gt;
  Scala &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;When used from Scala, the aforementioned scatter plot example can be written as follows, just by paying attention to the difference of the &lt;em&gt;Boxing/Unboxing&lt;/em&gt; numbers and List classes.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scala"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scala.collection.JavaConverters._&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;NumpyUtils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;linspace&lt;/span&gt;&lt;span class="o"&gt;(-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="py"&gt;asScala&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;toList&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;sin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xi&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;random&lt;/span&gt;&lt;span class="o"&gt;()).&lt;/span&gt;&lt;span class="py"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;box&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="nv"&gt;plt&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;Plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;create&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="nv"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="py"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;asJava&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;asJava&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"o"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;title&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"scatter"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="py"&gt;show&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#need-more-details"&gt;
  &lt;/a&gt;
  Need More Details?
&lt;/h3&gt;

&lt;p&gt;In the &lt;a href="https://github.com/sh0nk/matplotlib4j/blob/master/docs/tutorial.md"&gt;&lt;strong&gt;Tutorial&lt;/strong&gt;&lt;/a&gt; page, you can find more cases step by step in Java, Scala and Kotlin.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#extra"&gt;
  &lt;/a&gt;
  Extra &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#how-it-all-started"&gt;
  &lt;/a&gt;
  How it All Started
&lt;/h3&gt;

&lt;p&gt;I recently started reading a book of Deep Learning and decided to try to implement it in Scala which I've often touched lately, since it was not interesting to copy the code on the book in Python as it is. I was happy to be able to write it in a functional way in Scala, but when I got to the backpropagation using the steepest descent method, I encountered a situation where the loss was not dropping at all, and I thought, "What's wrong?"&lt;/p&gt;

&lt;p&gt;Of course, the common practice to tackle this is to thicken the tests, but I'd like to see what's going on first quickly by displaying a graph like in the book. But found that there are no good graphing tools in Scala... However, implementing the graphing tool in Scala from scratch is too hard... So I decided to use Matplotlib, which is a familiar Python library, as the reason to create the library.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  Design
&lt;/h3&gt;

&lt;p&gt;Matplotlib4j calls Matplotlib in a way that generates Python code without using JNI or Jython. Initially, I wanted to implement it using &lt;a href="http://www.jython.org/"&gt;Jython&lt;/a&gt;, but it only supported the Python version up to 2.7, and since numpy wasn't supported, the Matplotlib which depends on it wouldn't work either, so I decided to abandon this path.&lt;/p&gt;

&lt;p&gt;There is &lt;a href="https://github.com/ninia/jep"&gt;a library&lt;/a&gt; in the world that allow you to use CPython from Java code, and this one was a candidate because we can use both Python3 and numpy. However, we had to install a separate environment-dependent library to use JNI, and we also had to install the library from pip on the Python side, which was too much work for something as simple as drawing graphs. So in the end I have decided to implement it independently of these libraries at all.&lt;/p&gt;

&lt;p&gt;Of course, since it is executed via a file, I had to do some tricks in how I pass variables and use return values. Fortunately, since the purpose is only to draw graphs, the basic functions can be satisfied by one-way output to a file, and I think the performance is within the acceptable range with some latency.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sh0nk"&gt;
        sh0nk
      &lt;/a&gt; / &lt;a href="https://github.com/sh0nk/matplotlib4j"&gt;
        matplotlib4j
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Matplotlib for java: A simple graph plot library for java with powerful python matplotlib
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
matplotlib4j&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://maven-badges.herokuapp.com/maven-central/com.github.sh0nk/matplotlib4j" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b89e08d9c7b641729763bf0621c537d81a9d249fdeff3377de866654f7707cdd/68747470733a2f2f6d6176656e2d6261646765732e6865726f6b756170702e636f6d2f6d6176656e2d63656e7472616c2f636f6d2e6769746875622e7368306e6b2f6d6174706c6f746c6962346a2f62616467652e737667" alt="Maven Central"&gt;&lt;/a&gt;
&lt;a href="https://travis-ci.org/sh0nk/matplotlib4j" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e097c22c5d8549c784264e361034db799df4a9832405f9eb025c48811e8773b5/68747470733a2f2f7472617669732d63692e6f72672f7368306e6b2f6d6174706c6f746c6962346a2e7376673f6272616e63683d6d6173746572" alt="Build Status"&gt;&lt;/a&gt;
&lt;a href="https://opensource.org/licenses/MIT" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/78f47a09877ba9d28da1887a93e5c3bc2efb309c1e910eb21135becd2998238a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A simplest interface library to enable your java project to use matplotlib.&lt;/p&gt;
&lt;p&gt;Of course it is able to be imported to scala project as below. The API is designed as similar to the original matplotlib's.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/6478810/31043250-bdacdd12-a5f3-11e7-88ee-0e91c851c6f7.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iiGPf1Ge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/6478810/31043250-bdacdd12-a5f3-11e7-88ee-0e91c851c6f7.png" width="620px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
&lt;a href="https://raw.githubusercontent.com/sh0nk/matplotlib4j/master//docs/tutorial.md"&gt;Tutorial&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Now &lt;a href="https://raw.githubusercontent.com/sh0nk/matplotlib4j/master//docs/tutorial.md"&gt;tutorial&lt;/a&gt; is under preparation to walkthrough the features
If you want to skim only the idea of Matplotlib4j, skip that and go to the next section: &lt;em&gt;&lt;a href="https://raw.githubusercontent.com/sh0nk/matplotlib4j/master/#how-to-use"&gt;How to use&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
How to use&lt;/h2&gt;
&lt;p&gt;Here is an example. Find more examples on &lt;code&gt;MainTest.java&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-java position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-smi"&gt;Plot&lt;/span&gt; plt &lt;span class="pl-k"&gt;=&lt;/span&gt; &lt;span class="pl-smi"&gt;Plot&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;create()
plt&lt;span class="pl-k"&gt;.&lt;/span&gt;plot()
    .add(&lt;span class="pl-smi"&gt;Arrays&lt;/span&gt;&lt;span class="pl-k"&gt;.&lt;/span&gt;asList(&lt;span class="pl-c1"&gt;1.3&lt;/span&gt;, &lt;span class="pl-c1"&gt;2&lt;/span&gt;))
    .label(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;label&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
    .linestyle(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;--&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;)
plt&lt;span class="pl-k"&gt;.&lt;/span&gt;xlabel(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;xlabel&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);
plt&lt;span class="pl-k"&gt;.&lt;/span&gt;ylabel(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;ylabel&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);
plt&lt;span class="pl-k"&gt;.&lt;/span&gt;text(&lt;span class="pl-c1"&gt;0.5&lt;/span&gt;, &lt;span class="pl-c1"&gt;0.2&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;text&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);
plt&lt;span class="pl-k"&gt;.&lt;/span&gt;title(&lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;"&lt;/span&gt;Title!&lt;span class="pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt;);
plt&lt;span class="pl-k"&gt;.&lt;/span&gt;legend();
plt&lt;span class="pl-k"&gt;.&lt;/span&gt;show();&lt;/pre&gt;
&lt;div class="zeroclipboard-container position-absolute right-0 top-0"&gt;
  
    
    
  
&lt;/div&gt;



&lt;/div&gt;

&lt;p&gt;Another example to draw &lt;strong&gt;Contour&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/sh0nk/matplotlib4j"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>matplotlib</category>
      <category>dataviz</category>
      <category>datascience</category>
      <category>scala</category>
    </item>
    <item>
      <title>CSS clip-path and filter functions [Video]</title>
      <author>The Nerdy Dev</author>
      <pubDate>Tue, 11 May 2021 12:00:44 +0000</pubDate>
      <link>https://dev.to/thenerdydev/css-clip-path-and-filter-functions-video-4p7f</link>
      <guid>https://dev.to/thenerdydev/css-clip-path-and-filter-functions-video-4p7f</guid>
      <description>&lt;p&gt;Hey everyone 👋🏻,&lt;/p&gt;

&lt;p&gt;I am back with a new video ! &lt;br&gt;
In this video, you will learn about a bunch of CSS properties.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;One is the &lt;strong&gt;clip-path&lt;/strong&gt; CSS property that is used for performing clipping on an image &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Second is the &lt;strong&gt;filter&lt;/strong&gt; CSS property that has a couple of functions that you can use to add blur, contrast or change the brightness of an image for example. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is the link for the video : &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BdAxpCHTIas"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This video is a part of my &lt;strong&gt;Web Developer Full Course&lt;/strong&gt; on YouTube, check the below article to know more about the topics that we cover in this course:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Apr 28 ・ 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Also if you have a few spare hours then utilize them by creating these &lt;strong&gt;10 JavaScript Projects in under 2 Hours&lt;/strong&gt; &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/10-javascript-projects-in-2-hours-3p1c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 JavaScript Projects in 2 Hours&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev ・ Oct 26 '20 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;👉🏻 Follow me on Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt; &lt;br&gt;
👉🏻 Check out my YouTube Channel : &lt;a href="https://youtube.com/thenerdydev"&gt;https://youtube.com/thenerdydev&lt;/a&gt; &lt;/p&gt;

</description>
    </item>
  </channel>
</rss>
