<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 5 Most Popular Backend Framework for 2022</title>
      <author>virender</author>
      <pubDate>Sun, 02 Jan 2022 04:27:49 +0000</pubDate>
      <link>https://dev.to/virendebro/top-5-most-popular-backend-framework-for-2022-4g6e</link>
      <guid>https://dev.to/virendebro/top-5-most-popular-backend-framework-for-2022-4g6e</guid>
      <description>&lt;p&gt;&lt;strong&gt;Top 5 Most Popular Backend Framework for 2022&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this blog i am going to tell you Top 5 Most Popular Backend Framework for 2022. So Lets start this article:-&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Laravel&lt;/li&gt;
&lt;li&gt;Express.js&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;Ruby on Rails&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can read the whole blog here👇&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2022/01/top-5-most-popular-backend-framework.html"&gt;Click Here&lt;/a&gt; to see this post in detailed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thankyou&lt;/em&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>django</category>
      <category>ruby</category>
      <category>javascript</category>
    </item>
    <item>
      <title>No way did Github Copilot just Rickroll me!</title>
      <author>Virej Dasani</author>
      <pubDate>Sun, 02 Jan 2022 04:22:07 +0000</pubDate>
      <link>https://dev.to/virejdasani/no-way-did-github-copilot-just-rickroll-me-4g02</link>
      <guid>https://dev.to/virejdasani/no-way-did-github-copilot-just-rickroll-me-4g02</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/EF6laCaSQfo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Please subscribe for more &amp;lt;3&lt;/p&gt;

</description>
      <category>github</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>python</category>
    </item>
    <item>
      <title>Implementing a theme switcher using javascript</title>
      <author>Marcos RJJunior</author>
      <pubDate>Sun, 02 Jan 2022 04:06:47 +0000</pubDate>
      <link>https://dev.to/marcosrjjunior/implementing-a-theme-switcher-using-javascript-347d</link>
      <guid>https://dev.to/marcosrjjunior/implementing-a-theme-switcher-using-javascript-347d</guid>
      <description>&lt;p&gt;In this simple tutorial you are going to learn how to implement a theme switcher for your website using CSS and Javascript.&lt;/p&gt;

&lt;p&gt;Let's start by creating a simple HTML structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Simple theme switcher&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Simple theme switcher&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

      &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is your first paragraph&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And a simple CSS to start, just to prepare the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we are going to create a button that will trigger the theme.&lt;/p&gt;

&lt;p&gt;We can start with a dark-theme button and a script that will include a data-theme attribute to the body element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h5&amp;gt;&lt;/span&gt;Theme:&lt;span class="nt"&gt;&amp;lt;/h5&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;"switchTheme('dark')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Dark&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;switchTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have to implement the themes.&lt;/p&gt;

&lt;p&gt;we start by creating the &lt;strong&gt;:root&lt;/strong&gt; variables.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--white&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFFFFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--black&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="py"&gt;--gray-100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#EEEEEE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--gray-800&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#1c1c1c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--blue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0000b8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* ... */&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--white&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--black&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's also include other themes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;"switchTheme('light')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Light&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;"switchTheme('dark')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Dark&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;onClick=&lt;/span&gt;&lt;span class="s"&gt;"switchTheme('blue')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blue&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'light'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--white&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--black&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'dark'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gray-800&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--gray-100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;data-theme&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;'blue'&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--blue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--white&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now be able to see the buttons and switch to the selected theme, but the theme is reset to the default theme when reloading the page. In the next section we will store that selected theme on localStorage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storing-theme-on-localstorage"&gt;
  &lt;/a&gt;
  Storing theme on localStorage
&lt;/h2&gt;

&lt;p&gt;Now let's store the selected theme, so we can keep the style even if the user reload the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;saveTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;switchTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;saveTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;theme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;loadTheme&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nx"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;theme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it.&lt;/p&gt;




&lt;p&gt;Now challenge for you 🤔.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implement a toggle switcher from light to dark theme using only one button. You can use emoji to identify the states ☀️ and 🌙.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>darktheme</category>
      <category>themeswitch</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>5 Awesome Libraries To Use In Your Next ReactJs Project</title>
      <author>Sachin Chaurasiya</author>
      <pubDate>Sun, 02 Jan 2022 04:04:01 +0000</pubDate>
      <link>https://dev.to/sachinchaurasiya/5-awesome-libraries-to-use-in-your-next-reactjs-project-3p31</link>
      <guid>https://dev.to/sachinchaurasiya/5-awesome-libraries-to-use-in-your-next-reactjs-project-3p31</guid>
      <description>&lt;p&gt;We all know Reactjs is a UI library using which we can build user interfaces rapidly. but Reactjs ecosystem is so rich that you can build dynamic interactive web applications just by using some external libraries.&lt;/p&gt;

&lt;p&gt;In this post, we will discuss 5 Reactjs libraries you can use in your next project. we will discuss its use cases and how it can help you to build your next project without any hiccups.&lt;/p&gt;

&lt;p&gt;Here is the list of libraries that we are going to discuss&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;React Flow&lt;/li&gt;
&lt;li&gt;React Markdown&lt;/li&gt;
&lt;li&gt;Code Mirror&lt;/li&gt;
&lt;li&gt;React Draft WYSIWYG&lt;/li&gt;
&lt;li&gt;React tippy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-flow"&gt;
  &lt;/a&gt;
  &lt;a href="https://reactflow.dev/docs/"&gt;React Flow&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;React flow is a library to build node-based applications and it is built by &lt;a href="https://webkid.io"&gt;webkid.io&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use case
&lt;/h3&gt;

&lt;p&gt;Let's say you want to build an application where you want to render node diagrams/flow that could be anything from static to dynamic. &lt;br&gt;
here we can use react flow to render node diagrams/flow and end-user can customize it, can add a new node, can update the existing node and delete the existing node.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-react-flow-over-other-libraries"&gt;
  &lt;/a&gt;
  Why use react flow over other libraries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;customizable&lt;/li&gt;
&lt;li&gt;utils rich&lt;/li&gt;
&lt;li&gt;types support&lt;/li&gt;
&lt;li&gt;fast rendering&lt;/li&gt;
&lt;li&gt;and many more&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h3&gt;

&lt;p&gt;Here is a live example of &lt;a href="https://open-metadata.org/"&gt;OpenMetadata&lt;/a&gt; A Single place to Discover, Collaborate, and Get your data right that uses React flow to render entity lineage.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HxxCROA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641047040552/6qrPy9ghyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HxxCROA9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641047040552/6qrPy9ghyy.png" alt="image.png" width="880" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-markdown"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/remarkjs/react-markdown"&gt;React Markdown&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;React markdown is a markdown parser react component which can take string markdown and render it to the react element.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use case
&lt;/h3&gt;

&lt;p&gt;There could be a variety of use cases for this library, let's say you are building a blog application and content would be in markdown so there you can use react markdown to parse the content.&lt;/p&gt;

&lt;p&gt;We all have used GitHub or a similar application at least once in our developer journey and know that most of the contents are in markdown format. so we can also build a tool using react markdown to create a GitHub readme profile.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-react-markdown-over-other-libraries"&gt;
  &lt;/a&gt;
  Why use react markdown over other libraries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Easy to use&lt;/li&gt;
&lt;li&gt;Rich API Support&lt;/li&gt;
&lt;li&gt;Custome Component Support&lt;/li&gt;
&lt;li&gt;Extendible with plugins system&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h3&gt;

&lt;p&gt;Here you can see I have built a &lt;a href="https://sachinchaurasiya.dev/tools/markdown-previewer"&gt;markdown previewer&lt;/a&gt; using react markdown. you can write markdown and see the output side by side also you can download it as a markdown file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nKnlDDnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641047943901/22TJXqdbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nKnlDDnf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641047943901/22TJXqdbp.png" alt="image.png" width="880" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-mirror"&gt;
  &lt;/a&gt;
  &lt;a href="https://codemirror.net/"&gt;Code Mirror&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Code Mirror is a text editor with support for different languages and add-ons to implement the advance and extend the existing functionality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use case
&lt;/h3&gt;

&lt;p&gt;Let's say you are building an LMS (Learning management system) and you want to provide an editor to end-users for editing code snippets that could be in any language like python, javascript, etc or format likes JSON, Avro, SQL, etc.&lt;/p&gt;

&lt;p&gt;Here you can use code mirror to build an editor that can allow end-users to play with code snippets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-code-mirror-over-other-libraries"&gt;
  &lt;/a&gt;
  Why use code mirror over other libraries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Support for more than 100 languages&lt;/li&gt;
&lt;li&gt;Code Folding Support&lt;/li&gt;
&lt;li&gt;Support for inline and block widget&lt;/li&gt;
&lt;li&gt;Configurable bindings&lt;/li&gt;
&lt;li&gt;Used by browsers like firefox, chrome and safari.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h3&gt;

&lt;p&gt;Here you can see the live use case of code mirror by &lt;a href="https://carbon.now.sh/"&gt;Carbon&lt;/a&gt; tool for creating and sharing beautiful images of your source code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vgcZK5zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641049383314/XZMTx1sO8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vgcZK5zw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641049383314/XZMTx1sO8.png" alt="image.png" width="880" height="407"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-draft-wysiwyg"&gt;
  &lt;/a&gt;
  &lt;a href="https://jpuri.github.io/react-draft-wysiwyg/"&gt;React Draft WYSIWYG&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;React Draft WYSIWYG is a rich text editor built on top of reactjs and &lt;a href="https://draftjs.org/"&gt;draftjs&lt;/a&gt;.ready to use react component to provide rich text support in your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use case
&lt;/h3&gt;

&lt;p&gt;Nowadays most of the communities/publications like &lt;code&gt;Hashnode&lt;/code&gt;, &lt;code&gt;dev.to&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt;, &lt;code&gt;showscase&lt;/code&gt; and &lt;code&gt;devdojo&lt;/code&gt;  provide support for rich text content and they have built their own rich text editor. but you don't have to reinvent the wheel you can use React Draft WYSIWYG directly in your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-react-draft-wysiwyg-over-other-libraries"&gt;
  &lt;/a&gt;
  Why use React Draft WYSIWYG over other libraries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can configure toolbar options&lt;/li&gt;
&lt;li&gt;Support for Mention and Hashtags&lt;/li&gt;
&lt;li&gt;Support for emojis&lt;/li&gt;
&lt;li&gt;Support for internationalization.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h3&gt;

&lt;p&gt;Here you can see the &lt;a href="https://jpuri.github.io/react-draft-wysiwyg"&gt;live example&lt;/a&gt; of &lt;code&gt;React Draft WYSIWYG&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2_HV-2NQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641050376074/tatVaDChr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2_HV-2NQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641050376074/tatVaDChr.png" alt="image.png" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#react-tippy"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/tvkhoa/react-tippy"&gt;React tippy&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;React Tippy is a lightweight tooltip component library for reactjs. it provides a tooltip element or HOC (Higher-order component) and it uses the React DOM to render tooltip. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-case"&gt;
  &lt;/a&gt;
  Use case
&lt;/h3&gt;

&lt;p&gt;The use case for React tippy is simple if you need to show some content using a tooltip then you should use React Tippy library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-react-tippy-over-other-libraries"&gt;
  &lt;/a&gt;
  Why use React Tippy over other libraries
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Work's well with reactjs&lt;/li&gt;
&lt;li&gt;Enhancement of Tippy.js&lt;/li&gt;
&lt;li&gt;Support multiple triggers&lt;/li&gt;
&lt;li&gt;Customizable&lt;/li&gt;
&lt;li&gt;Support for different themes&lt;/li&gt;
&lt;li&gt;Support for different sizes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#live-example"&gt;
  &lt;/a&gt;
  Live Example
&lt;/h3&gt;

&lt;p&gt;Here you can find the live example of &lt;a href="https://tvkhoa.github.io/testlib/"&gt;react tippy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HaaABfDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641051255326/zWLkU1E82.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HaaABfDD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641051255326/zWLkU1E82.png" alt="image.png" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that’s it for this topic. Thank you for reading.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/sachin-chaurasiya"&gt;LinkedIn&lt;/a&gt; | &lt;a href="https://twitter.com/sachindotcom"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Resources to Kickstart Your Newsletter</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Sun, 02 Jan 2022 03:59:48 +0000</pubDate>
      <link>https://dev.to/surajondev/resources-to-kickstart-your-newsletter-30kk</link>
      <guid>https://dev.to/surajondev/resources-to-kickstart-your-newsletter-30kk</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;I have been writing and sending newsletters to subscribers for the last 6 months. I learned much more about managing a Developer centric Newsletter though out the journey.&lt;/p&gt;

&lt;p&gt;During this period, I use many tools to help me with writing, designing, sending newsletters to the subscribers.&lt;/p&gt;

&lt;p&gt;Today, I will share some of the tools that I used on regular basis to send my newsletter.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#weekly-newsletter-of-surajondev"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.getrevue.co/profile/surajondev"&gt;Weekly Newsletter of SurajOnDev&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;Time for &lt;a href="https://michelletanpy.hashnode.dev/what-ive-learnt-the-importance-of-self-promotion"&gt;self promotion&lt;/a&gt;. This is a weekly newsletter by myself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cL1qWSEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/boivc5mdfzzs2kt0s5wg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cL1qWSEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/boivc5mdfzzs2kt0s5wg.PNG" alt="Weekly Newsletter of SurajOnDev" width="686" height="134"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-will-get"&gt;
  &lt;/a&gt;
  What you will get?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read of the Week&lt;/strong&gt;: 5 best articles hand-picked by myself from different platforms. This article will be developer, self-growth, and productivity-oriented.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tool of the Week&lt;/strong&gt;: A resource or tool link that will help in easing your work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Our latest blog post&lt;/strong&gt;: Latest 3 blog post from SurajOnDev that is me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Free eBook and Resources&lt;/strong&gt;: Occasionally you will get free eBook that are by developers and for developers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Twitter thread that I have bookmarked&lt;/strong&gt;: Intresting and useful twitter threads. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Frequency&lt;/strong&gt;: Weekly&lt;br&gt;
&lt;strong&gt;Subscribe Here&lt;/strong&gt;:  &lt;a href="https://tripetto.app/run/4OQIUAO89L"&gt;Weekly Newsletter of SurajOnDev&lt;/a&gt;&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#getrevue"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.getrevue.co/"&gt;GetRevue&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Revue makes it easy for writers and publishers to send editorial newsletters — and get paid.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YG1KnM6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekfd9tzkfpi02kkmj5an.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YG1KnM6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ekfd9tzkfpi02kkmj5an.jpg" alt="GetRevue" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have been using GetRevue by Twitter to send my newsletters. It is easy to understand and use. It manages everything including creating, sending, managing subscribers, providing you with stats, and other newsletter-related stuff. &lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#tripetto"&gt;
  &lt;/a&gt;
  &lt;a href="https://tripetto.app/"&gt;Tripetto&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Build and run fully customizable conversational forms and surveys from the Tripetto studio and choose where you want to store collected data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C_0e2pZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg9e88tfl0ful4p6pe9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C_0e2pZy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sg9e88tfl0ful4p6pe9f.png" alt="Tripetto" width="880" height="502"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tripetto will help you in building beautiful and scrollable forms. It is the best alternative for Typeform and it is absolutely free. You can gather user information such emails through such form which will be easily added into GetRevue.&lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#grammarly"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.grammarly.com/"&gt;Grammarly&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Communicate With Impact. Ensure Everything You Write Comes Across The Way You Intend. Present Your Best Self Every Time You Type. Make Your Writing Clear and Engaging. Eliminate grammar errors. Easily improve any text.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KiTndzLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.grammarly.com/assets/files/e80911c560f18f1ffdc084f23fe9c715/mobile_opengraph.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KiTndzLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.grammarly.com/assets/files/e80911c560f18f1ffdc084f23fe9c715/mobile_opengraph.png" alt="Grammarly" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have been using Grammarly for a long time to check grammar mistakes. It helped me in producing better newsletter issues without any grammar errors and wrong tone. &lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#canva"&gt;
  &lt;/a&gt;
  &lt;a href="https://canva.com/"&gt;Canva&lt;/a&gt;
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Thousands Of Custom Templates And Stock Images, Easy-To-Use Editing Features, And More! Priority Support. Simple To Use Interface. 200K+ Companies On Board. 100% Happiness Guarantee. Free 30 Day Trial. Services: Brand Kit, Magic Resize Tool.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nGc6AQHW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/image/76579/stickers.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nGc6AQHW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static-cse.canva.com/image/76579/stickers.jpg" alt="Canva" width="880" height="557"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My go-to web app for creating header images for my blog and thumbnail for the newsletter. It has tons of templates to start editing and make its own with its editing tools. &lt;/p&gt;


&lt;h1&gt;
  &lt;a href="#for-inspiration"&gt;
  &lt;/a&gt;
  For Inspiration
&lt;/h1&gt;

&lt;p&gt;You can follow some developers' newsletters to get inspiration and know more about the newsletter. &lt;/p&gt;

&lt;p&gt;Read our article to know some of the best developer newsletters:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/basecampxd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KlkYMk3q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bdopcKHh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3998/fa199775-e414-4bf8-8943-b1b645ce7c5b.png" alt="Basecamp Community" width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b_yru6x_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--8FEvckRs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/417922/d5a37d43-1157-4c3a-b4dd-8b5a111371ca.png" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/basecampxd/10-newsletters-for-developers-5c7j" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 Newsletters for Developers&lt;/h2&gt;
      &lt;h3&gt;Suraj Vishwakarma for Basecamp Community ・ Jul 28 '21 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#watercooler&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;I hope these resources will help you in kickstarting your newsletter journey. To know more about the newsletter, read our last 2 articles in this series.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you have any other tools in your mind, let us know in the comment.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading the article.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>3 Ways to center a div horizontally and vertically</title>
      <author>Amrin</author>
      <pubDate>Sun, 02 Jan 2022 03:51:57 +0000</pubDate>
      <link>https://dev.to/coderamrin/3-ways-to-center-a-div-horizontally-and-vertically-220n</link>
      <guid>https://dev.to/coderamrin/3-ways-to-center-a-div-horizontally-and-vertically-220n</guid>
      <description>&lt;p&gt;Centering a div is a crucial skill for a web developer. So, today I’ll share 3 ways to center a div horizontally and vertically.  &lt;/p&gt;

&lt;p&gt;Let’s get started. &lt;/p&gt;

&lt;p&gt;If you prefer video then check it out here:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/iaPbZ8vsWyk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Note: to center a div with flexbox or grid you need to add flexbox or grid to the parent of that div. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-using-flexbox"&gt;
  &lt;/a&gt;
  #1. Using Flexbox
&lt;/h3&gt;

&lt;p&gt;You can center a div horizontally and vertically with Flex box, with just 4 lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-using-grid"&gt;
  &lt;/a&gt;
  #2. Using Grid
&lt;/h3&gt;

&lt;p&gt;Centering a div with grid is much more easier than with flexbox.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;place-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-using-position-absolute"&gt;
  &lt;/a&gt;
  #3. Using Position Absolute:
&lt;/h3&gt;

&lt;p&gt;You can center a div with CSS positionning too.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That’s it for today. &lt;/p&gt;

&lt;p&gt;If you enjoyed reading this article, I think you’ll also enjoy my newsletter where I share my articles and videos, and other useful resources &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#subscribe-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.getrevue.co/profile/coderamrin"&gt;Subscribe Now!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Also you can connect with me on Twitter at &lt;a class="mentioned-user" href="https://dev.to/coderamrin"&gt;@coderamrin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Best Practices For Writing
Automation Test Code</title>
      <author>Suresh Ayyanna</author>
      <pubDate>Sun, 02 Jan 2022 03:35:00 +0000</pubDate>
      <link>https://dev.to/sureshayyanna/best-practices-for-writingautomation-test-code-1laa</link>
      <guid>https://dev.to/sureshayyanna/best-practices-for-writingautomation-test-code-1laa</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Follow OOPs Concepts Wherever Possible

&lt;ul&gt;
&lt;li&gt;Abstraction(base classes),&lt;/li&gt;
&lt;li&gt;Inheritance(multiple implementation of same things/multiple 
inheritance),&lt;/li&gt;
&lt;li&gt;Polymorphism(many forms with something different)
&lt;/li&gt;
&lt;li&gt;Data Hiding(hide unnecessary/sensitive info),
&lt;/li&gt;
&lt;li&gt;Encapsulation(Bind small entities into a single large entity)&lt;/li&gt;
&lt;li&gt;Follow Programming Language Guidelines (class name, Method 
name, package name, variable names)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reduce code duplicity (think before writing new code) &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;can I use/make change in existing code?&lt;/li&gt;
&lt;li&gt;Increase code reusability&lt;/li&gt;
&lt;li&gt;Make your code generic wherever possible&lt;/li&gt;
&lt;li&gt;Leave no hardcoded data in source code&lt;/li&gt;
&lt;li&gt;Keep your static data outside the source code&lt;/li&gt;
&lt;li&gt;Keep your dynamic data dynamic in test code (fetch it from 
util files)&lt;/li&gt;
&lt;li&gt;Test your code properly, use IDE options such as call 
hierarchy or show usage to test your changes E2E&lt;/li&gt;
&lt;li&gt;Use Extensive logging- everything which is part of source
code should be analysed from logs without looking at the 
source code&lt;/li&gt;
&lt;li&gt;Generate and save failure proofs outside the src code-
videos/data/screenshots/logs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Focus on making your code scalable and faster without &lt;br&gt;
compromising the code quality&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your code should be platform and system independent&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use as many assertions as possible focus on automated testing &lt;br&gt;
rather than automation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Leave no hardcoded data in source code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always think for the future, separate out tech dependencies so &lt;br&gt;
that migration to new tech is easy in case it is needed&lt;br&gt;
10.Keep your tests independent for better results in &lt;br&gt;
multithreading unless they are related (example publisher subscriber related tests)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use Proper Documentation (Using comments wherever required)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create code which is can be easily read and modified by others(Important)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>programming</category>
      <category>java</category>
      <category>python</category>
      <category>testing</category>
    </item>
    <item>
      <title>¿Qué es MGPanel?</title>
      <author>Eloy Manuel Chacón Martínez</author>
      <pubDate>Sun, 02 Jan 2022 03:32:02 +0000</pubDate>
      <link>https://dev.to/eloymanuelch/que-es-mgpanel-3e0d</link>
      <guid>https://dev.to/eloymanuelch/que-es-mgpanel-3e0d</guid>
      <description>&lt;p&gt;Holaaa programador... Arranco este 2022 respondiendo esta pregunta, &lt;strong&gt;¿qué es MGPanel?&lt;/strong&gt; si es primera vez que escuchas esta palabra, te felicito, porque esa curiosidad es la que nos caracteriza a nosotros los programadores, siempre estamos en búsqueda de nuevas herramientas para hacer mejor el trabajo que hacemos cada día. &lt;/p&gt;

&lt;p&gt;Directo al grano, MGPanel es un Sistema de Gestión Web o CMS como también lo conocemos en nuestro mundo, sii digamos que como wordpress, joomla o cualquier otro CMS con el que seguro has trabajado, pero con la diferencia que MGPanel fue pensado para hacer la vida más fácil al programador.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UiQLOoZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxi4ypbzg3wx9lwxrawf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UiQLOoZ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qxi4ypbzg3wx9lwxrawf.gif" alt="Image description" width="306" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¿Cómo es eso? bueno MGPanel fue creado para que los programadores que desarrollan web tengan mayor libertad para programar, porque realmente construyen todo el sitio web con sus propios html, css y javascript, es decir no funciona a base de plantillas y plugins sino que el programador desarrolla el 100% de su código teniendo más control sobre el mismo.&lt;/p&gt;

&lt;p&gt;¿y eso no es más trabajo para el programador? eso parece al principio, pero realmente las apariencias engañan y más cuando hablamos de clientes (del mundo real que piden 1000 cambios) a largo plazo, a menos que seas de los programadores que desarrollan y crean las plantillas para wordpress no tienes muchos problemas cuando el cliente pida cambios en la estructura de la plantilla, pero si ese no es tu caso, sabes que es así y te lo digo porque lo padecí muchas veces, que hacer un simple cambio en la estructura de estos otros CMS se puede convertir una tortura y mucho tiempo de ejecución.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9qw0gjnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l18rn1fc3id0u13e0uvh.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9qw0gjnP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l18rn1fc3id0u13e0uvh.gif" alt="Image description" width="498" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A que voy con esto, que mantener una sitio web, estable, con los cambios regulares que solicitan los clientes, con nuevos aplicativos (o plugins como los de otros CMS), puede convertirse en un dolor de cabeza para ti y por su puesto para el cliente, y por eso, es la razón principal que muchos programadores no son capaces de mantener clientes a largo plazo porque no es rentable para el programador, ni lo es grato para el cliente.&lt;/p&gt;

&lt;p&gt;Aquí es donde juega un papel muy importante MGPanel, ya que si el código del sitio web ha sido escrito por ti, cuando el cliente pida cambios, en cuestión de minutos y sin importar dónde estes lo puedes realizar sin problemas. Si el cliente pide un aplicativo o módulo nuevo, también lo puedes programar y agregar al sitio web activo, sin preocuparte si la versión del plugin es diferente a la del sistema o que no sean compatibles y pare de contar problemas que seguro has vivido con otros CMS, porque ahora tu mismo desarrollas los aplicativos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u-RTXfJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41tbrk4q6s9hn5831hrq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u-RTXfJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/41tbrk4q6s9hn5831hrq.png" alt="Image description" width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¿Cuál es con contra de todo esto? ¡qué debes programar de verdad! aquí no se trata de arrastras y soltar que tanto daño ha hecho a los programadores, ojo esos aplicativos están bien para clientes finales o para aquellos que no quieren contratar a un programador para que le haga su sitio web, pero si tu eres programador de verdad no dejes de escribir código y darle el valor real a tu profesión.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ok6zL-jE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urwzu0xt3snotrq4z0wz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ok6zL-jE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/urwzu0xt3snotrq4z0wz.gif" alt="Image description" width="220" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como programador y tu colega te invito a que te animes a probar MGPanel, creando tu primer sitio aquí: &lt;a href="https://app.mgpanel.org/signup"&gt;https://app.mgpanel.org/signup&lt;/a&gt; es totalmente GRATIS, así que no hay nada que perder.&lt;/p&gt;

&lt;p&gt;Si te gustó o quieres saber más de MGPanel sígueme en DEV &lt;a class="mentioned-user" href="https://dev.to/eloymanuelch"&gt;@eloymanuelch&lt;/a&gt; o comenta este post, igualmente voy a seguir subiendo por aquí contenido de valor para tu crecimiento como programador web.&lt;/p&gt;

&lt;p&gt;¡Nos vemos!&lt;/p&gt;

&lt;p&gt;Instagram: &lt;a href="https://www.instagram.com/eloymanuelch/"&gt;@eloymanuelch&lt;/a&gt;&lt;/p&gt;

</description>
      <category>mgpanel</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Useful JavaScript Code Snippets</title>
      <author>Kiran Raj R</author>
      <pubDate>Sun, 02 Jan 2022 02:59:01 +0000</pubDate>
      <link>https://dev.to/kiranrajvjd/useful-javascript-code-snippets-4lki</link>
      <guid>https://dev.to/kiranrajvjd/useful-javascript-code-snippets-4lki</guid>
      <description>&lt;h4&gt;
  &lt;a href="#calculate-mouse-position-with-respect-to-an-element"&gt;
  &lt;/a&gt;
  Calculate mouse position with respect to an element.
&lt;/h4&gt;

&lt;p&gt;Element.getBoundingClientRect() method returns a DOMRect object. DOMRect object represents a smallest rectangle which contains the entire element including its padding and border-width, which also contain information about size of the element like the width and height and position of the element relative to the viewport.&lt;/p&gt;

&lt;p&gt;To calculate the position of mouse click event with respect to an element on which the event occur, first we need the position of the click event with respect to the main element(here it is the document). e.clientX and e.clientY will help you to get that value, it will return the x axis and y axis value with respect to the top left corner of the main element. Secondly we need to get the position of the element with respect to the main element, left and top properties of the getBoundingClientRect() method will help to get that value. Substracting the left/top values from clientX/clientY values will give the position of mouse click with respect to the element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mousedown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rectVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;rectVal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;rectVal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#get-the-position-of-an-element-relative-to-the-document"&gt;
  &lt;/a&gt;
  Get the position of an element relative to the document
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ele&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Here ScrollLeft / ScrollTop measures the width and height of the document even if some part of the document is scrolled out. &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#toggle-password-show-function"&gt;
  &lt;/a&gt;
  Toggle password show function
&lt;/h4&gt;

&lt;p&gt;Input type "password" make the entered text hidden by replacing each letter with an asterisk ("*") or a dot ("•"). If we change the type of the input into text we will be able to see the actual text. This approach is used to make the password text visible, we use a button, when clicked, will checks the attribute of the input field. If it is "password" we will set it to "text" and the password will be visible, when button is clicked again we will set the type back to password.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;classs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pass&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tbtn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Toggle&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="nx"&gt;JavaScript&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;passInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.pass&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.tbtn&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;toggleBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;passInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputType&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;passInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;inputType&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;passInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;password&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#scroll-to-top-of-the-page"&gt;
  &lt;/a&gt;
  Scroll to top of the page
&lt;/h4&gt;

&lt;p&gt;ScrollTo(x,y) method cause the web page to scroll to the value specified by the method with respect to the document's top left corner. i.e. window.scrollTo(0, 0), cause the page to scroll to a position which is 0px from left and 0px from top relative to the document's top left corner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#toggle-visibility-of-an-element"&gt;
  &lt;/a&gt;
  Toggle visibility of an element
&lt;/h4&gt;

&lt;p&gt;We can remove an element from the DOM just by setting the CSS display property of the element into "none", we can create a toggle to set the display value from none to block or block to none using the conditional operator in JavaScript. Conditional operator takes three operands: a condition followed by a question mark, then an expression to execute if the condition is truth followed by a colon and then an expression to execute if the condition is false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;visibility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;displayType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;displayType&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;block&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#detecting-dark-mode-in-browser"&gt;
  &lt;/a&gt;
  Detecting Dark mode in browser
&lt;/h4&gt;

&lt;p&gt;First we detect if matchMedia object exists in the browser, if not that means the browser does not support dark mode. Next we need to check the current color scheme, &lt;code&gt;window.matchMedia('(prefers-color-scheme: dark)').matches&lt;/code&gt; will return true if dark mode is enabled.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDarkMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feedback welcomed, Thanks in advance. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Hashicorp Vault | What &amp; Why? | All you need to know about Vault | Secrets management for roadrunners</title>
      <author>Tharun Shiv</author>
      <pubDate>Sun, 02 Jan 2022 02:29:08 +0000</pubDate>
      <link>https://dev.to/developertharun/hashicorp-vault-what-why-all-you-need-to-know-about-vault-secrets-management-for-roadrunners-3j1n</link>
      <guid>https://dev.to/developertharun/hashicorp-vault-what-why-all-you-need-to-know-about-vault-secrets-management-for-roadrunners-3j1n</guid>
      <description>&lt;p&gt;Video version:&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4FeIlpuQY08"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Podcast version:&lt;br&gt;
&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/5Eof2mAvdsbXip66jyNYjb"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hashicorp-vault"&gt;
  &lt;/a&gt;
  Hashicorp Vault
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--raUIJUVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gcp6356v8m47z3tlnge.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--raUIJUVP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gcp6356v8m47z3tlnge.PNG" alt="Mind Map" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hashicorp Vault is an opensource software from Hashicorp. Vault is used to manage secrets. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-secret"&gt;
  &lt;/a&gt;
  What is a secret?
&lt;/h3&gt;

&lt;p&gt;Secrets can be considered as anything that one uses to authenticate, authorize themselves. Secrets are also pieces of information that are private to any user. &lt;/p&gt;

&lt;p&gt;Examples of secrets:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Username, password&lt;/li&gt;
&lt;li&gt;API Tokens&lt;/li&gt;
&lt;li&gt;Database credentials&lt;/li&gt;
&lt;li&gt;TLS certificates&lt;/li&gt;
&lt;li&gt;Credit card information&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#state-of-secret-sprawl"&gt;
  &lt;/a&gt;
  State of secret sprawl
&lt;/h3&gt;

&lt;p&gt;Applications use a lot of credentials to connect to various external services like databases, message brokers &amp;amp; cloud services. These credentials tend to stay in the config files, source code, version control systems like Github, log files, and plain text files. This form of exposing the secrets and making them vulnerable to unintended access is known as 'state of secret sprawl'. Vault tries to solve this problem.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-does-vault-solve-this"&gt;
  &lt;/a&gt;
  How does Vault solve this?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_syvC_OZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0kjzc4ogayfv3gjo38p.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_syvC_OZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x0kjzc4ogayfv3gjo38p.PNG" alt="Mind map" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Centralization of secrets:&lt;/strong&gt;&lt;br&gt;
Vault stores secrets in a centralized set of servers. This way, the process makes sure that the secrets are saved only at a single source and not at several places, which led to the 'state of secret sprawl'.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Access control via ACLS:&lt;/strong&gt;&lt;br&gt;
Vault provides the capability to create access policies for the users who will be authenticated &amp;amp; authorized to access the vault. The vault operator can decide what capabilities the user will have with the access that he has to the vault. For example, users with only read access to the public key can be created. Admin user who has the access to create new root certificates can be created. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Audits:&lt;/strong&gt;&lt;br&gt;
Vault logs every interaction of the users with Vault. This way, the audits are present on who generated, updated, accessed, revoked the credentials. In conventional credential management, this process is minimal or absent.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Encryption of secrets:&lt;/strong&gt;&lt;br&gt;
Vault provides several options to the user to choose the type of storage backend that the user needs, according to their use cases.  Vault makes sure to encrypt the secrets stored at rest/in transit. This makes Vault more secure as Vault is less vulnerable to the hacked data being understood.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Dynamic secrets:&lt;/strong&gt;&lt;br&gt;
Vault provides an ability to create dynamic secrets that are short-lived TTL specific to individual clients such that the credentials can be easily revoked or rotated with a minimum possible blast radius. Here, a client can be a single instance of the application that is running anywhere in the infra. The credentials can be unique to that client, managed easily, and in case the credentials are compromised, due to the short-lived TTL either the credentials expire or they can also be revoked and a new set of credentials can be provided.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Encryption as a service&lt;/strong&gt;&lt;br&gt;
When we store confidential data like credit card details, phone numbers, Govt. ID card details of the users, which are very common, we do not want to put the users at risk of data theft. In case the backend data gets compromised, the hacker will find the details in plain text. Instead, it is better to encrypt the user's data and store it in the backend. There are various programming languages with various libraries that can do this encryption and decryption. Vault provides encryption as a service, where it exposes APIs using which the user can encrypt &amp;amp; decrypt the data and store it in his backend of choice. This makes sure that Vault does the heavy lifting of managing the keys by providing them, rotating them, encrypting, and decrypting the data, thereby making sure uniformity in the cryptographic operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. High availability:&lt;/strong&gt;&lt;br&gt;
We all are aware of how crucial secret management in an organization is. In fact, it could also turn out to be a single point of failure unless the applications cache the credentials for a while. This makes us realize that we need more than one Vault instance running to have high availability. Vault also comes with HA, where you could have three instances of Vault in which one of them is elected master. The client can query any of the nodes, and the request is proxied by Vault to the actual master node and the master node sends back the response in the same flow.&lt;/p&gt;

&lt;p&gt;In the upcoming episodes, we will look into &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The setup of Vault&lt;/li&gt;
&lt;li&gt;Deep dive into the individual features of Vault&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Links that help:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://coggle.it/diagram/YdBcEtuO1UXy-FKH/t/hashicorp-vault/cbe6352d534de9839c2b94fc6714a33d5b9948b91e4ddbab8d6f4867bcda4fd4"&gt;Link to the mind map used in this episode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vaultproject.io"&gt;Link to Hashicorp Vault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=VYfl-DpZ5wM"&gt;An Introduction to Hashicorp Vault by Armon&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can find more articles here: &lt;a href="https://www.tharunshiv.com"&gt;https://www.tharunshiv.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Roadrunners is a series that is aimed at delivering concepts as precisely as possible. Here, a roadrunner is referred to as a person who does things super fast &amp;amp; efficiently. Are you a roadrunner?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thank you&lt;/p&gt;

</description>
      <category>security</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>devops</category>
    </item>
    <item>
      <title>System Design Interview Question: Designing a URL Shortening Service</title>
      <author>Arslan Ahmad</author>
      <pubDate>Sun, 02 Jan 2022 01:25:11 +0000</pubDate>
      <link>https://dev.to/arslan_ah/system-design-interview-question-designing-a-url-shortening-service-4029</link>
      <guid>https://dev.to/arslan_ah/system-design-interview-question-designing-a-url-shortening-service-4029</guid>
      <description>&lt;p&gt;&lt;em&gt;How to design a URL shortening service like TinyURL?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Software engineers usually struggle with system design interviews partly due to their lack of experience developing large-scale systems and partly due to the unstructured nature of system design interviews. Even advanced and experienced developers find system design interviews challenging since the design questions are open-ended and have no standard answer. To help with that, in my previous &lt;a href="https://designgurus.org/blog/step-by-step-guide"&gt;post&lt;/a&gt;, we discussed a step-by-step approach for solving system design interview questions. Let’s follow that approach to solve a classical system design question: Designing a URL shortening service like TinyURL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Question Statement:&lt;/strong&gt; Let’s design a URL shortening service like TinyURL. This service will provide short aliases redirecting to long URLs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-why-do-we-need-url-shortening"&gt;
  &lt;/a&gt;
  1. Why do we need URL shortening?
&lt;/h2&gt;

&lt;p&gt;URL shortening is used to create shorter aliases for long URLs. Let’s call these shortened aliases “short links.” Users are redirected to the original URL when they hit these short links. Short links save a lot of space when displayed, printed, messaged, or tweeted. Additionally, users are less likely to mistype shorter URLs.&lt;br&gt;
For example, when we shortened this page through TinyURL:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.designgurus.org/course/grokking-the-system-design-interview"&gt;https://www.designgurus.org/course/grokking-the-system-design-interview&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We got:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://tinyurl.com/vzet59pa"&gt;https://tinyurl.com/vzet59pa&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The shortened URL is nearly one-third the size of the actual URL.&lt;/p&gt;

&lt;p&gt;URL shortening is used to optimize links across devices, track individual links to analyze audience, measure ad campaigns’ performance, or hide affiliated original URLs.&lt;br&gt;
If you haven’t used tinyurl.com before, please try creating a new shortened URL and spend some time going through the various options their service offers. This will help you a lot in understanding this chapter.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-requirements-and-goals-of-the-system"&gt;
  &lt;/a&gt;
  2. Requirements and Goals of the System
&lt;/h2&gt;

&lt;p&gt;Our URL shortening system should meet the following requirements:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#functional-requirements"&gt;
  &lt;/a&gt;
  Functional Requirements:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Given a URL, our service should generate a shorter and unique alias of it. This is called a short link. This link should be short enough to be easily copied and pasted into applications.&lt;/li&gt;
&lt;li&gt;When users access a short link, our service should redirect them to the original link.&lt;/li&gt;
&lt;li&gt;Users should optionally be able to pick a custom short link for their URL.&lt;/li&gt;
&lt;li&gt;Links will expire after a standard default timespan. Users should be able to specify the expiration time.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#nonfunctional-requirements"&gt;
  &lt;/a&gt;
  Non-Functional Requirements:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Such a system should be highly available. This is required because, if our service is down, all the URL redirections will start failing.&lt;/li&gt;
&lt;li&gt;URL redirection should happen in real-time with minimal latency.&lt;/li&gt;
&lt;li&gt;Shortened links should not be guessable (not predictable).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#extended-requirements"&gt;
  &lt;/a&gt;
  Extended Requirements:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Analytics; e.g., how many times a redirection happened?&lt;/li&gt;
&lt;li&gt;Our service should also be accessible through REST APIs by 
other services.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#3-capacity-estimation-and-constraints"&gt;
  &lt;/a&gt;
  3. Capacity Estimation and Constraints
&lt;/h2&gt;

&lt;p&gt;Our system will be read-heavy. There will be lots of redirection requests compared to new URL shortenings. Let’s assume a 100:1 ratio between read and write.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#traffic-estimates"&gt;
  &lt;/a&gt;
  Traffic estimates
&lt;/h3&gt;

&lt;p&gt;Assuming, we will have 500M new URL shortenings per month, with 100:1 read/write ratio, we can expect 50B redirections during the same period: &lt;strong&gt;100 * 500M =&amp;gt; 50B&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What would be Queries Per Second (QPS) for our system? New URLs shortenings per second: &lt;strong&gt;500 million / (30 days * 24 hours * 3600 seconds) = ~200 URLs/s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Considering 100:1 read/write ratio, URLs redirections per second will be: &lt;strong&gt;100 * 200 URLs/s = 20K/s&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#storage-estimates"&gt;
  &lt;/a&gt;
  Storage estimates
&lt;/h3&gt;

&lt;p&gt;Let’s assume we store every URL shortening request (and associated shortened link) for 5 years. Since we expect to have 500M new URLs every month, the total number of objects we expect to store will be 30 billion: &lt;strong&gt;500 million * 5 years * 12 months = 30 billion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s assume that each stored object will be approximately 500 bytes (just a ballpark estimate–we will dig into it later). We will need 15TB of total storage: &lt;strong&gt;30 billion * 500 bytes = 15 TB&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bandwidth-estimates"&gt;
  &lt;/a&gt;
  Bandwidth estimates
&lt;/h3&gt;

&lt;p&gt;For write requests, since we expect 200 new URLs every second, total incoming data for our service will be 100KB per second: &lt;strong&gt;200 * 500 bytes = 100 KB/s&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For read requests, since every second we expect ~20K URLs redirections, total outgoing data for our service would be 10MB per second: &lt;strong&gt;20K * 500 bytes = ~10 MB/s&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#memory-estimates"&gt;
  &lt;/a&gt;
  Memory estimates
&lt;/h3&gt;

&lt;p&gt;If we want to cache some of the hot URLs that are frequently accessed, how much memory will we need to store them? If we follow the 80–20 rule, meaning 20% of URLs generate 80% of traffic, we would like to cache these 20% hot URLs.&lt;/p&gt;

&lt;p&gt;Since we have 20K requests per second, we will be getting 1.7 billion requests per day: &lt;strong&gt;20K * 3600 seconds * 24 hours = ~1.7 billion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To cache 20% of these requests, we will need 170GB of memory: &lt;strong&gt;0.2 * 1.7 billion * 500 bytes = ~170GB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One thing to note here is that since there will be many duplicate requests (of the same URL), our actual memory usage will be less than 170GB.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-system-apis"&gt;
  &lt;/a&gt;
  4. System APIs
&lt;/h2&gt;

&lt;p&gt;We can have SOAP or REST APIs to expose the functionality of our service. Following could be the definitions of the APIs for creating and deleting URLs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;createURL(api_dev_key, original_url, custom_alias=None, 
user_name=None, expire_date=None)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;br&gt;
api_dev_key (string): The API developer key of a registered account. This will be used to, among other things, throttle users based on their allocated quota.&lt;br&gt;
original_url (string): Original URL to be shortened.&lt;br&gt;
custom_alias (string): Optional custom key for the URL.&lt;br&gt;
user_name (string): Optional user name to be used in the encoding.&lt;br&gt;
expire_date (string): Optional expiration date for the shortened URL.&lt;br&gt;
&lt;strong&gt;Returns: (string)&lt;/strong&gt;&lt;br&gt;
A successful insertion returns the shortened URL; otherwise, it returns an error code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deleteURL(api_dev_key, url_key)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where “url_key” is a string representing the shortened URL to be retrieved; a successful deletion returns ‘URL Removed’.&lt;/p&gt;

&lt;p&gt;How do we detect and prevent abuse? A malicious user can put us out of business by consuming all URL keys in the current design. To prevent abuse, we can limit users via their api_dev_key. Each api_dev_key can be limited to a certain number of URL creations and redirections per some time period (which may be set to a different duration per developer key).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-database-design"&gt;
  &lt;/a&gt;
  5. Database Design
&lt;/h2&gt;

&lt;p&gt;A few observations about the nature of the data we will store:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We need to store billions of records.&lt;/li&gt;
&lt;li&gt;Each object we store is small (less than 1K).&lt;/li&gt;
&lt;li&gt;There are no relationships between records — other than storing which user created a URL.&lt;/li&gt;
&lt;li&gt;Our service is read-heavy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Database Schema:&lt;/strong&gt;&lt;br&gt;
We would need two tables: one for storing information about the URL mappings and one for the user’s data who created the short link.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7af3aQjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyu1fxdyksvkwlavo811.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7af3aQjr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lyu1fxdyksvkwlavo811.png" alt="URL Shortening DB Schema" width="463" height="174"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What kind of database should we use? Since we anticipate storing billions of rows, and we don’t need to use relationships between objects — a NoSQL store like DynamoDB, Cassandra, or Riak is a better choice. A NoSQL choice would also be easier to scale.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-basic-system-design-and-algorithm"&gt;
  &lt;/a&gt;
  6. Basic System Design and Algorithm
&lt;/h2&gt;

&lt;p&gt;The problem we are solving here is how to generate a short and unique key for a given URL.&lt;/p&gt;

&lt;p&gt;In the TinyURL example in Section 1, the shortened URL is “&lt;a href="https://tinyurl.com/vzet59pa%E2%80%9D"&gt;https://tinyurl.com/vzet59pa”&lt;/a&gt;. The last eight characters of this URL constitute the short key we want to generate. We’ll explore two solutions here:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-encoding-actual-url"&gt;
  &lt;/a&gt;
  a. Encoding actual URL
&lt;/h3&gt;

&lt;p&gt;We can compute a unique hash (e.g., MD5 or SHA256, etc.) of the given URL. The hash can then be encoded for display. This encoding could be base36 ([a-z ,0–9]) or base62 ([A-Z, a-z, 0–9]) and if we add ‘+’ and ‘/’ we can use Base64 encoding. A reasonable question would be, what should be the length of the short key? 6, 8, or 10 characters?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Using base64 encoding, a 6 letters long key would result in 64⁶ = ~68.7 billion possible strings.&lt;br&gt;
Using base64 encoding, an 8 letters long key would result in 64⁸ = ~281 trillion possible strings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With 68.7B unique strings, let’s assume six letter keys would suffice for our system.&lt;/p&gt;

&lt;p&gt;If we use the MD5 algorithm as our hash function, it will produce a 128-bit hash value. After base64 encoding, we’ll get a string having more than 21 characters (since each base64 character encodes 6 bits of the hash value). Now we only have space for 6 (or 8) characters per short key; how will we choose our key then? We can take the first 6 (or 8) letters for the key. This could result in key duplication; to resolve that, we can choose some other characters out of the encoding string or swap some characters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the different issues with our solution?&lt;/strong&gt; We have the following couple of problems with our encoding scheme:&lt;br&gt;
If multiple users enter the same URL, they can get the same shortened URL, which is not acceptable.&lt;/p&gt;

&lt;p&gt;What if parts of the URL are URL-encoded? e.g., &lt;a href="http://www.designgurus.org/distributed.php?id=design"&gt;http://www.designgurus.org/distributed.php?id=design&lt;/a&gt;, and &lt;a href="http://www.designgurus.org/distributed.php%3Fid%3Ddesign"&gt;http://www.designgurus.org/distributed.php%3Fid%3Ddesign&lt;/a&gt; are identical except for the URL encoding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Workaround for the issues:&lt;/strong&gt; We can append an increasing sequence number to each input URL to make it unique and then generate its hash. We don’t need to store this sequence number in the database. Possible problems with this approach could be an ever-increasing sequence number. Can it overflow? Appending an increasing sequence number will also impact the performance of the service.&lt;/p&gt;

&lt;p&gt;Another solution could be to append the user id (which should be unique) to the input URL. However, if the user has not signed in, we would have to ask the user to choose a uniqueness key. Even after this, if we have a conflict, we have to keep generating a key until we get a unique one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--emiqnhhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rah0j50hq8nbu4skj623.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--emiqnhhB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rah0j50hq8nbu4skj623.png" alt="Image description" width="558" height="269"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#b-generating-keys-offline"&gt;
  &lt;/a&gt;
  b. Generating keys offline
&lt;/h3&gt;

&lt;p&gt;We can have a standalone Key Generation Service (KGS) that generates random six-letter strings beforehand and stores them in a database (let’s call it key-DB). Whenever we want to shorten a URL, we will take one of the already-generated keys and use it. This approach will make things quite simple and fast. Not only are we not encoding the URL, but we won’t have to worry about duplications or collisions. KGS will make sure all the keys inserted into key-DB are unique&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can concurrency cause problems?&lt;/strong&gt; As soon as a key is used, it should be marked in the database to ensure that it is not used again. If there are multiple servers reading keys concurrently, we might get a scenario where two or more servers try to read the same key from the database. How can we solve this concurrency problem?&lt;/p&gt;

&lt;p&gt;Servers can use KGS to read/mark keys in the database. KGS can use two tables to store keys: one for keys that are not used yet, and one for all the used keys. As soon as KGS gives keys to one of the servers, it can move them to the used keys table. KGS can always keep some keys in memory to quickly provide them whenever a server needs them.&lt;/p&gt;

&lt;p&gt;For simplicity, as soon as KGS loads some keys in memory, it can move them to the used keys table. This ensures each server gets unique keys. If KGS dies before assigning all the loaded keys to some server, we will be wasting those keys–which could be acceptable, given the huge number of keys we have.&lt;/p&gt;

&lt;p&gt;KGS also has to make sure not to give the same key to multiple servers. For that, it must synchronize (or get a lock on) the data structure holding the keys before removing keys from it and giving them to a server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What would be the key-DB size?&lt;/strong&gt; With base64 encoding, we can generate 68.7B unique six letters keys. If we need one byte to store one alpha-numeric character, we can store all these keys in:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;6 (characters per key) * 68.7B (unique keys) = 412 GB.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Isn’t KGS a single point of failure?&lt;/strong&gt; Yes, it is. To solve this, we can have a standby replica of KGS. Whenever the primary server dies, the standby server can take over to generate and provide keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can each app server cache some keys from key-DB?&lt;/strong&gt; Yes, this can surely speed things up. Although, in this case, if the application server dies before consuming all the keys, we will end up losing those keys. This can be acceptable since we have 68B unique six-letter keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How would we perform a key lookup?&lt;/strong&gt; We can look up the key in our database to get the full URL. If it’s present in the DB, issue an “HTTP 302 Redirect” status back to the browser, passing the stored URL in the “Location” field of the request. If that key is not present in our system, issue an “HTTP 404 Not Found” status or redirect the user back to the homepage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Should we impose size limits on custom aliases?&lt;/strong&gt; Our service supports custom aliases. Users can pick any ‘key’ they like, but providing a custom alias is not mandatory. However, it is reasonable (and often desirable) to impose a size limit on a custom alias to ensure we have a consistent URL database. Let’s assume users can specify a maximum of 16 characters per customer key (as reflected in the above database schema).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Tv4b8jOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7f329cjancoewwr92x7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Tv4b8jOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k7f329cjancoewwr92x7.png" alt="Image description" width="611" height="245"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-data-partitioning-and-replication"&gt;
  &lt;/a&gt;
  7. Data Partitioning and Replication
&lt;/h2&gt;

&lt;p&gt;To scale out our DB, we need to partition it so that it can store information about billions of URLs. Therefore, we need to develop a partitioning scheme that would divide and store our data into different DB servers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-range-based-partitioning"&gt;
  &lt;/a&gt;
  a. Range Based Partitioning
&lt;/h3&gt;

&lt;p&gt;We can store URLs in separate partitions based on the hash key’s first letter. Hence we save all the URL hash keys starting with the letter ‘A’ (and ‘a’) in one partition, save those that start with the letter ‘B’ in another partition, and so on. This approach is called range-based partitioning. We can even combine certain less frequently occurring letters into one database partition. Thus, we should develop a static partitioning scheme to always store/find a URL in a predictable manner.&lt;/p&gt;

&lt;p&gt;The main problem with this approach is that it can lead to unbalanced DB servers. For example, we decide to put all URLs starting with the letter ‘E’ into a DB partition, but later we realize that we have too many URLs that start with the letter ‘E.’&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#b-hashbased-partitioning"&gt;
  &lt;/a&gt;
  b. Hash-Based Partitioning
&lt;/h3&gt;

&lt;p&gt;In this scheme, we take a hash of the object we are storing. We then calculate which partition to use based upon the hash. In our case, we can take the hash of the ‘key’ or the short link to determine the partition in which we store the data object.&lt;/p&gt;

&lt;p&gt;Our hashing function will randomly distribute URLs into different partitions (e.g., our hashing function can always map any ‘key’ to a number between [1…256]). This number would represent the partition in which we store our object.&lt;/p&gt;

&lt;p&gt;This approach can still lead to overloaded partitions, which can be solved using &lt;a href="https://medium.com/interviewnoodle/how-to-use-consistent-hashing-in-a-system-design-interview-b738be3a1ae3"&gt;Consistent Hashing&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-cache"&gt;
  &lt;/a&gt;
  8. Cache
&lt;/h2&gt;

&lt;p&gt;We can cache URLs that are frequently accessed. We can use any off-the-shelf solution like Memcached, which can store full URLs with their respective hashes. Thus, the application servers, before hitting the backend storage, can quickly check if the cache has the desired URL.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How much cache memory should we have?&lt;/strong&gt; We can start with 20% of daily traffic and, based on clients’ usage patterns, we can adjust how many cache servers we need. As estimated above, we need 170GB of memory to cache 20% of daily traffic. Since a modern-day server can have 256GB of memory, we can easily fit all the cache into one machine. Alternatively, we can use a couple of smaller servers to store all these hot URLs.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Which cache eviction policy would best fit our needs?&lt;/strong&gt; When the cache is full, and we want to replace a link with a newer/hotter URL, how would we choose? Least Recently Used (LRU) can be a reasonable policy for our system. Under this policy, we discard the least recently used URL first. We can use a Linked Hash Map or a similar data structure to store our URLs and Hashes, which will also keep track of the URLs that have been accessed recently.&lt;/p&gt;

&lt;p&gt;To further increase the efficiency, we can replicate our caching servers to distribute the load between them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can each cache replica be updated?&lt;/strong&gt; Whenever there is a cache miss, our servers would be hitting a backend database. Whenever this happens, we can update the cache and pass the new entry to all the cache replicas. Each replica can update its cache by adding the new entry. If a replica already has that entry, it can simply ignore it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2MumWxeF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v1xri3msy5hn0zbb58g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2MumWxeF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1v1xri3msy5hn0zbb58g.png" alt="Image description" width="700" height="345"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-load-balancer-lb"&gt;
  &lt;/a&gt;
  9. Load Balancer (LB)
&lt;/h2&gt;

&lt;p&gt;We can add a Load balancing layer at three places in our system:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Between Clients and Application servers&lt;/li&gt;
&lt;li&gt;Between Application Servers and database servers&lt;/li&gt;
&lt;li&gt;Between Application Servers and Cache servers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Initially, we could use a simple Round Robin load balancer that distributes incoming requests equally among backend servers. This LB is simple to implement and does not introduce any overhead. Another benefit is that if a server is dead, LB will take it out of the rotation and stop sending any traffic to it.&lt;/p&gt;

&lt;p&gt;A problem with Round Robin LB is that we do not consider the server load. As a result, if a server is overloaded or slow, the LB will not stop sending new requests to that server. To handle this, a more intelligent LB solution can be placed that periodically queries the backend server about its load and adjusts traffic based on that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-purging-or-db-cleanup"&gt;
  &lt;/a&gt;
  10. Purging or DB cleanup
&lt;/h2&gt;

&lt;p&gt;Should entries stick around forever, or should they be purged? If a user-specified expiration time is reached, what should happen to the link?&lt;/p&gt;

&lt;p&gt;If we chose to continuously search for expired links to remove them, it would put a lot of pressure on our database. Instead, we can slowly remove expired links and do a lazy cleanup. Our service will ensure that only expired links will be deleted, although some expired links can live longer but will never be returned to users.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Whenever a user tries to access an expired link, we can delete the link and return an error to the user.&lt;/li&gt;
&lt;li&gt;A separate Cleanup service can run periodically to remove expired links from our storage and cache. This service should be very lightweight and scheduled to run only when the user traffic is expected to be low.&lt;/li&gt;
&lt;li&gt;We can have a default expiration time for each link (e.g., two years).&lt;/li&gt;
&lt;li&gt;After removing an expired link, we can put the key back in the key-DB to be reused.&lt;/li&gt;
&lt;li&gt;Should we remove links that haven’t been visited in some length of time, say six months? This could be tricky. Since storage is getting cheap, we can decide to keep links forever. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cwz9DY4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kx2nqo85loq0kup8l36a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cwz9DY4D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kx2nqo85loq0kup8l36a.png" alt="Image description" width="700" height="337"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-security-and-permissions"&gt;
  &lt;/a&gt;
  11. Security and Permissions
&lt;/h2&gt;

&lt;p&gt;Can users create private URLs or allow a particular set of users to access a URL?&lt;/p&gt;

&lt;p&gt;We can store the permission level (public/private) with each URL in the database. We can also create a separate table to store UserIDs that have permission to see a specific URL. If a user does not have permission and tries to access a URL, we can send an error (HTTP 401) back. Given that we are storing our data in a NoSQL wide-column database like Cassandra, the key for the table storing permissions would be the ‘Hash’ (or the KGS generated ‘key’). The columns will store the UserIDs of those users that have permission to see the URL.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-summary"&gt;
  &lt;/a&gt;
  12. Summary
&lt;/h2&gt;

&lt;p&gt;In my experience, every successful software developer has followed a systematic approach to solve a system design question during an interview. The current interview process requires us to present a reasonable solution within 45 minutes and the key to success is being organized during the system design interview. Hopefully, this step-by-step approach will help you stay on track during the interview.&lt;/p&gt;

&lt;p&gt;Please take a look at &lt;a href="https://www.designgurus.org/course/grokking-the-system-design-interview"&gt;Grokking the System Design Interview&lt;/a&gt; for more system design interview questions like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Designing a file sharing service like Google Drive or Dropbox.&lt;/li&gt;
&lt;li&gt;Designing a popular messaging service like Facebook Messenger.&lt;/li&gt;
&lt;li&gt;Designing popular social network sites like Twitter or Facebook.&lt;/li&gt;
&lt;li&gt;Designing a global video streaming service like Youtube.&lt;/li&gt;
&lt;li&gt;Designing a global ride hailing service like Uber.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To learn software architecture and practice advanced system design interview questions take a look at &lt;a href="https://www.designgurus.org/course/grokking-the-advanced-system-design-interview"&gt;Grokking the Advanced System Design Interview&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>career</category>
      <category>distributedsystems</category>
      <category>architecture</category>
      <category>beginners</category>
    </item>
    <item>
      <title>I've Been Contributing to Ruby Documentation</title>
      <author>Burdette Lamar</author>
      <pubDate>Sat, 01 Jan 2022 23:49:03 +0000</pubDate>
      <link>https://dev.to/burdettelamar/ive-been-contributing-to-ruby-documentation-3o82</link>
      <guid>https://dev.to/burdettelamar/ive-been-contributing-to-ruby-documentation-3o82</guid>
      <description>&lt;p&gt;tl;dr? -- Cut to &lt;a href="#the-chase"&gt;The Chase&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Having spent 40 years in the software industry -- as a documentor, developer, and test automator -- I can't see that any of the work I did, however relevant at the time, survives:  &lt;a href="https://www.poetryfoundation.org/poems/46565/ozymandias"&gt;Nothing beside remains&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Well, it's now almost five years since I got retired.  For the first three of those, I worked on projects of my own, blogged, posted here, and contributed some to Ruby's spec project.  As for the posts to my blog and posts here, it's amazing how quickly the search engines learn to ignore your posts and cast them into the darkness-- think &lt;a href="https://en.wikipedia.org/wiki/Redshift"&gt;red shift&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Then in September 2019 I came to my senses, and started doing something that will last: contributing enhanced RDoc for &lt;a href="https://github.com/ruby/ruby"&gt;the Ruby project itself&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-chase"&gt;
  &lt;/a&gt;
  The Chase
&lt;/h3&gt;

&lt;p&gt;So far, in the Ruby documentation I've:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added "What's Here" sections for about 20 classes and modules.&lt;/li&gt;
&lt;li&gt;Re-written the introductory material for about 15 classes and modules.&lt;/li&gt;
&lt;li&gt;Re-written entirely the methods documentation for about 15 classes.&lt;/li&gt;
&lt;li&gt;Added separate documents for bsearch, dig, and implicit conversion.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From time to time I'll post here, linking to some of these changes.&lt;/p&gt;

&lt;p&gt;Happy new year!&lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rdoc</category>
      <category>documentation</category>
    </item>
  </channel>
</rss>
